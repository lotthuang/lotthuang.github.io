{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u8ffd\u5bfb\u501a\u5929\u5251,\u4e3a\u793e\u4f1a\u8d21\u732e\u4e00\u70b9\u529b\u91cf \u4e00 \u501a\u5929\u5251 \u867d\u7136\u672c\u9886\u4f4e\u5fae\u4e0d\u914d\u62e5\u6709,\u4f46\u4ecd\u662f\u559c\u6b22 \u6309\u8010\u4e0d\u4f4f\u5411\u5f80\u4e4b\u60c5, \u975e\u8981\u53bb\u5bfb\u4e00\u5bfb\u4f20\u8bf4\u4e2d\u7684\u501a\u5929\u5251. \u7537\u5b50\u6c49\u5927\u4e08\u592b,\u7b2c\u4e00\u8bba\u4eba\u54c1\u5fc3\u80a0,\u7b2c\u4e8c\u8bba\u624d\u5e72\u4e8b\u4e1a,\u7b2c\u4e09\u8bba\u6587\u5b66\u6b66\u529f. \u4fa0\u4e4b\u5927\u8005,\u4e3a\u56fd\u4e3a\u6c11. \u4e8c \u4eba\u751f\u611f\u609f \u603b\u7ed3\u662f\u8fdb\u6b65\u7684\u9636\u68af, \u5206\u4eab\u662f\u5feb\u4e50\u7684\u6e90\u6cc9. \u4f46\u884c\u597d\u4e8b, \u83ab\u95ee\u524d\u7a0b. \u540c\u65f6\u4e5f\u8981\u575a\u6301\u505a\u96be\u800c\u6b63\u786e\u7684\u4e8b. \u5c0f\u5fc3\u8c28\u614e, \u884c\u767e\u91cc\u8005\u534a\u4e5d\u5341. \u4e09 \u8054\u7cfb\u65b9\u5f0f WeChat: kyonon Email: xnszz@qq.com","title":"\u9996\u9875"},{"location":"#_1","text":"","title":"\u8ffd\u5bfb\u501a\u5929\u5251,\u4e3a\u793e\u4f1a\u8d21\u732e\u4e00\u70b9\u529b\u91cf"},{"location":"#_2","text":"\u867d\u7136\u672c\u9886\u4f4e\u5fae\u4e0d\u914d\u62e5\u6709,\u4f46\u4ecd\u662f\u559c\u6b22 \u6309\u8010\u4e0d\u4f4f\u5411\u5f80\u4e4b\u60c5, \u975e\u8981\u53bb\u5bfb\u4e00\u5bfb\u4f20\u8bf4\u4e2d\u7684\u501a\u5929\u5251. \u7537\u5b50\u6c49\u5927\u4e08\u592b,\u7b2c\u4e00\u8bba\u4eba\u54c1\u5fc3\u80a0,\u7b2c\u4e8c\u8bba\u624d\u5e72\u4e8b\u4e1a,\u7b2c\u4e09\u8bba\u6587\u5b66\u6b66\u529f. \u4fa0\u4e4b\u5927\u8005,\u4e3a\u56fd\u4e3a\u6c11.","title":"\u4e00 \u501a\u5929\u5251"},{"location":"#_3","text":"\u603b\u7ed3\u662f\u8fdb\u6b65\u7684\u9636\u68af, \u5206\u4eab\u662f\u5feb\u4e50\u7684\u6e90\u6cc9. \u4f46\u884c\u597d\u4e8b, \u83ab\u95ee\u524d\u7a0b. \u540c\u65f6\u4e5f\u8981\u575a\u6301\u505a\u96be\u800c\u6b63\u786e\u7684\u4e8b. \u5c0f\u5fc3\u8c28\u614e, \u884c\u767e\u91cc\u8005\u534a\u4e5d\u5341.","title":"\u4e8c \u4eba\u751f\u611f\u609f"},{"location":"#_4","text":"WeChat: kyonon Email: xnszz@qq.com","title":"\u4e09 \u8054\u7cfb\u65b9\u5f0f"},{"location":"daibuchong/","text":"\u5f85\u8865\u5145","title":"\u5f85\u8865\u5145"},{"location":"daibuchong/#_1","text":"","title":"\u5f85\u8865\u5145"},{"location":"chapter_1/10_virtual_machine_on_mac_m1_chip/","text":"\u6982\u8ff0 \u4e3a\u4ec0\u4e48 \u4e3a\u5565\u9700\u8981\u5728 Mac M1 \u82af\u7247\u4e0a\u5229\u7528 Qemu \u5b89\u88c5 Linux \u865a\u62df\u673a \u5176\u4ed6\u8f6f\u4ef6\u6536\u8d39\u6216\u8005\u4e0d\u652f\u6301. \u6bd4\u5982 VirtualBox \u4e0d\u652f\u6301 M1 \u82af\u7247\uff0c Parallels Desktop \u662f\u6536\u8d39\u8f6f\u4ef6 \u600e\u4e48\u529e 1 \u2013 Installing QEMU(\u5b89\u88c5 QEMU) The first step is to install QEMU, we are going to use Homebrew to install it on our machine. If you need help to install or use Homebrew, please read our article \u201cHow to Use Homebrew in Mac (OSX)\u201d. brew install qemu Once you have finished the installation on your local machine, you can double check the version using the qemu executable installed. The executable you should use will depend on what system are you currently running on. You can see a list of all the executables for each architecture that Homebrew has installed in our machine. $ ls /opt/homebrew/bin/qemu-* /opt/homebrew/bin/qemu-edid /opt/homebrew/bin/qemu-system-cris /opt/homebrew/bin/qemu-system-mips64el /opt/homebrew/bin/qemu-system-s390x /opt/homebrew/bin/qemu-img /opt/homebrew/bin/qemu-system-hppa /opt/homebrew/bin/qemu-system-mipsel /opt/homebrew/bin/qemu-system-sh4 /opt/homebrew/bin/qemu-io /opt/homebrew/bin/qemu-system-i386 /opt/homebrew/bin/qemu-system-nios2 /opt/homebrew/bin/qemu-system-sh4eb /opt/homebrew/bin/qemu-nbd /opt/homebrew/bin/qemu-system-loongarch64 /opt/homebrew/bin/qemu-system-or1k /opt/homebrew/bin/qemu-system-sparc /opt/homebrew/bin/qemu-storage-daemon /opt/homebrew/bin/qemu-system-m68k /opt/homebrew/bin/qemu-system-ppc /opt/homebrew/bin/qemu-system-sparc64 /opt/homebrew/bin/qemu-system-aarch64 /opt/homebrew/bin/qemu-system-microblaze /opt/homebrew/bin/qemu-system-ppc64 /opt/homebrew/bin/qemu-system-tricore /opt/homebrew/bin/qemu-system-alpha /opt/homebrew/bin/qemu-system-microblazeel /opt/homebrew/bin/qemu-system-riscv32 /opt/homebrew/bin/qemu-system-x86_64 /opt/homebrew/bin/qemu-system-arm /opt/homebrew/bin/qemu-system-mips /opt/homebrew/bin/qemu-system-riscv64 /opt/homebrew/bin/qemu-system-xtensa /opt/homebrew/bin/qemu-system-avr /opt/homebrew/bin/qemu-system-mips64 In our case we are running a MacBook using Apple M1 Pro chip . This chip belongs to the category of ARM processors family, therefore the architecture of our machine is AArch64 or ARM64 . Coming back to our main topic, having an ARM64 architecture system means that we should run the following and see something like what\u2019s shown below as the output. $ qemu-system-aarch64 --version QEMU emulator version 7.2.0 Copyright (c) 2003-2022 Fabrice Bellard and the QEMU Project developers You can check what architecture your system has by executing this: $ uname -m arm64 As you can see, in our system it return arm64. Check what your architecture is and stick to that executable, it will work for some commands like \"qemu-system-XXX --version\", but it\u2019s better to clarify this from the very beginning to avoid confusion. 2 \u2013 Download Debian (or any Linux Distribution) In order to be able to install an operating system running on a virtual machine in QEMU, you will need an ISO image containing the OS. If your system belongs to the ARM family, you can download the most recent Ubuntu version for ARM architectures here. Otherwise, for x86 families you can download it here. \u6211\u4eec\u5728 \u8fd9\u91cc \u4e0b\u8f7d debian \u7f51\u7edc\u5b89\u88c5 ISO \u6587\u4ef6 3 \u2013 Create empty image (\u5236\u4f5c\u955c\u50cf\u6587\u4ef6) ubuntu Create a QEMU empty image where to install your Ubuntu OS later. To do so, run the following command: $ qemu-img create -f raw ~/qemu/ubuntu-latest.raw 40G debian (\u6211\u6700\u7ec8\u7528\u7684\u662f qcow2 \u683c\u5f0f) $ qemu-img create -f qcow2 debian12.qcow2 50g 4 \u2013 Download pre-built EDK2 UEFI image for QEMU \u8fd9\u4e00\u6b65\u662f\u4e0b\u8f7d\u9884\u5148\u51c6\u5907\u7684\u597d\u7684 UEFI \u955c\u50cf\u6587\u4ef6, \u5e76\u4e14\u9700\u8981\u548c CPU \u67b6\u6784\u76f8\u7b26\u5408\uff0c \u6211\u4eec\u7684\u76ee\u6807\u662f\u5f97\u5230 QEMU_EFI.fd \u6587\u4ef6. \u901a\u8fc7 Google \u641c\u7d22, \u6211\u4eec\u627e\u5230\u4e86 qemu-efi-aarch64 qemu-efi-aarch64 is a build of EDK II for 64-bit ARM virtual machines. It includes full support for UEFI, including Secure Boot. \u5728 Debian Linux \u7cfb\u7edf\u4e2d\u5b89\u88c5\u8fd9\u4e2a\u5305\uff0c\u4f1a\u4ea7\u751f QEMU_EFI.fd \u6587\u4ef6 \u6211\u4eec\u76f4\u63a5\u4ece deb \u5305 \u6587\u4ef6\u91cc\u83b7\u53d6, \u5148\u4e0b\u8f7d qemu-efi-aarch64_2022.11-6_all.deb \u5305\uff0c\u7136\u540e\u8fdb\u884c\u89e3\u538b\uff0c\u7136\u540e\u5f97\u5230 QEMU_EFI.fd \u5bf9\u4e86, \u600e\u4e48\u89e3\u538b qemu-efi-aarch64_2022.11-6_all.deb ? \u53c2\u8003 deb \u5305\u89e3\u538b Linux \u4e0a\u547d\u4ee4\u5982\u4e0b: mkdir -p extract/DEBIAN dpkg -X qemu-efi-aarch64_2022.11-6_all.deb extract/ cd extract/ ls ./usr/share/qemu-efi-aarch64/QEMU_EFI.fd \u7279\u522b\u6ce8\u610f\u8001\u7248\u672c\u7684 QEMU_EFI.fd \u5f88\u53ef\u80fd\u4e0d\u9002\u7528\u4e8e\u65b0\u7248\u672c\u7684 Debian \u64cd\u4f5c\u7cfb\u7edf\u6216\u8005 Ubuntu \u64cd\u4f5c\u7cfb\u7edf,\u4f1a\u9020\u6210\u7cfb\u7edf\u5b89\u88c5\u597d\u4e4b\u540e\u518d\u5173\u673a\u518d\u542f\u52a8\u5c31\u542f\u52a8\u4e0d\u4e86\u7684\u95ee\u9898. \u6240\u4ee5\u8bf7\u4e25\u683c\u6309\u7167\u4f60\u7684\u865a\u62df\u673a\u7cfb\u7edf\u6765\u9009\u62e9\u5bf9\u5e94 QEMU_EFI.fd \u76ee\u524d 2023 \u5e74 6 \u6708, \u6211\u4f7f\u7528\u7684\u662f Debian12, \u56e0\u6b64\u5c31\u53bb\u627e Debian12 \u7684 qemu-efi-aarch64_XXXX.deb,\u6765\u83b7\u53d6 QEMU_EFI.fd 5 \u5236\u4f5c EFI \u76d8 \u5728 Mac OS \u4e0a\u6267\u884c\u5982\u4e0b\u547d\u4ee4 dd if=/dev/zero of=flash0.img bs=1m count=64 dd if=QEMU_EFI.fd of=flash0.img conv=notrunc dd if=/dev/zero of=flash1.img bs=1m count=64 \u53ef\u4ee5\u53c2\u8003 \u8fd9\u7bc7\u6587\u7ae0 \u547d\u4ee4\u5982\u4e0b: Prepare the firmware We need a couple of flash partitions to hold the UEFI firmware we downloaded earlier along with its variables to track things such as the boot partition etc.: :~/qemu-host$ truncate -s 64m varstore.img :~/qemu-host$ truncate -s 64m efi.img :~/qemu-host$ dd if=/usr/share/qemu-efi-aarch64/QEMU_EFI.fd of=efi.img conv=notrunc IMPORTANT : You must enter these commands exactly as shown, otherwise you will almost certainly run into problems later on. 6 \u5b89\u88c5 Debian At this point, we should have everything we need to install Debian server in our virtual machine. Our example will work for our ARM machine, so you\u2019ll have to change it slightly for your system. In our Macbook M1 Pro, the command looks like the following: qemu-system-aarch64 \\ -monitor stdio \\ -M virt,highmem=off \\ -accel hvf \\ -cpu host \\ -smp 4 \\ -m 3000 \\ -drive if=pflash,format=raw,file=flash0.img,readonly=on \\ -drive if=pflash,format=raw,file=flash1.img \\ -device virtio-gpu-pci \\ -display default,show-cursor=on \\ -device qemu-xhci \\ -device usb-kbd \\ -device usb-tablet \\ -drive if=virtio,format=qcow2,file=debian.qcow2 \\ -nic vmnet-bridged,ifname=en0 \\ -cdrom /Users/bytedance/Downloads/debian-12.0.0-arm64-netinst.iso Once you run the command above, if everything goes well, you should be seeing a screen similar to this: \u7136\u540e\u5c31\u662f\u4e00\u6b65\u6b65\u5b89\u88c5 Debian. \u6210\u529f\u767b\u5f55\u4e4b\u540e: 7 \u5b89\u88c5\u5b8c\u6210\u540e\u5173\u673a, \u6b63\u5e38\u4f7f\u7528 Debian \u865a\u62df\u673a \u76f8\u6bd4\u4e0a\u4e00\u6b65, \u8fd9\u4e00\u6b65\u628a -cdrom /Users/bytedance/Downloads/debian-12.0.0-arm64-netinst.iso \u53bb\u6389\u4e86 qemu-system-aarch64 \\ -monitor stdio \\ -M virt,highmem=off \\ -accel hvf \\ -cpu host \\ -smp 4 \\ -m 3000 \\ -drive if=pflash,format=raw,file=flash0.img,readonly=on \\ -drive if=pflash,format=raw,file=flash1.img \\ -device virtio-gpu-pci \\ -display default,show-cursor=on \\ -device qemu-xhci \\ -device usb-kbd \\ -device usb-tablet \\ -nic vmnet-bridged,ifname=en0 \\ -drive if=virtio,format=qcow2,file=debian.qcow2 \u53c2\u8003\u6587\u7ae0 Run Ubuntu on Mac using QEMU Creating a qemu bridge network on macos","title":"\u7b2c\u5341\u7bc7 Mac M1\u82af\u7247\u7535\u8111\u5229\u7528Qemu\u5b89\u88c5Debian\u865a\u62df\u673a"},{"location":"chapter_1/10_virtual_machine_on_mac_m1_chip/#_1","text":"","title":"\u6982\u8ff0"},{"location":"chapter_1/10_virtual_machine_on_mac_m1_chip/#_2","text":"","title":"\u4e3a\u4ec0\u4e48"},{"location":"chapter_1/10_virtual_machine_on_mac_m1_chip/#mac-m1-qemu-linux","text":"\u5176\u4ed6\u8f6f\u4ef6\u6536\u8d39\u6216\u8005\u4e0d\u652f\u6301. \u6bd4\u5982 VirtualBox \u4e0d\u652f\u6301 M1 \u82af\u7247\uff0c Parallels Desktop \u662f\u6536\u8d39\u8f6f\u4ef6","title":"\u4e3a\u5565\u9700\u8981\u5728 Mac M1 \u82af\u7247\u4e0a\u5229\u7528 Qemu \u5b89\u88c5 Linux \u865a\u62df\u673a"},{"location":"chapter_1/10_virtual_machine_on_mac_m1_chip/#_3","text":"","title":"\u600e\u4e48\u529e"},{"location":"chapter_1/10_virtual_machine_on_mac_m1_chip/#1-installing-qemu-qemu","text":"The first step is to install QEMU, we are going to use Homebrew to install it on our machine. If you need help to install or use Homebrew, please read our article \u201cHow to Use Homebrew in Mac (OSX)\u201d. brew install qemu Once you have finished the installation on your local machine, you can double check the version using the qemu executable installed. The executable you should use will depend on what system are you currently running on. You can see a list of all the executables for each architecture that Homebrew has installed in our machine. $ ls /opt/homebrew/bin/qemu-* /opt/homebrew/bin/qemu-edid /opt/homebrew/bin/qemu-system-cris /opt/homebrew/bin/qemu-system-mips64el /opt/homebrew/bin/qemu-system-s390x /opt/homebrew/bin/qemu-img /opt/homebrew/bin/qemu-system-hppa /opt/homebrew/bin/qemu-system-mipsel /opt/homebrew/bin/qemu-system-sh4 /opt/homebrew/bin/qemu-io /opt/homebrew/bin/qemu-system-i386 /opt/homebrew/bin/qemu-system-nios2 /opt/homebrew/bin/qemu-system-sh4eb /opt/homebrew/bin/qemu-nbd /opt/homebrew/bin/qemu-system-loongarch64 /opt/homebrew/bin/qemu-system-or1k /opt/homebrew/bin/qemu-system-sparc /opt/homebrew/bin/qemu-storage-daemon /opt/homebrew/bin/qemu-system-m68k /opt/homebrew/bin/qemu-system-ppc /opt/homebrew/bin/qemu-system-sparc64 /opt/homebrew/bin/qemu-system-aarch64 /opt/homebrew/bin/qemu-system-microblaze /opt/homebrew/bin/qemu-system-ppc64 /opt/homebrew/bin/qemu-system-tricore /opt/homebrew/bin/qemu-system-alpha /opt/homebrew/bin/qemu-system-microblazeel /opt/homebrew/bin/qemu-system-riscv32 /opt/homebrew/bin/qemu-system-x86_64 /opt/homebrew/bin/qemu-system-arm /opt/homebrew/bin/qemu-system-mips /opt/homebrew/bin/qemu-system-riscv64 /opt/homebrew/bin/qemu-system-xtensa /opt/homebrew/bin/qemu-system-avr /opt/homebrew/bin/qemu-system-mips64 In our case we are running a MacBook using Apple M1 Pro chip . This chip belongs to the category of ARM processors family, therefore the architecture of our machine is AArch64 or ARM64 . Coming back to our main topic, having an ARM64 architecture system means that we should run the following and see something like what\u2019s shown below as the output. $ qemu-system-aarch64 --version QEMU emulator version 7.2.0 Copyright (c) 2003-2022 Fabrice Bellard and the QEMU Project developers You can check what architecture your system has by executing this: $ uname -m arm64 As you can see, in our system it return arm64. Check what your architecture is and stick to that executable, it will work for some commands like \"qemu-system-XXX --version\", but it\u2019s better to clarify this from the very beginning to avoid confusion.","title":"1 \u2013 Installing QEMU(\u5b89\u88c5 QEMU)"},{"location":"chapter_1/10_virtual_machine_on_mac_m1_chip/#2-download-debian-or-any-linux-distribution","text":"In order to be able to install an operating system running on a virtual machine in QEMU, you will need an ISO image containing the OS. If your system belongs to the ARM family, you can download the most recent Ubuntu version for ARM architectures here. Otherwise, for x86 families you can download it here. \u6211\u4eec\u5728 \u8fd9\u91cc \u4e0b\u8f7d debian \u7f51\u7edc\u5b89\u88c5 ISO \u6587\u4ef6","title":"2 \u2013 Download Debian (or any Linux Distribution)"},{"location":"chapter_1/10_virtual_machine_on_mac_m1_chip/#3-create-empty-image","text":"","title":"3 \u2013 Create empty image (\u5236\u4f5c\u955c\u50cf\u6587\u4ef6)"},{"location":"chapter_1/10_virtual_machine_on_mac_m1_chip/#ubuntu","text":"Create a QEMU empty image where to install your Ubuntu OS later. To do so, run the following command: $ qemu-img create -f raw ~/qemu/ubuntu-latest.raw 40G","title":"ubuntu"},{"location":"chapter_1/10_virtual_machine_on_mac_m1_chip/#debian-qcow2","text":"$ qemu-img create -f qcow2 debian12.qcow2 50g","title":"debian (\u6211\u6700\u7ec8\u7528\u7684\u662f qcow2 \u683c\u5f0f)"},{"location":"chapter_1/10_virtual_machine_on_mac_m1_chip/#4-download-pre-built-edk2-uefi-image-for-qemu","text":"\u8fd9\u4e00\u6b65\u662f\u4e0b\u8f7d\u9884\u5148\u51c6\u5907\u7684\u597d\u7684 UEFI \u955c\u50cf\u6587\u4ef6, \u5e76\u4e14\u9700\u8981\u548c CPU \u67b6\u6784\u76f8\u7b26\u5408\uff0c \u6211\u4eec\u7684\u76ee\u6807\u662f\u5f97\u5230 QEMU_EFI.fd \u6587\u4ef6. \u901a\u8fc7 Google \u641c\u7d22, \u6211\u4eec\u627e\u5230\u4e86 qemu-efi-aarch64 qemu-efi-aarch64 is a build of EDK II for 64-bit ARM virtual machines. It includes full support for UEFI, including Secure Boot. \u5728 Debian Linux \u7cfb\u7edf\u4e2d\u5b89\u88c5\u8fd9\u4e2a\u5305\uff0c\u4f1a\u4ea7\u751f QEMU_EFI.fd \u6587\u4ef6 \u6211\u4eec\u76f4\u63a5\u4ece deb \u5305 \u6587\u4ef6\u91cc\u83b7\u53d6, \u5148\u4e0b\u8f7d qemu-efi-aarch64_2022.11-6_all.deb \u5305\uff0c\u7136\u540e\u8fdb\u884c\u89e3\u538b\uff0c\u7136\u540e\u5f97\u5230 QEMU_EFI.fd \u5bf9\u4e86, \u600e\u4e48\u89e3\u538b qemu-efi-aarch64_2022.11-6_all.deb ? \u53c2\u8003 deb \u5305\u89e3\u538b Linux \u4e0a\u547d\u4ee4\u5982\u4e0b: mkdir -p extract/DEBIAN dpkg -X qemu-efi-aarch64_2022.11-6_all.deb extract/ cd extract/ ls ./usr/share/qemu-efi-aarch64/QEMU_EFI.fd \u7279\u522b\u6ce8\u610f\u8001\u7248\u672c\u7684 QEMU_EFI.fd \u5f88\u53ef\u80fd\u4e0d\u9002\u7528\u4e8e\u65b0\u7248\u672c\u7684 Debian \u64cd\u4f5c\u7cfb\u7edf\u6216\u8005 Ubuntu \u64cd\u4f5c\u7cfb\u7edf,\u4f1a\u9020\u6210\u7cfb\u7edf\u5b89\u88c5\u597d\u4e4b\u540e\u518d\u5173\u673a\u518d\u542f\u52a8\u5c31\u542f\u52a8\u4e0d\u4e86\u7684\u95ee\u9898. \u6240\u4ee5\u8bf7\u4e25\u683c\u6309\u7167\u4f60\u7684\u865a\u62df\u673a\u7cfb\u7edf\u6765\u9009\u62e9\u5bf9\u5e94 QEMU_EFI.fd \u76ee\u524d 2023 \u5e74 6 \u6708, \u6211\u4f7f\u7528\u7684\u662f Debian12, \u56e0\u6b64\u5c31\u53bb\u627e Debian12 \u7684 qemu-efi-aarch64_XXXX.deb,\u6765\u83b7\u53d6 QEMU_EFI.fd","title":"4 \u2013 Download pre-built EDK2 UEFI image for QEMU"},{"location":"chapter_1/10_virtual_machine_on_mac_m1_chip/#5-efi","text":"\u5728 Mac OS \u4e0a\u6267\u884c\u5982\u4e0b\u547d\u4ee4 dd if=/dev/zero of=flash0.img bs=1m count=64 dd if=QEMU_EFI.fd of=flash0.img conv=notrunc dd if=/dev/zero of=flash1.img bs=1m count=64 \u53ef\u4ee5\u53c2\u8003 \u8fd9\u7bc7\u6587\u7ae0 \u547d\u4ee4\u5982\u4e0b: Prepare the firmware We need a couple of flash partitions to hold the UEFI firmware we downloaded earlier along with its variables to track things such as the boot partition etc.: :~/qemu-host$ truncate -s 64m varstore.img :~/qemu-host$ truncate -s 64m efi.img :~/qemu-host$ dd if=/usr/share/qemu-efi-aarch64/QEMU_EFI.fd of=efi.img conv=notrunc IMPORTANT : You must enter these commands exactly as shown, otherwise you will almost certainly run into problems later on.","title":"5 \u5236\u4f5c EFI \u76d8"},{"location":"chapter_1/10_virtual_machine_on_mac_m1_chip/#6-debian","text":"At this point, we should have everything we need to install Debian server in our virtual machine. Our example will work for our ARM machine, so you\u2019ll have to change it slightly for your system. In our Macbook M1 Pro, the command looks like the following: qemu-system-aarch64 \\ -monitor stdio \\ -M virt,highmem=off \\ -accel hvf \\ -cpu host \\ -smp 4 \\ -m 3000 \\ -drive if=pflash,format=raw,file=flash0.img,readonly=on \\ -drive if=pflash,format=raw,file=flash1.img \\ -device virtio-gpu-pci \\ -display default,show-cursor=on \\ -device qemu-xhci \\ -device usb-kbd \\ -device usb-tablet \\ -drive if=virtio,format=qcow2,file=debian.qcow2 \\ -nic vmnet-bridged,ifname=en0 \\ -cdrom /Users/bytedance/Downloads/debian-12.0.0-arm64-netinst.iso Once you run the command above, if everything goes well, you should be seeing a screen similar to this: \u7136\u540e\u5c31\u662f\u4e00\u6b65\u6b65\u5b89\u88c5 Debian. \u6210\u529f\u767b\u5f55\u4e4b\u540e:","title":"6 \u5b89\u88c5 Debian"},{"location":"chapter_1/10_virtual_machine_on_mac_m1_chip/#7-debian","text":"\u76f8\u6bd4\u4e0a\u4e00\u6b65, \u8fd9\u4e00\u6b65\u628a -cdrom /Users/bytedance/Downloads/debian-12.0.0-arm64-netinst.iso \u53bb\u6389\u4e86 qemu-system-aarch64 \\ -monitor stdio \\ -M virt,highmem=off \\ -accel hvf \\ -cpu host \\ -smp 4 \\ -m 3000 \\ -drive if=pflash,format=raw,file=flash0.img,readonly=on \\ -drive if=pflash,format=raw,file=flash1.img \\ -device virtio-gpu-pci \\ -display default,show-cursor=on \\ -device qemu-xhci \\ -device usb-kbd \\ -device usb-tablet \\ -nic vmnet-bridged,ifname=en0 \\ -drive if=virtio,format=qcow2,file=debian.qcow2","title":"7 \u5b89\u88c5\u5b8c\u6210\u540e\u5173\u673a, \u6b63\u5e38\u4f7f\u7528 Debian \u865a\u62df\u673a"},{"location":"chapter_1/10_virtual_machine_on_mac_m1_chip/#_4","text":"Run Ubuntu on Mac using QEMU Creating a qemu bridge network on macos","title":"\u53c2\u8003\u6587\u7ae0"},{"location":"chapter_1/11_nftables/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3 nftables \u7684\u4f7f\u7528 nftables \u76f8\u6bd4 iptables \u6709\u54ea\u4e9b\u4f18\u52bf? nftables \u62e5\u6709\u4e00\u4e9b\u9ad8\u7ea7\u7684\u7c7b\u4f3c\u7f16\u7a0b\u8bed\u8a00\u7684\u80fd\u529b\uff0c\u4f8b\u5982\uff1a\u5b9a\u4e49\u53d8\u91cf\u548c\u5305\u542b\u5916\u90e8\u6587\u4ef6\uff0c\u5373\u62e5\u6709\u4f7f\u7528\u989d\u5916\u811a\u672c\u7684\u80fd\u529b\u3002nftables \u4e5f\u53ef\u4ee5\u7528\u4e8e\u591a\u79cd\u5730\u5740\u7c07\u7684\u8fc7\u6ee4\u548c\u5904\u7406\u3002 \u4e0d\u540c\u4e8e iptables, nftables \u5e76\u4e0d\u5305\u542b\u4efb\u4f55\u7684\u5185\u7f6e\u8868\uff0c\u9700\u8981\u54ea\u4e9b\u8868\u5e76\u5728\u8fd9\u4e9b\u8868\u4e2d\u6dfb\u52a0\u4ec0\u4e48\u5904\u7406\u89c4\u5219\u4e00\u5207\u7531\u7ba1\u7406\u5458\u51b3\u5b9a\u3002 \u4e00 \u542f\u52a8\u548c\u505c\u6b62 \u4f7f\u7528 systemctl \u8fdb\u884c\u7ba1\u7406 \u5f00\u673a\u542f\u52a8\uff1a systemctl enable nftables \u5173\u95ed: systemctl stop nftables \u542f\u52a8: systemctl start nftables \u91cd\u542f: systemctl restart nftables \u914d\u7f6e\u6587\u4ef6: /etc/nftables.conf \u4e8c \u5feb\u901f\u5e94\u7528 1 \u7b80\u5355\u5f00\u653e\u5fc5\u8981\u7684\u7aef\u53e3\u5176\u4ed6\u9ed8\u8ba4 DROP # cat /etc/nftables.conf #!/usr/sbin/nft -f flush ruleset table inet filter { chain input { type filter hook input priority 0; tcp dport { 32200,80,443 } accept #\u653e\u884c22 80 443\u7aef\u53e3 iifname lo accept #\u5141\u8bb8\u672c\u5730\u73af\u56de icmp type echo-request counter accept #\u5141\u8bb8ping ipv4 icmpv6 type echo-request accept #\u5141\u8bb8ping ipv6 icmpv6 type { nd-neighbor-solicit,nd-neighbor-advert,nd-router-solicit,nd-router-advert } accept # \u653e\u884cipv6\u90bb\u5c45\u53d1\u73b0\u7b49 ct state related,established accept # \u653e\u884c\u5df2\u5efa\u7acb\u7684\u6216\u76f8\u5173\u7684\u8fde\u63a5 counter drop # \u62d2\u7edd\u4e0a\u8ff0\u89c4\u5219\u4ee5\u5916\u7684\u5165\u7ad9\u8bf7\u6c42 } chain forward { type filter hook forward priority 0; } chain output { type filter hook output priority 0; } } \u4e09 nftables \u7684\u8868\u7ba1\u7406 \u4e0e iptables \u4e2d\u7684\u8868\u4e0d\u540c\uff0cnftables \u4e2d\u6ca1\u6709\u5185\u7f6e\u8868\u3002\u8868\u7684\u6570\u91cf\u548c\u540d\u79f0\u7531\u7528\u6237\u51b3\u5b9a\u3002\u4f46\u662f\uff0c\u6bcf\u4e2a\u8868\u53ea\u6709\u4e00\u4e2a\u5730\u5740\u7c07\uff0c\u5e76\u4e14\u53ea\u9002\u7528\u4e8e\u8be5\u7c07\u7684\u6570\u636e\u5305\u3002nftables \u8868\u53ef\u4ee5\u6307\u5b9a\u4e3a\u4ee5\u4e0b\u4e94\u4e2a\u7c07\u4e2d\u7684\u4e00\u4e2a\uff1a nftables \u7c07 \u5bf9\u5e94 iptables \u7684\u547d\u4ee4\u884c\u5de5\u5177 ip iptables ip6 ip6tables inet iptables \u548c ip6tables arp arptables bridge ebtables ip\uff08\u5373 IPv4\uff09 \u662f\u9ed8\u8ba4\u7c07\uff0c\u5982\u679c\u672a\u6307\u5b9a\u7c07\uff0c\u5219\u4f7f\u7528\u8be5\u7c07\u3002\u5982\u679c\u8981\u521b\u5efa\u540c\u65f6\u9002\u7528\u4e8e IPv4 \u548c IPv6 \u7684\u89c4\u5219\uff0c\u8bf7\u4f7f\u7528 inet \u7c07 \u3002 inet \u5141\u8bb8\u7edf\u4e00 ip \u548c ip6 \u7c07\uff0c\u4ee5\u4fbf\u66f4\u5bb9\u6613\u5730\u5b9a\u4e49\u89c4\u5219\u3002 \u6ce8\u610f: inet \u4e0d\u80fd\u7528\u4e8e nat \u7c7b\u578b\u7684\u94fe\uff0c\u53ea\u80fd\u7528\u4e8e filter \u7c7b\u578b\u7684\u94fe\u3002 \u8bbe\u5b9a nftables \u4e4b\u524d\u9996\u5148\u9700\u8981\u7406\u89e3 Family,Type,Hook3 \u4e2a\u56e0\u7d20\u3002 Family \u4ee3\u8868 table \u5c5e\u4e8e\u54ea\u4e2a Family Family \u6982\u8981 ip \u8868\u793a IPv4\uff0c\u76f8\u5f53\u4e8e iptables\u3002 ip6 \u8868\u793a IPv6\uff0c\u76f8\u5f53\u4e8e ip6tables\u3002 inet \u8868\u793a IPv4 \u53ca IPv6\u3002 arp \u8868\u793a ARP\uff0c\u53ef\u64cd\u4f5c IPv4 \u7684 ARP bridge \u8868\u793a Bridge\uff0c\u53ef\u64cd\u4f5c\u901a\u8fc7 Bridge \u8bbe\u5907\u7684\u6570\u636e\u5305\u3002 netdev \u53ef\u5206\u7c7b NIC \u9a71\u52a8\u7a0b\u5e8f\u4f20\u9012\u5230\u7f51\u7edc\u5806\u6808\u540e\u7684\u6240\u6709\u6d41\u91cf\uff0c\u4f8b\u5982\u53ef\u8fdb\u884c DDoS \u5bf9\u7b56\u3002 Type \u4ee3\u8868 chain \u7684\u7c7b\u578b, \u6709 3 \u79cd filter\u3001route\u3001nat Type \u6982\u8981 filter \u53ef\u7528\u4e8e\u6240\u6709\u7684 family \u548c hook route \u53ef\u7528\u4e8e routing\u3002\u53ef\u7528\u4e8e Family:ip,ip6,inet \u53ca Hook:output nat \u7528\u4e8e NAT\u3002\u53ef\u7528\u4e8e Family:ip,ip6,inet \u53ca Hook:input,output,prerouting,postrouting Hook \u4ee3\u8868 chain \u751f\u6548\u7684 HOOK \u70b9 Hook \u6982\u8981 input \u53ef\u7528\u4e8e Family:ip,ip6,inet,arp,bridge \u53ca Type:filter,nat output \u53ef\u7528\u4e8e Family:ip,ip6,inet,arp,bridge \u53ca Type:filter,route,nat forward \u53ef\u7528\u4e8e Family:ip,ip6,inet,bridge \u53ca Type:filter prerouting \u53ef\u7528\u4e8e Family:ip,ip6,inet,bridge \u53ca Type:filter,nat postrouting \u53ef\u7528\u4e8e Family:ip,ip6,inet,bridge \u53ca Type:filter,nat ingress \u53ef\u7528\u4e8e Family:netdev \u53ca Type:filter nftables chain \u652f\u6301\u94a9\u5b50\u7684\u7c7b\u578b nftables \u548c iptables \u7c7b\u4f3c\uff0c\u4f9d\u7136\u4f7f\u7528 netfiler \u4e2d\u7684 5 \u4e2a \u94a9\u5b50\u3002 \u4e0d\u540c\u7684\u662f nftables \u5728 Linux Kernel 4.2 \u4e2d\u65b0\u589e\u4e86 ingress \u94a9\u5b50\u3002 \u56db \u53c2\u8003\u6587\u6863 Debian 11 \u4e0a\u7684 nftables \u9632\u706b\u5899 \u7b80\u5355\u914d\u7f6e \u9632\u706b\u5899\u8f6f\u4ef6 iptables \u540e\u7ee7\u8f6f\u4ef6 nftables \u7684\u57fa\u672c\u64cd\u4f5c nftables \u7b80\u660e\u6559\u7a0b \u4e94 Iptables \u56de\u987e Iptables is used to set up, maintain, and inspect the tables of IPv4 packet filter rules in the Linux kernel. Several different tables may be defined. Each table contains a number of built-in chains and may also contain user-defined chains. Each chain is a list of rules which can match a set of packets. Each rule specifies what to do with a packet that matches. This is called a `target', which may be a jump to a user-defined chain in the same table. \u5b98\u65b9\u6587\u6863\uff1a http://ipset.netfilter.org/iptables.man.html#index 1 \u67b6\u6784\u56fe 1.1 \u6838\u5fc3\u6a21\u578b 4 \u8868 5 \u94fe 4 \u8868\uff1a\u5177\u4f53\u662f Filter \u8868\u3001NAT \u8868\u3001Managle \u8868\u3001Raw \u8868 5 \u94fe\uff08chain\uff09\uff1a INPUT\u3001OUTPUT\u3001FORWARD\u3001PREROUTING\u3001POSTROUTING 1 Packet \u6d41\u8f6c\u67b6\u6784\u56fe 2 \u57fa\u7840 iptables \u89c4\u5219\u5e94\u7528 2.1 \u914d\u7f6e iptables,\u628a 80 \u7aef\u53e3\u8f6c\u5230 8080 iptables -t nat -A PREROUTING -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 8080 2.2 limit \u72b6\u6001 # Firewall configuration written by system-config-firewall # Manual customization of this file is not recommended. *filter :INPUT ACCEPT [0:0] :FORWARD ACCEPT [0:0] :OUTPUT ACCEPT [0:0] :limit - [0:0] ###\u65b0\u589e\u4e00\u6761\u94fe\uff0c\u9ed8\u8ba4\u89c4\u5219\u662f- # base rules -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT -A INPUT -p icmp -j ACCEPT -A INPUT -i lo -j ACCEPT -A INPUT -p tcp -m tcp ! --tcp-flags FIN,SYN,RST,ACK SYN -m state --state NEW -j DROP #\u65b0\u589e\u4e00\u6761\u9632\u62a4\u63aa\u65bd # for ssh -A INPUT -m state --state NEW -m tcp -p tcp --dport 34020 -j ACCEPT -A INPUT -j limit ##\u9664\u4e86\u4e0a\u9762\u8fd9\u6761,ssh\u7aef\u53e3\u5f00\u653e\u4e4b\u5916\uff0c\u5176\u4ed6\u7aef\u53e3\u4e00\u5f8b\u5230limit\u91cc\u9762\u53bb\uff0c ### -A limit -m state --state NEW -m tcp -p tcp --dport 8000 -j RETURN ### #base end rules -A limit -j DROP ##limit\u94fe\u8def\u6700\u540e\u7684\u4e00\u6761\u89c4\u5219\u662fDROP,\u4e5f\u5c31\u662f\u4e00\u4e2a\u6570\u636e\u5305\u5728limit\u94fe\u8def\u4e2d\u4e00\u6761\u4e00\u6761\u89c4\u5219\u5339\u914d\uff0c\u76f4\u5230\u6700\u540e\u4f1a\u88abDROP\uff0c\u4e2d\u95f4\u53ef\u4ee5RETURN -A INPUT -j ACCEPT ##RETURN\u56de\u6765\u4e4b\u540e\uff0c\u4f1a\u88abACCEPT -A FORWARD -j REJECT --reject-with icmp-host-prohibited COMMIT 3 ipset ipset \u662f iptables \u91cc\u9762 ip \u96c6\u5408\u7684\u6982\u5ff5\uff0c\u5728\u529f\u80fd\u4e0d\u5fc5\u7684\u60c5\u51b5\u4e0b\u8282\u7701 iptables \u89c4\u5219\u6570\u91cf\uff0c\u907f\u514d\u914d\u7f6e\u591a\u4e2a\u89c4\u5219. 4 raw \u8868 -t raw \u4f1a\u52a0\u8f7d iptable_raw \u6a21\u5757\uff08kernel 2.6+ \u90fd\u6709\uff09 raw \u8868\u57fa\u672c\u5c31\u5e72\u4e00\u4ef6\u4e8b: \u901a\u8fc7 -j NOTRACK \u7ed9\u4e0d\u9700\u8981\u88ab\u8fde\u63a5\u8ddf\u8e2a\u7684\u5305\u6253\u6807\u8bb0\uff08UNTRACKED \u72b6\u6001\uff09\uff0c\u544a\u8bc9 nf_conntrack \u4e0d\u8981\u8ddf\u8e2a\u8fde\u63a5 raw \u8868\u7684\u4f18\u5148\u7ea7\u5927\u4e8e filter\uff0cmangle\uff0cnat\uff0c\u5305\u542b PREROUTING\uff08\u9488\u5bf9\u8fdb\u5165\u672c\u673a\u7684\u5305\uff09 \u548c OUTPUT\uff08\u9488\u5bf9\u4ece\u672c\u673a\u51fa\u53bb\u7684\u5305\uff09 \u94fe \u4e3e\u4f8b\u5b50 # \u4e0d\u8ddf\u8e2a\u7279\u5b9a\u8bbf\u95ee\u91cf\u5927\u7684\u7aef\u53e3 iptables -t raw -A PREROUTING -p tcp -m multiport --dports 80:82,443 -j NOTRACK iptables -t raw -A OUTPUT -p tcp -m multiport --sports 80:82,443 -j NOTRACK","title":"\u7b2c\u5341\u4e00\u7bc7 Debian 11\u4ee5\u53ca\u5f80\u540e\u7248\u672cnftables\u9632\u706b\u5899\u914d\u7f6e"},{"location":"chapter_1/11_nftables/#_1","text":"\u672c\u7bc7\u603b\u7ed3 nftables \u7684\u4f7f\u7528 nftables \u76f8\u6bd4 iptables \u6709\u54ea\u4e9b\u4f18\u52bf? nftables \u62e5\u6709\u4e00\u4e9b\u9ad8\u7ea7\u7684\u7c7b\u4f3c\u7f16\u7a0b\u8bed\u8a00\u7684\u80fd\u529b\uff0c\u4f8b\u5982\uff1a\u5b9a\u4e49\u53d8\u91cf\u548c\u5305\u542b\u5916\u90e8\u6587\u4ef6\uff0c\u5373\u62e5\u6709\u4f7f\u7528\u989d\u5916\u811a\u672c\u7684\u80fd\u529b\u3002nftables \u4e5f\u53ef\u4ee5\u7528\u4e8e\u591a\u79cd\u5730\u5740\u7c07\u7684\u8fc7\u6ee4\u548c\u5904\u7406\u3002 \u4e0d\u540c\u4e8e iptables, nftables \u5e76\u4e0d\u5305\u542b\u4efb\u4f55\u7684\u5185\u7f6e\u8868\uff0c\u9700\u8981\u54ea\u4e9b\u8868\u5e76\u5728\u8fd9\u4e9b\u8868\u4e2d\u6dfb\u52a0\u4ec0\u4e48\u5904\u7406\u89c4\u5219\u4e00\u5207\u7531\u7ba1\u7406\u5458\u51b3\u5b9a\u3002","title":"\u6982\u8ff0"},{"location":"chapter_1/11_nftables/#_2","text":"\u4f7f\u7528 systemctl \u8fdb\u884c\u7ba1\u7406 \u5f00\u673a\u542f\u52a8\uff1a systemctl enable nftables \u5173\u95ed: systemctl stop nftables \u542f\u52a8: systemctl start nftables \u91cd\u542f: systemctl restart nftables \u914d\u7f6e\u6587\u4ef6: /etc/nftables.conf","title":"\u4e00 \u542f\u52a8\u548c\u505c\u6b62"},{"location":"chapter_1/11_nftables/#_3","text":"","title":"\u4e8c \u5feb\u901f\u5e94\u7528"},{"location":"chapter_1/11_nftables/#1-drop","text":"# cat /etc/nftables.conf #!/usr/sbin/nft -f flush ruleset table inet filter { chain input { type filter hook input priority 0; tcp dport { 32200,80,443 } accept #\u653e\u884c22 80 443\u7aef\u53e3 iifname lo accept #\u5141\u8bb8\u672c\u5730\u73af\u56de icmp type echo-request counter accept #\u5141\u8bb8ping ipv4 icmpv6 type echo-request accept #\u5141\u8bb8ping ipv6 icmpv6 type { nd-neighbor-solicit,nd-neighbor-advert,nd-router-solicit,nd-router-advert } accept # \u653e\u884cipv6\u90bb\u5c45\u53d1\u73b0\u7b49 ct state related,established accept # \u653e\u884c\u5df2\u5efa\u7acb\u7684\u6216\u76f8\u5173\u7684\u8fde\u63a5 counter drop # \u62d2\u7edd\u4e0a\u8ff0\u89c4\u5219\u4ee5\u5916\u7684\u5165\u7ad9\u8bf7\u6c42 } chain forward { type filter hook forward priority 0; } chain output { type filter hook output priority 0; } }","title":"1 \u7b80\u5355\u5f00\u653e\u5fc5\u8981\u7684\u7aef\u53e3\u5176\u4ed6\u9ed8\u8ba4 DROP"},{"location":"chapter_1/11_nftables/#nftables","text":"\u4e0e iptables \u4e2d\u7684\u8868\u4e0d\u540c\uff0cnftables \u4e2d\u6ca1\u6709\u5185\u7f6e\u8868\u3002\u8868\u7684\u6570\u91cf\u548c\u540d\u79f0\u7531\u7528\u6237\u51b3\u5b9a\u3002\u4f46\u662f\uff0c\u6bcf\u4e2a\u8868\u53ea\u6709\u4e00\u4e2a\u5730\u5740\u7c07\uff0c\u5e76\u4e14\u53ea\u9002\u7528\u4e8e\u8be5\u7c07\u7684\u6570\u636e\u5305\u3002nftables \u8868\u53ef\u4ee5\u6307\u5b9a\u4e3a\u4ee5\u4e0b\u4e94\u4e2a\u7c07\u4e2d\u7684\u4e00\u4e2a\uff1a nftables \u7c07 \u5bf9\u5e94 iptables \u7684\u547d\u4ee4\u884c\u5de5\u5177 ip iptables ip6 ip6tables inet iptables \u548c ip6tables arp arptables bridge ebtables ip\uff08\u5373 IPv4\uff09 \u662f\u9ed8\u8ba4\u7c07\uff0c\u5982\u679c\u672a\u6307\u5b9a\u7c07\uff0c\u5219\u4f7f\u7528\u8be5\u7c07\u3002\u5982\u679c\u8981\u521b\u5efa\u540c\u65f6\u9002\u7528\u4e8e IPv4 \u548c IPv6 \u7684\u89c4\u5219\uff0c\u8bf7\u4f7f\u7528 inet \u7c07 \u3002 inet \u5141\u8bb8\u7edf\u4e00 ip \u548c ip6 \u7c07\uff0c\u4ee5\u4fbf\u66f4\u5bb9\u6613\u5730\u5b9a\u4e49\u89c4\u5219\u3002 \u6ce8\u610f: inet \u4e0d\u80fd\u7528\u4e8e nat \u7c7b\u578b\u7684\u94fe\uff0c\u53ea\u80fd\u7528\u4e8e filter \u7c7b\u578b\u7684\u94fe\u3002 \u8bbe\u5b9a nftables \u4e4b\u524d\u9996\u5148\u9700\u8981\u7406\u89e3 Family,Type,Hook3 \u4e2a\u56e0\u7d20\u3002 Family \u4ee3\u8868 table \u5c5e\u4e8e\u54ea\u4e2a Family Family \u6982\u8981 ip \u8868\u793a IPv4\uff0c\u76f8\u5f53\u4e8e iptables\u3002 ip6 \u8868\u793a IPv6\uff0c\u76f8\u5f53\u4e8e ip6tables\u3002 inet \u8868\u793a IPv4 \u53ca IPv6\u3002 arp \u8868\u793a ARP\uff0c\u53ef\u64cd\u4f5c IPv4 \u7684 ARP bridge \u8868\u793a Bridge\uff0c\u53ef\u64cd\u4f5c\u901a\u8fc7 Bridge \u8bbe\u5907\u7684\u6570\u636e\u5305\u3002 netdev \u53ef\u5206\u7c7b NIC \u9a71\u52a8\u7a0b\u5e8f\u4f20\u9012\u5230\u7f51\u7edc\u5806\u6808\u540e\u7684\u6240\u6709\u6d41\u91cf\uff0c\u4f8b\u5982\u53ef\u8fdb\u884c DDoS \u5bf9\u7b56\u3002 Type \u4ee3\u8868 chain \u7684\u7c7b\u578b, \u6709 3 \u79cd filter\u3001route\u3001nat Type \u6982\u8981 filter \u53ef\u7528\u4e8e\u6240\u6709\u7684 family \u548c hook route \u53ef\u7528\u4e8e routing\u3002\u53ef\u7528\u4e8e Family:ip,ip6,inet \u53ca Hook:output nat \u7528\u4e8e NAT\u3002\u53ef\u7528\u4e8e Family:ip,ip6,inet \u53ca Hook:input,output,prerouting,postrouting Hook \u4ee3\u8868 chain \u751f\u6548\u7684 HOOK \u70b9 Hook \u6982\u8981 input \u53ef\u7528\u4e8e Family:ip,ip6,inet,arp,bridge \u53ca Type:filter,nat output \u53ef\u7528\u4e8e Family:ip,ip6,inet,arp,bridge \u53ca Type:filter,route,nat forward \u53ef\u7528\u4e8e Family:ip,ip6,inet,bridge \u53ca Type:filter prerouting \u53ef\u7528\u4e8e Family:ip,ip6,inet,bridge \u53ca Type:filter,nat postrouting \u53ef\u7528\u4e8e Family:ip,ip6,inet,bridge \u53ca Type:filter,nat ingress \u53ef\u7528\u4e8e Family:netdev \u53ca Type:filter","title":"\u4e09 nftables \u7684\u8868\u7ba1\u7406"},{"location":"chapter_1/11_nftables/#nftables-chain","text":"nftables \u548c iptables \u7c7b\u4f3c\uff0c\u4f9d\u7136\u4f7f\u7528 netfiler \u4e2d\u7684 5 \u4e2a \u94a9\u5b50\u3002 \u4e0d\u540c\u7684\u662f nftables \u5728 Linux Kernel 4.2 \u4e2d\u65b0\u589e\u4e86 ingress \u94a9\u5b50\u3002","title":"nftables chain \u652f\u6301\u94a9\u5b50\u7684\u7c7b\u578b"},{"location":"chapter_1/11_nftables/#_4","text":"Debian 11 \u4e0a\u7684 nftables \u9632\u706b\u5899 \u7b80\u5355\u914d\u7f6e \u9632\u706b\u5899\u8f6f\u4ef6 iptables \u540e\u7ee7\u8f6f\u4ef6 nftables \u7684\u57fa\u672c\u64cd\u4f5c nftables \u7b80\u660e\u6559\u7a0b","title":"\u56db \u53c2\u8003\u6587\u6863"},{"location":"chapter_1/11_nftables/#iptables","text":"Iptables is used to set up, maintain, and inspect the tables of IPv4 packet filter rules in the Linux kernel. Several different tables may be defined. Each table contains a number of built-in chains and may also contain user-defined chains. Each chain is a list of rules which can match a set of packets. Each rule specifies what to do with a packet that matches. This is called a `target', which may be a jump to a user-defined chain in the same table. \u5b98\u65b9\u6587\u6863\uff1a http://ipset.netfilter.org/iptables.man.html#index","title":"\u4e94 Iptables \u56de\u987e"},{"location":"chapter_1/11_nftables/#1","text":"","title":"1 \u67b6\u6784\u56fe"},{"location":"chapter_1/11_nftables/#11-4-5","text":"4 \u8868\uff1a\u5177\u4f53\u662f Filter \u8868\u3001NAT \u8868\u3001Managle \u8868\u3001Raw \u8868 5 \u94fe\uff08chain\uff09\uff1a INPUT\u3001OUTPUT\u3001FORWARD\u3001PREROUTING\u3001POSTROUTING","title":"1.1 \u6838\u5fc3\u6a21\u578b 4 \u8868 5 \u94fe"},{"location":"chapter_1/11_nftables/#1-packet","text":"","title":"1 Packet \u6d41\u8f6c\u67b6\u6784\u56fe"},{"location":"chapter_1/11_nftables/#2-iptables","text":"","title":"2 \u57fa\u7840 iptables \u89c4\u5219\u5e94\u7528"},{"location":"chapter_1/11_nftables/#21-iptables-80-8080","text":"iptables -t nat -A PREROUTING -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 8080","title":"2.1 \u914d\u7f6e iptables,\u628a 80 \u7aef\u53e3\u8f6c\u5230 8080"},{"location":"chapter_1/11_nftables/#22-limit","text":"# Firewall configuration written by system-config-firewall # Manual customization of this file is not recommended. *filter :INPUT ACCEPT [0:0] :FORWARD ACCEPT [0:0] :OUTPUT ACCEPT [0:0] :limit - [0:0] ###\u65b0\u589e\u4e00\u6761\u94fe\uff0c\u9ed8\u8ba4\u89c4\u5219\u662f- # base rules -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT -A INPUT -p icmp -j ACCEPT -A INPUT -i lo -j ACCEPT -A INPUT -p tcp -m tcp ! --tcp-flags FIN,SYN,RST,ACK SYN -m state --state NEW -j DROP #\u65b0\u589e\u4e00\u6761\u9632\u62a4\u63aa\u65bd # for ssh -A INPUT -m state --state NEW -m tcp -p tcp --dport 34020 -j ACCEPT -A INPUT -j limit ##\u9664\u4e86\u4e0a\u9762\u8fd9\u6761,ssh\u7aef\u53e3\u5f00\u653e\u4e4b\u5916\uff0c\u5176\u4ed6\u7aef\u53e3\u4e00\u5f8b\u5230limit\u91cc\u9762\u53bb\uff0c ### -A limit -m state --state NEW -m tcp -p tcp --dport 8000 -j RETURN ### #base end rules -A limit -j DROP ##limit\u94fe\u8def\u6700\u540e\u7684\u4e00\u6761\u89c4\u5219\u662fDROP,\u4e5f\u5c31\u662f\u4e00\u4e2a\u6570\u636e\u5305\u5728limit\u94fe\u8def\u4e2d\u4e00\u6761\u4e00\u6761\u89c4\u5219\u5339\u914d\uff0c\u76f4\u5230\u6700\u540e\u4f1a\u88abDROP\uff0c\u4e2d\u95f4\u53ef\u4ee5RETURN -A INPUT -j ACCEPT ##RETURN\u56de\u6765\u4e4b\u540e\uff0c\u4f1a\u88abACCEPT -A FORWARD -j REJECT --reject-with icmp-host-prohibited COMMIT","title":"2.2 limit \u72b6\u6001"},{"location":"chapter_1/11_nftables/#3-ipset","text":"ipset \u662f iptables \u91cc\u9762 ip \u96c6\u5408\u7684\u6982\u5ff5\uff0c\u5728\u529f\u80fd\u4e0d\u5fc5\u7684\u60c5\u51b5\u4e0b\u8282\u7701 iptables \u89c4\u5219\u6570\u91cf\uff0c\u907f\u514d\u914d\u7f6e\u591a\u4e2a\u89c4\u5219.","title":"3 ipset"},{"location":"chapter_1/11_nftables/#4-raw","text":"-t raw \u4f1a\u52a0\u8f7d iptable_raw \u6a21\u5757\uff08kernel 2.6+ \u90fd\u6709\uff09 raw \u8868\u57fa\u672c\u5c31\u5e72\u4e00\u4ef6\u4e8b: \u901a\u8fc7 -j NOTRACK \u7ed9\u4e0d\u9700\u8981\u88ab\u8fde\u63a5\u8ddf\u8e2a\u7684\u5305\u6253\u6807\u8bb0\uff08UNTRACKED \u72b6\u6001\uff09\uff0c\u544a\u8bc9 nf_conntrack \u4e0d\u8981\u8ddf\u8e2a\u8fde\u63a5 raw \u8868\u7684\u4f18\u5148\u7ea7\u5927\u4e8e filter\uff0cmangle\uff0cnat\uff0c\u5305\u542b PREROUTING\uff08\u9488\u5bf9\u8fdb\u5165\u672c\u673a\u7684\u5305\uff09 \u548c OUTPUT\uff08\u9488\u5bf9\u4ece\u672c\u673a\u51fa\u53bb\u7684\u5305\uff09 \u94fe \u4e3e\u4f8b\u5b50 # \u4e0d\u8ddf\u8e2a\u7279\u5b9a\u8bbf\u95ee\u91cf\u5927\u7684\u7aef\u53e3 iptables -t raw -A PREROUTING -p tcp -m multiport --dports 80:82,443 -j NOTRACK iptables -t raw -A OUTPUT -p tcp -m multiport --sports 80:82,443 -j NOTRACK","title":"4 raw \u8868"},{"location":"chapter_1/12_ansible_basic_use/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3\u4e00\u4e9b Ansible \u7684\u57fa\u672c\u4f7f\u7528 \u4e00 \u5b89\u88c5 apt-get install ansible \u4e8c hosts \u6587\u4ef6 \u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u4e3a /etc/ansible/hosts [webserver] 127.0.0.1 ansible_ssh_port=32200 ansible_ssh_user=\"hero\" ansible_ssh_common_args='-o StrictHostKeyChecking=no -o ConnectTimeout=2 -o ServerAliveInterval=30 -o ServerAliveCountMax=60' ansible_become_pass=\"your_pass\" 10.0.1.8 ansible_ssh_port=32200 ansible_ssh_user=\"hero\" ansible_ssh_common_args='-o StrictHostKeyChecking=no -o ConnectTimeout=2 -o ServerAliveInterval=30 -o ServerAliveCountMax=60' ansible_become_pass=\"your_pass\" \u4e09 PlayBook \u5b9e\u4f8b 1 cat test_playbook.yaml --- # for video and image - hosts: all gather_facts: no become: yes become_user: root become_method: su vars: space: dh-test fvideo: XXXXXX_2222.mp4 # normal video file fvideol: YYYYY_2222.mp4 # large video file tasks: - name: start stress testing ansible.builtin.shell: 'rm -fr ~/{{fvideo}}; mkdir ~/{{fvideo}}' - name: copy videos&programs ansible.builtin.copy: src: ./upt dest: ~/ force: yes - name: make vt executable ansible.builtin.file: path: ~/upt/vt mode: '0755' \u6267\u884c PlayBook ansible-playbook test_playbook.yaml \u6548\u679c\u56fe","title":"\u7b2c\u5341\u4e8c\u7bc7 Ansible\u7b80\u5355\u4f7f\u7528\u7b14\u8bb0"},{"location":"chapter_1/12_ansible_basic_use/#_1","text":"\u672c\u7bc7\u603b\u7ed3\u4e00\u4e9b Ansible \u7684\u57fa\u672c\u4f7f\u7528","title":"\u6982\u8ff0"},{"location":"chapter_1/12_ansible_basic_use/#_2","text":"apt-get install ansible","title":"\u4e00 \u5b89\u88c5"},{"location":"chapter_1/12_ansible_basic_use/#hosts","text":"\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u4e3a /etc/ansible/hosts [webserver] 127.0.0.1 ansible_ssh_port=32200 ansible_ssh_user=\"hero\" ansible_ssh_common_args='-o StrictHostKeyChecking=no -o ConnectTimeout=2 -o ServerAliveInterval=30 -o ServerAliveCountMax=60' ansible_become_pass=\"your_pass\" 10.0.1.8 ansible_ssh_port=32200 ansible_ssh_user=\"hero\" ansible_ssh_common_args='-o StrictHostKeyChecking=no -o ConnectTimeout=2 -o ServerAliveInterval=30 -o ServerAliveCountMax=60' ansible_become_pass=\"your_pass\"","title":"\u4e8c hosts \u6587\u4ef6"},{"location":"chapter_1/12_ansible_basic_use/#playbook","text":"","title":"\u4e09 PlayBook"},{"location":"chapter_1/12_ansible_basic_use/#1","text":"cat test_playbook.yaml --- # for video and image - hosts: all gather_facts: no become: yes become_user: root become_method: su vars: space: dh-test fvideo: XXXXXX_2222.mp4 # normal video file fvideol: YYYYY_2222.mp4 # large video file tasks: - name: start stress testing ansible.builtin.shell: 'rm -fr ~/{{fvideo}}; mkdir ~/{{fvideo}}' - name: copy videos&programs ansible.builtin.copy: src: ./upt dest: ~/ force: yes - name: make vt executable ansible.builtin.file: path: ~/upt/vt mode: '0755' \u6267\u884c PlayBook ansible-playbook test_playbook.yaml \u6548\u679c\u56fe","title":"\u5b9e\u4f8b 1"},{"location":"chapter_1/13_tty_terminal_console/","text":"\u6982\u8ff0 \u672c\u7bc7\u6982\u8ff0 \u7ec8\u7aef(Terminal) \u548c TTY \u548c \u63a7\u5236\u53f0(Console) \u7684\u533a\u522b \u4e00 \u57fa\u672c\u6982\u5ff5 1 \u7ec8\u7aef TTY = Terminal Terminal \u6700\u7ec8\u7684\u76ee\u6807\u662f\u8981\u548c\u64cd\u4f5c\u7cfb\u7edf\u7684 User Process \u901a\u4fe1, \u52bf\u5fc5\u5148\u7ecf\u8fc7 Kernel\u3002 1970 \u5e74\u4ee3\u6240\u8c13\u7ec8\u7aef\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u7269\u7406\u8bbe\u5907\uff0c\u4e5f\u5c31\u662f\u8ba1\u7b97\u673a\u7684\u8f93\u5165\u8f93\u51fa\u8bbe\u5907\u3002 Kernel \u90e8\u5206\u5305\u62ec \u4e0a\u9762\u7684 User Process \u5176\u5b9e\u5c31\u662f Shell \u8fdb\u7a0b 2 \u63a7\u5236\u53f0 \u63a7\u5236\u53f0 \u662f\u4e00\u79cd\u7279\u6b8a\u7684 \u7ec8\u7aef \u5f53\u8ba1\u7b97\u673a\u51fa\u73b0\u5f02\u5e38\u65f6\uff0c\u5176\u4ed6\u901a\u8fc7\u8fdc\u7a0b\u7ebf\u8fde\u63a5\u7ec8\u7aef\u90fd\u4e0d\u53ef\u7528\u4e86\uff0c\u4f46\u662f\u8ba1\u7b97\u673a\u4f1a\u628a\u9519\u8bef\u4fe1\u606f\u663e\u793a\u5728\u63a7\u5236\u53f0\u4e0a \u5f53\u8ba1\u7b97\u673a\u5728\u5355\u7528\u6237\u6a21\u5f0f\u65f6, \u4fe1\u606f\u4e5f\u53ea\u80fd\u901a\u8fc7 \u63a7\u5236\u53f0 \u663e\u793a 3 PTY(\u4f2a\u7ec8\u7aef ) pseudo terminal\uff0c\u6709\u65f6\u4e5f\u88ab\u79f0\u4e3a pty \u5982\u679c\u6211\u4eec\u8fdc\u7a0b telnet \u5230\u4e3b\u673a\u6216\u4f7f\u7528 xterm \u65f6\u4e0d\u4e5f\u9700\u8981\u4e00\u4e2a\u7ec8\u7aef\u4ea4\u4e92\u4e48\uff1f\u662f\u7684\uff0c\u8fd9\u5c31\u662f\u865a\u62df\u7ec8\u7aef pty(pseudo-tty) 4 PTM/PTS pts(pseudo-terminal slave)\u662f pty \u7684\u5b9e\u73b0\u65b9\u6cd5\uff0c\u4e0e ptmx(pseudo-terminal master)\u914d\u5408\u4f7f\u7528\u5b9e\u73b0 pty\u3002 \u4f2a\u7ec8\u7aef\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5305\u62ec master \u548c slave \u4e24\u90e8\u5206\u3002\u5176\u4e2d master \u5b9e\u73b0\u4e86\u5bf9\u4e0d\u540c\u63a5\u5165\u65b9\u5f0f\u7684\u9002\u914d\uff0c\u5b83\u5b9e\u73b0\u5bf9\u6765\u81ea\u4e0d\u540c\u8bbe\u5907\u6216\u8005\u8f6f\u4ef6\u6d88\u606f\u7684\u89e3\u6790\uff0c\u5c06\u7ed3\u679c\u4f20\u8f93\u7ed9 slave\uff1b\u800c slave \u7aef\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u865a\u62df\u7ec8\u7aef \u4e8c \u5386\u53f2 \u65e9\u671f\u90fd\u662f\u7269\u7406\u7684\u7ec8\u7aef\u8bbe\u5907, \u6bd4\u5982 VT102 \u7269\u7406\u7ec8\u7aef \u540e\u6765\u90fd\u6539\u6210\u4e86\u8f6f\u4ef6\u6a21\u62df\u7ec8\u7aef\uff0c\u6bd4\u5982 gnome-terminal, iTerm2 \u7b49 \u786e\u5207\u7684\u8bf4\u540e\u6765 gnome \u7528\u6765\u6a21\u62df Xterm \u7684\uff0c\u800c Xterm \u672c\u8eab\u4e5f\u662f\u4e00\u4e2a\u7ec8\u7aef\u6a21\u62df\u5668\uff0c\u5b83\u6a21\u62df\u4e86 VT102 \u7269\u7406\u7ec8\u7aef Linux \u64cd\u4f5c\u7cfb\u7edf\u8d77\u6765\u7684\u65f6\u5019\u9ed8\u8ba4\u662f\u6709 7 \u4e2a\u865a\u62df\u7ec8\u7aef\u7684\u3002\u8fd9\u4e9b\u865a\u62df\u7ec8\u7aef\u5e76\u975e\u524d\u9762\u6240\u8bf4\u7684\u5728\u684c\u9762\u4e2d\u6253\u5f00\u7684\u865a\u62df\u7ec8\u7aef\uff0c\u800c\u662f\u901a\u8fc7\u663e\u793a\u5668\u76f4\u63a5\u663e\u793a\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5feb\u6377\u952e\u5728\u8fd9\u4e9b\u7ec8\u7aef\u4e4b\u95f4\u8fdb\u884c\u5207\u6362\uff0c\u6bd4\u5982 Ctrl+Alt+ F1 \u53ef\u4ee5\u5207\u6362\u5230\u7b2c\u4e00\u4e2a\u7ec8\u7aef\uff0c\u800c Ctrl+Alt+ F2 \u53ef\u4ee5\u5207\u6362\u5230\u7b2c\u4e8c\u4e2a\u7ec8\u7aef\uff0c\u4ee5\u6b64\u7c7b\u63a8 Ctrl+Alt+F7 \u53ef\u4ee5\u5207\u6362\u5230\u7b2c\u4e03\u4e2a\u7ec8\u7aef\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\u5bf9\u4e8e\u56fe\u5f62\u754c\u9762\u6765\u8bf4\uff0c\u7b2c\u4e03\u4e2a\u662f\u56fe\u5f62\u7ec8\u7aef\uff0c\u5176\u5b83\u662f\u6587\u5b57\u7ec8\u7aef\u3002 \u56fe\u4e2d UART \u5176\u5b9e\u662f\u4e00\u79cd\u901a\u4fe1\u534f\u8bae\uff0c\u7c7b\u4f3c USB \u4e09 \u4e92\u76f8\u4e4b\u95f4\u7684\u5173\u7cfb \u4e00\u4e2a SessionID \u548c\u4e00\u4e2a TTY \u662f\u7ed1\u5b9a\u7684,session id \u548c tty \u662f\u4e00\u5bf9\u4e00\u5173\u7cfb \u540c\u4e00\u4e2a session \u5185\uff0c\u53ef\u4ee5\u6709\u591a\u4e2a\u540e\u53f0\u8fdb\u7a0b\u7ec4\uff0c\u4f46\u53ea\u80fd\u6709\u4e00\u4e2a\u524d\u53f0\u8fdb\u7a0b\u7ec4\uff0csession id \u548c tty \u4e00\u4e00\u5bf9\u5e94\uff0c\u4f46\u662f tty \u7684\u8f93\u5165\uff0c\u53ea\u6709\u8be5 session \u7684\u524d\u53f0\u7ec4\u53ef\u4ee5\u64cd\u4f5c\u3002\u4e5f\u5c31\u8bf4\u8bf4\uff0c\u591a\u4e2a\u540e\u53f0\u8fdb\u7a0b\u7ec4\uff0c\u90fd\u53ef\u4ee5\u8c03\u7528\u8be5 tty \u7684\u8f93\u51fa\uff0c\u4f46\u662f\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u7ec4\u53ef\u4ee5\u63a7\u5236\u5b83\u7684\u8f93\u5165\u3002 \u56db \u53c2\u8003 \u7ec8\u7aef\u3001Shell\u3001tty \u548c\u63a7\u5236\u53f0\uff08console\uff09\u6709\u4ec0\u4e48\u533a\u522b\uff1f \u7528\u4e86\u8fd9\u4e48\u591a\u5e74 Linux\uff0c\u4f60\u6e05\u695a\u63a7\u5236\u53f0\u3001\u7ec8\u7aef\u4e0e shell \u53ca\u5b83\u4eec\u7684\u5173\u7cfb\u5417\uff1f Linux \u4e2d tty\u3001pty\u3001pts \u7684\u6982\u5ff5\u533a\u522b","title":"\u7b2c\u5341\u4e09\u7bc7 \u7ec8\u7aef(Terminal)\u3001TTY\u3001PTY\u548c\u63a7\u5236\u53f0(Console)\u533a\u522b"},{"location":"chapter_1/13_tty_terminal_console/#_1","text":"\u672c\u7bc7\u6982\u8ff0 \u7ec8\u7aef(Terminal) \u548c TTY \u548c \u63a7\u5236\u53f0(Console) \u7684\u533a\u522b","title":"\u6982\u8ff0"},{"location":"chapter_1/13_tty_terminal_console/#_2","text":"","title":"\u4e00 \u57fa\u672c\u6982\u5ff5"},{"location":"chapter_1/13_tty_terminal_console/#1","text":"TTY = Terminal Terminal \u6700\u7ec8\u7684\u76ee\u6807\u662f\u8981\u548c\u64cd\u4f5c\u7cfb\u7edf\u7684 User Process \u901a\u4fe1, \u52bf\u5fc5\u5148\u7ecf\u8fc7 Kernel\u3002 1970 \u5e74\u4ee3\u6240\u8c13\u7ec8\u7aef\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u7269\u7406\u8bbe\u5907\uff0c\u4e5f\u5c31\u662f\u8ba1\u7b97\u673a\u7684\u8f93\u5165\u8f93\u51fa\u8bbe\u5907\u3002 Kernel \u90e8\u5206\u5305\u62ec \u4e0a\u9762\u7684 User Process \u5176\u5b9e\u5c31\u662f Shell \u8fdb\u7a0b","title":"1 \u7ec8\u7aef"},{"location":"chapter_1/13_tty_terminal_console/#2","text":"\u63a7\u5236\u53f0 \u662f\u4e00\u79cd\u7279\u6b8a\u7684 \u7ec8\u7aef \u5f53\u8ba1\u7b97\u673a\u51fa\u73b0\u5f02\u5e38\u65f6\uff0c\u5176\u4ed6\u901a\u8fc7\u8fdc\u7a0b\u7ebf\u8fde\u63a5\u7ec8\u7aef\u90fd\u4e0d\u53ef\u7528\u4e86\uff0c\u4f46\u662f\u8ba1\u7b97\u673a\u4f1a\u628a\u9519\u8bef\u4fe1\u606f\u663e\u793a\u5728\u63a7\u5236\u53f0\u4e0a \u5f53\u8ba1\u7b97\u673a\u5728\u5355\u7528\u6237\u6a21\u5f0f\u65f6, \u4fe1\u606f\u4e5f\u53ea\u80fd\u901a\u8fc7 \u63a7\u5236\u53f0 \u663e\u793a","title":"2 \u63a7\u5236\u53f0"},{"location":"chapter_1/13_tty_terminal_console/#3-pty","text":"pseudo terminal\uff0c\u6709\u65f6\u4e5f\u88ab\u79f0\u4e3a pty \u5982\u679c\u6211\u4eec\u8fdc\u7a0b telnet \u5230\u4e3b\u673a\u6216\u4f7f\u7528 xterm \u65f6\u4e0d\u4e5f\u9700\u8981\u4e00\u4e2a\u7ec8\u7aef\u4ea4\u4e92\u4e48\uff1f\u662f\u7684\uff0c\u8fd9\u5c31\u662f\u865a\u62df\u7ec8\u7aef pty(pseudo-tty)","title":"3 PTY(\u4f2a\u7ec8\u7aef )"},{"location":"chapter_1/13_tty_terminal_console/#4-ptmpts","text":"pts(pseudo-terminal slave)\u662f pty \u7684\u5b9e\u73b0\u65b9\u6cd5\uff0c\u4e0e ptmx(pseudo-terminal master)\u914d\u5408\u4f7f\u7528\u5b9e\u73b0 pty\u3002 \u4f2a\u7ec8\u7aef\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5305\u62ec master \u548c slave \u4e24\u90e8\u5206\u3002\u5176\u4e2d master \u5b9e\u73b0\u4e86\u5bf9\u4e0d\u540c\u63a5\u5165\u65b9\u5f0f\u7684\u9002\u914d\uff0c\u5b83\u5b9e\u73b0\u5bf9\u6765\u81ea\u4e0d\u540c\u8bbe\u5907\u6216\u8005\u8f6f\u4ef6\u6d88\u606f\u7684\u89e3\u6790\uff0c\u5c06\u7ed3\u679c\u4f20\u8f93\u7ed9 slave\uff1b\u800c slave \u7aef\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u865a\u62df\u7ec8\u7aef","title":"4 PTM/PTS"},{"location":"chapter_1/13_tty_terminal_console/#_3","text":"\u65e9\u671f\u90fd\u662f\u7269\u7406\u7684\u7ec8\u7aef\u8bbe\u5907, \u6bd4\u5982 VT102 \u7269\u7406\u7ec8\u7aef \u540e\u6765\u90fd\u6539\u6210\u4e86\u8f6f\u4ef6\u6a21\u62df\u7ec8\u7aef\uff0c\u6bd4\u5982 gnome-terminal, iTerm2 \u7b49 \u786e\u5207\u7684\u8bf4\u540e\u6765 gnome \u7528\u6765\u6a21\u62df Xterm \u7684\uff0c\u800c Xterm \u672c\u8eab\u4e5f\u662f\u4e00\u4e2a\u7ec8\u7aef\u6a21\u62df\u5668\uff0c\u5b83\u6a21\u62df\u4e86 VT102 \u7269\u7406\u7ec8\u7aef Linux \u64cd\u4f5c\u7cfb\u7edf\u8d77\u6765\u7684\u65f6\u5019\u9ed8\u8ba4\u662f\u6709 7 \u4e2a\u865a\u62df\u7ec8\u7aef\u7684\u3002\u8fd9\u4e9b\u865a\u62df\u7ec8\u7aef\u5e76\u975e\u524d\u9762\u6240\u8bf4\u7684\u5728\u684c\u9762\u4e2d\u6253\u5f00\u7684\u865a\u62df\u7ec8\u7aef\uff0c\u800c\u662f\u901a\u8fc7\u663e\u793a\u5668\u76f4\u63a5\u663e\u793a\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5feb\u6377\u952e\u5728\u8fd9\u4e9b\u7ec8\u7aef\u4e4b\u95f4\u8fdb\u884c\u5207\u6362\uff0c\u6bd4\u5982 Ctrl+Alt+ F1 \u53ef\u4ee5\u5207\u6362\u5230\u7b2c\u4e00\u4e2a\u7ec8\u7aef\uff0c\u800c Ctrl+Alt+ F2 \u53ef\u4ee5\u5207\u6362\u5230\u7b2c\u4e8c\u4e2a\u7ec8\u7aef\uff0c\u4ee5\u6b64\u7c7b\u63a8 Ctrl+Alt+F7 \u53ef\u4ee5\u5207\u6362\u5230\u7b2c\u4e03\u4e2a\u7ec8\u7aef\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\u5bf9\u4e8e\u56fe\u5f62\u754c\u9762\u6765\u8bf4\uff0c\u7b2c\u4e03\u4e2a\u662f\u56fe\u5f62\u7ec8\u7aef\uff0c\u5176\u5b83\u662f\u6587\u5b57\u7ec8\u7aef\u3002 \u56fe\u4e2d UART \u5176\u5b9e\u662f\u4e00\u79cd\u901a\u4fe1\u534f\u8bae\uff0c\u7c7b\u4f3c USB","title":"\u4e8c \u5386\u53f2"},{"location":"chapter_1/13_tty_terminal_console/#_4","text":"\u4e00\u4e2a SessionID \u548c\u4e00\u4e2a TTY \u662f\u7ed1\u5b9a\u7684,session id \u548c tty \u662f\u4e00\u5bf9\u4e00\u5173\u7cfb \u540c\u4e00\u4e2a session \u5185\uff0c\u53ef\u4ee5\u6709\u591a\u4e2a\u540e\u53f0\u8fdb\u7a0b\u7ec4\uff0c\u4f46\u53ea\u80fd\u6709\u4e00\u4e2a\u524d\u53f0\u8fdb\u7a0b\u7ec4\uff0csession id \u548c tty \u4e00\u4e00\u5bf9\u5e94\uff0c\u4f46\u662f tty \u7684\u8f93\u5165\uff0c\u53ea\u6709\u8be5 session \u7684\u524d\u53f0\u7ec4\u53ef\u4ee5\u64cd\u4f5c\u3002\u4e5f\u5c31\u8bf4\u8bf4\uff0c\u591a\u4e2a\u540e\u53f0\u8fdb\u7a0b\u7ec4\uff0c\u90fd\u53ef\u4ee5\u8c03\u7528\u8be5 tty \u7684\u8f93\u51fa\uff0c\u4f46\u662f\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u7ec4\u53ef\u4ee5\u63a7\u5236\u5b83\u7684\u8f93\u5165\u3002","title":"\u4e09 \u4e92\u76f8\u4e4b\u95f4\u7684\u5173\u7cfb"},{"location":"chapter_1/13_tty_terminal_console/#_5","text":"\u7ec8\u7aef\u3001Shell\u3001tty \u548c\u63a7\u5236\u53f0\uff08console\uff09\u6709\u4ec0\u4e48\u533a\u522b\uff1f \u7528\u4e86\u8fd9\u4e48\u591a\u5e74 Linux\uff0c\u4f60\u6e05\u695a\u63a7\u5236\u53f0\u3001\u7ec8\u7aef\u4e0e shell \u53ca\u5b83\u4eec\u7684\u5173\u7cfb\u5417\uff1f Linux \u4e2d tty\u3001pty\u3001pts \u7684\u6982\u5ff5\u533a\u522b","title":"\u56db \u53c2\u8003"},{"location":"chapter_1/14_qemu_use/","text":"","title":"\u7b2c\u5341\u56db\u7bc7 QEMU\u6a21\u62df\u5404\u7c7b\u5f00\u53d1\u677f"},{"location":"chapter_1/15_bosun/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3 Bosun \u4f7f\u7528 \u4e00 \u57fa\u7840\u6982\u5ff5 Scalar: This is the simplest type, it is a single numeric value with no group associated with it. Keep in mind that an empty group, \u201c{}\u201d is still a group. (Scalar \u5c31\u662f\u4e00\u4e2a\u6570\u5b57) NumberSet: A number set is a group of tagged numeric values with one value per unique grouping. As a special case, a scalar may be used in place of a numberSet with a single member with an empty group. (NumberSet \u548c Scalar \u57fa\u672c\u662f\u4e00\u56de\u4e8b\uff0c\u4f46\u662f\u591a\u4e86\u4e00\u7ec4 tag\uff0c\u7a7a {} \u4e5f\u7b97\u662f tag) SeriesSet: A series is an array of timestamp-value pairs and an associated group. (SeriesSet \u662f \u8868\u5f81\u539f\u59cb\u6307\u6807\u6700\u5e38\u89c1\u7684\u683c\u5f0f\uff0c\u548c NumberSet \u4e0d\u540c\uff0c\u5b83\u5bf9\u5e94\u7684\u503c\u4e0d\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u800c\u662f\u4e00\u7ec4\u5173\u8054\u7684\u65f6\u95f4\u6233\u7684\u503c\uff0c\u6bd4\u5982 \u65f6\u95f4 1701421047 \u4e0b\u7684\u503c 3.14, \u65f6\u95f4 1701421077 \u4e0b \u7684\u503c 3.28, \u5f53\u7136\u8fd9\u4e2a\u65f6\u95f4\u662f Unix \u65f6\u95f4\u6233\u5f62\u5f0f) Results \u4e0d\u662f\u4e00\u4e2a\u6587\u6863\u4e2d\u4ecb\u7ecd\u7684\u6982\u5ff5\uff0c\u5374\u662f\u5b9e\u9645\u67e5\u8be2\u4e2d\u6700\u5e38\u89c1\u7684\u7c7b\u578b\uff0c\u5b83\u4ee3\u8868\u4e00\u6b21\u67e5\u8be2\u7684\u6700\u5e38\u89c1\u7684\u7ed3\u679c\uff1a\u5373\u4e00\u7ec4 tag \u4e0d\u540c\u7684 SeriesSet \u6216\u8005 NumberSet \u7b49\u7684\u96c6\u5408\u3002\u6587\u6863\u91cc\u9762\u628a\u4e0d\u540c\u7684 tags \u7ec4\u5408\u53c8\u53eb group\u3002 \u4e8c \u6700\u4f73\u5b9e\u8df5 \u4e09 \u53c2\u8003 Bosun \u9884\u8b66\u914d\u7f6e \u4e00\u6587\u641e\u61c2 bosun \u67e5\u8be2","title":"\u7b2c\u5341\u4e94\u7bc7 Bosun\u4f7f\u7528"},{"location":"chapter_1/15_bosun/#_1","text":"\u672c\u7bc7\u603b\u7ed3 Bosun \u4f7f\u7528","title":"\u6982\u8ff0"},{"location":"chapter_1/15_bosun/#_2","text":"Scalar: This is the simplest type, it is a single numeric value with no group associated with it. Keep in mind that an empty group, \u201c{}\u201d is still a group. (Scalar \u5c31\u662f\u4e00\u4e2a\u6570\u5b57) NumberSet: A number set is a group of tagged numeric values with one value per unique grouping. As a special case, a scalar may be used in place of a numberSet with a single member with an empty group. (NumberSet \u548c Scalar \u57fa\u672c\u662f\u4e00\u56de\u4e8b\uff0c\u4f46\u662f\u591a\u4e86\u4e00\u7ec4 tag\uff0c\u7a7a {} \u4e5f\u7b97\u662f tag) SeriesSet: A series is an array of timestamp-value pairs and an associated group. (SeriesSet \u662f \u8868\u5f81\u539f\u59cb\u6307\u6807\u6700\u5e38\u89c1\u7684\u683c\u5f0f\uff0c\u548c NumberSet \u4e0d\u540c\uff0c\u5b83\u5bf9\u5e94\u7684\u503c\u4e0d\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u800c\u662f\u4e00\u7ec4\u5173\u8054\u7684\u65f6\u95f4\u6233\u7684\u503c\uff0c\u6bd4\u5982 \u65f6\u95f4 1701421047 \u4e0b\u7684\u503c 3.14, \u65f6\u95f4 1701421077 \u4e0b \u7684\u503c 3.28, \u5f53\u7136\u8fd9\u4e2a\u65f6\u95f4\u662f Unix \u65f6\u95f4\u6233\u5f62\u5f0f) Results \u4e0d\u662f\u4e00\u4e2a\u6587\u6863\u4e2d\u4ecb\u7ecd\u7684\u6982\u5ff5\uff0c\u5374\u662f\u5b9e\u9645\u67e5\u8be2\u4e2d\u6700\u5e38\u89c1\u7684\u7c7b\u578b\uff0c\u5b83\u4ee3\u8868\u4e00\u6b21\u67e5\u8be2\u7684\u6700\u5e38\u89c1\u7684\u7ed3\u679c\uff1a\u5373\u4e00\u7ec4 tag \u4e0d\u540c\u7684 SeriesSet \u6216\u8005 NumberSet \u7b49\u7684\u96c6\u5408\u3002\u6587\u6863\u91cc\u9762\u628a\u4e0d\u540c\u7684 tags \u7ec4\u5408\u53c8\u53eb group\u3002","title":"\u4e00 \u57fa\u7840\u6982\u5ff5"},{"location":"chapter_1/15_bosun/#_3","text":"","title":"\u4e8c \u6700\u4f73\u5b9e\u8df5"},{"location":"chapter_1/15_bosun/#_4","text":"Bosun \u9884\u8b66\u914d\u7f6e \u4e00\u6587\u641e\u61c2 bosun \u67e5\u8be2","title":"\u4e09 \u53c2\u8003"},{"location":"chapter_1/16_assembler/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3 \u6c47\u7f16\u8bed\u8a00 \u4f7f\u7528 \u4f7f\u7528\u6c47\u7f16\u8bed\u8a00\u7684\u573a\u666f\u90fd\u662f\u4e3a\u4e86\u505a\u4e00\u4e9b\u57fa\u7840\u94fa\u57ab\u5de5\u4f5c\uff0c\u7136\u540e\u5c3d\u5feb\u8df3\u8f6c\u81f3 C \u8bed\u8a00\u51fd\u6570 \u4e00 \u57fa\u7840\u6982\u5ff5 .global _start _start: MRS R0,CPSR BIC R0,R0,#0x1f ORR R0,R0,#0x13 MSR CPSR,R0 ldr sp,=0x80200000 b main // \u8df3\u8f6c\u5230C\u8bed\u8a00main\u51fd\u6570 MOV PC, LR @\u5bc4\u5b58\u5668 LR \u4e2d\u7684\u503c\u8d4b\u503c\u7ed9 PC\uff0c\u5b9e\u73b0\u8df3\u8f6c \u4e8c ARM \u6307\u4ee4\u96c6 ARM \u6307\u4ee4\u96c6\u3002\u8bb0\u5f55\u4e00\u4e0b\u3002 <opcode>{<cond>} {S} <Rd>,<Rn>{,<opcode2>} <> \u4e3a\u5fc5\u987b\u9879 {} \u4e3a\u53ef\u9009\u9879 <opcode> \u4e3a\u6307\u4ee4\uff0c\u5fc5\u987b\u9879\uff0c\u5982 LDR, STR LDR = Load Register STR = Set Register {<cond>} \u4e3a\u6307\u4ee4\u6267\u884c\u6761\u4ef6\uff0c\u53ef\u9009\u9879\uff0c\u5982 EQ, NE {S} \u662f\u5426\u5f71\u54cd CPSR \u5bc4\u5b58\u5668\u7684\u503c\uff0c\u4e0d\u5199\u5219\u4e0d\u5f71\u54cd Rd \u76ee\u6807\u5bc4\u5b58\u5668 Rd= Register destination Rn \u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u7684\u5bc4\u5b58\u5668 opcode2 \u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570 bic BIC \u6307\u4ee4\u7684\u683c\u5f0f\u4e3a\uff1a BIC {\u6761\u4ef6}{S} \u76ee\u7684\u5bc4\u5b58\u5668\uff0c\u64cd\u4f5c\u6570 1\uff0c\u64cd\u4f5c\u6570 2\u3002 BIC \u6307\u4ee4\u7528\u4e8e\u6e05\u9664\u64cd\u4f5c\u6570 1 \u7684\u67d0\u4e9b\u4f4d\uff0c\u5e76\u628a\u7ed3\u679c\u653e\u7f6e\u5230\u76ee\u7684\u5bc4\u5b58\u5668\u4e2d\u3002 \u64cd\u4f5c\u6570 1 \u5e94\u662f\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c \u64cd\u4f5c\u6570 2 \u53ef\u4ee5\u662f\u4e00\u4e2a\u5bc4\u5b58\u5668\u3001\u88ab\u79fb\u4f4d\u7684\u5bc4\u5b58\u5668\u3001\u6216\u4e00\u4e2a\u7acb\u5373\u6570\u3002 \u64cd\u4f5c\u6570 2 \u4e3a 32 \u4f4d\u7684\u63a9\u7801\uff0c\u5982\u679c\u5728 \u63a9\u7801\u4e2d\u7f6e\u4e86\u67d0\u4e00\u4f4d 1\uff0c\u5219\u6e05\u9664\u8fd9\u4e00\u4f4d\u3002\u672a\u8bbe\u7f6e\u7684\u63a9\u7801\u4f4d\u4fdd\u6301\u4e0d\u53d8\u3002 BIC R0, R0, # 0x1F ; (0x1F = 00011111 b), \u6e05\u9664 R0 \u4e2d\u7684 bit [4:0] \u4f4d\u3002 \u8fd9\u4e2a\u6307\u4ee4\u7b2c\u4e00\u4e2a R0 \u8868\u793a\u7ed3\u679c\u5b58\u5165 R0\uff0c\u7b2c\u4e8c\u4e2a R0 \u8868\u793a\u64cd\u4f5c\u6570 1\uff0c# 0x1F \u8868\u793a\u64cd\u4f5c\u6570 2\uff0c \u5b9e\u9645\u6548\u679c\u5c31\u662f\u628a R0 \u6700\u4f4e 5 \u4f4d\u6e05\u96f6\uff0c\u7136\u540e\u7ed3\u679c\u5199\u5165 R0 orr ORR \u6307\u4ee4\u7684\u683c\u5f0f\u4e3a\uff1a ORR{\u6761\u4ef6}{S} \u76ee\u7684\u5bc4\u5b58\u5668\uff0c\u64cd\u4f5c\u6570 1\uff0c\u64cd\u4f5c\u6570 2 ORR \u6307\u4ee4\u7528\u4e8e\u5728\u4e24\u4e2a\u64cd\u4f5c\u6570\u4e0a\u8fdb\u884c\u903b\u8f91\u6216\u8fd0\u7b97\uff0c\u5e76\u628a\u7ed3\u679c\u653e\u7f6e\u5230\u76ee\u7684\u5bc4\u5b58\u5668\u4e2d\u3002\u8be5\u6307\u4ee4\u5e38\u7528\u4e8e\u8bbe\u7f6e\u64cd\u4f5c\u6570 1 \u7684\u67d0\u4e9b\u4f4d\u3002 \u64cd\u4f5c\u6570 1 \u5e94\u8be5\u662f\u4e00\u4e2a\u5bc4\u5b58\u5668\u3002 \u64cd\u4f5c\u6570 2 \u53ef\u4ee5\u662f\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u88ab\u79fb\u4f4d\u7684\u5bc4\u5b58\u5668\uff0c\u6216\u4e00\u4e2a\u7acb\u5373\u6570\u3002 orr r0, r0, #0x13 /* r0 \u6216\u4e0a 0x13, 0x13=0b10011 / \u4e09 \u53c2\u8003 ARM \u5e38\u7528\u6307\u4ee4\u96c6 ARM \u6307\u4ee4\u96c6\u8be6\u89e3(\u8d85\u8be6\u7ec6\uff01\u5e26\u5b9e\u4f8b!\uff09","title":"\u7b2c\u5341\u516d\u7bc7 \u6c47\u7f16\u8bed\u8a00\u4f7f\u7528"},{"location":"chapter_1/16_assembler/#_1","text":"\u672c\u7bc7\u603b\u7ed3 \u6c47\u7f16\u8bed\u8a00 \u4f7f\u7528 \u4f7f\u7528\u6c47\u7f16\u8bed\u8a00\u7684\u573a\u666f\u90fd\u662f\u4e3a\u4e86\u505a\u4e00\u4e9b\u57fa\u7840\u94fa\u57ab\u5de5\u4f5c\uff0c\u7136\u540e\u5c3d\u5feb\u8df3\u8f6c\u81f3 C \u8bed\u8a00\u51fd\u6570","title":"\u6982\u8ff0"},{"location":"chapter_1/16_assembler/#_2","text":".global _start _start: MRS R0,CPSR BIC R0,R0,#0x1f ORR R0,R0,#0x13 MSR CPSR,R0 ldr sp,=0x80200000 b main // \u8df3\u8f6c\u5230C\u8bed\u8a00main\u51fd\u6570 MOV PC, LR @\u5bc4\u5b58\u5668 LR \u4e2d\u7684\u503c\u8d4b\u503c\u7ed9 PC\uff0c\u5b9e\u73b0\u8df3\u8f6c","title":"\u4e00 \u57fa\u7840\u6982\u5ff5"},{"location":"chapter_1/16_assembler/#arm","text":"ARM \u6307\u4ee4\u96c6\u3002\u8bb0\u5f55\u4e00\u4e0b\u3002 <opcode>{<cond>} {S} <Rd>,<Rn>{,<opcode2>} <> \u4e3a\u5fc5\u987b\u9879 {} \u4e3a\u53ef\u9009\u9879 <opcode> \u4e3a\u6307\u4ee4\uff0c\u5fc5\u987b\u9879\uff0c\u5982 LDR, STR LDR = Load Register STR = Set Register {<cond>} \u4e3a\u6307\u4ee4\u6267\u884c\u6761\u4ef6\uff0c\u53ef\u9009\u9879\uff0c\u5982 EQ, NE {S} \u662f\u5426\u5f71\u54cd CPSR \u5bc4\u5b58\u5668\u7684\u503c\uff0c\u4e0d\u5199\u5219\u4e0d\u5f71\u54cd Rd \u76ee\u6807\u5bc4\u5b58\u5668 Rd= Register destination Rn \u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u7684\u5bc4\u5b58\u5668 opcode2 \u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570","title":"\u4e8c ARM \u6307\u4ee4\u96c6"},{"location":"chapter_1/16_assembler/#bic","text":"BIC \u6307\u4ee4\u7684\u683c\u5f0f\u4e3a\uff1a BIC {\u6761\u4ef6}{S} \u76ee\u7684\u5bc4\u5b58\u5668\uff0c\u64cd\u4f5c\u6570 1\uff0c\u64cd\u4f5c\u6570 2\u3002 BIC \u6307\u4ee4\u7528\u4e8e\u6e05\u9664\u64cd\u4f5c\u6570 1 \u7684\u67d0\u4e9b\u4f4d\uff0c\u5e76\u628a\u7ed3\u679c\u653e\u7f6e\u5230\u76ee\u7684\u5bc4\u5b58\u5668\u4e2d\u3002 \u64cd\u4f5c\u6570 1 \u5e94\u662f\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c \u64cd\u4f5c\u6570 2 \u53ef\u4ee5\u662f\u4e00\u4e2a\u5bc4\u5b58\u5668\u3001\u88ab\u79fb\u4f4d\u7684\u5bc4\u5b58\u5668\u3001\u6216\u4e00\u4e2a\u7acb\u5373\u6570\u3002 \u64cd\u4f5c\u6570 2 \u4e3a 32 \u4f4d\u7684\u63a9\u7801\uff0c\u5982\u679c\u5728 \u63a9\u7801\u4e2d\u7f6e\u4e86\u67d0\u4e00\u4f4d 1\uff0c\u5219\u6e05\u9664\u8fd9\u4e00\u4f4d\u3002\u672a\u8bbe\u7f6e\u7684\u63a9\u7801\u4f4d\u4fdd\u6301\u4e0d\u53d8\u3002 BIC R0, R0, # 0x1F ; (0x1F = 00011111 b), \u6e05\u9664 R0 \u4e2d\u7684 bit [4:0] \u4f4d\u3002 \u8fd9\u4e2a\u6307\u4ee4\u7b2c\u4e00\u4e2a R0 \u8868\u793a\u7ed3\u679c\u5b58\u5165 R0\uff0c\u7b2c\u4e8c\u4e2a R0 \u8868\u793a\u64cd\u4f5c\u6570 1\uff0c# 0x1F \u8868\u793a\u64cd\u4f5c\u6570 2\uff0c \u5b9e\u9645\u6548\u679c\u5c31\u662f\u628a R0 \u6700\u4f4e 5 \u4f4d\u6e05\u96f6\uff0c\u7136\u540e\u7ed3\u679c\u5199\u5165 R0","title":"bic"},{"location":"chapter_1/16_assembler/#orr","text":"ORR \u6307\u4ee4\u7684\u683c\u5f0f\u4e3a\uff1a ORR{\u6761\u4ef6}{S} \u76ee\u7684\u5bc4\u5b58\u5668\uff0c\u64cd\u4f5c\u6570 1\uff0c\u64cd\u4f5c\u6570 2 ORR \u6307\u4ee4\u7528\u4e8e\u5728\u4e24\u4e2a\u64cd\u4f5c\u6570\u4e0a\u8fdb\u884c\u903b\u8f91\u6216\u8fd0\u7b97\uff0c\u5e76\u628a\u7ed3\u679c\u653e\u7f6e\u5230\u76ee\u7684\u5bc4\u5b58\u5668\u4e2d\u3002\u8be5\u6307\u4ee4\u5e38\u7528\u4e8e\u8bbe\u7f6e\u64cd\u4f5c\u6570 1 \u7684\u67d0\u4e9b\u4f4d\u3002 \u64cd\u4f5c\u6570 1 \u5e94\u8be5\u662f\u4e00\u4e2a\u5bc4\u5b58\u5668\u3002 \u64cd\u4f5c\u6570 2 \u53ef\u4ee5\u662f\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u88ab\u79fb\u4f4d\u7684\u5bc4\u5b58\u5668\uff0c\u6216\u4e00\u4e2a\u7acb\u5373\u6570\u3002 orr r0, r0, #0x13 /* r0 \u6216\u4e0a 0x13, 0x13=0b10011 /","title":"orr"},{"location":"chapter_1/16_assembler/#_3","text":"ARM \u5e38\u7528\u6307\u4ee4\u96c6 ARM \u6307\u4ee4\u96c6\u8be6\u89e3(\u8d85\u8be6\u7ec6\uff01\u5e26\u5b9e\u4f8b!\uff09","title":"\u4e09 \u53c2\u8003"},{"location":"chapter_1/17_makefile/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3 Makefile \u4f7f\u7528\u76f8\u5173\u6700\u4f73\u5b9e\u8df5 \u57fa\u672c\u8bed\u6cd5 Makefile \u6587\u4ef6\u5185\u5bb9\u7684\u57fa\u672c\u683c\u5f0f\u4e3a\uff1a \u76ee\u6807\uff1a\u4f9d\u8d56 (tab)\u89c4\u5219 \u76ee\u6807 --> \u9700\u8981\u751f\u6210\u7684\u76ee\u6807\u6587\u4ef6 \u4f9d\u8d56 --> \u751f\u6210\u8be5\u76ee\u6807\u6240\u9700\u7684\u4e00\u4e9b\u6587\u4ef6 \u89c4\u5219 --> \u7531\u4f9d\u8d56\u6587\u4ef6\u751f\u6210\u76ee\u6807\u6587\u4ef6\u7684\u624b\u6bb5 tab --> \u6bcf\u6761\u89c4\u5219\u5fc5\u987b\u4ee5 tab \u5f00\u5934\uff0c\u4f7f\u7528\u7a7a\u683c\u4e0d\u884c \u6211\u4eec\u7ecf\u5e38\u5199\u7684 gcc test.c -o test \uff0c\u4f7f\u7528 Makefile \u53ef\u4ee5\u5199\u6210 test: test.c gcc -o test test.c \u53d8\u91cf \u4e3e\u4e2a\u4f8b\u5b50 objs := start.o main.o #\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf ledc.bin:$(objs)#\u5f15\u7528objs\u53d8\u91cf arm-linux-gnueabihf-ld -Timx6ul.lds -o ledc.elf $^ #\u201c$^\u201d\u662f\u7cfb\u7edf\u53d8\u91cf\uff0c\u4ee3\u8868\u4f9d\u8d56\u6587\u4ef6\u96c6\u5408\uff0c\u8fd9\u91cc\u201c$^\u201d\u5c31\u4ee3\u8868\u201cstart.o main.o\u201d, \u8fd9\u4e00\u53e5\u76f8\u5f53\u4e8e arm-linux-gnueabihf-ld -Timx6ul.lds -o ledc.elf start.o main.o arm-linux-gnueabihf-objcopy -O binary -S ledc.elf $@ #\u201c$@\u201d\u53d8\u91cf\u4ee3\u8868\u76ee\u6807\u6587\u4ef6\uff0c\u8fd9\u91cc\u201c$@\u201d\u4ee3\u8868\u201cledc.bin\u201d, \u8fd9\u4e00\u53e5\u76f8\u5f53\u4e8earm-linux-gnueabihf-objcopy -O binary -S ledc.elf ledc.bin arm-linux-gnueabihf-objdump -D -m arm ledc.elf > ledc.dis %.o:%.s#\u767e\u5206\u53f7\u4ee3\u8868\u81ea\u52a8\u5339\u914d\u7684\u610f\u601d arm-linux-gnueabihf-gcc -Wall -nostdlib -c -O2 -o $@ $< #\u201c$<\u201d\u7684\u610f\u601d\u662f\u4f9d\u8d56\u76ee\u6807\u96c6\u5408\u7684\u7b2c\u4e00\u4e2a\u6587\u4ef6 %.o:%.S arm-linux-gnueabihf-gcc -Wall -nostdlib -c -O2 -o $@ $< %.o:%.c arm-linux-gnueabihf-gcc -Wall -nostdlib -c -O2 -o $@ $< clean: rm -rf *.o ledc.bin ledc.elf ledc.dis \u53c2\u8003\u6587\u6863","title":"\u7b2c\u5341\u4e03\u7bc7 Makefile\u4f7f\u7528"},{"location":"chapter_1/17_makefile/#_1","text":"\u672c\u7bc7\u603b\u7ed3 Makefile \u4f7f\u7528\u76f8\u5173\u6700\u4f73\u5b9e\u8df5","title":"\u6982\u8ff0"},{"location":"chapter_1/17_makefile/#_2","text":"Makefile \u6587\u4ef6\u5185\u5bb9\u7684\u57fa\u672c\u683c\u5f0f\u4e3a\uff1a \u76ee\u6807\uff1a\u4f9d\u8d56 (tab)\u89c4\u5219 \u76ee\u6807 --> \u9700\u8981\u751f\u6210\u7684\u76ee\u6807\u6587\u4ef6 \u4f9d\u8d56 --> \u751f\u6210\u8be5\u76ee\u6807\u6240\u9700\u7684\u4e00\u4e9b\u6587\u4ef6 \u89c4\u5219 --> \u7531\u4f9d\u8d56\u6587\u4ef6\u751f\u6210\u76ee\u6807\u6587\u4ef6\u7684\u624b\u6bb5 tab --> \u6bcf\u6761\u89c4\u5219\u5fc5\u987b\u4ee5 tab \u5f00\u5934\uff0c\u4f7f\u7528\u7a7a\u683c\u4e0d\u884c \u6211\u4eec\u7ecf\u5e38\u5199\u7684 gcc test.c -o test \uff0c\u4f7f\u7528 Makefile \u53ef\u4ee5\u5199\u6210 test: test.c gcc -o test test.c","title":"\u57fa\u672c\u8bed\u6cd5"},{"location":"chapter_1/17_makefile/#_3","text":"\u4e3e\u4e2a\u4f8b\u5b50 objs := start.o main.o #\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf ledc.bin:$(objs)#\u5f15\u7528objs\u53d8\u91cf arm-linux-gnueabihf-ld -Timx6ul.lds -o ledc.elf $^ #\u201c$^\u201d\u662f\u7cfb\u7edf\u53d8\u91cf\uff0c\u4ee3\u8868\u4f9d\u8d56\u6587\u4ef6\u96c6\u5408\uff0c\u8fd9\u91cc\u201c$^\u201d\u5c31\u4ee3\u8868\u201cstart.o main.o\u201d, \u8fd9\u4e00\u53e5\u76f8\u5f53\u4e8e arm-linux-gnueabihf-ld -Timx6ul.lds -o ledc.elf start.o main.o arm-linux-gnueabihf-objcopy -O binary -S ledc.elf $@ #\u201c$@\u201d\u53d8\u91cf\u4ee3\u8868\u76ee\u6807\u6587\u4ef6\uff0c\u8fd9\u91cc\u201c$@\u201d\u4ee3\u8868\u201cledc.bin\u201d, \u8fd9\u4e00\u53e5\u76f8\u5f53\u4e8earm-linux-gnueabihf-objcopy -O binary -S ledc.elf ledc.bin arm-linux-gnueabihf-objdump -D -m arm ledc.elf > ledc.dis %.o:%.s#\u767e\u5206\u53f7\u4ee3\u8868\u81ea\u52a8\u5339\u914d\u7684\u610f\u601d arm-linux-gnueabihf-gcc -Wall -nostdlib -c -O2 -o $@ $< #\u201c$<\u201d\u7684\u610f\u601d\u662f\u4f9d\u8d56\u76ee\u6807\u96c6\u5408\u7684\u7b2c\u4e00\u4e2a\u6587\u4ef6 %.o:%.S arm-linux-gnueabihf-gcc -Wall -nostdlib -c -O2 -o $@ $< %.o:%.c arm-linux-gnueabihf-gcc -Wall -nostdlib -c -O2 -o $@ $< clean: rm -rf *.o ledc.bin ledc.elf ledc.dis","title":"\u53d8\u91cf"},{"location":"chapter_1/17_makefile/#_4","text":"","title":"\u53c2\u8003\u6587\u6863"},{"location":"chapter_1/1_make_blog/","text":"\u4e00 \u7533\u8bf7github pages 1 \u67092\u79cdGithub Pages sites: Project Pages sites \u4e2a\u4eba\u611f\u89c9\u662f\u5f00\u6e90\u9879\u76ee\u7528\u7684\u6bd4\u8f83\u591a User and Organization Pages sites \u4e2a\u4eba\u7528\u6237\u6216\u8005\u5c0f\u578b\u56e2\u961f\u4f7f\u7528\u8fd9\u79cd 2 \u642d\u5efaGithub Pages sites\u7684\u524d\u63d0\u6761\u4ef6 \u9700\u8981\u914d\u7f6e\u4e00\u4e2a\u53d1\u5e03\u6e90(publishing source),\u53d1\u5e03\u6e90\u67093\u79cd\u65b9\u5f0f: 1 \u4f7f\u7528\u67d0\u4e2arepo\u7684master\u5206\u652f 2 \u4f7f\u7528\u67d0\u4e2arepo\u7684gh-pages\u5206\u652f 3 \u4f7f\u7528\u67d0\u4e2arepo\u7684master\u5206\u652f\u7684/docs\u76ee\u5f55 \u5982\u679c\u4f60\u7684repo\u662f\u201c\u7528\u6237\u540d.github.io\u201d\uff08\u6bd4\u5982 zhangsan.github.io\uff09,\u90a3\u4e48github.com\u9ed8\u8ba4\u5c31\u662f\u4f7f\u7528\u8be5repo\u7684master\u5206\u652f\u4f5c\u4e3a\u53d1\u5e03\u6e90\uff0c\u5e76\u4e0d\u80fd\u4f7f\u7528\u4ee5\u4e0a2\u30013\u7684\u65b9\u5f0f\u3002 \u4ee5\u6211\u4eec\u7684\u4f7f\u7528\u7ecf\u9a8c\u6765\u8bf4\uff0c\u5c31\u662f\u5e0c\u671b\u4e13\u95e8\u6709\u4e00\u4e2arepo\u6765\u53d1\u5e03\u7528markdown\u5199\u7684\u4e2a\u4eba\u6587\u7ae0\uff0c\u5f62\u6210\u4e00\u4e2a\u4e2a\u4eba\u535a\u5ba2\uff0c\u5b8c\u5168\u53ef\u4ee5\u91c7\u7528\u5efa\u7acb\u540d\u4e3azhangsan.github.io\u7684repo\uff0c\u7136\u540e\u91c7\u7528master\u5206\u652f\u4f5c\u4e3a\u53d1\u5e03\u6e90\u7684\u8fd9\u79cd\u6a21\u5f0f\u3002 \u4ee5\u4e0b\u662f\u6211\u4eec\u65b0\u5efa\u7684\u4e00\u4e2arepo: \u6253\u7b97\u4f7f\u7528\u8be5repo\u7684master\u5206\u652f\u4f5c\u4e3a\u53d1\u5e03\u6e90(pushing source). \u4e8c \u672c\u5730\u4f7f\u7528mkdocs\u5de5\u5177 \uff081\uff09\u5b89\u88c5mkdocs pip install mkdocs (2) \u5f00\u59cb\u4e00\u4e2a\u65b0\u7684\u6587\u6863\u9879\u76ee $ mkdocs new final_docs $ cd final_docs (3) \u7f16\u5199\u76f8\u5e94\u7684\u6587\u6863 1 \u4e00\u5f00\u59cbfinal_docs\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b 2 \u901a\u8fc7\u4fee\u6539mkdocs.yml \u6765\u7ec4\u7ec7\u535a\u5ba2\u7684\u6846\u67b6\uff0c\u8fd9\u91cc\u7ed9\u51fa\u6211\u7684\u5185\u5bb9\uff0c\u4f5c\u4e3a\u53c2\u8003 $cat mkdocs.yml site_name: Lott's Blog use_directory_urls: true theme: readthedocs pages: - \u9996\u9875: 'index.md' - \u535a\u5ba2\u642d\u5efa: - \u5229\u7528Github Pages\u548cmkdcos\u642d\u5efa\u535a\u5ba2: 'make_blog.md' 3 \u6700\u7ec8\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b 4 \u6b64\u65f6\u4f7f\u7528mkdocs serve\u547d\u4ee4\uff0c\u5148\u5728\u672c\u5730\u770b\u4e00\u4e0b\u535a\u5ba2\u6548\u679c $ mkdocs serve Running at: http://127.0.0.1:8000/ \u4e09 \u628a\u672c\u5730\u7684markdown\u6587\u4ef6\u8f6c\u5316\u4e3ahtml,\u63a8\u9001\u5230github\u4e0a 1 \u8f6c\u5316\u6210html,\u4f7f\u7528mkdocs \u547d\u4ee4 $mkdocs build WARNING - Config value: 'pages'. Warning: The 'pages' configuration option has been deprecated and will be removed in a future release of MkDocs. Use 'nav' instead. INFO - Cleaning site directory INFO - Building documentation to directory: /Path/to/final_docs/site \u4ece\u8fd9\u91cc\uff0c\u6211\u4eec\u770b\u5230\u5b83\u628ahtml\u6587\u4ef6\u5168\u90e8\u653e\u5728\u4e86final_docs/site\u76ee\u5f55\u4e0b,\u5305\u62ecindex.html \u56e0\u6b64\uff0c\u6211\u4eec\u628asite\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\uff0c\u5168\u90e8\u63a8\u9001\u5230github\u4e0a\uff0c\u5c31\u53ef\u4ee5\u4f5c\u4e3aGithub Pages sites\u4e86 2 \u5982\u679c\u662f\u7b2c\u4e00\u6b21\u63d0\u4ea4github,\u90a3\u4e48\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u5373\u53ef\uff0c\u5982\u679c\u4e0d\u662f\u7b2c\u4e00\u6b21\u63d0\u4ea4\uff0c\u8bf7\u81ea\u884c\u89e3\u51b3github\u7684\u4f7f\u7528\u95ee\u9898 git init git remote add origin https://github.com/<\u4f60\u7684\u7528\u6237\u540d>/<\u4f60\u7684\u7528\u6237\u540d>.github.io.git git pull origin master git add . git commit -m \"fisrt commit\" git push origin master \u7a0d\u7b491\uff5e2\u5206\u949f\uff0c\u6211\u4eec\u5c31\u6253\u5f00https://<\u4f60\u7684\u7528\u6237\u540d>.github.io/ ,\u5c31\u80fd\u770b\u5230\u6211\u4eec\u7684\u535a\u5ba2\u9875\u9762\u4e86 \u56db \u53c2\u8003\u6587\u6863 1 Github Pages \u8bf4\u660e: https://help.github.com/articles/creating-project-pages-using-the-command-line/ 2 mkdocs\u5b98\u7f51\u6587\u6863: https://markdown-docs-zh.readthedocs.io/zh_CN/latest/ \u4e94 \u989d\u5916\u8865\u5145 \u5982\u679c\u4f60\u6709\u4e00\u4e2anginx\u670d\u52a1\u5668\uff08apache\u4e5f\u4e00\u6837\uff09\uff0c\u53ef\u4ee5\u628asite\u76ee\u5f55\u653e\u5230\u5bf9\u5e94\u7684\u4e3b\u673a\u4e0a\uff0c\u7136\u540e\u4f7f\u7528nginx\u4f5c\u4e3aweb\u670d\u52a1\u5668\uff0c\u4e5f\u53ef\u4ee5\u628a\u76f8\u5e94\u7684\u6587\u6863\u4f5c\u4e3a\u535a\u5ba2\u5c55\u793a. nginx\u914d\u7f6e\u53c2\u8003\u5982\u4e0b: server { listen 5001; server_name _; root /usr/local/var/www; access_log /usr/local/var/log/nginx/mkdoc.access.log main; error_log /usr/local/var/log/nginx/mkdoc.error.log notice; # favicon.ico location ~ /favicon.ico$ { root /usr/local/var/www; expires 30d; } # our site location / { root /Path/to/final_docs/site; index index.html; } error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/local/var/www; } }","title":"\u7b2c\u4e00\u7bc7 \u5229\u7528Github Pages\u548cmkdocs\u642d\u5efa\u4e2a\u4eba\u535a\u5ba2"},{"location":"chapter_1/1_make_blog/#github-pages","text":"","title":"\u4e00 \u7533\u8bf7github pages"},{"location":"chapter_1/1_make_blog/#1-2github-pages-sites","text":"Project Pages sites \u4e2a\u4eba\u611f\u89c9\u662f\u5f00\u6e90\u9879\u76ee\u7528\u7684\u6bd4\u8f83\u591a User and Organization Pages sites \u4e2a\u4eba\u7528\u6237\u6216\u8005\u5c0f\u578b\u56e2\u961f\u4f7f\u7528\u8fd9\u79cd","title":"1 \u67092\u79cdGithub Pages sites:"},{"location":"chapter_1/1_make_blog/#2-github-pages-sites","text":"\u9700\u8981\u914d\u7f6e\u4e00\u4e2a\u53d1\u5e03\u6e90(publishing source),\u53d1\u5e03\u6e90\u67093\u79cd\u65b9\u5f0f: 1 \u4f7f\u7528\u67d0\u4e2arepo\u7684master\u5206\u652f 2 \u4f7f\u7528\u67d0\u4e2arepo\u7684gh-pages\u5206\u652f 3 \u4f7f\u7528\u67d0\u4e2arepo\u7684master\u5206\u652f\u7684/docs\u76ee\u5f55 \u5982\u679c\u4f60\u7684repo\u662f\u201c\u7528\u6237\u540d.github.io\u201d\uff08\u6bd4\u5982 zhangsan.github.io\uff09,\u90a3\u4e48github.com\u9ed8\u8ba4\u5c31\u662f\u4f7f\u7528\u8be5repo\u7684master\u5206\u652f\u4f5c\u4e3a\u53d1\u5e03\u6e90\uff0c\u5e76\u4e0d\u80fd\u4f7f\u7528\u4ee5\u4e0a2\u30013\u7684\u65b9\u5f0f\u3002 \u4ee5\u6211\u4eec\u7684\u4f7f\u7528\u7ecf\u9a8c\u6765\u8bf4\uff0c\u5c31\u662f\u5e0c\u671b\u4e13\u95e8\u6709\u4e00\u4e2arepo\u6765\u53d1\u5e03\u7528markdown\u5199\u7684\u4e2a\u4eba\u6587\u7ae0\uff0c\u5f62\u6210\u4e00\u4e2a\u4e2a\u4eba\u535a\u5ba2\uff0c\u5b8c\u5168\u53ef\u4ee5\u91c7\u7528\u5efa\u7acb\u540d\u4e3azhangsan.github.io\u7684repo\uff0c\u7136\u540e\u91c7\u7528master\u5206\u652f\u4f5c\u4e3a\u53d1\u5e03\u6e90\u7684\u8fd9\u79cd\u6a21\u5f0f\u3002 \u4ee5\u4e0b\u662f\u6211\u4eec\u65b0\u5efa\u7684\u4e00\u4e2arepo: \u6253\u7b97\u4f7f\u7528\u8be5repo\u7684master\u5206\u652f\u4f5c\u4e3a\u53d1\u5e03\u6e90(pushing source).","title":"2 \u642d\u5efaGithub Pages sites\u7684\u524d\u63d0\u6761\u4ef6"},{"location":"chapter_1/1_make_blog/#mkdocs","text":"","title":"\u4e8c \u672c\u5730\u4f7f\u7528mkdocs\u5de5\u5177"},{"location":"chapter_1/1_make_blog/#1mkdocs","text":"pip install mkdocs","title":"\uff081\uff09\u5b89\u88c5mkdocs"},{"location":"chapter_1/1_make_blog/#2","text":"$ mkdocs new final_docs $ cd final_docs","title":"(2) \u5f00\u59cb\u4e00\u4e2a\u65b0\u7684\u6587\u6863\u9879\u76ee"},{"location":"chapter_1/1_make_blog/#3","text":"1 \u4e00\u5f00\u59cbfinal_docs\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b 2 \u901a\u8fc7\u4fee\u6539mkdocs.yml \u6765\u7ec4\u7ec7\u535a\u5ba2\u7684\u6846\u67b6\uff0c\u8fd9\u91cc\u7ed9\u51fa\u6211\u7684\u5185\u5bb9\uff0c\u4f5c\u4e3a\u53c2\u8003 $cat mkdocs.yml site_name: Lott's Blog use_directory_urls: true theme: readthedocs pages: - \u9996\u9875: 'index.md' - \u535a\u5ba2\u642d\u5efa: - \u5229\u7528Github Pages\u548cmkdcos\u642d\u5efa\u535a\u5ba2: 'make_blog.md' 3 \u6700\u7ec8\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b 4 \u6b64\u65f6\u4f7f\u7528mkdocs serve\u547d\u4ee4\uff0c\u5148\u5728\u672c\u5730\u770b\u4e00\u4e0b\u535a\u5ba2\u6548\u679c $ mkdocs serve Running at: http://127.0.0.1:8000/","title":"(3) \u7f16\u5199\u76f8\u5e94\u7684\u6587\u6863"},{"location":"chapter_1/1_make_blog/#markdownhtmlgithub","text":"1 \u8f6c\u5316\u6210html,\u4f7f\u7528mkdocs \u547d\u4ee4 $mkdocs build WARNING - Config value: 'pages'. Warning: The 'pages' configuration option has been deprecated and will be removed in a future release of MkDocs. Use 'nav' instead. INFO - Cleaning site directory INFO - Building documentation to directory: /Path/to/final_docs/site \u4ece\u8fd9\u91cc\uff0c\u6211\u4eec\u770b\u5230\u5b83\u628ahtml\u6587\u4ef6\u5168\u90e8\u653e\u5728\u4e86final_docs/site\u76ee\u5f55\u4e0b,\u5305\u62ecindex.html \u56e0\u6b64\uff0c\u6211\u4eec\u628asite\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\uff0c\u5168\u90e8\u63a8\u9001\u5230github\u4e0a\uff0c\u5c31\u53ef\u4ee5\u4f5c\u4e3aGithub Pages sites\u4e86 2 \u5982\u679c\u662f\u7b2c\u4e00\u6b21\u63d0\u4ea4github,\u90a3\u4e48\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u5373\u53ef\uff0c\u5982\u679c\u4e0d\u662f\u7b2c\u4e00\u6b21\u63d0\u4ea4\uff0c\u8bf7\u81ea\u884c\u89e3\u51b3github\u7684\u4f7f\u7528\u95ee\u9898 git init git remote add origin https://github.com/<\u4f60\u7684\u7528\u6237\u540d>/<\u4f60\u7684\u7528\u6237\u540d>.github.io.git git pull origin master git add . git commit -m \"fisrt commit\" git push origin master \u7a0d\u7b491\uff5e2\u5206\u949f\uff0c\u6211\u4eec\u5c31\u6253\u5f00https://<\u4f60\u7684\u7528\u6237\u540d>.github.io/ ,\u5c31\u80fd\u770b\u5230\u6211\u4eec\u7684\u535a\u5ba2\u9875\u9762\u4e86","title":"\u4e09 \u628a\u672c\u5730\u7684markdown\u6587\u4ef6\u8f6c\u5316\u4e3ahtml,\u63a8\u9001\u5230github\u4e0a"},{"location":"chapter_1/1_make_blog/#_1","text":"1 Github Pages \u8bf4\u660e: https://help.github.com/articles/creating-project-pages-using-the-command-line/ 2 mkdocs\u5b98\u7f51\u6587\u6863: https://markdown-docs-zh.readthedocs.io/zh_CN/latest/","title":"\u56db \u53c2\u8003\u6587\u6863"},{"location":"chapter_1/1_make_blog/#_2","text":"\u5982\u679c\u4f60\u6709\u4e00\u4e2anginx\u670d\u52a1\u5668\uff08apache\u4e5f\u4e00\u6837\uff09\uff0c\u53ef\u4ee5\u628asite\u76ee\u5f55\u653e\u5230\u5bf9\u5e94\u7684\u4e3b\u673a\u4e0a\uff0c\u7136\u540e\u4f7f\u7528nginx\u4f5c\u4e3aweb\u670d\u52a1\u5668\uff0c\u4e5f\u53ef\u4ee5\u628a\u76f8\u5e94\u7684\u6587\u6863\u4f5c\u4e3a\u535a\u5ba2\u5c55\u793a. nginx\u914d\u7f6e\u53c2\u8003\u5982\u4e0b: server { listen 5001; server_name _; root /usr/local/var/www; access_log /usr/local/var/log/nginx/mkdoc.access.log main; error_log /usr/local/var/log/nginx/mkdoc.error.log notice; # favicon.ico location ~ /favicon.ico$ { root /usr/local/var/www; expires 30d; } # our site location / { root /Path/to/final_docs/site; index index.html; } error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/local/var/www; } }","title":"\u4e94 \u989d\u5916\u8865\u5145"},{"location":"chapter_1/2_nginx_loadbalancing_strategy/","text":"\u4e00 \u8bf4\u660e \u672c\u7bc7\u535a\u5ba2\u7528\u4e8e\u68b3\u7406nginx\u652f\u6301\u7684\u5747\u8861\u7b56\u7565 \u4e8c \u8d1f\u8f7d\u8d1f\u8f7d\u5747\u8861\u7b56\u7565 round robin(\u8f6e\u8be2) random(\u968f\u673a) weight(\u6743\u91cd) fair(\u6309\u54cd\u5e94\u65f6\u957f,\u7b2c\u4e09\u65b9\u6a21\u5757) least_conn(\u6700\u5c11\u8fde\u63a5\u6570) url_hash(url\u7684hash\u503c) ip_hash(ip\u7684hash\u503c) sticky(\u57fa\u4e8ecookie\u7684\u8d1f\u8f7d\u5747\u8861,\u7b2c\u4e09\u65b9) \u8fd9\u4e48\u591a\u7684\u7b56\u7565\uff0c\u975e\u5e38\u4e0d\u5229\u4e8e\u8bb0\u5fc6\u548c\u9009\u62e9\uff0c\u6211\u4eec\u4e0d\u59a8\u5c06\u8fd9\u4e9b\u5e38\u89c1\u7684\u7b56\u7565\u5f52\u7c7b\uff0c\u5206\u800c\u5316\u4e4b\uff0c\u65b9\u4fbf\u6311\u9009\u3002 (\u4e00) \u6700\u4f73\u5b9e\u8df5\u7c7b round robin(\u8f6e\u8be2) random(\u968f\u673a) round robin(\u8f6e\u8be2)\u914d\u7f6e\u53c2\u8003 #\u9ed8\u8ba4\u914d\u7f6e\u5c31\u662f\u8f6e\u8be2\u7b56\u7565 upstream server_group { server backend1.example.com; server backend2.example.com; } random(\u968f\u673a) \u914d\u7f6e\u53c2\u8003 upstream server_group { random; server backend1.example.com; server backend2.example.com; server backend3.example.com; server backend4.example.com; } (\u4e8c) \u6027\u80fd\u4f18\u5148 weight(\u6743\u91cd) fair(\u6309\u54cd\u5e94\u65f6\u957f,\u7b2c\u4e09\u65b9\u6a21\u5757) least_conn(\u6700\u5c11\u8fde\u63a5\u6570) \u8ba9\u4e1a\u52a1\u8282\u70b9\u4e2d\u6027\u80fd\u66f4\u5f3a\u7684\u673a\u5668\u5f97\u5230\u66f4\u591a\u8bf7\u6c42\uff0c\u8fd9\u4e5f\u662f\u4e00\u4e2a\u6bd4\u8f83\u597d\u7684\u5206\u914d\u7b56\u7565\u3002 \u4ec0\u4e48\u662f\u6027\u80fd\u66f4\u597d\u7684\u673a\u5668\uff1f\u8fd9\u4e2a\u95ee\u9898\u4e5f\u6709\u5f88\u591a\u7684\u7ef4\u5ea6\u53bb\u8003\u91cf\u3002 \u4ece\u7ecf\u9a8c\u6216\u786c\u4ef6\u4e0a\u5206\u4e3a\u9ad8\u6743\u91cd\u3001\u4f4e\u6743\u91cd\u7684\u673a\u5668\u3002 \u6309\u7167\u8282\u70b9\u8bf7\u6c42\u7684\u54cd\u5e94\u65f6\u957f\u6765\u51b3\u5b9a\u662f\u591a\u5206\u914d\u8bf7\u6c42\uff0c\u8fd8\u662f\u5c11\u5206\u914d\u8bf7\u6c42\u3002 \u6309\u7167\u4fdd\u6301\u7684\u8fde\u63a5\u6570\u3002\u4e00\u822c\u6765\u8bf4\u4fdd\u6301\u7684\u8fde\u63a5\u6570\u8d8a\u591a\u8bf4\u660e\u5904\u7406\u7684\u4efb\u52a1\u8d8a\u591a\uff0c\u4e5f\u662f\u6700\u7e41\u5fd9\u7684\uff0c\u53ef\u4ee5\u5c06\u8bf7\u6c42\u5206\u914d\u7ed9\u5176\u4ed6\u673a\u5668\u5904\u7406\u3002 \u6309\u6743\u91cd\u7b2c\u914d\u7f6e\u53c2\u8003 upstream server_group { server backend1.example.com weight=5; #\u9ed8\u8ba4\u4e3a\u4e0d\u914d\u7f6e\u6743\u91cd\u4e3a1 server backend2.example.com; } \u54cd\u5e94\u7684\u65f6\u957f(fair)\u914d\u7f6e\u53c2\u8003\uff1a\u9700\u8981\u5728Nginx\u7f16\u8bd1\u65f6\u52a0\u5165nginx-upstream-fair\u6a21\u5757\u3002 upstream server_group{ fair; server backend1.example.com; server backend2.example.com; server backend3.example.com; server backend4.example.com; } \u6700\u5c11\u8fde\u63a5\u6570(least_conn)\u914d\u7f6e\u53c2\u8003 upstream server_group { least_conn; server backend1.example.com; server backend2.example.com; } (\u4e09) \u4f1a\u8bdd\u4fdd\u6301\u7c7b \u5f88\u591a\u8bf7\u6c42\u90fd\u662f\u6709\u72b6\u6001\u7684\uff0c\u4e0a\u4e00\u6b21\u8bf7\u6c42\u5230\u54ea\u4e2a\u4e1a\u52a1\u8282\u70b9\uff0c\u8fd9\u6b21\u8fd8\u8981\u8bf7\u6c42\u5230\u54ea\u53f0\u673a\u5668. nginx\u63d0\u4f9b\u4e86\u51e0\u4e2a\u4f1a\u8bdd\u4fdd\u6301\u7684\u6280\u80fd. ip_hash\u914d\u7f6e\u53c2\u8003 upstream server_group { ip_hash; server backend1.example.com; server backend2.example.com; } url_hash\u914d\u7f6e\u53c2\u8003 upstream server_group{ hash $request_uri consistent; server backend1.example.com; server backend2.example.com; server backend3.example.com; server backend4.example.com; } url_hash\u9002\u5408nginx\u540e\u7aef\u6302\u7f13\u5b58(\u4f8b\u5982varnish)\u8fd9\u6837\u7684\u4e1a\u52a1\u573a\u666f sticky(\u57fa\u4e8ecookie\u7684\u8d1f\u8f7d\u5747\u8861)\u914d\u7f6e\u53c2\u8003: \u9700\u8981\u5728Nginx\u7f16\u8bd1\u65f6\u52a0\u5165nginx-sticky-module\u6a21\u5757\u3002 upstream server_group{ sticky; server backend1.example.com; server backend2.example.com; server backend3.example.com; server backend4.example.com; } The \"sticky\" command can take several arguments to control its behaviour: sticky [name=route] [domain=.foo.bar] [path=/] [expires=1h] [hash=index|md5|sha1] [no_fallback]; \u53c2\u8003: https://code.google.com/p/nginx-sticky-module/wiki/Documentation","title":"\u7b2c\u4e8c\u7bc7 Nginx\u7684\u5747\u8861\u7b56\u7565"},{"location":"chapter_1/2_nginx_loadbalancing_strategy/#_1","text":"\u672c\u7bc7\u535a\u5ba2\u7528\u4e8e\u68b3\u7406nginx\u652f\u6301\u7684\u5747\u8861\u7b56\u7565","title":"\u4e00 \u8bf4\u660e"},{"location":"chapter_1/2_nginx_loadbalancing_strategy/#_2","text":"round robin(\u8f6e\u8be2) random(\u968f\u673a) weight(\u6743\u91cd) fair(\u6309\u54cd\u5e94\u65f6\u957f,\u7b2c\u4e09\u65b9\u6a21\u5757) least_conn(\u6700\u5c11\u8fde\u63a5\u6570) url_hash(url\u7684hash\u503c) ip_hash(ip\u7684hash\u503c) sticky(\u57fa\u4e8ecookie\u7684\u8d1f\u8f7d\u5747\u8861,\u7b2c\u4e09\u65b9) \u8fd9\u4e48\u591a\u7684\u7b56\u7565\uff0c\u975e\u5e38\u4e0d\u5229\u4e8e\u8bb0\u5fc6\u548c\u9009\u62e9\uff0c\u6211\u4eec\u4e0d\u59a8\u5c06\u8fd9\u4e9b\u5e38\u89c1\u7684\u7b56\u7565\u5f52\u7c7b\uff0c\u5206\u800c\u5316\u4e4b\uff0c\u65b9\u4fbf\u6311\u9009\u3002","title":"\u4e8c \u8d1f\u8f7d\u8d1f\u8f7d\u5747\u8861\u7b56\u7565"},{"location":"chapter_1/2_nginx_loadbalancing_strategy/#_3","text":"round robin(\u8f6e\u8be2) random(\u968f\u673a)","title":"(\u4e00) \u6700\u4f73\u5b9e\u8df5\u7c7b"},{"location":"chapter_1/2_nginx_loadbalancing_strategy/#round-robin","text":"#\u9ed8\u8ba4\u914d\u7f6e\u5c31\u662f\u8f6e\u8be2\u7b56\u7565 upstream server_group { server backend1.example.com; server backend2.example.com; }","title":"round robin(\u8f6e\u8be2)\u914d\u7f6e\u53c2\u8003"},{"location":"chapter_1/2_nginx_loadbalancing_strategy/#random","text":"upstream server_group { random; server backend1.example.com; server backend2.example.com; server backend3.example.com; server backend4.example.com; }","title":"random(\u968f\u673a) \u914d\u7f6e\u53c2\u8003"},{"location":"chapter_1/2_nginx_loadbalancing_strategy/#_4","text":"weight(\u6743\u91cd) fair(\u6309\u54cd\u5e94\u65f6\u957f,\u7b2c\u4e09\u65b9\u6a21\u5757) least_conn(\u6700\u5c11\u8fde\u63a5\u6570) \u8ba9\u4e1a\u52a1\u8282\u70b9\u4e2d\u6027\u80fd\u66f4\u5f3a\u7684\u673a\u5668\u5f97\u5230\u66f4\u591a\u8bf7\u6c42\uff0c\u8fd9\u4e5f\u662f\u4e00\u4e2a\u6bd4\u8f83\u597d\u7684\u5206\u914d\u7b56\u7565\u3002 \u4ec0\u4e48\u662f\u6027\u80fd\u66f4\u597d\u7684\u673a\u5668\uff1f\u8fd9\u4e2a\u95ee\u9898\u4e5f\u6709\u5f88\u591a\u7684\u7ef4\u5ea6\u53bb\u8003\u91cf\u3002 \u4ece\u7ecf\u9a8c\u6216\u786c\u4ef6\u4e0a\u5206\u4e3a\u9ad8\u6743\u91cd\u3001\u4f4e\u6743\u91cd\u7684\u673a\u5668\u3002 \u6309\u7167\u8282\u70b9\u8bf7\u6c42\u7684\u54cd\u5e94\u65f6\u957f\u6765\u51b3\u5b9a\u662f\u591a\u5206\u914d\u8bf7\u6c42\uff0c\u8fd8\u662f\u5c11\u5206\u914d\u8bf7\u6c42\u3002 \u6309\u7167\u4fdd\u6301\u7684\u8fde\u63a5\u6570\u3002\u4e00\u822c\u6765\u8bf4\u4fdd\u6301\u7684\u8fde\u63a5\u6570\u8d8a\u591a\u8bf4\u660e\u5904\u7406\u7684\u4efb\u52a1\u8d8a\u591a\uff0c\u4e5f\u662f\u6700\u7e41\u5fd9\u7684\uff0c\u53ef\u4ee5\u5c06\u8bf7\u6c42\u5206\u914d\u7ed9\u5176\u4ed6\u673a\u5668\u5904\u7406\u3002","title":"(\u4e8c) \u6027\u80fd\u4f18\u5148"},{"location":"chapter_1/2_nginx_loadbalancing_strategy/#_5","text":"upstream server_group { server backend1.example.com weight=5; #\u9ed8\u8ba4\u4e3a\u4e0d\u914d\u7f6e\u6743\u91cd\u4e3a1 server backend2.example.com; }","title":"\u6309\u6743\u91cd\u7b2c\u914d\u7f6e\u53c2\u8003"},{"location":"chapter_1/2_nginx_loadbalancing_strategy/#fairnginxnginx-upstream-fair","text":"upstream server_group{ fair; server backend1.example.com; server backend2.example.com; server backend3.example.com; server backend4.example.com; }","title":"\u54cd\u5e94\u7684\u65f6\u957f(fair)\u914d\u7f6e\u53c2\u8003\uff1a\u9700\u8981\u5728Nginx\u7f16\u8bd1\u65f6\u52a0\u5165nginx-upstream-fair\u6a21\u5757\u3002"},{"location":"chapter_1/2_nginx_loadbalancing_strategy/#least_conn","text":"upstream server_group { least_conn; server backend1.example.com; server backend2.example.com; }","title":"\u6700\u5c11\u8fde\u63a5\u6570(least_conn)\u914d\u7f6e\u53c2\u8003"},{"location":"chapter_1/2_nginx_loadbalancing_strategy/#_6","text":"\u5f88\u591a\u8bf7\u6c42\u90fd\u662f\u6709\u72b6\u6001\u7684\uff0c\u4e0a\u4e00\u6b21\u8bf7\u6c42\u5230\u54ea\u4e2a\u4e1a\u52a1\u8282\u70b9\uff0c\u8fd9\u6b21\u8fd8\u8981\u8bf7\u6c42\u5230\u54ea\u53f0\u673a\u5668. nginx\u63d0\u4f9b\u4e86\u51e0\u4e2a\u4f1a\u8bdd\u4fdd\u6301\u7684\u6280\u80fd.","title":"(\u4e09) \u4f1a\u8bdd\u4fdd\u6301\u7c7b"},{"location":"chapter_1/2_nginx_loadbalancing_strategy/#ip_hash","text":"upstream server_group { ip_hash; server backend1.example.com; server backend2.example.com; }","title":"ip_hash\u914d\u7f6e\u53c2\u8003"},{"location":"chapter_1/2_nginx_loadbalancing_strategy/#url_hash","text":"upstream server_group{ hash $request_uri consistent; server backend1.example.com; server backend2.example.com; server backend3.example.com; server backend4.example.com; } url_hash\u9002\u5408nginx\u540e\u7aef\u6302\u7f13\u5b58(\u4f8b\u5982varnish)\u8fd9\u6837\u7684\u4e1a\u52a1\u573a\u666f","title":"url_hash\u914d\u7f6e\u53c2\u8003"},{"location":"chapter_1/2_nginx_loadbalancing_strategy/#stickycookie-nginxnginx-sticky-module","text":"upstream server_group{ sticky; server backend1.example.com; server backend2.example.com; server backend3.example.com; server backend4.example.com; } The \"sticky\" command can take several arguments to control its behaviour: sticky [name=route] [domain=.foo.bar] [path=/] [expires=1h] [hash=index|md5|sha1] [no_fallback]; \u53c2\u8003: https://code.google.com/p/nginx-sticky-module/wiki/Documentation","title":"sticky(\u57fa\u4e8ecookie\u7684\u8d1f\u8f7d\u5747\u8861)\u914d\u7f6e\u53c2\u8003: \u9700\u8981\u5728Nginx\u7f16\u8bd1\u65f6\u52a0\u5165nginx-sticky-module\u6a21\u5757\u3002"},{"location":"chapter_1/3_linux_kernel_basic/","text":"\u6982\u8ff0 \u672c\u7bc7\u8bb2\u8ff0 Linux \u5185\u6838\u7684\u4e00\u4e9b\u57fa\u7840\u77e5\u8bc6 \u4e00 \u64cd\u4f5c\u7cfb\u7edf\u7684\u672c\u8d28 \u64cd\u4f5c\u7cfb\u7edf\u7684\u672c\u8d28: for(;;) pause() \u53cd\u6620\u4e86\u64cd\u4f5c\u7cfb\u7edf\u7684\u672c\u8d28\uff0c\u5373\u64cd\u4f5c\u7cfb\u7edf\u5c31\u662f\u4e00\u4e2a\u4e2d\u65ad\u9a71\u52a8\u7684\u6b7b\u5faa\u73af\u4ee3\u7801\u3002 Linux \u5185\u6838\u5f52\u6839\u7ed3\u5e95\u5c31\u662f\u4e00\u652f\u8d85\u5927\u7684 C \u7a0b\u5e8f. \u4e8c Linux \u5185\u6838\u7684\u7ec4\u6210 Ubuntu \u4e2d\u7684\u5185\u6838\u6587\u4ef6\u5b58\u50a8\u5728/boot \u6587\u4ef6\u5939\u4e2d\uff0c\u79f0\u4e3a vmlinux -version\u3002vmlinuz \u8fd9\u4e2a\u540d\u5b57\u6765\u81ea\u4e8e unix \u4e16\u754c\uff0c\u65e9\u5728 60 \u5e74\u4ee3\uff0c\u4ed6\u4eec\u5c31\u628a\u5185\u6838\u7b80\u5355\u5730\u79f0\u4e3a\u201cunix\u201d\uff0c\u6240\u4ee5\u5f53\u5185\u6838\u5728 90 \u5e74\u4ee3\u9996\u6b21\u5f00\u53d1\u65f6\uff0cLinux \u5c31\u5f00\u59cb\u628a\u5185\u6838\u79f0\u4e3a\u201cLinux\u201d\u3002 vmlinuz-5.4.56.bsk.10-amd64 \u5f53\u5f00\u53d1\u865a\u62df\u5185\u5b58\u4ee5\u4fbf\u66f4\u5bb9\u6613\u5730\u8fdb\u884c\u591a\u4efb\u52a1\u5904\u7406\u65f6\uff0c\u5c06 vm \u653e\u5728\u6587\u4ef6\u7684\u524d\u9762\uff0c\u4ee5\u663e\u793a\u5185\u6838\u652f\u6301\u865a\u62df\u5185\u5b58\u3002\u6709\u4e00\u6bb5\u65f6\u95f4\uff0cLinux \u5185\u6838\u88ab\u79f0\u4e3a vmlinux\uff0c\u4f46\u662f\u5185\u6838\u53d8\u5f97\u592a\u5927\uff0c\u65e0\u6cd5\u88c5\u5165\u53ef\u7528\u7684\u5f15\u5bfc\u5185\u5b58\uff0c\u56e0\u6b64\u538b\u7f29\u4e86\u5185\u6838\u6620\u50cf\uff0c\u5e76\u5c06\u672b\u5c3e\u7684 x \u66f4\u6539\u4e3a z\uff0c\u4ee5\u663e\u793a\u5b83\u662f\u7528 zlib \u538b\u7f29\u7684\u3002\u5e76\u4e0d\u603b\u662f\u4f7f\u7528\u76f8\u540c\u7684\u538b\u7f29\uff0c\u901a\u5e38\u7528 LZMA \u6216 BZIP2 \u66ff\u6362\uff0c\u4e00\u4e9b\u5185\u6838\u7b80\u5355\u5730\u79f0\u4e3a zImage\u3002 \u5728/boot \u6587\u4ef6\u5939\u4e2d\u8fd8\u6709\u5176\u4ed6\u975e\u5e38\u91cd\u8981\u7684\u6587\u4ef6\uff0c\u79f0\u4e3a initrd.img-version\u3001system.map-version, config-version\u3002initrd \u6587\u4ef6\u7528\u4f5c\u4e00\u4e2a\u5c0f RAM \u78c1\u76d8\uff0c\u7528\u4e8e\u63d0\u53d6\u548c\u6267\u884c\u5b9e\u9645\u7684\u5185\u6838\u6587\u4ef6\u3002\u8fd9\u4e2a\u7cfb\u7edf\u3002map \u6587\u4ef6\u7528\u4e8e\u5185\u6838\u5b8c\u5168\u52a0\u8f7d\u4e4b\u524d\u7684\u5185\u5b58\u7ba1\u7406\uff0c\u914d\u7f6e\u6587\u4ef6\u544a\u8bc9\u5185\u6838\u5728\u7f16\u8bd1\u5185\u6838\u6620\u50cf\u65f6\u8981\u52a0\u8f7d\u54ea\u4e9b\u9009\u9879\u548c\u6a21\u5757\u3002 \u51e0\u79cd linux \u5185\u6838\u6587\u4ef6\u7684\u533a\u522b(vmlinux\u3001vmlinuz\u3001Image\u3001zImage\u3001bzImage\u3001uImage\uff09 vmlinux : \u662f\u5185\u6838\u7f16\u8bd1\u51fa\u6765\u7684\u539f\u59cb\u7684\u5185\u6838\u6587\u4ef6\u672a\u7ecf\u538b\u7f29\u7684\u3002\u662f ELF \u683c\u5f0f\u7684\uff0c\u5373\u7f16\u8bd1\u51fa\u6765\u7684\u6700\u539f\u59cb\u7684\u6587\u4ef6\u3002\u7528\u4e8e kernel-debug\uff0c\u4ea7\u751f system.map \u7b26\u53f7\u8868\uff0c\u4e0d\u80fd\u7528\u4e8e\u76f4\u63a5\u52a0\u8f7d\uff0c\u4e0d\u53ef\u4ee5\u4f5c\u4e3a\u542f\u52a8\u5185\u6838\u3002\u53ea\u662f\u542f\u52a8\u8fc7\u7a0b\u4e2d\u7684\u4e2d\u95f4\u5a92\u4f53\u3002 vmlinuz : vmlinuz \u662f\u53ef\u5f15\u5bfc\u7684\u3001\u538b\u7f29\u7684\u5185\u6838\u3002\u201cvm\u201d\u4ee3\u8868\u201cVirtual Memory\u201d\u3002 vmlinuz \u662f\u7531 ELF \u6587\u4ef6 vmlinux \u7ecf\u8fc7 objcopy \u540e\uff0c\u5e76\u7ecf\u8fc7\u538b\u7f29\u540e\u7684\u6587\u4ef6\uff0c\u5b83\u662f\u53ef\u5f15\u5bfc\u7684\u6587\u4ef6\u3002 vmlinuz \u7684\u5efa\u7acb\u6709\u4e24\u79cd\u65b9\u5f0f \u4e00\u79cd\u662f\u901a\u8fc7\u7f16\u8bd1\u5185\u6838\u65f6\u901a\u8fc7\u201cmake zImage\u201d\u521b\u5efa\uff0c\u4e5f\u5c31\u662f zImage\uff0c\u5b83\u9002\u7528\u4e8e\u5c0f\u5185\u6838\u7684\u60c5\u51b5\uff0c\u9002\u7528\u4e8e\u4f4e\u7aef\u5185\u5b58\uff08640K\uff09\uff0c\u5b83\u7684\u5b58\u5728\u662f\u4e3a\u4e86\u5411\u540e\u7684\u517c\u5bb9\u6027\u3002 \u53e6\u5916\u4e00\u79cd\u662f\u901a\u8fc7\u7f16\u8bd1\u5185\u6838\u65f6\u901a\u8fc7\u201cmake bzImage\u201d\u521b\u5efa\uff0c\u4e5f\u5c31\u662f bzImage\uff0c\u5b83\u662f\u538b\u7f29\u7684\u5185\u6838\u6620\u50cf\uff0c\u9002\u7528\u4e8e\u9ad8\u7aef\u5185\u5b58\uff081M \u4ee5\u4e0a\uff09 Image : Image \u662f Linux \u5185\u6838\u955c\u50cf\u6587\u4ef6\uff0c\u4f46\u662f Image \u4ec5\u5305\u542b\u53ef\u6267\u884c\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u3002Image \u5c31\u662f\u4f7f \u7528 objcopy\u5de5\u5177 \u53d6\u6d88\u6389 vmlinux \u4e2d\u7684\u4e00\u4e9b\u5176\u4ed6\u4fe1\u606f\uff0c\u6bd4\u5982\u7b26\u53f7\u8868\u4ec0\u4e48\u7684\u3002\u4f46\u662f Image \u662f\u6ca1\u6709\u538b\u7f29\u8fc7 \u7684. zImage : \u662f\u7ecf\u8fc7 gzip \u538b\u7f29\u540e\u7684 Image, \u4e00\u822c\u7528\u4f5c uboot \u7684\u955c\u50cf\u6587\u4ef6\u3002 zImage \u662f ARM Linux \u5e38\u7528\u7684\u4e00\u79cd\u538b\u7f29\u6620\u50cf\u6587\u4ef6. zImage \u53ef\u4ee5\u5728\u5d4c\u5165\u5f0f\u7cfb\u7edf\u7ecf\u5e38\u770b\u5230. uImage : uImage \u662f \u65e9\u671f U-boot \u4e13\u7528\u7684\u6620\u50cf\u6587\u4ef6\uff0c\u5b83\u662f\u5728 zImage \u4e4b\u524d\u52a0\u4e0a\u4e00\u4e2a\u957f\u5ea6\u4e3a 0x40 \u7684\u201c\u5934\u201d\uff0c\u8bf4\u660e\u8fd9\u4e2a\u6620\u50cf\u6587\u4ef6\u7684\u7c7b\u578b\u3001\u52a0\u8f7d\u4f4d\u7f6e\u3001\u751f\u6210\u65f6\u95f4\u3001\u5927\u5c0f\u7b49\u4fe1\u606f\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u76f4\u63a5\u4ece uImage \u7684 0x40 \u4f4d\u7f6e\u5f00\u59cb\u6267\u884c\uff0czImage \u548c uImage \u6ca1\u6709\u4efb\u4f55\u533a\u522b\u3002\u73b0\u5728 u-boot \u5df2\u7ecf\u652f\u6301 zImage \u4e86, \u4e0d\u518d\u9700\u8981\u5236\u4f5c\u4e13\u95e8\u7684 uImage . bzImage : bz \u8868\u793a big zImage \uff0c\u4e0d\u662f\u7528 bzip2 \u538b\u7f29\u7684\u3002\u4e24\u8005\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0czImage \u89e3\u538b\u7f29\u5185\u6838\u5230\u4f4e\u7aef\u5185\u5b58(\u7b2c\u4e00\u4e2a 640K)\uff0cbzImage \u89e3\u538b\u7f29\u5185\u6838\u5230\u9ad8\u7aef\u5185\u5b58(1M \u4ee5\u4e0a)\u3002\u5982\u679c\u5185\u6838\u6bd4\u8f83\u5c0f\uff0c\u90a3\u4e48\u91c7\u7528 zImage \u6216 bzImage \u90fd\u884c\uff0c\u5982\u679c\u6bd4\u8f83\u5927\u5e94\u8be5\u7528 bzImage\u3002 \u53c2\u8003","title":"\u7b2c\u4e09\u7bc7 Linux\u5185\u6838\u57fa\u7840"},{"location":"chapter_1/3_linux_kernel_basic/#_1","text":"\u672c\u7bc7\u8bb2\u8ff0 Linux \u5185\u6838\u7684\u4e00\u4e9b\u57fa\u7840\u77e5\u8bc6","title":"\u6982\u8ff0"},{"location":"chapter_1/3_linux_kernel_basic/#_2","text":"\u64cd\u4f5c\u7cfb\u7edf\u7684\u672c\u8d28: for(;;) pause() \u53cd\u6620\u4e86\u64cd\u4f5c\u7cfb\u7edf\u7684\u672c\u8d28\uff0c\u5373\u64cd\u4f5c\u7cfb\u7edf\u5c31\u662f\u4e00\u4e2a\u4e2d\u65ad\u9a71\u52a8\u7684\u6b7b\u5faa\u73af\u4ee3\u7801\u3002 Linux \u5185\u6838\u5f52\u6839\u7ed3\u5e95\u5c31\u662f\u4e00\u652f\u8d85\u5927\u7684 C \u7a0b\u5e8f.","title":"\u4e00 \u64cd\u4f5c\u7cfb\u7edf\u7684\u672c\u8d28"},{"location":"chapter_1/3_linux_kernel_basic/#linux","text":"Ubuntu \u4e2d\u7684\u5185\u6838\u6587\u4ef6\u5b58\u50a8\u5728/boot \u6587\u4ef6\u5939\u4e2d\uff0c\u79f0\u4e3a vmlinux -version\u3002vmlinuz \u8fd9\u4e2a\u540d\u5b57\u6765\u81ea\u4e8e unix \u4e16\u754c\uff0c\u65e9\u5728 60 \u5e74\u4ee3\uff0c\u4ed6\u4eec\u5c31\u628a\u5185\u6838\u7b80\u5355\u5730\u79f0\u4e3a\u201cunix\u201d\uff0c\u6240\u4ee5\u5f53\u5185\u6838\u5728 90 \u5e74\u4ee3\u9996\u6b21\u5f00\u53d1\u65f6\uff0cLinux \u5c31\u5f00\u59cb\u628a\u5185\u6838\u79f0\u4e3a\u201cLinux\u201d\u3002 vmlinuz-5.4.56.bsk.10-amd64 \u5f53\u5f00\u53d1\u865a\u62df\u5185\u5b58\u4ee5\u4fbf\u66f4\u5bb9\u6613\u5730\u8fdb\u884c\u591a\u4efb\u52a1\u5904\u7406\u65f6\uff0c\u5c06 vm \u653e\u5728\u6587\u4ef6\u7684\u524d\u9762\uff0c\u4ee5\u663e\u793a\u5185\u6838\u652f\u6301\u865a\u62df\u5185\u5b58\u3002\u6709\u4e00\u6bb5\u65f6\u95f4\uff0cLinux \u5185\u6838\u88ab\u79f0\u4e3a vmlinux\uff0c\u4f46\u662f\u5185\u6838\u53d8\u5f97\u592a\u5927\uff0c\u65e0\u6cd5\u88c5\u5165\u53ef\u7528\u7684\u5f15\u5bfc\u5185\u5b58\uff0c\u56e0\u6b64\u538b\u7f29\u4e86\u5185\u6838\u6620\u50cf\uff0c\u5e76\u5c06\u672b\u5c3e\u7684 x \u66f4\u6539\u4e3a z\uff0c\u4ee5\u663e\u793a\u5b83\u662f\u7528 zlib \u538b\u7f29\u7684\u3002\u5e76\u4e0d\u603b\u662f\u4f7f\u7528\u76f8\u540c\u7684\u538b\u7f29\uff0c\u901a\u5e38\u7528 LZMA \u6216 BZIP2 \u66ff\u6362\uff0c\u4e00\u4e9b\u5185\u6838\u7b80\u5355\u5730\u79f0\u4e3a zImage\u3002 \u5728/boot \u6587\u4ef6\u5939\u4e2d\u8fd8\u6709\u5176\u4ed6\u975e\u5e38\u91cd\u8981\u7684\u6587\u4ef6\uff0c\u79f0\u4e3a initrd.img-version\u3001system.map-version, config-version\u3002initrd \u6587\u4ef6\u7528\u4f5c\u4e00\u4e2a\u5c0f RAM \u78c1\u76d8\uff0c\u7528\u4e8e\u63d0\u53d6\u548c\u6267\u884c\u5b9e\u9645\u7684\u5185\u6838\u6587\u4ef6\u3002\u8fd9\u4e2a\u7cfb\u7edf\u3002map \u6587\u4ef6\u7528\u4e8e\u5185\u6838\u5b8c\u5168\u52a0\u8f7d\u4e4b\u524d\u7684\u5185\u5b58\u7ba1\u7406\uff0c\u914d\u7f6e\u6587\u4ef6\u544a\u8bc9\u5185\u6838\u5728\u7f16\u8bd1\u5185\u6838\u6620\u50cf\u65f6\u8981\u52a0\u8f7d\u54ea\u4e9b\u9009\u9879\u548c\u6a21\u5757\u3002","title":"\u4e8c Linux \u5185\u6838\u7684\u7ec4\u6210"},{"location":"chapter_1/3_linux_kernel_basic/#linux-vmlinuxvmlinuzimagezimagebzimageuimage","text":"vmlinux : \u662f\u5185\u6838\u7f16\u8bd1\u51fa\u6765\u7684\u539f\u59cb\u7684\u5185\u6838\u6587\u4ef6\u672a\u7ecf\u538b\u7f29\u7684\u3002\u662f ELF \u683c\u5f0f\u7684\uff0c\u5373\u7f16\u8bd1\u51fa\u6765\u7684\u6700\u539f\u59cb\u7684\u6587\u4ef6\u3002\u7528\u4e8e kernel-debug\uff0c\u4ea7\u751f system.map \u7b26\u53f7\u8868\uff0c\u4e0d\u80fd\u7528\u4e8e\u76f4\u63a5\u52a0\u8f7d\uff0c\u4e0d\u53ef\u4ee5\u4f5c\u4e3a\u542f\u52a8\u5185\u6838\u3002\u53ea\u662f\u542f\u52a8\u8fc7\u7a0b\u4e2d\u7684\u4e2d\u95f4\u5a92\u4f53\u3002 vmlinuz : vmlinuz \u662f\u53ef\u5f15\u5bfc\u7684\u3001\u538b\u7f29\u7684\u5185\u6838\u3002\u201cvm\u201d\u4ee3\u8868\u201cVirtual Memory\u201d\u3002 vmlinuz \u662f\u7531 ELF \u6587\u4ef6 vmlinux \u7ecf\u8fc7 objcopy \u540e\uff0c\u5e76\u7ecf\u8fc7\u538b\u7f29\u540e\u7684\u6587\u4ef6\uff0c\u5b83\u662f\u53ef\u5f15\u5bfc\u7684\u6587\u4ef6\u3002 vmlinuz \u7684\u5efa\u7acb\u6709\u4e24\u79cd\u65b9\u5f0f \u4e00\u79cd\u662f\u901a\u8fc7\u7f16\u8bd1\u5185\u6838\u65f6\u901a\u8fc7\u201cmake zImage\u201d\u521b\u5efa\uff0c\u4e5f\u5c31\u662f zImage\uff0c\u5b83\u9002\u7528\u4e8e\u5c0f\u5185\u6838\u7684\u60c5\u51b5\uff0c\u9002\u7528\u4e8e\u4f4e\u7aef\u5185\u5b58\uff08640K\uff09\uff0c\u5b83\u7684\u5b58\u5728\u662f\u4e3a\u4e86\u5411\u540e\u7684\u517c\u5bb9\u6027\u3002 \u53e6\u5916\u4e00\u79cd\u662f\u901a\u8fc7\u7f16\u8bd1\u5185\u6838\u65f6\u901a\u8fc7\u201cmake bzImage\u201d\u521b\u5efa\uff0c\u4e5f\u5c31\u662f bzImage\uff0c\u5b83\u662f\u538b\u7f29\u7684\u5185\u6838\u6620\u50cf\uff0c\u9002\u7528\u4e8e\u9ad8\u7aef\u5185\u5b58\uff081M \u4ee5\u4e0a\uff09 Image : Image \u662f Linux \u5185\u6838\u955c\u50cf\u6587\u4ef6\uff0c\u4f46\u662f Image \u4ec5\u5305\u542b\u53ef\u6267\u884c\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u3002Image \u5c31\u662f\u4f7f \u7528 objcopy\u5de5\u5177 \u53d6\u6d88\u6389 vmlinux \u4e2d\u7684\u4e00\u4e9b\u5176\u4ed6\u4fe1\u606f\uff0c\u6bd4\u5982\u7b26\u53f7\u8868\u4ec0\u4e48\u7684\u3002\u4f46\u662f Image \u662f\u6ca1\u6709\u538b\u7f29\u8fc7 \u7684. zImage : \u662f\u7ecf\u8fc7 gzip \u538b\u7f29\u540e\u7684 Image, \u4e00\u822c\u7528\u4f5c uboot \u7684\u955c\u50cf\u6587\u4ef6\u3002 zImage \u662f ARM Linux \u5e38\u7528\u7684\u4e00\u79cd\u538b\u7f29\u6620\u50cf\u6587\u4ef6. zImage \u53ef\u4ee5\u5728\u5d4c\u5165\u5f0f\u7cfb\u7edf\u7ecf\u5e38\u770b\u5230. uImage : uImage \u662f \u65e9\u671f U-boot \u4e13\u7528\u7684\u6620\u50cf\u6587\u4ef6\uff0c\u5b83\u662f\u5728 zImage \u4e4b\u524d\u52a0\u4e0a\u4e00\u4e2a\u957f\u5ea6\u4e3a 0x40 \u7684\u201c\u5934\u201d\uff0c\u8bf4\u660e\u8fd9\u4e2a\u6620\u50cf\u6587\u4ef6\u7684\u7c7b\u578b\u3001\u52a0\u8f7d\u4f4d\u7f6e\u3001\u751f\u6210\u65f6\u95f4\u3001\u5927\u5c0f\u7b49\u4fe1\u606f\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u76f4\u63a5\u4ece uImage \u7684 0x40 \u4f4d\u7f6e\u5f00\u59cb\u6267\u884c\uff0czImage \u548c uImage \u6ca1\u6709\u4efb\u4f55\u533a\u522b\u3002\u73b0\u5728 u-boot \u5df2\u7ecf\u652f\u6301 zImage \u4e86, \u4e0d\u518d\u9700\u8981\u5236\u4f5c\u4e13\u95e8\u7684 uImage . bzImage : bz \u8868\u793a big zImage \uff0c\u4e0d\u662f\u7528 bzip2 \u538b\u7f29\u7684\u3002\u4e24\u8005\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0czImage \u89e3\u538b\u7f29\u5185\u6838\u5230\u4f4e\u7aef\u5185\u5b58(\u7b2c\u4e00\u4e2a 640K)\uff0cbzImage \u89e3\u538b\u7f29\u5185\u6838\u5230\u9ad8\u7aef\u5185\u5b58(1M \u4ee5\u4e0a)\u3002\u5982\u679c\u5185\u6838\u6bd4\u8f83\u5c0f\uff0c\u90a3\u4e48\u91c7\u7528 zImage \u6216 bzImage \u90fd\u884c\uff0c\u5982\u679c\u6bd4\u8f83\u5927\u5e94\u8be5\u7528 bzImage\u3002 \u53c2\u8003","title":"\u51e0\u79cd linux \u5185\u6838\u6587\u4ef6\u7684\u533a\u522b(vmlinux\u3001vmlinuz\u3001Image\u3001zImage\u3001bzImage\u3001uImage\uff09"},{"location":"chapter_1/4_linux_kernel_mm_basic/","text":"\u6982\u8ff0 \u672c\u7bc7\u8bb2\u8ff0 Linux \u5185\u6838\u5185\u5b58\u7ba1\u7406\u7684\u4e00\u4e9b\u57fa\u7840\u63cf\u8ff0 \u4e00 Kernel Space \u5185\u5185\u5b58\u5206\u7c7b 32 \u4f4d\u5904\u7406\u5668\u7684 Linux \u7684\u6bcf\u4e2a\u8fdb\u7a0b\u4eab\u6709 4GB \u7684\u5185\u5b58\u7a7a\u95f4\uff0c0~3GB \u5c5e\u4e8e\u7528\u6237\u7a7a \u95f4\uff0c3~4GB \u5c5e\u4e8e\u5185\u6838\u7a7a\u95f4\uff0c\u5185\u6838\u7a7a\u95f4\u5bf9\u5e38\u89c4\u5185\u5b58\u3001I/O \u8bbe\u5907\u5185\u5b58\u4ee5\u53ca\u9ad8\u7aef\u5185\u5b58\u6709\u4e0d\u540c\u7684\u5904\u7406\u65b9\u5f0f\u3002 \u53ef\u89c1\u5185\u6838\u90e8\u5206\u5185\u5b58\u5206\u4e3a \u5e38\u89c4\u5185\u5b58 \u3001 I/O \u8bbe\u5907\u5185\u5b58 \u548c \u9ad8\u7aef\u5185\u5b58 1 \u5e38\u89c4\u5185\u5b58 \u8fd9\u5757\u53ef\u4ee5\u53c2\u8003 \u7b2c\u516d\u7ae0\u7b2c\u516d\u7bc7 2 I/O \u8bbe\u5907\u5185\u5b58 a \u524d\u7f6e\u77e5\u8bc6 CPU \u5730\u5740\u603b\u7ebf\u7684\u5bbd\u5ea6\u51b3\u5b9a\u4e86\u53ef\u8bbf\u95ee\u7684\u5185\u5b58\u7a7a\u95f4\u7684\u5927\u5c0f\u3002 \u6bd4\u5982 16 \u4f4d\u7684 CPU \u5730\u5740\u603b\u7ebf\u5bbd\u5ea6\u4e3a 20 \u4f4d\uff0c\u5730\u5740\u8303\u56f4\u662f 1M\u300232 \u4f4d\u7684 CPU \u5730\u5740\u603b\u7ebf\u5bbd\u5ea6\u4e3a 32 \u4f4d\uff0c\u5730\u5740\u8303\u56f4\u662f 4G\u3002\u4f60\u53ef\u4ee5\u7b97\u7b97\u6211\u4eec\u73b0\u5728\u7684 64 \u4f4d\u673a\u7684\u5730\u5740\u8303\u56f4\u3002 \u53ef\u662f\uff0c\u53ef\u8bbf\u95ee\u7684\u5185\u5b58\u7a7a\u95f4\u8fd9\u4e48\u5927\uff0c\u5e76\u4e0d\u7b49\u4e8e\u8bf4\u5168\u90fd\u7ed9\u5185\u5b58\u4f7f\u7528\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bfb\u5740\u7684\u5bf9\u8c61\u4e0d\u53ea\u6709\u5185\u5b58\uff0c\u8fd8\u6709\u4e00\u4e9b\u5916\u8bbe\u4e5f\u8981\u901a\u8fc7\u5730\u5740\u603b\u7ebf\u7684\u65b9\u5f0f\u53bb\u8bbf\u95ee\uff0c\u90a3\u600e\u4e48\u53bb\u8bbf\u95ee\u8fd9\u4e9b\u5916\u8bbe\u5462\uff1f\u5c31\u662f\u5728\u5730\u5740\u8303\u56f4\u4e2d\u5212\u51fa\u4e00\u7247\u7247\u7684\u533a\u57df\uff0c\u8fd9\u5757\u7ed9\u663e\u5b58\u4f7f\u7528\uff0c\u90a3\u5757\u7ed9\u786c\u76d8\u63a7\u5236\u5668\u4f7f\u7528\uff0c\u7b49\u7b49 \u3002 \u8fd9\u6837\u8bf4\uff0c\u5176\u5b9e\u5c31\u4e0d\u7b26\u5408\u6211\u4eec\u7684\u524d\u7f6e\u77e5\u8bc6\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u6709\u4e00\u79cd\u4e0d\u592a\u6b63\u786e\u7684\u7406\u89e3\u65b9\u5f0f\uff0c\u90a3\u5c31\u662f\u5185\u5b58\u4e2d\u7684\u8fd9\u5757\u4f4d\u7f6e\u5c31\u662f\u663e\u5b58\uff0c\u90a3\u5757\u4f4d\u7f6e\u5c31\u662f\u786c\u76d8\u63a7\u5236\u5668\u3002\u6211\u4eec\u5728\u76f8\u5e94\u7684\u4f4d\u7f6e\u4e0a\u8bfb\u53d6\u6216\u8005\u5199\u5165\uff0c\u5c31\u76f8\u5f53\u4e8e\u5728\u663e\u5b58\u7b49\u5916\u8bbe\u7684\u76f8\u5e94\u4f4d\u7f6e\u4e0a\u8bfb\u53d6\u6216\u8005\u5199\u5165\uff0c\u5c31\u597d\u50cf\u8fd9\u4e9b\u5916\u8bbe\u7684\u5b58\u50a8\u533a\u57df\uff0c\u88ab \u6620\u5c04 \u5230\u4e86\u5185\u5b58\u4e2d\u7684\u67d0\u4e00\u7247\u533a\u57df\u4e00\u6837\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u4e0d\u7528\u7ba1\u90a3\u4e9b\u5916\u8bbe\u5566\uff0c\u5173\u6ce8\u70b9\u4ecd\u7136\u662f\u4e00\u4e2a\u7b80\u7b80\u5355\u5355\u7684\u5185\u5b58\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684 \u5185\u5b58\u6620\u5c04 \u3002 b \u524d\u7f6e\u77e5\u8bc6 \u7a0b\u5e8f\u5458\u5fc5\u987b\u5bfb\u5740\u8bb8\u591a\u8bbe\u5907,\u4e0e\u5185\u5b58\u7684\u5904\u7406\u65b9\u5f0f\u7c7b\u4f3c\u3002\u56e0\u6b64\u73b0\u4ee3\u5904\u7406\u5668\u63d0\u4f9b\u4e86\u5bf9 I/O \u7aef\u53e3\u8fdb\u884c\u5185\u5b58\u6620\u5c04\u7684\u9009\u9879\uff0c\u5c06\u7279\u5b9a\u5916\u8bbe\u7684\u7aef\u53c8\u5730\u5740\u6620\u5c04\u5230\u666e\u901a\u5185\u5b58\u4e2d\uff0c\u53ef\u4ee5\u50cf\u5904\u7406\u666e\u901a\u5185\u5b58\u90a3\u6837\u64cd\u4f5c\u5916\u8bbe\u3002\u56fe\u5f62\u5361 \u901a\u5e38\u4f1a\u4f7f\u7528\u8fd9\u7c7b\u64cd\u4f5c\uff0c\u56e0\u4e3a\u4e0e\u4f7f\u7528\u7279\u5b9a\u7684\u7aef\u53e3\u547d\u4ee4\u76f8\u6bd4\uff0c\u5904\u7406\u5927\u91cf\u56fe\u50cf\u6570\u636e\u65f6\u4f7f\u7528\u666e\u901a\u5904\u7406\u5668\u547d\u4ee4\u8981\u66f4\u5bb9\u6613\u3002\u8bf8\u5982 PCI \u4e4b\u7c7b\u7684\u7cfb\u7edf\u603b\u7ebf\u901a\u5e38\u4e5f\u662f\u901a\u8fc7 I/O \u5730\u5740\u6620\u5c04\u8fdb\u884c\u5bfb\u5740\u7684\u3002 \u4e3a\u4f7f\u7528\u5185\u5b58\u6620\u5c04\uff0c\u9996\u5148\u5fc5\u987b\u5c07 I/O \u7aef\u53e3\u6620\u5c04\u5230\u666e\u901a\u7684\u7cfb\u7edf\u5185\u5b58\u4e2d (\u4f7f\u7528\u7279\u5b9a\u4e8e\u5904\u7406\u5668\u7684\u4f8b\u7a0b)\u3002 \u5728\u4e0d\u540c\u7684\u5e95\u5c42\u4f53\u7cfb\u7ed3\u6784\u4e4b\u4e0a\uff0c\u5b8c\u6210\u8fd9\u4e00\u4efb\u52a1\u7684\u65b9\u6cd5\u6709\u5f88\u5927\u7684\u4e0d\u540c\uff0c\u5185\u6838\u518d\u6b21\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5c0f\u7684\u62bd\u8c61\u5c42\uff0c\u4e3b\u8981\u5305\u62ec ioremap \u548c iounmap \u547d\u4ee4\uff0c\u5206\u522b\u7528\u4e8e\u6620\u5c04 I/O \u5185\u5b58\u533a\u548c\u89e3\u9664\u6620\u5c04\u3002 3 \u9ad8\u7aef\u5185\u5b58 a \u4e3a\u5565\u4f1a\u8981\u6709\u9ad8\u7aef\u5185\u5b58 \u8fd9\u4e2a\u5176\u5b9e\u662f\u9488\u5bf9 32 \u4f4d\u7684 Linux \u7684\u3002\u6211\u4eec\u77e5\u9053 32 \u4f4d Linux \u865a\u62df\u5730\u5740\u7a7a\u95f4\u53ea\u6709 4GB\u3002\u5047\u8bbe\u8ba1\u7b97\u673a\u5b9e\u9645\u7269\u7406\u5185\u5b58\u5927\u4e8e 4GB \u6bd4\u5982\u6709 8GB, \u90a3\u4e48\u5982\u679c\u6309\u7167\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u4e00\u4e00\u6620\u5c04, \u90a3\u4e48\u5185\u6838\u5730\u5740\u7a7a\u95f4\u6700\u591a\u5c31\u53ea\u80fd\u8bbf\u95ee\u5230 1GB \u7684\u7269\u7406\u5185\u5b58, \u8fd9\u663e\u7136\u662f\u4e0d\u7b26\u5408\u9884\u671f\u7684. \u66f4\u52a0\u8be6\u7ec6\u7684\u89e3\u91ca : \u5f53\u5185\u6838\u6a21\u5757\u4ee3\u7801\u6216\u7ebf\u7a0b\u8bbf\u95ee\u5185\u5b58\u65f6\uff0c\u4ee3\u7801\u4e2d\u7684\u5185\u5b58\u5730\u5740\u90fd\u4e3a\u903b\u8f91\u5730\u5740\uff0c\u800c\u5bf9\u5e94\u5230\u771f\u6b63\u7684\u7269\u7406\u5185\u5b58\u5730\u5740\uff0c\u9700\u8981\u5730\u5740\u4e00\u5bf9\u4e00\u7684\u6620\u5c04\uff0c\u5982\u903b\u8f91\u5730\u5740 0xc0000003 \u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\u4e3a 0\u00d73\uff0c0xc0000004 \u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\u4e3a 0\u00d74\uff0c\u2026 \u2026\uff0c\u903b\u8f91\u5730\u5740\u4e0e\u7269\u7406\u5730\u5740\u5bf9\u5e94\u7684\u5173\u7cfb\u4e3a: \u7269\u7406\u5730\u5740 = \u903b\u8f91\u5730\u5740 \u2013 0xC0000000 \u5047\u8bbe\u6309\u7167\u4e0a\u8ff0\u7b80\u5355\u7684\u5730\u5740\u6620\u5c04\u5173\u7cfb\uff0c\u90a3\u4e48\u5185\u6838\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u8bbf\u95ee\u4e3a 0xc0000000 ~ 0xffffffff\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u7269\u7406\u5185\u5b58\u8303\u56f4\u5c31\u4e3a 0\u00d70 ~ 0\u00d740000000\uff0c\u5373\u53ea\u80fd\u8bbf\u95ee 1G \u7269\u7406\u5185\u5b58\u3002\u82e5\u673a\u5668\u4e2d\u5b89\u88c5 8G \u7269\u7406\u5185\u5b58\uff0c\u90a3\u4e48\u5185\u6838\u5c31\u53ea\u80fd\u8bbf\u95ee\u524d 1G \u7269\u7406\u5185\u5b58\uff0c\u540e\u9762 7G \u7269\u7406\u5185\u5b58\u5c06\u4f1a\u65e0\u6cd5\u8bbf\u95ee\uff0c\u56e0\u4e3a\u5185\u6838 \u7684\u5730\u5740\u7a7a\u95f4\u5df2\u7ecf\u5168\u90e8\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\u5730\u5740\u8303\u56f4 0\u00d70 ~ 0\u00d740000000\u3002\u5373\u4f7f\u5b89\u88c5\u4e86 8G \u7269\u7406\u5185\u5b58\uff0c\u90a3\u4e48\u7269\u7406\u5730\u5740\u4e3a 0\u00d740000001 \u7684\u5185\u5b58\uff0c\u5185\u6838\u8be5\u600e\u4e48\u53bb\u8bbf\u95ee\u5462\uff1f\u4ee3\u7801\u4e2d\u5fc5\u987b\u8981\u6709\u5185\u5b58\u903b\u8f91\u5730\u5740 \u7684\uff0c0xc0000000 ~ 0xffffffff \u7684\u5730\u5740\u7a7a\u95f4\u5df2\u7ecf\u88ab\u7528\u5b8c\u4e86\uff0c\u6240\u4ee5\u65e0\u6cd5\u8bbf\u95ee\u7269\u7406\u5730\u5740 0\u00d740000000 \u4ee5\u540e\u7684\u5185\u5b58\u3002 \u663e\u7136\u4e0d\u80fd\u5c06\u5185\u6838\u5730\u5740\u7a7a\u95f4 0xc0000000 ~ 0xfffffff \u5168\u90e8\u7528\u6765\u7b80\u5355\u7684\u5730\u5740\u6620\u5c04\u3002 \u56e0\u6b64 x86 \u67b6\u6784\u4e2d\u5c06\u5185\u6838\u5730\u5740\u7a7a\u95f4\u5212\u5206\u4e09\u90e8\u5206\uff1a ZONE_DMA , ZONE_NORMAL \u548c ZONE_HIGHMEM \u3002 \u540d\u79f0 \u8303\u56f4 ZONE_DMA \u5185\u5b58\u5f00\u59cb\u7684 16MB ZONE_NORMAL 16MB~896MB ZONE_HIGHMEM 896MB ~ \u7ed3\u675f ZONE_HIGHMEM \u5373\u4e3a\u9ad8\u7aef\u5185\u5b58\uff0c\u8fd9\u5c31\u662f\u5185\u5b58\u9ad8\u7aef\u5185\u5b58\u6982\u5ff5\u7684\u7531\u6765\u3002 b \u9ad8\u7aef\u5185\u5b58\u600e\u4e48\u7528 \u9ad8\u7aef\u5185\u5b58 HIGH_MEM \u5730\u5740\u7a7a\u95f4\u8303\u56f4\u4e3a 0xF8000000~0xFFFFFFFF\uff08896MB \uff5e 1024MB\uff09\u3002\u90a3\u4e48\u5982\u5185\u6838\u662f\u5982\u4f55\u501f\u52a9 128MB \u9ad8\u7aef\u5185\u5b58\u5730\u5740\u7a7a\u95f4\u662f\u5982\u4f55\u5b9e\u73b0\u8bbf\u95ee\u53ef\u4ee5\u6240\u6709\u7269\u7406\u5185\u5b58\uff1f \u6700\u57fa\u672c\u601d\u60f3\uff1a \u501f\u4e00\u6bb5\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u5efa\u7acb\u4e34\u65f6\u5730\u5740\u6620\u5c04\uff0c\u7528\u5b8c\u540e\u91ca\u653e\uff0c\u8fbe\u5230\u8fd9\u6bb5\u5730\u5740\u7a7a\u95f4\u53ef\u4ee5\u5faa\u73af\u4f7f\u7528\uff0c\u8bbf\u95ee\u6240\u6709\u7269\u7406\u5185\u5b58\u3002 \u5728\u9ad8\u7aef\u5185\u5b58\u4e2d\u7684\u9875\u4e0d\u80fd\u6c38\u4e45\u5730\u6620\u5c04\u5230\u5185\u6838\u5730\u5740\u7a7a\u95f4\u4e0a\u3002\u56e0\u6b64\uff0c\u901a\u8fc7 alloc_pages \u51fd\u6570\u4ee5 _GFP_HGHMEM \u6807\u5fd7\u83b7\u5f97\u7684\u9875\u4e0d\u53ef\u80fd\u6709\u903b\u8f91\u5730\u5740\u3002 c \u9ad8\u7aef\u5185\u5b58\u5176\u4ed6\u5e38\u89c1\u95ee\u9898 1 \u7528\u6237\u7a7a\u95f4\uff08\u8fdb\u7a0b\uff09\u662f\u5426\u6709\u9ad8\u7aef\u5185\u5b58\u6982\u5ff5\uff1f \u7528\u6237\u8fdb\u7a0b\u6ca1\u6709\u9ad8\u7aef\u5185\u5b58\u6982\u5ff5\u3002\u53ea\u6709\u5728\u5185\u6838\u7a7a\u95f4\u624d\u5b58\u5728\u9ad8\u7aef\u5185\u5b58\u3002\u7528\u6237\u8fdb\u7a0b\u6700\u591a\u53ea\u53ef\u4ee5\u8bbf\u95ee 3G \u7269\u7406\u5185\u5b58\uff0c\u800c\u5185\u6838\u8fdb\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u6240\u6709\u7269\u7406\u5185\u5b58\u3002 2 64 \u4f4d\u5185\u6838\u4e2d\u6709\u9ad8\u7aef\u5185\u5b58\u5417\uff1f \u76ee\u524d\u73b0\u5b9e\u4e2d\uff0c64 \u4f4d Linux \u5185\u6838\u4e0d\u5b58\u5728\u9ad8\u7aef\u5185\u5b58\uff0c\u56e0\u4e3a 64 \u4f4d\u5185\u6838\u53ef\u4ee5\u652f\u6301\u8d85\u8fc7 512GB \u5185\u5b58\u3002\u82e5\u673a\u5668\u5b89\u88c5\u7684\u7269\u7406\u5185\u5b58\u8d85\u8fc7\u5185\u6838\u5730\u5740\u7a7a\u95f4\u8303\u56f4\uff0c\u5c31\u4f1a\u5b58\u5728\u9ad8\u7aef\u5185\u5b58\u3002 3 \u7528\u6237\u8fdb\u7a0b\u80fd\u8bbf\u95ee\u591a\u5c11\u7269\u7406\u5185\u5b58\uff1f\u5185\u6838\u4ee3\u7801\u80fd\u8bbf\u95ee\u591a\u5c11\u7269\u7406\u5185\u5b58\uff1f 32 \u4f4d\u7cfb\u7edf\u7528\u6237\u8fdb\u7a0b\u6700\u5927\u53ef\u4ee5\u8bbf\u95ee 3GB\uff0c\u5185\u6838\u4ee3\u7801\u53ef\u4ee5\u8bbf\u95ee\u6240\u6709\u7269\u7406\u5185\u5b58\u3002 64 \u4f4d\u7cfb\u7edf\u7528\u6237\u8fdb\u7a0b\u6700\u5927\u53ef\u4ee5\u8bbf\u95ee\u8d85\u8fc7 512GB\uff0c\u5185\u6838\u4ee3\u7801\u53ef\u4ee5\u8bbf\u95ee\u6240\u6709\u7269\u7406\u5185\u5b58\u3002 \u4e8c \u53c2\u8003 \u5168\u7f51\u6700\u786c\u6838\u8bb2\u89e3\u8ba1\u7b97\u673a\u7684\u542f\u52a8\u8fc7\u7a0b","title":"\u7b2c\u56db\u7bc7 Linux\u5185\u6838\u7a7a\u95f4\u5185\u5b58\u6982\u8ff0"},{"location":"chapter_1/4_linux_kernel_mm_basic/#_1","text":"\u672c\u7bc7\u8bb2\u8ff0 Linux \u5185\u6838\u5185\u5b58\u7ba1\u7406\u7684\u4e00\u4e9b\u57fa\u7840\u63cf\u8ff0","title":"\u6982\u8ff0"},{"location":"chapter_1/4_linux_kernel_mm_basic/#kernel-space","text":"32 \u4f4d\u5904\u7406\u5668\u7684 Linux \u7684\u6bcf\u4e2a\u8fdb\u7a0b\u4eab\u6709 4GB \u7684\u5185\u5b58\u7a7a\u95f4\uff0c0~3GB \u5c5e\u4e8e\u7528\u6237\u7a7a \u95f4\uff0c3~4GB \u5c5e\u4e8e\u5185\u6838\u7a7a\u95f4\uff0c\u5185\u6838\u7a7a\u95f4\u5bf9\u5e38\u89c4\u5185\u5b58\u3001I/O \u8bbe\u5907\u5185\u5b58\u4ee5\u53ca\u9ad8\u7aef\u5185\u5b58\u6709\u4e0d\u540c\u7684\u5904\u7406\u65b9\u5f0f\u3002 \u53ef\u89c1\u5185\u6838\u90e8\u5206\u5185\u5b58\u5206\u4e3a \u5e38\u89c4\u5185\u5b58 \u3001 I/O \u8bbe\u5907\u5185\u5b58 \u548c \u9ad8\u7aef\u5185\u5b58","title":"\u4e00 Kernel Space \u5185\u5185\u5b58\u5206\u7c7b"},{"location":"chapter_1/4_linux_kernel_mm_basic/#1","text":"\u8fd9\u5757\u53ef\u4ee5\u53c2\u8003 \u7b2c\u516d\u7ae0\u7b2c\u516d\u7bc7","title":"1 \u5e38\u89c4\u5185\u5b58"},{"location":"chapter_1/4_linux_kernel_mm_basic/#2-io","text":"","title":"2 I/O \u8bbe\u5907\u5185\u5b58"},{"location":"chapter_1/4_linux_kernel_mm_basic/#a","text":"CPU \u5730\u5740\u603b\u7ebf\u7684\u5bbd\u5ea6\u51b3\u5b9a\u4e86\u53ef\u8bbf\u95ee\u7684\u5185\u5b58\u7a7a\u95f4\u7684\u5927\u5c0f\u3002 \u6bd4\u5982 16 \u4f4d\u7684 CPU \u5730\u5740\u603b\u7ebf\u5bbd\u5ea6\u4e3a 20 \u4f4d\uff0c\u5730\u5740\u8303\u56f4\u662f 1M\u300232 \u4f4d\u7684 CPU \u5730\u5740\u603b\u7ebf\u5bbd\u5ea6\u4e3a 32 \u4f4d\uff0c\u5730\u5740\u8303\u56f4\u662f 4G\u3002\u4f60\u53ef\u4ee5\u7b97\u7b97\u6211\u4eec\u73b0\u5728\u7684 64 \u4f4d\u673a\u7684\u5730\u5740\u8303\u56f4\u3002 \u53ef\u662f\uff0c\u53ef\u8bbf\u95ee\u7684\u5185\u5b58\u7a7a\u95f4\u8fd9\u4e48\u5927\uff0c\u5e76\u4e0d\u7b49\u4e8e\u8bf4\u5168\u90fd\u7ed9\u5185\u5b58\u4f7f\u7528\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bfb\u5740\u7684\u5bf9\u8c61\u4e0d\u53ea\u6709\u5185\u5b58\uff0c\u8fd8\u6709\u4e00\u4e9b\u5916\u8bbe\u4e5f\u8981\u901a\u8fc7\u5730\u5740\u603b\u7ebf\u7684\u65b9\u5f0f\u53bb\u8bbf\u95ee\uff0c\u90a3\u600e\u4e48\u53bb\u8bbf\u95ee\u8fd9\u4e9b\u5916\u8bbe\u5462\uff1f\u5c31\u662f\u5728\u5730\u5740\u8303\u56f4\u4e2d\u5212\u51fa\u4e00\u7247\u7247\u7684\u533a\u57df\uff0c\u8fd9\u5757\u7ed9\u663e\u5b58\u4f7f\u7528\uff0c\u90a3\u5757\u7ed9\u786c\u76d8\u63a7\u5236\u5668\u4f7f\u7528\uff0c\u7b49\u7b49 \u3002 \u8fd9\u6837\u8bf4\uff0c\u5176\u5b9e\u5c31\u4e0d\u7b26\u5408\u6211\u4eec\u7684\u524d\u7f6e\u77e5\u8bc6\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u6709\u4e00\u79cd\u4e0d\u592a\u6b63\u786e\u7684\u7406\u89e3\u65b9\u5f0f\uff0c\u90a3\u5c31\u662f\u5185\u5b58\u4e2d\u7684\u8fd9\u5757\u4f4d\u7f6e\u5c31\u662f\u663e\u5b58\uff0c\u90a3\u5757\u4f4d\u7f6e\u5c31\u662f\u786c\u76d8\u63a7\u5236\u5668\u3002\u6211\u4eec\u5728\u76f8\u5e94\u7684\u4f4d\u7f6e\u4e0a\u8bfb\u53d6\u6216\u8005\u5199\u5165\uff0c\u5c31\u76f8\u5f53\u4e8e\u5728\u663e\u5b58\u7b49\u5916\u8bbe\u7684\u76f8\u5e94\u4f4d\u7f6e\u4e0a\u8bfb\u53d6\u6216\u8005\u5199\u5165\uff0c\u5c31\u597d\u50cf\u8fd9\u4e9b\u5916\u8bbe\u7684\u5b58\u50a8\u533a\u57df\uff0c\u88ab \u6620\u5c04 \u5230\u4e86\u5185\u5b58\u4e2d\u7684\u67d0\u4e00\u7247\u533a\u57df\u4e00\u6837\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u4e0d\u7528\u7ba1\u90a3\u4e9b\u5916\u8bbe\u5566\uff0c\u5173\u6ce8\u70b9\u4ecd\u7136\u662f\u4e00\u4e2a\u7b80\u7b80\u5355\u5355\u7684\u5185\u5b58\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684 \u5185\u5b58\u6620\u5c04 \u3002","title":"a \u524d\u7f6e\u77e5\u8bc6"},{"location":"chapter_1/4_linux_kernel_mm_basic/#b","text":"\u7a0b\u5e8f\u5458\u5fc5\u987b\u5bfb\u5740\u8bb8\u591a\u8bbe\u5907,\u4e0e\u5185\u5b58\u7684\u5904\u7406\u65b9\u5f0f\u7c7b\u4f3c\u3002\u56e0\u6b64\u73b0\u4ee3\u5904\u7406\u5668\u63d0\u4f9b\u4e86\u5bf9 I/O \u7aef\u53e3\u8fdb\u884c\u5185\u5b58\u6620\u5c04\u7684\u9009\u9879\uff0c\u5c06\u7279\u5b9a\u5916\u8bbe\u7684\u7aef\u53c8\u5730\u5740\u6620\u5c04\u5230\u666e\u901a\u5185\u5b58\u4e2d\uff0c\u53ef\u4ee5\u50cf\u5904\u7406\u666e\u901a\u5185\u5b58\u90a3\u6837\u64cd\u4f5c\u5916\u8bbe\u3002\u56fe\u5f62\u5361 \u901a\u5e38\u4f1a\u4f7f\u7528\u8fd9\u7c7b\u64cd\u4f5c\uff0c\u56e0\u4e3a\u4e0e\u4f7f\u7528\u7279\u5b9a\u7684\u7aef\u53e3\u547d\u4ee4\u76f8\u6bd4\uff0c\u5904\u7406\u5927\u91cf\u56fe\u50cf\u6570\u636e\u65f6\u4f7f\u7528\u666e\u901a\u5904\u7406\u5668\u547d\u4ee4\u8981\u66f4\u5bb9\u6613\u3002\u8bf8\u5982 PCI \u4e4b\u7c7b\u7684\u7cfb\u7edf\u603b\u7ebf\u901a\u5e38\u4e5f\u662f\u901a\u8fc7 I/O \u5730\u5740\u6620\u5c04\u8fdb\u884c\u5bfb\u5740\u7684\u3002 \u4e3a\u4f7f\u7528\u5185\u5b58\u6620\u5c04\uff0c\u9996\u5148\u5fc5\u987b\u5c07 I/O \u7aef\u53e3\u6620\u5c04\u5230\u666e\u901a\u7684\u7cfb\u7edf\u5185\u5b58\u4e2d (\u4f7f\u7528\u7279\u5b9a\u4e8e\u5904\u7406\u5668\u7684\u4f8b\u7a0b)\u3002 \u5728\u4e0d\u540c\u7684\u5e95\u5c42\u4f53\u7cfb\u7ed3\u6784\u4e4b\u4e0a\uff0c\u5b8c\u6210\u8fd9\u4e00\u4efb\u52a1\u7684\u65b9\u6cd5\u6709\u5f88\u5927\u7684\u4e0d\u540c\uff0c\u5185\u6838\u518d\u6b21\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5c0f\u7684\u62bd\u8c61\u5c42\uff0c\u4e3b\u8981\u5305\u62ec ioremap \u548c iounmap \u547d\u4ee4\uff0c\u5206\u522b\u7528\u4e8e\u6620\u5c04 I/O \u5185\u5b58\u533a\u548c\u89e3\u9664\u6620\u5c04\u3002","title":"b \u524d\u7f6e\u77e5\u8bc6"},{"location":"chapter_1/4_linux_kernel_mm_basic/#3","text":"","title":"3 \u9ad8\u7aef\u5185\u5b58"},{"location":"chapter_1/4_linux_kernel_mm_basic/#a_1","text":"\u8fd9\u4e2a\u5176\u5b9e\u662f\u9488\u5bf9 32 \u4f4d\u7684 Linux \u7684\u3002\u6211\u4eec\u77e5\u9053 32 \u4f4d Linux \u865a\u62df\u5730\u5740\u7a7a\u95f4\u53ea\u6709 4GB\u3002\u5047\u8bbe\u8ba1\u7b97\u673a\u5b9e\u9645\u7269\u7406\u5185\u5b58\u5927\u4e8e 4GB \u6bd4\u5982\u6709 8GB, \u90a3\u4e48\u5982\u679c\u6309\u7167\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u4e00\u4e00\u6620\u5c04, \u90a3\u4e48\u5185\u6838\u5730\u5740\u7a7a\u95f4\u6700\u591a\u5c31\u53ea\u80fd\u8bbf\u95ee\u5230 1GB \u7684\u7269\u7406\u5185\u5b58, \u8fd9\u663e\u7136\u662f\u4e0d\u7b26\u5408\u9884\u671f\u7684. \u66f4\u52a0\u8be6\u7ec6\u7684\u89e3\u91ca : \u5f53\u5185\u6838\u6a21\u5757\u4ee3\u7801\u6216\u7ebf\u7a0b\u8bbf\u95ee\u5185\u5b58\u65f6\uff0c\u4ee3\u7801\u4e2d\u7684\u5185\u5b58\u5730\u5740\u90fd\u4e3a\u903b\u8f91\u5730\u5740\uff0c\u800c\u5bf9\u5e94\u5230\u771f\u6b63\u7684\u7269\u7406\u5185\u5b58\u5730\u5740\uff0c\u9700\u8981\u5730\u5740\u4e00\u5bf9\u4e00\u7684\u6620\u5c04\uff0c\u5982\u903b\u8f91\u5730\u5740 0xc0000003 \u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\u4e3a 0\u00d73\uff0c0xc0000004 \u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\u4e3a 0\u00d74\uff0c\u2026 \u2026\uff0c\u903b\u8f91\u5730\u5740\u4e0e\u7269\u7406\u5730\u5740\u5bf9\u5e94\u7684\u5173\u7cfb\u4e3a: \u7269\u7406\u5730\u5740 = \u903b\u8f91\u5730\u5740 \u2013 0xC0000000 \u5047\u8bbe\u6309\u7167\u4e0a\u8ff0\u7b80\u5355\u7684\u5730\u5740\u6620\u5c04\u5173\u7cfb\uff0c\u90a3\u4e48\u5185\u6838\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u8bbf\u95ee\u4e3a 0xc0000000 ~ 0xffffffff\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u7269\u7406\u5185\u5b58\u8303\u56f4\u5c31\u4e3a 0\u00d70 ~ 0\u00d740000000\uff0c\u5373\u53ea\u80fd\u8bbf\u95ee 1G \u7269\u7406\u5185\u5b58\u3002\u82e5\u673a\u5668\u4e2d\u5b89\u88c5 8G \u7269\u7406\u5185\u5b58\uff0c\u90a3\u4e48\u5185\u6838\u5c31\u53ea\u80fd\u8bbf\u95ee\u524d 1G \u7269\u7406\u5185\u5b58\uff0c\u540e\u9762 7G \u7269\u7406\u5185\u5b58\u5c06\u4f1a\u65e0\u6cd5\u8bbf\u95ee\uff0c\u56e0\u4e3a\u5185\u6838 \u7684\u5730\u5740\u7a7a\u95f4\u5df2\u7ecf\u5168\u90e8\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\u5730\u5740\u8303\u56f4 0\u00d70 ~ 0\u00d740000000\u3002\u5373\u4f7f\u5b89\u88c5\u4e86 8G \u7269\u7406\u5185\u5b58\uff0c\u90a3\u4e48\u7269\u7406\u5730\u5740\u4e3a 0\u00d740000001 \u7684\u5185\u5b58\uff0c\u5185\u6838\u8be5\u600e\u4e48\u53bb\u8bbf\u95ee\u5462\uff1f\u4ee3\u7801\u4e2d\u5fc5\u987b\u8981\u6709\u5185\u5b58\u903b\u8f91\u5730\u5740 \u7684\uff0c0xc0000000 ~ 0xffffffff \u7684\u5730\u5740\u7a7a\u95f4\u5df2\u7ecf\u88ab\u7528\u5b8c\u4e86\uff0c\u6240\u4ee5\u65e0\u6cd5\u8bbf\u95ee\u7269\u7406\u5730\u5740 0\u00d740000000 \u4ee5\u540e\u7684\u5185\u5b58\u3002 \u663e\u7136\u4e0d\u80fd\u5c06\u5185\u6838\u5730\u5740\u7a7a\u95f4 0xc0000000 ~ 0xfffffff \u5168\u90e8\u7528\u6765\u7b80\u5355\u7684\u5730\u5740\u6620\u5c04\u3002 \u56e0\u6b64 x86 \u67b6\u6784\u4e2d\u5c06\u5185\u6838\u5730\u5740\u7a7a\u95f4\u5212\u5206\u4e09\u90e8\u5206\uff1a ZONE_DMA , ZONE_NORMAL \u548c ZONE_HIGHMEM \u3002 \u540d\u79f0 \u8303\u56f4 ZONE_DMA \u5185\u5b58\u5f00\u59cb\u7684 16MB ZONE_NORMAL 16MB~896MB ZONE_HIGHMEM 896MB ~ \u7ed3\u675f ZONE_HIGHMEM \u5373\u4e3a\u9ad8\u7aef\u5185\u5b58\uff0c\u8fd9\u5c31\u662f\u5185\u5b58\u9ad8\u7aef\u5185\u5b58\u6982\u5ff5\u7684\u7531\u6765\u3002","title":"a \u4e3a\u5565\u4f1a\u8981\u6709\u9ad8\u7aef\u5185\u5b58"},{"location":"chapter_1/4_linux_kernel_mm_basic/#b_1","text":"\u9ad8\u7aef\u5185\u5b58 HIGH_MEM \u5730\u5740\u7a7a\u95f4\u8303\u56f4\u4e3a 0xF8000000~0xFFFFFFFF\uff08896MB \uff5e 1024MB\uff09\u3002\u90a3\u4e48\u5982\u5185\u6838\u662f\u5982\u4f55\u501f\u52a9 128MB \u9ad8\u7aef\u5185\u5b58\u5730\u5740\u7a7a\u95f4\u662f\u5982\u4f55\u5b9e\u73b0\u8bbf\u95ee\u53ef\u4ee5\u6240\u6709\u7269\u7406\u5185\u5b58\uff1f \u6700\u57fa\u672c\u601d\u60f3\uff1a \u501f\u4e00\u6bb5\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u5efa\u7acb\u4e34\u65f6\u5730\u5740\u6620\u5c04\uff0c\u7528\u5b8c\u540e\u91ca\u653e\uff0c\u8fbe\u5230\u8fd9\u6bb5\u5730\u5740\u7a7a\u95f4\u53ef\u4ee5\u5faa\u73af\u4f7f\u7528\uff0c\u8bbf\u95ee\u6240\u6709\u7269\u7406\u5185\u5b58\u3002 \u5728\u9ad8\u7aef\u5185\u5b58\u4e2d\u7684\u9875\u4e0d\u80fd\u6c38\u4e45\u5730\u6620\u5c04\u5230\u5185\u6838\u5730\u5740\u7a7a\u95f4\u4e0a\u3002\u56e0\u6b64\uff0c\u901a\u8fc7 alloc_pages \u51fd\u6570\u4ee5 _GFP_HGHMEM \u6807\u5fd7\u83b7\u5f97\u7684\u9875\u4e0d\u53ef\u80fd\u6709\u903b\u8f91\u5730\u5740\u3002","title":"b \u9ad8\u7aef\u5185\u5b58\u600e\u4e48\u7528"},{"location":"chapter_1/4_linux_kernel_mm_basic/#c","text":"1 \u7528\u6237\u7a7a\u95f4\uff08\u8fdb\u7a0b\uff09\u662f\u5426\u6709\u9ad8\u7aef\u5185\u5b58\u6982\u5ff5\uff1f \u7528\u6237\u8fdb\u7a0b\u6ca1\u6709\u9ad8\u7aef\u5185\u5b58\u6982\u5ff5\u3002\u53ea\u6709\u5728\u5185\u6838\u7a7a\u95f4\u624d\u5b58\u5728\u9ad8\u7aef\u5185\u5b58\u3002\u7528\u6237\u8fdb\u7a0b\u6700\u591a\u53ea\u53ef\u4ee5\u8bbf\u95ee 3G \u7269\u7406\u5185\u5b58\uff0c\u800c\u5185\u6838\u8fdb\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u6240\u6709\u7269\u7406\u5185\u5b58\u3002 2 64 \u4f4d\u5185\u6838\u4e2d\u6709\u9ad8\u7aef\u5185\u5b58\u5417\uff1f \u76ee\u524d\u73b0\u5b9e\u4e2d\uff0c64 \u4f4d Linux \u5185\u6838\u4e0d\u5b58\u5728\u9ad8\u7aef\u5185\u5b58\uff0c\u56e0\u4e3a 64 \u4f4d\u5185\u6838\u53ef\u4ee5\u652f\u6301\u8d85\u8fc7 512GB \u5185\u5b58\u3002\u82e5\u673a\u5668\u5b89\u88c5\u7684\u7269\u7406\u5185\u5b58\u8d85\u8fc7\u5185\u6838\u5730\u5740\u7a7a\u95f4\u8303\u56f4\uff0c\u5c31\u4f1a\u5b58\u5728\u9ad8\u7aef\u5185\u5b58\u3002 3 \u7528\u6237\u8fdb\u7a0b\u80fd\u8bbf\u95ee\u591a\u5c11\u7269\u7406\u5185\u5b58\uff1f\u5185\u6838\u4ee3\u7801\u80fd\u8bbf\u95ee\u591a\u5c11\u7269\u7406\u5185\u5b58\uff1f 32 \u4f4d\u7cfb\u7edf\u7528\u6237\u8fdb\u7a0b\u6700\u5927\u53ef\u4ee5\u8bbf\u95ee 3GB\uff0c\u5185\u6838\u4ee3\u7801\u53ef\u4ee5\u8bbf\u95ee\u6240\u6709\u7269\u7406\u5185\u5b58\u3002 64 \u4f4d\u7cfb\u7edf\u7528\u6237\u8fdb\u7a0b\u6700\u5927\u53ef\u4ee5\u8bbf\u95ee\u8d85\u8fc7 512GB\uff0c\u5185\u6838\u4ee3\u7801\u53ef\u4ee5\u8bbf\u95ee\u6240\u6709\u7269\u7406\u5185\u5b58\u3002","title":"c \u9ad8\u7aef\u5185\u5b58\u5176\u4ed6\u5e38\u89c1\u95ee\u9898"},{"location":"chapter_1/4_linux_kernel_mm_basic/#_2","text":"\u5168\u7f51\u6700\u786c\u6838\u8bb2\u89e3\u8ba1\u7b97\u673a\u7684\u542f\u52a8\u8fc7\u7a0b","title":"\u4e8c \u53c2\u8003"},{"location":"chapter_1/5_how_kernel_call_bios/","text":"\u6982\u8ff0 \u672c\u7bc7\u63cf\u8ff0 Linux \u5185\u6838\u521a\u521a\u542f\u52a8\u65f6, \u5982\u4f55\u8c03\u7528 BIOS \u63d0\u4f9b\u7684\u80fd\u529b\u5b8c\u6210\u7684\u4e00\u4e9b\u5de5\u4f5c 1 \u83b7\u53d6\u5149\u6807\u4f4d\u7f6e. mov ah,#0x03 ; \u5f80ah\u5bc4\u5b58\u5668\u5b58\u5165\u5341\u516d\u8fdb\u523603 int 0x10 ; \u89e6\u53d110\u53f7\u4e2d\u65ad\u7a0b\u5e8f, \u5b83\u7684\u5165\u53c2\u4f1a\u81ea\u52a8\u4eceah\u8bfb\u53d6, \u5982\u679c\u662f03\u5219\u4ee3\u8868\u83b7\u53d6\u5149\u6807\u4f4d\u7f6e mov [0],dx ; \u7136\u540e\u7ed3\u679c\u4f1a\u81ea\u52a8\u4fdd\u5b58\u5728dx\u5bc4\u5b58\u5668, \u6211\u4eec\u4ecedx\u5bc4\u5b58\u5668\u83b7\u53d6\u7ed3\u679c, \u4fdd\u5b58\u5728[0]\u5185\u5b58\u4f4d\u7f6e. 2 \u83b7\u53d6\u7269\u7406\u5185\u5b58\u5927\u5c0f \u6bd4\u5982\u83b7\u53d6\u5185\u5b58\u4fe1\u606f\u3002; Get memory size (extended mem, kB) mov ah,#0x88 ; \u5f80ah\u5bc4\u5b58\u5668\u5b58\u5165\u5341\u516d\u8fdb\u523688 int 0x15 ;\u89e6\u53d115\u53f7\u4e2d\u65ad\u7a0b\u5e8f, \u5b83\u7684\u5165\u53c2\u4f1a\u81ea\u52a8\u4eceah\u8bfb\u53d6, \u5982\u679c\u662f88\u5219\u4ee3\u8868\u83b7\u53d6\u5185\u5b58\u5927\u5c0f mov [2],ax ; \u7136\u540e\u7ed3\u679c\u4f1a\u81ea\u52a8\u4fdd\u5b58\u5728ax\u5bc4\u5b58\u5668, \u6211\u4eec\u4eceax\u5bc4\u5b58\u5668\u83b7\u53d6\u7ed3\u679c, \u4fdd\u5b58\u5728[2]\u5185\u5b58\u4f4d\u7f6e. \u53c2\u8003","title":"\u7b2c\u4e94\u7bc7 Linux\u5185\u6838\u8c03\u7528BIOS\u6848\u4f8b"},{"location":"chapter_1/5_how_kernel_call_bios/#_1","text":"\u672c\u7bc7\u63cf\u8ff0 Linux \u5185\u6838\u521a\u521a\u542f\u52a8\u65f6, \u5982\u4f55\u8c03\u7528 BIOS \u63d0\u4f9b\u7684\u80fd\u529b\u5b8c\u6210\u7684\u4e00\u4e9b\u5de5\u4f5c","title":"\u6982\u8ff0"},{"location":"chapter_1/5_how_kernel_call_bios/#1","text":"mov ah,#0x03 ; \u5f80ah\u5bc4\u5b58\u5668\u5b58\u5165\u5341\u516d\u8fdb\u523603 int 0x10 ; \u89e6\u53d110\u53f7\u4e2d\u65ad\u7a0b\u5e8f, \u5b83\u7684\u5165\u53c2\u4f1a\u81ea\u52a8\u4eceah\u8bfb\u53d6, \u5982\u679c\u662f03\u5219\u4ee3\u8868\u83b7\u53d6\u5149\u6807\u4f4d\u7f6e mov [0],dx ; \u7136\u540e\u7ed3\u679c\u4f1a\u81ea\u52a8\u4fdd\u5b58\u5728dx\u5bc4\u5b58\u5668, \u6211\u4eec\u4ecedx\u5bc4\u5b58\u5668\u83b7\u53d6\u7ed3\u679c, \u4fdd\u5b58\u5728[0]\u5185\u5b58\u4f4d\u7f6e.","title":"1 \u83b7\u53d6\u5149\u6807\u4f4d\u7f6e."},{"location":"chapter_1/5_how_kernel_call_bios/#2","text":"\u6bd4\u5982\u83b7\u53d6\u5185\u5b58\u4fe1\u606f\u3002; Get memory size (extended mem, kB) mov ah,#0x88 ; \u5f80ah\u5bc4\u5b58\u5668\u5b58\u5165\u5341\u516d\u8fdb\u523688 int 0x15 ;\u89e6\u53d115\u53f7\u4e2d\u65ad\u7a0b\u5e8f, \u5b83\u7684\u5165\u53c2\u4f1a\u81ea\u52a8\u4eceah\u8bfb\u53d6, \u5982\u679c\u662f88\u5219\u4ee3\u8868\u83b7\u53d6\u5185\u5b58\u5927\u5c0f mov [2],ax ; \u7136\u540e\u7ed3\u679c\u4f1a\u81ea\u52a8\u4fdd\u5b58\u5728ax\u5bc4\u5b58\u5668, \u6211\u4eec\u4eceax\u5bc4\u5b58\u5668\u83b7\u53d6\u7ed3\u679c, \u4fdd\u5b58\u5728[2]\u5185\u5b58\u4f4d\u7f6e. \u53c2\u8003","title":"2 \u83b7\u53d6\u7269\u7406\u5185\u5b58\u5927\u5c0f"},{"location":"chapter_1/9_linux_arch_overall_introduction/","text":"\u6982\u8ff0 \u672c\u7bc7\u4ecb\u7ecd Linux \u5185\u6838\u603b\u4f53\u6982\u89c8 1 \u67b6\u6784\u56fe \u5982\u4e0a\u56fe\u6240\u793a, \u603b\u4f53\u5206\u4e3a 4 \u5c42: 1 \u7cfb\u7edf\u8c03\u7528\u63a5\u53e3\u5c42 2 \u7cfb\u7edf\u80fd\u529b\u5c42 3 \u5de5\u5177\u5c42 4 \u9a71\u52a8\u7ba1\u7406\u5c42 2 \u5185\u6838\u6838\u5fc3\u77e5\u8bc6\u6811 \u7f51\u7edc \u53d1\u5305\u8def\u5f84 - \u7cfb\u7edf\u8c03\u7528\uff08send_to\uff09---> - Sock->ops --> send_msg - \u534f\u8bae\u6808 - \u4f20\u8f93\u5c42 - \u5177\u4f53\u51fd\u6570\uff1a inet_send ---> sk->sk_prot -> send_msg ---> tcp_send_msg - \u7f51\u7edc\u5c42 - \u5177\u4f53\u51fd\u6570: io - \u94fe\u8def\u5c42 - \u7f51\u7edc\u90bb\u5c45\u5b50\u7cfb\u7edf - \u9a71\u52a8\u7a0b\u5e8f - \u7f51\u5361\u6838\u5fc3\u7ed3\u6784\u4f53 - struct igb_adapter, struct igb_tx/rx_buffer, struct igb_q_vector, struct igb_ring, struct net_device_ops \u6536\u5305\u8def\u5f84 \u7f51\u5361\u9a71\u52a8\u6ce8\u518c\u9636\u6bb5\uff0c struct pci_driver igb_driver{ .probe = igb_probe}, igb_probe \u51fd\u6570\u91cc\u6ce8\u518c\u4e86 netdev,netdev->net_device_ops = igb_netdev_ops, igb_netdev_ops -> igb_open \u4f1a\u5728\u7f51\u5361\u542f\u52a8\u9636\u6bb5\u8c03\u7528\u3002 \u7f51\u5361\u542f\u52a8\u9636\u6bb5 igb_open ---> \u4e00\u8def\u8c03\u7528 \uff0c\u8c03\u7528\u5230 igb_alloc_q_vector\uff0c igb_alloc_q_vector \u91cc\u9762\u6ce8\u518c igb_q_vector->napi->poll \u51fd\u6570\u4e3a igb_poll \u8f6f\u4e2d\u65ad\u9636\u6bb5\u8c03\u7528 sd->napi->poll, \u5176\u5b9e\u5c31\u662f\u8c03\u7528\u9a71\u52a8\u7a0b\u5e8f\u7684 igb_poll \u51fd\u6570 \u5185\u5b58 \u6574\u4f53\u67b6\u6784\u56fe\uff1a \u6df1\u5165\u89e3\u6790 Linux \u5185\u5b58\u7ba1\u7406\uff1a\u63a2\u7d22\u4e09\u5927\u5206\u914d\u5668 \u4ece\u4e0b\u5f80\u4e0a \uff1a \u7269\u7406\u5185\u5b58\uff08struct page\uff09 --> \u4f19\u4f34\u7cfb\u7edf\uff08struct free_area\uff09---\u300bSlab \u5c42---> vmalloc \u6838\u5fc3\u6570\u636e\u7ed3\u6784\uff1a struct pg_data_t\uff0cstruct zone\uff0c struct free_area, struct page \u4e3b\u673a\u4e0a\u6240\u6709\u7684\u5185\u5b58\u6761\uff0c\u7ec4\u6210 struct pg_data_t \u94fe\u8868 \u5355\u4e2a struct pg_data_t \u4e0b\u6709\u591a\u4e2a zone \u6bcf\u4e2a zone \u5bf9\u5e94 1 \u4e2a \u4f19\u4f34\u7cfb\u7edf(\u4e00\u4e2a\u4f19\u4f34\u7cfb\u7edf\uff0c\u5177\u4f53\u4e00\u4e2a\u4f19\u4f34\u7cfb\u7edf\u662f\u4e00\u4e2a\u6570\u7ec4\uff08frea_area \u6570\u7ec4\uff09\uff0c\u6570\u7ec4\u91cc\u6709 11 \u4e2a\u5143\u7d20) free_area \u6309\u5185\u5b58\u5757\u5927\u5c0f\u7ec4\u7ec7\u7269\u7406\u5730\u5740\u8fde\u7eed\u7684 struct page\uff0c\u5927\u5c0f\u5177\u4f53\u662f\u4ec0\u4e48\u5927\u5c0f\uff1f\uff082 \u7684\u6b21\u65b9\u4e2a\u9875\u9762\u5927\u5c0f\uff0c\u6bd4\u5982 2 \u7684 1 \u6b21\u65b9\uff0c2 \u7684 2 \u6b21\u65b9\uff0c2 \u7684 10 \u6b21\u65b9\u3002\u6bd4\u5982 2 \u7684 3 \u6b21\u65b9=8\uff0c\u8bf4\u660e\u8fd9\u4e2a\u5143\u7d20\u91cc\u7684\u94fe\u8868\u4e0a\u6bcf\u4e2a\u5185\u5b58\u5757\u5927\u5c0f\u662f 8 \u4e2a\u9875\u9762\uff0c\u90a3\u4e48\u6bcf\u4e2a\u9875\u9762\u5177\u4f53\u662f\u591a\u5c11 KB \u5462\uff1f\u5176\u5b9e\u90fd\u662f 4KB\uff0c\u8bf4\u660e\u8fd9\u91cc\u7684\u5185\u5b58\u5757\u5927\u5c0f\u90fd\u662f 32KB\uff09 \u8fdb\u7a0b\u865a\u62df\u5185\u5b58\u7ba1\u7406 struct mm_struct \u5bf9\u5e94\u591a\u4e2a struct vm_area_struct \u6bcf\u4e2a vm_area_struct \u7ec4\u6210 \u94fe\u8868 \u548c \u7ea2\u9ed1\u6811 mm_rb \uff0c\u9ed8\u8ba4\u5e94\u7528\u5c42\u7533\u8bf7\u5185\u5b58\u4e4b\u540e\uff0c\u521d\u59cb\u5316\u597d vm_area_struct \uff0c\u7136\u540e\u52a0\u5165 \u94fe\u8868 \u548c\u6302\u597d \u7ea2\u9ed1\u6811 \u5c31\u7ed3\u675f\u4e86\uff0c\u5e76\u6ca1\u6709\u771f\u6b63\u5206\u914d\u7269\u7406\u5185\u5b58 vm_area_struct \u4ee3\u8868\u4e0d\u540c\u7684\u7a0b\u5e8f\u6bb5\uff0c\u6bd4\u5982 \u4ee3\u7801\u3001 bss\u3001data\uff0c\u5806 vm_area_struct \u53ef\u4ee5\u5bf9\u5e94\u6587\u4ef6\uff0c\u53ef\u4ee5\u5bf9\u5e94\u533f\u540d\u9875\u3002\u6587\u4ef6\u7684\u8bdd\u5f53\u7cfb\u7edf\u5185\u5b58\u4e0d\u8db3\u65f6\uff0c\u53ef\u4ee5\u5237\u56de\u78c1\u76d8\u3002\u533f\u540d\u9875\u5c31\u53ea\u80fd\u5237\u5230 swap \u5206\u533a vm_area_struct \u8fd8\u6709\u5404\u79cd\u6807\u8bb0\uff0c\u4ee3\u8868\u865a\u62df\u5185\u5b58\u6bb5\u7684\u6743\u9650\uff0c\u53ef\u8bfb\u3001\u53ef\u5199\u3001\u53ef\u6267\u884c\u3001\u591a\u4e2a\u8fdb\u7a0b\u95f4\u7a7a\u95f2\u7b49 \u4e00\u4e2a inode \u5bf9\u5e94\u4e00\u4e2a address_space, address_space \u4e3b\u8981\u7ba1\u7406\u7740\u4e24\u9897\u6811\uff1ai_pages \u6307\u5411\u7684 xarray \u6811\uff0c\u7ef4\u62a4\u7740\u7684\u6240\u6709 Page Cache \u9875\uff1bi_mmap \u6307\u5411\u7684 PST \u6811\uff0c\u7ef4\u62a4\u7740\u6587\u4ef6\u6620\u5c04\u6240\u5f62\u6210\u7684 vm_area_struct \u865a\u62df\u5185\u5b58\u533a\u57df CPU \u6838\u5fc3\u7ed3\u6784\u4f53 task_struct \u8c03\u5ea6\u7b97\u6cd5\u7406\u89e3 CFS\uff1a \u6309\u865a\u62df\u7b49\u5f85\u65f6\u95f4\u6765\u8c03\u5ea6\u8fdb\u7a0b\uff0c\u7b49\u5f85\u8d8a\u4e45\u7684\u8fdb\u7a0b\u8d8a\u5bb9\u6613\u88ab\u9009\u4e2d\u3002\u865a\u62df\u65f6\u95f4\u5230\u771f\u5b9e\u65f6\u95f4\u7684\u6362\u7b97\u6bd4\u4f8b\u6309\u4f18\u5148\u7ea7\u6709\u4e0d\u540c\u5bf9\u5e94\u6bd4\u4f8b\u4e0d\u540c\uff0c\u6bd4\u5982\u9ed8\u8ba4\u60c5\u51b5\u4e0b 1:1 \uff0c\u4f18\u5148\u7ea7\u9ad8\u7684\u53ef\u80fd\u662f 1:2 Max Pid \u901a\u8fc7 kernel.max_pid \u5185\u6838\u53c2\u6570\u63a7\u5236 \u4f46\u662f\u6700\u9ad8\u4e0a\u9650\u662f 4 \u767e\u4e07\uff0c\u5185\u6838\u4ee3\u7801\u56fa\u5316 Max Threads \u6700\u9ad8\u4e0d\u80fd\u8d85\u8fc7 kernel.threads-max \u6307\u5b9a\u7684\u7ebf\u7a0b\u6570\uff1f \u6216\u8005\u662f\u6bcf\u4e2a\u8fdb\u7a0b\u6700\u591a\u8fd9\u4e48\u591a\u7ebf\u7a0b\u6570 Max OpenFiles \u9ed8\u8ba4\uff1a\u6765\u81ea\u4e8e\u5b83\u7684\u7236\u8fdb\u7a0b\uff0cinit \u8fdb\u7a0b\u6765\u81ea\u4e8e\u5185\u6838\u5199\u6b7b\u6216\u8005/proc/sys/fs/nr_open \u7684\u8bbe\u7f6e \u4e0a\u9650\uff1a \u7cfb\u7edf\u7ea7\uff0cfile-max \u5355\u8fdb\u7a0b\uff1aulimit\uff0c\u548c /proc/sys/fs/nr_open IO IO \u6808 \u8def\u5f84\uff1aVFS---> PageCache ---> FS ---> General Block ---> IO \u8c03\u5ea6\u7b97\u6cd5 ---> \u4f18\u5316\uff1a \u5e94\u7528\u5c42\u5408\u5e76\u591a\u6b21 IO \u8bf7\u6c42 PageCache\uff1a\u7f13\u5b58\u5237\u65b0\u65f6\u95f4\u8c03\u6574\uff0c\u57fa\u4e8e\u5e94\u7528\u573a\u666f\u3002\u9ad8\u6570\u636e\u4e00\u81f4\u6027\u5c31\u7acb\u523b\u5237\u65b0\uff0c\u9ad8\u6027\u80fd\u5c31\u6700\u5927\u7f13\u5b58\u3002 FS\uff1a\u5404\u79cd\u6302\u8f7d\u53c2\u6570 IO \u8c03\u5ea6\u5c42\uff1a IO \u8c03\u5ea6\u7b97\u6cd5 \u5355\u961f\u5217\uff1anoop\u3001cfq\u3001dealine \u591a\u961f\u5217 \u8c03\u6574 IO \u961f\u5217\u957f\u5ea6 \u5757\u8bbe\u5907\u5c42 RAID \u5361\u7f13\u5b58 \u96f6 Copy sendfile mmap \u76f4\u63a5 Direct I/O VFS \u56db\u5927\u5bf9\u8c61 Struct inode, struct file,struct dentry, struct super_block \u7efc\u5408 \u5b8f current \u5b8f container_of \u5b8f \u94fe\u8868\u64cd\u4f5c\u7c7b\u5b8f LIST_HEAD, LIST_HEAD_INIT, INIT_LIST_HEAD \u6ce8\u518c\u7c7b \u5185\u5b58 IO register_filesystem(&dev_fs_type); //\u6ce8\u518c dev_fs_type \u6587\u4ef6\u7cfb\u7edf\uff0c\u5373\u5c06 dev_fs_type \u6dfb\u52a0\u5230\u5185\u6838\u5168\u5c40\u603b\u94fe\u8868\u4e2d file_systems CPU open_softirq \u662f\u6ce8\u518c\u5230 softirq_vec \u6570\u7ec4\u91cc\u7684 \u673a\u5236 \u5185\u6838\u6a21\u5757\u673a\u5236: module_init, module_exit, \u6a21\u5757\u7684 open,read,write \u7b49 ops \u673a\u5236 \u5185\u6838\u9a71\u52a8\u673a\u5236: bus,device,driver \u673a\u5236","title":"\u7b2c\u4e5d\u7bc7 Linux\u67b6\u6784\u6574\u4f53\u4ecb\u7ecd"},{"location":"chapter_1/9_linux_arch_overall_introduction/#_1","text":"\u672c\u7bc7\u4ecb\u7ecd Linux \u5185\u6838\u603b\u4f53\u6982\u89c8","title":"\u6982\u8ff0"},{"location":"chapter_1/9_linux_arch_overall_introduction/#1","text":"\u5982\u4e0a\u56fe\u6240\u793a, \u603b\u4f53\u5206\u4e3a 4 \u5c42: 1 \u7cfb\u7edf\u8c03\u7528\u63a5\u53e3\u5c42 2 \u7cfb\u7edf\u80fd\u529b\u5c42 3 \u5de5\u5177\u5c42 4 \u9a71\u52a8\u7ba1\u7406\u5c42","title":"1 \u67b6\u6784\u56fe"},{"location":"chapter_1/9_linux_arch_overall_introduction/#2","text":"","title":"2 \u5185\u6838\u6838\u5fc3\u77e5\u8bc6\u6811"},{"location":"chapter_1/9_linux_arch_overall_introduction/#_2","text":"","title":"\u7f51\u7edc"},{"location":"chapter_1/9_linux_arch_overall_introduction/#_3","text":"- \u7cfb\u7edf\u8c03\u7528\uff08send_to\uff09---> - Sock->ops --> send_msg - \u534f\u8bae\u6808 - \u4f20\u8f93\u5c42 - \u5177\u4f53\u51fd\u6570\uff1a inet_send ---> sk->sk_prot -> send_msg ---> tcp_send_msg - \u7f51\u7edc\u5c42 - \u5177\u4f53\u51fd\u6570: io - \u94fe\u8def\u5c42 - \u7f51\u7edc\u90bb\u5c45\u5b50\u7cfb\u7edf - \u9a71\u52a8\u7a0b\u5e8f - \u7f51\u5361\u6838\u5fc3\u7ed3\u6784\u4f53 - struct igb_adapter, struct igb_tx/rx_buffer, struct igb_q_vector, struct igb_ring, struct net_device_ops","title":"\u53d1\u5305\u8def\u5f84"},{"location":"chapter_1/9_linux_arch_overall_introduction/#_4","text":"\u7f51\u5361\u9a71\u52a8\u6ce8\u518c\u9636\u6bb5\uff0c struct pci_driver igb_driver{ .probe = igb_probe}, igb_probe \u51fd\u6570\u91cc\u6ce8\u518c\u4e86 netdev,netdev->net_device_ops = igb_netdev_ops, igb_netdev_ops -> igb_open \u4f1a\u5728\u7f51\u5361\u542f\u52a8\u9636\u6bb5\u8c03\u7528\u3002 \u7f51\u5361\u542f\u52a8\u9636\u6bb5 igb_open ---> \u4e00\u8def\u8c03\u7528 \uff0c\u8c03\u7528\u5230 igb_alloc_q_vector\uff0c igb_alloc_q_vector \u91cc\u9762\u6ce8\u518c igb_q_vector->napi->poll \u51fd\u6570\u4e3a igb_poll \u8f6f\u4e2d\u65ad\u9636\u6bb5\u8c03\u7528 sd->napi->poll, \u5176\u5b9e\u5c31\u662f\u8c03\u7528\u9a71\u52a8\u7a0b\u5e8f\u7684 igb_poll \u51fd\u6570","title":"\u6536\u5305\u8def\u5f84"},{"location":"chapter_1/9_linux_arch_overall_introduction/#_5","text":"","title":"\u5185\u5b58"},{"location":"chapter_1/9_linux_arch_overall_introduction/#_6","text":"\u6df1\u5165\u89e3\u6790 Linux \u5185\u5b58\u7ba1\u7406\uff1a\u63a2\u7d22\u4e09\u5927\u5206\u914d\u5668 \u4ece\u4e0b\u5f80\u4e0a \uff1a \u7269\u7406\u5185\u5b58\uff08struct page\uff09 --> \u4f19\u4f34\u7cfb\u7edf\uff08struct free_area\uff09---\u300bSlab \u5c42---> vmalloc \u6838\u5fc3\u6570\u636e\u7ed3\u6784\uff1a struct pg_data_t\uff0cstruct zone\uff0c struct free_area, struct page \u4e3b\u673a\u4e0a\u6240\u6709\u7684\u5185\u5b58\u6761\uff0c\u7ec4\u6210 struct pg_data_t \u94fe\u8868 \u5355\u4e2a struct pg_data_t \u4e0b\u6709\u591a\u4e2a zone \u6bcf\u4e2a zone \u5bf9\u5e94 1 \u4e2a \u4f19\u4f34\u7cfb\u7edf(\u4e00\u4e2a\u4f19\u4f34\u7cfb\u7edf\uff0c\u5177\u4f53\u4e00\u4e2a\u4f19\u4f34\u7cfb\u7edf\u662f\u4e00\u4e2a\u6570\u7ec4\uff08frea_area \u6570\u7ec4\uff09\uff0c\u6570\u7ec4\u91cc\u6709 11 \u4e2a\u5143\u7d20) free_area \u6309\u5185\u5b58\u5757\u5927\u5c0f\u7ec4\u7ec7\u7269\u7406\u5730\u5740\u8fde\u7eed\u7684 struct page\uff0c\u5927\u5c0f\u5177\u4f53\u662f\u4ec0\u4e48\u5927\u5c0f\uff1f\uff082 \u7684\u6b21\u65b9\u4e2a\u9875\u9762\u5927\u5c0f\uff0c\u6bd4\u5982 2 \u7684 1 \u6b21\u65b9\uff0c2 \u7684 2 \u6b21\u65b9\uff0c2 \u7684 10 \u6b21\u65b9\u3002\u6bd4\u5982 2 \u7684 3 \u6b21\u65b9=8\uff0c\u8bf4\u660e\u8fd9\u4e2a\u5143\u7d20\u91cc\u7684\u94fe\u8868\u4e0a\u6bcf\u4e2a\u5185\u5b58\u5757\u5927\u5c0f\u662f 8 \u4e2a\u9875\u9762\uff0c\u90a3\u4e48\u6bcf\u4e2a\u9875\u9762\u5177\u4f53\u662f\u591a\u5c11 KB \u5462\uff1f\u5176\u5b9e\u90fd\u662f 4KB\uff0c\u8bf4\u660e\u8fd9\u91cc\u7684\u5185\u5b58\u5757\u5927\u5c0f\u90fd\u662f 32KB\uff09","title":"\u6574\u4f53\u67b6\u6784\u56fe\uff1a"},{"location":"chapter_1/9_linux_arch_overall_introduction/#_7","text":"struct mm_struct \u5bf9\u5e94\u591a\u4e2a struct vm_area_struct \u6bcf\u4e2a vm_area_struct \u7ec4\u6210 \u94fe\u8868 \u548c \u7ea2\u9ed1\u6811 mm_rb \uff0c\u9ed8\u8ba4\u5e94\u7528\u5c42\u7533\u8bf7\u5185\u5b58\u4e4b\u540e\uff0c\u521d\u59cb\u5316\u597d vm_area_struct \uff0c\u7136\u540e\u52a0\u5165 \u94fe\u8868 \u548c\u6302\u597d \u7ea2\u9ed1\u6811 \u5c31\u7ed3\u675f\u4e86\uff0c\u5e76\u6ca1\u6709\u771f\u6b63\u5206\u914d\u7269\u7406\u5185\u5b58 vm_area_struct \u4ee3\u8868\u4e0d\u540c\u7684\u7a0b\u5e8f\u6bb5\uff0c\u6bd4\u5982 \u4ee3\u7801\u3001 bss\u3001data\uff0c\u5806 vm_area_struct \u53ef\u4ee5\u5bf9\u5e94\u6587\u4ef6\uff0c\u53ef\u4ee5\u5bf9\u5e94\u533f\u540d\u9875\u3002\u6587\u4ef6\u7684\u8bdd\u5f53\u7cfb\u7edf\u5185\u5b58\u4e0d\u8db3\u65f6\uff0c\u53ef\u4ee5\u5237\u56de\u78c1\u76d8\u3002\u533f\u540d\u9875\u5c31\u53ea\u80fd\u5237\u5230 swap \u5206\u533a vm_area_struct \u8fd8\u6709\u5404\u79cd\u6807\u8bb0\uff0c\u4ee3\u8868\u865a\u62df\u5185\u5b58\u6bb5\u7684\u6743\u9650\uff0c\u53ef\u8bfb\u3001\u53ef\u5199\u3001\u53ef\u6267\u884c\u3001\u591a\u4e2a\u8fdb\u7a0b\u95f4\u7a7a\u95f2\u7b49 \u4e00\u4e2a inode \u5bf9\u5e94\u4e00\u4e2a address_space, address_space \u4e3b\u8981\u7ba1\u7406\u7740\u4e24\u9897\u6811\uff1ai_pages \u6307\u5411\u7684 xarray \u6811\uff0c\u7ef4\u62a4\u7740\u7684\u6240\u6709 Page Cache \u9875\uff1bi_mmap \u6307\u5411\u7684 PST \u6811\uff0c\u7ef4\u62a4\u7740\u6587\u4ef6\u6620\u5c04\u6240\u5f62\u6210\u7684 vm_area_struct \u865a\u62df\u5185\u5b58\u533a\u57df","title":"\u8fdb\u7a0b\u865a\u62df\u5185\u5b58\u7ba1\u7406"},{"location":"chapter_1/9_linux_arch_overall_introduction/#cpu","text":"","title":"CPU"},{"location":"chapter_1/9_linux_arch_overall_introduction/#_8","text":"task_struct","title":"\u6838\u5fc3\u7ed3\u6784\u4f53"},{"location":"chapter_1/9_linux_arch_overall_introduction/#_9","text":"CFS\uff1a \u6309\u865a\u62df\u7b49\u5f85\u65f6\u95f4\u6765\u8c03\u5ea6\u8fdb\u7a0b\uff0c\u7b49\u5f85\u8d8a\u4e45\u7684\u8fdb\u7a0b\u8d8a\u5bb9\u6613\u88ab\u9009\u4e2d\u3002\u865a\u62df\u65f6\u95f4\u5230\u771f\u5b9e\u65f6\u95f4\u7684\u6362\u7b97\u6bd4\u4f8b\u6309\u4f18\u5148\u7ea7\u6709\u4e0d\u540c\u5bf9\u5e94\u6bd4\u4f8b\u4e0d\u540c\uff0c\u6bd4\u5982\u9ed8\u8ba4\u60c5\u51b5\u4e0b 1:1 \uff0c\u4f18\u5148\u7ea7\u9ad8\u7684\u53ef\u80fd\u662f 1:2","title":"\u8c03\u5ea6\u7b97\u6cd5\u7406\u89e3"},{"location":"chapter_1/9_linux_arch_overall_introduction/#max-pid","text":"\u901a\u8fc7 kernel.max_pid \u5185\u6838\u53c2\u6570\u63a7\u5236 \u4f46\u662f\u6700\u9ad8\u4e0a\u9650\u662f 4 \u767e\u4e07\uff0c\u5185\u6838\u4ee3\u7801\u56fa\u5316","title":"Max Pid"},{"location":"chapter_1/9_linux_arch_overall_introduction/#max-threads","text":"\u6700\u9ad8\u4e0d\u80fd\u8d85\u8fc7 kernel.threads-max \u6307\u5b9a\u7684\u7ebf\u7a0b\u6570\uff1f \u6216\u8005\u662f\u6bcf\u4e2a\u8fdb\u7a0b\u6700\u591a\u8fd9\u4e48\u591a\u7ebf\u7a0b\u6570","title":"Max Threads"},{"location":"chapter_1/9_linux_arch_overall_introduction/#max-openfiles","text":"\u9ed8\u8ba4\uff1a\u6765\u81ea\u4e8e\u5b83\u7684\u7236\u8fdb\u7a0b\uff0cinit \u8fdb\u7a0b\u6765\u81ea\u4e8e\u5185\u6838\u5199\u6b7b\u6216\u8005/proc/sys/fs/nr_open \u7684\u8bbe\u7f6e \u4e0a\u9650\uff1a \u7cfb\u7edf\u7ea7\uff0cfile-max \u5355\u8fdb\u7a0b\uff1aulimit\uff0c\u548c /proc/sys/fs/nr_open","title":"Max OpenFiles"},{"location":"chapter_1/9_linux_arch_overall_introduction/#io","text":"","title":"IO"},{"location":"chapter_1/9_linux_arch_overall_introduction/#io_1","text":"\u8def\u5f84\uff1aVFS---> PageCache ---> FS ---> General Block ---> IO \u8c03\u5ea6\u7b97\u6cd5 ---> \u4f18\u5316\uff1a \u5e94\u7528\u5c42\u5408\u5e76\u591a\u6b21 IO \u8bf7\u6c42 PageCache\uff1a\u7f13\u5b58\u5237\u65b0\u65f6\u95f4\u8c03\u6574\uff0c\u57fa\u4e8e\u5e94\u7528\u573a\u666f\u3002\u9ad8\u6570\u636e\u4e00\u81f4\u6027\u5c31\u7acb\u523b\u5237\u65b0\uff0c\u9ad8\u6027\u80fd\u5c31\u6700\u5927\u7f13\u5b58\u3002 FS\uff1a\u5404\u79cd\u6302\u8f7d\u53c2\u6570 IO \u8c03\u5ea6\u5c42\uff1a IO \u8c03\u5ea6\u7b97\u6cd5 \u5355\u961f\u5217\uff1anoop\u3001cfq\u3001dealine \u591a\u961f\u5217 \u8c03\u6574 IO \u961f\u5217\u957f\u5ea6 \u5757\u8bbe\u5907\u5c42 RAID \u5361\u7f13\u5b58","title":"IO \u6808"},{"location":"chapter_1/9_linux_arch_overall_introduction/#copy","text":"sendfile mmap \u76f4\u63a5 Direct I/O","title":"\u96f6 Copy"},{"location":"chapter_1/9_linux_arch_overall_introduction/#vfs","text":"\u56db\u5927\u5bf9\u8c61 Struct inode, struct file,struct dentry, struct super_block","title":"VFS"},{"location":"chapter_1/9_linux_arch_overall_introduction/#_10","text":"","title":"\u7efc\u5408"},{"location":"chapter_1/9_linux_arch_overall_introduction/#_11","text":"current \u5b8f container_of \u5b8f \u94fe\u8868\u64cd\u4f5c\u7c7b\u5b8f LIST_HEAD, LIST_HEAD_INIT, INIT_LIST_HEAD","title":"\u5b8f"},{"location":"chapter_1/9_linux_arch_overall_introduction/#_12","text":"\u5185\u5b58 IO register_filesystem(&dev_fs_type); //\u6ce8\u518c dev_fs_type \u6587\u4ef6\u7cfb\u7edf\uff0c\u5373\u5c06 dev_fs_type \u6dfb\u52a0\u5230\u5185\u6838\u5168\u5c40\u603b\u94fe\u8868\u4e2d file_systems CPU open_softirq \u662f\u6ce8\u518c\u5230 softirq_vec \u6570\u7ec4\u91cc\u7684","title":"\u6ce8\u518c\u7c7b"},{"location":"chapter_1/9_linux_arch_overall_introduction/#_13","text":"\u5185\u6838\u6a21\u5757\u673a\u5236: module_init, module_exit, \u6a21\u5757\u7684 open,read,write \u7b49 ops \u673a\u5236 \u5185\u6838\u9a71\u52a8\u673a\u5236: bus,device,driver \u673a\u5236","title":"\u673a\u5236"},{"location":"chapter_1/make_blog/","text":"\u4e00 \u7533\u8bf7github pages 1 \u67092\u79cdGithub Pages sites: Project Pages sites \u4e2a\u4eba\u611f\u89c9\u662f\u5f00\u6e90\u9879\u76ee\u7528\u7684\u6bd4\u8f83\u591a User and Organization Pages sites \u4e2a\u4eba\u7528\u6237\u6216\u8005\u5c0f\u578b\u56e2\u961f\u4f7f\u7528\u8fd9\u79cd 2 \u642d\u5efaGithub Pages sites\u7684\u524d\u63d0\u6761\u4ef6 \u9700\u8981\u914d\u7f6e\u4e00\u4e2a\u53d1\u5e03\u6e90(publishing source),\u53d1\u5e03\u6e90\u67093\u79cd\u65b9\u5f0f: 1 \u4f7f\u7528\u67d0\u4e2arepo\u7684master\u5206\u652f 2 \u4f7f\u7528\u67d0\u4e2arepo\u7684gh-pages\u5206\u652f 3 \u4f7f\u7528\u67d0\u4e2arepo\u7684master\u5206\u652f\u7684/docs\u76ee\u5f55 \u5982\u679c\u4f60\u7684repo\u662f\u201c\u7528\u6237\u540d.github.io\u201d\uff08\u6bd4\u5982 zhangsan.github.io\uff09,\u90a3\u4e48github.com\u9ed8\u8ba4\u5c31\u662f\u4f7f\u7528\u8be5repo\u7684master\u5206\u652f\u4f5c\u4e3a\u53d1\u5e03\u6e90\uff0c\u5e76\u4e0d\u80fd\u4f7f\u7528\u4ee5\u4e0a2\u30013\u7684\u65b9\u5f0f\u3002 \u4ee5\u6211\u4eec\u7684\u4f7f\u7528\u7ecf\u9a8c\u6765\u8bf4\uff0c\u5c31\u662f\u5e0c\u671b\u4e13\u95e8\u6709\u4e00\u4e2arepo\u6765\u53d1\u5e03\u7528markdown\u5199\u7684\u4e2a\u4eba\u6587\u7ae0\uff0c\u5f62\u6210\u4e00\u4e2a\u4e2a\u4eba\u535a\u5ba2\uff0c\u5b8c\u5168\u53ef\u4ee5\u91c7\u7528\u5efa\u7acb\u540d\u4e3azhangsan.github.io\u7684repo\uff0c\u7136\u540e\u91c7\u7528master\u5206\u652f\u4f5c\u4e3a\u53d1\u5e03\u6e90\u7684\u8fd9\u79cd\u6a21\u5f0f\u3002 \u4ee5\u4e0b\u662f\u6211\u4eec\u65b0\u5efa\u7684\u4e00\u4e2arepo: \u6253\u7b97\u4f7f\u7528\u8be5repo\u7684master\u5206\u652f\u4f5c\u4e3a\u53d1\u5e03\u6e90(pushing source). \u4e8c \u672c\u5730\u4f7f\u7528mkdocs\u5de5\u5177 \uff081\uff09\u5b89\u88c5mkdocs pip install mkdocs (2) \u5f00\u59cb\u4e00\u4e2a\u65b0\u7684\u6587\u6863\u9879\u76ee $ mkdocs new final_docs $ cd final_docs (3) \u7f16\u5199\u76f8\u5e94\u7684\u6587\u6863 1 \u4e00\u5f00\u59cbfinal_docs\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b 2 \u901a\u8fc7\u4fee\u6539mkdocs.yml \u6765\u7ec4\u7ec7\u535a\u5ba2\u7684\u6846\u67b6\uff0c\u8fd9\u91cc\u7ed9\u51fa\u6211\u7684\u5185\u5bb9\uff0c\u4f5c\u4e3a\u53c2\u8003 $cat mkdocs.yml site_name: Lott's Blog use_directory_urls: true theme: readthedocs pages: - \u9996\u9875: 'index.md' - \u535a\u5ba2\u642d\u5efa: - \u5229\u7528Github Pages\u548cmkdcos\u642d\u5efa\u535a\u5ba2: 'make_blog.md' 3 \u6700\u7ec8\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b 4 \u6b64\u65f6\u4f7f\u7528mkdocs serve\u547d\u4ee4\uff0c\u5148\u5728\u672c\u5730\u770b\u4e00\u4e0b\u535a\u5ba2\u6548\u679c $ mkdocs serve Running at: http://127.0.0.1:8000/ \u4e09 \u628a\u672c\u5730\u7684markdown\u6587\u4ef6\u8f6c\u5316\u4e3ahtml,\u63a8\u9001\u5230github\u4e0a 1 \u8f6c\u5316\u6210html,\u4f7f\u7528mkdocs \u547d\u4ee4 $mkdocs build WARNING - Config value: 'pages'. Warning: The 'pages' configuration option has been deprecated and will be removed in a future release of MkDocs. Use 'nav' instead. INFO - Cleaning site directory INFO - Building documentation to directory: /Path/to/final_docs/site \u4ece\u8fd9\u91cc\uff0c\u6211\u4eec\u770b\u5230\u5b83\u628ahtml\u6587\u4ef6\u5168\u90e8\u653e\u5728\u4e86final_docs/site\u76ee\u5f55\u4e0b,\u5305\u62ecindex.html \u56e0\u6b64\uff0c\u6211\u4eec\u628asite\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\uff0c\u5168\u90e8\u63a8\u9001\u5230github\u4e0a\uff0c\u5c31\u53ef\u4ee5\u4f5c\u4e3aGithub Pages sites\u4e86 2 \u5982\u679c\u662f\u7b2c\u4e00\u6b21\u63d0\u4ea4github,\u90a3\u4e48\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u5373\u53ef\uff0c\u5982\u679c\u4e0d\u662f\u7b2c\u4e00\u6b21\u63d0\u4ea4\uff0c\u8bf7\u81ea\u884c\u89e3\u51b3github\u7684\u4f7f\u7528\u95ee\u9898 git init git remote add origin https://github.com/<\u4f60\u7684\u7528\u6237\u540d>/<\u4f60\u7684\u7528\u6237\u540d>.github.io.git git pull origin master git add . git commit -m \"fisrt commit\" git push origin master \u7a0d\u7b491\uff5e2\u5206\u949f\uff0c\u6211\u4eec\u5c31\u6253\u5f00https://<\u4f60\u7684\u7528\u6237\u540d>.github.io/ ,\u5c31\u80fd\u770b\u5230\u6211\u4eec\u7684\u535a\u5ba2\u9875\u9762\u4e86 \u56db \u53c2\u8003\u6587\u6863 1 Github Pages \u8bf4\u660e: https://help.github.com/articles/creating-project-pages-using-the-command-line/ 2 mkdocs\u5b98\u7f51\u6587\u6863: https://markdown-docs-zh.readthedocs.io/zh_CN/latest/ \u4e94 \u989d\u5916\u8865\u5145 \u5982\u679c\u4f60\u6709\u4e00\u4e2anginx\u670d\u52a1\u5668\uff08apache\u4e5f\u4e00\u6837\uff09\uff0c\u53ef\u4ee5\u628asite\u76ee\u5f55\u653e\u5230\u5bf9\u5e94\u7684\u4e3b\u673a\u4e0a\uff0c\u7136\u540e\u4f7f\u7528nginx\u4f5c\u4e3aweb\u670d\u52a1\u5668\uff0c\u4e5f\u53ef\u4ee5\u628a\u76f8\u5e94\u7684\u6587\u6863\u4f5c\u4e3a\u535a\u5ba2\u5c55\u793a. nginx\u914d\u7f6e\u53c2\u8003\u5982\u4e0b: server { listen 5001; server_name _; root /usr/local/var/www; access_log /usr/local/var/log/nginx/mkdoc.access.log main; error_log /usr/local/var/log/nginx/mkdoc.error.log notice; # favicon.ico location ~ /favicon.ico$ { root /usr/local/var/www; expires 30d; } # our site location / { root /Path/to/final_docs/site; index index.html; } error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/local/var/www; } }","title":"Make blog"},{"location":"chapter_1/make_blog/#github-pages","text":"","title":"\u4e00 \u7533\u8bf7github pages"},{"location":"chapter_1/make_blog/#1-2github-pages-sites","text":"Project Pages sites \u4e2a\u4eba\u611f\u89c9\u662f\u5f00\u6e90\u9879\u76ee\u7528\u7684\u6bd4\u8f83\u591a User and Organization Pages sites \u4e2a\u4eba\u7528\u6237\u6216\u8005\u5c0f\u578b\u56e2\u961f\u4f7f\u7528\u8fd9\u79cd","title":"1 \u67092\u79cdGithub Pages sites:"},{"location":"chapter_1/make_blog/#2-github-pages-sites","text":"\u9700\u8981\u914d\u7f6e\u4e00\u4e2a\u53d1\u5e03\u6e90(publishing source),\u53d1\u5e03\u6e90\u67093\u79cd\u65b9\u5f0f: 1 \u4f7f\u7528\u67d0\u4e2arepo\u7684master\u5206\u652f 2 \u4f7f\u7528\u67d0\u4e2arepo\u7684gh-pages\u5206\u652f 3 \u4f7f\u7528\u67d0\u4e2arepo\u7684master\u5206\u652f\u7684/docs\u76ee\u5f55 \u5982\u679c\u4f60\u7684repo\u662f\u201c\u7528\u6237\u540d.github.io\u201d\uff08\u6bd4\u5982 zhangsan.github.io\uff09,\u90a3\u4e48github.com\u9ed8\u8ba4\u5c31\u662f\u4f7f\u7528\u8be5repo\u7684master\u5206\u652f\u4f5c\u4e3a\u53d1\u5e03\u6e90\uff0c\u5e76\u4e0d\u80fd\u4f7f\u7528\u4ee5\u4e0a2\u30013\u7684\u65b9\u5f0f\u3002 \u4ee5\u6211\u4eec\u7684\u4f7f\u7528\u7ecf\u9a8c\u6765\u8bf4\uff0c\u5c31\u662f\u5e0c\u671b\u4e13\u95e8\u6709\u4e00\u4e2arepo\u6765\u53d1\u5e03\u7528markdown\u5199\u7684\u4e2a\u4eba\u6587\u7ae0\uff0c\u5f62\u6210\u4e00\u4e2a\u4e2a\u4eba\u535a\u5ba2\uff0c\u5b8c\u5168\u53ef\u4ee5\u91c7\u7528\u5efa\u7acb\u540d\u4e3azhangsan.github.io\u7684repo\uff0c\u7136\u540e\u91c7\u7528master\u5206\u652f\u4f5c\u4e3a\u53d1\u5e03\u6e90\u7684\u8fd9\u79cd\u6a21\u5f0f\u3002 \u4ee5\u4e0b\u662f\u6211\u4eec\u65b0\u5efa\u7684\u4e00\u4e2arepo: \u6253\u7b97\u4f7f\u7528\u8be5repo\u7684master\u5206\u652f\u4f5c\u4e3a\u53d1\u5e03\u6e90(pushing source).","title":"2 \u642d\u5efaGithub Pages sites\u7684\u524d\u63d0\u6761\u4ef6"},{"location":"chapter_1/make_blog/#mkdocs","text":"","title":"\u4e8c \u672c\u5730\u4f7f\u7528mkdocs\u5de5\u5177"},{"location":"chapter_1/make_blog/#1mkdocs","text":"pip install mkdocs","title":"\uff081\uff09\u5b89\u88c5mkdocs"},{"location":"chapter_1/make_blog/#2","text":"$ mkdocs new final_docs $ cd final_docs","title":"(2) \u5f00\u59cb\u4e00\u4e2a\u65b0\u7684\u6587\u6863\u9879\u76ee"},{"location":"chapter_1/make_blog/#3","text":"1 \u4e00\u5f00\u59cbfinal_docs\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b 2 \u901a\u8fc7\u4fee\u6539mkdocs.yml \u6765\u7ec4\u7ec7\u535a\u5ba2\u7684\u6846\u67b6\uff0c\u8fd9\u91cc\u7ed9\u51fa\u6211\u7684\u5185\u5bb9\uff0c\u4f5c\u4e3a\u53c2\u8003 $cat mkdocs.yml site_name: Lott's Blog use_directory_urls: true theme: readthedocs pages: - \u9996\u9875: 'index.md' - \u535a\u5ba2\u642d\u5efa: - \u5229\u7528Github Pages\u548cmkdcos\u642d\u5efa\u535a\u5ba2: 'make_blog.md' 3 \u6700\u7ec8\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b 4 \u6b64\u65f6\u4f7f\u7528mkdocs serve\u547d\u4ee4\uff0c\u5148\u5728\u672c\u5730\u770b\u4e00\u4e0b\u535a\u5ba2\u6548\u679c $ mkdocs serve Running at: http://127.0.0.1:8000/","title":"(3) \u7f16\u5199\u76f8\u5e94\u7684\u6587\u6863"},{"location":"chapter_1/make_blog/#markdownhtmlgithub","text":"1 \u8f6c\u5316\u6210html,\u4f7f\u7528mkdocs \u547d\u4ee4 $mkdocs build WARNING - Config value: 'pages'. Warning: The 'pages' configuration option has been deprecated and will be removed in a future release of MkDocs. Use 'nav' instead. INFO - Cleaning site directory INFO - Building documentation to directory: /Path/to/final_docs/site \u4ece\u8fd9\u91cc\uff0c\u6211\u4eec\u770b\u5230\u5b83\u628ahtml\u6587\u4ef6\u5168\u90e8\u653e\u5728\u4e86final_docs/site\u76ee\u5f55\u4e0b,\u5305\u62ecindex.html \u56e0\u6b64\uff0c\u6211\u4eec\u628asite\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\uff0c\u5168\u90e8\u63a8\u9001\u5230github\u4e0a\uff0c\u5c31\u53ef\u4ee5\u4f5c\u4e3aGithub Pages sites\u4e86 2 \u5982\u679c\u662f\u7b2c\u4e00\u6b21\u63d0\u4ea4github,\u90a3\u4e48\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u5373\u53ef\uff0c\u5982\u679c\u4e0d\u662f\u7b2c\u4e00\u6b21\u63d0\u4ea4\uff0c\u8bf7\u81ea\u884c\u89e3\u51b3github\u7684\u4f7f\u7528\u95ee\u9898 git init git remote add origin https://github.com/<\u4f60\u7684\u7528\u6237\u540d>/<\u4f60\u7684\u7528\u6237\u540d>.github.io.git git pull origin master git add . git commit -m \"fisrt commit\" git push origin master \u7a0d\u7b491\uff5e2\u5206\u949f\uff0c\u6211\u4eec\u5c31\u6253\u5f00https://<\u4f60\u7684\u7528\u6237\u540d>.github.io/ ,\u5c31\u80fd\u770b\u5230\u6211\u4eec\u7684\u535a\u5ba2\u9875\u9762\u4e86","title":"\u4e09 \u628a\u672c\u5730\u7684markdown\u6587\u4ef6\u8f6c\u5316\u4e3ahtml,\u63a8\u9001\u5230github\u4e0a"},{"location":"chapter_1/make_blog/#_1","text":"1 Github Pages \u8bf4\u660e: https://help.github.com/articles/creating-project-pages-using-the-command-line/ 2 mkdocs\u5b98\u7f51\u6587\u6863: https://markdown-docs-zh.readthedocs.io/zh_CN/latest/","title":"\u56db \u53c2\u8003\u6587\u6863"},{"location":"chapter_1/make_blog/#_2","text":"\u5982\u679c\u4f60\u6709\u4e00\u4e2anginx\u670d\u52a1\u5668\uff08apache\u4e5f\u4e00\u6837\uff09\uff0c\u53ef\u4ee5\u628asite\u76ee\u5f55\u653e\u5230\u5bf9\u5e94\u7684\u4e3b\u673a\u4e0a\uff0c\u7136\u540e\u4f7f\u7528nginx\u4f5c\u4e3aweb\u670d\u52a1\u5668\uff0c\u4e5f\u53ef\u4ee5\u628a\u76f8\u5e94\u7684\u6587\u6863\u4f5c\u4e3a\u535a\u5ba2\u5c55\u793a. nginx\u914d\u7f6e\u53c2\u8003\u5982\u4e0b: server { listen 5001; server_name _; root /usr/local/var/www; access_log /usr/local/var/log/nginx/mkdoc.access.log main; error_log /usr/local/var/log/nginx/mkdoc.error.log notice; # favicon.ico location ~ /favicon.ico$ { root /usr/local/var/www; expires 30d; } # our site location / { root /Path/to/final_docs/site; index index.html; } error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/local/var/www; } }","title":"\u4e94 \u989d\u5916\u8865\u5145"},{"location":"chapter_10/1_dockerfile_best_practice/","text":"\u5199Dockerfile\u7684\u5c0f\u5efa\u8bae \u8981\u4f7f\u7528 tag\uff0c\u4f46\u4e0d\u8981 latest\u3002 Debian \u633a\u597d\u7684\uff0c\u4e0d\u8981\u603b Ubuntu\u3002 apt-get update \u5728\u524d\uff0crm -rf /var/lib/apt/lists/* \u5728\u540e\u3002 yum install\uff0c\u4e0d\u5fd8 yum clean\u3002 \u591a RUN \u8981\u5408\u5e76\uff0c\u6765\u51cf\u5c11\u5c42\u6570\u3002 \u65e0\u7528\u7684\u8f6f\u4ef6\uff0c\u4e0d\u8981\u4e71\u5b89\u88c5\u3002 COPY \u653e\u6700\u540e\uff0c\u7f13\u5b58\u5f88\u5f00\u5fc3\u3002 \u5584\u7528 dockerignore\uff0c\u4e0d\u6d6a\u8d39\u4f20\u8f93\u3002 \u4e0d\u5fd8 MAINTAINER\uff0c\u8fd9\u90fd\u662f\u6211\u7684\u3002 \u5173\u4e8e\u5bb9\u5668\u5185\u76841\u53f7\u8fdb\u7a0b \u5982\u679c\u662f\u5355\u8fdb\u7a0b\u5bb9\u5668, \u5219\u76f4\u63a5\u4f7f\u7528\u4e1a\u52a1\u8fdb\u7a0b\u4f5c\u4e3a1\u53f7\u8fdb\u7a0b, \u4f8b\u5982uwsgi\u8fdb\u7a0b\u3001tomcat\u8fdb\u7a0b \u5982\u679c\u662f\u80d6\u5bb9\u5668, \u5219\u5efa\u8bae\u4f7f\u7528 tini \u4f5c\u4e3a\u5bb9\u5668\u51851\u53f7\u8fdb\u7a0b. tini\u7684\u4f18\u52bf: tini\u53ef\u4ee5\u907f\u514d\u5e94\u7528\u7a0b\u5e8f\u751f\u6210\u50f5\u5c38\u8fdb\u7a0b tini\u53ef\u4ee5\u5904\u7406Docker\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u7684\u7a0b\u5e8f\u7684\u4fe1\u53f7\uff0c\u4f8b\u5982\uff0c\u901a\u8fc7Tini\uff0c SIGTERM \u53ef\u4ee5\u7ec8\u6b62\u8fdb\u7a0b\uff0c\u4e0d\u9700\u8981\u4f60\u660e\u786e\u5b89\u88c5\u4e00\u4e2a\u4fe1\u53f7\u5904\u7406\u5668 \u8fd9\u91cc\u603b\u7ed3\u4e86\u4e00\u4e9b\u5c0f\u5efa\u8bae\uff1a 1\u3001 Use absolute WORKDIR. Problematic code: FROM busybox WORKDIR usr/src/app Correct code: FROM busybox WORKDIR /usr/src/app 2\u3001 Use WORKDIR to switch to a directory. Problematic code: FROM busybox RUN cd /usr/src/app && git clone git@github.com:lukasmartinelli/hadolint.git Correct code: FROM busybox RUN git clone git@github.com:lukasmartinelli/hadolint.git /usr/src/app 3\u3001 Do not use sudo as it leads to unpredictable behavior. Use a tool like gosu to enforce root. Problematic code: FROM busybox RUN sudo apt-get install Correct code: FROM busybox RUN apt-get install 4\u3001 Do not use apt-get upgrade or dist-upgrade. Problematic code: FROM debian RUN apt-get update && apt-get upgrade Correct code: FROM debian RUN apt-get update 5\u3001Using latest is prone to errors if the image will ever update. Pin the version explicitly to a release tag. Problematic code: FROM debian:latest or FROM debian Correct code: FROM debian:jessie 6\u3001 Pin versions in apt get install. \u5e76\u4e14\u8981\u5e26 -y\u53c2\u6570\uff0c pip\u4e5f\u4e00\u6837\u3002 Problematic code: FROM busybox RUN apt-get install python Correct code: FROM busybox RUN apt-get install -y python=2.7 7\u3001Delete the apt-get lists after installing something. Problematic code: RUN apt-get update && apt-get install -y python Correct code: RUN apt-get update && apt-get install -y python \\ && apt-get clean \\ && rm -rf /var/lib/apt/lists/* 8\u3001Use ADD for extracting archives into an image. 9\u3001Valid UNIX ports range from 0 to 65535. 10\u3001Provide an email adress or URL as maintainer. 11\u3001Use COPY instead of ADD for files and folders. 12\u3001Specify a maintainer of the Dockerfile. \u5e76 \u5199\u660e\u8054\u7cfb\u65b9\u5f0f RUN\u547d\u4ee4 RUN \u6307\u4ee4\u662f\u7528\u6765\u6267\u884c\u547d\u4ee4\u884c\u547d\u4ee4\u7684\u3002\u7531\u4e8e\u547d\u4ee4\u884c\u7684\u5f3a\u5927\u80fd\u529b\uff0cRUN \u6307\u4ee4\u5728\u5b9a\u5236\u955c\u50cf\u65f6\u662f\u6700\u5e38\u7528\u7684\u6307\u4ee4\u4e4b\u4e00\u3002\u5176\u683c\u5f0f\u6709\u4e24\u79cd\uff1a shell \u683c\u5f0f\uff1aRUN <\u547d\u4ee4>\uff0c\u5c31\u50cf\u76f4\u63a5\u5728\u547d\u4ee4\u884c\u4e2d\u8f93\u5165\u7684\u547d\u4ee4\u4e00\u6837\u3002\u521a\u624d\u5199\u7684 Dockerfile \u4e2d\u7684 RUN \u6307\u4ee4\u5c31\u662f\u8fd9\u79cd\u683c\u5f0f\u3002 RUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html exec \u683c\u5f0f\uff1aRUN [\"\u53ef\u6267\u884c\u6587\u4ef6\", \"\u53c2\u65701\", \"\u53c2\u65702\"]\uff0c\u8fd9\u66f4\u50cf\u662f\u51fd\u6570\u8c03\u7528\u4e2d\u7684\u683c\u5f0f\u3002 \u65e2\u7136 RUN \u5c31\u50cf Shell \u811a\u672c\u4e00\u6837\u53ef\u4ee5\u6267\u884c\u547d\u4ee4\uff0c\u90a3\u4e48\u6211\u4eec\u662f\u5426\u5c31\u53ef\u4ee5\u50cf Shell \u811a\u672c\u4e00\u6837\u628a\u6bcf\u4e2a\u547d\u4ee4\u5bf9\u5e94\u4e00\u4e2a RUN \u5462\uff1f\u6bd4\u5982\u8fd9\u6837\uff1a FROM debian:stretch RUN apt-get update RUN apt-get install -y gcc libc6-dev make wget RUN wget -O redis.tar.gz \"http://download.redis.io/releases/redis-5.0.3.tar.gz\" RUN mkdir -p /usr/src/redis RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 RUN make -C /usr/src/redis RUN make -C /usr/src/redis install \u4e4b\u524d\u8bf4\u8fc7\uff0cDockerfile \u4e2d\u6bcf\u4e00\u4e2a\u6307\u4ee4\u90fd\u4f1a\u5efa\u7acb\u4e00\u5c42\uff0cRUN \u4e5f\u4e0d\u4f8b\u5916\u3002\u6bcf\u4e00\u4e2a RUN \u7684\u884c\u4e3a\uff0c\u5c31\u548c\u521a\u624d\u6211\u4eec\u624b\u5de5\u5efa\u7acb\u955c\u50cf\u7684\u8fc7\u7a0b\u4e00\u6837\uff1a\u65b0\u5efa\u7acb\u4e00\u5c42\uff0c\u5728\u5176\u4e0a\u6267\u884c\u8fd9\u4e9b\u547d\u4ee4\uff0c\u6267\u884c\u7ed3\u675f\u540e\uff0ccommit \u8fd9\u4e00\u5c42\u7684\u4fee\u6539\uff0c\u6784\u6210\u65b0\u7684\u955c\u50cf\u3002 \u800c\u4e0a\u9762\u7684\u8fd9\u79cd\u5199\u6cd5\uff0c\u521b\u5efa\u4e86 7 \u5c42\u955c\u50cf\u3002\u8fd9\u662f\u5b8c\u5168\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u800c\u4e14\u5f88\u591a\u8fd0\u884c\u65f6\u4e0d\u9700\u8981\u7684\u4e1c\u897f\uff0c\u90fd\u88ab\u88c5\u8fdb\u4e86\u955c\u50cf\u91cc\uff0c\u6bd4\u5982\u7f16\u8bd1\u73af\u5883\u3001\u66f4\u65b0\u7684\u8f6f\u4ef6\u5305\u7b49\u7b49\u3002\u7ed3\u679c\u5c31\u662f\u4ea7\u751f\u975e\u5e38\u81c3\u80bf\u3001\u975e\u5e38\u591a\u5c42\u7684\u955c\u50cf\uff0c\u4e0d\u4ec5\u4ec5\u589e\u52a0\u4e86\u6784\u5efa\u90e8\u7f72\u7684\u65f6\u95f4\uff0c\u4e5f\u5f88\u5bb9\u6613\u51fa\u9519\u3002 \u8fd9\u662f\u5f88\u591a\u521d\u5b66 Docker \u7684\u4eba\u5e38\u72af\u7684\u4e00\u4e2a\u9519\u8bef\u3002 Union FS \u662f\u6709\u6700\u5927\u5c42\u6570\u9650\u5236\u7684\uff0c\u6bd4\u5982 AUFS\uff0c\u66fe\u7ecf\u662f\u6700\u5927\u4e0d\u5f97\u8d85\u8fc7 42 \u5c42\uff0c\u73b0\u5728\u662f\u4e0d\u5f97\u8d85\u8fc7 127 \u5c42\u3002 \u4e0a\u9762\u7684 Dockerfile \u6b63\u786e\u7684\u5199\u6cd5\u5e94\u8be5\u662f\u8fd9\u6837\uff1a FROM debian:stretch RUN buildDeps='gcc libc6-dev make wget' \\ && apt-get update \\ && apt-get install -y $buildDeps \\ && wget -O redis.tar.gz \"http://download.redis.io/releases/redis-5.0.3.tar.gz\" \\ && mkdir -p /usr/src/redis \\ && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\ && make -C /usr/src/redis \\ && make -C /usr/src/redis install \\ && rm -rf /var/lib/apt/lists/* \\ && rm redis.tar.gz \\ && rm -r /usr/src/redis \\ && apt-get purge -y --auto-remove $buildDeps \u9996\u5148\uff0c\u4e4b\u524d\u6240\u6709\u7684\u547d\u4ee4\u53ea\u6709\u4e00\u4e2a\u76ee\u7684\uff0c\u5c31\u662f\u7f16\u8bd1\u3001\u5b89\u88c5 redis \u53ef\u6267\u884c\u6587\u4ef6\u3002\u56e0\u6b64\u6ca1\u6709\u5fc5\u8981\u5efa\u7acb\u5f88\u591a\u5c42\uff0c\u8fd9\u53ea\u662f\u4e00\u5c42\u7684\u4e8b\u60c5\u3002\u56e0\u6b64\uff0c\u8fd9\u91cc\u6ca1\u6709\u4f7f\u7528\u5f88\u591a\u4e2a RUN \u5bf9\u4e00\u4e00\u5bf9\u5e94\u4e0d\u540c\u7684\u547d\u4ee4\uff0c\u800c\u662f\u4ec5\u4ec5\u4f7f\u7528\u4e00\u4e2a RUN \u6307\u4ee4\uff0c\u5e76\u4f7f\u7528 && \u5c06\u5404\u4e2a\u6240\u9700\u547d\u4ee4\u4e32\u8054\u8d77\u6765\u3002\u5c06\u4e4b\u524d\u7684 7 \u5c42\uff0c\u7b80\u5316\u4e3a\u4e86 1 \u5c42\u3002\u5728\u64b0\u5199 Dockerfile \u7684\u65f6\u5019\uff0c \u8981\u7ecf\u5e38\u63d0\u9192\u81ea\u5df1\uff0c\u8fd9\u5e76\u4e0d\u662f\u5728\u5199 Shell \u811a\u672c\uff0c\u800c\u662f\u5728\u5b9a\u4e49\u6bcf\u4e00\u5c42\u8be5\u5982\u4f55\u6784\u5efa \u3002 \u5e76\u4e14\uff0c\u8fd9\u91cc\u4e3a\u4e86\u683c\u5f0f\u5316\u8fd8\u8fdb\u884c\u4e86\u6362\u884c\u3002Dockerfile \u652f\u6301 Shell \u7c7b\u7684\u884c\u5c3e\u6dfb\u52a0 \\ \u7684\u547d\u4ee4\u6362\u884c\u65b9\u5f0f\uff0c\u4ee5\u53ca\u884c\u9996 # \u8fdb\u884c\u6ce8\u91ca\u7684\u683c\u5f0f\u3002\u826f\u597d\u7684\u683c\u5f0f\uff0c\u6bd4\u5982\u6362\u884c\u3001\u7f29\u8fdb\u3001\u6ce8\u91ca\u7b49\uff0c\u4f1a\u8ba9\u7ef4\u62a4\u3001\u6392\u969c\u66f4\u4e3a\u5bb9\u6613\uff0c\u8fd9\u662f\u4e00\u4e2a\u6bd4\u8f83\u597d\u7684\u4e60\u60ef\u3002 \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u770b\u5230\u8fd9\u4e00\u7ec4\u547d\u4ee4\u7684\u6700\u540e\u6dfb\u52a0\u4e86\u6e05\u7406\u5de5\u4f5c\u7684\u547d\u4ee4\uff0c\u5220\u9664\u4e86\u4e3a\u4e86\u7f16\u8bd1\u6784\u5efa\u6240\u9700\u8981\u7684\u8f6f\u4ef6\uff0c\u6e05\u7406\u4e86\u6240\u6709\u4e0b\u8f7d\u3001\u5c55\u5f00\u7684\u6587\u4ef6\uff0c\u5e76\u4e14\u8fd8\u6e05\u7406\u4e86 apt \u7f13\u5b58\u6587\u4ef6\u3002\u8fd9\u662f\u5f88\u91cd\u8981\u7684\u4e00\u6b65\uff0c\u6211\u4eec\u4e4b\u524d\u8bf4\u8fc7\uff0c\u955c\u50cf\u662f\u591a\u5c42\u5b58\u50a8\uff0c\u6bcf\u4e00\u5c42\u7684\u4e1c\u897f\u5e76\u4e0d\u4f1a\u5728\u4e0b\u4e00\u5c42\u88ab\u5220\u9664\uff0c\u4f1a\u4e00\u76f4\u8ddf\u968f\u7740\u955c\u50cf\u3002\u56e0\u6b64\u955c\u50cf\u6784\u5efa\u65f6\uff0c\u4e00\u5b9a\u8981\u786e\u4fdd\u6bcf\u4e00\u5c42\u53ea\u6dfb\u52a0\u771f\u6b63\u9700\u8981\u6dfb\u52a0\u7684\u4e1c\u897f\uff0c\u4efb\u4f55\u65e0\u5173\u7684\u4e1c\u897f\u90fd\u5e94\u8be5\u6e05\u7406\u6389\u3002 \u5f88\u591a\u4eba\u5236\u4f5c\u51fa\u4e86\u5f88\u81c3\u80bf\u7684\u955c\u50cf\u7684\u539f\u56e0\u4e4b\u4e00\uff0c\u5c31\u662f\u5fd8\u8bb0\u4e86\u6bcf\u4e00\u5c42\u6784\u5efa\u7684\u6700\u540e\u4e00\u5b9a\u8981\u6e05\u7406\u6389\u65e0\u5173\u6587\u4ef6\u3002","title":"\u7b2c\u4e00\u7bc7 dockerfile\u6700\u4f73\u5b9e\u8df5"},{"location":"chapter_10/1_dockerfile_best_practice/#dockerfile","text":"\u8981\u4f7f\u7528 tag\uff0c\u4f46\u4e0d\u8981 latest\u3002 Debian \u633a\u597d\u7684\uff0c\u4e0d\u8981\u603b Ubuntu\u3002 apt-get update \u5728\u524d\uff0crm -rf /var/lib/apt/lists/* \u5728\u540e\u3002 yum install\uff0c\u4e0d\u5fd8 yum clean\u3002 \u591a RUN \u8981\u5408\u5e76\uff0c\u6765\u51cf\u5c11\u5c42\u6570\u3002 \u65e0\u7528\u7684\u8f6f\u4ef6\uff0c\u4e0d\u8981\u4e71\u5b89\u88c5\u3002 COPY \u653e\u6700\u540e\uff0c\u7f13\u5b58\u5f88\u5f00\u5fc3\u3002 \u5584\u7528 dockerignore\uff0c\u4e0d\u6d6a\u8d39\u4f20\u8f93\u3002 \u4e0d\u5fd8 MAINTAINER\uff0c\u8fd9\u90fd\u662f\u6211\u7684\u3002","title":"\u5199Dockerfile\u7684\u5c0f\u5efa\u8bae"},{"location":"chapter_10/1_dockerfile_best_practice/#1","text":"\u5982\u679c\u662f\u5355\u8fdb\u7a0b\u5bb9\u5668, \u5219\u76f4\u63a5\u4f7f\u7528\u4e1a\u52a1\u8fdb\u7a0b\u4f5c\u4e3a1\u53f7\u8fdb\u7a0b, \u4f8b\u5982uwsgi\u8fdb\u7a0b\u3001tomcat\u8fdb\u7a0b \u5982\u679c\u662f\u80d6\u5bb9\u5668, \u5219\u5efa\u8bae\u4f7f\u7528 tini \u4f5c\u4e3a\u5bb9\u5668\u51851\u53f7\u8fdb\u7a0b. tini\u7684\u4f18\u52bf: tini\u53ef\u4ee5\u907f\u514d\u5e94\u7528\u7a0b\u5e8f\u751f\u6210\u50f5\u5c38\u8fdb\u7a0b tini\u53ef\u4ee5\u5904\u7406Docker\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u7684\u7a0b\u5e8f\u7684\u4fe1\u53f7\uff0c\u4f8b\u5982\uff0c\u901a\u8fc7Tini\uff0c SIGTERM \u53ef\u4ee5\u7ec8\u6b62\u8fdb\u7a0b\uff0c\u4e0d\u9700\u8981\u4f60\u660e\u786e\u5b89\u88c5\u4e00\u4e2a\u4fe1\u53f7\u5904\u7406\u5668","title":"\u5173\u4e8e\u5bb9\u5668\u5185\u76841\u53f7\u8fdb\u7a0b"},{"location":"chapter_10/1_dockerfile_best_practice/#_1","text":"1\u3001 Use absolute WORKDIR. Problematic code: FROM busybox WORKDIR usr/src/app Correct code: FROM busybox WORKDIR /usr/src/app 2\u3001 Use WORKDIR to switch to a directory. Problematic code: FROM busybox RUN cd /usr/src/app && git clone git@github.com:lukasmartinelli/hadolint.git Correct code: FROM busybox RUN git clone git@github.com:lukasmartinelli/hadolint.git /usr/src/app 3\u3001 Do not use sudo as it leads to unpredictable behavior. Use a tool like gosu to enforce root. Problematic code: FROM busybox RUN sudo apt-get install Correct code: FROM busybox RUN apt-get install 4\u3001 Do not use apt-get upgrade or dist-upgrade. Problematic code: FROM debian RUN apt-get update && apt-get upgrade Correct code: FROM debian RUN apt-get update 5\u3001Using latest is prone to errors if the image will ever update. Pin the version explicitly to a release tag. Problematic code: FROM debian:latest or FROM debian Correct code: FROM debian:jessie 6\u3001 Pin versions in apt get install. \u5e76\u4e14\u8981\u5e26 -y\u53c2\u6570\uff0c pip\u4e5f\u4e00\u6837\u3002 Problematic code: FROM busybox RUN apt-get install python Correct code: FROM busybox RUN apt-get install -y python=2.7 7\u3001Delete the apt-get lists after installing something. Problematic code: RUN apt-get update && apt-get install -y python Correct code: RUN apt-get update && apt-get install -y python \\ && apt-get clean \\ && rm -rf /var/lib/apt/lists/* 8\u3001Use ADD for extracting archives into an image. 9\u3001Valid UNIX ports range from 0 to 65535. 10\u3001Provide an email adress or URL as maintainer. 11\u3001Use COPY instead of ADD for files and folders. 12\u3001Specify a maintainer of the Dockerfile. \u5e76 \u5199\u660e\u8054\u7cfb\u65b9\u5f0f","title":"\u8fd9\u91cc\u603b\u7ed3\u4e86\u4e00\u4e9b\u5c0f\u5efa\u8bae\uff1a"},{"location":"chapter_10/1_dockerfile_best_practice/#run","text":"RUN \u6307\u4ee4\u662f\u7528\u6765\u6267\u884c\u547d\u4ee4\u884c\u547d\u4ee4\u7684\u3002\u7531\u4e8e\u547d\u4ee4\u884c\u7684\u5f3a\u5927\u80fd\u529b\uff0cRUN \u6307\u4ee4\u5728\u5b9a\u5236\u955c\u50cf\u65f6\u662f\u6700\u5e38\u7528\u7684\u6307\u4ee4\u4e4b\u4e00\u3002\u5176\u683c\u5f0f\u6709\u4e24\u79cd\uff1a shell \u683c\u5f0f\uff1aRUN <\u547d\u4ee4>\uff0c\u5c31\u50cf\u76f4\u63a5\u5728\u547d\u4ee4\u884c\u4e2d\u8f93\u5165\u7684\u547d\u4ee4\u4e00\u6837\u3002\u521a\u624d\u5199\u7684 Dockerfile \u4e2d\u7684 RUN \u6307\u4ee4\u5c31\u662f\u8fd9\u79cd\u683c\u5f0f\u3002 RUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html exec \u683c\u5f0f\uff1aRUN [\"\u53ef\u6267\u884c\u6587\u4ef6\", \"\u53c2\u65701\", \"\u53c2\u65702\"]\uff0c\u8fd9\u66f4\u50cf\u662f\u51fd\u6570\u8c03\u7528\u4e2d\u7684\u683c\u5f0f\u3002 \u65e2\u7136 RUN \u5c31\u50cf Shell \u811a\u672c\u4e00\u6837\u53ef\u4ee5\u6267\u884c\u547d\u4ee4\uff0c\u90a3\u4e48\u6211\u4eec\u662f\u5426\u5c31\u53ef\u4ee5\u50cf Shell \u811a\u672c\u4e00\u6837\u628a\u6bcf\u4e2a\u547d\u4ee4\u5bf9\u5e94\u4e00\u4e2a RUN \u5462\uff1f\u6bd4\u5982\u8fd9\u6837\uff1a FROM debian:stretch RUN apt-get update RUN apt-get install -y gcc libc6-dev make wget RUN wget -O redis.tar.gz \"http://download.redis.io/releases/redis-5.0.3.tar.gz\" RUN mkdir -p /usr/src/redis RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 RUN make -C /usr/src/redis RUN make -C /usr/src/redis install \u4e4b\u524d\u8bf4\u8fc7\uff0cDockerfile \u4e2d\u6bcf\u4e00\u4e2a\u6307\u4ee4\u90fd\u4f1a\u5efa\u7acb\u4e00\u5c42\uff0cRUN \u4e5f\u4e0d\u4f8b\u5916\u3002\u6bcf\u4e00\u4e2a RUN \u7684\u884c\u4e3a\uff0c\u5c31\u548c\u521a\u624d\u6211\u4eec\u624b\u5de5\u5efa\u7acb\u955c\u50cf\u7684\u8fc7\u7a0b\u4e00\u6837\uff1a\u65b0\u5efa\u7acb\u4e00\u5c42\uff0c\u5728\u5176\u4e0a\u6267\u884c\u8fd9\u4e9b\u547d\u4ee4\uff0c\u6267\u884c\u7ed3\u675f\u540e\uff0ccommit \u8fd9\u4e00\u5c42\u7684\u4fee\u6539\uff0c\u6784\u6210\u65b0\u7684\u955c\u50cf\u3002 \u800c\u4e0a\u9762\u7684\u8fd9\u79cd\u5199\u6cd5\uff0c\u521b\u5efa\u4e86 7 \u5c42\u955c\u50cf\u3002\u8fd9\u662f\u5b8c\u5168\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u800c\u4e14\u5f88\u591a\u8fd0\u884c\u65f6\u4e0d\u9700\u8981\u7684\u4e1c\u897f\uff0c\u90fd\u88ab\u88c5\u8fdb\u4e86\u955c\u50cf\u91cc\uff0c\u6bd4\u5982\u7f16\u8bd1\u73af\u5883\u3001\u66f4\u65b0\u7684\u8f6f\u4ef6\u5305\u7b49\u7b49\u3002\u7ed3\u679c\u5c31\u662f\u4ea7\u751f\u975e\u5e38\u81c3\u80bf\u3001\u975e\u5e38\u591a\u5c42\u7684\u955c\u50cf\uff0c\u4e0d\u4ec5\u4ec5\u589e\u52a0\u4e86\u6784\u5efa\u90e8\u7f72\u7684\u65f6\u95f4\uff0c\u4e5f\u5f88\u5bb9\u6613\u51fa\u9519\u3002 \u8fd9\u662f\u5f88\u591a\u521d\u5b66 Docker \u7684\u4eba\u5e38\u72af\u7684\u4e00\u4e2a\u9519\u8bef\u3002 Union FS \u662f\u6709\u6700\u5927\u5c42\u6570\u9650\u5236\u7684\uff0c\u6bd4\u5982 AUFS\uff0c\u66fe\u7ecf\u662f\u6700\u5927\u4e0d\u5f97\u8d85\u8fc7 42 \u5c42\uff0c\u73b0\u5728\u662f\u4e0d\u5f97\u8d85\u8fc7 127 \u5c42\u3002 \u4e0a\u9762\u7684 Dockerfile \u6b63\u786e\u7684\u5199\u6cd5\u5e94\u8be5\u662f\u8fd9\u6837\uff1a FROM debian:stretch RUN buildDeps='gcc libc6-dev make wget' \\ && apt-get update \\ && apt-get install -y $buildDeps \\ && wget -O redis.tar.gz \"http://download.redis.io/releases/redis-5.0.3.tar.gz\" \\ && mkdir -p /usr/src/redis \\ && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\ && make -C /usr/src/redis \\ && make -C /usr/src/redis install \\ && rm -rf /var/lib/apt/lists/* \\ && rm redis.tar.gz \\ && rm -r /usr/src/redis \\ && apt-get purge -y --auto-remove $buildDeps \u9996\u5148\uff0c\u4e4b\u524d\u6240\u6709\u7684\u547d\u4ee4\u53ea\u6709\u4e00\u4e2a\u76ee\u7684\uff0c\u5c31\u662f\u7f16\u8bd1\u3001\u5b89\u88c5 redis \u53ef\u6267\u884c\u6587\u4ef6\u3002\u56e0\u6b64\u6ca1\u6709\u5fc5\u8981\u5efa\u7acb\u5f88\u591a\u5c42\uff0c\u8fd9\u53ea\u662f\u4e00\u5c42\u7684\u4e8b\u60c5\u3002\u56e0\u6b64\uff0c\u8fd9\u91cc\u6ca1\u6709\u4f7f\u7528\u5f88\u591a\u4e2a RUN \u5bf9\u4e00\u4e00\u5bf9\u5e94\u4e0d\u540c\u7684\u547d\u4ee4\uff0c\u800c\u662f\u4ec5\u4ec5\u4f7f\u7528\u4e00\u4e2a RUN \u6307\u4ee4\uff0c\u5e76\u4f7f\u7528 && \u5c06\u5404\u4e2a\u6240\u9700\u547d\u4ee4\u4e32\u8054\u8d77\u6765\u3002\u5c06\u4e4b\u524d\u7684 7 \u5c42\uff0c\u7b80\u5316\u4e3a\u4e86 1 \u5c42\u3002\u5728\u64b0\u5199 Dockerfile \u7684\u65f6\u5019\uff0c \u8981\u7ecf\u5e38\u63d0\u9192\u81ea\u5df1\uff0c\u8fd9\u5e76\u4e0d\u662f\u5728\u5199 Shell \u811a\u672c\uff0c\u800c\u662f\u5728\u5b9a\u4e49\u6bcf\u4e00\u5c42\u8be5\u5982\u4f55\u6784\u5efa \u3002 \u5e76\u4e14\uff0c\u8fd9\u91cc\u4e3a\u4e86\u683c\u5f0f\u5316\u8fd8\u8fdb\u884c\u4e86\u6362\u884c\u3002Dockerfile \u652f\u6301 Shell \u7c7b\u7684\u884c\u5c3e\u6dfb\u52a0 \\ \u7684\u547d\u4ee4\u6362\u884c\u65b9\u5f0f\uff0c\u4ee5\u53ca\u884c\u9996 # \u8fdb\u884c\u6ce8\u91ca\u7684\u683c\u5f0f\u3002\u826f\u597d\u7684\u683c\u5f0f\uff0c\u6bd4\u5982\u6362\u884c\u3001\u7f29\u8fdb\u3001\u6ce8\u91ca\u7b49\uff0c\u4f1a\u8ba9\u7ef4\u62a4\u3001\u6392\u969c\u66f4\u4e3a\u5bb9\u6613\uff0c\u8fd9\u662f\u4e00\u4e2a\u6bd4\u8f83\u597d\u7684\u4e60\u60ef\u3002 \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u770b\u5230\u8fd9\u4e00\u7ec4\u547d\u4ee4\u7684\u6700\u540e\u6dfb\u52a0\u4e86\u6e05\u7406\u5de5\u4f5c\u7684\u547d\u4ee4\uff0c\u5220\u9664\u4e86\u4e3a\u4e86\u7f16\u8bd1\u6784\u5efa\u6240\u9700\u8981\u7684\u8f6f\u4ef6\uff0c\u6e05\u7406\u4e86\u6240\u6709\u4e0b\u8f7d\u3001\u5c55\u5f00\u7684\u6587\u4ef6\uff0c\u5e76\u4e14\u8fd8\u6e05\u7406\u4e86 apt \u7f13\u5b58\u6587\u4ef6\u3002\u8fd9\u662f\u5f88\u91cd\u8981\u7684\u4e00\u6b65\uff0c\u6211\u4eec\u4e4b\u524d\u8bf4\u8fc7\uff0c\u955c\u50cf\u662f\u591a\u5c42\u5b58\u50a8\uff0c\u6bcf\u4e00\u5c42\u7684\u4e1c\u897f\u5e76\u4e0d\u4f1a\u5728\u4e0b\u4e00\u5c42\u88ab\u5220\u9664\uff0c\u4f1a\u4e00\u76f4\u8ddf\u968f\u7740\u955c\u50cf\u3002\u56e0\u6b64\u955c\u50cf\u6784\u5efa\u65f6\uff0c\u4e00\u5b9a\u8981\u786e\u4fdd\u6bcf\u4e00\u5c42\u53ea\u6dfb\u52a0\u771f\u6b63\u9700\u8981\u6dfb\u52a0\u7684\u4e1c\u897f\uff0c\u4efb\u4f55\u65e0\u5173\u7684\u4e1c\u897f\u90fd\u5e94\u8be5\u6e05\u7406\u6389\u3002 \u5f88\u591a\u4eba\u5236\u4f5c\u51fa\u4e86\u5f88\u81c3\u80bf\u7684\u955c\u50cf\u7684\u539f\u56e0\u4e4b\u4e00\uff0c\u5c31\u662f\u5fd8\u8bb0\u4e86\u6bcf\u4e00\u5c42\u6784\u5efa\u7684\u6700\u540e\u4e00\u5b9a\u8981\u6e05\u7406\u6389\u65e0\u5173\u6587\u4ef6\u3002","title":"RUN\u547d\u4ee4"},{"location":"chapter_10/2_benefits_of_containerization/","text":"\u5bb9\u5668\u5316\u7684\u597d\u5904 \u5bb9\u5668\u90e8\u7f72\u65f6\u4ee3\uff1a \u5bb9\u5668\u7c7b\u4f3c\u4e8e VM\uff0c\u4f46\u662f\u5b83\u4eec\u5177\u6709\u88ab\u653e\u5bbd\u7684\u9694\u79bb\u5c5e\u6027\uff0c\u53ef\u4ee5\u5728\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u5171\u4eab\u64cd\u4f5c\u7cfb\u7edf\uff08OS\uff09\u3002 \u56e0\u6b64\uff0c\u5bb9\u5668\u88ab\u8ba4\u4e3a\u662f\u8f7b\u91cf\u7ea7\u7684\u3002\u5bb9\u5668\u4e0e VM \u7c7b\u4f3c\uff0c\u5177\u6709\u81ea\u5df1\u7684\u6587\u4ef6\u7cfb\u7edf\u3001CPU\u3001\u5185\u5b58\u3001\u8fdb\u7a0b\u7a7a\u95f4\u7b49\u3002 \u7531\u4e8e\u5b83\u4eec\u4e0e\u57fa\u7840\u67b6\u6784\u5206\u79bb\uff0c\u56e0\u6b64\u53ef\u4ee5\u8de8\u4e91\u548c OS \u53d1\u884c\u7248\u672c\u8fdb\u884c\u79fb\u690d\u3002 \u5bb9\u5668\u56e0\u5177\u6709\u8bb8\u591a\u4f18\u52bf\u800c\u53d8\u5f97\u6d41\u884c\u8d77\u6765\u3002\u4e0b\u9762\u5217\u51fa\u7684\u662f\u5bb9\u5668\u7684\u4e00\u4e9b\u597d\u5904\uff1a \u654f\u6377\u5e94\u7528\u7a0b\u5e8f\u7684\u521b\u5efa\u548c\u90e8\u7f72\uff1a\u4e0e\u4f7f\u7528 VM \u955c\u50cf\u76f8\u6bd4\uff0c\u63d0\u9ad8\u4e86\u5bb9\u5668\u955c\u50cf\u521b\u5efa\u7684\u7b80\u4fbf\u6027\u548c\u6548\u7387\u3002 \u6301\u7eed\u5f00\u53d1\u3001\u96c6\u6210\u548c\u90e8\u7f72\uff1a\u901a\u8fc7\u5feb\u901f\u7b80\u5355\u7684\u56de\u6eda\uff08\u7531\u4e8e\u955c\u50cf\u4e0d\u53ef\u53d8\u6027\uff09\uff0c\u652f\u6301\u53ef\u9760\u4e14\u9891\u7e41\u7684 \u5bb9\u5668\u955c\u50cf\u6784\u5efa\u548c\u90e8\u7f72\u3002 \u5173\u6ce8\u5f00\u53d1\u4e0e\u8fd0\u7ef4\u7684\u5206\u79bb\uff1a\u5728\u6784\u5efa/\u53d1\u5e03\u65f6\u800c\u4e0d\u662f\u5728\u90e8\u7f72\u65f6\u521b\u5efa\u5e94\u7528\u7a0b\u5e8f\u5bb9\u5668\u955c\u50cf\uff0c \u4ece\u800c\u5c06\u5e94\u7528\u7a0b\u5e8f\u4e0e\u57fa\u7840\u67b6\u6784\u5206\u79bb\u3002 \u53ef\u89c2\u5bdf\u6027\uff1a\u4e0d\u4ec5\u53ef\u4ee5\u663e\u793a\u64cd\u4f5c\u7cfb\u7edf\u7ea7\u522b\u7684\u4fe1\u606f\u548c\u6307\u6807\uff0c\u8fd8\u53ef\u4ee5\u663e\u793a\u5e94\u7528\u7a0b\u5e8f\u7684\u8fd0\u884c\u72b6\u51b5\u548c\u5176\u4ed6\u6307\u6807\u4fe1\u53f7\u3002 \u8de8\u5f00\u53d1\u3001\u6d4b\u8bd5\u548c\u751f\u4ea7\u7684\u73af\u5883\u4e00\u81f4\u6027\uff1a\u5728\u4fbf\u643a\u5f0f\u8ba1\u7b97\u673a\u4e0a\u4e0e\u5728\u4e91\u4e2d\u76f8\u540c\u5730\u8fd0\u884c\u3002 \u8de8\u4e91\u548c\u64cd\u4f5c\u7cfb\u7edf\u53d1\u884c\u7248\u672c\u7684\u53ef\u79fb\u690d\u6027\uff1a\u53ef\u5728 Ubuntu\u3001RHEL\u3001CoreOS\u3001\u672c\u5730\u3001 Google Kubernetes Engine \u548c\u5176\u4ed6\u4efb\u4f55\u5730\u65b9\u8fd0\u884c\u3002 \u4ee5\u5e94\u7528\u7a0b\u5e8f\u4e3a\u4e2d\u5fc3\u7684\u7ba1\u7406\uff1a\u63d0\u9ad8\u62bd\u8c61\u7ea7\u522b\uff0c\u4ece\u5728\u865a\u62df\u786c\u4ef6\u4e0a\u8fd0\u884c OS \u5230\u4f7f\u7528\u903b\u8f91\u8d44\u6e90\u5728 OS \u4e0a\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u3002 \u677e\u6563\u8026\u5408\u3001\u5206\u5e03\u5f0f\u3001\u5f39\u6027\u3001\u89e3\u653e\u7684\u5fae\u670d\u52a1\uff1a\u5e94\u7528\u7a0b\u5e8f\u88ab\u5206\u89e3\u6210\u8f83\u5c0f\u7684\u72ec\u7acb\u90e8\u5206\uff0c \u5e76\u4e14\u53ef\u4ee5\u52a8\u6001\u90e8\u7f72\u548c\u7ba1\u7406 - \u800c\u4e0d\u662f\u5728\u4e00\u53f0\u5927\u578b\u5355\u673a\u4e0a\u6574\u4f53\u8fd0\u884c\u3002 \u8d44\u6e90\u9694\u79bb\uff1a\u53ef\u9884\u6d4b\u7684\u5e94\u7528\u7a0b\u5e8f\u6027\u80fd\u3002 \u8d44\u6e90\u5229\u7528\uff1a\u9ad8\u6548\u7387\u548c\u9ad8\u5bc6\u5ea6\u3002 \u5bb9\u5668\u5316\u6280\u672f\u7684\u7279\u70b9 \u53ef\u79fb\u690d\u6027\uff1a\u4e0d\u4f9d\u8d56\u5177\u4f53\u7684\u64cd\u4f5c\u7cfb\u7edf\u6216\u4e91\u5e73\u53f0\uff0c\u6bd4\u5982\u5728\u963f\u91cc\u4e91\u6216\u817e\u8baf\u4e91\u76f4\u63a5\u968f\u610f\u8fc1\u79fb\u3002 \u5360\u5730\u5c0f\uff1a\u5bb9\u5668\u53ea\u9700\u8981\u5176\u5e94\u7528\u7a0b\u5e8f\u4ee5\u53ca\u5b83\u9700\u8981\u8fd0\u884c\u7684\u6240\u6709\u5bb9\u5668\u548c\u5e93\u7684\u4f9d\u8d56\u6e05\u5355\uff0c\u4e0d\u9700\u8981\u5c06\u6240\u6709\u7684\u4f9d\u8d56\u5e93\u90fd\u6253\u5305\u5728\u4e00\u8d77\u3002 \u5171\u4eab bin \u548c lib\uff1a\u4e0d\u540c\u7684\u5bb9\u5668\u53ef\u4ee5\u5171\u4eab bin \u548c lib\uff0c\u8fdb\u4e00\u6b65\u8282\u7701\u4e86\u7a7a\u95f4\u3002 \u5bb9\u5668\u5316\u89e3\u51b3\u7684\u6700\u5927\u95ee\u9898\u662f: \u8de8\u8d8a \u5f00\u53d1\u73af\u5883 \u3001 \u6d4b\u8bd5\u73af\u5883 \u3001 \u751f\u4ea7\u73af\u5883 \u7684\u73af\u5883\u4e00\u81f4\u6027\u95ee\u9898 \u5bb9\u5668\u7f16\u6392\u6280\u672f\u7684\u7279\u70b9 \u5bb9\u5668\u7f16\u6392\u6280\u672f\u89e3\u51b3\u7684\u6838\u5fc3\u95ee\u9898\uff1a \u53ef\u4ee5\u5c06\u4f17\u591a\u673a\u5668\u62bd\u8c61\uff0c\u5bf9\u5916\u5448\u73b0\u51fa\u4e00\u53f0\u8d85\u5927\u673a\u5668. Kuberenetes \u662f \u8d1f\u8d23\u81ea\u52a8\u5316\u8fd0\u7ef4\u7ba1\u7406\u591a\u4e2a Docker \u7a0b\u5e8f\u7684\u96c6\u7fa4,\u81ea\u52a8\u5b8c\u6210\u670d\u52a1\u7684\u90e8\u7f72\u3001\u66f4\u65b0\u3001\u5378\u8f7d\u548c\u6269\u5bb9\u3001\u7f29\u5bb9","title":"\u7b2c\u4e8c\u7bc7 \u5bb9\u5668\u5316\u7684\u597d\u5904"},{"location":"chapter_10/2_benefits_of_containerization/#_1","text":"\u5bb9\u5668\u90e8\u7f72\u65f6\u4ee3\uff1a \u5bb9\u5668\u7c7b\u4f3c\u4e8e VM\uff0c\u4f46\u662f\u5b83\u4eec\u5177\u6709\u88ab\u653e\u5bbd\u7684\u9694\u79bb\u5c5e\u6027\uff0c\u53ef\u4ee5\u5728\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u5171\u4eab\u64cd\u4f5c\u7cfb\u7edf\uff08OS\uff09\u3002 \u56e0\u6b64\uff0c\u5bb9\u5668\u88ab\u8ba4\u4e3a\u662f\u8f7b\u91cf\u7ea7\u7684\u3002\u5bb9\u5668\u4e0e VM \u7c7b\u4f3c\uff0c\u5177\u6709\u81ea\u5df1\u7684\u6587\u4ef6\u7cfb\u7edf\u3001CPU\u3001\u5185\u5b58\u3001\u8fdb\u7a0b\u7a7a\u95f4\u7b49\u3002 \u7531\u4e8e\u5b83\u4eec\u4e0e\u57fa\u7840\u67b6\u6784\u5206\u79bb\uff0c\u56e0\u6b64\u53ef\u4ee5\u8de8\u4e91\u548c OS \u53d1\u884c\u7248\u672c\u8fdb\u884c\u79fb\u690d\u3002 \u5bb9\u5668\u56e0\u5177\u6709\u8bb8\u591a\u4f18\u52bf\u800c\u53d8\u5f97\u6d41\u884c\u8d77\u6765\u3002\u4e0b\u9762\u5217\u51fa\u7684\u662f\u5bb9\u5668\u7684\u4e00\u4e9b\u597d\u5904\uff1a \u654f\u6377\u5e94\u7528\u7a0b\u5e8f\u7684\u521b\u5efa\u548c\u90e8\u7f72\uff1a\u4e0e\u4f7f\u7528 VM \u955c\u50cf\u76f8\u6bd4\uff0c\u63d0\u9ad8\u4e86\u5bb9\u5668\u955c\u50cf\u521b\u5efa\u7684\u7b80\u4fbf\u6027\u548c\u6548\u7387\u3002 \u6301\u7eed\u5f00\u53d1\u3001\u96c6\u6210\u548c\u90e8\u7f72\uff1a\u901a\u8fc7\u5feb\u901f\u7b80\u5355\u7684\u56de\u6eda\uff08\u7531\u4e8e\u955c\u50cf\u4e0d\u53ef\u53d8\u6027\uff09\uff0c\u652f\u6301\u53ef\u9760\u4e14\u9891\u7e41\u7684 \u5bb9\u5668\u955c\u50cf\u6784\u5efa\u548c\u90e8\u7f72\u3002 \u5173\u6ce8\u5f00\u53d1\u4e0e\u8fd0\u7ef4\u7684\u5206\u79bb\uff1a\u5728\u6784\u5efa/\u53d1\u5e03\u65f6\u800c\u4e0d\u662f\u5728\u90e8\u7f72\u65f6\u521b\u5efa\u5e94\u7528\u7a0b\u5e8f\u5bb9\u5668\u955c\u50cf\uff0c \u4ece\u800c\u5c06\u5e94\u7528\u7a0b\u5e8f\u4e0e\u57fa\u7840\u67b6\u6784\u5206\u79bb\u3002 \u53ef\u89c2\u5bdf\u6027\uff1a\u4e0d\u4ec5\u53ef\u4ee5\u663e\u793a\u64cd\u4f5c\u7cfb\u7edf\u7ea7\u522b\u7684\u4fe1\u606f\u548c\u6307\u6807\uff0c\u8fd8\u53ef\u4ee5\u663e\u793a\u5e94\u7528\u7a0b\u5e8f\u7684\u8fd0\u884c\u72b6\u51b5\u548c\u5176\u4ed6\u6307\u6807\u4fe1\u53f7\u3002 \u8de8\u5f00\u53d1\u3001\u6d4b\u8bd5\u548c\u751f\u4ea7\u7684\u73af\u5883\u4e00\u81f4\u6027\uff1a\u5728\u4fbf\u643a\u5f0f\u8ba1\u7b97\u673a\u4e0a\u4e0e\u5728\u4e91\u4e2d\u76f8\u540c\u5730\u8fd0\u884c\u3002 \u8de8\u4e91\u548c\u64cd\u4f5c\u7cfb\u7edf\u53d1\u884c\u7248\u672c\u7684\u53ef\u79fb\u690d\u6027\uff1a\u53ef\u5728 Ubuntu\u3001RHEL\u3001CoreOS\u3001\u672c\u5730\u3001 Google Kubernetes Engine \u548c\u5176\u4ed6\u4efb\u4f55\u5730\u65b9\u8fd0\u884c\u3002 \u4ee5\u5e94\u7528\u7a0b\u5e8f\u4e3a\u4e2d\u5fc3\u7684\u7ba1\u7406\uff1a\u63d0\u9ad8\u62bd\u8c61\u7ea7\u522b\uff0c\u4ece\u5728\u865a\u62df\u786c\u4ef6\u4e0a\u8fd0\u884c OS \u5230\u4f7f\u7528\u903b\u8f91\u8d44\u6e90\u5728 OS \u4e0a\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u3002 \u677e\u6563\u8026\u5408\u3001\u5206\u5e03\u5f0f\u3001\u5f39\u6027\u3001\u89e3\u653e\u7684\u5fae\u670d\u52a1\uff1a\u5e94\u7528\u7a0b\u5e8f\u88ab\u5206\u89e3\u6210\u8f83\u5c0f\u7684\u72ec\u7acb\u90e8\u5206\uff0c \u5e76\u4e14\u53ef\u4ee5\u52a8\u6001\u90e8\u7f72\u548c\u7ba1\u7406 - \u800c\u4e0d\u662f\u5728\u4e00\u53f0\u5927\u578b\u5355\u673a\u4e0a\u6574\u4f53\u8fd0\u884c\u3002 \u8d44\u6e90\u9694\u79bb\uff1a\u53ef\u9884\u6d4b\u7684\u5e94\u7528\u7a0b\u5e8f\u6027\u80fd\u3002 \u8d44\u6e90\u5229\u7528\uff1a\u9ad8\u6548\u7387\u548c\u9ad8\u5bc6\u5ea6\u3002","title":"\u5bb9\u5668\u5316\u7684\u597d\u5904"},{"location":"chapter_10/2_benefits_of_containerization/#_2","text":"\u53ef\u79fb\u690d\u6027\uff1a\u4e0d\u4f9d\u8d56\u5177\u4f53\u7684\u64cd\u4f5c\u7cfb\u7edf\u6216\u4e91\u5e73\u53f0\uff0c\u6bd4\u5982\u5728\u963f\u91cc\u4e91\u6216\u817e\u8baf\u4e91\u76f4\u63a5\u968f\u610f\u8fc1\u79fb\u3002 \u5360\u5730\u5c0f\uff1a\u5bb9\u5668\u53ea\u9700\u8981\u5176\u5e94\u7528\u7a0b\u5e8f\u4ee5\u53ca\u5b83\u9700\u8981\u8fd0\u884c\u7684\u6240\u6709\u5bb9\u5668\u548c\u5e93\u7684\u4f9d\u8d56\u6e05\u5355\uff0c\u4e0d\u9700\u8981\u5c06\u6240\u6709\u7684\u4f9d\u8d56\u5e93\u90fd\u6253\u5305\u5728\u4e00\u8d77\u3002 \u5171\u4eab bin \u548c lib\uff1a\u4e0d\u540c\u7684\u5bb9\u5668\u53ef\u4ee5\u5171\u4eab bin \u548c lib\uff0c\u8fdb\u4e00\u6b65\u8282\u7701\u4e86\u7a7a\u95f4\u3002 \u5bb9\u5668\u5316\u89e3\u51b3\u7684\u6700\u5927\u95ee\u9898\u662f: \u8de8\u8d8a \u5f00\u53d1\u73af\u5883 \u3001 \u6d4b\u8bd5\u73af\u5883 \u3001 \u751f\u4ea7\u73af\u5883 \u7684\u73af\u5883\u4e00\u81f4\u6027\u95ee\u9898","title":"\u5bb9\u5668\u5316\u6280\u672f\u7684\u7279\u70b9"},{"location":"chapter_10/2_benefits_of_containerization/#_3","text":"\u5bb9\u5668\u7f16\u6392\u6280\u672f\u89e3\u51b3\u7684\u6838\u5fc3\u95ee\u9898\uff1a \u53ef\u4ee5\u5c06\u4f17\u591a\u673a\u5668\u62bd\u8c61\uff0c\u5bf9\u5916\u5448\u73b0\u51fa\u4e00\u53f0\u8d85\u5927\u673a\u5668. Kuberenetes \u662f \u8d1f\u8d23\u81ea\u52a8\u5316\u8fd0\u7ef4\u7ba1\u7406\u591a\u4e2a Docker \u7a0b\u5e8f\u7684\u96c6\u7fa4,\u81ea\u52a8\u5b8c\u6210\u670d\u52a1\u7684\u90e8\u7f72\u3001\u66f4\u65b0\u3001\u5378\u8f7d\u548c\u6269\u5bb9\u3001\u7f29\u5bb9","title":"\u5bb9\u5668\u7f16\u6392\u6280\u672f\u7684\u7279\u70b9"},{"location":"chapter_10/3_docker_basic_concepts/","text":"\u5bb9\u5668\u6280\u672f\u4f9d\u8d56\u7684\u5e95\u5c42\u6280\u672f \u547d\u540d\u7a7a\u95f4 (Namespaces) \u5b9e\u73b0\u4e86\u5bb9\u5668\u95f4\u8d44\u6e90\u7684\u9694\u79bb \u63a7\u5236\u7ec4 (Control Groups) \u5bf9\u5171\u4eab\u8d44\u6e90\u8fdb\u884c\u9694\u79bb\u3001\u9650\u5236\u3001\u5ba1\u8ba1 \u8054\u5408\u6587\u4ef6\u7cfb\u7edf (Union File System) Linux \u865a\u62df\u7f51\u7edc\u652f\u6301\uff1a\u672c\u5730\u548c\u5bb9\u5668\u5185\u521b\u5efa\u865a\u62df\u63a5\u53e3 Linux \u652f\u6301\u7684 Namespace Linux \u652f\u6301 8 \u79cd\u8d44\u6e90\u7684 namespace \uff0c\u5206\u522b\u4e3a\uff1a Type Parameter Linux Version Mount namespaces CLONE_NEWNS Linux 2.4.19 UTS namespaces CLONE_NEWUTS Linux 2.6.19 IPC namespaces CLONE_NEWIPC Linux 2.6.19 PID namespaces CLONE_NEWPID Linux 2.6.24 Network namespaces CLONE_NEWNET Linux 2.6.24 USER namespaces CLONE_NEWUSER Linux 2.6.23 Cgroups CLONE_NEWCGROUP Linux 4.6 Time CLONE_NEWTIME Linux 5.6 Docker \u4e2d\u7684\u57fa\u672c\u6982\u5ff5 Docker \u5305\u62ec\u4e09\u4e2a\u57fa\u672c\u6982\u5ff5 \u955c\u50cf\uff08Image\uff09 \u5bb9\u5668\uff08Container\uff09 \u4ed3\u5e93\uff08Repository\uff09 \u955c\u50cf\u548c\u5bb9\u5668\u7684\u5173\u7cfb \u955c\u50cf\u548c\u5bb9\u5668\u7684\u5173\u7cfb\uff0c\u76f8\u5f53\u4e8e python \u4e2d\u7c7b\u548c\u5b9e\u4f8b\u7684\u5173\u7cfb\u3002 \u955c\u50cf\u662f\u9759\u6001\u7684\u6982\u5ff5\uff0c\u5bb9\u5668\u662f\u955c\u50cf\u7684\u8fd0\u884c\u5b9e\u4f8b\uff0c\u662f\u52a8\u6001\u7684\u6982\u5ff5\u3002 \u6709\u4e86 Docker \u4e86\uff0c\u4e3a\u5565\u8fd8\u8981\u6709 Kubernetes? \u5c3d\u7ba1 Docker \u4e3a\u5bb9\u5668\u5316\u7684\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u5f00\u653e\u6807\u51c6\uff0c\u4f46\u968f\u7740\u5bb9\u5668\u8d8a\u6765\u8d8a\u591a\u51fa\u73b0\u4e86\u4e00\u7cfb\u5217\u65b0\u95ee\u9898\uff1a \u5982\u4f55\u534f\u8c03\u548c\u8c03\u5ea6\u8fd9\u4e9b\u5bb9\u5668\uff1f \u5982\u4f55\u5728\u5347\u7ea7\u5e94\u7528\u7a0b\u5e8f\u65f6\u4e0d\u4f1a\u4e2d\u65ad\u670d\u52a1\uff1f \u5982\u4f55\u76d1\u89c6\u5e94\u7528\u7a0b\u5e8f\u7684\u8fd0\u884c\u72b6\u51b5\uff1f \u5982\u4f55\u6279\u91cf\u91cd\u65b0\u542f\u52a8\u5bb9\u5668\u91cc\u7684\u7a0b\u5e8f\uff1f \u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u9700\u8981\u5bb9\u5668\u7f16\u6392\u6280\u672f\uff0c\u53ef\u4ee5\u5c06\u4f17\u591a\u673a\u5668\u62bd\u8c61\uff0c\u5bf9\u5916\u5448\u73b0\u51fa\u4e00\u53f0\u8d85\u5927\u673a\u5668\u3002\u73b0\u5728\u4e1a\u754c\u6bd4\u8f83\u6d41\u884c\u7684\u6709\uff1aKubernetes\u3001Mesos\u3001Docker Swarm\u3002 Kubernetes \u878d\u5408\u4e86\u865a\u62df\u5316\u548c\u81ea\u52a8\u5316\u8fd0\u7ef4\u7ba1\u7406\uff0c\u662f\u591a\u4e3b\u673a\u9762\u5bf9\u9ad8\u5e76\u53d1\u7684\u4e00\u79cd\u5f88\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002","title":"\u7b2c\u4e09\u7bc7 \u4e00\u4e9b\u57fa\u7840\u6982\u5ff5"},{"location":"chapter_10/3_docker_basic_concepts/#_1","text":"\u547d\u540d\u7a7a\u95f4 (Namespaces) \u5b9e\u73b0\u4e86\u5bb9\u5668\u95f4\u8d44\u6e90\u7684\u9694\u79bb \u63a7\u5236\u7ec4 (Control Groups) \u5bf9\u5171\u4eab\u8d44\u6e90\u8fdb\u884c\u9694\u79bb\u3001\u9650\u5236\u3001\u5ba1\u8ba1 \u8054\u5408\u6587\u4ef6\u7cfb\u7edf (Union File System) Linux \u865a\u62df\u7f51\u7edc\u652f\u6301\uff1a\u672c\u5730\u548c\u5bb9\u5668\u5185\u521b\u5efa\u865a\u62df\u63a5\u53e3","title":"\u5bb9\u5668\u6280\u672f\u4f9d\u8d56\u7684\u5e95\u5c42\u6280\u672f"},{"location":"chapter_10/3_docker_basic_concepts/#linux-namespace","text":"Linux \u652f\u6301 8 \u79cd\u8d44\u6e90\u7684 namespace \uff0c\u5206\u522b\u4e3a\uff1a Type Parameter Linux Version Mount namespaces CLONE_NEWNS Linux 2.4.19 UTS namespaces CLONE_NEWUTS Linux 2.6.19 IPC namespaces CLONE_NEWIPC Linux 2.6.19 PID namespaces CLONE_NEWPID Linux 2.6.24 Network namespaces CLONE_NEWNET Linux 2.6.24 USER namespaces CLONE_NEWUSER Linux 2.6.23 Cgroups CLONE_NEWCGROUP Linux 4.6 Time CLONE_NEWTIME Linux 5.6","title":"Linux \u652f\u6301\u7684 Namespace"},{"location":"chapter_10/3_docker_basic_concepts/#docker","text":"Docker \u5305\u62ec\u4e09\u4e2a\u57fa\u672c\u6982\u5ff5 \u955c\u50cf\uff08Image\uff09 \u5bb9\u5668\uff08Container\uff09 \u4ed3\u5e93\uff08Repository\uff09","title":"Docker \u4e2d\u7684\u57fa\u672c\u6982\u5ff5"},{"location":"chapter_10/3_docker_basic_concepts/#_2","text":"\u955c\u50cf\u548c\u5bb9\u5668\u7684\u5173\u7cfb\uff0c\u76f8\u5f53\u4e8e python \u4e2d\u7c7b\u548c\u5b9e\u4f8b\u7684\u5173\u7cfb\u3002 \u955c\u50cf\u662f\u9759\u6001\u7684\u6982\u5ff5\uff0c\u5bb9\u5668\u662f\u955c\u50cf\u7684\u8fd0\u884c\u5b9e\u4f8b\uff0c\u662f\u52a8\u6001\u7684\u6982\u5ff5\u3002","title":"\u955c\u50cf\u548c\u5bb9\u5668\u7684\u5173\u7cfb"},{"location":"chapter_10/3_docker_basic_concepts/#docker-kubernetes","text":"\u5c3d\u7ba1 Docker \u4e3a\u5bb9\u5668\u5316\u7684\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u5f00\u653e\u6807\u51c6\uff0c\u4f46\u968f\u7740\u5bb9\u5668\u8d8a\u6765\u8d8a\u591a\u51fa\u73b0\u4e86\u4e00\u7cfb\u5217\u65b0\u95ee\u9898\uff1a \u5982\u4f55\u534f\u8c03\u548c\u8c03\u5ea6\u8fd9\u4e9b\u5bb9\u5668\uff1f \u5982\u4f55\u5728\u5347\u7ea7\u5e94\u7528\u7a0b\u5e8f\u65f6\u4e0d\u4f1a\u4e2d\u65ad\u670d\u52a1\uff1f \u5982\u4f55\u76d1\u89c6\u5e94\u7528\u7a0b\u5e8f\u7684\u8fd0\u884c\u72b6\u51b5\uff1f \u5982\u4f55\u6279\u91cf\u91cd\u65b0\u542f\u52a8\u5bb9\u5668\u91cc\u7684\u7a0b\u5e8f\uff1f \u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u9700\u8981\u5bb9\u5668\u7f16\u6392\u6280\u672f\uff0c\u53ef\u4ee5\u5c06\u4f17\u591a\u673a\u5668\u62bd\u8c61\uff0c\u5bf9\u5916\u5448\u73b0\u51fa\u4e00\u53f0\u8d85\u5927\u673a\u5668\u3002\u73b0\u5728\u4e1a\u754c\u6bd4\u8f83\u6d41\u884c\u7684\u6709\uff1aKubernetes\u3001Mesos\u3001Docker Swarm\u3002 Kubernetes \u878d\u5408\u4e86\u865a\u62df\u5316\u548c\u81ea\u52a8\u5316\u8fd0\u7ef4\u7ba1\u7406\uff0c\u662f\u591a\u4e3b\u673a\u9762\u5bf9\u9ad8\u5e76\u53d1\u7684\u4e00\u79cd\u5f88\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002","title":"\u6709\u4e86 Docker \u4e86\uff0c\u4e3a\u5565\u8fd8\u8981\u6709 Kubernetes?"},{"location":"chapter_10/4_kubernetes_basic_concepts/","text":"Kubernetes \u7684\u4e3b\u8981\u529f\u80fd \u4e3b\u8981\u529f\u80fd\u5305\u62ec: \u57fa\u4e8e\u5bb9\u5668\u7684\u5e94\u7528\u90e8\u7f72\u3001\u7ef4\u62a4\u548c\u6eda\u52a8\u5347\u7ea7 \u8d1f\u8f7d\u5747\u8861\u548c\u670d\u52a1\u53d1\u73b0 \u8de8\u673a\u5668\u548c\u8de8\u5730\u533a\u7684\u96c6\u7fa4\u8c03\u5ea6 \u81ea\u52a8\u4f38\u7f29 \u65e0\u72b6\u6001\u670d\u52a1\u548c\u6709\u72b6\u6001\u670d\u52a1 \u5e7f\u6cdb\u7684 Volume \u652f\u6301 \u63d2\u4ef6\u673a\u5236\u4fdd\u8bc1\u6269\u5c55\u6027 Master \u548c Node \u8282\u70b9 Master \u8d1f\u8d23\u7ba1\u7406\u6574\u4e2a\u96c6\u7fa4\u3002 Master \u534f\u8c03\u96c6\u7fa4\u4e2d\u7684\u6240\u6709\u6d3b\u52a8\uff0c\u4f8b\u5982\u8c03\u5ea6\u5e94\u7528\u3001\u7ef4\u62a4\u5e94\u7528\u7684\u6240\u9700\u72b6\u6001\u3001\u5e94\u7528\u6269\u5bb9\u4ee5\u53ca\u63a8\u51fa\u65b0\u7684\u66f4\u65b0\u3002 Node \u662f\u4e00\u4e2a\u865a\u62df\u673a\u6216\u8005\u7269\u7406\u673a\uff0c\u5b83\u5728 Kubernetes \u96c6\u7fa4\u4e2d\u5145\u5f53\u5de5\u4f5c\u673a\u5668\u7684\u89d2\u8272 \u6bcf\u4e2a Node \u90fd\u6709 Kubelet , \u5b83\u7ba1\u7406 Node \u800c\u4e14\u662f Node \u4e0e Master \u901a\u4fe1\u7684\u4ee3\u7406\u3002 Node \u8fd8\u5e94\u8be5\u5177\u6709\u7528\u4e8e\u5904\u7406\u5bb9\u5668\u64cd\u4f5c\u7684\u5de5\u5177\uff0c\u4f8b\u5982 Docker \u6216 rkt \u3002\u5904\u7406\u751f\u4ea7\u7ea7\u6d41\u91cf\u7684 Kubernetes \u96c6\u7fa4\u81f3\u5c11\u5e94\u5177\u6709\u4e09\u4e2a Node \u3002 Pod A Pod is the basic execution unit of a Kubernetes application. Each Pod represents a part of a workload that is running on your cluster. pod ,\u662f\u96c6\u7fa4\u5185\u7684\u4e00\u4e2a\u6700\u5c0f\u7684\u8fd0\u884c\u5b9e\u4f8b\u3001\u6700\u5c0f\u7684\u8c03\u5ea6\u5355\u4f4d\u3002 \u4e00\u4e2a pod \u662f\u5178\u578b\u7684\u53ef\u591a\u5e38\u4e00\u6982\u5ff5\uff0c\u4e00\u4e2a pod \u91cc\u53ef\u4ee5\u8fd0\u884c\u591a\u4e2a docker \u5bb9\u5668, \u4f46\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u5e38\u5e38\u662f\u4e00\u4e2a pod \u8fd0\u884c\u4e00\u4e2a docker \u5bb9\u5668 Pod \u662f\u4e00\u7ec4\u7d27\u5bc6\u5173\u8054\u7684\u5bb9\u5668\u96c6\u5408\uff0c\u652f\u6301\u591a\u4e2a\u5bb9\u5668\u5728\u4e00\u4e2a Pod \u4e2d\u5171\u4eab\u7f51\u7edc\u548c\u6587\u4ef6\u7cfb\u7edf\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fdb\u7a0b\u95f4\u901a\u4fe1\u548c\u6587\u4ef6\u5171\u4eab\u8fd9\u79cd\u7b80\u5355\u9ad8\u6548\u7684\u65b9\u5f0f\u5b8c\u6210\u670d\u52a1\u3002Pod \u662f Kubernetes \u8c03\u5ea6\u7684\u57fa\u672c\u5355\u4f4d\uff0cPod \u7684\u8bbe\u8ba1\u7406\u5ff5\u662f \u6bcf\u4e2a Pod \u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684 IP \u3002 Pod \u5177\u6709\u5982\u4e0b\u7279\u5f81\uff1a \u5305\u542b\u591a\u4e2a\u5171\u4eab IPC\u3001Network \u548c UTC Namespace \u7684\u5bb9\u5668\uff0c\u53ef\u76f4\u63a5\u901a\u8fc7 Localhost \u901a\u4fe1 \u6240\u6709 Pod \u5185\u5bb9\u5668\u90fd\u53ef\u4ee5\u8bbf\u95ee\u5171\u4eab\u7684 Volume\uff0c\u53ef\u4ee5\u8bbf\u95ee\u5171\u4eab\u6570\u636e \u4f18\u96c5\u7ec8\u6b62\uff1aPod \u5220\u9664\u7684\u65f6\u5019\u5148\u7ed9\u5176\u5185\u7684\u8fdb\u7a0b\u53d1\u9001 SIGTERM\uff0c\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4 (Grace Period) \u540e\u624d\u5f3a\u5236\u505c\u6b62\u4f9d\u7136\u8fd8\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b \u7279\u6743\u5bb9\u5668 (\u901a\u8fc7 SecurityContext \u914d\u7f6e) \u5177\u6709\u6539\u53d8\u7cfb\u7edf\u914d\u7f6e\u7684\u6743\u9650 ( \u5728\u7f51\u7edc\u63d2\u4ef6\u4e2d\u5927\u91cf\u5e94\u7528 ) \u652f\u6301\u4e09\u79cd\u91cd\u542f\u7b56\u7565\uff08restartPolicy\uff09\uff0c\u5206\u522b\u662f\uff1aAlways\u3001OnFailure\u3001Never \u652f\u6301\u4e09\u79cd\u955c\u50cf\u62c9\u53d6\u7b56\u7565\uff08imagePullPolicy \uff09\uff0c\u5206\u522b\u662f\uff1aAlways\u3001Never\u3001IfNotPresent \u8d44\u6e90\u9650\u5236\uff0cKubernetes \u901a\u8fc7 CGroup \u9650\u5236\u5bb9\u5668\u7684 CPU \u4ee5\u53ca\u5185\u5b58\u7b49\u8d44\u6e90\uff0c\u53ef\u4ee5\u8bbe\u7f6e Request \u4ee5\u53ca Limit \u503c \u5065\u5eb7\u68c0\u67e5\uff0c\u63d0\u4f9b\u4e24\u79cd\u5065\u5eb7\u68c0\u67e5\u63a2\u9488\uff0c\u5206\u522b\u662f LivenessProbe \u548c RedinessProbe\u3002\u524d\u8005\u7528\u4e8e\u63a2\u6d4b\u5bb9\u5668\u662f\u5426\u5b58\u6d3b\uff0c\u5982\u679c\u63a2\u6d4b\u5931\u8d25\uff0c\u5219\u6839\u636e\u91cd\u542f\u7b56\u7565\u8fdb\u884c\u91cd\u542f\u64cd\u4f5c\u3002\u540e\u8005\u7528\u4e8e\u68c0\u67e5\u5bb9\u5668\u72b6\u6001\u662f\u5426\u6b63\u5e38\uff0c\u5982\u679c\u68c0\u67e5\u5bb9\u5668\u72b6\u6001\u4e0d\u6b63\u5e38\uff0c\u5219\u8bf7\u6c42\u4e0d\u4f1a\u5230\u8fbe\u8be5 Pod Init Container \u5728\u6240\u6709\u5bb9\u5668\u8fd0\u884c\u4e4b\u524d\u6267\u884c\uff0c\u5e38\u7528\u6765\u521d\u59cb\u5316\u914d\u7f6e \u5bb9\u5668\u751f\u547d\u5468\u671f\u94a9\u5b50\u51fd\u6570\uff0c\u7528\u4e8e\u76d1\u542c\u5bb9\u5668\u751f\u547d\u5468\u671f\u7684\u7279\u5b9a\u4e8b\u4ef6\uff0c\u5e76\u5728\u4e8b\u4ef6\u53d1\u751f\u65f6\u6267\u884c\u5df2\u6ce8\u518c\u7684\u56de\u8c03\u51fd\u6570\uff0c\u652f\u6301\u4e24\u79cd\u94a9\u5b50\u51fd\u6570\uff1apostStart \u548c preStop\uff0c\u524d\u8005\u662f\u5728\u5bb9\u5668\u542f\u52a8\u540e\u6267\u884c\uff0c\u540e\u8005\u662f\u5728\u5bb9\u5668\u505c\u6b62\u524d\u6267\u884c 1 Init Containers Init Containers \u4ecb\u7ecd 1 \u4e00\u4e2a Pod \u53ef\u4ee5\u7531\u591a\u4e2a App Container \u548c\u4e00\u4e2a\u6216\u8005\u591a\u4e2a Init Container 2 Init Container \u548c App Container \u533a\u522b: 2.1 Init Container \u7684\u76ee\u6807\u5c31\u662f\u8fd0\u884c\u5230\u6b63\u5e38\u7ed3\u675f. \u5982\u679c\u4e00\u4e2a Init Container \u6ca1\u6709\u8fd0\u884c\u5230\u6b63\u5e38\u7ed3\u675f, \u9ed8\u8ba4\u60c5\u51b5\u4e0b Kubelet \u4f1a\u4e0d\u505c\u5730\u91cd\u542f\u8be5 Pod. 2.2 \u5982\u679c\u6709\u591a\u4e2a Init Container, \u5219\u5fc5\u987b\u524d\u4e00\u4e2a\u8fd0\u884c\u5b8c\u6210, \u624d\u80fd\u542f\u52a8\u4e0b\u4e00\u4e2a. 3 Init Container \u5e94\u7528\u573a\u666f(\u4e3b\u8981\u8fd8\u662f\u901a\u7528\u7c7b\u3001\u8fd0\u7ef4\u7c7b\u64cd\u4f5c\u96c6\u6210\u5230\u4e00\u8d77, \u548c\u4e1a\u52a1\u8fdb\u884c\u5206\u5272): 3.1 \u63a2\u6d4b\u4f9d\u8d56\u670d\u52a1(\u4e0b\u6e38)\u662f\u5426\u5df2\u7ecf Ready 3.2 \u5411\u670d\u52a1\u4e2d\u5fc3\u6ce8\u518c\u672c Pod 2 Container 2.1 Image \u62c9\u53d6\u7b56\u7565 IfNotPresent the image is pulled only if it is not already present locally. Always every time the kubelet launches a container, the kubelet queries the container image registry to resolve the name to an image digest. If the kubelet has a container image with that exact digest cached locally, the kubelet uses its cached image; otherwise, the kubelet pulls the image with the resolved digest, and uses that image to launch the container. Never the kubelet does not try fetching the image. If the image is somehow already present locally, the kubelet attempts to start the container; otherwise, startup fails. Image \u62c9\u53d6\u7b56\u7565 2.2 Container \u751f\u547d\u5468\u671f\u52fe\u5b50 PostStart PreStop Container \u751f\u547d\u5468\u671f\u52fe\u5b50 2.3 \u5173\u4e8e termination message 1 \u4e3a\u4ec0\u4e48\u9700\u8981 termination message\uff1f \u5f53 Pod \u5f02\u5e38\u9000\u51fa\u65f6, \u6211\u4eec\u9700\u8981\u52a0\u901f\u95ee\u9898\u5b9a\u4f4d. \u56e0\u6b64\u9700\u8981\u4e13\u95e8\u7684 termination message, \u76f4\u63a5\u4ece container \u8fd9\u8fb9\u4f20\u9012\u7ed9 Kubectl \u547d\u4ee4 2 \u600e\u4e48\u8bfb\u548c\u5199 termination message Writing and reading a termination message \u53c2\u8003 2 3 Pod and Container \u65e5\u5fd7 Pod and container logs Node Node \u662f Pod \u8fd0\u884c\u7684\u8f7d\u4f53\u3001\u53ef\u4ee5\u662f\u7269\u7406\u673a \u3001\u4e5f\u53ef\u4ee5\u662f\u865a\u62df\u673a . Node \u672c\u8d28\u4e0a\u4e0d\u662f Kubernetes \u6765\u521b\u5efa\u7684\uff0c Kubernetes \u53ea\u662f\u7ba1\u7406 Node \u4e0a\u7684\u8d44\u6e90\u3002\u4e3a\u4e86\u7ba1\u7406 Pod\uff0c\u6bcf\u4e2a Node \u8282\u70b9\u4e0a\u81f3\u5c11\u9700\u8981\u8fd0\u884c Container Runtime\uff08Docker\uff09 \u3001 Kubelet \u548c Kube-proxy \u670d\u52a1\u3002 Pod \u9009\u62e9 Node \u65f6\u5e38\u7528\u7684 2 \u5927\u7c7b\u6280\u80fd Node Selector(\u6839\u636e\u5bbf\u4e3b\u673a\u6807\u7b7e,\u9009\u62e9\u5408\u9002\u7684\u5bbf\u4e3b\u673a) Node \u8282\u70b9\u5e38\u7528\u7684\u64cd\u4f5c\u662f\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u8c03\u5ea6\u548c\u4e0d\u53ef\u8c03\u5ea6. Taint(\u6c61\u70b9) \u4f7f\u7528 kubectl taint \u547d\u4ee4\u53ef\u4ee5\u7ed9\u67d0\u4e2a Node \u8282\u70b9\u8bbe\u7f6e\u6c61\u70b9\uff0cNode \u88ab\u8bbe\u7f6e\u4e0a\u6c61\u70b9\u4e4b\u540e\u5c31\u548c Pod \u4e4b\u95f4\u5b58\u5728\u4e86\u4e00\u79cd\u76f8\u65a5\u7684\u5173\u7cfb\uff0c\u53ef\u4ee5\u8ba9 Node \u62d2\u7edd Pod \u7684\u8c03\u5ea6\u6267\u884c\uff0c\u751a\u81f3\u5c06 Node \u5df2\u7ecf\u5b58\u5728\u7684 Pod \u9a71\u9010\u51fa\u53bb\u3002\u6bcf\u4e2a\u6c61\u70b9\u7684\u7ec4\u6210\uff1akey=value:effect Namespace\uff08\u547d\u540d\u7a7a\u95f4\uff09 Kubernetes \u4e2d\u5bf9\u4e00\u7ec4\u8d44\u6e90\u548c\u5bf9\u8c61\u7684\u62bd\u8c61\u96c6\u5408\uff0c\u6bd4\u5982\u53ef\u4ee5\u7528\u6765\u5c06\u7cfb\u7edf\u5185\u90e8\u7684\u5bf9\u8c61\u5212\u5206\u4e3a\u4e0d\u540c\u7684\u9879\u76ee\u7ec4\u6216\u8005\u7528\u6237\u7ec4\u3002\u5e38\u89c1\u7684 Pod \u3001 Service \u3001 ReplicaSet \u548c Deployment \u3001 ConfigMap \u3001 Secret \u7b49\u90fd\u662f\u5c5e\u4e8e\u67d0\u4e00\u4e2a Namespace \u7684 (\u9ed8\u8ba4\u662f default)\uff0c\u800c Node , PersistentVolumes \u7b49\u5219\u4e0d\u5c5e\u4e8e\u4efb\u4f55 Namespace \u3002 \u4ec0\u4e48\u662f\u547d\u540d\u7a7a\u95f4\uff0c\u4e3a\u4ec0\u4e48\u5b83\u5f88\u91cd\u8981\uff1f \u547d\u540d\u7a7a\u95f4\uff08namespace\uff09\u662f Kubernetes \u63d0\u4f9b\u7684\u7ec4\u7ec7\u673a\u5236\uff0c\u7528\u4e8e\u7ed9\u96c6\u7fa4\u4e2d\u7684\u4efb\u4f55\u5bf9\u8c61\u7ec4\u8fdb\u884c\u5206\u7c7b\u3001\u7b5b\u9009\u548c\u7ba1\u7406\u3002\u6bcf\u4e00\u4e2a\u6dfb\u52a0\u5230 Kubernetes \u96c6\u7fa4\u7684\u5de5\u4f5c\u8d1f\u8f7d\u5fc5\u987b\u653e\u5728\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u3002 \u547d\u540d\u7a7a\u95f4\u4e3a\u96c6\u7fa4\u4e2d\u7684\u5bf9\u8c61\u540d\u79f0\u8d4b\u4e88\u4f5c\u7528\u57df\u3002\u867d\u7136\u5728\u547d\u540d\u7a7a\u95f4\u4e2d\u540d\u79f0\u5fc5\u987b\u662f\u552f\u4e00\u7684\uff0c\u4f46\u662f\u76f8\u540c\u7684\u540d\u79f0\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u4f7f\u7528\u3002\u8fd9\u5bf9\u4e8e\u67d0\u4e9b\u573a\u666f\u6765\u8bf4\u53ef\u80fd\u5e2e\u52a9\u5f88\u5927\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f7f\u7528\u547d\u540d\u7a7a\u95f4\u6765\u5212\u5206\u5e94\u7528\u7a0b\u5e8f\u751f\u547d\u5468\u671f\u73af\u5883\uff08\u5982\u5f00\u53d1\u3001staging\u3001\u751f\u4ea7\uff09\uff0c\u5219\u53ef\u4ee5\u5728\u6bcf\u4e2a\u73af\u5883\u4e2d\u7ef4\u62a4\u5229\u7528\u540c\u6837\u7684\u540d\u79f0\u7ef4\u62a4\u76f8\u540c\u5bf9\u8c61\u7684\u526f\u672c\u3002 \u547d\u540d\u7a7a\u95f4\u8fd8\u53ef\u4ee5\u8ba9\u7528\u6237\u8f7b\u677e\u5730\u5c06\u7b56\u7565\u5e94\u7528\u5230\u96c6\u7fa4\u7684\u5177\u4f53\u90e8\u5206\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49 ResourceQuota \u5bf9\u8c61\u6765\u63a7\u5236\u8d44\u6e90\u7684\u4f7f\u7528\uff0c\u8be5\u5bf9\u8c61\u5728\u6bcf\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u57fa\u7840\u4e0a\u8bbe\u7f6e\u4e86\u4f7f\u7528\u8d44\u6e90\u7684\u9650\u5236\u3002\u7c7b\u4f3c\u5730\uff0c\u5f53\u5728\u96c6\u7fa4\u4e0a\u4f7f\u7528\u652f\u6301\u7f51\u7edc\u7b56\u7565\u7684 CNI\uff08\u5bb9\u5668\u7f51\u7edc\u63a5\u53e3\uff09\u65f6\uff0c\u6bd4\u5982 Calico \u6216 Canal\uff08calico \u7528\u4e8e\u7b56\u7565\uff0cflannel \u7528\u4e8e\u7f51\u7edc\uff09\u3002\u4f60\u53ef\u4ee5\u5c06 NetworkPolicy \u5e94\u7528\u5230\u547d\u540d\u7a7a\u95f4\uff0c\u5176\u4e2d\u7684\u89c4\u5219\u5b9a\u4e49\u4e86 pod \u4e4b\u95f4\u5982\u4f55\u5f7c\u6b64\u901a\u4fe1\u3002\u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u7b56\u7565\u3002 \u4f7f\u7528\u547d\u540d\u7a7a\u95f4\u6700\u5927\u7684\u597d\u5904\u4e4b\u4e00\u662f\u80fd\u591f\u5229\u7528 Kubernetes RBAC\uff08\u57fa\u4e8e\u89d2\u8272\u7684\u8bbf\u95ee\u63a7\u5236\uff09\u3002RBAC \u5141\u8bb8\u60a8\u5728\u5355\u4e2a\u540d\u79f0\u4e0b\u5f00\u53d1\u89d2\u8272\uff0c\u8fd9\u6837\u5c06\u6743\u9650\u6216\u529f\u80fd\u5217\u8868\u5206\u7ec4\u3002ClusterRole \u5bf9\u8c61\u7528\u4e8e\u5b9a\u4e49\u96c6\u7fa4\u89c4\u6a21\u7684\u4f7f\u7528\u6a21\u5f0f\uff0c\u800c\u89d2\u8272\u5bf9\u8c61\u7c7b\u578b\uff08Role object type\uff09\u5e94\u7528\u4e8e\u5177\u4f53\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u4ece\u800c\u63d0\u4f9b\u66f4\u597d\u7684\u63a7\u5236\u548c\u7c92\u5ea6\u3002\u5728\u89d2\u8272\u521b\u5efa\u540e\uff0cRoleBinding \u53ef\u4ee5\u5c06\u5b9a\u4e49\u7684\u529f\u80fd\u6388\u4e88\u5355\u4e2a\u547d\u540d\u7a7a\u95f4\u4e0a\u4e0b\u6587\u4e2d\u7684\u5177\u4f53\u5177\u4f53\u7528\u6237\u6216\u7528\u6237\u7ec4\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u4f7f\u5f97\u96c6\u7fa4\u64cd\u4f5c\u8005\u80fd\u591f\u5c06\u76f8\u540c\u7684\u7b56\u7565\u6620\u5c04\u5230\u7ec4\u7ec7\u597d\u7684\u8d44\u6e90\u96c6\u5408\u3002 \u7b80\u800c\u8a00\u4e4b \u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u53ef\u4ee5\u6709 \u4e0d\u540c\u7684\u7f51\u7edc\u7b56\u7565 \u4e0d\u540c\u7684\u8d44\u6e90\u9650\u5236(ResourceQuota) \u4e0d\u540c\u7684\u7528\u6237\u6743\u9650(RBAC) \u5e38\u89c1\u7684\u547d\u540d\u7a7a\u95f4\u4f7f\u7528\u6a21\u5f0f\uff083 \u79cd\uff09 \u547d\u540d\u7a7a\u95f4\u662f\u4e00\u79cd\u975e\u5e38\u7075\u6d3b\u7684\u7279\u6027\uff0c\u5b83\u4e0d\u5f3a\u5236\u4f7f\u7528\u7279\u5b9a\u7684\u7ed3\u6784\u6216\u7ec4\u7ec7\u6a21\u5f0f\u3002\u4e0d\u8fc7\u5c3d\u7ba1\u5982\u6b64\uff0c\u8fd8\u662f\u6709\u8bb8\u591a\u5728\u56e2\u961f\u5185\u5e38\u4f7f\u7528\u7684\u6a21\u5f0f\u3002 1 \u5c06\u547d\u540d\u7a7a\u95f4\u6620\u5c04\u5230\u56e2\u961f\u6216\u9879\u76ee\u4e0a \u5728\u8bbe\u7f6e\u547d\u540d\u7a7a\u95f4\u65f6\u6709\u4e00\u4e2a\u60ef\u4f8b\u662f\uff0c\u4e3a\u6bcf\u4e2a\u5355\u72ec\u7684\u9879\u76ee\u6216\u8005\u56e2\u961f\u521b\u5efa\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u3002\u8fd9\u548c\u6211\u4eec\u524d\u9762\u63d0\u5230\u7684\u8bb8\u591a\u547d\u540d\u7a7a\u95f4\u7684\u7279\u6027\u5f88\u597d\u7684\u7ed3\u5408\u5728\u4e86\u4e00\u8d77\u3002 \u901a\u8fc7\u7ed9\u56e2\u961f\u63d0\u4f9b\u4e13\u95e8\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u4f60\u53ef\u4ee5\u7528 RBAC \u7b56\u7565\u59d4\u6258\u67d0\u4e9b\u529f\u80fd\u6765\u5b9e\u73b0\u81ea\u6211\u7ba1\u7406\u548c\u81ea\u52a8\u5316\u3002\u6bd4\u5982\u4ece\u547d\u540d\u7a7a\u95f4\u7684 RoleBinding \u5bf9\u8c61\u4e2d\u6dfb\u52a0\u6216\u5220\u9664\u6210\u5458\u5c31\u662f\u5bf9\u56e2\u961f\u8d44\u6e90\u8bbf\u95ee\u7684\u4e00\u79cd\u7b80\u5355\u65b9\u6cd5\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u7ed9\u56e2\u961f\u548c\u9879\u76ee\u8bbe\u7f6e\u8d44\u6e90\u914d\u989d\u4e5f\u975e\u5e38\u6709\u7528\u3002\u6709\u4e86\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4f60\u53ef\u4ee5\u6839\u636e\u7ec4\u7ec7\u7684\u4e1a\u52a1\u9700\u6c42\u548c\u4f18\u5148\u7ea7\u5408\u7406\u5730\u8bbf\u95ee\u8d44\u6e90\u3002 2 \u4f7f\u7528\u547d\u540d\u7a7a\u95f4\u5bf9\u751f\u547d\u5468\u671f\u73af\u5883\u8fdb\u884c\u5206\u533a \u547d\u540d\u7a7a\u95f4\u975e\u5e38\u9002\u5408\u5728\u96c6\u7fa4\u4e2d\u5212\u5206 \u5f00\u53d1 \u3001 staging \u4ee5\u53ca \u751f\u4ea7\u73af\u5883 \u3002\u901a\u5e38\u60c5\u51b5\u4e0b\u6211\u4eec\u4f1a\u88ab\u5efa\u8bae\u5c06\u751f\u4ea7\u5de5\u4f5c\u8d1f\u8f7d\u90e8\u7f72\u5230\u4e00\u4e2a\u5b8c\u5168\u72ec\u7acb\u7684\u96c6\u7fa4\u4e2d\uff0c\u6765\u786e\u4fdd\u6700\u5927\u7a0b\u5ea6\u7684\u9694\u79bb\u3002\u4e0d\u8fc7\u5bf9\u4e8e\u8f83\u5c0f\u7684\u56e2\u961f\u548c\u9879\u76ee\u6765\u8bf4\uff0c\u547d\u540d\u7a7a\u95f4\u4f1a\u662f\u4e00\u4e2a\u53ef\u884c\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u548c\u524d\u9762\u7684\u7528\u4f8b\u4e00\u6837\uff0c\u7f51\u7edc\u7b56\u7565\u3001RBAC \u7b56\u7565\u4ee5\u53ca\u914d\u989d\u662f\u5b9e\u73b0\u7528\u4f8b\u7684\u91cd\u8981\u56e0\u7d20\u3002\u5728\u7ba1\u7406\u73af\u5883\u65f6\uff0c\u901a\u8fc7\u5c06\u7f51\u7edc\u9694\u79bb\u6765\u63a7\u5236\u548c\u7ec4\u4ef6\u4e4b\u95f4\u7684\u901a\u4fe1\u80fd\u529b\u662f\u5f88\u6709\u5fc5\u8981\u7684\u3002\u540c\u6837\uff0c\u547d\u540d\u7a7a\u95f4\u8303\u56f4\u7684 RBAC \u7b56\u7565\u5141\u8bb8\u8fd0\u7ef4\u4eba\u5458\u4e3a\u751f\u4ea7\u73af\u8282\u8bbe\u7f6e\u4e25\u683c\u7684\u6743\u9650\u3002\u914d\u989d\u80fd\u591f\u786e\u4fdd\u5bf9\u6700\u654f\u611f\u73af\u5883\u7684\u91cd\u8981\u8d44\u6e90\u7684\u8bbf\u95ee\u3002 \u91cd\u65b0\u4f7f\u7528\u5bf9\u8c61\u540d\u79f0\u7684\u80fd\u529b\u5728\u8fd9\u91cc\u5f88\u6709\u5e2e\u52a9\u3002\u5728\u6d4b\u8bd5\u548c\u53d1\u5e03\u5bf9\u8c61\u65f6\uff0c\u53ef\u4ee5\u628a\u5b83\u4eec\u653e\u5230\u65b0\u73af\u5883\u4e2d\uff0c\u540c\u65f6\u4fdd\u7559\u5176\u547d\u540d\u7a7a\u95f4\u3002\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u56e0\u4e3a\u73af\u5883\u4e2d\u51fa\u73b0\u76f8\u4f3c\u7684\u5bf9\u8c61\u800c\u4ea7\u751f\u7684\u6df7\u6dc6\uff0c\u5e76\u4e14\u51cf\u5c11\u8ba4\u77e5\u5f00\u9500\u3002 3 \u4f7f\u7528\u547d\u540d\u7a7a\u95f4\u9694\u79bb\u4e0d\u540c\u7684\u4f7f\u7528\u8005 \u53e6\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u89e3\u51b3\u7684\u7528\u4f8b\u662f\u6839\u636e\u4f7f\u7528\u8005\u5bf9\u5de5\u4f5c\u8d1f\u8f7d\u8fdb\u884c\u5206\u6bb5\u3002\u6bd4\u5982\uff0c\u5982\u679c\u4f60\u7684\u96c6\u7fa4\u4e3a\u591a\u4e2a\u5ba2\u6237\u63d0\u4f9b\u57fa\u7840\u8bbe\u65bd\uff0c\u90a3\u4e48\u6309\u547d\u540d\u7a7a\u95f4\u8fdb\u884c\u5206\u6bb5\u5c31\u80fd\u591f\u5b9e\u73b0\u7ba1\u7406\u6bcf\u4e2a\u5ba2\u6237\uff0c\u540c\u65f6\u8ddf\u8e2a\u8d26\u5355\u7684\u53bb\u5411\u3002 \u53e6\u5916\uff0c\u547d\u540d\u7a7a\u95f4\u7684\u7279\u6027\u53ef\u4ee5\u8ba9\u4f60\u63a7\u5236\u7f51\u7edc\u548c\u8bbf\u95ee\u7b56\u7565\uff0c\u4e3a\u4f60\u7684\u4f7f\u7528\u8005\u5b9a\u4e49\u4e0d\u540c\u7684\u914d\u989d\u3002\u5728\u901a\u7528\u7684\u60c5\u51b5\u4e0b\uff0c\u547d\u540d\u7a7a\u95f4\u5141\u8bb8\u4f60\u4e3a\u6bcf\u4e2a\u7528\u6237\u5f00\u53d1\u548c\u90e8\u7f72\u76f8\u540c\u6a21\u677f\u5316\u73af\u5883\u7684\u4e0d\u540c\u5b9e\u4f8b\u3002\u8fd9\u79cd\u4e00\u81f4\u6027\u53ef\u4ee5\u5927\u5927\u7b80\u5316\u7ba1\u7406\u548c\u6545\u969c\u8bca\u65ad\u7684\u8fc7\u7a0b\u3002 \u7406\u89e3\u9884\u914d\u7f6e\u7684 Kubernetes \u547d\u540d\u7a7a\u95f4 \u5728\u6211\u4eec\u8fdb\u884c\u521b\u5efa\u547d\u540d\u7a7a\u95f4\u4e4b\u524d\uff0c\u5148\u8ba8\u8bba\u4e00\u4e0b Kubernetes \u662f\u5982\u4f55\u81ea\u52a8\u8bbe\u7f6e\u5b83\u7684\u3002\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u65b0\u7684\u96c6\u7fa4\u4e0a\u6709\u4e09\u4e2a\u547d\u540d\u7a7a\u95f4\uff1a default \uff1a\u5411\u96c6\u7fa4\u4e2d\u6dfb\u52a0\u5bf9\u8c61\u800c\u4e0d\u63d0\u4f9b\u547d\u540d\u7a7a\u95f4\uff0c\u8fd9\u6837\u5b83\u4f1a\u88ab\u653e\u5165\u9ed8\u8ba4\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u3002\u5728\u521b\u5efa\u66ff\u4ee3\u7684\u547d\u540d\u7a7a\u95f4\u4e4b\u524d\uff0c\u8be5\u547d\u540d\u7a7a\u95f4\u4f1a\u5145\u5f53\u7528\u6237\u65b0\u6dfb\u52a0\u8d44\u6e90\u7684\u4e3b\u8981\u76ee\u7684\u5730\uff0c\u65e0\u6cd5\u5220\u9664\u3002 kube-public \uff1akube-public \u547d\u540d\u7a7a\u95f4\u7684\u76ee\u7684\u662f\u8ba9\u6240\u6709\u5177\u6709\u6216\u4e0d\u5177\u6709\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u90fd\u80fd\u5168\u5c40\u53ef\u8bfb\u3002\u8fd9\u5bf9\u4e8e\u516c\u5f00 bootstrap \u7ec4\u4ef6\u6240\u9700\u7684\u96c6\u7fa4\u4fe1\u606f\u975e\u5e38\u6709\u7528\u3002\u5b83\u4e3b\u8981\u662f\u7531 Kubernetes \u81ea\u5df1\u7ba1\u7406\u3002 kube-system \uff1akube-system \u547d\u540d\u7a7a\u95f4\u7528\u4e8e Kubernetes \u7ba1\u7406\u7684 Kubernetes \u7ec4\u4ef6\uff0c\u4e00\u822c\u89c4\u5219\u662f\uff0c\u907f\u514d\u5411\u8be5\u547d\u540d\u7a7a\u95f4\u6dfb\u52a0\u666e\u901a\u7684\u5de5\u4f5c\u8d1f\u8f7d\u3002\u5b83\u4e00\u822c\u7531\u7cfb\u7edf\u76f4\u63a5\u7ba1\u7406\uff0c\u56e0\u6b64\u5177\u6709\u76f8\u5bf9\u5bbd\u677e\u7684\u7b56\u7565\u3002 \u5e38\u7528 Namespace \u64cd\u4f5c\uff1a \u67e5\u8be2\u6240\u6709 Namespaces $ kubectl get namespace \u521b\u5efa Namespace$ kubectl create namespace ns-name \u5220\u9664 Namespace$ kubectl delete namespace ns-name \u5220\u9664\u547d\u540d\u7a7a\u95f4\u65f6\uff0c\u9700\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\uff1a \u5220\u9664\u4e00\u4e2a Namespace \u4f1a\u81ea\u52a8\u5220\u9664\u6240\u6709\u5c5e\u4e8e\u8be5 Namespace \u7684\u8d44\u6e90\u3002 default \u548c kube-system \u547d\u540d\u7a7a\u95f4\u4e0d\u53ef\u5220\u9664\u3002 PersistentVolumes \u662f\u4e0d\u5c5e\u4e8e\u4efb\u4f55 Namespace \u7684\uff0c\u4f46 PersistentVolumeClaim \u662f\u5c5e\u4e8e\u67d0\u4e2a\u7279\u5b9a Namespace \u7684\u3002 Events \u662f\u5426\u5c5e\u4e8e Namespace \u53d6\u51b3\u4e8e\u4ea7\u751f events \u7684\u5bf9\u8c61\u3002 Service \u662f\u5bf9\u4e00\u7ec4\u63d0\u4f9b\u76f8\u540c\u529f\u80fd\u7684 Pods \u7684\u62bd\u8c61\uff0c\u5e76\u4e3a\u4ed6\u4eec\u63d0\u4f9b\u4e00\u4e2a\u7edf\u4e00\u7684\u5165\u53e3\u3002\u501f\u52a9 Service \u5e94\u7528\u53ef\u4ee5\u65b9\u4fbf\u7684\u5b9e\u73b0\u670d\u52a1\u53d1\u73b0\u4e0e\u8d1f\u8f7d\u5747\u8861\uff0c\u5e76\u5b9e\u73b0\u5e94\u7528\u7684\u96f6\u5b95\u673a\u5347\u7ea7\u3002Service \u901a\u8fc7\u6807\u7b7e (Label) \u6765\u9009\u53d6\u540e\u7aef Pod\uff0c\u4e00\u822c\u914d\u5408 ReplicaSet \u6216\u8005 Deployment \u6765\u4fdd\u8bc1\u540e\u7aef\u5bb9\u5668\u7684\u6b63\u5e38\u8fd0\u884c\u3002 Service \u6709\u5982\u4e0b\u56db\u79cd\u7c7b\u578b\uff0c\u9ed8\u8ba4\u662f ClusterIP\uff1a ClusterIP: \u9ed8\u8ba4\u7c7b\u578b\uff0c\u81ea\u52a8\u5206\u914d\u4e00\u4e2a\u4ec5\u96c6\u7fa4\u5185\u90e8\u53ef\u4ee5\u8bbf\u95ee\u7684\u865a\u62df IP NodePort: \u5728 ClusterIP \u57fa\u7840\u4e0a\u4e3a Service \u5728\u6bcf\u53f0\u673a\u5668\u4e0a\u7ed1\u5b9a\u4e00\u4e2a\u7aef\u53e3\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7 NodeIP:NodePort \u6765\u8bbf\u95ee\u8be5\u670d\u52a1 LoadBalancer: \u5728 NodePort \u7684\u57fa\u7840\u4e0a\uff0c\u501f\u52a9 Cloud Provider \u521b\u5efa\u4e00\u4e2a\u5916\u90e8\u7684\u8d1f\u8f7d\u5747\u8861\u5668\uff0c\u5e76\u5c06\u8bf7\u6c42\u8f6c\u53d1\u5230 NodeIP:NodePort ExternalName: \u5c06\u670d\u52a1\u901a\u8fc7 DNS CNAME \u8bb0\u5f55\u65b9\u5f0f\u8f6c\u53d1\u5230\u6307\u5b9a\u7684\u57df\u540d Service \u76f8\u5f53\u4e8e\u96c6\u7fa4\u5185\u90e8\u7684 LB \u6709\u4e86 service \u4e4b\u540e\uff0c\u96c6\u7fa4\u5185\u90e8\u4e0d\u540c\u7684 pod\uff0c\u53ef\u4ee5\u5f62\u6210\u5fae\u670d\u52a1\u67b6\u6784\u4e86 Service B \u4e3a\u524d\u7aef\u5fae\u670d\u52a1\uff0cCD EA \u7b49\u4e3a\u540e\u7aef\u5fae\u670d\u52a1\uff0c\u4ed6\u4eec\u4e4b\u95f4\u901a\u8fc7 Service\uff08\u4e5f\u5c31\u662f LB\uff09\u4e92\u76f8 \u8c03\u7528\uff0cService \u9ed8\u8ba4\u7684 cluster IP \u662f Kubernetes \u96c6\u7fa4\u91cc\u7684\u865a\u62df IP volume \u5b58\u50a8\u5377 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5bb9\u5668\u7684\u6570\u636e\u662f\u975e\u6301\u4e45\u5316\u7684\uff0c\u5bb9\u5668\u6d88\u4ea1\u4ee5\u540e\u6570\u636e\u4e5f\u4f1a\u8ddf\u7740\u4e22\u5931\u3002\u6240\u4ee5 Docker \u63d0\u4f9b\u4e86 Volume \u673a\u5236\u4ee5\u4fbf\u5c06\u6570\u636e\u6301\u4e45\u5316\u5b58\u50a8\u3002Kubernetes \u63d0\u4f9b\u4e86\u66f4\u5f3a\u5927\u7684 Volume \u673a\u5236\u548c\u63d2\u4ef6\uff0c\u89e3\u51b3\u4e86\u5bb9\u5668\u6570\u636e\u6301\u4e45\u5316\u4ee5\u53ca\u5bb9\u5668\u95f4\u5171\u4eab\u6570\u636e\u7684\u95ee\u9898\u3002 \u76ee\u524d Kubernetes \u4e3b\u8981\u652f\u6301\u4ee5\u4e0b Volume \u7c7b\u578b\uff1a emptyDir\uff1aPod \u5b58\u5728\uff0cemptyDir \u5c31\u4f1a\u5b58\u5728\u3002\u5bb9\u5668\u6302\u6389\u4e0d\u4f1a\u5f15\u8d77 emptyDir \u76ee\u5f55\u4e0b\u7684\u6570\u636e\u4e22\u5931\uff0c\u4f46\u662f Pod \u88ab\u5220\u9664\u6216\u8005\u8fc1\u79fb\uff0cemptyDir \u4e5f\u4f1a\u88ab\u5220\u9664 hostPath\uff1ahostPath \u5141\u8bb8\u6302\u8f7d Node \u4e0a\u7684\u6587\u4ef6\u7cfb\u7edf\u5230 Pod \u91cc\u9762\u53bb NFS\uff08Network File System\uff09\uff1a\u7f51\u7edc\u6587\u4ef6\u7cfb\u7edf\uff0cKubernetes \u4e2d\u901a\u8fc7\u7b80\u5355\u5730\u914d\u7f6e\u5c31\u53ef\u4ee5\u6302\u8f7d NFS \u5230 Pod \u4e2d\uff0c\u800c NFS \u4e2d\u7684\u6570\u636e\u662f\u53ef\u4ee5\u6c38\u4e45\u4fdd\u5b58\u7684\uff0c\u540c\u65f6 NFS \u652f\u6301\u540c\u65f6\u5199\u64cd\u4f5c\u3002 Glusterfs\uff1a\u540c NFS \u4e00\u6837\u662f\u4e00\u79cd\u7f51\u7edc\u6587\u4ef6\u7cfb\u7edf\uff0cKubernetes \u53ef\u4ee5\u5c06 Glusterfs \u6302\u8f7d\u5230 Pod \u4e2d\uff0c\u5e76\u8fdb\u884c\u6c38\u4e45\u4fdd\u5b58 Cephfs\uff1a\u4e00\u79cd\u5206\u5e03\u5f0f\u7f51\u7edc\u6587\u4ef6\u7cfb\u7edf\uff0c\u53ef\u4ee5\u6302\u8f7d\u5230 Pod \u4e2d\uff0c\u5e76\u8fdb\u884c\u6c38\u4e45\u4fdd\u5b58 Subpath\uff1aPod \u7684\u591a\u4e2a\u5bb9\u5668\u4f7f\u7528\u540c\u4e00\u4e2a Volume \u65f6\uff0c\u4f1a\u7ecf\u5e38\u7528\u5230 Secret\uff1a\u5bc6\u94a5\u7ba1\u7406\uff0c\u53ef\u4ee5\u5c06\u654f\u611f\u4fe1\u606f\u8fdb\u884c\u52a0\u5bc6\u4e4b\u540e\u4fdd\u5b58\u5e76\u6302\u8f7d\u5230 Pod \u4e2d PersistentVolumeClaim\uff1a\u7528\u4e8e\u5c06\u6301\u4e45\u5316\u5b58\u50a8\uff08PersistentVolume\uff09\u6302\u8f7d\u5230 Pod \u4e2d PersistentVolume (PV) \u6301\u4e45\u5316\u5b58\u50a8\u5377 PersistentVolume (PV) \u662f\u96c6\u7fa4\u4e4b\u4e2d\u7684\u4e00\u5757\u7f51\u7edc\u5b58\u50a8\u3002\u8ddf Node \u4e00\u6837\uff0c\u4e5f\u662f\u96c6\u7fa4\u7684\u8d44\u6e90\u3002 PersistentVolume \u548c PersistentVolumeClaim (PVC) \u63d0\u4f9b\u4e86\u65b9\u4fbf\u7684\u6301\u4e45\u5316\u5377: PV \u63d0\u4f9b\u7f51\u7edc\u5b58\u50a8\u8d44\u6e90\uff0c\u800c PVC \u8bf7\u6c42\u5b58\u50a8\u8d44\u6e90\u5e76\u5c06\u5176\u6302\u8f7d\u5230 Pod \u4e2d\u3002 PV \u7684\u8bbf\u95ee\u6a21\u5f0f (accessModes) \u6709\u4e09\u79cd: ReadWriteOnce (RWO): \u662f\u6700\u57fa\u672c\u7684\u65b9\u5f0f\uff0c\u53ef\u8bfb\u53ef\u5199\uff0c\u4f46\u53ea\u652f\u6301\u88ab\u5355\u4e2a Pod \u6302\u8f7d\u3002 ReadOnlyMany (ROX): \u53ef\u4ee5\u4ee5\u53ea\u8bfb\u7684\u65b9\u5f0f\u88ab\u591a\u4e2a Pod \u6302\u8f7d\u3002 ReadWriteMany (RWX): \u8fd9\u79cd\u5b58\u50a8\u53ef\u4ee5\u4ee5\u8bfb\u5199\u7684\u65b9\u5f0f\u88ab\u591a\u4e2a Pod \u5171\u4eab\u3002 \u4e0d\u662f\u6bcf\u4e00\u79cd\u5b58\u50a8\u90fd\u652f\u6301\u8fd9\u4e09\u79cd\u65b9\u5f0f\uff0c\u50cf\u5171\u4eab\u65b9\u5f0f\uff0c\u76ee\u524d\u652f\u6301\u7684\u8fd8\u6bd4\u8f83\u5c11\uff0c\u6bd4\u8f83\u5e38\u7528\u7684\u662f NFS\u3002\u5728 PVC \u7ed1\u5b9a PV \u65f6\u901a\u5e38\u6839\u636e\u4e24\u4e2a\u6761\u4ef6\u6765\u7ed1\u5b9a\uff0c \u4e00\u4e2a\u662f\u5b58\u50a8\u7684\u5927\u5c0f \uff0c \u53e6\u4e00\u4e2a\u5c31\u662f\u8bbf\u95ee\u6a21\u5f0f \u3002 StorageClass \u7b80\u5316\u63d0\u524d\u521b\u5efa PV \u7684\u8fc7\u7a0b,\u7ba1\u7406\u5458\u65e0\u9700\u63d0\u524d\u521b\u5efa\u9759\u6001 PV \u7cfb\u7edf\u4e3a PVC \u9009\u62e9\u5bf9\u5e94 PV \u65f6\uff0c\u5f88\u53ef\u80fd\u5b58\u5728 PV \u7a7a\u95f4\u5927\u4e8e PVC \u7533\u8bf7\u7684\u7a7a\u95f4\uff0c\u5b58\u5728\u8d44\u6e90\u6d6a\u8d39\u7684\u60c5\u51b5\u3002\u800c\u4f7f\u7528 StorageClass \u7684\u52a8\u6001\u5b58\u50a8\u4f9b\u5e94\u6a21\u5f0f\u5c31\u907f\u514d\u4e86\u8fd9\u79cd\u60c5\u51b5. ConfigMap \u914d\u7f6e\u4e2d\u5fc3 ConfigMap \u7528\u4e8e\u4fdd\u5b58\u914d\u7f6e\u6570\u636e\u7684\u952e\u503c\u5bf9\uff0c\u53ef\u4ee5\u7528\u6765\u4fdd\u5b58\u5355\u4e2a\u5c5e\u6027\uff0c\u4e5f\u53ef\u4ee5\u7528\u6765\u4fdd\u5b58\u914d\u7f6e\u6587\u4ef6\u3002ConfigMap \u8ddf Secret \u5f88\u7c7b\u4f3c\uff0c\u4f46\u5b83\u53ef\u4ee5\u66f4\u65b9\u4fbf\u5730\u5904\u7406\u4e0d\u5305\u542b\u654f\u611f\u4fe1\u606f\u7684\u5b57\u7b26\u4e32\u3002 ConfigMap \u53ef\u4ee5\u901a\u8fc7\u4e09\u79cd\u65b9\u5f0f\u5728 Pod \u4e2d\u4f7f\u7528\uff0c\u4e09\u79cd\u5206\u522b\u65b9\u5f0f\u4e3a: \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf \u8bbe\u7f6e\u5bb9\u5668\u547d\u4ee4\u884c\u53c2\u6570 \u5728 Volume \u4e2d\u76f4\u63a5\u6302\u8f7d\u6587\u4ef6\u6216\u76ee\u5f55\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 kubectl create configmap \u4ece\u6587\u4ef6\u3001\u76ee\u5f55\u6216\u8005 key-value \u5b57\u7b26\u4e32\u521b\u5efa\u7b49\u521b\u5efa ConfigMap\u3002\u4e5f\u53ef\u4ee5\u901a\u8fc7 kubectl create -f value.yaml \u6765\u521b\u5efa\u3002 ConfigMap \u6700\u4f73\u5b9e\u8df5 \u5b9e\u9645\u5e94\u7528\u4e2d\u901a\u5e38\u662f\u4e00\u4e2a namespace \u5bf9\u5e94\u4e00\u4e2a ConfigMap, NS \u7684\u540d\u79f0\u548c CM \u7684\u540d\u79f0\u76f8\u540c ConfigMap \u4e0b\u7684\u4e0d\u540c key\uff0c\u53ef\u4ee5\u7406\u89e3\u662f Linux \u7684\u4e00\u4e2a\u6587\u4ef6\u540d\uff0c\u6bd4\u5982 nginx.conf, server.conf\uff0c\u800c\u6587\u4ef6\u603b\u662f\u653e\u5728\u67d0\u4e2a \u8def\u5f84 \u4e0b\uff08\u4f8b\u5982/root/conf \u76ee\u5f55\uff09\uff0c \u8def\u5f84 \u662f\u7531 volumeMounts.\u201dmountPath\u201d\u51b3\u5b9a\u7684 Deployment \u65e0\u72b6\u6001\u5e94\u7528 \u4e00\u822c\u60c5\u51b5\u4e0b\u6211\u4eec\u4e0d\u9700\u8981\u624b\u52a8\u521b\u5efa Pod \u5b9e\u4f8b\uff0c\u800c\u662f\u91c7\u7528\u66f4\u9ad8\u4e00\u5c42\u7684\u62bd\u8c61\u6216\u5b9a\u4e49\u6765\u7ba1\u7406 Pod\u3002\u9488\u5bf9\u65e0\u72b6\u6001\u7c7b\u578b\u7684\u5e94\u7528\uff0cKubernetes \u4f7f\u7528 Deloyment \u7684 Controller \u5bf9\u8c61\u4e0e\u4e4b\u5bf9\u5e94\u3002\u5176\u5178\u578b\u7684\u5e94\u7528\u573a\u666f\u5305\u62ec\uff1a \u5b9a\u4e49 Deployment \u6765\u521b\u5efa Pod \u548c ReplicaSet \u6eda\u52a8\u5347\u7ea7\u548c\u56de\u6eda\u5e94\u7528 \u6269\u5bb9\u548c\u7f29\u5bb9 \u6682\u505c\u548c\u7ee7\u7eed Deployment \u5e38\u7528\u7684\u64cd\u4f5c\u547d\u4ee4 \u751f\u6210\u4e00\u4e2a Deployment \u5bf9\u8c61$ kubectl run www --image=10.0.0.183:5000/hanker/www:0.0.1 --port=8080 \u67e5\u627e Deployment$ kubectl get deployment --all-namespaces \u67e5\u770b\u67d0\u4e2a Deployment$ kubectl describe deployment www \u7f16\u8f91 Deployment \u5b9a\u4e49$ kubectl edit deployment www \u5220\u9664\u67d0 Deployment$ kubectl delete deployment www \u6269\u7f29\u5bb9\u64cd\u4f5c\uff0c\u5373\u4fee\u6539 Deployment \u4e0b\u7684 Pod \u5b9e\u4f8b\u4e2a\u6570$ kubectl scale deployment/www --replicas=2 \u66f4\u65b0\u955c\u50cf$ kubectl set image deployment/nginx-deployment nginx=nginx:1.9.1 \u56de\u6eda\u64cd\u4f5c$ kubectl rollout undo deployment/nginx-deployment \u67e5\u770b\u56de\u6eda\u8fdb\u5ea6$ kubectl rollout status deployment/nginx-deployment \u542f\u7528\u6c34\u5e73\u4f38\u7f29\uff08HPA - horizontal pod autoscaling\uff09\uff0c\u8bbe\u7f6e\u6700\u5c0f\u3001\u6700\u5927\u5b9e\u4f8b\u6570\u91cf\u4ee5\u53ca\u76ee\u6807 Cpu \u4f7f\u7528\u7387$ kubectl autoscale deployment nginx-deployment --min=10 --max=15 --cpu-percent=80 \u6682\u505c\u66f4\u65b0 Deployment$ kubectl rollout pause deployment/nginx-deployment \u6062\u590d\u66f4\u65b0 Deployment$ kubectl rollout resume deploy nginx \u66f4\u65b0\u7b56\u7565.spec.strategy .spec.strategy \u6307\u65b0\u7684 Pod \u66ff\u6362\u65e7\u7684 Pod \u7684\u7b56\u7565\uff0c\u6709\u4ee5\u4e0b\u4e24\u79cd\u7c7b\u578b\uff1a RollingUpdate \u6eda\u52a8\u5347\u7ea7\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u5e94\u7528\u5728\u5347\u7ea7\u671f\u95f4\uff0c\u5bf9\u5916\u6b63\u5e38\u63d0\u4f9b\u670d\u52a1\u3002 Recreate \u91cd\u5efa\u7b56\u7565\uff0c\u5728\u521b\u5efa\u51fa\u65b0\u7684 Pod \u4e4b\u524d\u4f1a\u5148\u6740\u6389\u6240\u6709\u5df2\u5b58\u5728\u7684 Pod\u3002 Deployment \u548c ReplicaSet \u4e24\u8005\u4e4b\u95f4\u7684\u5173\u7cfb \u4f7f\u7528 Deployment \u6765\u521b\u5efa ReplicaSet\u3002ReplicaSet \u5728\u540e\u53f0\u521b\u5efa Pod\uff0c\u68c0\u67e5\u542f\u52a8\u72b6\u6001\uff0c\u770b\u5b83\u662f\u6210\u529f\u8fd8\u662f\u5931\u8d25\u3002 \u5f53\u6267\u884c\u66f4\u65b0\u64cd\u4f5c\u65f6\uff0c\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 ReplicaSet\uff0cDeployment \u4f1a\u6309\u7167\u63a7\u5236\u7684\u901f\u7387\u5c06 Pod \u4ece\u65e7\u7684 ReplicaSet \u79fb\u52a8\u5230\u65b0\u7684 ReplicaSet \u4e2d \u4ece K8S \u4f7f\u7528\u8005\u89d2\u5ea6\u6765\u770b\uff0c\u7528\u6237\u4f1a\u76f4\u63a5\u64cd\u4f5c Deployment \u90e8\u7f72\u670d\u52a1\uff0c\u800c\u5f53 Deployment \u88ab\u90e8\u7f72\u7684\u65f6\u5019\uff0cK8S \u4f1a\u81ea\u52a8\u751f\u6210\u8981\u6c42\u7684 ReplicaSet \u548c Pod\u3002 \u5728 K8S \u5b98\u65b9\u6587\u6863\u4e2d\u4e5f\u6307\u51fa\u7528\u6237\u53ea\u9700\u8981\u5173\u5fc3 Deployment \u800c\u4e0d\u64cd\u5fc3 ReplicaSet\uff1a This actually means that you may never need to manipulate ReplicaSet objects: use a Deployment instead, and define your application in the spec section. \u8fd9\u5b9e\u9645\u4e0a\u610f\u5473\u7740\u60a8\u53ef\u80fd\u6c38\u8fdc\u4e0d\u9700\u8981\u64cd\u4f5c ReplicaSet \u5bf9\u8c61\uff1a\u76f4\u63a5\u4f7f\u7528 Deployments \u5e76\u5728\u89c4\u8303\u90e8\u5206\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u3002 StatefulSet \u6709\u72b6\u6001\u5e94\u7528 Deployments \u548c ReplicaSets \u662f\u4e3a\u65e0\u72b6\u6001\u670d\u52a1\u8bbe\u8ba1\u7684\uff0c\u90a3\u4e48 StatefulSet \u5219\u662f\u4e3a\u4e86\u6709\u72b6\u6001\u670d\u52a1\u800c\u8bbe\u8ba1\uff0c\u5176\u5e94\u7528\u573a\u666f\u5305\u62ec\uff1a \u7a33\u5b9a\u7684\u6301\u4e45\u5316\u5b58\u50a8\uff0c\u5373 Pod \u91cd\u65b0\u8c03\u5ea6\u540e\u8fd8\u662f\u80fd\u8bbf\u95ee\u5230\u76f8\u540c\u7684\u6301\u4e45\u5316\u6570\u636e\uff0c\u57fa\u4e8e PVC \u6765\u5b9e\u73b0 \u7a33\u5b9a\u7684\u7f51\u7edc\u6807\u5fd7\uff0c\u5373 Pod \u91cd\u65b0\u8c03\u5ea6\u540e\u5176 PodName \u548c HostName \u4e0d\u53d8\uff0c\u57fa\u4e8e Headless Service (\u5373\u6ca1\u6709 Cluster IP \u7684 Service )\u6765\u5b9e\u73b0 \u6709\u5e8f\u90e8\u7f72\uff0c\u6709\u5e8f\u6269\u5c55\uff0c\u5373 Pod \u662f\u6709\u987a\u5e8f\u7684\u3002\u5728\u90e8\u7f72\u6216\u8005\u6269\u5c55\u7684\u65f6\u5019\u8981\u4f9d\u636e\u5b9a\u4e49\u7684\u987a\u5e8f\u4f9d\u6b21\u8fdb\u884c\u64cd\u4f5c (\u5373\u4ece 0 \u5230 N-1\uff0c\u5728\u4e0b\u4e00\u4e2a Pod \u8fd0\u884c\u4e4b\u524d\u6240\u6709\u4e4b\u524d\u7684 Pod \u5fc5\u987b\u90fd\u662f Running \u548c Ready \u72b6\u6001)\uff0c\u57fa\u4e8e Init Containers \u6765\u5b9e\u73b0 \u6709\u5e8f\u6536\u7f29\uff0c\u6709\u5e8f\u5220\u9664 (\u5373\u4ece N-1 \u5230 0) \u652f\u6301\u4e24\u79cd\u66f4\u65b0\u7b56\u7565 OnDelete: \u5f53 .spec.template \u66f4\u65b0\u65f6\uff0c\u5e76\u4e0d\u7acb\u5373\u5220\u9664\u65e7\u7684 Pod\uff0c\u800c\u662f\u7b49\u5f85\u7528\u6237\u624b\u52a8\u5220\u9664\u8fd9\u4e9b\u65e7 Pod \u540e\u81ea\u52a8\u521b\u5efa\u65b0 Pod\u3002\u8fd9\u662f\u9ed8\u8ba4\u7684\u66f4\u65b0\u7b56\u7565\uff0c\u517c\u5bb9 v1.6 \u7248\u672c\u7684\u884c\u4e3a RollingUpdate: \u5f53 .spec.template \u66f4\u65b0\u65f6\uff0c\u81ea\u52a8\u5220\u9664\u65e7\u7684 Pod \u5e76\u521b\u5efa\u65b0 Pod \u66ff\u6362\u3002\u5728\u66f4\u65b0\u65f6\u8fd9\u4e9b Pod \u662f\u6309\u9006\u5e8f\u7684\u65b9\u5f0f\u8fdb\u884c\uff0c\u4f9d\u6b21\u5220\u9664\u3001\u521b\u5efa\u5e76\u7b49\u5f85 Pod \u53d8\u6210 Ready \u72b6\u6001\u624d\u8fdb\u884c\u4e0b\u4e00\u4e2a Pod \u7684\u66f4\u65b0\u3002 DaemonSet \u5b88\u62a4\u8fdb\u7a0b\u96c6 DaemonSet \u4fdd\u8bc1\u5728\u7279\u5b9a\u6216\u6240\u6709 Node \u8282\u70b9\u4e0a\u90fd\u8fd0\u884c\u4e00\u4e2a Pod \u5b9e\u4f8b\uff0c\u5e38\u7528\u6765\u90e8\u7f72\u4e00\u4e9b\u96c6\u7fa4\u7684\u65e5\u5fd7\u91c7\u96c6\u3001\u76d1\u63a7\u6216\u8005\u5176\u4ed6\u7cfb\u7edf\u7ba1\u7406\u5e94\u7528\u3002\u5178\u578b\u7684\u5e94\u7528\u5305\u62ec: \u65e5\u5fd7\u6536\u96c6\uff0c\u6bd4\u5982 Fluentd\uff0cLogstash \u7b49 \u7cfb\u7edf\u76d1\u63a7\uff0c\u6bd4\u5982 Prometheus Node Exporter\uff0cCollectd \u7b49 \u7cfb\u7edf\u7a0b\u5e8f\uff0c\u6bd4\u5982 Kube-Proxy\u3001Kube-Dns\u3001Glusterd\u3001Ceph\u3001Ingress-Controller \u7b49 \u6307\u5b9a Node \u8282\u70b9 DaemonSet \u4f1a\u5ffd\u7565 Node \u7684 unschedulable \u72b6\u6001\uff0c\u6709\u4e24\u79cd\u65b9\u5f0f\u6765\u6307\u5b9a Pod \u53ea\u8fd0\u884c\u5728\u6307\u5b9a\u7684 Node \u8282\u70b9\u4e0a: nodeSelector: \u53ea\u8c03\u5ea6\u5230\u5339\u914d\u6307\u5b9a Label \u7684 Node \u4e0a nodeAffinity: \u529f\u80fd\u66f4\u4e30\u5bcc\u7684 Node \u9009\u62e9\u5668\uff0c\u6bd4\u5982\u652f\u6301\u96c6\u5408\u64cd\u4f5c podAffinity: \u8c03\u5ea6\u5230\u6ee1\u8db3\u6761\u4ef6\u7684 Pod \u6240\u5728\u7684 Node \u4e0a \u76ee\u524d\u652f\u6301\u4e24\u79cd\u7b56\u7565 OnDelete: \u9ed8\u8ba4\u7b56\u7565\uff0c\u66f4\u65b0\u6a21\u677f\u540e\uff0c\u53ea\u6709\u624b\u52a8\u5220\u9664\u4e86\u65e7\u7684 Pod \u540e\u624d\u4f1a\u521b\u5efa\u65b0\u7684 Pod RollingUpdate: \u66f4\u65b0 DaemonSet \u6a21\u7248\u540e\uff0c\u81ea\u52a8\u5220\u9664\u65e7\u7684 Pod \u5e76\u521b\u5efa\u65b0\u7684 Pod Ingress \u8d1f\u8f7d\u5747\u8861 Kubernetes \u4e2d\u7684\u8d1f\u8f7d\u5747\u8861\u6211\u4eec\u4e3b\u8981\u7528\u5230\u4e86\u4ee5\u4e0b\u4e24\u79cd\u673a\u5236\uff1a Service\uff1a\u4f7f\u7528 Service \u63d0\u4f9b\u96c6\u7fa4\u5185\u90e8\u7684\u8d1f\u8f7d\u5747\u8861\uff0cKube-proxy \u8d1f\u8d23\u5c06 Service \u8bf7\u6c42\u8d1f\u8f7d\u5747\u8861\u5230\u540e\u7aef\u7684 Pod \u4e2d Ingress Controller\uff1a\u4f7f\u7528 Ingress \u63d0\u4f9b\u96c6\u7fa4\u5916\u90e8\u7684\u8d1f\u8f7d\u5747\u8861 Service \u548c Pod \u7684 IP \u4ec5\u53ef\u5728\u96c6\u7fa4\u5185\u90e8\u8bbf\u95ee\u3002\u96c6\u7fa4\u5916\u90e8\u7684\u8bf7\u6c42\u9700\u8981\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u8f6c\u53d1\u5230 Service \u6240\u5728\u8282\u70b9\u66b4\u9732\u7684\u7aef\u53e3\u4e0a\uff0c\u7136\u540e\u518d\u7531 Kube-Proxy \u901a\u8fc7\u8fb9\u7f18\u8def\u7531\u5668\u5c06\u5176\u8f6c\u53d1\u5230\u76f8\u5173\u7684 Pod\u3002 Ingress \u53ef\u4ee5\u7ed9 Service \u63d0\u4f9b\u96c6\u7fa4\u5916\u90e8\u8bbf\u95ee\u7684 URL\u3001\u8d1f\u8f7d\u5747\u8861\u3001HTTP \u8def\u7531\u7b49\uff0c\u4e3a\u4e86\u914d\u7f6e\u8fd9\u4e9b Ingress \u89c4\u5219\uff0c\u96c6\u7fa4\u7ba1\u7406\u5458\u9700\u8981\u90e8\u7f72\u4e00\u4e2a Ingress Controller\uff0c\u5b83\u76d1\u542c Ingress \u548c Service \u7684\u53d8\u5316\uff0c\u5e76\u6839\u636e\u89c4\u5219\u914d\u7f6e\u8d1f\u8f7d\u5747\u8861\u5e76\u63d0\u4f9b\u8bbf\u95ee\u5165\u53e3\u3002 \u5e38\u7528\u7684 Ingress Controller \u6709\uff1a Nginx Traefik Kong Openresty Job & CronJob \u4efb\u52a1\u548c\u5b9a\u65f6\u4efb\u52a1 Job \u8d1f\u8d23\u6279\u91cf\u5904\u7406\u77ed\u6682\u7684\u4e00\u6b21\u6027\u4efb\u52a1 (short lived one-off tasks)\uff0c\u5373\u4ec5\u6267\u884c\u4e00\u6b21\u7684\u4efb\u52a1\uff0c\u5b83\u4fdd\u8bc1\u6279\u5904\u7406\u4efb\u52a1\u7684\u4e00\u4e2a\u6216\u591a\u4e2a Pod \u6210\u529f\u7ed3\u675f\u3002 CronJob \u5373\u5b9a\u65f6\u4efb\u52a1\uff0c\u5c31\u7c7b\u4f3c\u4e8e Linux \u7cfb\u7edf\u7684 Crontab\uff0c\u5728\u6307\u5b9a\u7684\u65f6\u95f4\u5468\u671f\u8fd0\u884c\u6307\u5b9a\u7684\u4efb\u52a1\u3002 HPA\uff08Horizontal Pod Autoscaling\uff09 \u6c34\u5e73\u81ea\u52a8\u4f38\u7f29 Horizontal Pod Autoscaling \u53ef\u4ee5\u6839\u636e CPU\u3001\u5185\u5b58\u4f7f\u7528\u7387\u6216\u5e94\u7528\u81ea\u5b9a\u4e49 Metrics \u81ea\u52a8\u6269\u5c55 Pod \u6570\u91cf (\u652f\u6301 Replication Controller\u3001Deployment \u548c Replicaset)\u3002 \u63a7\u5236\u7ba1\u7406\u5668\u9ed8\u8ba4\u6bcf\u9694 30s \u67e5\u8be2 Metrics \u7684\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5 (\u53ef\u4ee5\u901a\u8fc7 --horizontal-pod-autoscaler-sync-period \u4fee\u6539) \u652f\u6301\u4e09\u79cd Metrics \u7c7b\u578b \u9884\u5b9a\u4e49 Metrics (\u6bd4\u5982 Pod \u7684 CPU)\u4ee5\u5229\u7528\u7387\u7684\u65b9\u5f0f\u8ba1\u7b97 \u81ea\u5b9a\u4e49\u7684 Pod Metrics\uff0c\u4ee5\u539f\u59cb\u503c (Raw Value) \u7684\u65b9\u5f0f\u8ba1\u7b97 \u81ea\u5b9a\u4e49\u7684 Object Metrics \u652f\u6301\u4e24\u79cd Metrics \u67e5\u8be2\u65b9\u5f0f :Heapster \u548c\u81ea\u5b9a\u4e49\u7684 REST API \u652f\u6301\u591a Metrics \u4f60\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6765\u521b\u5efa HPA\uff1a $ kubectl autoscale deployment php-apache --cpu-percent=50 --min=1 --max=10 Service Account Service account \u662f\u4e3a\u4e86\u65b9\u4fbf Pod \u91cc\u9762\u7684\u8fdb\u7a0b\u8c03\u7528 Kubernetes API \u6216\u5176\u4ed6\u5916\u90e8\u670d\u52a1\u800c\u8bbe\u8ba1\u7684\u3002 \u6388\u6743 Service Account \u4e3a\u670d\u52a1\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u4fbf\u7684\u8ba4\u8bc1\u673a\u5236\uff0c\u4f46\u5b83\u4e0d\u5173\u5fc3\u6388\u6743\u7684\u95ee\u9898\u3002\u53ef\u4ee5\u914d\u5408 RBAC (Role Based Access Control) \u6765\u4e3a Service Account \u9274\u6743\uff0c\u901a\u8fc7\u5b9a\u4e49 Role\u3001RoleBinding\u3001ClusterRole\u3001ClusterRoleBinding \u6765\u5bf9 sa \u8fdb\u884c\u6388\u6743\u3002 Secret \u5bc6\u94a5 Sercert \u5bc6\u94a5\u89e3\u51b3\u4e86\u5bc6\u7801\u3001Token\u3001\u5bc6\u94a5\u7b49\u654f\u611f\u6570\u636e\u7684\u914d\u7f6e\u95ee\u9898\uff0c\u800c\u4e0d\u9700\u8981\u628a\u8fd9\u4e9b\u654f\u611f\u6570\u636e\u66b4\u9732\u5230\u955c\u50cf\u6216\u8005 Pod Spec \u4e2d\u3002Secret \u53ef\u4ee5\u4ee5 Volume \u6216\u8005\u73af\u5883\u53d8\u91cf\u7684\u65b9\u5f0f\u4f7f\u7528\u3002 \u6709\u5982\u4e0b\u4e09\u79cd\u7c7b\u578b\uff1a Service Account: \u7528\u6765\u8bbf\u95ee Kubernetes API\uff0c\u7531 Kubernetes \u81ea\u52a8\u521b\u5efa\uff0c\u5e76\u4e14\u4f1a\u81ea\u52a8\u6302\u8f7d\u5230 Pod \u7684 /run/secrets/kubernetes.io/serviceaccount \u76ee\u5f55\u4e2d; Opaque: Base64 \u7f16\u7801\u683c\u5f0f\u7684 Secret\uff0c\u7528\u6765\u5b58\u50a8\u5bc6\u7801\u3001\u5bc6\u94a5\u7b49; kubernetes.io/dockerconfigjson: \u7528\u6765\u5b58\u50a8\u79c1\u6709 Docker Registry \u7684\u8ba4\u8bc1\u4fe1\u606f\u3002 Kubernetes \u63a5\u53e3\u673a\u5236 CRI(\u5bb9\u5668\u8fd0\u884c\u65f6\u63a5\u53e3, Container Runtime Interface) CNI(\u5bb9\u5668\u7f51\u7edc\u63a5\u53e3, Container Network Interface) CSI(\u5bb9\u5668\u5b58\u50a8\u63a5\u53e3, Container Storage Interface) SecurityContext Security Context \u7684\u76ee\u7684\u662f\u9650\u5236\u4e0d\u53ef\u4fe1\u5bb9\u5668\u7684\u884c\u4e3a\uff0c\u4fdd\u62a4\u7cfb\u7edf\u548c\u5176\u4ed6\u5bb9\u5668\u4e0d\u53d7\u5176\u5f71\u54cd\u3002 Kubernetes \u63d0\u4f9b\u4e86\u4e09\u79cd\u914d\u7f6e Security Context \u7684\u65b9\u6cd5\uff1a Container-level Security Context\uff1a\u4ec5\u5e94\u7528\u5230\u6307\u5b9a\u7684\u5bb9\u5668 Pod-level Security Context\uff1a\u5e94\u7528\u5230 Pod \u5185\u6240\u6709\u5bb9\u5668\u4ee5\u53ca Volume Pod Security Policies\uff08PSP\uff09\uff1a\u5e94\u7528\u5230\u96c6\u7fa4\u5185\u90e8\u6240\u6709 Pod \u4ee5\u53ca Volume 1 SecurityContext \u6709\u4ec0\u4e48\u7528? \u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u7ed9\u8fdb\u7a0b\u6dfb\u52a0\u90e8\u5206 Linux Capabilities \u6743\u9650(\u6ce8\u610f\u4e0d\u4e00\u5b9a\u662f\u5168\u90e8 ROOT \u6743\u9650) \u5f53\u7136\u4e5f\u53ef\u4ee5\u7ed9 Pod \u6216\u8005 Container \u6dfb\u52a0\u5bbf\u4e3b\u673a ROOT \u6743\u9650. \u5173\u4e8e Linux Capabilities Linux Capabilities \u4e3b\u8981\u4f5c\u7528\u5c31\u662f\u53ef\u4ee5\u907f\u514d\u8ba9\u53ef\u6267\u884c\u6587\u4ef6\u52a0\u4e0a setuid. \u4e3e\u4e2a\u4f8b\u5b50, \u6bd4\u5982/usr/bin/ping \u52a0\u4e0a setuid \u6743\u9650\u540e , \u7cfb\u7edf\u4e0a\u4efb\u4f55\u7528\u6237\u542f\u7528 ping \u8fdb\u7a0b\u65f6, \u6bcf\u4e2a ping \u8fdb\u7a0b\u90fd\u4f1a\u5728\u6267\u884c\u65f6\u62e5\u6709 root \u6743\u9650. \u548b\u770b\u4e0a\u53bb\u6ca1\u5565\u95ee\u9898, \u95ee\u9898\u5728\u4e8e\u67d0\u4e9b\u8f6f\u4ef6\u53ef\u80fd\u51fa\u73b0 BUG(ping \u4e5f\u6709\u53ef\u80fd), \u51fa\u73b0 BUG \u7684\u65f6\u5019\u5c31\u53ef\u80fd\u5bfc\u81f4\u975e\u6cd5\u7528\u6237\u83b7\u5f97 ROOT \u6743\u9650, \u53bb\u6389/usr/bin/ping \u7684 setuid \u6743\u9650\u540e, \u975e ROOT \u7528\u6237\u542f\u52a8 ping \u8fdb\u7a0b\u5c31\u4f1a\u53d1\u73b0\u65e0\u6cd5\u7533\u8bf7 icmp socket Linux Capabilities \u5219\u8fdb\u4e00\u6b65\u7ec6\u5316\u4e86\u8fd9\u4e2a\u6743\u9650, \u53ef\u4ee5\u53ea\u7ed9/usr/bin/ping \u52a0\u4e0a\u7533\u8bf7 icmp socket \u7684\u6743\u9650. (\u6ce8\u610f icmp socket \u6743\u9650\u548c tcp socket \u6743\u9650\u662f\u4e0d\u540c\u7684). \u8fd9\u6837\u5c31\u7b97\u662f ping \u4e8c\u8fdb\u5236\u6587\u4ef6\u51fa\u73b0 BUG, \u90a3\u4e48\u975e ROOT \u7528\u6237\u4e5f\u65e0\u6cd5\u83b7\u53d6\u5168\u90e8 ROOT \u6743\u9650, \u907f\u514d\u4f7f\u7528 setuid \u6743\u9650.","title":"\u7b2c\u56db\u7bc7 Kubernetes\u57fa\u7840\u6982\u5ff5"},{"location":"chapter_10/4_kubernetes_basic_concepts/#kubernetes","text":"\u4e3b\u8981\u529f\u80fd\u5305\u62ec: \u57fa\u4e8e\u5bb9\u5668\u7684\u5e94\u7528\u90e8\u7f72\u3001\u7ef4\u62a4\u548c\u6eda\u52a8\u5347\u7ea7 \u8d1f\u8f7d\u5747\u8861\u548c\u670d\u52a1\u53d1\u73b0 \u8de8\u673a\u5668\u548c\u8de8\u5730\u533a\u7684\u96c6\u7fa4\u8c03\u5ea6 \u81ea\u52a8\u4f38\u7f29 \u65e0\u72b6\u6001\u670d\u52a1\u548c\u6709\u72b6\u6001\u670d\u52a1 \u5e7f\u6cdb\u7684 Volume \u652f\u6301 \u63d2\u4ef6\u673a\u5236\u4fdd\u8bc1\u6269\u5c55\u6027","title":"Kubernetes \u7684\u4e3b\u8981\u529f\u80fd"},{"location":"chapter_10/4_kubernetes_basic_concepts/#master-node","text":"Master \u8d1f\u8d23\u7ba1\u7406\u6574\u4e2a\u96c6\u7fa4\u3002 Master \u534f\u8c03\u96c6\u7fa4\u4e2d\u7684\u6240\u6709\u6d3b\u52a8\uff0c\u4f8b\u5982\u8c03\u5ea6\u5e94\u7528\u3001\u7ef4\u62a4\u5e94\u7528\u7684\u6240\u9700\u72b6\u6001\u3001\u5e94\u7528\u6269\u5bb9\u4ee5\u53ca\u63a8\u51fa\u65b0\u7684\u66f4\u65b0\u3002 Node \u662f\u4e00\u4e2a\u865a\u62df\u673a\u6216\u8005\u7269\u7406\u673a\uff0c\u5b83\u5728 Kubernetes \u96c6\u7fa4\u4e2d\u5145\u5f53\u5de5\u4f5c\u673a\u5668\u7684\u89d2\u8272 \u6bcf\u4e2a Node \u90fd\u6709 Kubelet , \u5b83\u7ba1\u7406 Node \u800c\u4e14\u662f Node \u4e0e Master \u901a\u4fe1\u7684\u4ee3\u7406\u3002 Node \u8fd8\u5e94\u8be5\u5177\u6709\u7528\u4e8e\u5904\u7406\u5bb9\u5668\u64cd\u4f5c\u7684\u5de5\u5177\uff0c\u4f8b\u5982 Docker \u6216 rkt \u3002\u5904\u7406\u751f\u4ea7\u7ea7\u6d41\u91cf\u7684 Kubernetes \u96c6\u7fa4\u81f3\u5c11\u5e94\u5177\u6709\u4e09\u4e2a Node \u3002","title":"Master \u548c Node \u8282\u70b9"},{"location":"chapter_10/4_kubernetes_basic_concepts/#pod","text":"A Pod is the basic execution unit of a Kubernetes application. Each Pod represents a part of a workload that is running on your cluster. pod ,\u662f\u96c6\u7fa4\u5185\u7684\u4e00\u4e2a\u6700\u5c0f\u7684\u8fd0\u884c\u5b9e\u4f8b\u3001\u6700\u5c0f\u7684\u8c03\u5ea6\u5355\u4f4d\u3002 \u4e00\u4e2a pod \u662f\u5178\u578b\u7684\u53ef\u591a\u5e38\u4e00\u6982\u5ff5\uff0c\u4e00\u4e2a pod \u91cc\u53ef\u4ee5\u8fd0\u884c\u591a\u4e2a docker \u5bb9\u5668, \u4f46\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u5e38\u5e38\u662f\u4e00\u4e2a pod \u8fd0\u884c\u4e00\u4e2a docker \u5bb9\u5668 Pod \u662f\u4e00\u7ec4\u7d27\u5bc6\u5173\u8054\u7684\u5bb9\u5668\u96c6\u5408\uff0c\u652f\u6301\u591a\u4e2a\u5bb9\u5668\u5728\u4e00\u4e2a Pod \u4e2d\u5171\u4eab\u7f51\u7edc\u548c\u6587\u4ef6\u7cfb\u7edf\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fdb\u7a0b\u95f4\u901a\u4fe1\u548c\u6587\u4ef6\u5171\u4eab\u8fd9\u79cd\u7b80\u5355\u9ad8\u6548\u7684\u65b9\u5f0f\u5b8c\u6210\u670d\u52a1\u3002Pod \u662f Kubernetes \u8c03\u5ea6\u7684\u57fa\u672c\u5355\u4f4d\uff0cPod \u7684\u8bbe\u8ba1\u7406\u5ff5\u662f \u6bcf\u4e2a Pod \u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684 IP \u3002","title":"Pod"},{"location":"chapter_10/4_kubernetes_basic_concepts/#pod_1","text":"\u5305\u542b\u591a\u4e2a\u5171\u4eab IPC\u3001Network \u548c UTC Namespace \u7684\u5bb9\u5668\uff0c\u53ef\u76f4\u63a5\u901a\u8fc7 Localhost \u901a\u4fe1 \u6240\u6709 Pod \u5185\u5bb9\u5668\u90fd\u53ef\u4ee5\u8bbf\u95ee\u5171\u4eab\u7684 Volume\uff0c\u53ef\u4ee5\u8bbf\u95ee\u5171\u4eab\u6570\u636e \u4f18\u96c5\u7ec8\u6b62\uff1aPod \u5220\u9664\u7684\u65f6\u5019\u5148\u7ed9\u5176\u5185\u7684\u8fdb\u7a0b\u53d1\u9001 SIGTERM\uff0c\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4 (Grace Period) \u540e\u624d\u5f3a\u5236\u505c\u6b62\u4f9d\u7136\u8fd8\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b \u7279\u6743\u5bb9\u5668 (\u901a\u8fc7 SecurityContext \u914d\u7f6e) \u5177\u6709\u6539\u53d8\u7cfb\u7edf\u914d\u7f6e\u7684\u6743\u9650 ( \u5728\u7f51\u7edc\u63d2\u4ef6\u4e2d\u5927\u91cf\u5e94\u7528 ) \u652f\u6301\u4e09\u79cd\u91cd\u542f\u7b56\u7565\uff08restartPolicy\uff09\uff0c\u5206\u522b\u662f\uff1aAlways\u3001OnFailure\u3001Never \u652f\u6301\u4e09\u79cd\u955c\u50cf\u62c9\u53d6\u7b56\u7565\uff08imagePullPolicy \uff09\uff0c\u5206\u522b\u662f\uff1aAlways\u3001Never\u3001IfNotPresent \u8d44\u6e90\u9650\u5236\uff0cKubernetes \u901a\u8fc7 CGroup \u9650\u5236\u5bb9\u5668\u7684 CPU \u4ee5\u53ca\u5185\u5b58\u7b49\u8d44\u6e90\uff0c\u53ef\u4ee5\u8bbe\u7f6e Request \u4ee5\u53ca Limit \u503c \u5065\u5eb7\u68c0\u67e5\uff0c\u63d0\u4f9b\u4e24\u79cd\u5065\u5eb7\u68c0\u67e5\u63a2\u9488\uff0c\u5206\u522b\u662f LivenessProbe \u548c RedinessProbe\u3002\u524d\u8005\u7528\u4e8e\u63a2\u6d4b\u5bb9\u5668\u662f\u5426\u5b58\u6d3b\uff0c\u5982\u679c\u63a2\u6d4b\u5931\u8d25\uff0c\u5219\u6839\u636e\u91cd\u542f\u7b56\u7565\u8fdb\u884c\u91cd\u542f\u64cd\u4f5c\u3002\u540e\u8005\u7528\u4e8e\u68c0\u67e5\u5bb9\u5668\u72b6\u6001\u662f\u5426\u6b63\u5e38\uff0c\u5982\u679c\u68c0\u67e5\u5bb9\u5668\u72b6\u6001\u4e0d\u6b63\u5e38\uff0c\u5219\u8bf7\u6c42\u4e0d\u4f1a\u5230\u8fbe\u8be5 Pod Init Container \u5728\u6240\u6709\u5bb9\u5668\u8fd0\u884c\u4e4b\u524d\u6267\u884c\uff0c\u5e38\u7528\u6765\u521d\u59cb\u5316\u914d\u7f6e \u5bb9\u5668\u751f\u547d\u5468\u671f\u94a9\u5b50\u51fd\u6570\uff0c\u7528\u4e8e\u76d1\u542c\u5bb9\u5668\u751f\u547d\u5468\u671f\u7684\u7279\u5b9a\u4e8b\u4ef6\uff0c\u5e76\u5728\u4e8b\u4ef6\u53d1\u751f\u65f6\u6267\u884c\u5df2\u6ce8\u518c\u7684\u56de\u8c03\u51fd\u6570\uff0c\u652f\u6301\u4e24\u79cd\u94a9\u5b50\u51fd\u6570\uff1apostStart \u548c preStop\uff0c\u524d\u8005\u662f\u5728\u5bb9\u5668\u542f\u52a8\u540e\u6267\u884c\uff0c\u540e\u8005\u662f\u5728\u5bb9\u5668\u505c\u6b62\u524d\u6267\u884c","title":"Pod \u5177\u6709\u5982\u4e0b\u7279\u5f81\uff1a"},{"location":"chapter_10/4_kubernetes_basic_concepts/#1-init-containers","text":"Init Containers \u4ecb\u7ecd 1 \u4e00\u4e2a Pod \u53ef\u4ee5\u7531\u591a\u4e2a App Container \u548c\u4e00\u4e2a\u6216\u8005\u591a\u4e2a Init Container 2 Init Container \u548c App Container \u533a\u522b: 2.1 Init Container \u7684\u76ee\u6807\u5c31\u662f\u8fd0\u884c\u5230\u6b63\u5e38\u7ed3\u675f. \u5982\u679c\u4e00\u4e2a Init Container \u6ca1\u6709\u8fd0\u884c\u5230\u6b63\u5e38\u7ed3\u675f, \u9ed8\u8ba4\u60c5\u51b5\u4e0b Kubelet \u4f1a\u4e0d\u505c\u5730\u91cd\u542f\u8be5 Pod. 2.2 \u5982\u679c\u6709\u591a\u4e2a Init Container, \u5219\u5fc5\u987b\u524d\u4e00\u4e2a\u8fd0\u884c\u5b8c\u6210, \u624d\u80fd\u542f\u52a8\u4e0b\u4e00\u4e2a. 3 Init Container \u5e94\u7528\u573a\u666f(\u4e3b\u8981\u8fd8\u662f\u901a\u7528\u7c7b\u3001\u8fd0\u7ef4\u7c7b\u64cd\u4f5c\u96c6\u6210\u5230\u4e00\u8d77, \u548c\u4e1a\u52a1\u8fdb\u884c\u5206\u5272): 3.1 \u63a2\u6d4b\u4f9d\u8d56\u670d\u52a1(\u4e0b\u6e38)\u662f\u5426\u5df2\u7ecf Ready 3.2 \u5411\u670d\u52a1\u4e2d\u5fc3\u6ce8\u518c\u672c Pod","title":"1 Init Containers"},{"location":"chapter_10/4_kubernetes_basic_concepts/#2-container","text":"","title":"2 Container"},{"location":"chapter_10/4_kubernetes_basic_concepts/#21-image","text":"IfNotPresent the image is pulled only if it is not already present locally. Always every time the kubelet launches a container, the kubelet queries the container image registry to resolve the name to an image digest. If the kubelet has a container image with that exact digest cached locally, the kubelet uses its cached image; otherwise, the kubelet pulls the image with the resolved digest, and uses that image to launch the container. Never the kubelet does not try fetching the image. If the image is somehow already present locally, the kubelet attempts to start the container; otherwise, startup fails. Image \u62c9\u53d6\u7b56\u7565","title":"2.1 Image \u62c9\u53d6\u7b56\u7565"},{"location":"chapter_10/4_kubernetes_basic_concepts/#22-container","text":"PostStart PreStop Container \u751f\u547d\u5468\u671f\u52fe\u5b50","title":"2.2 Container \u751f\u547d\u5468\u671f\u52fe\u5b50"},{"location":"chapter_10/4_kubernetes_basic_concepts/#23-termination-message","text":"1 \u4e3a\u4ec0\u4e48\u9700\u8981 termination message\uff1f \u5f53 Pod \u5f02\u5e38\u9000\u51fa\u65f6, \u6211\u4eec\u9700\u8981\u52a0\u901f\u95ee\u9898\u5b9a\u4f4d. \u56e0\u6b64\u9700\u8981\u4e13\u95e8\u7684 termination message, \u76f4\u63a5\u4ece container \u8fd9\u8fb9\u4f20\u9012\u7ed9 Kubectl \u547d\u4ee4 2 \u600e\u4e48\u8bfb\u548c\u5199 termination message Writing and reading a termination message \u53c2\u8003 2","title":"2.3 \u5173\u4e8e termination message"},{"location":"chapter_10/4_kubernetes_basic_concepts/#3-pod-and-container","text":"Pod and container logs","title":"3 Pod and Container \u65e5\u5fd7"},{"location":"chapter_10/4_kubernetes_basic_concepts/#node","text":"Node \u662f Pod \u8fd0\u884c\u7684\u8f7d\u4f53\u3001\u53ef\u4ee5\u662f\u7269\u7406\u673a \u3001\u4e5f\u53ef\u4ee5\u662f\u865a\u62df\u673a . Node \u672c\u8d28\u4e0a\u4e0d\u662f Kubernetes \u6765\u521b\u5efa\u7684\uff0c Kubernetes \u53ea\u662f\u7ba1\u7406 Node \u4e0a\u7684\u8d44\u6e90\u3002\u4e3a\u4e86\u7ba1\u7406 Pod\uff0c\u6bcf\u4e2a Node \u8282\u70b9\u4e0a\u81f3\u5c11\u9700\u8981\u8fd0\u884c Container Runtime\uff08Docker\uff09 \u3001 Kubelet \u548c Kube-proxy \u670d\u52a1\u3002","title":"Node"},{"location":"chapter_10/4_kubernetes_basic_concepts/#pod-node-2","text":"Node Selector(\u6839\u636e\u5bbf\u4e3b\u673a\u6807\u7b7e,\u9009\u62e9\u5408\u9002\u7684\u5bbf\u4e3b\u673a) Node \u8282\u70b9\u5e38\u7528\u7684\u64cd\u4f5c\u662f\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u8c03\u5ea6\u548c\u4e0d\u53ef\u8c03\u5ea6. Taint(\u6c61\u70b9) \u4f7f\u7528 kubectl taint \u547d\u4ee4\u53ef\u4ee5\u7ed9\u67d0\u4e2a Node \u8282\u70b9\u8bbe\u7f6e\u6c61\u70b9\uff0cNode \u88ab\u8bbe\u7f6e\u4e0a\u6c61\u70b9\u4e4b\u540e\u5c31\u548c Pod \u4e4b\u95f4\u5b58\u5728\u4e86\u4e00\u79cd\u76f8\u65a5\u7684\u5173\u7cfb\uff0c\u53ef\u4ee5\u8ba9 Node \u62d2\u7edd Pod \u7684\u8c03\u5ea6\u6267\u884c\uff0c\u751a\u81f3\u5c06 Node \u5df2\u7ecf\u5b58\u5728\u7684 Pod \u9a71\u9010\u51fa\u53bb\u3002\u6bcf\u4e2a\u6c61\u70b9\u7684\u7ec4\u6210\uff1akey=value:effect","title":"Pod \u9009\u62e9 Node \u65f6\u5e38\u7528\u7684 2 \u5927\u7c7b\u6280\u80fd"},{"location":"chapter_10/4_kubernetes_basic_concepts/#namespace","text":"Kubernetes \u4e2d\u5bf9\u4e00\u7ec4\u8d44\u6e90\u548c\u5bf9\u8c61\u7684\u62bd\u8c61\u96c6\u5408\uff0c\u6bd4\u5982\u53ef\u4ee5\u7528\u6765\u5c06\u7cfb\u7edf\u5185\u90e8\u7684\u5bf9\u8c61\u5212\u5206\u4e3a\u4e0d\u540c\u7684\u9879\u76ee\u7ec4\u6216\u8005\u7528\u6237\u7ec4\u3002\u5e38\u89c1\u7684 Pod \u3001 Service \u3001 ReplicaSet \u548c Deployment \u3001 ConfigMap \u3001 Secret \u7b49\u90fd\u662f\u5c5e\u4e8e\u67d0\u4e00\u4e2a Namespace \u7684 (\u9ed8\u8ba4\u662f default)\uff0c\u800c Node , PersistentVolumes \u7b49\u5219\u4e0d\u5c5e\u4e8e\u4efb\u4f55 Namespace \u3002","title":"Namespace\uff08\u547d\u540d\u7a7a\u95f4\uff09"},{"location":"chapter_10/4_kubernetes_basic_concepts/#_1","text":"\u547d\u540d\u7a7a\u95f4\uff08namespace\uff09\u662f Kubernetes \u63d0\u4f9b\u7684\u7ec4\u7ec7\u673a\u5236\uff0c\u7528\u4e8e\u7ed9\u96c6\u7fa4\u4e2d\u7684\u4efb\u4f55\u5bf9\u8c61\u7ec4\u8fdb\u884c\u5206\u7c7b\u3001\u7b5b\u9009\u548c\u7ba1\u7406\u3002\u6bcf\u4e00\u4e2a\u6dfb\u52a0\u5230 Kubernetes \u96c6\u7fa4\u7684\u5de5\u4f5c\u8d1f\u8f7d\u5fc5\u987b\u653e\u5728\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u3002 \u547d\u540d\u7a7a\u95f4\u4e3a\u96c6\u7fa4\u4e2d\u7684\u5bf9\u8c61\u540d\u79f0\u8d4b\u4e88\u4f5c\u7528\u57df\u3002\u867d\u7136\u5728\u547d\u540d\u7a7a\u95f4\u4e2d\u540d\u79f0\u5fc5\u987b\u662f\u552f\u4e00\u7684\uff0c\u4f46\u662f\u76f8\u540c\u7684\u540d\u79f0\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u4f7f\u7528\u3002\u8fd9\u5bf9\u4e8e\u67d0\u4e9b\u573a\u666f\u6765\u8bf4\u53ef\u80fd\u5e2e\u52a9\u5f88\u5927\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f7f\u7528\u547d\u540d\u7a7a\u95f4\u6765\u5212\u5206\u5e94\u7528\u7a0b\u5e8f\u751f\u547d\u5468\u671f\u73af\u5883\uff08\u5982\u5f00\u53d1\u3001staging\u3001\u751f\u4ea7\uff09\uff0c\u5219\u53ef\u4ee5\u5728\u6bcf\u4e2a\u73af\u5883\u4e2d\u7ef4\u62a4\u5229\u7528\u540c\u6837\u7684\u540d\u79f0\u7ef4\u62a4\u76f8\u540c\u5bf9\u8c61\u7684\u526f\u672c\u3002 \u547d\u540d\u7a7a\u95f4\u8fd8\u53ef\u4ee5\u8ba9\u7528\u6237\u8f7b\u677e\u5730\u5c06\u7b56\u7565\u5e94\u7528\u5230\u96c6\u7fa4\u7684\u5177\u4f53\u90e8\u5206\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49 ResourceQuota \u5bf9\u8c61\u6765\u63a7\u5236\u8d44\u6e90\u7684\u4f7f\u7528\uff0c\u8be5\u5bf9\u8c61\u5728\u6bcf\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u57fa\u7840\u4e0a\u8bbe\u7f6e\u4e86\u4f7f\u7528\u8d44\u6e90\u7684\u9650\u5236\u3002\u7c7b\u4f3c\u5730\uff0c\u5f53\u5728\u96c6\u7fa4\u4e0a\u4f7f\u7528\u652f\u6301\u7f51\u7edc\u7b56\u7565\u7684 CNI\uff08\u5bb9\u5668\u7f51\u7edc\u63a5\u53e3\uff09\u65f6\uff0c\u6bd4\u5982 Calico \u6216 Canal\uff08calico \u7528\u4e8e\u7b56\u7565\uff0cflannel \u7528\u4e8e\u7f51\u7edc\uff09\u3002\u4f60\u53ef\u4ee5\u5c06 NetworkPolicy \u5e94\u7528\u5230\u547d\u540d\u7a7a\u95f4\uff0c\u5176\u4e2d\u7684\u89c4\u5219\u5b9a\u4e49\u4e86 pod \u4e4b\u95f4\u5982\u4f55\u5f7c\u6b64\u901a\u4fe1\u3002\u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u7b56\u7565\u3002 \u4f7f\u7528\u547d\u540d\u7a7a\u95f4\u6700\u5927\u7684\u597d\u5904\u4e4b\u4e00\u662f\u80fd\u591f\u5229\u7528 Kubernetes RBAC\uff08\u57fa\u4e8e\u89d2\u8272\u7684\u8bbf\u95ee\u63a7\u5236\uff09\u3002RBAC \u5141\u8bb8\u60a8\u5728\u5355\u4e2a\u540d\u79f0\u4e0b\u5f00\u53d1\u89d2\u8272\uff0c\u8fd9\u6837\u5c06\u6743\u9650\u6216\u529f\u80fd\u5217\u8868\u5206\u7ec4\u3002ClusterRole \u5bf9\u8c61\u7528\u4e8e\u5b9a\u4e49\u96c6\u7fa4\u89c4\u6a21\u7684\u4f7f\u7528\u6a21\u5f0f\uff0c\u800c\u89d2\u8272\u5bf9\u8c61\u7c7b\u578b\uff08Role object type\uff09\u5e94\u7528\u4e8e\u5177\u4f53\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u4ece\u800c\u63d0\u4f9b\u66f4\u597d\u7684\u63a7\u5236\u548c\u7c92\u5ea6\u3002\u5728\u89d2\u8272\u521b\u5efa\u540e\uff0cRoleBinding \u53ef\u4ee5\u5c06\u5b9a\u4e49\u7684\u529f\u80fd\u6388\u4e88\u5355\u4e2a\u547d\u540d\u7a7a\u95f4\u4e0a\u4e0b\u6587\u4e2d\u7684\u5177\u4f53\u5177\u4f53\u7528\u6237\u6216\u7528\u6237\u7ec4\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u4f7f\u5f97\u96c6\u7fa4\u64cd\u4f5c\u8005\u80fd\u591f\u5c06\u76f8\u540c\u7684\u7b56\u7565\u6620\u5c04\u5230\u7ec4\u7ec7\u597d\u7684\u8d44\u6e90\u96c6\u5408\u3002","title":"\u4ec0\u4e48\u662f\u547d\u540d\u7a7a\u95f4\uff0c\u4e3a\u4ec0\u4e48\u5b83\u5f88\u91cd\u8981\uff1f"},{"location":"chapter_10/4_kubernetes_basic_concepts/#_2","text":"\u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u53ef\u4ee5\u6709 \u4e0d\u540c\u7684\u7f51\u7edc\u7b56\u7565 \u4e0d\u540c\u7684\u8d44\u6e90\u9650\u5236(ResourceQuota) \u4e0d\u540c\u7684\u7528\u6237\u6743\u9650(RBAC)","title":"\u7b80\u800c\u8a00\u4e4b"},{"location":"chapter_10/4_kubernetes_basic_concepts/#3","text":"\u547d\u540d\u7a7a\u95f4\u662f\u4e00\u79cd\u975e\u5e38\u7075\u6d3b\u7684\u7279\u6027\uff0c\u5b83\u4e0d\u5f3a\u5236\u4f7f\u7528\u7279\u5b9a\u7684\u7ed3\u6784\u6216\u7ec4\u7ec7\u6a21\u5f0f\u3002\u4e0d\u8fc7\u5c3d\u7ba1\u5982\u6b64\uff0c\u8fd8\u662f\u6709\u8bb8\u591a\u5728\u56e2\u961f\u5185\u5e38\u4f7f\u7528\u7684\u6a21\u5f0f\u3002","title":"\u5e38\u89c1\u7684\u547d\u540d\u7a7a\u95f4\u4f7f\u7528\u6a21\u5f0f\uff083 \u79cd\uff09"},{"location":"chapter_10/4_kubernetes_basic_concepts/#1","text":"\u5728\u8bbe\u7f6e\u547d\u540d\u7a7a\u95f4\u65f6\u6709\u4e00\u4e2a\u60ef\u4f8b\u662f\uff0c\u4e3a\u6bcf\u4e2a\u5355\u72ec\u7684\u9879\u76ee\u6216\u8005\u56e2\u961f\u521b\u5efa\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u3002\u8fd9\u548c\u6211\u4eec\u524d\u9762\u63d0\u5230\u7684\u8bb8\u591a\u547d\u540d\u7a7a\u95f4\u7684\u7279\u6027\u5f88\u597d\u7684\u7ed3\u5408\u5728\u4e86\u4e00\u8d77\u3002 \u901a\u8fc7\u7ed9\u56e2\u961f\u63d0\u4f9b\u4e13\u95e8\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u4f60\u53ef\u4ee5\u7528 RBAC \u7b56\u7565\u59d4\u6258\u67d0\u4e9b\u529f\u80fd\u6765\u5b9e\u73b0\u81ea\u6211\u7ba1\u7406\u548c\u81ea\u52a8\u5316\u3002\u6bd4\u5982\u4ece\u547d\u540d\u7a7a\u95f4\u7684 RoleBinding \u5bf9\u8c61\u4e2d\u6dfb\u52a0\u6216\u5220\u9664\u6210\u5458\u5c31\u662f\u5bf9\u56e2\u961f\u8d44\u6e90\u8bbf\u95ee\u7684\u4e00\u79cd\u7b80\u5355\u65b9\u6cd5\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u7ed9\u56e2\u961f\u548c\u9879\u76ee\u8bbe\u7f6e\u8d44\u6e90\u914d\u989d\u4e5f\u975e\u5e38\u6709\u7528\u3002\u6709\u4e86\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4f60\u53ef\u4ee5\u6839\u636e\u7ec4\u7ec7\u7684\u4e1a\u52a1\u9700\u6c42\u548c\u4f18\u5148\u7ea7\u5408\u7406\u5730\u8bbf\u95ee\u8d44\u6e90\u3002","title":"1 \u5c06\u547d\u540d\u7a7a\u95f4\u6620\u5c04\u5230\u56e2\u961f\u6216\u9879\u76ee\u4e0a"},{"location":"chapter_10/4_kubernetes_basic_concepts/#2","text":"\u547d\u540d\u7a7a\u95f4\u975e\u5e38\u9002\u5408\u5728\u96c6\u7fa4\u4e2d\u5212\u5206 \u5f00\u53d1 \u3001 staging \u4ee5\u53ca \u751f\u4ea7\u73af\u5883 \u3002\u901a\u5e38\u60c5\u51b5\u4e0b\u6211\u4eec\u4f1a\u88ab\u5efa\u8bae\u5c06\u751f\u4ea7\u5de5\u4f5c\u8d1f\u8f7d\u90e8\u7f72\u5230\u4e00\u4e2a\u5b8c\u5168\u72ec\u7acb\u7684\u96c6\u7fa4\u4e2d\uff0c\u6765\u786e\u4fdd\u6700\u5927\u7a0b\u5ea6\u7684\u9694\u79bb\u3002\u4e0d\u8fc7\u5bf9\u4e8e\u8f83\u5c0f\u7684\u56e2\u961f\u548c\u9879\u76ee\u6765\u8bf4\uff0c\u547d\u540d\u7a7a\u95f4\u4f1a\u662f\u4e00\u4e2a\u53ef\u884c\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u548c\u524d\u9762\u7684\u7528\u4f8b\u4e00\u6837\uff0c\u7f51\u7edc\u7b56\u7565\u3001RBAC \u7b56\u7565\u4ee5\u53ca\u914d\u989d\u662f\u5b9e\u73b0\u7528\u4f8b\u7684\u91cd\u8981\u56e0\u7d20\u3002\u5728\u7ba1\u7406\u73af\u5883\u65f6\uff0c\u901a\u8fc7\u5c06\u7f51\u7edc\u9694\u79bb\u6765\u63a7\u5236\u548c\u7ec4\u4ef6\u4e4b\u95f4\u7684\u901a\u4fe1\u80fd\u529b\u662f\u5f88\u6709\u5fc5\u8981\u7684\u3002\u540c\u6837\uff0c\u547d\u540d\u7a7a\u95f4\u8303\u56f4\u7684 RBAC \u7b56\u7565\u5141\u8bb8\u8fd0\u7ef4\u4eba\u5458\u4e3a\u751f\u4ea7\u73af\u8282\u8bbe\u7f6e\u4e25\u683c\u7684\u6743\u9650\u3002\u914d\u989d\u80fd\u591f\u786e\u4fdd\u5bf9\u6700\u654f\u611f\u73af\u5883\u7684\u91cd\u8981\u8d44\u6e90\u7684\u8bbf\u95ee\u3002 \u91cd\u65b0\u4f7f\u7528\u5bf9\u8c61\u540d\u79f0\u7684\u80fd\u529b\u5728\u8fd9\u91cc\u5f88\u6709\u5e2e\u52a9\u3002\u5728\u6d4b\u8bd5\u548c\u53d1\u5e03\u5bf9\u8c61\u65f6\uff0c\u53ef\u4ee5\u628a\u5b83\u4eec\u653e\u5230\u65b0\u73af\u5883\u4e2d\uff0c\u540c\u65f6\u4fdd\u7559\u5176\u547d\u540d\u7a7a\u95f4\u3002\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u56e0\u4e3a\u73af\u5883\u4e2d\u51fa\u73b0\u76f8\u4f3c\u7684\u5bf9\u8c61\u800c\u4ea7\u751f\u7684\u6df7\u6dc6\uff0c\u5e76\u4e14\u51cf\u5c11\u8ba4\u77e5\u5f00\u9500\u3002","title":"2 \u4f7f\u7528\u547d\u540d\u7a7a\u95f4\u5bf9\u751f\u547d\u5468\u671f\u73af\u5883\u8fdb\u884c\u5206\u533a"},{"location":"chapter_10/4_kubernetes_basic_concepts/#3_1","text":"\u53e6\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u89e3\u51b3\u7684\u7528\u4f8b\u662f\u6839\u636e\u4f7f\u7528\u8005\u5bf9\u5de5\u4f5c\u8d1f\u8f7d\u8fdb\u884c\u5206\u6bb5\u3002\u6bd4\u5982\uff0c\u5982\u679c\u4f60\u7684\u96c6\u7fa4\u4e3a\u591a\u4e2a\u5ba2\u6237\u63d0\u4f9b\u57fa\u7840\u8bbe\u65bd\uff0c\u90a3\u4e48\u6309\u547d\u540d\u7a7a\u95f4\u8fdb\u884c\u5206\u6bb5\u5c31\u80fd\u591f\u5b9e\u73b0\u7ba1\u7406\u6bcf\u4e2a\u5ba2\u6237\uff0c\u540c\u65f6\u8ddf\u8e2a\u8d26\u5355\u7684\u53bb\u5411\u3002 \u53e6\u5916\uff0c\u547d\u540d\u7a7a\u95f4\u7684\u7279\u6027\u53ef\u4ee5\u8ba9\u4f60\u63a7\u5236\u7f51\u7edc\u548c\u8bbf\u95ee\u7b56\u7565\uff0c\u4e3a\u4f60\u7684\u4f7f\u7528\u8005\u5b9a\u4e49\u4e0d\u540c\u7684\u914d\u989d\u3002\u5728\u901a\u7528\u7684\u60c5\u51b5\u4e0b\uff0c\u547d\u540d\u7a7a\u95f4\u5141\u8bb8\u4f60\u4e3a\u6bcf\u4e2a\u7528\u6237\u5f00\u53d1\u548c\u90e8\u7f72\u76f8\u540c\u6a21\u677f\u5316\u73af\u5883\u7684\u4e0d\u540c\u5b9e\u4f8b\u3002\u8fd9\u79cd\u4e00\u81f4\u6027\u53ef\u4ee5\u5927\u5927\u7b80\u5316\u7ba1\u7406\u548c\u6545\u969c\u8bca\u65ad\u7684\u8fc7\u7a0b\u3002","title":"3 \u4f7f\u7528\u547d\u540d\u7a7a\u95f4\u9694\u79bb\u4e0d\u540c\u7684\u4f7f\u7528\u8005"},{"location":"chapter_10/4_kubernetes_basic_concepts/#kubernetes_1","text":"\u5728\u6211\u4eec\u8fdb\u884c\u521b\u5efa\u547d\u540d\u7a7a\u95f4\u4e4b\u524d\uff0c\u5148\u8ba8\u8bba\u4e00\u4e0b Kubernetes \u662f\u5982\u4f55\u81ea\u52a8\u8bbe\u7f6e\u5b83\u7684\u3002\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u65b0\u7684\u96c6\u7fa4\u4e0a\u6709\u4e09\u4e2a\u547d\u540d\u7a7a\u95f4\uff1a default \uff1a\u5411\u96c6\u7fa4\u4e2d\u6dfb\u52a0\u5bf9\u8c61\u800c\u4e0d\u63d0\u4f9b\u547d\u540d\u7a7a\u95f4\uff0c\u8fd9\u6837\u5b83\u4f1a\u88ab\u653e\u5165\u9ed8\u8ba4\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u3002\u5728\u521b\u5efa\u66ff\u4ee3\u7684\u547d\u540d\u7a7a\u95f4\u4e4b\u524d\uff0c\u8be5\u547d\u540d\u7a7a\u95f4\u4f1a\u5145\u5f53\u7528\u6237\u65b0\u6dfb\u52a0\u8d44\u6e90\u7684\u4e3b\u8981\u76ee\u7684\u5730\uff0c\u65e0\u6cd5\u5220\u9664\u3002 kube-public \uff1akube-public \u547d\u540d\u7a7a\u95f4\u7684\u76ee\u7684\u662f\u8ba9\u6240\u6709\u5177\u6709\u6216\u4e0d\u5177\u6709\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u90fd\u80fd\u5168\u5c40\u53ef\u8bfb\u3002\u8fd9\u5bf9\u4e8e\u516c\u5f00 bootstrap \u7ec4\u4ef6\u6240\u9700\u7684\u96c6\u7fa4\u4fe1\u606f\u975e\u5e38\u6709\u7528\u3002\u5b83\u4e3b\u8981\u662f\u7531 Kubernetes \u81ea\u5df1\u7ba1\u7406\u3002 kube-system \uff1akube-system \u547d\u540d\u7a7a\u95f4\u7528\u4e8e Kubernetes \u7ba1\u7406\u7684 Kubernetes \u7ec4\u4ef6\uff0c\u4e00\u822c\u89c4\u5219\u662f\uff0c\u907f\u514d\u5411\u8be5\u547d\u540d\u7a7a\u95f4\u6dfb\u52a0\u666e\u901a\u7684\u5de5\u4f5c\u8d1f\u8f7d\u3002\u5b83\u4e00\u822c\u7531\u7cfb\u7edf\u76f4\u63a5\u7ba1\u7406\uff0c\u56e0\u6b64\u5177\u6709\u76f8\u5bf9\u5bbd\u677e\u7684\u7b56\u7565\u3002","title":"\u7406\u89e3\u9884\u914d\u7f6e\u7684 Kubernetes \u547d\u540d\u7a7a\u95f4"},{"location":"chapter_10/4_kubernetes_basic_concepts/#namespace_1","text":"\u67e5\u8be2\u6240\u6709 Namespaces $ kubectl get namespace \u521b\u5efa Namespace$ kubectl create namespace ns-name \u5220\u9664 Namespace$ kubectl delete namespace ns-name","title":"\u5e38\u7528 Namespace \u64cd\u4f5c\uff1a"},{"location":"chapter_10/4_kubernetes_basic_concepts/#_3","text":"\u5220\u9664\u4e00\u4e2a Namespace \u4f1a\u81ea\u52a8\u5220\u9664\u6240\u6709\u5c5e\u4e8e\u8be5 Namespace \u7684\u8d44\u6e90\u3002 default \u548c kube-system \u547d\u540d\u7a7a\u95f4\u4e0d\u53ef\u5220\u9664\u3002 PersistentVolumes \u662f\u4e0d\u5c5e\u4e8e\u4efb\u4f55 Namespace \u7684\uff0c\u4f46 PersistentVolumeClaim \u662f\u5c5e\u4e8e\u67d0\u4e2a\u7279\u5b9a Namespace \u7684\u3002 Events \u662f\u5426\u5c5e\u4e8e Namespace \u53d6\u51b3\u4e8e\u4ea7\u751f events \u7684\u5bf9\u8c61\u3002","title":"\u5220\u9664\u547d\u540d\u7a7a\u95f4\u65f6\uff0c\u9700\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\uff1a"},{"location":"chapter_10/4_kubernetes_basic_concepts/#service","text":"\u662f\u5bf9\u4e00\u7ec4\u63d0\u4f9b\u76f8\u540c\u529f\u80fd\u7684 Pods \u7684\u62bd\u8c61\uff0c\u5e76\u4e3a\u4ed6\u4eec\u63d0\u4f9b\u4e00\u4e2a\u7edf\u4e00\u7684\u5165\u53e3\u3002\u501f\u52a9 Service \u5e94\u7528\u53ef\u4ee5\u65b9\u4fbf\u7684\u5b9e\u73b0\u670d\u52a1\u53d1\u73b0\u4e0e\u8d1f\u8f7d\u5747\u8861\uff0c\u5e76\u5b9e\u73b0\u5e94\u7528\u7684\u96f6\u5b95\u673a\u5347\u7ea7\u3002Service \u901a\u8fc7\u6807\u7b7e (Label) \u6765\u9009\u53d6\u540e\u7aef Pod\uff0c\u4e00\u822c\u914d\u5408 ReplicaSet \u6216\u8005 Deployment \u6765\u4fdd\u8bc1\u540e\u7aef\u5bb9\u5668\u7684\u6b63\u5e38\u8fd0\u884c\u3002 Service \u6709\u5982\u4e0b\u56db\u79cd\u7c7b\u578b\uff0c\u9ed8\u8ba4\u662f ClusterIP\uff1a ClusterIP: \u9ed8\u8ba4\u7c7b\u578b\uff0c\u81ea\u52a8\u5206\u914d\u4e00\u4e2a\u4ec5\u96c6\u7fa4\u5185\u90e8\u53ef\u4ee5\u8bbf\u95ee\u7684\u865a\u62df IP NodePort: \u5728 ClusterIP \u57fa\u7840\u4e0a\u4e3a Service \u5728\u6bcf\u53f0\u673a\u5668\u4e0a\u7ed1\u5b9a\u4e00\u4e2a\u7aef\u53e3\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7 NodeIP:NodePort \u6765\u8bbf\u95ee\u8be5\u670d\u52a1 LoadBalancer: \u5728 NodePort \u7684\u57fa\u7840\u4e0a\uff0c\u501f\u52a9 Cloud Provider \u521b\u5efa\u4e00\u4e2a\u5916\u90e8\u7684\u8d1f\u8f7d\u5747\u8861\u5668\uff0c\u5e76\u5c06\u8bf7\u6c42\u8f6c\u53d1\u5230 NodeIP:NodePort ExternalName: \u5c06\u670d\u52a1\u901a\u8fc7 DNS CNAME \u8bb0\u5f55\u65b9\u5f0f\u8f6c\u53d1\u5230\u6307\u5b9a\u7684\u57df\u540d","title":"Service"},{"location":"chapter_10/4_kubernetes_basic_concepts/#service-lb","text":"\u6709\u4e86 service \u4e4b\u540e\uff0c\u96c6\u7fa4\u5185\u90e8\u4e0d\u540c\u7684 pod\uff0c\u53ef\u4ee5\u5f62\u6210\u5fae\u670d\u52a1\u67b6\u6784\u4e86 Service B \u4e3a\u524d\u7aef\u5fae\u670d\u52a1\uff0cCD EA \u7b49\u4e3a\u540e\u7aef\u5fae\u670d\u52a1\uff0c\u4ed6\u4eec\u4e4b\u95f4\u901a\u8fc7 Service\uff08\u4e5f\u5c31\u662f LB\uff09\u4e92\u76f8 \u8c03\u7528\uff0cService \u9ed8\u8ba4\u7684 cluster IP \u662f Kubernetes \u96c6\u7fa4\u91cc\u7684\u865a\u62df IP","title":"Service \u76f8\u5f53\u4e8e\u96c6\u7fa4\u5185\u90e8\u7684 LB"},{"location":"chapter_10/4_kubernetes_basic_concepts/#volume","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5bb9\u5668\u7684\u6570\u636e\u662f\u975e\u6301\u4e45\u5316\u7684\uff0c\u5bb9\u5668\u6d88\u4ea1\u4ee5\u540e\u6570\u636e\u4e5f\u4f1a\u8ddf\u7740\u4e22\u5931\u3002\u6240\u4ee5 Docker \u63d0\u4f9b\u4e86 Volume \u673a\u5236\u4ee5\u4fbf\u5c06\u6570\u636e\u6301\u4e45\u5316\u5b58\u50a8\u3002Kubernetes \u63d0\u4f9b\u4e86\u66f4\u5f3a\u5927\u7684 Volume \u673a\u5236\u548c\u63d2\u4ef6\uff0c\u89e3\u51b3\u4e86\u5bb9\u5668\u6570\u636e\u6301\u4e45\u5316\u4ee5\u53ca\u5bb9\u5668\u95f4\u5171\u4eab\u6570\u636e\u7684\u95ee\u9898\u3002 \u76ee\u524d Kubernetes \u4e3b\u8981\u652f\u6301\u4ee5\u4e0b Volume \u7c7b\u578b\uff1a emptyDir\uff1aPod \u5b58\u5728\uff0cemptyDir \u5c31\u4f1a\u5b58\u5728\u3002\u5bb9\u5668\u6302\u6389\u4e0d\u4f1a\u5f15\u8d77 emptyDir \u76ee\u5f55\u4e0b\u7684\u6570\u636e\u4e22\u5931\uff0c\u4f46\u662f Pod \u88ab\u5220\u9664\u6216\u8005\u8fc1\u79fb\uff0cemptyDir \u4e5f\u4f1a\u88ab\u5220\u9664 hostPath\uff1ahostPath \u5141\u8bb8\u6302\u8f7d Node \u4e0a\u7684\u6587\u4ef6\u7cfb\u7edf\u5230 Pod \u91cc\u9762\u53bb NFS\uff08Network File System\uff09\uff1a\u7f51\u7edc\u6587\u4ef6\u7cfb\u7edf\uff0cKubernetes \u4e2d\u901a\u8fc7\u7b80\u5355\u5730\u914d\u7f6e\u5c31\u53ef\u4ee5\u6302\u8f7d NFS \u5230 Pod \u4e2d\uff0c\u800c NFS \u4e2d\u7684\u6570\u636e\u662f\u53ef\u4ee5\u6c38\u4e45\u4fdd\u5b58\u7684\uff0c\u540c\u65f6 NFS \u652f\u6301\u540c\u65f6\u5199\u64cd\u4f5c\u3002 Glusterfs\uff1a\u540c NFS \u4e00\u6837\u662f\u4e00\u79cd\u7f51\u7edc\u6587\u4ef6\u7cfb\u7edf\uff0cKubernetes \u53ef\u4ee5\u5c06 Glusterfs \u6302\u8f7d\u5230 Pod \u4e2d\uff0c\u5e76\u8fdb\u884c\u6c38\u4e45\u4fdd\u5b58 Cephfs\uff1a\u4e00\u79cd\u5206\u5e03\u5f0f\u7f51\u7edc\u6587\u4ef6\u7cfb\u7edf\uff0c\u53ef\u4ee5\u6302\u8f7d\u5230 Pod \u4e2d\uff0c\u5e76\u8fdb\u884c\u6c38\u4e45\u4fdd\u5b58 Subpath\uff1aPod \u7684\u591a\u4e2a\u5bb9\u5668\u4f7f\u7528\u540c\u4e00\u4e2a Volume \u65f6\uff0c\u4f1a\u7ecf\u5e38\u7528\u5230 Secret\uff1a\u5bc6\u94a5\u7ba1\u7406\uff0c\u53ef\u4ee5\u5c06\u654f\u611f\u4fe1\u606f\u8fdb\u884c\u52a0\u5bc6\u4e4b\u540e\u4fdd\u5b58\u5e76\u6302\u8f7d\u5230 Pod \u4e2d PersistentVolumeClaim\uff1a\u7528\u4e8e\u5c06\u6301\u4e45\u5316\u5b58\u50a8\uff08PersistentVolume\uff09\u6302\u8f7d\u5230 Pod \u4e2d","title":"volume \u5b58\u50a8\u5377"},{"location":"chapter_10/4_kubernetes_basic_concepts/#persistentvolume-pv","text":"PersistentVolume (PV) \u662f\u96c6\u7fa4\u4e4b\u4e2d\u7684\u4e00\u5757\u7f51\u7edc\u5b58\u50a8\u3002\u8ddf Node \u4e00\u6837\uff0c\u4e5f\u662f\u96c6\u7fa4\u7684\u8d44\u6e90\u3002 PersistentVolume \u548c PersistentVolumeClaim (PVC) \u63d0\u4f9b\u4e86\u65b9\u4fbf\u7684\u6301\u4e45\u5316\u5377: PV \u63d0\u4f9b\u7f51\u7edc\u5b58\u50a8\u8d44\u6e90\uff0c\u800c PVC \u8bf7\u6c42\u5b58\u50a8\u8d44\u6e90\u5e76\u5c06\u5176\u6302\u8f7d\u5230 Pod \u4e2d\u3002","title":"PersistentVolume (PV) \u6301\u4e45\u5316\u5b58\u50a8\u5377"},{"location":"chapter_10/4_kubernetes_basic_concepts/#pv-accessmodes","text":"ReadWriteOnce (RWO): \u662f\u6700\u57fa\u672c\u7684\u65b9\u5f0f\uff0c\u53ef\u8bfb\u53ef\u5199\uff0c\u4f46\u53ea\u652f\u6301\u88ab\u5355\u4e2a Pod \u6302\u8f7d\u3002 ReadOnlyMany (ROX): \u53ef\u4ee5\u4ee5\u53ea\u8bfb\u7684\u65b9\u5f0f\u88ab\u591a\u4e2a Pod \u6302\u8f7d\u3002 ReadWriteMany (RWX): \u8fd9\u79cd\u5b58\u50a8\u53ef\u4ee5\u4ee5\u8bfb\u5199\u7684\u65b9\u5f0f\u88ab\u591a\u4e2a Pod \u5171\u4eab\u3002 \u4e0d\u662f\u6bcf\u4e00\u79cd\u5b58\u50a8\u90fd\u652f\u6301\u8fd9\u4e09\u79cd\u65b9\u5f0f\uff0c\u50cf\u5171\u4eab\u65b9\u5f0f\uff0c\u76ee\u524d\u652f\u6301\u7684\u8fd8\u6bd4\u8f83\u5c11\uff0c\u6bd4\u8f83\u5e38\u7528\u7684\u662f NFS\u3002\u5728 PVC \u7ed1\u5b9a PV \u65f6\u901a\u5e38\u6839\u636e\u4e24\u4e2a\u6761\u4ef6\u6765\u7ed1\u5b9a\uff0c \u4e00\u4e2a\u662f\u5b58\u50a8\u7684\u5927\u5c0f \uff0c \u53e6\u4e00\u4e2a\u5c31\u662f\u8bbf\u95ee\u6a21\u5f0f \u3002","title":"PV \u7684\u8bbf\u95ee\u6a21\u5f0f (accessModes) \u6709\u4e09\u79cd:"},{"location":"chapter_10/4_kubernetes_basic_concepts/#storageclass","text":"\u7b80\u5316\u63d0\u524d\u521b\u5efa PV \u7684\u8fc7\u7a0b,\u7ba1\u7406\u5458\u65e0\u9700\u63d0\u524d\u521b\u5efa\u9759\u6001 PV \u7cfb\u7edf\u4e3a PVC \u9009\u62e9\u5bf9\u5e94 PV \u65f6\uff0c\u5f88\u53ef\u80fd\u5b58\u5728 PV \u7a7a\u95f4\u5927\u4e8e PVC \u7533\u8bf7\u7684\u7a7a\u95f4\uff0c\u5b58\u5728\u8d44\u6e90\u6d6a\u8d39\u7684\u60c5\u51b5\u3002\u800c\u4f7f\u7528 StorageClass \u7684\u52a8\u6001\u5b58\u50a8\u4f9b\u5e94\u6a21\u5f0f\u5c31\u907f\u514d\u4e86\u8fd9\u79cd\u60c5\u51b5.","title":"StorageClass"},{"location":"chapter_10/4_kubernetes_basic_concepts/#configmap","text":"ConfigMap \u7528\u4e8e\u4fdd\u5b58\u914d\u7f6e\u6570\u636e\u7684\u952e\u503c\u5bf9\uff0c\u53ef\u4ee5\u7528\u6765\u4fdd\u5b58\u5355\u4e2a\u5c5e\u6027\uff0c\u4e5f\u53ef\u4ee5\u7528\u6765\u4fdd\u5b58\u914d\u7f6e\u6587\u4ef6\u3002ConfigMap \u8ddf Secret \u5f88\u7c7b\u4f3c\uff0c\u4f46\u5b83\u53ef\u4ee5\u66f4\u65b9\u4fbf\u5730\u5904\u7406\u4e0d\u5305\u542b\u654f\u611f\u4fe1\u606f\u7684\u5b57\u7b26\u4e32\u3002 ConfigMap \u53ef\u4ee5\u901a\u8fc7\u4e09\u79cd\u65b9\u5f0f\u5728 Pod \u4e2d\u4f7f\u7528\uff0c\u4e09\u79cd\u5206\u522b\u65b9\u5f0f\u4e3a: \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf \u8bbe\u7f6e\u5bb9\u5668\u547d\u4ee4\u884c\u53c2\u6570 \u5728 Volume \u4e2d\u76f4\u63a5\u6302\u8f7d\u6587\u4ef6\u6216\u76ee\u5f55\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 kubectl create configmap \u4ece\u6587\u4ef6\u3001\u76ee\u5f55\u6216\u8005 key-value \u5b57\u7b26\u4e32\u521b\u5efa\u7b49\u521b\u5efa ConfigMap\u3002\u4e5f\u53ef\u4ee5\u901a\u8fc7 kubectl create -f value.yaml \u6765\u521b\u5efa\u3002","title":"ConfigMap \u914d\u7f6e\u4e2d\u5fc3"},{"location":"chapter_10/4_kubernetes_basic_concepts/#configmap_1","text":"\u5b9e\u9645\u5e94\u7528\u4e2d\u901a\u5e38\u662f\u4e00\u4e2a namespace \u5bf9\u5e94\u4e00\u4e2a ConfigMap, NS \u7684\u540d\u79f0\u548c CM \u7684\u540d\u79f0\u76f8\u540c ConfigMap \u4e0b\u7684\u4e0d\u540c key\uff0c\u53ef\u4ee5\u7406\u89e3\u662f Linux \u7684\u4e00\u4e2a\u6587\u4ef6\u540d\uff0c\u6bd4\u5982 nginx.conf, server.conf\uff0c\u800c\u6587\u4ef6\u603b\u662f\u653e\u5728\u67d0\u4e2a \u8def\u5f84 \u4e0b\uff08\u4f8b\u5982/root/conf \u76ee\u5f55\uff09\uff0c \u8def\u5f84 \u662f\u7531 volumeMounts.\u201dmountPath\u201d\u51b3\u5b9a\u7684","title":"ConfigMap \u6700\u4f73\u5b9e\u8df5"},{"location":"chapter_10/4_kubernetes_basic_concepts/#deployment","text":"\u4e00\u822c\u60c5\u51b5\u4e0b\u6211\u4eec\u4e0d\u9700\u8981\u624b\u52a8\u521b\u5efa Pod \u5b9e\u4f8b\uff0c\u800c\u662f\u91c7\u7528\u66f4\u9ad8\u4e00\u5c42\u7684\u62bd\u8c61\u6216\u5b9a\u4e49\u6765\u7ba1\u7406 Pod\u3002\u9488\u5bf9\u65e0\u72b6\u6001\u7c7b\u578b\u7684\u5e94\u7528\uff0cKubernetes \u4f7f\u7528 Deloyment \u7684 Controller \u5bf9\u8c61\u4e0e\u4e4b\u5bf9\u5e94\u3002\u5176\u5178\u578b\u7684\u5e94\u7528\u573a\u666f\u5305\u62ec\uff1a \u5b9a\u4e49 Deployment \u6765\u521b\u5efa Pod \u548c ReplicaSet \u6eda\u52a8\u5347\u7ea7\u548c\u56de\u6eda\u5e94\u7528 \u6269\u5bb9\u548c\u7f29\u5bb9 \u6682\u505c\u548c\u7ee7\u7eed Deployment","title":"Deployment \u65e0\u72b6\u6001\u5e94\u7528"},{"location":"chapter_10/4_kubernetes_basic_concepts/#_4","text":"\u751f\u6210\u4e00\u4e2a Deployment \u5bf9\u8c61$ kubectl run www --image=10.0.0.183:5000/hanker/www:0.0.1 --port=8080 \u67e5\u627e Deployment$ kubectl get deployment --all-namespaces \u67e5\u770b\u67d0\u4e2a Deployment$ kubectl describe deployment www \u7f16\u8f91 Deployment \u5b9a\u4e49$ kubectl edit deployment www \u5220\u9664\u67d0 Deployment$ kubectl delete deployment www \u6269\u7f29\u5bb9\u64cd\u4f5c\uff0c\u5373\u4fee\u6539 Deployment \u4e0b\u7684 Pod \u5b9e\u4f8b\u4e2a\u6570$ kubectl scale deployment/www --replicas=2 \u66f4\u65b0\u955c\u50cf$ kubectl set image deployment/nginx-deployment nginx=nginx:1.9.1 \u56de\u6eda\u64cd\u4f5c$ kubectl rollout undo deployment/nginx-deployment \u67e5\u770b\u56de\u6eda\u8fdb\u5ea6$ kubectl rollout status deployment/nginx-deployment \u542f\u7528\u6c34\u5e73\u4f38\u7f29\uff08HPA - horizontal pod autoscaling\uff09\uff0c\u8bbe\u7f6e\u6700\u5c0f\u3001\u6700\u5927\u5b9e\u4f8b\u6570\u91cf\u4ee5\u53ca\u76ee\u6807 Cpu \u4f7f\u7528\u7387$ kubectl autoscale deployment nginx-deployment --min=10 --max=15 --cpu-percent=80 \u6682\u505c\u66f4\u65b0 Deployment$ kubectl rollout pause deployment/nginx-deployment \u6062\u590d\u66f4\u65b0 Deployment$ kubectl rollout resume deploy nginx","title":"\u5e38\u7528\u7684\u64cd\u4f5c\u547d\u4ee4"},{"location":"chapter_10/4_kubernetes_basic_concepts/#specstrategy","text":".spec.strategy \u6307\u65b0\u7684 Pod \u66ff\u6362\u65e7\u7684 Pod \u7684\u7b56\u7565\uff0c\u6709\u4ee5\u4e0b\u4e24\u79cd\u7c7b\u578b\uff1a RollingUpdate \u6eda\u52a8\u5347\u7ea7\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u5e94\u7528\u5728\u5347\u7ea7\u671f\u95f4\uff0c\u5bf9\u5916\u6b63\u5e38\u63d0\u4f9b\u670d\u52a1\u3002 Recreate \u91cd\u5efa\u7b56\u7565\uff0c\u5728\u521b\u5efa\u51fa\u65b0\u7684 Pod \u4e4b\u524d\u4f1a\u5148\u6740\u6389\u6240\u6709\u5df2\u5b58\u5728\u7684 Pod\u3002","title":"\u66f4\u65b0\u7b56\u7565.spec.strategy"},{"location":"chapter_10/4_kubernetes_basic_concepts/#deployment-replicaset","text":"\u4f7f\u7528 Deployment \u6765\u521b\u5efa ReplicaSet\u3002ReplicaSet \u5728\u540e\u53f0\u521b\u5efa Pod\uff0c\u68c0\u67e5\u542f\u52a8\u72b6\u6001\uff0c\u770b\u5b83\u662f\u6210\u529f\u8fd8\u662f\u5931\u8d25\u3002 \u5f53\u6267\u884c\u66f4\u65b0\u64cd\u4f5c\u65f6\uff0c\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 ReplicaSet\uff0cDeployment \u4f1a\u6309\u7167\u63a7\u5236\u7684\u901f\u7387\u5c06 Pod \u4ece\u65e7\u7684 ReplicaSet \u79fb\u52a8\u5230\u65b0\u7684 ReplicaSet \u4e2d \u4ece K8S \u4f7f\u7528\u8005\u89d2\u5ea6\u6765\u770b\uff0c\u7528\u6237\u4f1a\u76f4\u63a5\u64cd\u4f5c Deployment \u90e8\u7f72\u670d\u52a1\uff0c\u800c\u5f53 Deployment \u88ab\u90e8\u7f72\u7684\u65f6\u5019\uff0cK8S \u4f1a\u81ea\u52a8\u751f\u6210\u8981\u6c42\u7684 ReplicaSet \u548c Pod\u3002 \u5728 K8S \u5b98\u65b9\u6587\u6863\u4e2d\u4e5f\u6307\u51fa\u7528\u6237\u53ea\u9700\u8981\u5173\u5fc3 Deployment \u800c\u4e0d\u64cd\u5fc3 ReplicaSet\uff1a This actually means that you may never need to manipulate ReplicaSet objects: use a Deployment instead, and define your application in the spec section. \u8fd9\u5b9e\u9645\u4e0a\u610f\u5473\u7740\u60a8\u53ef\u80fd\u6c38\u8fdc\u4e0d\u9700\u8981\u64cd\u4f5c ReplicaSet \u5bf9\u8c61\uff1a\u76f4\u63a5\u4f7f\u7528 Deployments \u5e76\u5728\u89c4\u8303\u90e8\u5206\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u3002","title":"Deployment \u548c ReplicaSet \u4e24\u8005\u4e4b\u95f4\u7684\u5173\u7cfb"},{"location":"chapter_10/4_kubernetes_basic_concepts/#statefulset","text":"Deployments \u548c ReplicaSets \u662f\u4e3a\u65e0\u72b6\u6001\u670d\u52a1\u8bbe\u8ba1\u7684\uff0c\u90a3\u4e48 StatefulSet \u5219\u662f\u4e3a\u4e86\u6709\u72b6\u6001\u670d\u52a1\u800c\u8bbe\u8ba1\uff0c\u5176\u5e94\u7528\u573a\u666f\u5305\u62ec\uff1a \u7a33\u5b9a\u7684\u6301\u4e45\u5316\u5b58\u50a8\uff0c\u5373 Pod \u91cd\u65b0\u8c03\u5ea6\u540e\u8fd8\u662f\u80fd\u8bbf\u95ee\u5230\u76f8\u540c\u7684\u6301\u4e45\u5316\u6570\u636e\uff0c\u57fa\u4e8e PVC \u6765\u5b9e\u73b0 \u7a33\u5b9a\u7684\u7f51\u7edc\u6807\u5fd7\uff0c\u5373 Pod \u91cd\u65b0\u8c03\u5ea6\u540e\u5176 PodName \u548c HostName \u4e0d\u53d8\uff0c\u57fa\u4e8e Headless Service (\u5373\u6ca1\u6709 Cluster IP \u7684 Service )\u6765\u5b9e\u73b0 \u6709\u5e8f\u90e8\u7f72\uff0c\u6709\u5e8f\u6269\u5c55\uff0c\u5373 Pod \u662f\u6709\u987a\u5e8f\u7684\u3002\u5728\u90e8\u7f72\u6216\u8005\u6269\u5c55\u7684\u65f6\u5019\u8981\u4f9d\u636e\u5b9a\u4e49\u7684\u987a\u5e8f\u4f9d\u6b21\u8fdb\u884c\u64cd\u4f5c (\u5373\u4ece 0 \u5230 N-1\uff0c\u5728\u4e0b\u4e00\u4e2a Pod \u8fd0\u884c\u4e4b\u524d\u6240\u6709\u4e4b\u524d\u7684 Pod \u5fc5\u987b\u90fd\u662f Running \u548c Ready \u72b6\u6001)\uff0c\u57fa\u4e8e Init Containers \u6765\u5b9e\u73b0 \u6709\u5e8f\u6536\u7f29\uff0c\u6709\u5e8f\u5220\u9664 (\u5373\u4ece N-1 \u5230 0)","title":"StatefulSet \u6709\u72b6\u6001\u5e94\u7528"},{"location":"chapter_10/4_kubernetes_basic_concepts/#_5","text":"OnDelete: \u5f53 .spec.template \u66f4\u65b0\u65f6\uff0c\u5e76\u4e0d\u7acb\u5373\u5220\u9664\u65e7\u7684 Pod\uff0c\u800c\u662f\u7b49\u5f85\u7528\u6237\u624b\u52a8\u5220\u9664\u8fd9\u4e9b\u65e7 Pod \u540e\u81ea\u52a8\u521b\u5efa\u65b0 Pod\u3002\u8fd9\u662f\u9ed8\u8ba4\u7684\u66f4\u65b0\u7b56\u7565\uff0c\u517c\u5bb9 v1.6 \u7248\u672c\u7684\u884c\u4e3a RollingUpdate: \u5f53 .spec.template \u66f4\u65b0\u65f6\uff0c\u81ea\u52a8\u5220\u9664\u65e7\u7684 Pod \u5e76\u521b\u5efa\u65b0 Pod \u66ff\u6362\u3002\u5728\u66f4\u65b0\u65f6\u8fd9\u4e9b Pod \u662f\u6309\u9006\u5e8f\u7684\u65b9\u5f0f\u8fdb\u884c\uff0c\u4f9d\u6b21\u5220\u9664\u3001\u521b\u5efa\u5e76\u7b49\u5f85 Pod \u53d8\u6210 Ready \u72b6\u6001\u624d\u8fdb\u884c\u4e0b\u4e00\u4e2a Pod \u7684\u66f4\u65b0\u3002","title":"\u652f\u6301\u4e24\u79cd\u66f4\u65b0\u7b56\u7565"},{"location":"chapter_10/4_kubernetes_basic_concepts/#daemonset","text":"DaemonSet \u4fdd\u8bc1\u5728\u7279\u5b9a\u6216\u6240\u6709 Node \u8282\u70b9\u4e0a\u90fd\u8fd0\u884c\u4e00\u4e2a Pod \u5b9e\u4f8b\uff0c\u5e38\u7528\u6765\u90e8\u7f72\u4e00\u4e9b\u96c6\u7fa4\u7684\u65e5\u5fd7\u91c7\u96c6\u3001\u76d1\u63a7\u6216\u8005\u5176\u4ed6\u7cfb\u7edf\u7ba1\u7406\u5e94\u7528\u3002\u5178\u578b\u7684\u5e94\u7528\u5305\u62ec: \u65e5\u5fd7\u6536\u96c6\uff0c\u6bd4\u5982 Fluentd\uff0cLogstash \u7b49 \u7cfb\u7edf\u76d1\u63a7\uff0c\u6bd4\u5982 Prometheus Node Exporter\uff0cCollectd \u7b49 \u7cfb\u7edf\u7a0b\u5e8f\uff0c\u6bd4\u5982 Kube-Proxy\u3001Kube-Dns\u3001Glusterd\u3001Ceph\u3001Ingress-Controller \u7b49","title":"DaemonSet \u5b88\u62a4\u8fdb\u7a0b\u96c6"},{"location":"chapter_10/4_kubernetes_basic_concepts/#node_1","text":"DaemonSet \u4f1a\u5ffd\u7565 Node \u7684 unschedulable \u72b6\u6001\uff0c\u6709\u4e24\u79cd\u65b9\u5f0f\u6765\u6307\u5b9a Pod \u53ea\u8fd0\u884c\u5728\u6307\u5b9a\u7684 Node \u8282\u70b9\u4e0a: nodeSelector: \u53ea\u8c03\u5ea6\u5230\u5339\u914d\u6307\u5b9a Label \u7684 Node \u4e0a nodeAffinity: \u529f\u80fd\u66f4\u4e30\u5bcc\u7684 Node \u9009\u62e9\u5668\uff0c\u6bd4\u5982\u652f\u6301\u96c6\u5408\u64cd\u4f5c podAffinity: \u8c03\u5ea6\u5230\u6ee1\u8db3\u6761\u4ef6\u7684 Pod \u6240\u5728\u7684 Node \u4e0a \u76ee\u524d\u652f\u6301\u4e24\u79cd\u7b56\u7565 OnDelete: \u9ed8\u8ba4\u7b56\u7565\uff0c\u66f4\u65b0\u6a21\u677f\u540e\uff0c\u53ea\u6709\u624b\u52a8\u5220\u9664\u4e86\u65e7\u7684 Pod \u540e\u624d\u4f1a\u521b\u5efa\u65b0\u7684 Pod RollingUpdate: \u66f4\u65b0 DaemonSet \u6a21\u7248\u540e\uff0c\u81ea\u52a8\u5220\u9664\u65e7\u7684 Pod \u5e76\u521b\u5efa\u65b0\u7684 Pod","title":"\u6307\u5b9a Node \u8282\u70b9"},{"location":"chapter_10/4_kubernetes_basic_concepts/#ingress","text":"Kubernetes \u4e2d\u7684\u8d1f\u8f7d\u5747\u8861\u6211\u4eec\u4e3b\u8981\u7528\u5230\u4e86\u4ee5\u4e0b\u4e24\u79cd\u673a\u5236\uff1a Service\uff1a\u4f7f\u7528 Service \u63d0\u4f9b\u96c6\u7fa4\u5185\u90e8\u7684\u8d1f\u8f7d\u5747\u8861\uff0cKube-proxy \u8d1f\u8d23\u5c06 Service \u8bf7\u6c42\u8d1f\u8f7d\u5747\u8861\u5230\u540e\u7aef\u7684 Pod \u4e2d Ingress Controller\uff1a\u4f7f\u7528 Ingress \u63d0\u4f9b\u96c6\u7fa4\u5916\u90e8\u7684\u8d1f\u8f7d\u5747\u8861 Service \u548c Pod \u7684 IP \u4ec5\u53ef\u5728\u96c6\u7fa4\u5185\u90e8\u8bbf\u95ee\u3002\u96c6\u7fa4\u5916\u90e8\u7684\u8bf7\u6c42\u9700\u8981\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u8f6c\u53d1\u5230 Service \u6240\u5728\u8282\u70b9\u66b4\u9732\u7684\u7aef\u53e3\u4e0a\uff0c\u7136\u540e\u518d\u7531 Kube-Proxy \u901a\u8fc7\u8fb9\u7f18\u8def\u7531\u5668\u5c06\u5176\u8f6c\u53d1\u5230\u76f8\u5173\u7684 Pod\u3002 Ingress \u53ef\u4ee5\u7ed9 Service \u63d0\u4f9b\u96c6\u7fa4\u5916\u90e8\u8bbf\u95ee\u7684 URL\u3001\u8d1f\u8f7d\u5747\u8861\u3001HTTP \u8def\u7531\u7b49\uff0c\u4e3a\u4e86\u914d\u7f6e\u8fd9\u4e9b Ingress \u89c4\u5219\uff0c\u96c6\u7fa4\u7ba1\u7406\u5458\u9700\u8981\u90e8\u7f72\u4e00\u4e2a Ingress Controller\uff0c\u5b83\u76d1\u542c Ingress \u548c Service \u7684\u53d8\u5316\uff0c\u5e76\u6839\u636e\u89c4\u5219\u914d\u7f6e\u8d1f\u8f7d\u5747\u8861\u5e76\u63d0\u4f9b\u8bbf\u95ee\u5165\u53e3\u3002 \u5e38\u7528\u7684 Ingress Controller \u6709\uff1a Nginx Traefik Kong Openresty","title":"Ingress \u8d1f\u8f7d\u5747\u8861"},{"location":"chapter_10/4_kubernetes_basic_concepts/#job-cronjob","text":"Job \u8d1f\u8d23\u6279\u91cf\u5904\u7406\u77ed\u6682\u7684\u4e00\u6b21\u6027\u4efb\u52a1 (short lived one-off tasks)\uff0c\u5373\u4ec5\u6267\u884c\u4e00\u6b21\u7684\u4efb\u52a1\uff0c\u5b83\u4fdd\u8bc1\u6279\u5904\u7406\u4efb\u52a1\u7684\u4e00\u4e2a\u6216\u591a\u4e2a Pod \u6210\u529f\u7ed3\u675f\u3002 CronJob \u5373\u5b9a\u65f6\u4efb\u52a1\uff0c\u5c31\u7c7b\u4f3c\u4e8e Linux \u7cfb\u7edf\u7684 Crontab\uff0c\u5728\u6307\u5b9a\u7684\u65f6\u95f4\u5468\u671f\u8fd0\u884c\u6307\u5b9a\u7684\u4efb\u52a1\u3002","title":"Job &amp; CronJob \u4efb\u52a1\u548c\u5b9a\u65f6\u4efb\u52a1"},{"location":"chapter_10/4_kubernetes_basic_concepts/#hpahorizontal-pod-autoscaling","text":"Horizontal Pod Autoscaling \u53ef\u4ee5\u6839\u636e CPU\u3001\u5185\u5b58\u4f7f\u7528\u7387\u6216\u5e94\u7528\u81ea\u5b9a\u4e49 Metrics \u81ea\u52a8\u6269\u5c55 Pod \u6570\u91cf (\u652f\u6301 Replication Controller\u3001Deployment \u548c Replicaset)\u3002 \u63a7\u5236\u7ba1\u7406\u5668\u9ed8\u8ba4\u6bcf\u9694 30s \u67e5\u8be2 Metrics \u7684\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5 (\u53ef\u4ee5\u901a\u8fc7 --horizontal-pod-autoscaler-sync-period \u4fee\u6539) \u652f\u6301\u4e09\u79cd Metrics \u7c7b\u578b \u9884\u5b9a\u4e49 Metrics (\u6bd4\u5982 Pod \u7684 CPU)\u4ee5\u5229\u7528\u7387\u7684\u65b9\u5f0f\u8ba1\u7b97 \u81ea\u5b9a\u4e49\u7684 Pod Metrics\uff0c\u4ee5\u539f\u59cb\u503c (Raw Value) \u7684\u65b9\u5f0f\u8ba1\u7b97 \u81ea\u5b9a\u4e49\u7684 Object Metrics \u652f\u6301\u4e24\u79cd Metrics \u67e5\u8be2\u65b9\u5f0f :Heapster \u548c\u81ea\u5b9a\u4e49\u7684 REST API \u652f\u6301\u591a Metrics \u4f60\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6765\u521b\u5efa HPA\uff1a $ kubectl autoscale deployment php-apache --cpu-percent=50 --min=1 --max=10","title":"HPA\uff08Horizontal Pod Autoscaling\uff09 \u6c34\u5e73\u81ea\u52a8\u4f38\u7f29"},{"location":"chapter_10/4_kubernetes_basic_concepts/#service-account","text":"Service account \u662f\u4e3a\u4e86\u65b9\u4fbf Pod \u91cc\u9762\u7684\u8fdb\u7a0b\u8c03\u7528 Kubernetes API \u6216\u5176\u4ed6\u5916\u90e8\u670d\u52a1\u800c\u8bbe\u8ba1\u7684\u3002","title":"Service Account"},{"location":"chapter_10/4_kubernetes_basic_concepts/#_6","text":"Service Account \u4e3a\u670d\u52a1\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u4fbf\u7684\u8ba4\u8bc1\u673a\u5236\uff0c\u4f46\u5b83\u4e0d\u5173\u5fc3\u6388\u6743\u7684\u95ee\u9898\u3002\u53ef\u4ee5\u914d\u5408 RBAC (Role Based Access Control) \u6765\u4e3a Service Account \u9274\u6743\uff0c\u901a\u8fc7\u5b9a\u4e49 Role\u3001RoleBinding\u3001ClusterRole\u3001ClusterRoleBinding \u6765\u5bf9 sa \u8fdb\u884c\u6388\u6743\u3002","title":"\u6388\u6743"},{"location":"chapter_10/4_kubernetes_basic_concepts/#secret","text":"Sercert \u5bc6\u94a5\u89e3\u51b3\u4e86\u5bc6\u7801\u3001Token\u3001\u5bc6\u94a5\u7b49\u654f\u611f\u6570\u636e\u7684\u914d\u7f6e\u95ee\u9898\uff0c\u800c\u4e0d\u9700\u8981\u628a\u8fd9\u4e9b\u654f\u611f\u6570\u636e\u66b4\u9732\u5230\u955c\u50cf\u6216\u8005 Pod Spec \u4e2d\u3002Secret \u53ef\u4ee5\u4ee5 Volume \u6216\u8005\u73af\u5883\u53d8\u91cf\u7684\u65b9\u5f0f\u4f7f\u7528\u3002 \u6709\u5982\u4e0b\u4e09\u79cd\u7c7b\u578b\uff1a Service Account: \u7528\u6765\u8bbf\u95ee Kubernetes API\uff0c\u7531 Kubernetes \u81ea\u52a8\u521b\u5efa\uff0c\u5e76\u4e14\u4f1a\u81ea\u52a8\u6302\u8f7d\u5230 Pod \u7684 /run/secrets/kubernetes.io/serviceaccount \u76ee\u5f55\u4e2d; Opaque: Base64 \u7f16\u7801\u683c\u5f0f\u7684 Secret\uff0c\u7528\u6765\u5b58\u50a8\u5bc6\u7801\u3001\u5bc6\u94a5\u7b49; kubernetes.io/dockerconfigjson: \u7528\u6765\u5b58\u50a8\u79c1\u6709 Docker Registry \u7684\u8ba4\u8bc1\u4fe1\u606f\u3002","title":"Secret \u5bc6\u94a5"},{"location":"chapter_10/4_kubernetes_basic_concepts/#kubernetes_2","text":"CRI(\u5bb9\u5668\u8fd0\u884c\u65f6\u63a5\u53e3, Container Runtime Interface) CNI(\u5bb9\u5668\u7f51\u7edc\u63a5\u53e3, Container Network Interface) CSI(\u5bb9\u5668\u5b58\u50a8\u63a5\u53e3, Container Storage Interface)","title":"Kubernetes \u63a5\u53e3\u673a\u5236"},{"location":"chapter_10/4_kubernetes_basic_concepts/#securitycontext","text":"Security Context \u7684\u76ee\u7684\u662f\u9650\u5236\u4e0d\u53ef\u4fe1\u5bb9\u5668\u7684\u884c\u4e3a\uff0c\u4fdd\u62a4\u7cfb\u7edf\u548c\u5176\u4ed6\u5bb9\u5668\u4e0d\u53d7\u5176\u5f71\u54cd\u3002 Kubernetes \u63d0\u4f9b\u4e86\u4e09\u79cd\u914d\u7f6e Security Context \u7684\u65b9\u6cd5\uff1a Container-level Security Context\uff1a\u4ec5\u5e94\u7528\u5230\u6307\u5b9a\u7684\u5bb9\u5668 Pod-level Security Context\uff1a\u5e94\u7528\u5230 Pod \u5185\u6240\u6709\u5bb9\u5668\u4ee5\u53ca Volume Pod Security Policies\uff08PSP\uff09\uff1a\u5e94\u7528\u5230\u96c6\u7fa4\u5185\u90e8\u6240\u6709 Pod \u4ee5\u53ca Volume","title":"SecurityContext"},{"location":"chapter_10/4_kubernetes_basic_concepts/#1-securitycontext","text":"\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u7ed9\u8fdb\u7a0b\u6dfb\u52a0\u90e8\u5206 Linux Capabilities \u6743\u9650(\u6ce8\u610f\u4e0d\u4e00\u5b9a\u662f\u5168\u90e8 ROOT \u6743\u9650) \u5f53\u7136\u4e5f\u53ef\u4ee5\u7ed9 Pod \u6216\u8005 Container \u6dfb\u52a0\u5bbf\u4e3b\u673a ROOT \u6743\u9650.","title":"1 SecurityContext \u6709\u4ec0\u4e48\u7528?"},{"location":"chapter_10/4_kubernetes_basic_concepts/#linux-capabilities","text":"Linux Capabilities \u4e3b\u8981\u4f5c\u7528\u5c31\u662f\u53ef\u4ee5\u907f\u514d\u8ba9\u53ef\u6267\u884c\u6587\u4ef6\u52a0\u4e0a setuid. \u4e3e\u4e2a\u4f8b\u5b50, \u6bd4\u5982/usr/bin/ping \u52a0\u4e0a setuid \u6743\u9650\u540e , \u7cfb\u7edf\u4e0a\u4efb\u4f55\u7528\u6237\u542f\u7528 ping \u8fdb\u7a0b\u65f6, \u6bcf\u4e2a ping \u8fdb\u7a0b\u90fd\u4f1a\u5728\u6267\u884c\u65f6\u62e5\u6709 root \u6743\u9650. \u548b\u770b\u4e0a\u53bb\u6ca1\u5565\u95ee\u9898, \u95ee\u9898\u5728\u4e8e\u67d0\u4e9b\u8f6f\u4ef6\u53ef\u80fd\u51fa\u73b0 BUG(ping \u4e5f\u6709\u53ef\u80fd), \u51fa\u73b0 BUG \u7684\u65f6\u5019\u5c31\u53ef\u80fd\u5bfc\u81f4\u975e\u6cd5\u7528\u6237\u83b7\u5f97 ROOT \u6743\u9650, \u53bb\u6389/usr/bin/ping \u7684 setuid \u6743\u9650\u540e, \u975e ROOT \u7528\u6237\u542f\u52a8 ping \u8fdb\u7a0b\u5c31\u4f1a\u53d1\u73b0\u65e0\u6cd5\u7533\u8bf7 icmp socket Linux Capabilities \u5219\u8fdb\u4e00\u6b65\u7ec6\u5316\u4e86\u8fd9\u4e2a\u6743\u9650, \u53ef\u4ee5\u53ea\u7ed9/usr/bin/ping \u52a0\u4e0a\u7533\u8bf7 icmp socket \u7684\u6743\u9650. (\u6ce8\u610f icmp socket \u6743\u9650\u548c tcp socket \u6743\u9650\u662f\u4e0d\u540c\u7684). \u8fd9\u6837\u5c31\u7b97\u662f ping \u4e8c\u8fdb\u5236\u6587\u4ef6\u51fa\u73b0 BUG, \u90a3\u4e48\u975e ROOT \u7528\u6237\u4e5f\u65e0\u6cd5\u83b7\u53d6\u5168\u90e8 ROOT \u6743\u9650, \u907f\u514d\u4f7f\u7528 setuid \u6743\u9650.","title":"\u5173\u4e8e Linux Capabilities"},{"location":"chapter_10/5_kubernetes_monitor/","text":"\u6982\u8ff0 \u672c\u7bc7\u68b3\u7406Kubernetes\u96c6\u7fa4\u76d1\u63a7\u76f8\u5173\u6280\u80fd, \u4e3b\u8981\u5206\u4e3a3\u5757\u5185\u5bb9 1 Pod\u7684 HPA \u548c VPA 2 Kubernetes\u96c6\u7fa4\u672c\u8eab\u7ec4\u4ef6\u7684\u76d1\u63a7 3 Node\u548cPod\u7684\u4e00\u4e9b\u6307\u6807, \u4f8b\u5982Cpu\\Mem\\FS\\Net\u7b49","title":"\u7b2c\u4e94\u7bc7 Kubernetes\u76d1\u63a7"},{"location":"chapter_10/5_kubernetes_monitor/#_1","text":"\u672c\u7bc7\u68b3\u7406Kubernetes\u96c6\u7fa4\u76d1\u63a7\u76f8\u5173\u6280\u80fd, \u4e3b\u8981\u5206\u4e3a3\u5757\u5185\u5bb9 1 Pod\u7684 HPA \u548c VPA 2 Kubernetes\u96c6\u7fa4\u672c\u8eab\u7ec4\u4ef6\u7684\u76d1\u63a7 3 Node\u548cPod\u7684\u4e00\u4e9b\u6307\u6807, \u4f8b\u5982Cpu\\Mem\\FS\\Net\u7b49","title":"\u6982\u8ff0"},{"location":"chapter_10/6_production_kubernetes_best_practice/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3\u751f\u4ea7\u73af\u5883\u90e8\u7f72\u548c\u5e94\u7528 Kubernetes \u6700\u4f73\u5b9e\u8df5 \u4e00 \u7f51\u7edc\u63d2\u4ef6\u9009\u62e9\u548c\u7f51\u7edc\u65b9\u6848 1 \u7f51\u7edc\u63d2\u4ef6 1.1 CNM & CNI \u9635\u8425\uff1a \u5bb9\u5668\u7f51\u7edc\u53d1\u5c55\u5230\u73b0\u5728\uff0c\u5f62\u6210\u4e86\u4e24\u5927\u9635\u8425\uff0c\u5c31\u662f Docker \u7684 CNM \u548c Google\u3001CoreOS\u3001Kuberenetes \u4e3b\u5bfc\u7684 CNI\u3002 \u9996\u5148\u660e\u786e\u4e00\u70b9\uff0cCNM \u548c CNI \u5e76\u4e0d\u662f\u7f51\u7edc\u5b9e\u73b0\uff0c\u4ed6\u4eec\u662f\u7f51\u7edc\u89c4\u8303\u548c\u7f51\u7edc\u4f53\u7cfb\uff0c\u4ece\u7814\u53d1\u7684\u89d2\u5ea6\u4ed6\u4eec\u5c31\u662f\u4e00\u5806\u63a5\u53e3\uff0c\u4f60\u5e95\u5c42\u662f\u7528 Flannel \u4e5f\u597d\u3001\u7528 Calico \u4e5f\u597d\uff0c\u4ed6\u4eec\u5e76\u4e0d\u5173\u5fc3\uff0cCNM \u548c CNI \u5173\u5fc3\u7684\u662f\u7f51\u7edc\u7ba1\u7406\u7684\u95ee\u9898\u3002 CNM (Container Network Model) CNI\uff08Container Network Interface\uff09 1.2 Kubernetes \u7f51\u7edc\u8bbe\u8ba1\u539f\u5219 \u9996\u5148\u6211\u4eec\u5f97\u5148\u4e86\u89e3 Kubernetes \u7f51\u7edc\u7684\u8bbe\u8ba1\u539f\u5219\uff0c\u7136\u540e\u624d\u80fd\u66f4\u597d\u7684\u7406\u89e3 flannel \u7f51\u7edc\u7684\u5e94\u7528 Kubernetes \u7f51\u7edc\u8bbe\u8ba1\u6a21\u578b\uff1a \u5728 Kubernetes \u7f51\u7edc\u4e2d\u5b58\u5728\u4e24\u79cd IP\uff08Pod IP \u548c Service Cluster IP\uff09, Pod IP \u5730\u5740\u662f\u5b9e\u9645\u5b58\u5728\u4e8e\u67d0\u4e2a\u7f51\u5361(\u53ef\u4ee5\u662f\u865a\u62df\u8bbe\u5907)\u4e0a\u7684\uff0cService Cluster IP \u5b83\u662f\u4e00\u4e2a\u865a\u62df IP\uff0c\u662f\u7531 kube-proxy \u4f7f\u7528 Iptables \u89c4\u5219\u91cd\u65b0\u5b9a\u5411\u5230\u5176\u672c\u5730\u7aef\u53e3\uff0c\u518d\u5747\u8861\u5230\u540e\u7aef Pod \u7684\u3002 \u57fa\u672c\u539f\u5219\uff1a \u6bcf\u4e2a Pod \u90fd\u62e5\u6709\u4e00\u4e2a\u72ec\u7acb\u7684 IP \u5730\u5740\uff08IP per Pod\uff09\uff0c\u800c\u4e14\u5047\u5b9a\u6240\u6709\u7684 pod \u90fd\u5728\u4e00\u4e2a\u53ef\u4ee5\u76f4\u63a5\u8fde\u901a\u7684\u3001\u6241\u5e73\u7684\u7f51\u7edc\u7a7a\u95f4\u4e2d\u3002 \u8bbe\u8ba1\u539f\u56e0\uff1a \u7528\u6237\u4e0d\u9700\u8981\u989d\u5916\u8003\u8651\u5982\u4f55\u5efa\u7acb Pod \u4e4b\u95f4\u7684\u8fde\u63a5\uff0c\u4e5f\u4e0d\u9700\u8981\u8003\u8651\u5c06\u5bb9\u5668\u7aef\u53e3\u6620\u5c04\u5230\u4e3b\u673a\u7aef\u53e3\u7b49\u95ee\u9898\u3002 \u7f51\u7edc\u8981\u6c42\uff1a \u6240\u6709\u7684\u5bb9\u5668\u90fd\u53ef\u4ee5\u5728\u4e0d\u7528 NAT \u7684\u65b9\u5f0f\u4e0b\u540c\u522b\u7684\u5bb9\u5668\u901a\u8baf\uff1b \u6240\u6709\u8282\u70b9(Node)\u90fd\u53ef\u5728\u4e0d\u7528 NAT \u7684\u65b9\u5f0f\u4e0b\u540c\u6240\u6709\u5bb9\u5668\u901a\u8baf\uff1b \u5bb9\u5668\u81ea\u5df1\u770b\u5230\u7684 IP \u548c\u522b\u4eba\u770b\u5230\u7684 IP \u662f\u540c\u4e00\u4e2a\u5730\u5740\u3002 1.3 Kubernetes \u7f51\u7edc\u4e3b\u8981\u89e3\u51b3\u4ee5\u4e0b\u7f51\u7edc\u901a\u4fe1\u95ee\u9898: \u540c\u4e00 pod \u4e0b\u5bb9\u5668\u4e0e\u5bb9\u5668\u7684\u901a\u4fe1\uff1b \u540c\u4e00\u8282\u70b9\u4e0b\u4e0d\u540c\u7684 pod \u4e4b\u95f4\u7684\u5bb9\u5668\u95f4\u901a\u4fe1\uff1b \u4e0d\u540c\u8282\u70b9\u4e0b\u5bb9\u5668\u4e4b\u95f4\u7684\u901a\u4fe1\uff1b \u96c6\u7fa4\u5916\u90e8\u4e0e\u5185\u90e8\u7ec4\u4ef6\u7684\u901a\u4fe1\uff1b pod \u4e0e service \u4e4b\u95f4\u7684\u901a\u4fe1\uff1b A \u540c\u4e00 Pod \u4e0b\u5bb9\u5668\u4e0e\u5bb9\u5668\u7684\u901a\u4fe1 \u540c\u4e00\u4e2a Pod \u7684\u5bb9\u5668\u5171\u4eab\u540c\u4e00\u4e2a\u7f51\u7edc\u547d\u540d\u7a7a\u95f4\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u8bbf\u95ee\u53ef\u4ee5\u7528 localhost \u5730\u5740 + \u5bb9\u5668\u7aef\u53e3\u5c31\u53ef\u4ee5\u8bbf\u95ee\u3002 B \u540c\u4e00 Node \u4e0b\uff0c\u4e0d\u540c Pod \u4e4b\u95f4\u7684\u901a\u4fe1 C \u4e0d\u540c Node \u4e0b\uff0c\u4e0d\u540c Pod \u4e4b\u95f4\u7684\u901a\u4fe1 D \u96c6\u7fa4\u5916\u90e8\u4e0e\u5185\u90e8\u7ec4\u4ef6\u7684\u901a\u4fe1 E Pod \u548c Service \u4e4b\u95f4\u7684\u901a\u4fe1 2 LB \u65b9\u6848 3 \u7f51\u7edc\u63d2\u4ef6\u4e4b Flanel Flannel \u9996\u5148\u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3a flannel0 \u7684\u7f51\u6865\uff0c\u800c\u4e14\u8fd9\u4e2a\u7f51\u6865\u7684\u4e00\u7aef\u8fde\u63a5 docker0 \u7684\u7f51\u6865\uff0c\u53e6\u4e00\u7aef\u8fde\u63a5\u4e00\u4e2a\u540d\u4e3a flanneld \u7684\u670d\u52a1\u8fdb\u7a0b\u3002 Flanneld \u8fdb\u7a0b\u5e76\u4e0d\u7b80\u5355\uff0c\u5b83\u9996\u5148\u4e0a\u8fde etcd\uff0c\u5229\u7528 etcd \u6765\u7ba1\u7406\u53ef\u5206\u914d\u7684 IP \u5730\u5740\u6bb5\u8d44\u6e90\uff0c\u540c\u65f6\u76d1\u63a7 etcd \u4e2d\u6bcf\u4e2a Pod \u7684\u5b9e\u9645\u5730\u5740\uff0c\u5e76\u5728\u5185\u5b58\u4e2d\u5efa\u7acb\u4e86\u4e00\u4e2a Pod \u8282\u70b9\u8def\u7531\u8868\uff1b\u7136\u540e\u4e0b\u8fde docker0 \u548c\u7269\u7406\u7f51\u7edc\uff0c\u4f7f\u7528\u5185\u5b58\u4e2d\u7684 Pod \u8282\u70b9\u8def\u7531\u8868\uff0c\u5c06 docker0 \u53d1\u7ed9\u5b83\u7684\u6570\u636e\u5305\u5305\u88c5\u8d77\u6765\uff0c\u5229\u7528\u7269\u7406\u7f51\u7edc\u7684\u8fde\u63a5\u5c06\u6570\u636e\u5305\u6295\u9012\u5230\u76ee\u6807 flanneld \u4e0a\uff0c\u4ece\u800c\u5b8c\u6210 pod \u5230 pod \u4e4b\u95f4\u7684\u76f4\u63a5\u7684\u5730\u5740\u901a\u4fe1\u3002 Flannel \u4e4b\u95f4\u7684\u5e95\u5c42\u901a\u4fe1\u534f\u8bae\u7684\u53ef\u9009\u4f59\u5730\u6709\u5f88\u591a\uff0c\u6bd4\u5982 UDP\u3001VXlan\u3001AWS VPC \u7b49\u7b49\u3002\u53ea\u8981\u80fd\u901a\u5230\u5bf9\u7aef\u7684 Flannel \u5c31\u53ef\u4ee5\u4e86\u3002\u6e90 Flannel \u5c01\u5305\uff0c\u76ee\u6807 Flannel \u89e3\u5305\uff0c\u6700\u7ec8 docker0 \u770b\u5230\u7684\u5c31\u662f\u539f\u59cb\u7684\u6570\u636e\uff0c\u975e\u5e38\u900f\u660e\uff0c\u6839\u672c\u611f\u89c9\u4e0d\u5230\u4e2d\u95f4 Flannel \u7684\u5b58\u5728\u3002 Flannel \u7684\u5b89\u88c5\u914d\u7f6e\u7f51\u4e0a\u8bb2\u7684\u5f88\u591a\uff0c\u5728\u8fd9\u91cc\u5c31\u4e0d\u5728\u8d58\u8ff0\u4e86\u3002\u5728\u8fd9\u91cc\u6ce8\u610f\u4e00\u70b9\uff0c\u5c31\u662f flannel \u4f7f\u7528 etcd \u4f5c\u4e3a\u6570\u636e\u5e93\uff0c\u6240\u4ee5\u9700\u8981\u9884\u5148\u5b89\u88c5\u597d etcd\u3002 \u4e0b\u9762\u8bf4\u8bf4\u51e0\u4e2a\u573a\u666f\uff1a 1 \u540c\u4e00 Pod \u5185\u7684\u7f51\u7edc\u901a\u4fe1\u3002\u5728\u540c\u4e00\u4e2a Pod \u5185\u7684\u5bb9\u5668\u5171\u4eab\u540c\u4e00\u4e2a\u7f51\u7edc\u547d\u540d\u7a7a\u95f4\uff0c\u5171\u4eab\u540c\u4e00\u4e2a Linux \u534f\u8bae\u6808\u3002\u6240\u4ee5\u5bf9\u4e8e\u7f51\u7edc\u7684\u5404\u7c7b\u64cd\u4f5c\uff0c\u5c31\u548c\u5b83\u4eec\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\u4e00\u6837\uff0c\u5b83\u4eec\u53ef\u4ee5\u7528 localhost \u5730\u5740\u76f4\u63a5\u8bbf\u95ee\u5f7c\u6b64\u7684\u7aef\u53e3\u3002\u5176\u5b9e\u8fd9\u548c\u4f20\u7edf\u7684\u4e00\u7ec4\u666e\u901a\u7a0b\u5e8f\u8fd0\u884c\u7684\u73af\u5883\u662f\u5b8c\u5168\u4e00\u6837\u7684\uff0c\u4f20\u7edf\u7684\u7a0b\u5e8f\u4e0d\u9700\u8981\u9488\u5bf9\u7f51\u7edc\u505a\u7279\u522b\u7684\u4fee\u6539\u5c31\u53ef\u4ee5\u79fb\u690d\u4e86\u3002\u8fd9\u6837\u505a\u7684\u7ed3\u679c\u662f\u7b80\u5355\u3001\u5b89\u5168\u548c\u9ad8\u6548\uff0c\u4e5f\u80fd\u51cf\u5c11\u5c06\u5df2\u7ecf\u5b58\u5728\u7684\u7a0b\u5e8f\u4ece\u7269\u7406\u673a\u6216\u8005\u865a\u62df\u673a\u79fb\u690d\u5230\u5bb9\u5668\u4e0b\u8fd0\u884c\u7684\u96be\u5ea6\u3002 2 Pod1 \u5230 Pod2 \u7684\u7f51\u7edc\uff0c\u5206\u4e24\u79cd\u60c5\u51b5\u3002Pod1 \u4e0e Pod2 \u4e0d\u5728\u540c\u4e00\u53f0\u4e3b\u673a\u4e0e Pod1 \u4e0e Pod2 \u5728\u540c\u4e00\u53f0\u4e3b\u673a\u3002 2.1 \u5148\u8bf4 Pod1 \u4e0e Pod2 \u4e0d\u5728\u540c\u4e00\u53f0\u4e3b\u673a\u3002Pod \u7684\u5730\u5740\u662f\u4e0e docker0 \u5728\u540c\u4e00\u4e2a\u7f51\u6bb5\u7684\uff0c\u4f46 docker0 \u7f51\u6bb5\u4e0e\u5bbf\u4e3b\u673a\u7f51\u5361\u662f\u4e24\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684 IP \u7f51\u6bb5\uff0c\u5e76\u4e14\u4e0d\u540c Node \u4e4b\u95f4\u7684\u901a\u4fe1\u53ea\u80fd\u901a\u8fc7\u5bbf\u4e3b\u673a\u7684\u7269\u7406\u7f51\u5361\u8fdb\u884c\u3002\u5c06 Pod \u7684 IP \u548c\u6240\u5728 Node \u7684 IP \u5173\u8054\u8d77\u6765\uff0c\u901a\u8fc7\u8fd9\u4e2a\u5173\u8054\u8ba9 Pod \u53ef\u4ee5\u4e92\u76f8\u8bbf\u95ee\u3002 2.2 Pod1 \u4e0e Pod2 \u5728\u540c\u4e00\u53f0\u4e3b\u673a\u3002Pod1 \u548c Pod2 \u5728\u540c\u4e00\u53f0\u4e3b\u673a\u7684\u8bdd\uff0c\u7531 Docker0 \u7f51\u6865\u76f4\u63a5\u8f6c\u53d1\u8bf7\u6c42\u5230 Pod2\uff0c\u4e0d\u9700\u8981\u7ecf\u8fc7 Flannel\u3002 3 Pod \u5230 Service \u7684\u7f51\u7edc\u3002\u521b\u5efa\u4e00\u4e2a Service \u65f6\uff0c\u76f8\u5e94\u4f1a\u521b\u5efa\u4e00\u4e2a\u6307\u5411\u8fd9\u4e2a Service \u7684\u57df\u540d\uff0c\u57df\u540d\u89c4\u5219\u4e3a{\u670d\u52a1\u540d}.{namespace}.svc.{\u96c6\u7fa4\u540d\u79f0}\u3002\u4e4b\u524d Service IP \u7684\u8f6c\u53d1\u7531 iptables \u548c kube-proxy \u8d1f\u8d23\uff0c\u76ee\u524d\u57fa\u4e8e\u6027\u80fd\u8003\u8651\uff0c\u5168\u90e8\u4e3a iptables \u7ef4\u62a4\u548c\u8f6c\u53d1\u3002iptables \u5219\u7531 kubelet \u7ef4\u62a4\u3002Service \u4ec5\u652f\u6301 UDP \u548c TCP \u534f\u8bae\uff0c\u6240\u4ee5\u50cf ping \u7684 ICMP \u534f\u8bae\u662f\u7528\u4e0d\u4e86\u7684\uff0c\u6240\u4ee5\u65e0\u6cd5 ping \u901a Service IP\u3002 4 Pod \u5230\u5916\u7f51\u3002Pod \u5411\u5916\u7f51\u53d1\u9001\u8bf7\u6c42\uff0c\u67e5\u627e\u8def\u7531\u8868, \u8f6c\u53d1\u6570\u636e\u5305\u5230\u5bbf\u4e3b\u673a\u7684\u7f51\u5361\uff0c\u5bbf\u4e3b\u7f51\u5361\u5b8c\u6210\u8def\u7531\u9009\u62e9\u540e\uff0ciptables \u6267\u884c Masquerade\uff0c\u628a\u6e90 IP \u66f4\u6539\u4e3a\u5bbf\u4e3b\u7f51\u5361\u7684 IP\uff0c\u7136\u540e\u5411\u5916\u7f51\u670d\u52a1\u5668\u53d1\u9001\u8bf7\u6c42\u3002 5 \u96c6\u7fa4\u5916\u90e8\u8bbf\u95ee Pod \u6216 Service \u7531\u4e8e Pod \u548c Service \u662f Kubernetes \u96c6\u7fa4\u8303\u56f4\u5185\u7684\u865a\u62df\u6982\u5ff5\uff0c\u6240\u4ee5\u96c6\u7fa4\u5916\u7684\u5ba2\u6237\u7aef\u7cfb\u7edf\u65e0\u6cd5\u901a\u8fc7 Pod \u7684 IP \u5730\u5740\u6216\u8005 Service \u7684\u865a\u62df IP \u5730\u5740\u548c\u865a\u62df\u7aef\u53e3\u53f7\u8bbf\u95ee\u5230\u5b83\u4eec\u3002\u4e3a\u4e86\u8ba9\u5916\u90e8\u5ba2\u6237\u7aef\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e9b\u670d\u52a1\uff0c\u53ef\u4ee5\u5c06 Pod \u6216 Service \u7684\u7aef\u53e3\u53f7\u6620\u5c04\u5230\u5bbf\u4e3b\u673a\uff0c\u4ee5\u4f7f\u5f97\u5ba2\u6237\u7aef\u5e94\u7528\u80fd\u591f\u901a\u8fc7\u7269\u7406\u673a\u8bbf\u95ee\u5bb9\u5668\u5e94\u7528\u3002 \u603b\u7ed3\uff1a Flannel \u5b9e\u73b0\u4e86\u5bf9 Kubernetes \u7f51\u7edc\u7684\u652f\u6301\uff0c\u4f46\u662f\u5b83\u5f15\u5165\u4e86\u591a\u4e2a\u7f51\u7edc\u7ec4\u4ef6\uff0c\u5728\u7f51\u7edc\u901a\u4fe1\u65f6\u9700\u8981\u8f6c\u5230 flannel0 \u7f51\u7edc\u63a5\u53e3\uff0c\u518d\u8f6c\u5230\u7528\u6237\u6001\u7684 flanneld \u7a0b\u5e8f\uff0c\u5230\u5bf9\u7aef\u540e\u8fd8\u9700\u8981\u8d70\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u53cd\u8fc7\u7a0b\uff0c\u6240\u4ee5\u4e5f\u4f1a\u5f15\u5165\u4e00\u4e9b\u7f51\u7edc\u7684\u65f6\u5ef6\u635f\u8017\u3002\u53e6\u5916 Flannel \u9ed8\u8ba4\u7684\u5e95\u5c42\u901a\u4fe1\u534f\u8bae\u662f UDP\u3002UDP \u672c\u8eab\u662f\u975e\u53ef\u9760\u534f\u8bae\uff0c\u867d\u7136\u4e24\u7aef\u7684 TCP \u5b9e\u73b0\u4e86\u53ef\u9760\u4f20\u8f93\uff0c\u4f46\u5728\u5927\u6d41\u91cf\u3001\u9ad8\u5e76\u53d1\u5e94\u7528\u573a\u666f\u4e0b\u8fd8\u9700\u8981\u53cd\u590d\u8c03\u8bd5\uff0c\u786e\u4fdd\u4e0d\u4f1a\u51fa\u73b0\u4f20\u8f93\u8d28\u91cf\u7684\u95ee\u9898\u3002\u7279\u522b\u662f\u5bf9\u7f51\u7edc\u4f9d\u8d56\u91cd\u7684\u5e94\u7528\uff0c\u9700\u8981\u8bc4\u4f30\u5bf9\u4e1a\u52a1\u7684\u5f71\u54cd\u3002 4 \u7f51\u7edc\u63d2\u4ef6\u4e4b Calico \u4e8c \u5b58\u50a8\u65b9\u6848 \u4e09 \u76d1\u63a7\u548c\u544a\u8b66\u65b9\u6848 \u56db \u7528\u6237\u6743\u9650\u7ba1\u7406 \u4e94 Kubernetes \u7ec4\u4ef6\u5e94\u7528\u5b9e\u8df5 \u8bf8\u5982 namespace\u3001deployment\u3001configmap\u3001scret\u3001 1 \u751f\u4ea7\u73af\u5883 Deployment \u5168\u6ce8\u91ca Deployment \u8bf4\u660e \u67e5\u770b\u5b98\u65b9\u8bf4\u660e, \u9664\u4e86\u5b98\u65b9\u6587\u6863, \u8fd8\u53ef\u4ee5\u4f7f\u7528 kubectl explain \u547d\u4ee4 [root@k8s-master ~]# kubectl explain pod.spec.terminationGracePeriodSeconds KIND: Pod VERSION: v1 FIELD: terminationGracePeriodSeconds <integer> DESCRIPTION: Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds. \u6848\u4f8b A apiVersion: extensions/v1beta1 kind: Deployment metadata: annotations:#\u6ce8\u91ca deployment.kubernetes.io/revision: \"1\" creationTimestamp: \"2022-07-04T13:29:55Z\" generation: 1 labels:#\u8be5Deployment\u672c\u8eab\u7684label GCE_CLUSTER: wuhan name: dp-2e2d83bae2 psm: your.test.hello name: dp-2e2d83bae2 namespace: ues-workers ownerReferences: - apiVersion: you.yourdomain.org/v1alpha2 blockOwnerDeletion: true controller: true kind: Task name: task-vsh8z uid: 647e19e5-fb9d-11ec-a7fb-fa163edec582 resourceVersion: \"95427195\" selfLink: /apis/extensions/v1beta1/namespaces/ues-workers/deployments/dp-2e2d83bae2 uid: 6480217a-fb9d-11ec-a7fb-fa163edec582 spec: minReadySeconds: 10 #\u6700\u5c11\u542f\u52a810\u79d2,\u624d\u8ba4\u4e3a\u4ed6\u662fReady progressDeadlineSeconds: 600 #Deployment \u63a7\u5236\u5668\u5728\uff08\u901a\u8fc7 Deployment \u72b6\u6001\uff09 \u6807\u793a Deployment \u8fdb\u5c55\u505c\u6ede\u4e4b\u524d\uff0c\u9700\u8981\u7b49\u5f85\u6240\u7ed9\u7684\u65f6\u957f\u3002 \u5355\u4f4d\u79d2\u3002 replicas: 1 #\u526f\u672c\u6570,1 revisionHistoryLimit: 3 #\u5386\u53f2\u7248\u672c\u4fdd\u7559\u51e0\u4e2a, \u7528\u4e8e\u56de\u6edadeployment\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a0\uff0c\u5219\u8868\u793a\u4e0d\u4fdd\u5b58\u5386\u53f2\u7248\u672c. \u9ed8\u8ba4\u662f\u4fdd\u7559\u6240\u6709\u5386\u53f2\u7248\u672c. selector: matchLabels: cluster_id: \"2300\" name: dp-2e2d83bae2 paas_cluster: wuhan psm: your.test.hello service_id: \"181\" strategy: rollingUpdate: maxSurge: 25% maxUnavailable: 25% type: RollingUpdate template: metadata: annotations: deployment.gce.kubernetes.io/requestCpuUserDemand: 100m deployment.gce.kubernetes.io/requestMemUserDemand: 102Mi image_version: 1.0.0.4 creationTimestamp: null labels: cluster_id: \"2300\" name: dp-2e2d83bae2 paas_cluster: wuhan psm: your.test.hello service_id: \"181\" spec: containers: - env: - name: API_MANAGER_ADDR - name: BIND_IF value: eth0 - name: CONSUL_HTTP_HOST value: 127.0.0.1 - name: ENABLE_CONSUL value: \"True\" - name: IS_DOCKER_ENV value: \"true\" - name: IS_EDGE_ENVIRONMENT value: \"1\" - name: IS_PORT_ENV value: \"1\" - name: IS_READY_CHECK value: \"1\" - name: MY_CPU_LIMIT valueFrom: resourceFieldRef: containerName: dp-2e2d83bae2 divisor: \"0\" resource: limits.cpu - name: MY_CPU_REQUEST valueFrom: resourceFieldRef: containerName: dp-2e2d83bae2 divisor: \"0\" resource: requests.cpu - name: MY_HOST_IP valueFrom: fieldRef: apiVersion: v1 fieldPath: status.hostIP - name: MY_MEM_LIMIT valueFrom: resourceFieldRef: containerName: dp-2e2d83bae2 divisor: \"0\" resource: limits.memory - name: MY_MEM_REQUEST valueFrom: resourceFieldRef: containerName: dp-2e2d83bae2 divisor: \"0\" resource: requests.memory - name: MY_POD_IP valueFrom: fieldRef: apiVersion: v1 fieldPath: status.podIP - name: MY_POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.name - name: MY_POD_NAMESPACE valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.namespace - name: NET_WORK_MODE value: \"1\" - name: REGION value: China-Edge - name: RUNTIME_IDC_NAME value: uploadagwh - name: GCE_CLUSTER value: wuhan - name: GCE_CLUSTER_ID value: \"2300\" - name: GCE_CONTAINER_NAME value: dp-2e2d83bae2 - name: GCE_ENV value: prod - name: GCE_HOST_ENV value: online - name: GCE_INSTANCE_WEIGHT value: \"10\" - name: GCE_LOGICAL_CLUSTER value: wuhan - name: GCE_PHYSICAL_CLUSTER value: uploadagwh - name: GCE_PORTS - name: GCE_PSM value: your.test.hello - name: GCE_PSM_OWNER value: your.yzy - name: GCE_STAGE value: all_dc lifecycle: #container\u751f\u547d\u5468\u671f\u94a9\u5b50, \u6709poststart\u548cpreStop preStop: exec: # SIGTERM triggers a quick exit; gracefully terminate instead command: [\"/usr/sbin/nginx\",\"-s\",\"quit\"] image: hub.yourdomain.com/project/cm_hello:b0748cc264e1756b2dd3226e5e39f1ce imagePullPolicy: IfNotPresent name: dp-2e2d83bae2 resources: limits: cpu: 100m memory: 102Mi requests: cpu: 100m memory: 102Mi terminationMessagePath: /dev/termination-log terminationMessagePolicy: File #\u9ed8\u8ba4\u503c\u662fFile, \u8868\u660eterminationMessage\u53ea\u80fd\u4ece\u7279\u5b9a\u6587\u4ef6\u83b7\u53d6. \u8be5\u9009\u9879\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u4e3a'FallbackToLogsOnError', \u8868\u660e\u8ba9Kubernetes\u53bbContainer\u65e5\u5fd7\u6587\u4ef6\u91cc\u53bb\u627eterminationMessage, \u90a3\u4e48\u5177\u4f53\u662f\u5565\u4f4d\u7f6e\u5462?\u5c31\u662fContainer\u5bf9\u5e94\u65e5\u5fd7\u6587\u4ef6\u7684\u6700\u540e\u4e00\u4e2aChunk. volumeMounts: - name: sys-resolv-conf mountPath: /etc/resolv.conf mountPropagation: HostToContainer readOnly: true hostNetwork: true #\u9ed8\u8ba4\u4e3afalse. \u5f53pod \u8bbe\u7f6ehostNetwork: true\u65f6\u5019\uff0cPod\u4e2d\u7684\u6240\u6709\u5bb9\u5668\u5c31\u76f4\u63a5\u66b4\u9732\u5728\u5bbf\u4e3b\u673a\u7684\u7f51\u7edc\u73af\u5883\u4e2d\uff0c\u8fd9\u65f6\u5019\uff0cPod\u7684PodIP\u5c31\u662f\u5176\u6240\u5728Node\u7684IP\u3002\u5bf9\u4e8e\u540cDeployment\u4e0b\u7684hostNetwork: true\u542f\u52a8\u7684Pod\uff0c\u6bcf\u4e2anode\u4e0a\u53ea\u80fd\u542f\u52a8\u4e00\u4e2a\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cHost\u6a21\u5f0f\u7684Pod\u542f\u52a8\u526f\u672c\u6570\u4e0d\u53ef\u4ee5\u591a\u4e8e\u201c\u76ee\u6807node\u201d\u7684\u6570\u91cf\uff0c dnsPolicy: ClusterFirstWithHostNet # \u5982\u679c\u672a\u660e\u786e\u6307\u5b9a dnsPolicy\uff0c\u5219\u4f7f\u7528 \"ClusterFirst\". \u5982\u679c\u6ca1\u6709\u4ee5hostNetwork \u65b9\u5f0f\u8fd0\u884c\u7684 Pod, \u5176\u5b9e\u8bbe\u7f6e\u4e86 ClusterFirstWithHostNet\u540e\u4e5f\u4f1a\u56de\u9000\u5230ClusterFirst. restartPolicy: Always schedulerName: default-scheduler #\u5982\u679c\u9ed8\u8ba4\u7684\u8c03\u5ea6\u5668\u4e0d\u6ee1\u8db3\u8981\u6c42\uff0c\u8fd8\u53ef\u4ee5\u90e8\u7f72\u81ea\u5b9a\u4e49\u7684\u8c03\u5ea6\u5668\u3002\u5e76\u4e14\uff0c\u5728\u6574\u4e2a\u96c6\u7fa4\u4e2d\u8fd8\u53ef\u4ee5\u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u8c03\u5ea6\u5668\u5b9e\u4f8b\uff0c\u901a\u8fc7 pod.Spec.schedulerName \u6765\u9009\u62e9\u4f7f\u7528\u54ea\u4e00\u4e2a\u8c03\u5ea6\u5668\uff08\u9ed8\u8ba4\u4f7f\u7528\u5185\u7f6e\u7684\u8c03\u5ea6\u5668\uff09 securityContext: {} terminationGracePeriodSeconds: 30 #\u5411\u5bb9\u5668\u8fdb\u7a0b\u53d1\u9001KILL\u4fe1\u53f7\u4e4b\u524d\u7684\u7b49\u5f85\u65f6\u95f4. \u9996\u5148\u8fd0\u884cpreStop\u52fe\u5b50, \u7136\u540e\u5411\u5bb9\u5668\u53d1\u9001\u505c\u6b62\u547d\u4ee4(\u6bd4\u5982docker stop xxxx), \u7136\u540e\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\u540e, \u53d1\u9001SIGKILL\u4fe1\u53f7\u3001\u5f3a\u5236\u5173\u95ed. \u8fd0\u884cpreStop\u52fe\u5b50 + docker stop\u662f\u4e32\u884c\u7684, \u5e76\u4e14\u65f6\u95f4\u52a0\u5728\u4e00\u8d77\u4e0d\u80fd\u8d85\u8fc7terminationGracePeriodSeconds. volumes: - name: sys-resolv-conf hostPath: path: /etc/resolv.conf type: FileOrCreate status: availableReplicas: 1 conditions: - lastTransitionTime: \"2022-07-04T13:29:55Z\" lastUpdateTime: \"2022-07-04T13:30:15Z\" message: ReplicaSet \"dp-2e2d83bae2-7fd8bdbfd8\" has successfully progressed. reason: NewReplicaSetAvailable status: \"True\" type: Progressing - lastTransitionTime: \"2022-11-17T09:40:24Z\" lastUpdateTime: \"2022-11-17T09:40:24Z\" message: Deployment has minimum availability. reason: MinimumReplicasAvailable status: \"True\" type: Available observedGeneration: 1 readyReplicas: 1 replicas: 1 updatedReplicas: 1 2 \u751f\u4ea7\u73af\u5883 Docker \u65e5\u5fd7\u6700\u4f73\u5b9e\u8df5 \u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b Docker \u5bb9\u5668\u7684\u65e5\u5fd7\u4f1a\u8f93\u51fa\u5230\u4e00\u4e2a json-file \u6587\u4ef6\u4e2d\uff0c\u5bb9\u5668\u8f93\u51fa\u5230 stdout \u548c stderr \u7684\u5185\u5bb9\u52a0\u4e0a\u65f6\u95f4\u6233\u4f1a\u88ab\u8bb0\u5f55\u5230\u5bbf\u4e3b\u673a\u3002 \u8fd9\u4e9b\u65e5\u5fd7\u6587\u4ef6\u5728\u5bbf\u4e3b\u673a\u7684 /var/lib/docker/containers/ \u6587\u4ef6\u5939\u4e0b\uff0c\u4ee5\u8fd9\u6837\u7684\u5f62\u5f0f\u547d\u540d\uff1a /var/lib/docker/containers/<container id>/<container id>-json.log 2.1 \u9650\u5236 Docker \u5bb9\u5668\u65e5\u5fd7\u5927\u5c0f A \u4fee\u6539 Docker \u914d\u7f6e vi /etc/docker/daemon.json { \"log-driver\": \"json-file\", \"log-opts\": {\"max-size\": \"100m\", \"max-file\": \"5\"} } B \u6216\u8005\u547d\u4ee4\u884c\uff1a docker run --log-opt max-size=10m --log-opt max-file=5 my-app:latest 2.2 Docker \u65e5\u5fd7\u7b56\u7565\u548c\u6700\u4f73\u5b9e\u8df5 A \u901a\u8fc7\u5e94\u7528\u81ea\u5df1\u7ba1\u7406\u65e5\u5fd7 \u5e94\u7528\u81ea\u5df1\u53bb\u7ba1\u7406\u81ea\u5df1\u7684\u65e5\u5fd7\uff0c\u6bd4\u5982\u4f7f\u7528 Logging Framework\uff0c\u5728 Java \u4e2d\u901a\u5e38\u4f7f\u7528 log4j \u5c06\u65e5\u5fd7\u6253\u5370\u5230\u4e00\u4e2a\u8fdc\u7aef\u7684\u4e2d\u5fc3\u5316\u5730\u65b9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7ed5\u8fc7 Docker \u548c\u64cd\u4f5c\u7cfb\u7edf\u3002\u8fd9\u79cd\u65b9\u5f0f\u7ed9\u4e88\u4e86\u5f00\u53d1\u8005\u66f4\u591a\u7684\u63a7\u5236\u6743\u3002 \u4e3a\u4e86\u4fdd\u5b58\u65e5\u5fd7\u6570\u636e\uff0c\u4f60\u53ef\u4ee5\u914d\u7f6e\u4e00\u4e2a\u6301\u4e45\u5316\u7684\u5b58\u50a8\u6216\u5c06\u65e5\u5fd7\u8f6c\u53d1\u5230\u4e00\u4e2a\u8fdc\u7a0b\u65e5\u5fd7\u7684\u7cfb\u7edf\uff0c\u6bd4\u5982 Elastic Stack \u6216 Sematext Cloud\uff0c\u4f46\u662f\u57fa\u4e8e\u5e94\u7528\u7684\u65e5\u5fd7\u6846\u67b6\u5b58\u5728\u7684\u95ee\u9898\u4fbf\u662f\u5982\u679c\u90e8\u7f72\u4e86\u591a\u4e2a\u5bb9\u5668\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u4e00\u4e2a\u65b9\u5f0f\u6765\u544a\u8bc9\u65e5\u5fd7\u7cfb\u7edf\uff0c\u54ea\u4e9b\u65e5\u5fd7\u5c5e\u4e8e\u54ea\u4e2a\u5bb9\u5668\u3002 B \u901a\u8fc7 Data Volumes \u8bb0\u5f55\u65e5\u5fd7 \u4f60\u53ef\u4ee5\u5728\u5bb9\u5668\u5185\u90e8\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\uff0c\u7136\u540e\u5c06\u8be5\u76ee\u5f55\u6302\u8f7d\u5230\u5bbf\u4e3b\u673a\u4e0a\uff0c\u90a3\u4e48\u4e00\u4e9b\u957f\u671f\u6216\u5171\u4eab\u4f7f\u7528\u7684\u6570\u636e\u53ef\u4ee5\u957f\u4e45\u7684\u5b58\u50a8\u3002\u4f60\u53ef\u4ee5\u590d\u5236\uff0c\u5907\u4efd\uff0c\u6216\u8005\u4ece\u5176\u4ed6\u5bb9\u5668\u8bbf\u95ee\u8fd9\u4e9b\u6570\u636e\u3002\u4e5f\u53ef\u4ee5\u5728\u591a\u4e2a\u5bb9\u5668\u4e4b\u95f4\u5171\u4eab\u8fd9\u4e9b volume\u3002 \u4f46\u662f\u4f7f\u7528 Data Volume \u5b58\u5728\u7684\u95ee\u9898\u662f\uff0c\u5f88\u96be\u5c06\u8fd9\u4e9b\u5bb9\u5668\u8fc1\u79fb\u5230\u5176\u4ed6\u5bbf\u4e3b\u673a\u800c\u4e0d\u4e22\u5931\u6570\u636e\u3002 C \u901a\u8fc7 Docker Logging Driver \u8bb0\u5f55\u65e5\u5fd7 \u5728 Docker \u4e0b\uff0c\u53e6\u5916\u4e00\u4e2a\u8bb0\u5f55\u65e5\u5fd7\u7684\u65b9\u5f0f\u662f\u4f7f\u7528 logging drivers\u3002\u4e0d\u50cf Data Volumes, Docker logging driver \u4f1a\u4ece\u5bb9\u5668\u7684 stdout \u548c stderr \u8f93\u51fa\u4e2d\u76f4\u63a5\u8bfb\u53d6\u6570\u636e\u3002\u9ed8\u8ba4\u7684\u914d\u7f6e\u4f1a\u5c06\u8fd9\u4e9b\u65e5\u5fd7\u8bb0\u5f55\u5230\u5bbf\u4e3b\u673a\u7684\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u4f46\u662f\u6539\u53d8 logging driver \u53ef\u4ee5\u5141\u8bb8\u4f60\u5c06\u4e8b\u4ef6\u8f6c\u53d1\u7ed9 syslog, gelf, journald \u6216\u5176\u4ed6 endpoints\u3002 \u56e0\u4e3a\u5bb9\u5668\u4e0d\u518d\u9700\u8981\u8bfb\u5199\u65e5\u5fd7\u6587\u4ef6\uff0c\u53ef\u4ee5\u63d0\u5347\u4e00\u5b9a\u7684\u6027\u80fd\u3002\u4f46\u662f\u4e5f\u6709\u4e00\u4e9b\u5f0a\u7aef\uff0c Docker log \u547d\u4ee4\u53ea\u80fd\u5728 json-file log driver \u4e0b\u4f7f\u7528\uff1blog diver \u6709\u4e00\u4e9b\u529f\u80fd\u9650\u5236\uff0c\u65e5\u5fd7\u6587\u4ef6\u53ea\u80fd\u88ab\u4f20\u8f93\u800c\u4e0d\u80fd\u88ab\u89e3\u6790\uff1b\u5f53 TCP \u670d\u52a1\u4e0d\u53ef\u8fbe\u65f6\uff0c\u5bb9\u5668\u4f1a shut down\u3002 Docker Logging Driver \u4e4b json-file \u548c syslog \u533a\u522b: json-file \u6a21\u5f0f\u5f00\u9500\u5c0f, \u4f46\u4e0d\u652f\u6301\u591a\u884c\u6d88\u606f. syslog \u6a21\u5f0f\u5f00\u9500\u5927, \u4f46\u652f\u6301\u591a\u884c\u6d88\u606f. Logging Driver \u9009\u9879 \u9009\u9879\u89e3\u91ca\uff1a logagent\uff1a\u8fd9\u662f\u4e00\u4e2a\u901a\u7528\u7684 log shipper\uff0cLogagent Docker image \u662f\u4e00\u4e2a\u63d0\u524d\u914d\u7f6e\u597d Log \u6536\u96c6\u7684\u955c\u50cf\uff0cLogagent \u4e0d\u4ec5\u4f1a\u6536\u96c6\u65e5\u5fd7\uff0c\u8fd8\u4f1a\u6536\u96c6\u8bf8\u5982\u955c\u50cf\u540d\u5b57\uff0c\u5bb9\u5668 ID\uff0c\u5bb9\u5668\u540d\u5b57\uff0cSwarm service \u7b49 meta-data \u6216 Kubernetes meta-data\u3002\u5e76\u4e14\u5b83\u53ef\u4ee5\u5904\u7406\u591a\u884c\u65e5\u5fd7\uff0c\u53ef\u4ee5\u89e3\u6790\u5bb9\u5668\u7684\u65e5\u5fd7\u7b49\u7b49 syslog: \u5c06\u65e5\u5fd7\u8f6c\u53d1\u5230 syslog \u670d\u52a1 journald:\u5c06\u5bb9\u5668\u65e5\u5fd7\u53d1\u9001\u5230 systemd journal fluentd: \u5c06\u65e5\u5fd7\u4fe1\u606f\u53d1\u9001\u5230 Fluentd \u6536\u96c6\u5668 elf\uff1a\u5c06\u5bb9\u5668\u7684\u65e5\u5fd7\u5199\u5230 Graylog Extended Log Format(GELF) \u7aef\uff0c\u6bd4\u5982 GrayLog \u6216 Logstash awslogs\uff1a\u5c06\u65e5\u5fd7\u53d1\u9001\u5230 AWS CloudWatch Logs splunk\uff1a\u901a\u8fc7 HTTP Event Collector\uff08HEC\uff09\u5c06\u65e5\u5fd7\u5199\u5230 Splunk cplogs\uff1a\u5c06\u65e5\u5fd7\u53d1\u9001\u5230 Google Cloud Platform\uff08GCP\uff09Logging logentries: \u5c06\u65e5\u5fd7\u5199\u5230 Rapid7 Logentries etwlogs: \u5c06\u65e5\u5fd7\u5199\u5230 Event Tracing for Windows\uff08ETW\uff09 D \u4f7f\u7528\u4e13\u7528\u7684\u65e5\u5fd7\u5bb9\u5668\u8bb0\u5f55\u65e5\u5fd7 \u53e6\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u662f\u901a\u8fc7\u4e00\u4e2a\u4e13\u7528\u7684\u3001\u72ec\u7acb\u7684\u65e5\u5fd7\u5bb9\u5668\u6765\u8bb0\u5f55\u548c\u624b\u673a\u65e5\u5fd7\uff0c\u8fd9\u975e\u5e38\u9002\u7528\u4e8e\u5fae\u670d\u52a1\u67b6\u6784\u3002\u8fd9\u4e2a\u4f18\u52bf\u5728\u4e8e\u8fd9\u5b8c\u5168\u4e0d\u4f9d\u8d56\u4e0e\u5bbf\u4e3b\u673a\u3002\u76f8\u53cd\uff0c\u4e13\u7528\u7684\u65e5\u5fd7\u5bb9\u5668\u53ef\u4ee5\u5141\u8bb8\u4f60\u5728 Docker \u7684\u73af\u5883\u4e2d\u7ba1\u7406\u65e5\u5fd7\u6587\u4ef6\u3002\u4ed6\u4f1a\u81ea\u52a8\u4ece\u5176\u4ed6\u5bb9\u5668\u6536\u96c6\u65e5\u5fd7\uff0c\u76d1\u63a7\uff0c\u5206\u6790\uff0c\u5e76\u4e14\u5c06\u4ed6\u4eec\u8f6c\u5b58\u5230\u4e00\u4e2a\u4e2d\u5fc3\u5b58\u50a8\u4e0a\u3002 \u8fd9\u79cd\u65b9\u5f0f\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u8f7b\u6613\u5730\u5c06\u5bb9\u5668\u5728\u4e0d\u540c\u7684\u5bbf\u4e3b\u673a\u4e2d\u79fb\u52a8\uff0c\u5e76\u4e14\u53ef\u4ee5\u975e\u5e38\u8f7b\u677e\u7684\u6269\u5c55\u65e5\u5fd7\u57fa\u7840\u8bbe\u65bd\uff0c\u53ea\u9700\u8981\u589e\u52a0\u65e5\u5fd7\u5bb9\u5668\u5373\u53ef\u3002 E Logging Using the Sidecar Approach(\u4f7f\u7528\u65e5\u5fd7 Sidecar) \u548c\u4e13\u7528\u7684\u65e5\u5fd7\u5bb9\u5668\u7c7b\u4f3c\uff0c\u4f7f\u7528\u65e5\u5fd7\u5bb9\u5668\uff0c\u4f46\u662f\u4e0d\u540c\u70b9\u5728\u4e8e\uff0c\u6bcf\u4e00\u4e2a\u5e94\u7528\u5bb9\u5668\u90fd\u6709\u4e13\u7528\u7684\u65e5\u5fd7\u5bb9\u5668\uff0c\u5141\u8bb8\u4f60\u5bf9\u6bcf\u4e00\u4e2a\u5e94\u7528\u7684\u65e5\u5fd7\u8fdb\u884c\u81ea\u5b9a\u4e49\u3002\u7b2c\u4e00\u4e2a\u5bb9\u5668\u4f1a\u5c06\u65e5\u5fd7\u6587\u4ef6\u6253\u5370\u5230 volume\uff0c\u7136\u540e\u65e5\u5fd7\u6587\u4ef6\u4f1a\u65e5\u5fd7\u5bb9\u5668\u6253\u4e0a\u6807\u7b7e\uff0c\u7136\u540e\u518d\u88ab\u4f20\u9001\u5230\u65e5\u5fd7\u7ba1\u7406\u7cfb\u7edf\u3002 \u4f7f\u7528 sidecar \u7684\u4e00\u4e2a\u4e3b\u8981\u7684\u4f18\u52bf\u662f\uff0c\u4f60\u53ef\u4ee5\u4e3a\u6bcf\u4e00\u4e2a log \u589e\u52a0\u989d\u5916\u81ea\u5b9a\u4e49\u7684\u6807\u7b7e\uff0c\u53ef\u4ee5\u66f4\u597d\u5730\u786e\u5b9a\u5176\u6765\u6e90\u3002 \u540c\u6837\u4e5f\u6709\u4e00\u4e9b\u52a3\u52bf\uff0c\u8bbe\u7f6e\u6216\u6269\u5bb9\u53ef\u80fd\u4f1a\u53d8\u5f97\u975e\u5e38\u590d\u6742\u548c\u56f0\u96be\uff0c\u5e76\u4e14\u9700\u8981\u66f4\u591a\u7684\u8d44\u6e90\u3002\u4f60\u9700\u8981\u786e\u4fdd\u5e94\u7528\u5bb9\u5668\u548c sidecar \u5bb9\u5668\u662f\u4e00\u8d77\u8fdb\u884c\u5de5\u4f5c\u7684\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u9020\u6210\u6570\u636e\u4e22\u5931\u3002 2 \u751f\u4ea7\u73af\u5883 ServiceAccount \u548c Secret \u5168\u6ce8\u91ca # kubectl get serviceaccount prometheus -o yaml -n monitoring apiVersion: v1 kind: ServiceAccount metadata: annotations: meta.helm.sh/release-name: edge-monitor meta.helm.sh/release-namespace: default creationTimestamp: \"2022-03-17T08:28:27Z\" labels: app.kubernetes.io/managed-by: Helm name: prometheus namespace: monitoring resourceVersion: \"1822\" selfLink: /api/v1/namespaces/monitoring/serviceaccounts/prometheus uid: 384e441e-a5cc-11ec-a7fb-fa163edec582 secrets: - name: prometheus-token-nk6ns #\u8be5ServiceAccount\u7ed1\u5b9a\u7684Secret # kubectl get secret prometheus-token-nk6ns -o yaml -n monitoring apiVersion: v1 kind: Secret metadata: annotations: kubernetes.io/service-account.name: prometheus kubernetes.io/service-account.uid: 384e441e-a5cc-11ec-a7fb-fa163edec582 creationTimestamp: \"2022-03-17T08:28:27Z\" name: prometheus-token-nk6ns namespace: monitoring resourceVersion: \"1818\" selfLink: /api/v1/namespaces/monitoring/secrets/prometheus-token-nk6ns uid: 384f2f5f-a5cc-11ec-a8a9-fa163eb4a930 type: kubernetes.io/service-account-token # Secret\u67093\u79cd\u7c7b\u578b, ServiceAccount\u3001Opaque \u3001Docker\u5de5\u5382\u8ba4\u8bc1\u4fe1\u606f data: #ServiceAccount\u7c7b\u578b\u7684Secret\u5c31\u6709\u8bc1\u4e66\u548ctoken ca.crt: XXXXXXXXXX namespace: bW9uaXRvcmluZw== token: XXXXXXX 3 \u751f\u4ea7\u73af\u5883 DaemonSet \u5168\u6ce8\u91ca # kubectl get daemonset edge-agent -n edge-agent -o yaml apiVersion: extensions/v1beta1 kind: DaemonSet metadata: annotations: meta.helm.sh/release-name: edge-agent meta.helm.sh/release-namespace: default creationTimestamp: \"2022-08-03T02:47:04Z\" generation: 2 labels: app.kubernetes.io/managed-by: Helm name: edge-agent namespace: edge-agent resourceVersion: \"112753741\" selfLink: /apis/extensions/v1beta1/namespaces/edge-agent/daemonsets/edge-agent uid: 8e75c2cf-12d6-11ed-ae3f-fa163e3fb8c4 spec: revisionHistoryLimit: 10 selector: matchLabels: app: agent template: metadata: creationTimestamp: null labels: app: agent spec: containers: - command: - /opt/www/your_agent/bin/yourdomain.agent image: hub.youdomain.org/your_agent/yourdomain_agent:v1.0.3 imagePullPolicy: IfNotPresent name: edge-agent resources: limits: cpu: 500m memory: 512Mi requests: cpu: 500m memory: 512Mi securityContext: #\u8868\u793a\u8fdb\u7a0b\u4ee5root\u6743\u9650\u8fd0\u884c privileged: true terminationMessagePath: /dev/termination-log terminationMessagePolicy: File volumeMounts: - mountPath: /opt/tmp name: metrics - mountPath: /appstore/app/kubernetes/log name: k8s-log - mountPath: /data00/www/gce/containers name: containers - mountPath: /var/log name: agent-log - mountPath: /opt/www/edge_agent/etc/conf.yaml name: config subPath: conf.yaml dnsPolicy: ClusterFirst restartPolicy: Always schedulerName: default-scheduler securityContext: {} terminationGracePeriodSeconds: 30 tolerations: #\u5bb9\u5fcd\u5ea6\u914d\u7f6e, \u8868\u793a\u5b83\u53ef\u4ee5\u8c03\u5ea6\u5230Master\u8282\u70b9\u4e0a. - effect: NoSchedule key: node-role.kubernetes.io/master operator: Exists volumes: - hostPath: path: /opt/tmp type: DirectoryOrCreate name: metrics - configMap: defaultMode: 420 name: clean-log-path name: config - hostPath: path: /appstore/app/kubernetes/log type: DirectoryOrCreate name: k8s-log - hostPath: path: /data00/www/gce/containers type: DirectoryOrCreate name: containers - hostPath: path: /var/log type: DirectoryOrCreate name: agent-log templateGeneration: 2 #\u65b0\u7248\u672c\u5df2\u7ecf\u4e0d\u63a8\u8350 updateStrategy: rollingUpdate: maxUnavailable: 100% type: RollingUpdate status: currentNumberScheduled: 24 desiredNumberScheduled: 24 numberAvailable: 24 numberMisscheduled: 0 numberReady: 24 observedGeneration: 2 updatedNumberScheduled: 24 \u516d Service Mesh \u6700\u4f73\u5b9e\u8df5","title":"\u7b2c\u516d\u7bc7 \u751f\u4ea7\u73af\u5883Kubernetes\u90e8\u7f72\u6700\u4f73\u5b9e\u8df5"},{"location":"chapter_10/6_production_kubernetes_best_practice/#_1","text":"\u672c\u7bc7\u603b\u7ed3\u751f\u4ea7\u73af\u5883\u90e8\u7f72\u548c\u5e94\u7528 Kubernetes \u6700\u4f73\u5b9e\u8df5","title":"\u6982\u8ff0"},{"location":"chapter_10/6_production_kubernetes_best_practice/#_2","text":"","title":"\u4e00 \u7f51\u7edc\u63d2\u4ef6\u9009\u62e9\u548c\u7f51\u7edc\u65b9\u6848"},{"location":"chapter_10/6_production_kubernetes_best_practice/#1","text":"","title":"1 \u7f51\u7edc\u63d2\u4ef6"},{"location":"chapter_10/6_production_kubernetes_best_practice/#11-cnm-cni","text":"\u5bb9\u5668\u7f51\u7edc\u53d1\u5c55\u5230\u73b0\u5728\uff0c\u5f62\u6210\u4e86\u4e24\u5927\u9635\u8425\uff0c\u5c31\u662f Docker \u7684 CNM \u548c Google\u3001CoreOS\u3001Kuberenetes \u4e3b\u5bfc\u7684 CNI\u3002 \u9996\u5148\u660e\u786e\u4e00\u70b9\uff0cCNM \u548c CNI \u5e76\u4e0d\u662f\u7f51\u7edc\u5b9e\u73b0\uff0c\u4ed6\u4eec\u662f\u7f51\u7edc\u89c4\u8303\u548c\u7f51\u7edc\u4f53\u7cfb\uff0c\u4ece\u7814\u53d1\u7684\u89d2\u5ea6\u4ed6\u4eec\u5c31\u662f\u4e00\u5806\u63a5\u53e3\uff0c\u4f60\u5e95\u5c42\u662f\u7528 Flannel \u4e5f\u597d\u3001\u7528 Calico \u4e5f\u597d\uff0c\u4ed6\u4eec\u5e76\u4e0d\u5173\u5fc3\uff0cCNM \u548c CNI \u5173\u5fc3\u7684\u662f\u7f51\u7edc\u7ba1\u7406\u7684\u95ee\u9898\u3002 CNM (Container Network Model) CNI\uff08Container Network Interface\uff09","title":"1.1 CNM &amp; CNI \u9635\u8425\uff1a"},{"location":"chapter_10/6_production_kubernetes_best_practice/#12-kubernetes","text":"\u9996\u5148\u6211\u4eec\u5f97\u5148\u4e86\u89e3 Kubernetes \u7f51\u7edc\u7684\u8bbe\u8ba1\u539f\u5219\uff0c\u7136\u540e\u624d\u80fd\u66f4\u597d\u7684\u7406\u89e3 flannel \u7f51\u7edc\u7684\u5e94\u7528 Kubernetes \u7f51\u7edc\u8bbe\u8ba1\u6a21\u578b\uff1a \u5728 Kubernetes \u7f51\u7edc\u4e2d\u5b58\u5728\u4e24\u79cd IP\uff08Pod IP \u548c Service Cluster IP\uff09, Pod IP \u5730\u5740\u662f\u5b9e\u9645\u5b58\u5728\u4e8e\u67d0\u4e2a\u7f51\u5361(\u53ef\u4ee5\u662f\u865a\u62df\u8bbe\u5907)\u4e0a\u7684\uff0cService Cluster IP \u5b83\u662f\u4e00\u4e2a\u865a\u62df IP\uff0c\u662f\u7531 kube-proxy \u4f7f\u7528 Iptables \u89c4\u5219\u91cd\u65b0\u5b9a\u5411\u5230\u5176\u672c\u5730\u7aef\u53e3\uff0c\u518d\u5747\u8861\u5230\u540e\u7aef Pod \u7684\u3002 \u57fa\u672c\u539f\u5219\uff1a \u6bcf\u4e2a Pod \u90fd\u62e5\u6709\u4e00\u4e2a\u72ec\u7acb\u7684 IP \u5730\u5740\uff08IP per Pod\uff09\uff0c\u800c\u4e14\u5047\u5b9a\u6240\u6709\u7684 pod \u90fd\u5728\u4e00\u4e2a\u53ef\u4ee5\u76f4\u63a5\u8fde\u901a\u7684\u3001\u6241\u5e73\u7684\u7f51\u7edc\u7a7a\u95f4\u4e2d\u3002 \u8bbe\u8ba1\u539f\u56e0\uff1a \u7528\u6237\u4e0d\u9700\u8981\u989d\u5916\u8003\u8651\u5982\u4f55\u5efa\u7acb Pod \u4e4b\u95f4\u7684\u8fde\u63a5\uff0c\u4e5f\u4e0d\u9700\u8981\u8003\u8651\u5c06\u5bb9\u5668\u7aef\u53e3\u6620\u5c04\u5230\u4e3b\u673a\u7aef\u53e3\u7b49\u95ee\u9898\u3002 \u7f51\u7edc\u8981\u6c42\uff1a \u6240\u6709\u7684\u5bb9\u5668\u90fd\u53ef\u4ee5\u5728\u4e0d\u7528 NAT \u7684\u65b9\u5f0f\u4e0b\u540c\u522b\u7684\u5bb9\u5668\u901a\u8baf\uff1b \u6240\u6709\u8282\u70b9(Node)\u90fd\u53ef\u5728\u4e0d\u7528 NAT \u7684\u65b9\u5f0f\u4e0b\u540c\u6240\u6709\u5bb9\u5668\u901a\u8baf\uff1b \u5bb9\u5668\u81ea\u5df1\u770b\u5230\u7684 IP \u548c\u522b\u4eba\u770b\u5230\u7684 IP \u662f\u540c\u4e00\u4e2a\u5730\u5740\u3002","title":"1.2 Kubernetes \u7f51\u7edc\u8bbe\u8ba1\u539f\u5219"},{"location":"chapter_10/6_production_kubernetes_best_practice/#13-kubernetes","text":"\u540c\u4e00 pod \u4e0b\u5bb9\u5668\u4e0e\u5bb9\u5668\u7684\u901a\u4fe1\uff1b \u540c\u4e00\u8282\u70b9\u4e0b\u4e0d\u540c\u7684 pod \u4e4b\u95f4\u7684\u5bb9\u5668\u95f4\u901a\u4fe1\uff1b \u4e0d\u540c\u8282\u70b9\u4e0b\u5bb9\u5668\u4e4b\u95f4\u7684\u901a\u4fe1\uff1b \u96c6\u7fa4\u5916\u90e8\u4e0e\u5185\u90e8\u7ec4\u4ef6\u7684\u901a\u4fe1\uff1b pod \u4e0e service \u4e4b\u95f4\u7684\u901a\u4fe1\uff1b","title":"1.3 Kubernetes \u7f51\u7edc\u4e3b\u8981\u89e3\u51b3\u4ee5\u4e0b\u7f51\u7edc\u901a\u4fe1\u95ee\u9898:"},{"location":"chapter_10/6_production_kubernetes_best_practice/#a-pod","text":"\u540c\u4e00\u4e2a Pod \u7684\u5bb9\u5668\u5171\u4eab\u540c\u4e00\u4e2a\u7f51\u7edc\u547d\u540d\u7a7a\u95f4\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u8bbf\u95ee\u53ef\u4ee5\u7528 localhost \u5730\u5740 + \u5bb9\u5668\u7aef\u53e3\u5c31\u53ef\u4ee5\u8bbf\u95ee\u3002","title":"A \u540c\u4e00 Pod \u4e0b\u5bb9\u5668\u4e0e\u5bb9\u5668\u7684\u901a\u4fe1"},{"location":"chapter_10/6_production_kubernetes_best_practice/#b-node-pod","text":"","title":"B \u540c\u4e00 Node \u4e0b\uff0c\u4e0d\u540c Pod \u4e4b\u95f4\u7684\u901a\u4fe1"},{"location":"chapter_10/6_production_kubernetes_best_practice/#c-node-pod","text":"","title":"C \u4e0d\u540c Node \u4e0b\uff0c\u4e0d\u540c Pod \u4e4b\u95f4\u7684\u901a\u4fe1"},{"location":"chapter_10/6_production_kubernetes_best_practice/#d","text":"","title":"D \u96c6\u7fa4\u5916\u90e8\u4e0e\u5185\u90e8\u7ec4\u4ef6\u7684\u901a\u4fe1"},{"location":"chapter_10/6_production_kubernetes_best_practice/#e-pod-service","text":"","title":"E Pod \u548c Service \u4e4b\u95f4\u7684\u901a\u4fe1"},{"location":"chapter_10/6_production_kubernetes_best_practice/#2-lb","text":"","title":"2 LB \u65b9\u6848"},{"location":"chapter_10/6_production_kubernetes_best_practice/#3-flanel","text":"Flannel \u9996\u5148\u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3a flannel0 \u7684\u7f51\u6865\uff0c\u800c\u4e14\u8fd9\u4e2a\u7f51\u6865\u7684\u4e00\u7aef\u8fde\u63a5 docker0 \u7684\u7f51\u6865\uff0c\u53e6\u4e00\u7aef\u8fde\u63a5\u4e00\u4e2a\u540d\u4e3a flanneld \u7684\u670d\u52a1\u8fdb\u7a0b\u3002 Flanneld \u8fdb\u7a0b\u5e76\u4e0d\u7b80\u5355\uff0c\u5b83\u9996\u5148\u4e0a\u8fde etcd\uff0c\u5229\u7528 etcd \u6765\u7ba1\u7406\u53ef\u5206\u914d\u7684 IP \u5730\u5740\u6bb5\u8d44\u6e90\uff0c\u540c\u65f6\u76d1\u63a7 etcd \u4e2d\u6bcf\u4e2a Pod \u7684\u5b9e\u9645\u5730\u5740\uff0c\u5e76\u5728\u5185\u5b58\u4e2d\u5efa\u7acb\u4e86\u4e00\u4e2a Pod \u8282\u70b9\u8def\u7531\u8868\uff1b\u7136\u540e\u4e0b\u8fde docker0 \u548c\u7269\u7406\u7f51\u7edc\uff0c\u4f7f\u7528\u5185\u5b58\u4e2d\u7684 Pod \u8282\u70b9\u8def\u7531\u8868\uff0c\u5c06 docker0 \u53d1\u7ed9\u5b83\u7684\u6570\u636e\u5305\u5305\u88c5\u8d77\u6765\uff0c\u5229\u7528\u7269\u7406\u7f51\u7edc\u7684\u8fde\u63a5\u5c06\u6570\u636e\u5305\u6295\u9012\u5230\u76ee\u6807 flanneld \u4e0a\uff0c\u4ece\u800c\u5b8c\u6210 pod \u5230 pod \u4e4b\u95f4\u7684\u76f4\u63a5\u7684\u5730\u5740\u901a\u4fe1\u3002 Flannel \u4e4b\u95f4\u7684\u5e95\u5c42\u901a\u4fe1\u534f\u8bae\u7684\u53ef\u9009\u4f59\u5730\u6709\u5f88\u591a\uff0c\u6bd4\u5982 UDP\u3001VXlan\u3001AWS VPC \u7b49\u7b49\u3002\u53ea\u8981\u80fd\u901a\u5230\u5bf9\u7aef\u7684 Flannel \u5c31\u53ef\u4ee5\u4e86\u3002\u6e90 Flannel \u5c01\u5305\uff0c\u76ee\u6807 Flannel \u89e3\u5305\uff0c\u6700\u7ec8 docker0 \u770b\u5230\u7684\u5c31\u662f\u539f\u59cb\u7684\u6570\u636e\uff0c\u975e\u5e38\u900f\u660e\uff0c\u6839\u672c\u611f\u89c9\u4e0d\u5230\u4e2d\u95f4 Flannel \u7684\u5b58\u5728\u3002 Flannel \u7684\u5b89\u88c5\u914d\u7f6e\u7f51\u4e0a\u8bb2\u7684\u5f88\u591a\uff0c\u5728\u8fd9\u91cc\u5c31\u4e0d\u5728\u8d58\u8ff0\u4e86\u3002\u5728\u8fd9\u91cc\u6ce8\u610f\u4e00\u70b9\uff0c\u5c31\u662f flannel \u4f7f\u7528 etcd \u4f5c\u4e3a\u6570\u636e\u5e93\uff0c\u6240\u4ee5\u9700\u8981\u9884\u5148\u5b89\u88c5\u597d etcd\u3002 \u4e0b\u9762\u8bf4\u8bf4\u51e0\u4e2a\u573a\u666f\uff1a 1 \u540c\u4e00 Pod \u5185\u7684\u7f51\u7edc\u901a\u4fe1\u3002\u5728\u540c\u4e00\u4e2a Pod \u5185\u7684\u5bb9\u5668\u5171\u4eab\u540c\u4e00\u4e2a\u7f51\u7edc\u547d\u540d\u7a7a\u95f4\uff0c\u5171\u4eab\u540c\u4e00\u4e2a Linux \u534f\u8bae\u6808\u3002\u6240\u4ee5\u5bf9\u4e8e\u7f51\u7edc\u7684\u5404\u7c7b\u64cd\u4f5c\uff0c\u5c31\u548c\u5b83\u4eec\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\u4e00\u6837\uff0c\u5b83\u4eec\u53ef\u4ee5\u7528 localhost \u5730\u5740\u76f4\u63a5\u8bbf\u95ee\u5f7c\u6b64\u7684\u7aef\u53e3\u3002\u5176\u5b9e\u8fd9\u548c\u4f20\u7edf\u7684\u4e00\u7ec4\u666e\u901a\u7a0b\u5e8f\u8fd0\u884c\u7684\u73af\u5883\u662f\u5b8c\u5168\u4e00\u6837\u7684\uff0c\u4f20\u7edf\u7684\u7a0b\u5e8f\u4e0d\u9700\u8981\u9488\u5bf9\u7f51\u7edc\u505a\u7279\u522b\u7684\u4fee\u6539\u5c31\u53ef\u4ee5\u79fb\u690d\u4e86\u3002\u8fd9\u6837\u505a\u7684\u7ed3\u679c\u662f\u7b80\u5355\u3001\u5b89\u5168\u548c\u9ad8\u6548\uff0c\u4e5f\u80fd\u51cf\u5c11\u5c06\u5df2\u7ecf\u5b58\u5728\u7684\u7a0b\u5e8f\u4ece\u7269\u7406\u673a\u6216\u8005\u865a\u62df\u673a\u79fb\u690d\u5230\u5bb9\u5668\u4e0b\u8fd0\u884c\u7684\u96be\u5ea6\u3002 2 Pod1 \u5230 Pod2 \u7684\u7f51\u7edc\uff0c\u5206\u4e24\u79cd\u60c5\u51b5\u3002Pod1 \u4e0e Pod2 \u4e0d\u5728\u540c\u4e00\u53f0\u4e3b\u673a\u4e0e Pod1 \u4e0e Pod2 \u5728\u540c\u4e00\u53f0\u4e3b\u673a\u3002 2.1 \u5148\u8bf4 Pod1 \u4e0e Pod2 \u4e0d\u5728\u540c\u4e00\u53f0\u4e3b\u673a\u3002Pod \u7684\u5730\u5740\u662f\u4e0e docker0 \u5728\u540c\u4e00\u4e2a\u7f51\u6bb5\u7684\uff0c\u4f46 docker0 \u7f51\u6bb5\u4e0e\u5bbf\u4e3b\u673a\u7f51\u5361\u662f\u4e24\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684 IP \u7f51\u6bb5\uff0c\u5e76\u4e14\u4e0d\u540c Node \u4e4b\u95f4\u7684\u901a\u4fe1\u53ea\u80fd\u901a\u8fc7\u5bbf\u4e3b\u673a\u7684\u7269\u7406\u7f51\u5361\u8fdb\u884c\u3002\u5c06 Pod \u7684 IP \u548c\u6240\u5728 Node \u7684 IP \u5173\u8054\u8d77\u6765\uff0c\u901a\u8fc7\u8fd9\u4e2a\u5173\u8054\u8ba9 Pod \u53ef\u4ee5\u4e92\u76f8\u8bbf\u95ee\u3002 2.2 Pod1 \u4e0e Pod2 \u5728\u540c\u4e00\u53f0\u4e3b\u673a\u3002Pod1 \u548c Pod2 \u5728\u540c\u4e00\u53f0\u4e3b\u673a\u7684\u8bdd\uff0c\u7531 Docker0 \u7f51\u6865\u76f4\u63a5\u8f6c\u53d1\u8bf7\u6c42\u5230 Pod2\uff0c\u4e0d\u9700\u8981\u7ecf\u8fc7 Flannel\u3002 3 Pod \u5230 Service \u7684\u7f51\u7edc\u3002\u521b\u5efa\u4e00\u4e2a Service \u65f6\uff0c\u76f8\u5e94\u4f1a\u521b\u5efa\u4e00\u4e2a\u6307\u5411\u8fd9\u4e2a Service \u7684\u57df\u540d\uff0c\u57df\u540d\u89c4\u5219\u4e3a{\u670d\u52a1\u540d}.{namespace}.svc.{\u96c6\u7fa4\u540d\u79f0}\u3002\u4e4b\u524d Service IP \u7684\u8f6c\u53d1\u7531 iptables \u548c kube-proxy \u8d1f\u8d23\uff0c\u76ee\u524d\u57fa\u4e8e\u6027\u80fd\u8003\u8651\uff0c\u5168\u90e8\u4e3a iptables \u7ef4\u62a4\u548c\u8f6c\u53d1\u3002iptables \u5219\u7531 kubelet \u7ef4\u62a4\u3002Service \u4ec5\u652f\u6301 UDP \u548c TCP \u534f\u8bae\uff0c\u6240\u4ee5\u50cf ping \u7684 ICMP \u534f\u8bae\u662f\u7528\u4e0d\u4e86\u7684\uff0c\u6240\u4ee5\u65e0\u6cd5 ping \u901a Service IP\u3002 4 Pod \u5230\u5916\u7f51\u3002Pod \u5411\u5916\u7f51\u53d1\u9001\u8bf7\u6c42\uff0c\u67e5\u627e\u8def\u7531\u8868, \u8f6c\u53d1\u6570\u636e\u5305\u5230\u5bbf\u4e3b\u673a\u7684\u7f51\u5361\uff0c\u5bbf\u4e3b\u7f51\u5361\u5b8c\u6210\u8def\u7531\u9009\u62e9\u540e\uff0ciptables \u6267\u884c Masquerade\uff0c\u628a\u6e90 IP \u66f4\u6539\u4e3a\u5bbf\u4e3b\u7f51\u5361\u7684 IP\uff0c\u7136\u540e\u5411\u5916\u7f51\u670d\u52a1\u5668\u53d1\u9001\u8bf7\u6c42\u3002 5 \u96c6\u7fa4\u5916\u90e8\u8bbf\u95ee Pod \u6216 Service \u7531\u4e8e Pod \u548c Service \u662f Kubernetes \u96c6\u7fa4\u8303\u56f4\u5185\u7684\u865a\u62df\u6982\u5ff5\uff0c\u6240\u4ee5\u96c6\u7fa4\u5916\u7684\u5ba2\u6237\u7aef\u7cfb\u7edf\u65e0\u6cd5\u901a\u8fc7 Pod \u7684 IP \u5730\u5740\u6216\u8005 Service \u7684\u865a\u62df IP \u5730\u5740\u548c\u865a\u62df\u7aef\u53e3\u53f7\u8bbf\u95ee\u5230\u5b83\u4eec\u3002\u4e3a\u4e86\u8ba9\u5916\u90e8\u5ba2\u6237\u7aef\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e9b\u670d\u52a1\uff0c\u53ef\u4ee5\u5c06 Pod \u6216 Service \u7684\u7aef\u53e3\u53f7\u6620\u5c04\u5230\u5bbf\u4e3b\u673a\uff0c\u4ee5\u4f7f\u5f97\u5ba2\u6237\u7aef\u5e94\u7528\u80fd\u591f\u901a\u8fc7\u7269\u7406\u673a\u8bbf\u95ee\u5bb9\u5668\u5e94\u7528\u3002 \u603b\u7ed3\uff1a Flannel \u5b9e\u73b0\u4e86\u5bf9 Kubernetes \u7f51\u7edc\u7684\u652f\u6301\uff0c\u4f46\u662f\u5b83\u5f15\u5165\u4e86\u591a\u4e2a\u7f51\u7edc\u7ec4\u4ef6\uff0c\u5728\u7f51\u7edc\u901a\u4fe1\u65f6\u9700\u8981\u8f6c\u5230 flannel0 \u7f51\u7edc\u63a5\u53e3\uff0c\u518d\u8f6c\u5230\u7528\u6237\u6001\u7684 flanneld \u7a0b\u5e8f\uff0c\u5230\u5bf9\u7aef\u540e\u8fd8\u9700\u8981\u8d70\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u53cd\u8fc7\u7a0b\uff0c\u6240\u4ee5\u4e5f\u4f1a\u5f15\u5165\u4e00\u4e9b\u7f51\u7edc\u7684\u65f6\u5ef6\u635f\u8017\u3002\u53e6\u5916 Flannel \u9ed8\u8ba4\u7684\u5e95\u5c42\u901a\u4fe1\u534f\u8bae\u662f UDP\u3002UDP \u672c\u8eab\u662f\u975e\u53ef\u9760\u534f\u8bae\uff0c\u867d\u7136\u4e24\u7aef\u7684 TCP \u5b9e\u73b0\u4e86\u53ef\u9760\u4f20\u8f93\uff0c\u4f46\u5728\u5927\u6d41\u91cf\u3001\u9ad8\u5e76\u53d1\u5e94\u7528\u573a\u666f\u4e0b\u8fd8\u9700\u8981\u53cd\u590d\u8c03\u8bd5\uff0c\u786e\u4fdd\u4e0d\u4f1a\u51fa\u73b0\u4f20\u8f93\u8d28\u91cf\u7684\u95ee\u9898\u3002\u7279\u522b\u662f\u5bf9\u7f51\u7edc\u4f9d\u8d56\u91cd\u7684\u5e94\u7528\uff0c\u9700\u8981\u8bc4\u4f30\u5bf9\u4e1a\u52a1\u7684\u5f71\u54cd\u3002","title":"3 \u7f51\u7edc\u63d2\u4ef6\u4e4b Flanel"},{"location":"chapter_10/6_production_kubernetes_best_practice/#4-calico","text":"","title":"4 \u7f51\u7edc\u63d2\u4ef6\u4e4b Calico"},{"location":"chapter_10/6_production_kubernetes_best_practice/#_3","text":"","title":"\u4e8c \u5b58\u50a8\u65b9\u6848"},{"location":"chapter_10/6_production_kubernetes_best_practice/#_4","text":"","title":"\u4e09 \u76d1\u63a7\u548c\u544a\u8b66\u65b9\u6848"},{"location":"chapter_10/6_production_kubernetes_best_practice/#_5","text":"","title":"\u56db \u7528\u6237\u6743\u9650\u7ba1\u7406"},{"location":"chapter_10/6_production_kubernetes_best_practice/#kubernetes","text":"\u8bf8\u5982 namespace\u3001deployment\u3001configmap\u3001scret\u3001","title":"\u4e94 Kubernetes \u7ec4\u4ef6\u5e94\u7528\u5b9e\u8df5"},{"location":"chapter_10/6_production_kubernetes_best_practice/#1-deployment","text":"Deployment \u8bf4\u660e \u67e5\u770b\u5b98\u65b9\u8bf4\u660e, \u9664\u4e86\u5b98\u65b9\u6587\u6863, \u8fd8\u53ef\u4ee5\u4f7f\u7528 kubectl explain \u547d\u4ee4 [root@k8s-master ~]# kubectl explain pod.spec.terminationGracePeriodSeconds KIND: Pod VERSION: v1 FIELD: terminationGracePeriodSeconds <integer> DESCRIPTION: Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.","title":"1 \u751f\u4ea7\u73af\u5883 Deployment \u5168\u6ce8\u91ca"},{"location":"chapter_10/6_production_kubernetes_best_practice/#a","text":"apiVersion: extensions/v1beta1 kind: Deployment metadata: annotations:#\u6ce8\u91ca deployment.kubernetes.io/revision: \"1\" creationTimestamp: \"2022-07-04T13:29:55Z\" generation: 1 labels:#\u8be5Deployment\u672c\u8eab\u7684label GCE_CLUSTER: wuhan name: dp-2e2d83bae2 psm: your.test.hello name: dp-2e2d83bae2 namespace: ues-workers ownerReferences: - apiVersion: you.yourdomain.org/v1alpha2 blockOwnerDeletion: true controller: true kind: Task name: task-vsh8z uid: 647e19e5-fb9d-11ec-a7fb-fa163edec582 resourceVersion: \"95427195\" selfLink: /apis/extensions/v1beta1/namespaces/ues-workers/deployments/dp-2e2d83bae2 uid: 6480217a-fb9d-11ec-a7fb-fa163edec582 spec: minReadySeconds: 10 #\u6700\u5c11\u542f\u52a810\u79d2,\u624d\u8ba4\u4e3a\u4ed6\u662fReady progressDeadlineSeconds: 600 #Deployment \u63a7\u5236\u5668\u5728\uff08\u901a\u8fc7 Deployment \u72b6\u6001\uff09 \u6807\u793a Deployment \u8fdb\u5c55\u505c\u6ede\u4e4b\u524d\uff0c\u9700\u8981\u7b49\u5f85\u6240\u7ed9\u7684\u65f6\u957f\u3002 \u5355\u4f4d\u79d2\u3002 replicas: 1 #\u526f\u672c\u6570,1 revisionHistoryLimit: 3 #\u5386\u53f2\u7248\u672c\u4fdd\u7559\u51e0\u4e2a, \u7528\u4e8e\u56de\u6edadeployment\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a0\uff0c\u5219\u8868\u793a\u4e0d\u4fdd\u5b58\u5386\u53f2\u7248\u672c. \u9ed8\u8ba4\u662f\u4fdd\u7559\u6240\u6709\u5386\u53f2\u7248\u672c. selector: matchLabels: cluster_id: \"2300\" name: dp-2e2d83bae2 paas_cluster: wuhan psm: your.test.hello service_id: \"181\" strategy: rollingUpdate: maxSurge: 25% maxUnavailable: 25% type: RollingUpdate template: metadata: annotations: deployment.gce.kubernetes.io/requestCpuUserDemand: 100m deployment.gce.kubernetes.io/requestMemUserDemand: 102Mi image_version: 1.0.0.4 creationTimestamp: null labels: cluster_id: \"2300\" name: dp-2e2d83bae2 paas_cluster: wuhan psm: your.test.hello service_id: \"181\" spec: containers: - env: - name: API_MANAGER_ADDR - name: BIND_IF value: eth0 - name: CONSUL_HTTP_HOST value: 127.0.0.1 - name: ENABLE_CONSUL value: \"True\" - name: IS_DOCKER_ENV value: \"true\" - name: IS_EDGE_ENVIRONMENT value: \"1\" - name: IS_PORT_ENV value: \"1\" - name: IS_READY_CHECK value: \"1\" - name: MY_CPU_LIMIT valueFrom: resourceFieldRef: containerName: dp-2e2d83bae2 divisor: \"0\" resource: limits.cpu - name: MY_CPU_REQUEST valueFrom: resourceFieldRef: containerName: dp-2e2d83bae2 divisor: \"0\" resource: requests.cpu - name: MY_HOST_IP valueFrom: fieldRef: apiVersion: v1 fieldPath: status.hostIP - name: MY_MEM_LIMIT valueFrom: resourceFieldRef: containerName: dp-2e2d83bae2 divisor: \"0\" resource: limits.memory - name: MY_MEM_REQUEST valueFrom: resourceFieldRef: containerName: dp-2e2d83bae2 divisor: \"0\" resource: requests.memory - name: MY_POD_IP valueFrom: fieldRef: apiVersion: v1 fieldPath: status.podIP - name: MY_POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.name - name: MY_POD_NAMESPACE valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.namespace - name: NET_WORK_MODE value: \"1\" - name: REGION value: China-Edge - name: RUNTIME_IDC_NAME value: uploadagwh - name: GCE_CLUSTER value: wuhan - name: GCE_CLUSTER_ID value: \"2300\" - name: GCE_CONTAINER_NAME value: dp-2e2d83bae2 - name: GCE_ENV value: prod - name: GCE_HOST_ENV value: online - name: GCE_INSTANCE_WEIGHT value: \"10\" - name: GCE_LOGICAL_CLUSTER value: wuhan - name: GCE_PHYSICAL_CLUSTER value: uploadagwh - name: GCE_PORTS - name: GCE_PSM value: your.test.hello - name: GCE_PSM_OWNER value: your.yzy - name: GCE_STAGE value: all_dc lifecycle: #container\u751f\u547d\u5468\u671f\u94a9\u5b50, \u6709poststart\u548cpreStop preStop: exec: # SIGTERM triggers a quick exit; gracefully terminate instead command: [\"/usr/sbin/nginx\",\"-s\",\"quit\"] image: hub.yourdomain.com/project/cm_hello:b0748cc264e1756b2dd3226e5e39f1ce imagePullPolicy: IfNotPresent name: dp-2e2d83bae2 resources: limits: cpu: 100m memory: 102Mi requests: cpu: 100m memory: 102Mi terminationMessagePath: /dev/termination-log terminationMessagePolicy: File #\u9ed8\u8ba4\u503c\u662fFile, \u8868\u660eterminationMessage\u53ea\u80fd\u4ece\u7279\u5b9a\u6587\u4ef6\u83b7\u53d6. \u8be5\u9009\u9879\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u4e3a'FallbackToLogsOnError', \u8868\u660e\u8ba9Kubernetes\u53bbContainer\u65e5\u5fd7\u6587\u4ef6\u91cc\u53bb\u627eterminationMessage, \u90a3\u4e48\u5177\u4f53\u662f\u5565\u4f4d\u7f6e\u5462?\u5c31\u662fContainer\u5bf9\u5e94\u65e5\u5fd7\u6587\u4ef6\u7684\u6700\u540e\u4e00\u4e2aChunk. volumeMounts: - name: sys-resolv-conf mountPath: /etc/resolv.conf mountPropagation: HostToContainer readOnly: true hostNetwork: true #\u9ed8\u8ba4\u4e3afalse. \u5f53pod \u8bbe\u7f6ehostNetwork: true\u65f6\u5019\uff0cPod\u4e2d\u7684\u6240\u6709\u5bb9\u5668\u5c31\u76f4\u63a5\u66b4\u9732\u5728\u5bbf\u4e3b\u673a\u7684\u7f51\u7edc\u73af\u5883\u4e2d\uff0c\u8fd9\u65f6\u5019\uff0cPod\u7684PodIP\u5c31\u662f\u5176\u6240\u5728Node\u7684IP\u3002\u5bf9\u4e8e\u540cDeployment\u4e0b\u7684hostNetwork: true\u542f\u52a8\u7684Pod\uff0c\u6bcf\u4e2anode\u4e0a\u53ea\u80fd\u542f\u52a8\u4e00\u4e2a\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cHost\u6a21\u5f0f\u7684Pod\u542f\u52a8\u526f\u672c\u6570\u4e0d\u53ef\u4ee5\u591a\u4e8e\u201c\u76ee\u6807node\u201d\u7684\u6570\u91cf\uff0c dnsPolicy: ClusterFirstWithHostNet # \u5982\u679c\u672a\u660e\u786e\u6307\u5b9a dnsPolicy\uff0c\u5219\u4f7f\u7528 \"ClusterFirst\". \u5982\u679c\u6ca1\u6709\u4ee5hostNetwork \u65b9\u5f0f\u8fd0\u884c\u7684 Pod, \u5176\u5b9e\u8bbe\u7f6e\u4e86 ClusterFirstWithHostNet\u540e\u4e5f\u4f1a\u56de\u9000\u5230ClusterFirst. restartPolicy: Always schedulerName: default-scheduler #\u5982\u679c\u9ed8\u8ba4\u7684\u8c03\u5ea6\u5668\u4e0d\u6ee1\u8db3\u8981\u6c42\uff0c\u8fd8\u53ef\u4ee5\u90e8\u7f72\u81ea\u5b9a\u4e49\u7684\u8c03\u5ea6\u5668\u3002\u5e76\u4e14\uff0c\u5728\u6574\u4e2a\u96c6\u7fa4\u4e2d\u8fd8\u53ef\u4ee5\u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u8c03\u5ea6\u5668\u5b9e\u4f8b\uff0c\u901a\u8fc7 pod.Spec.schedulerName \u6765\u9009\u62e9\u4f7f\u7528\u54ea\u4e00\u4e2a\u8c03\u5ea6\u5668\uff08\u9ed8\u8ba4\u4f7f\u7528\u5185\u7f6e\u7684\u8c03\u5ea6\u5668\uff09 securityContext: {} terminationGracePeriodSeconds: 30 #\u5411\u5bb9\u5668\u8fdb\u7a0b\u53d1\u9001KILL\u4fe1\u53f7\u4e4b\u524d\u7684\u7b49\u5f85\u65f6\u95f4. \u9996\u5148\u8fd0\u884cpreStop\u52fe\u5b50, \u7136\u540e\u5411\u5bb9\u5668\u53d1\u9001\u505c\u6b62\u547d\u4ee4(\u6bd4\u5982docker stop xxxx), \u7136\u540e\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\u540e, \u53d1\u9001SIGKILL\u4fe1\u53f7\u3001\u5f3a\u5236\u5173\u95ed. \u8fd0\u884cpreStop\u52fe\u5b50 + docker stop\u662f\u4e32\u884c\u7684, \u5e76\u4e14\u65f6\u95f4\u52a0\u5728\u4e00\u8d77\u4e0d\u80fd\u8d85\u8fc7terminationGracePeriodSeconds. volumes: - name: sys-resolv-conf hostPath: path: /etc/resolv.conf type: FileOrCreate status: availableReplicas: 1 conditions: - lastTransitionTime: \"2022-07-04T13:29:55Z\" lastUpdateTime: \"2022-07-04T13:30:15Z\" message: ReplicaSet \"dp-2e2d83bae2-7fd8bdbfd8\" has successfully progressed. reason: NewReplicaSetAvailable status: \"True\" type: Progressing - lastTransitionTime: \"2022-11-17T09:40:24Z\" lastUpdateTime: \"2022-11-17T09:40:24Z\" message: Deployment has minimum availability. reason: MinimumReplicasAvailable status: \"True\" type: Available observedGeneration: 1 readyReplicas: 1 replicas: 1 updatedReplicas: 1","title":"\u6848\u4f8b A"},{"location":"chapter_10/6_production_kubernetes_best_practice/#2-docker","text":"\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b Docker \u5bb9\u5668\u7684\u65e5\u5fd7\u4f1a\u8f93\u51fa\u5230\u4e00\u4e2a json-file \u6587\u4ef6\u4e2d\uff0c\u5bb9\u5668\u8f93\u51fa\u5230 stdout \u548c stderr \u7684\u5185\u5bb9\u52a0\u4e0a\u65f6\u95f4\u6233\u4f1a\u88ab\u8bb0\u5f55\u5230\u5bbf\u4e3b\u673a\u3002 \u8fd9\u4e9b\u65e5\u5fd7\u6587\u4ef6\u5728\u5bbf\u4e3b\u673a\u7684 /var/lib/docker/containers/ \u6587\u4ef6\u5939\u4e0b\uff0c\u4ee5\u8fd9\u6837\u7684\u5f62\u5f0f\u547d\u540d\uff1a /var/lib/docker/containers/<container id>/<container id>-json.log","title":"2 \u751f\u4ea7\u73af\u5883 Docker \u65e5\u5fd7\u6700\u4f73\u5b9e\u8df5"},{"location":"chapter_10/6_production_kubernetes_best_practice/#21-docker","text":"A \u4fee\u6539 Docker \u914d\u7f6e vi /etc/docker/daemon.json { \"log-driver\": \"json-file\", \"log-opts\": {\"max-size\": \"100m\", \"max-file\": \"5\"} } B \u6216\u8005\u547d\u4ee4\u884c\uff1a docker run --log-opt max-size=10m --log-opt max-file=5 my-app:latest","title":"2.1 \u9650\u5236 Docker \u5bb9\u5668\u65e5\u5fd7\u5927\u5c0f"},{"location":"chapter_10/6_production_kubernetes_best_practice/#22-docker","text":"","title":"2.2 Docker \u65e5\u5fd7\u7b56\u7565\u548c\u6700\u4f73\u5b9e\u8df5"},{"location":"chapter_10/6_production_kubernetes_best_practice/#a_1","text":"\u5e94\u7528\u81ea\u5df1\u53bb\u7ba1\u7406\u81ea\u5df1\u7684\u65e5\u5fd7\uff0c\u6bd4\u5982\u4f7f\u7528 Logging Framework\uff0c\u5728 Java \u4e2d\u901a\u5e38\u4f7f\u7528 log4j \u5c06\u65e5\u5fd7\u6253\u5370\u5230\u4e00\u4e2a\u8fdc\u7aef\u7684\u4e2d\u5fc3\u5316\u5730\u65b9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7ed5\u8fc7 Docker \u548c\u64cd\u4f5c\u7cfb\u7edf\u3002\u8fd9\u79cd\u65b9\u5f0f\u7ed9\u4e88\u4e86\u5f00\u53d1\u8005\u66f4\u591a\u7684\u63a7\u5236\u6743\u3002 \u4e3a\u4e86\u4fdd\u5b58\u65e5\u5fd7\u6570\u636e\uff0c\u4f60\u53ef\u4ee5\u914d\u7f6e\u4e00\u4e2a\u6301\u4e45\u5316\u7684\u5b58\u50a8\u6216\u5c06\u65e5\u5fd7\u8f6c\u53d1\u5230\u4e00\u4e2a\u8fdc\u7a0b\u65e5\u5fd7\u7684\u7cfb\u7edf\uff0c\u6bd4\u5982 Elastic Stack \u6216 Sematext Cloud\uff0c\u4f46\u662f\u57fa\u4e8e\u5e94\u7528\u7684\u65e5\u5fd7\u6846\u67b6\u5b58\u5728\u7684\u95ee\u9898\u4fbf\u662f\u5982\u679c\u90e8\u7f72\u4e86\u591a\u4e2a\u5bb9\u5668\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u4e00\u4e2a\u65b9\u5f0f\u6765\u544a\u8bc9\u65e5\u5fd7\u7cfb\u7edf\uff0c\u54ea\u4e9b\u65e5\u5fd7\u5c5e\u4e8e\u54ea\u4e2a\u5bb9\u5668\u3002","title":"A \u901a\u8fc7\u5e94\u7528\u81ea\u5df1\u7ba1\u7406\u65e5\u5fd7"},{"location":"chapter_10/6_production_kubernetes_best_practice/#b-data-volumes","text":"\u4f60\u53ef\u4ee5\u5728\u5bb9\u5668\u5185\u90e8\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\uff0c\u7136\u540e\u5c06\u8be5\u76ee\u5f55\u6302\u8f7d\u5230\u5bbf\u4e3b\u673a\u4e0a\uff0c\u90a3\u4e48\u4e00\u4e9b\u957f\u671f\u6216\u5171\u4eab\u4f7f\u7528\u7684\u6570\u636e\u53ef\u4ee5\u957f\u4e45\u7684\u5b58\u50a8\u3002\u4f60\u53ef\u4ee5\u590d\u5236\uff0c\u5907\u4efd\uff0c\u6216\u8005\u4ece\u5176\u4ed6\u5bb9\u5668\u8bbf\u95ee\u8fd9\u4e9b\u6570\u636e\u3002\u4e5f\u53ef\u4ee5\u5728\u591a\u4e2a\u5bb9\u5668\u4e4b\u95f4\u5171\u4eab\u8fd9\u4e9b volume\u3002 \u4f46\u662f\u4f7f\u7528 Data Volume \u5b58\u5728\u7684\u95ee\u9898\u662f\uff0c\u5f88\u96be\u5c06\u8fd9\u4e9b\u5bb9\u5668\u8fc1\u79fb\u5230\u5176\u4ed6\u5bbf\u4e3b\u673a\u800c\u4e0d\u4e22\u5931\u6570\u636e\u3002","title":"B \u901a\u8fc7 Data Volumes \u8bb0\u5f55\u65e5\u5fd7"},{"location":"chapter_10/6_production_kubernetes_best_practice/#c-docker-logging-driver","text":"\u5728 Docker \u4e0b\uff0c\u53e6\u5916\u4e00\u4e2a\u8bb0\u5f55\u65e5\u5fd7\u7684\u65b9\u5f0f\u662f\u4f7f\u7528 logging drivers\u3002\u4e0d\u50cf Data Volumes, Docker logging driver \u4f1a\u4ece\u5bb9\u5668\u7684 stdout \u548c stderr \u8f93\u51fa\u4e2d\u76f4\u63a5\u8bfb\u53d6\u6570\u636e\u3002\u9ed8\u8ba4\u7684\u914d\u7f6e\u4f1a\u5c06\u8fd9\u4e9b\u65e5\u5fd7\u8bb0\u5f55\u5230\u5bbf\u4e3b\u673a\u7684\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u4f46\u662f\u6539\u53d8 logging driver \u53ef\u4ee5\u5141\u8bb8\u4f60\u5c06\u4e8b\u4ef6\u8f6c\u53d1\u7ed9 syslog, gelf, journald \u6216\u5176\u4ed6 endpoints\u3002 \u56e0\u4e3a\u5bb9\u5668\u4e0d\u518d\u9700\u8981\u8bfb\u5199\u65e5\u5fd7\u6587\u4ef6\uff0c\u53ef\u4ee5\u63d0\u5347\u4e00\u5b9a\u7684\u6027\u80fd\u3002\u4f46\u662f\u4e5f\u6709\u4e00\u4e9b\u5f0a\u7aef\uff0c Docker log \u547d\u4ee4\u53ea\u80fd\u5728 json-file log driver \u4e0b\u4f7f\u7528\uff1blog diver \u6709\u4e00\u4e9b\u529f\u80fd\u9650\u5236\uff0c\u65e5\u5fd7\u6587\u4ef6\u53ea\u80fd\u88ab\u4f20\u8f93\u800c\u4e0d\u80fd\u88ab\u89e3\u6790\uff1b\u5f53 TCP \u670d\u52a1\u4e0d\u53ef\u8fbe\u65f6\uff0c\u5bb9\u5668\u4f1a shut down\u3002 Docker Logging Driver \u4e4b json-file \u548c syslog \u533a\u522b: json-file \u6a21\u5f0f\u5f00\u9500\u5c0f, \u4f46\u4e0d\u652f\u6301\u591a\u884c\u6d88\u606f. syslog \u6a21\u5f0f\u5f00\u9500\u5927, \u4f46\u652f\u6301\u591a\u884c\u6d88\u606f.","title":"C \u901a\u8fc7 Docker Logging Driver \u8bb0\u5f55\u65e5\u5fd7"},{"location":"chapter_10/6_production_kubernetes_best_practice/#logging-driver","text":"\u9009\u9879\u89e3\u91ca\uff1a logagent\uff1a\u8fd9\u662f\u4e00\u4e2a\u901a\u7528\u7684 log shipper\uff0cLogagent Docker image \u662f\u4e00\u4e2a\u63d0\u524d\u914d\u7f6e\u597d Log \u6536\u96c6\u7684\u955c\u50cf\uff0cLogagent \u4e0d\u4ec5\u4f1a\u6536\u96c6\u65e5\u5fd7\uff0c\u8fd8\u4f1a\u6536\u96c6\u8bf8\u5982\u955c\u50cf\u540d\u5b57\uff0c\u5bb9\u5668 ID\uff0c\u5bb9\u5668\u540d\u5b57\uff0cSwarm service \u7b49 meta-data \u6216 Kubernetes meta-data\u3002\u5e76\u4e14\u5b83\u53ef\u4ee5\u5904\u7406\u591a\u884c\u65e5\u5fd7\uff0c\u53ef\u4ee5\u89e3\u6790\u5bb9\u5668\u7684\u65e5\u5fd7\u7b49\u7b49 syslog: \u5c06\u65e5\u5fd7\u8f6c\u53d1\u5230 syslog \u670d\u52a1 journald:\u5c06\u5bb9\u5668\u65e5\u5fd7\u53d1\u9001\u5230 systemd journal fluentd: \u5c06\u65e5\u5fd7\u4fe1\u606f\u53d1\u9001\u5230 Fluentd \u6536\u96c6\u5668 elf\uff1a\u5c06\u5bb9\u5668\u7684\u65e5\u5fd7\u5199\u5230 Graylog Extended Log Format(GELF) \u7aef\uff0c\u6bd4\u5982 GrayLog \u6216 Logstash awslogs\uff1a\u5c06\u65e5\u5fd7\u53d1\u9001\u5230 AWS CloudWatch Logs splunk\uff1a\u901a\u8fc7 HTTP Event Collector\uff08HEC\uff09\u5c06\u65e5\u5fd7\u5199\u5230 Splunk cplogs\uff1a\u5c06\u65e5\u5fd7\u53d1\u9001\u5230 Google Cloud Platform\uff08GCP\uff09Logging logentries: \u5c06\u65e5\u5fd7\u5199\u5230 Rapid7 Logentries etwlogs: \u5c06\u65e5\u5fd7\u5199\u5230 Event Tracing for Windows\uff08ETW\uff09","title":"Logging Driver \u9009\u9879"},{"location":"chapter_10/6_production_kubernetes_best_practice/#d_1","text":"\u53e6\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u662f\u901a\u8fc7\u4e00\u4e2a\u4e13\u7528\u7684\u3001\u72ec\u7acb\u7684\u65e5\u5fd7\u5bb9\u5668\u6765\u8bb0\u5f55\u548c\u624b\u673a\u65e5\u5fd7\uff0c\u8fd9\u975e\u5e38\u9002\u7528\u4e8e\u5fae\u670d\u52a1\u67b6\u6784\u3002\u8fd9\u4e2a\u4f18\u52bf\u5728\u4e8e\u8fd9\u5b8c\u5168\u4e0d\u4f9d\u8d56\u4e0e\u5bbf\u4e3b\u673a\u3002\u76f8\u53cd\uff0c\u4e13\u7528\u7684\u65e5\u5fd7\u5bb9\u5668\u53ef\u4ee5\u5141\u8bb8\u4f60\u5728 Docker \u7684\u73af\u5883\u4e2d\u7ba1\u7406\u65e5\u5fd7\u6587\u4ef6\u3002\u4ed6\u4f1a\u81ea\u52a8\u4ece\u5176\u4ed6\u5bb9\u5668\u6536\u96c6\u65e5\u5fd7\uff0c\u76d1\u63a7\uff0c\u5206\u6790\uff0c\u5e76\u4e14\u5c06\u4ed6\u4eec\u8f6c\u5b58\u5230\u4e00\u4e2a\u4e2d\u5fc3\u5b58\u50a8\u4e0a\u3002 \u8fd9\u79cd\u65b9\u5f0f\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u8f7b\u6613\u5730\u5c06\u5bb9\u5668\u5728\u4e0d\u540c\u7684\u5bbf\u4e3b\u673a\u4e2d\u79fb\u52a8\uff0c\u5e76\u4e14\u53ef\u4ee5\u975e\u5e38\u8f7b\u677e\u7684\u6269\u5c55\u65e5\u5fd7\u57fa\u7840\u8bbe\u65bd\uff0c\u53ea\u9700\u8981\u589e\u52a0\u65e5\u5fd7\u5bb9\u5668\u5373\u53ef\u3002","title":"D \u4f7f\u7528\u4e13\u7528\u7684\u65e5\u5fd7\u5bb9\u5668\u8bb0\u5f55\u65e5\u5fd7"},{"location":"chapter_10/6_production_kubernetes_best_practice/#e-logging-using-the-sidecar-approach-sidecar","text":"\u548c\u4e13\u7528\u7684\u65e5\u5fd7\u5bb9\u5668\u7c7b\u4f3c\uff0c\u4f7f\u7528\u65e5\u5fd7\u5bb9\u5668\uff0c\u4f46\u662f\u4e0d\u540c\u70b9\u5728\u4e8e\uff0c\u6bcf\u4e00\u4e2a\u5e94\u7528\u5bb9\u5668\u90fd\u6709\u4e13\u7528\u7684\u65e5\u5fd7\u5bb9\u5668\uff0c\u5141\u8bb8\u4f60\u5bf9\u6bcf\u4e00\u4e2a\u5e94\u7528\u7684\u65e5\u5fd7\u8fdb\u884c\u81ea\u5b9a\u4e49\u3002\u7b2c\u4e00\u4e2a\u5bb9\u5668\u4f1a\u5c06\u65e5\u5fd7\u6587\u4ef6\u6253\u5370\u5230 volume\uff0c\u7136\u540e\u65e5\u5fd7\u6587\u4ef6\u4f1a\u65e5\u5fd7\u5bb9\u5668\u6253\u4e0a\u6807\u7b7e\uff0c\u7136\u540e\u518d\u88ab\u4f20\u9001\u5230\u65e5\u5fd7\u7ba1\u7406\u7cfb\u7edf\u3002 \u4f7f\u7528 sidecar \u7684\u4e00\u4e2a\u4e3b\u8981\u7684\u4f18\u52bf\u662f\uff0c\u4f60\u53ef\u4ee5\u4e3a\u6bcf\u4e00\u4e2a log \u589e\u52a0\u989d\u5916\u81ea\u5b9a\u4e49\u7684\u6807\u7b7e\uff0c\u53ef\u4ee5\u66f4\u597d\u5730\u786e\u5b9a\u5176\u6765\u6e90\u3002 \u540c\u6837\u4e5f\u6709\u4e00\u4e9b\u52a3\u52bf\uff0c\u8bbe\u7f6e\u6216\u6269\u5bb9\u53ef\u80fd\u4f1a\u53d8\u5f97\u975e\u5e38\u590d\u6742\u548c\u56f0\u96be\uff0c\u5e76\u4e14\u9700\u8981\u66f4\u591a\u7684\u8d44\u6e90\u3002\u4f60\u9700\u8981\u786e\u4fdd\u5e94\u7528\u5bb9\u5668\u548c sidecar \u5bb9\u5668\u662f\u4e00\u8d77\u8fdb\u884c\u5de5\u4f5c\u7684\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u9020\u6210\u6570\u636e\u4e22\u5931\u3002","title":"E Logging Using the Sidecar Approach(\u4f7f\u7528\u65e5\u5fd7 Sidecar)"},{"location":"chapter_10/6_production_kubernetes_best_practice/#2-serviceaccount-secret","text":"# kubectl get serviceaccount prometheus -o yaml -n monitoring apiVersion: v1 kind: ServiceAccount metadata: annotations: meta.helm.sh/release-name: edge-monitor meta.helm.sh/release-namespace: default creationTimestamp: \"2022-03-17T08:28:27Z\" labels: app.kubernetes.io/managed-by: Helm name: prometheus namespace: monitoring resourceVersion: \"1822\" selfLink: /api/v1/namespaces/monitoring/serviceaccounts/prometheus uid: 384e441e-a5cc-11ec-a7fb-fa163edec582 secrets: - name: prometheus-token-nk6ns #\u8be5ServiceAccount\u7ed1\u5b9a\u7684Secret # kubectl get secret prometheus-token-nk6ns -o yaml -n monitoring apiVersion: v1 kind: Secret metadata: annotations: kubernetes.io/service-account.name: prometheus kubernetes.io/service-account.uid: 384e441e-a5cc-11ec-a7fb-fa163edec582 creationTimestamp: \"2022-03-17T08:28:27Z\" name: prometheus-token-nk6ns namespace: monitoring resourceVersion: \"1818\" selfLink: /api/v1/namespaces/monitoring/secrets/prometheus-token-nk6ns uid: 384f2f5f-a5cc-11ec-a8a9-fa163eb4a930 type: kubernetes.io/service-account-token # Secret\u67093\u79cd\u7c7b\u578b, ServiceAccount\u3001Opaque \u3001Docker\u5de5\u5382\u8ba4\u8bc1\u4fe1\u606f data: #ServiceAccount\u7c7b\u578b\u7684Secret\u5c31\u6709\u8bc1\u4e66\u548ctoken ca.crt: XXXXXXXXXX namespace: bW9uaXRvcmluZw== token: XXXXXXX","title":"2 \u751f\u4ea7\u73af\u5883 ServiceAccount \u548c Secret \u5168\u6ce8\u91ca"},{"location":"chapter_10/6_production_kubernetes_best_practice/#3-daemonset","text":"# kubectl get daemonset edge-agent -n edge-agent -o yaml apiVersion: extensions/v1beta1 kind: DaemonSet metadata: annotations: meta.helm.sh/release-name: edge-agent meta.helm.sh/release-namespace: default creationTimestamp: \"2022-08-03T02:47:04Z\" generation: 2 labels: app.kubernetes.io/managed-by: Helm name: edge-agent namespace: edge-agent resourceVersion: \"112753741\" selfLink: /apis/extensions/v1beta1/namespaces/edge-agent/daemonsets/edge-agent uid: 8e75c2cf-12d6-11ed-ae3f-fa163e3fb8c4 spec: revisionHistoryLimit: 10 selector: matchLabels: app: agent template: metadata: creationTimestamp: null labels: app: agent spec: containers: - command: - /opt/www/your_agent/bin/yourdomain.agent image: hub.youdomain.org/your_agent/yourdomain_agent:v1.0.3 imagePullPolicy: IfNotPresent name: edge-agent resources: limits: cpu: 500m memory: 512Mi requests: cpu: 500m memory: 512Mi securityContext: #\u8868\u793a\u8fdb\u7a0b\u4ee5root\u6743\u9650\u8fd0\u884c privileged: true terminationMessagePath: /dev/termination-log terminationMessagePolicy: File volumeMounts: - mountPath: /opt/tmp name: metrics - mountPath: /appstore/app/kubernetes/log name: k8s-log - mountPath: /data00/www/gce/containers name: containers - mountPath: /var/log name: agent-log - mountPath: /opt/www/edge_agent/etc/conf.yaml name: config subPath: conf.yaml dnsPolicy: ClusterFirst restartPolicy: Always schedulerName: default-scheduler securityContext: {} terminationGracePeriodSeconds: 30 tolerations: #\u5bb9\u5fcd\u5ea6\u914d\u7f6e, \u8868\u793a\u5b83\u53ef\u4ee5\u8c03\u5ea6\u5230Master\u8282\u70b9\u4e0a. - effect: NoSchedule key: node-role.kubernetes.io/master operator: Exists volumes: - hostPath: path: /opt/tmp type: DirectoryOrCreate name: metrics - configMap: defaultMode: 420 name: clean-log-path name: config - hostPath: path: /appstore/app/kubernetes/log type: DirectoryOrCreate name: k8s-log - hostPath: path: /data00/www/gce/containers type: DirectoryOrCreate name: containers - hostPath: path: /var/log type: DirectoryOrCreate name: agent-log templateGeneration: 2 #\u65b0\u7248\u672c\u5df2\u7ecf\u4e0d\u63a8\u8350 updateStrategy: rollingUpdate: maxUnavailable: 100% type: RollingUpdate status: currentNumberScheduled: 24 desiredNumberScheduled: 24 numberAvailable: 24 numberMisscheduled: 0 numberReady: 24 observedGeneration: 2 updatedNumberScheduled: 24","title":"3 \u751f\u4ea7\u73af\u5883 DaemonSet \u5168\u6ce8\u91ca"},{"location":"chapter_10/6_production_kubernetes_best_practice/#service-mesh","text":"","title":"\u516d Service Mesh \u6700\u4f73\u5b9e\u8df5"},{"location":"chapter_10/7_production_kerbernetes_yaml/","text":"\u6982\u8ff0 \u751f\u4ea7\u73af\u5883 YAML \u6a21\u7248 1 Deployment \u6709\u5982\u4e0b 5 \u6bb5\u914d\u7f6e \u591a\u526f\u672c\u548c\u955c\u50cf\u7b56\u7565 \u3001 CPU \u548c MEM limit \u3001 \u5404\u7c7b\u5065\u5eb7\u63a2\u6d4b \u3001 \u6301\u4e45\u5b58\u50a8 \u3001 Node \u4eb2\u548c\u6027 \u53c2\u8003\u6587\u6863 k8s \u751f\u4ea7\u7ea7\u901a\u7528 yaml \u6a21\u7248 \u4e00\u4e9b yaml \u6a21\u7248 Kubernetes Deployment YAML: Learn by Example \u57fa\u4e8e docker \u548c vke \u4ece 0 \u5230 1 \u90e8\u7f72\u751f\u4ea7\u73af\u5883 APP","title":"\u7b2c\u4e03\u7bc7 \u751f\u4ea7\u73af\u5883Kubernetes YAML\u6a21\u7248"},{"location":"chapter_10/7_production_kerbernetes_yaml/#_1","text":"","title":"\u6982\u8ff0"},{"location":"chapter_10/7_production_kerbernetes_yaml/#yaml","text":"","title":"\u751f\u4ea7\u73af\u5883 YAML \u6a21\u7248"},{"location":"chapter_10/7_production_kerbernetes_yaml/#1-deployment","text":"\u6709\u5982\u4e0b 5 \u6bb5\u914d\u7f6e \u591a\u526f\u672c\u548c\u955c\u50cf\u7b56\u7565 \u3001 CPU \u548c MEM limit \u3001 \u5404\u7c7b\u5065\u5eb7\u63a2\u6d4b \u3001 \u6301\u4e45\u5b58\u50a8 \u3001 Node \u4eb2\u548c\u6027","title":"1 Deployment"},{"location":"chapter_10/7_production_kerbernetes_yaml/#_2","text":"k8s \u751f\u4ea7\u7ea7\u901a\u7528 yaml \u6a21\u7248 \u4e00\u4e9b yaml \u6a21\u7248 Kubernetes Deployment YAML: Learn by Example","title":"\u53c2\u8003\u6587\u6863"},{"location":"chapter_10/7_production_kerbernetes_yaml/#docker-vke-0-1-app","text":"","title":"\u57fa\u4e8e docker \u548c vke \u4ece 0 \u5230 1 \u90e8\u7f72\u751f\u4ea7\u73af\u5883 APP"},{"location":"chapter_10/8_caclio/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3 caclio \u7684\u539f\u7406\u5230\u5b9e\u8df5 caclio \u57fa\u672c\u539f\u7406 \u53c2\u8003\u6587\u6863 caclio 0/1 Running \u95ee\u9898\u4ece\u89e3\u51b3\u5230\u6839\u56e0\u5206\u6790 K8S\u642d\u5efa\u6700\u4f73\u5b9e\u8df5","title":"\u7b2c\u516b\u7bc7 Kubernetes\u7f51\u7edc\u63d2\u4ef6\u4e4bCaclio"},{"location":"chapter_10/8_caclio/#_1","text":"\u672c\u7bc7\u603b\u7ed3 caclio \u7684\u539f\u7406\u5230\u5b9e\u8df5","title":"\u6982\u8ff0"},{"location":"chapter_10/8_caclio/#caclio","text":"","title":"caclio \u57fa\u672c\u539f\u7406"},{"location":"chapter_10/8_caclio/#_2","text":"","title":"\u53c2\u8003\u6587\u6863"},{"location":"chapter_10/8_caclio/#caclio-01-running","text":"","title":"caclio 0/1 Running \u95ee\u9898\u4ece\u89e3\u51b3\u5230\u6839\u56e0\u5206\u6790"},{"location":"chapter_10/8_caclio/#k8s","text":"","title":"K8S\u642d\u5efa\u6700\u4f73\u5b9e\u8df5"},{"location":"chapter_11/10_high_avaliable/","text":"\u6982\u8ff0 \u672c\u7bc7\u6587\u6863\u603b\u7ed3\u548c\u68b3\u7406\u9ad8\u53ef\u7528\u76f8\u5173\u8bbe\u8ba1 1 \u9ad8\u5e76\u53d1\u6574\u4f53\u53ef\u7528\u6027(\u9650\u6d41\u3001\u964d\u7ea7\u548c\u7194\u65ad)\u6982\u8ff0 \u53c2\u8003 2 \u9ad8\u53ef\u7528\u8bbe\u8ba1\u539f\u5219 2.1 \u7cfb\u7edf\u67b6\u6784\u8bbe\u8ba1 2.1.1 \u65e0\u72b6\u6001\u8bbe\u8ba1\uff1a\u4fbf\u4e8e\u6c34\u5e73\u6269\u5c55 2.1.2 \u670d\u52a1\u62c6\u5206\uff1a 2.1.2.1 \u6309\u7167\u4e1a\u52a1\u529f\u80fd\u62c6\u5206 2.1.2.2 DB\u8bfb\u5199\u7279\u5f81\uff1a\u8bfb\u591a\uff0c\u8003\u8651\u589e\u52a0\u591a\u7ea7\u7f13\u5b58\uff1b\u5199\u591a\uff0c\u8003\u8651\u5206\u5e93\u5206\u8868 2.1.2.3 \u670d\u52a1\u9ad8\u5185\u805a\u3001\u4f4e\u8026\u5408 2.1.3 \u670d\u52a1\u5316\uff1a\u5229\u7528Nginx\u3001HaProxy\u3001LVS\u7b49\u5b9e\u73b0\u8d1f\u8f7d\u5747\u8861\uff0cZooKeeper\u3001Consul\u7b49\u5b9e\u73b0\u81ea\u52a8\u6ce8\u518c\u548c\u670d\u52a1\u53d1\u73b0 2.2 \u670d\u52a1\u90e8\u7f72 \u9ad8\u53ef\u7528\u96c6\u7fa4\uff1a\u53ef\u6c34\u5e73\u6269\u5c55\uff0c\u5355\u8282\u70b9\u6545\u969c\u65f6\u53ef\u4ee5\u88ab\u81ea\u52a8\u6458\u9664\uff1b \u70ed\u5907\uff1a\u6bd4\u5982\uff1aMySQL/Redis\u4e3b\u4ece\u7b49\uff0c\u6545\u969c\u65f6\u89e6\u53d1\u5207\u6362\uff1b \u51b7\u5907\uff1a\u5bf9\u4e8e\u65e0\u6cd5\u5b9e\u73b0\u9ad8\u53ef\u7528\u96c6\u7fa4\u548c\u70ed\u5907\u7684\u670d\u52a1\uff0c\u53ef\u4ee5\u901a\u8fc7\u51b7\u5907\u65b9\u6848\u5b9e\u73b0\u9ad8\u53ef\u7528\uff1b \u964d\u7ea7\uff1a\u96c6\u4e2d\u5316\u7ba1\u7406\u964d\u7ea7\u5f00\u5173\uff1b\u9ad8\u5e76\u53d1\u4e0b\uff0c\u4fdd\u8bc1\u6838\u5fc3\u4e1a\u52a1\uff0c\u5bf9\u6b21\u8981\u529f\u80fd\u8fdb\u884c\u964d\u7ea7\uff1b \u9650\u6d41\uff1a\u9632\u6b62\u8d85\u51fa\u7cfb\u7edf\u5cf0\u503c\u6216\u6076\u610f\u8bf7\u6c42\u653b\u51fb\u3002\u6bd4\u5982\uff1a\u767b\u5f55\u6392\u961f\u3001DDOS\u653b\u51fb\u6d41\u91cf\u6e05\u6d17\u7b49\uff1b \u8d44\u6e90\u9694\u79bb\uff1a\u5bb9\u5668\u3001\u8bfb\u5199\u9694\u79bb\u3001\u8fdb\u7a0b\u9694\u79bb\u3001\u673a\u623f\u9694\u79bb\u3001\u96c6\u7fa4\u9694\u79bb\u7b49\uff1b \u914d\u989d\u6280\u672f\uff1a\u8bbe\u7f6e\u8fdb\u7a0b\u4f7f\u7528\u7684\u5185\u5b58\u3001CPU\u3001IO\u7b49\u8d44\u6e90\u7684\u5408\u7406\u4e0a\u9650\uff1b","title":"\u7b2c\u4e8c\u7bc7 \u9ad8\u53ef\u7528\u539f\u5219\u603b\u7ed3"},{"location":"chapter_11/10_high_avaliable/#_1","text":"\u672c\u7bc7\u6587\u6863\u603b\u7ed3\u548c\u68b3\u7406\u9ad8\u53ef\u7528\u76f8\u5173\u8bbe\u8ba1","title":"\u6982\u8ff0"},{"location":"chapter_11/10_high_avaliable/#1","text":"\u53c2\u8003","title":"1 \u9ad8\u5e76\u53d1\u6574\u4f53\u53ef\u7528\u6027(\u9650\u6d41\u3001\u964d\u7ea7\u548c\u7194\u65ad)\u6982\u8ff0"},{"location":"chapter_11/10_high_avaliable/#2","text":"","title":"2 \u9ad8\u53ef\u7528\u8bbe\u8ba1\u539f\u5219"},{"location":"chapter_11/10_high_avaliable/#21","text":"2.1.1 \u65e0\u72b6\u6001\u8bbe\u8ba1\uff1a\u4fbf\u4e8e\u6c34\u5e73\u6269\u5c55 2.1.2 \u670d\u52a1\u62c6\u5206\uff1a 2.1.2.1 \u6309\u7167\u4e1a\u52a1\u529f\u80fd\u62c6\u5206 2.1.2.2 DB\u8bfb\u5199\u7279\u5f81\uff1a\u8bfb\u591a\uff0c\u8003\u8651\u589e\u52a0\u591a\u7ea7\u7f13\u5b58\uff1b\u5199\u591a\uff0c\u8003\u8651\u5206\u5e93\u5206\u8868 2.1.2.3 \u670d\u52a1\u9ad8\u5185\u805a\u3001\u4f4e\u8026\u5408 2.1.3 \u670d\u52a1\u5316\uff1a\u5229\u7528Nginx\u3001HaProxy\u3001LVS\u7b49\u5b9e\u73b0\u8d1f\u8f7d\u5747\u8861\uff0cZooKeeper\u3001Consul\u7b49\u5b9e\u73b0\u81ea\u52a8\u6ce8\u518c\u548c\u670d\u52a1\u53d1\u73b0","title":"2.1 \u7cfb\u7edf\u67b6\u6784\u8bbe\u8ba1"},{"location":"chapter_11/10_high_avaliable/#22","text":"\u9ad8\u53ef\u7528\u96c6\u7fa4\uff1a\u53ef\u6c34\u5e73\u6269\u5c55\uff0c\u5355\u8282\u70b9\u6545\u969c\u65f6\u53ef\u4ee5\u88ab\u81ea\u52a8\u6458\u9664\uff1b \u70ed\u5907\uff1a\u6bd4\u5982\uff1aMySQL/Redis\u4e3b\u4ece\u7b49\uff0c\u6545\u969c\u65f6\u89e6\u53d1\u5207\u6362\uff1b \u51b7\u5907\uff1a\u5bf9\u4e8e\u65e0\u6cd5\u5b9e\u73b0\u9ad8\u53ef\u7528\u96c6\u7fa4\u548c\u70ed\u5907\u7684\u670d\u52a1\uff0c\u53ef\u4ee5\u901a\u8fc7\u51b7\u5907\u65b9\u6848\u5b9e\u73b0\u9ad8\u53ef\u7528\uff1b \u964d\u7ea7\uff1a\u96c6\u4e2d\u5316\u7ba1\u7406\u964d\u7ea7\u5f00\u5173\uff1b\u9ad8\u5e76\u53d1\u4e0b\uff0c\u4fdd\u8bc1\u6838\u5fc3\u4e1a\u52a1\uff0c\u5bf9\u6b21\u8981\u529f\u80fd\u8fdb\u884c\u964d\u7ea7\uff1b \u9650\u6d41\uff1a\u9632\u6b62\u8d85\u51fa\u7cfb\u7edf\u5cf0\u503c\u6216\u6076\u610f\u8bf7\u6c42\u653b\u51fb\u3002\u6bd4\u5982\uff1a\u767b\u5f55\u6392\u961f\u3001DDOS\u653b\u51fb\u6d41\u91cf\u6e05\u6d17\u7b49\uff1b \u8d44\u6e90\u9694\u79bb\uff1a\u5bb9\u5668\u3001\u8bfb\u5199\u9694\u79bb\u3001\u8fdb\u7a0b\u9694\u79bb\u3001\u673a\u623f\u9694\u79bb\u3001\u96c6\u7fa4\u9694\u79bb\u7b49\uff1b \u914d\u989d\u6280\u672f\uff1a\u8bbe\u7f6e\u8fdb\u7a0b\u4f7f\u7528\u7684\u5185\u5b58\u3001CPU\u3001IO\u7b49\u8d44\u6e90\u7684\u5408\u7406\u4e0a\u9650\uff1b","title":"2.2 \u670d\u52a1\u90e8\u7f72"},{"location":"chapter_11/11_stability/","text":"\u6982\u8ff0 SRE \u7a33\u5b9a\u6027\u4e13\u9898\u76f8\u5173\u673a\u5236\u6982\u8ff0 \u4e00\u4e0d\u51fa\u95ee\u9898\u7684\u57fa\u7ebf \u4f5c\u4e3a\u4e00\u4e2a SRE\uff0c\u60f3\u505a\u5230\u201c\u4e0d\u51fa\u95ee\u9898\u201d\u8fd9\u4e2a\u57fa\u7ebf\uff0c\u5173\u952e\u8fd8\u662f\u8981\u9760\u5927\u5bb6\uff0c\u5982\u4f55\u9760\u5927\u5bb6\u5462\uff1f\u5c31\u662f\u8981\u843d\u5730\u4e00\u5957\u7a33\u5b9a\u6027\u7684\u673a\u5236\u4f53\u7cfb\uff0c\u7528\u673a\u5236\u7684\u4e25\u683c\u6267\u884c\u6765\u7ea6\u675f\u5927\u5bb6\uff0c\u8fd9\u5957\u673a\u5236\u4e5f\u5fc5\u987b\u5f97\u5230\u56e2\u961f leader \u7684\u5168\u529b\u652f\u6301\uff0c\u4e0d\u7136\u65e0\u6cd5\u5c55\u5f00\uff0c\u8fd9\u5957\u673a\u5236\u5305\u62ec\uff1a \u7a33\u5b9a\u6027\u610f\u8bc6 \u65e5\u5e38\u503c\u73ed\u673a\u5236 \u62a5\u8b66\u54cd\u5e94\u673a\u5236 \u590d\u76d8\u673a\u5236 \u6545\u969c\u6f14\u7ec3\u673a\u5236 \u6545\u969c\u5956\u60e9\u673a\u5236 \u5927\u4fc3\u4fdd\u969c\u673a\u5236 \u6bd4\u5982\uff0c\u5982\u679c\u603b\u662f SRE \u4eba\u5458\u53bb\u54cd\u5e94\u62a5\u8b66\u548c\u503c\u73ed\uff0c\u5c31\u4f1a\u975e\u5e38\u75b2\u60eb\u52b3\u7d2f\uff0c\u4eba\u4e0d\u53ef\u80fd\u6c38\u8fdc\u5173\u6ce8\u62a5\u8b66\uff0c\u90a3\u600e\u4e48\u529e\u5462\uff1f\u53ef\u4ee5\u4ece\u62a5\u8b66\u673a\u5236\u3001\u81ea\u52a8\u5316\u3001\u503c\u73ed\u673a\u5236 3 \u4e2a\u65b9\u9762\u5165\u624b\uff1a \u4e00\u65b9\u9762\uff0c\u8ba9\u62a5\u8b66\u66f4\u52a0\u51c6\u786e\u548c\u5b8c\u5584\uff0c\u51cf\u5c11\u8bef\u62a5\u548c\u6f0f\u62a5\uff0c\u9632\u6b62\u5927\u5bb6\u4e0d\u5fc5\u8981\u7684\u4ecb\u5165\uff0c\u53e6\u4e00\u65b9\u9762\u4ea7\u51fa\u81ea\u52a8\u5316\u673a\u5668\u4eba\uff0c\u81ea\u52a8\u8fdb\u884c\u4e00\u4e9b\u673a\u5668\u91cd\u542f\uff0c\u5de5\u5355\u67e5\u8be2\uff0c\u95ee\u9898\u7b80\u5355\u6392\u67e5\u4e4b\u7c7b\u7684\u5de5\u4f5c\uff0c\u8fd8\u6709\u5c31\u662f\u5efa\u7acb\u503c\u73ed\u8f6e\u73ed\uff0c\u8ba9\u6bcf\u4e2a\u4eba\u90fd\u53c2\u4e0e\u8fdb\u6765\uff0c\u65e2\u80fd\u8ba9\u5927\u5bb6\u719f\u6089\u4e1a\u52a1\uff0c\u53c8\u80fd\u63d0\u9ad8\u6bcf\u4e2a\u4eba\u7684\u7a33\u5b9a\u6027\u610f\u8bc6\u3002 \u5bf9\u4e8e SRE \u6765\u8bf4\uff0c\u6307\u5b9a\u673a\u5236\u5e76\u4e14\u4e25\u683c\u843d\u5730\uff0c\u6bd4\u4e8b\u5fc5\u8eac\u4eb2\u66f4\u52a0\u91cd\u8981\u3002\u4e0a\u9762\u8fd9\u4e9b\u673a\u5236\uff0c\u5c06\u5728\u540e\u9762\u7684\u7ae0\u8282\u4e2d\u8be6\u7ec6\u8bba\u8ff0\u3002 \u4e8c \u7a33\u5b9a\u6027\u56e2\u961f\u5de5\u4f5c\u5b50\u9879 1 \u5de5\u4f5c\u5b50\u9879 \u7740\u91cd\u4ecb\u7ecd\u7a33\u5b9a\u6027\u4fdd\u969c\u65b9\u6848\u5b50\u9879 \u76d1\u63a7\u62a5\u8b66 \u76d1\u63a7\u5927\u76d8(\u662f\u5426\u5177\u5907\u597d\u7528\u6613\u7528\u5927\u76d8) \u5404\u4e2a\u7ec4\u4ef6\u5bb9\u91cf\u6c34\u4f4d\u63d0\u524d\u9884\u8b66 \u5916\u90e8\u62e8\u6d4b(\u6a21\u62df\u7528\u6237\u884c\u4e3a) \u5bb9\u707e\u5efa\u8bbe\u548c\u6f14\u7ec3 \u53d8\u66f4\u7ba1\u63a7 \u5305\u62ec\u670d\u52a1\u7248\u672c\u8fed\u4ee3 \u914d\u7f6e\u53d8\u66f4 \u5404\u7c7b\u81ea\u5efa\u8fd0\u7ef4\u5e73\u53f0\u3001\u8fd0\u8425\u5e73\u53f0 \u5e94\u6025\u54cd\u5e94\u673a\u5236 \u503c\u73ed\u673a\u5236 \u5bb9\u91cf\u7ba1\u7406(\u6210\u672c\u4f18\u5316) \u5de1\u68c0(\u5bb9\u91cf\u6c34\u4f4d\u5de1\u68c0\u3001\u4f9d\u8d56\u9879\u9690\u60a3\u53d1\u73b0) 2 \u62e8\u6d4b\u548c\u5de1\u68c0\u7684\u533a\u522b \u62e8\u6d4b\u662f\u6307\u6a21\u62df\u7528\u6237\u884c\u4e3a\uff0c\u5b9a\u671f\u4ece\u4ea7\u54c1\u5916\u90e8\u53d1\u8d77 API \u8c03\u7528, \u770b\u662f\u5426\u6b63\u5e38 \u5de1\u68c0\u662f\u6307 SRE \u4e3b\u52a8\u5de1\u68c0\u5404\u4e2a\u7ec4\u4ef6\u7684\u5bb9\u91cf\u6c34\u4f4d, \u770b\u662f\u5426\u5904\u4e8e\u4e00\u4e2a\u6bd4\u8f83\u5065\u5eb7\u7684\u72b6\u6001 \u4e09 \u7a33\u5b9a\u6027\u73b0\u72b6\u600e\u4e48\u68b3\u7406\uff1f \u4e3b\u8981\u5206\u5982\u4e0b\u6a21\u5757 \u4e3b\u8981\u8003\u6838 MTTR \u8fbe\u6807\u7387\u548c\u4e8b\u6545\u4e3b\u52a8\u53d1\u73b0\u7387. \u6bd4\u5982\u89c4\u5b9a MTTR \u4e3a 1-5-10 , \u90a3\u4e48\u6709\u591a\u5c11\u4e8b\u6545\u5904\u7406\u8fc7\u7a0b\u662f\u7b26\u5408\u8be5\u89c4\u5b9a\u7684, \u5360\u603b\u4f53\u4e8b\u6545\u6570\u6bd4\u4f8b\u4e3a\u591a\u5c11. \u4e8b\u6545\u4e3b\u52a8\u53d1\u73b0\u7387\u5f88\u597d\u7406\u89e3, \u5c31\u662f\u6709\u591a\u5c11\u4e8b\u6545\u662f\u6280\u672f\u56e2\u961f\u4e3b\u52a8\u53d1\u73b0\u7684, \u5360\u603b\u4f53\u4e8b\u6545\u6570\u6bd4\u4f8b\u4e3a\u591a\u5c11. \u56db \u7a33\u5b9a\u6027\u76ee\u6807\u600e\u4e48\u5236\u5b9a\uff1f 1 \u5173\u952e\u76ee\u6807 1 \u4e8b\u6545\u6570\u76ee\u6807 1 XX \u5168\u5e74\u4e8b\u6545\u6570\u76ee\u6807\u540c\u6bd4\u4e0b\u964d 20% \u5de6\u53f3 2 XX \u5168\u5e74\u67d0\u4e2a\u7b49\u7ea7\u4ee5\u4e0a\u4e8b\u6545\u6570\u4e0d\u8d85\u8fc7 1 2 \u4e8b\u6545 MTTR \u76ee\u6807 1 \u5168\u5e74\u6240\u6709\u670d\u52a1\u7aef\u4e8b\u6545 30min \u6062\u590d\u7387 \u2265 40%\uff0c\u5176\u4e2d\u4e0b\u534a\u5e74 \u2265 50% // MTTR 3-15-30 2 \u5168\u5e74\u6240\u6709\u5ba2\u6237\u7aef\u4e8b\u6545 2d \u6062\u590d\u7387 \u2265 60%\uff0c\u5176\u4e2d\u4e0b\u534a\u5e74 \u2265 80% // MTTR 1-x-2 3 \u4e0a\u8ff0\u6240\u6709\u4e8b\u6545\u4e2d\u6d89\u53ca\u5916\u90e8\u5ba2\u6237\u6709\u611f\u7684\u4e8b\u6545 30min \u6062\u590d\u7387 \u2265 50% // MTTR 3-15-30 3 \u5176\u4ed6\u5173\u952e\u76ee\u6807 1 \u5168\u5e74\u4e8b\u6545\u4e3b\u52a8\u53d1\u73b0\u7387 \u2265 60% 2 \u5404\u7c7b\u53d8\u66f4\u7cfb\u7edf\u6216\u6d41\u7a0b\u5728 Q4 \u7ed3\u675f\u524d\u53d8\u66f4\u6210\u719f\u5ea6\u8bc4\u7ea7 L3 \u8fbe\u6807\u7387 \u2265 90%\uff0cL3+ \u8fbe\u6807\u7387 \u2265 40% 3 \u5404\u4e1a\u52a1\u5355\u5143\u7684 SLI \u6307\u6570\u53ef\u8861\u91cf\u4e14 \u2265 99% \u4e94 \u7a33\u5b9a\u6027\u4ece 1 \u5230 N \u63d0\u5347 \u5206\u4e3a 5 \u4e2a\u7ef4\u5ea6\u53bb\u6cbb\u7406,\u5206\u522b\u662f\u53d8\u66f4\u7ba1\u63a7\u3001\u76d1\u63a7\u3001\u5bb9\u9519\u3001\u5bb9\u707e\u3001\u7a33\u5b9a\u6027\u6587\u5316\u5efa\u8bbe 1 \u53d8\u66f4\u7ba1\u63a7 1.1 \u53d8\u66f4\u4e0d\u5408\u89c4\u6cbb\u7406 1.2 \u7070\u5ea6\u5efa\u8bbe 1.3 \u53d8\u66f4\u8d28\u68c0 2 \u76d1\u63a7\u4e13\u9879 3 \u5bb9\u9519\u4e13\u9879 3.1 \u5f3a\u5f31\u4f9d\u8d56\u68b3\u7406 3.2 \u5f3a\u5f31\u4f9d\u8d56\u9879\u9884\u6848\u5efa\u8bbe 3.3 \u5f3a\u5f31\u4f9d\u8d56\u9879\u9884\u6848\u6f14\u7ec3 4 \u5bb9\u707e\u4e13\u9879 5 \u7a33\u5b9a\u6027\u6587\u5316 5.1 \u7ea2\u9ed1\u699c\u3001\u5e74\u5ea6\u5956\u9879\u3001\u4e2a\u4eba\u5956\u9879 5.2 \u56e2\u961f\u5206\u4eab \u516d \u7a33\u5b9a\u6027\u8fd0\u8425\u600e\u4e48\u8fd0\u8425? \u7a33\u5b9a\u6027\u7ea2\u9ed1\u699c \u89c2\u6d4b\u4e2d\u5fc3\uff08SLI \u6307\u6807\u6536\u655b\u7edf\u4e00\u89c2\u6d4b\uff09 \u5e94\u6025\u54cd\u5e94\u6536\u655b \u4e03 \u6d3b\u52a8\u91cd\u4fdd\u7a33\u5b9a\u6027\u600e\u4e48\u505a \u4e3b\u8981\u5206\u4e3a \u5bb9\u91cf \u548c \u9884\u6848 \u4e24\u6761\u7ebf \u516b \u7a33\u5b9a\u6027\u4ece 0 \u5230 1 \u5efa\u8bbe \u4e8b\u6545\u524d\u9884\u9632 \u53d8\u66f4\u7ba1\u63a7 \u53d8\u66f4\u8d28\u68c0 \u964d\u7ea7\u9884\u6848 \u5bb9\u91cf\u7ba1\u7406 \u670d\u52a1\u6cbb\u7406 \u4e8b\u6545\u611f\u77e5 \u76d1\u63a7\u4e13\u9879 SLI \u544a\u8b66\u8986\u76d6 \u5ba2\u8bc9\u611f\u77e5 OnCall \u673a\u5236 \u4e8b\u6545\u4e2d\u5b9a\u4f4d\u548c\u6b62\u635f \u5b9a\u4f4d\u5927\u76d8 \u53d8\u66f4\u67e5\u8be2\u548c\u770b\u677f \u53d8\u66f4\u56de\u6eda \u9884\u6848\u6267\u884c","title":"\u7b2c\u4e94\u7bc7 \u7a33\u5b9a\u6027\u7406\u8bba\u603b\u7ed3"},{"location":"chapter_11/11_stability/#_1","text":"SRE \u7a33\u5b9a\u6027\u4e13\u9898\u76f8\u5173\u673a\u5236\u6982\u8ff0","title":"\u6982\u8ff0"},{"location":"chapter_11/11_stability/#_2","text":"\u4f5c\u4e3a\u4e00\u4e2a SRE\uff0c\u60f3\u505a\u5230\u201c\u4e0d\u51fa\u95ee\u9898\u201d\u8fd9\u4e2a\u57fa\u7ebf\uff0c\u5173\u952e\u8fd8\u662f\u8981\u9760\u5927\u5bb6\uff0c\u5982\u4f55\u9760\u5927\u5bb6\u5462\uff1f\u5c31\u662f\u8981\u843d\u5730\u4e00\u5957\u7a33\u5b9a\u6027\u7684\u673a\u5236\u4f53\u7cfb\uff0c\u7528\u673a\u5236\u7684\u4e25\u683c\u6267\u884c\u6765\u7ea6\u675f\u5927\u5bb6\uff0c\u8fd9\u5957\u673a\u5236\u4e5f\u5fc5\u987b\u5f97\u5230\u56e2\u961f leader \u7684\u5168\u529b\u652f\u6301\uff0c\u4e0d\u7136\u65e0\u6cd5\u5c55\u5f00\uff0c\u8fd9\u5957\u673a\u5236\u5305\u62ec\uff1a \u7a33\u5b9a\u6027\u610f\u8bc6 \u65e5\u5e38\u503c\u73ed\u673a\u5236 \u62a5\u8b66\u54cd\u5e94\u673a\u5236 \u590d\u76d8\u673a\u5236 \u6545\u969c\u6f14\u7ec3\u673a\u5236 \u6545\u969c\u5956\u60e9\u673a\u5236 \u5927\u4fc3\u4fdd\u969c\u673a\u5236 \u6bd4\u5982\uff0c\u5982\u679c\u603b\u662f SRE \u4eba\u5458\u53bb\u54cd\u5e94\u62a5\u8b66\u548c\u503c\u73ed\uff0c\u5c31\u4f1a\u975e\u5e38\u75b2\u60eb\u52b3\u7d2f\uff0c\u4eba\u4e0d\u53ef\u80fd\u6c38\u8fdc\u5173\u6ce8\u62a5\u8b66\uff0c\u90a3\u600e\u4e48\u529e\u5462\uff1f\u53ef\u4ee5\u4ece\u62a5\u8b66\u673a\u5236\u3001\u81ea\u52a8\u5316\u3001\u503c\u73ed\u673a\u5236 3 \u4e2a\u65b9\u9762\u5165\u624b\uff1a \u4e00\u65b9\u9762\uff0c\u8ba9\u62a5\u8b66\u66f4\u52a0\u51c6\u786e\u548c\u5b8c\u5584\uff0c\u51cf\u5c11\u8bef\u62a5\u548c\u6f0f\u62a5\uff0c\u9632\u6b62\u5927\u5bb6\u4e0d\u5fc5\u8981\u7684\u4ecb\u5165\uff0c\u53e6\u4e00\u65b9\u9762\u4ea7\u51fa\u81ea\u52a8\u5316\u673a\u5668\u4eba\uff0c\u81ea\u52a8\u8fdb\u884c\u4e00\u4e9b\u673a\u5668\u91cd\u542f\uff0c\u5de5\u5355\u67e5\u8be2\uff0c\u95ee\u9898\u7b80\u5355\u6392\u67e5\u4e4b\u7c7b\u7684\u5de5\u4f5c\uff0c\u8fd8\u6709\u5c31\u662f\u5efa\u7acb\u503c\u73ed\u8f6e\u73ed\uff0c\u8ba9\u6bcf\u4e2a\u4eba\u90fd\u53c2\u4e0e\u8fdb\u6765\uff0c\u65e2\u80fd\u8ba9\u5927\u5bb6\u719f\u6089\u4e1a\u52a1\uff0c\u53c8\u80fd\u63d0\u9ad8\u6bcf\u4e2a\u4eba\u7684\u7a33\u5b9a\u6027\u610f\u8bc6\u3002 \u5bf9\u4e8e SRE \u6765\u8bf4\uff0c\u6307\u5b9a\u673a\u5236\u5e76\u4e14\u4e25\u683c\u843d\u5730\uff0c\u6bd4\u4e8b\u5fc5\u8eac\u4eb2\u66f4\u52a0\u91cd\u8981\u3002\u4e0a\u9762\u8fd9\u4e9b\u673a\u5236\uff0c\u5c06\u5728\u540e\u9762\u7684\u7ae0\u8282\u4e2d\u8be6\u7ec6\u8bba\u8ff0\u3002","title":"\u4e00\u4e0d\u51fa\u95ee\u9898\u7684\u57fa\u7ebf"},{"location":"chapter_11/11_stability/#_3","text":"","title":"\u4e8c \u7a33\u5b9a\u6027\u56e2\u961f\u5de5\u4f5c\u5b50\u9879"},{"location":"chapter_11/11_stability/#1","text":"\u7740\u91cd\u4ecb\u7ecd\u7a33\u5b9a\u6027\u4fdd\u969c\u65b9\u6848\u5b50\u9879 \u76d1\u63a7\u62a5\u8b66 \u76d1\u63a7\u5927\u76d8(\u662f\u5426\u5177\u5907\u597d\u7528\u6613\u7528\u5927\u76d8) \u5404\u4e2a\u7ec4\u4ef6\u5bb9\u91cf\u6c34\u4f4d\u63d0\u524d\u9884\u8b66 \u5916\u90e8\u62e8\u6d4b(\u6a21\u62df\u7528\u6237\u884c\u4e3a) \u5bb9\u707e\u5efa\u8bbe\u548c\u6f14\u7ec3 \u53d8\u66f4\u7ba1\u63a7 \u5305\u62ec\u670d\u52a1\u7248\u672c\u8fed\u4ee3 \u914d\u7f6e\u53d8\u66f4 \u5404\u7c7b\u81ea\u5efa\u8fd0\u7ef4\u5e73\u53f0\u3001\u8fd0\u8425\u5e73\u53f0 \u5e94\u6025\u54cd\u5e94\u673a\u5236 \u503c\u73ed\u673a\u5236 \u5bb9\u91cf\u7ba1\u7406(\u6210\u672c\u4f18\u5316) \u5de1\u68c0(\u5bb9\u91cf\u6c34\u4f4d\u5de1\u68c0\u3001\u4f9d\u8d56\u9879\u9690\u60a3\u53d1\u73b0)","title":"1 \u5de5\u4f5c\u5b50\u9879"},{"location":"chapter_11/11_stability/#2","text":"\u62e8\u6d4b\u662f\u6307\u6a21\u62df\u7528\u6237\u884c\u4e3a\uff0c\u5b9a\u671f\u4ece\u4ea7\u54c1\u5916\u90e8\u53d1\u8d77 API \u8c03\u7528, \u770b\u662f\u5426\u6b63\u5e38 \u5de1\u68c0\u662f\u6307 SRE \u4e3b\u52a8\u5de1\u68c0\u5404\u4e2a\u7ec4\u4ef6\u7684\u5bb9\u91cf\u6c34\u4f4d, \u770b\u662f\u5426\u5904\u4e8e\u4e00\u4e2a\u6bd4\u8f83\u5065\u5eb7\u7684\u72b6\u6001","title":"2 \u62e8\u6d4b\u548c\u5de1\u68c0\u7684\u533a\u522b"},{"location":"chapter_11/11_stability/#_4","text":"\u4e3b\u8981\u5206\u5982\u4e0b\u6a21\u5757 \u4e3b\u8981\u8003\u6838 MTTR \u8fbe\u6807\u7387\u548c\u4e8b\u6545\u4e3b\u52a8\u53d1\u73b0\u7387. \u6bd4\u5982\u89c4\u5b9a MTTR \u4e3a 1-5-10 , \u90a3\u4e48\u6709\u591a\u5c11\u4e8b\u6545\u5904\u7406\u8fc7\u7a0b\u662f\u7b26\u5408\u8be5\u89c4\u5b9a\u7684, \u5360\u603b\u4f53\u4e8b\u6545\u6570\u6bd4\u4f8b\u4e3a\u591a\u5c11. \u4e8b\u6545\u4e3b\u52a8\u53d1\u73b0\u7387\u5f88\u597d\u7406\u89e3, \u5c31\u662f\u6709\u591a\u5c11\u4e8b\u6545\u662f\u6280\u672f\u56e2\u961f\u4e3b\u52a8\u53d1\u73b0\u7684, \u5360\u603b\u4f53\u4e8b\u6545\u6570\u6bd4\u4f8b\u4e3a\u591a\u5c11.","title":"\u4e09 \u7a33\u5b9a\u6027\u73b0\u72b6\u600e\u4e48\u68b3\u7406\uff1f"},{"location":"chapter_11/11_stability/#_5","text":"","title":"\u56db \u7a33\u5b9a\u6027\u76ee\u6807\u600e\u4e48\u5236\u5b9a\uff1f"},{"location":"chapter_11/11_stability/#1_1","text":"1 \u4e8b\u6545\u6570\u76ee\u6807 1 XX \u5168\u5e74\u4e8b\u6545\u6570\u76ee\u6807\u540c\u6bd4\u4e0b\u964d 20% \u5de6\u53f3 2 XX \u5168\u5e74\u67d0\u4e2a\u7b49\u7ea7\u4ee5\u4e0a\u4e8b\u6545\u6570\u4e0d\u8d85\u8fc7 1 2 \u4e8b\u6545 MTTR \u76ee\u6807 1 \u5168\u5e74\u6240\u6709\u670d\u52a1\u7aef\u4e8b\u6545 30min \u6062\u590d\u7387 \u2265 40%\uff0c\u5176\u4e2d\u4e0b\u534a\u5e74 \u2265 50% // MTTR 3-15-30 2 \u5168\u5e74\u6240\u6709\u5ba2\u6237\u7aef\u4e8b\u6545 2d \u6062\u590d\u7387 \u2265 60%\uff0c\u5176\u4e2d\u4e0b\u534a\u5e74 \u2265 80% // MTTR 1-x-2 3 \u4e0a\u8ff0\u6240\u6709\u4e8b\u6545\u4e2d\u6d89\u53ca\u5916\u90e8\u5ba2\u6237\u6709\u611f\u7684\u4e8b\u6545 30min \u6062\u590d\u7387 \u2265 50% // MTTR 3-15-30 3 \u5176\u4ed6\u5173\u952e\u76ee\u6807 1 \u5168\u5e74\u4e8b\u6545\u4e3b\u52a8\u53d1\u73b0\u7387 \u2265 60% 2 \u5404\u7c7b\u53d8\u66f4\u7cfb\u7edf\u6216\u6d41\u7a0b\u5728 Q4 \u7ed3\u675f\u524d\u53d8\u66f4\u6210\u719f\u5ea6\u8bc4\u7ea7 L3 \u8fbe\u6807\u7387 \u2265 90%\uff0cL3+ \u8fbe\u6807\u7387 \u2265 40% 3 \u5404\u4e1a\u52a1\u5355\u5143\u7684 SLI \u6307\u6570\u53ef\u8861\u91cf\u4e14 \u2265 99%","title":"1 \u5173\u952e\u76ee\u6807"},{"location":"chapter_11/11_stability/#1-n","text":"\u5206\u4e3a 5 \u4e2a\u7ef4\u5ea6\u53bb\u6cbb\u7406,\u5206\u522b\u662f\u53d8\u66f4\u7ba1\u63a7\u3001\u76d1\u63a7\u3001\u5bb9\u9519\u3001\u5bb9\u707e\u3001\u7a33\u5b9a\u6027\u6587\u5316\u5efa\u8bbe","title":"\u4e94 \u7a33\u5b9a\u6027\u4ece 1 \u5230 N \u63d0\u5347"},{"location":"chapter_11/11_stability/#1_2","text":"","title":"1 \u53d8\u66f4\u7ba1\u63a7"},{"location":"chapter_11/11_stability/#11","text":"","title":"1.1 \u53d8\u66f4\u4e0d\u5408\u89c4\u6cbb\u7406"},{"location":"chapter_11/11_stability/#12","text":"","title":"1.2 \u7070\u5ea6\u5efa\u8bbe"},{"location":"chapter_11/11_stability/#13","text":"","title":"1.3 \u53d8\u66f4\u8d28\u68c0"},{"location":"chapter_11/11_stability/#2_1","text":"","title":"2 \u76d1\u63a7\u4e13\u9879"},{"location":"chapter_11/11_stability/#3","text":"","title":"3 \u5bb9\u9519\u4e13\u9879"},{"location":"chapter_11/11_stability/#31","text":"","title":"3.1 \u5f3a\u5f31\u4f9d\u8d56\u68b3\u7406"},{"location":"chapter_11/11_stability/#32","text":"","title":"3.2 \u5f3a\u5f31\u4f9d\u8d56\u9879\u9884\u6848\u5efa\u8bbe"},{"location":"chapter_11/11_stability/#33","text":"","title":"3.3 \u5f3a\u5f31\u4f9d\u8d56\u9879\u9884\u6848\u6f14\u7ec3"},{"location":"chapter_11/11_stability/#4","text":"","title":"4 \u5bb9\u707e\u4e13\u9879"},{"location":"chapter_11/11_stability/#5","text":"","title":"5 \u7a33\u5b9a\u6027\u6587\u5316"},{"location":"chapter_11/11_stability/#51","text":"","title":"5.1 \u7ea2\u9ed1\u699c\u3001\u5e74\u5ea6\u5956\u9879\u3001\u4e2a\u4eba\u5956\u9879"},{"location":"chapter_11/11_stability/#52","text":"","title":"5.2 \u56e2\u961f\u5206\u4eab"},{"location":"chapter_11/11_stability/#_6","text":"\u7a33\u5b9a\u6027\u7ea2\u9ed1\u699c \u89c2\u6d4b\u4e2d\u5fc3\uff08SLI \u6307\u6807\u6536\u655b\u7edf\u4e00\u89c2\u6d4b\uff09 \u5e94\u6025\u54cd\u5e94\u6536\u655b","title":"\u516d \u7a33\u5b9a\u6027\u8fd0\u8425\u600e\u4e48\u8fd0\u8425?"},{"location":"chapter_11/11_stability/#_7","text":"\u4e3b\u8981\u5206\u4e3a \u5bb9\u91cf \u548c \u9884\u6848 \u4e24\u6761\u7ebf","title":"\u4e03 \u6d3b\u52a8\u91cd\u4fdd\u7a33\u5b9a\u6027\u600e\u4e48\u505a"},{"location":"chapter_11/11_stability/#0-1","text":"","title":"\u516b \u7a33\u5b9a\u6027\u4ece 0 \u5230 1 \u5efa\u8bbe"},{"location":"chapter_11/11_stability/#_8","text":"\u53d8\u66f4\u7ba1\u63a7 \u53d8\u66f4\u8d28\u68c0 \u964d\u7ea7\u9884\u6848 \u5bb9\u91cf\u7ba1\u7406 \u670d\u52a1\u6cbb\u7406","title":"\u4e8b\u6545\u524d\u9884\u9632"},{"location":"chapter_11/11_stability/#_9","text":"\u76d1\u63a7\u4e13\u9879 SLI \u544a\u8b66\u8986\u76d6 \u5ba2\u8bc9\u611f\u77e5 OnCall \u673a\u5236","title":"\u4e8b\u6545\u611f\u77e5"},{"location":"chapter_11/11_stability/#_10","text":"\u5b9a\u4f4d\u5927\u76d8 \u53d8\u66f4\u67e5\u8be2\u548c\u770b\u677f \u53d8\u66f4\u56de\u6eda \u9884\u6848\u6267\u884c","title":"\u4e8b\u6545\u4e2d\u5b9a\u4f4d\u548c\u6b62\u635f"},{"location":"chapter_11/1_theory/","text":"\u6982\u8ff0 1 \u7f51\u7ad9\u53ef\u7528\u6027\u6307\u6807 \u8fd9\u91cc\u7684\u7f51\u7ad9\u4e5f\u53ef\u4ee5\u6cdb\u6307\u5404\u7c7b\u4e1a\u52a1 \u7f51\u7ad9\u53ef\u7528\u6027\u5373\u6307\u7f51\u7ad9\u6b63\u5e38\u8fd0\u884c\u65f6\u95f4\u7684\u767e\u5206\u6bd4, \u4e1a\u754c\u4f7f\u7528N\u4e2a9\u6765\u91cf\u5316\u53ef\u7528\u6027, \u6700\u5e38\u8bf4\u7684\u662f 4\u4e2a9(99.99%) \u7684\u53ef\u7528\u6027. \u6545\u969c\u65f6\u95f4\u6709\u4e24\u9879\u8bc4\u4f30\u6307\u6807, \u4e00\u662f\u5e73\u5747\u65e0\u6545\u969c\u5de5\u4f5c\u65f6\u95f4(MTBF Mean Time Between Failure); \u53e6\u4e00\u4e2a\u662f\u6545\u969c\u6062\u590d\u65f6\u95f4(MTTR Mean Time To Repair), \u6240\u4ee5\u7f51\u7ad9\u7684\u53ef\u7528\u6027\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u516c\u5f0f\u8868\u793a: Availability = MTBF / (MTBF + MTTR) MTBF\u8d8a\u957f\u8868\u793a\u53ef\u9760\u6027\u8d8a\u9ad8\u3001\u6b63\u786e\u5de5\u4f5c\u7684\u80fd\u529b\u8d8a\u5f3a; MTTR\u8d8a\u5c0f\u8868\u793a\u6062\u590d\u6027\u8d8a\u597d\u3002\u8981\u63d0\u5347\u7f51\u7ad9\u7684\u53ef\u7528\u6027,\u5c31\u8981\u5ef6\u957fMTBF\u3001\u7f29\u77edMTTR. 2 \u7a33\u5b9a\u6027\u5efa\u8bbe\u601d\u8def \u7f51\u7ad9\u7a33\u5b9a\u6027\u7684\u5efa\u8bbe\u662f\u4e00\u9879\u7efc\u5408\u7684\u7cfb\u7edf\u5de5\u7a0b, \u5c31\u50cf\u4eba\u7684\u5065\u5eb7\u4e00\u6837, \u5982\u679c\u5e73\u65f6\u4e0d\u6ce8\u610f\u5065\u5eb7\u996e\u98df\u3001\u4e0d\u6ce8\u610f\u953b\u70bc\uff0c\u65f6\u95f4\u4e00\u957f\u8eab\u4f53\u80af\u5b9a\u4f1a\u51fa\u95ee\u9898\uff0c\u5bf9\u7a33\u5b9a\u6027\u7684\u8003\u91cf\u4e5f\u662f\u8d2f\u7a7f\u6574\u4e2a\u7814\u53d1\u751f\u547d\u5468\u671f\u7684. \u5982\u4e0b\u56fe\u6240\u793a: \u7a33\u5b9a\u6027\u7684\u5efa\u8bbe\u4e2d\u67092\u4e2a\u91cd\u8981\u56e0\u7d20: \u4e00\u662f\u601d\u60f3\u4e0a\u7684\u91cd\u89c6, \u5f00\u53d1\u4eba\u5458\u5bf9\u7a33\u5b9a\u6027\u7684\u91cd\u89c6(\u4e5f\u5c31\u662f\u656c\u754f\u4e4b\u5fc3)\u53ef\u4ee5\u907f\u514d70% ~ 80%\u7684\u6545\u969c\uff1b\u4e8c\u662f\u89c4\u8303\u548c\u5de5\u5177\u7684\u5efa\u8bbe, \u7528\u4ee5\u4fdd\u969c\u7a33\u5b9a\u6027. 2.1 \u9ad8\u53ef\u7528\u5de5\u5177\u4f53\u7cfb\u4ecb\u7ecd \u5206\u522b\u4e3a\u538b\u6d4b\u4f53\u7cfb\u3001\u7ba1\u63a7\u4f53\u7cfb\u3001\u76d1\u63a7\u4f53\u7cfb\u3001\u6062\u590d\u4f53\u7cfb\u548c\u5ea6\u91cf\u4f53\u7cfb 2.1.1 \u538b\u6d4b\u4f53\u7cfb a \u5355\u7cfb\u7edf\u538b\u6d4b b \u5168\u94fe\u8def\u538b\u6d4b \u6d41\u91cf\u7684\u5236\u9020 \u6d41\u91cf\u7684\u6807\u8bb0 \u6d4b\u8bd5\u6570\u636e\u7684\u5904\u7406 \u5f85\u8865\u5145\u5b8c\u6574\u7684\u538b\u6d4b\u6d41\u7a0b\u56fe 2.1.2 \u7ba1\u63a7\u4f53\u7cfb a \u5f00\u5173\u7cfb\u7edf b \u9884\u6848\u7cfb\u7edf c \u9650\u6d41\u964d\u7ea7\u7cfb\u7edf 2.1.3 \u76d1\u63a7\u4f53\u7cfb a \u7aef\u5230\u7aef\u76d1\u63a7 b \u8c03\u7528\u94fe\u8def\u8ddf\u8e2a\u7cfb\u7edf c \u4e1a\u52a1\u6570\u636e\u8f68\u8ff9\u91cd\u73b0\u7cfb\u7edf d \u5bf9\u8d26\u7cfb\u7edf 2.1.4 \u6062\u590d\u4f53\u7cfb 2.1.5 \u5ea6\u91cf\u4f53\u7cfb","title":"\u7b2c\u4e00\u7bc7 \u7a33\u5b9a\u6027\u6982\u8bba"},{"location":"chapter_11/1_theory/#_1","text":"","title":"\u6982\u8ff0"},{"location":"chapter_11/1_theory/#1","text":"\u8fd9\u91cc\u7684\u7f51\u7ad9\u4e5f\u53ef\u4ee5\u6cdb\u6307\u5404\u7c7b\u4e1a\u52a1 \u7f51\u7ad9\u53ef\u7528\u6027\u5373\u6307\u7f51\u7ad9\u6b63\u5e38\u8fd0\u884c\u65f6\u95f4\u7684\u767e\u5206\u6bd4, \u4e1a\u754c\u4f7f\u7528N\u4e2a9\u6765\u91cf\u5316\u53ef\u7528\u6027, \u6700\u5e38\u8bf4\u7684\u662f 4\u4e2a9(99.99%) \u7684\u53ef\u7528\u6027. \u6545\u969c\u65f6\u95f4\u6709\u4e24\u9879\u8bc4\u4f30\u6307\u6807, \u4e00\u662f\u5e73\u5747\u65e0\u6545\u969c\u5de5\u4f5c\u65f6\u95f4(MTBF Mean Time Between Failure); \u53e6\u4e00\u4e2a\u662f\u6545\u969c\u6062\u590d\u65f6\u95f4(MTTR Mean Time To Repair), \u6240\u4ee5\u7f51\u7ad9\u7684\u53ef\u7528\u6027\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u516c\u5f0f\u8868\u793a: Availability = MTBF / (MTBF + MTTR) MTBF\u8d8a\u957f\u8868\u793a\u53ef\u9760\u6027\u8d8a\u9ad8\u3001\u6b63\u786e\u5de5\u4f5c\u7684\u80fd\u529b\u8d8a\u5f3a; MTTR\u8d8a\u5c0f\u8868\u793a\u6062\u590d\u6027\u8d8a\u597d\u3002\u8981\u63d0\u5347\u7f51\u7ad9\u7684\u53ef\u7528\u6027,\u5c31\u8981\u5ef6\u957fMTBF\u3001\u7f29\u77edMTTR.","title":"1 \u7f51\u7ad9\u53ef\u7528\u6027\u6307\u6807"},{"location":"chapter_11/1_theory/#2","text":"\u7f51\u7ad9\u7a33\u5b9a\u6027\u7684\u5efa\u8bbe\u662f\u4e00\u9879\u7efc\u5408\u7684\u7cfb\u7edf\u5de5\u7a0b, \u5c31\u50cf\u4eba\u7684\u5065\u5eb7\u4e00\u6837, \u5982\u679c\u5e73\u65f6\u4e0d\u6ce8\u610f\u5065\u5eb7\u996e\u98df\u3001\u4e0d\u6ce8\u610f\u953b\u70bc\uff0c\u65f6\u95f4\u4e00\u957f\u8eab\u4f53\u80af\u5b9a\u4f1a\u51fa\u95ee\u9898\uff0c\u5bf9\u7a33\u5b9a\u6027\u7684\u8003\u91cf\u4e5f\u662f\u8d2f\u7a7f\u6574\u4e2a\u7814\u53d1\u751f\u547d\u5468\u671f\u7684. \u5982\u4e0b\u56fe\u6240\u793a: \u7a33\u5b9a\u6027\u7684\u5efa\u8bbe\u4e2d\u67092\u4e2a\u91cd\u8981\u56e0\u7d20: \u4e00\u662f\u601d\u60f3\u4e0a\u7684\u91cd\u89c6, \u5f00\u53d1\u4eba\u5458\u5bf9\u7a33\u5b9a\u6027\u7684\u91cd\u89c6(\u4e5f\u5c31\u662f\u656c\u754f\u4e4b\u5fc3)\u53ef\u4ee5\u907f\u514d70% ~ 80%\u7684\u6545\u969c\uff1b\u4e8c\u662f\u89c4\u8303\u548c\u5de5\u5177\u7684\u5efa\u8bbe, \u7528\u4ee5\u4fdd\u969c\u7a33\u5b9a\u6027.","title":"2 \u7a33\u5b9a\u6027\u5efa\u8bbe\u601d\u8def"},{"location":"chapter_11/1_theory/#21","text":"\u5206\u522b\u4e3a\u538b\u6d4b\u4f53\u7cfb\u3001\u7ba1\u63a7\u4f53\u7cfb\u3001\u76d1\u63a7\u4f53\u7cfb\u3001\u6062\u590d\u4f53\u7cfb\u548c\u5ea6\u91cf\u4f53\u7cfb","title":"2.1 \u9ad8\u53ef\u7528\u5de5\u5177\u4f53\u7cfb\u4ecb\u7ecd"},{"location":"chapter_11/1_theory/#211","text":"","title":"2.1.1 \u538b\u6d4b\u4f53\u7cfb"},{"location":"chapter_11/1_theory/#a","text":"","title":"a \u5355\u7cfb\u7edf\u538b\u6d4b"},{"location":"chapter_11/1_theory/#b","text":"\u6d41\u91cf\u7684\u5236\u9020 \u6d41\u91cf\u7684\u6807\u8bb0 \u6d4b\u8bd5\u6570\u636e\u7684\u5904\u7406 \u5f85\u8865\u5145\u5b8c\u6574\u7684\u538b\u6d4b\u6d41\u7a0b\u56fe","title":"b \u5168\u94fe\u8def\u538b\u6d4b"},{"location":"chapter_11/1_theory/#212","text":"","title":"2.1.2 \u7ba1\u63a7\u4f53\u7cfb"},{"location":"chapter_11/1_theory/#a_1","text":"","title":"a \u5f00\u5173\u7cfb\u7edf"},{"location":"chapter_11/1_theory/#b_1","text":"","title":"b \u9884\u6848\u7cfb\u7edf"},{"location":"chapter_11/1_theory/#c","text":"","title":"c \u9650\u6d41\u964d\u7ea7\u7cfb\u7edf"},{"location":"chapter_11/1_theory/#213","text":"","title":"2.1.3 \u76d1\u63a7\u4f53\u7cfb"},{"location":"chapter_11/1_theory/#a_2","text":"","title":"a \u7aef\u5230\u7aef\u76d1\u63a7"},{"location":"chapter_11/1_theory/#b_2","text":"","title":"b \u8c03\u7528\u94fe\u8def\u8ddf\u8e2a\u7cfb\u7edf"},{"location":"chapter_11/1_theory/#c_1","text":"","title":"c \u4e1a\u52a1\u6570\u636e\u8f68\u8ff9\u91cd\u73b0\u7cfb\u7edf"},{"location":"chapter_11/1_theory/#d","text":"","title":"d \u5bf9\u8d26\u7cfb\u7edf"},{"location":"chapter_11/1_theory/#214","text":"","title":"2.1.4 \u6062\u590d\u4f53\u7cfb"},{"location":"chapter_11/1_theory/#215","text":"","title":"2.1.5 \u5ea6\u91cf\u4f53\u7cfb"},{"location":"chapter_11/2_slo_process/","text":"\u6982\u8ff0 \u672c\u7bc7\u8bb2\u8ff0SLO\u5b9e\u65bd\u6d41\u7a0b 1 SLO \u80cc\u666f\u4ecb\u7ecd \u670d\u52a1\u6c34\u5e73\u76ee\u6807\uff08SLO\uff09\u6307\u5b9a\u4e86\u670d\u52a1\u53ef\u9760\u6027\u7684\u76ee\u6807\u6c34\u5e73\u3002\u7531\u4e8eSLO\u662f\u505a\u51fa\u4ee5\u6570\u636e\u4e3a\u4f9d\u636e\u7684\u53ef\u9760\u6027\u51b3\u7b56\u7684\u5173\u952e\uff0c\u56e0\u6b64\u5b83\u4eec\u662fSRE\u5b9e\u8df5\u7684\u6838\u5fc3\u3002 \u4e0a\u6587\u662fGoogle SRE\u300a\u7ad9\u70b9\u53ef\u9760\u6027\u624b\u518c\u300b\u4e2d\u7684\u539f\u6587\u3002\u90a3\u4e3a\u4ec0\u4e48\u9700\u8981SLO\u5462\uff0c\u6211\u4eec\u6458\u53d6\u539f\u6587\u4e2d\u7684\u6838\u5fc3\u89c2\u70b9\uff1a 1 \u5de5\u7a0b\u5e08\u7a00\u7f3a\uff0c\u9700\u8981\u628a\u65f6\u95f4\u6295\u5165\u5230\u91cd\u8981\u670d\u52a1\u7684\u6838\u5fc3\u95ee\u9898\u4e0a 2 SLO\u662f\u505a\u51fa\u5de5\u4f5c\u4f18\u5148\u7ea7\u6392\u5e8f\u548c\u53ef\u9760\u6027\u76f8\u5173\u5de5\u4f5c\u7684\u5173\u952e 3 SRE\u7684\u6838\u5fc3\u804c\u8d23\u4e0d\u4ec5\u662f\u81ea\u52a8\u5316\u548c\u5904\u7406\u6545\u969c\uff0c\u65e5\u5e38\u5de5\u4f5c\u90fd\u8981\u6309\u7167SLO\u6765\u5f00\u5c55 4 \u6ca1\u6709SLO\uff0c\u5c31\u6ca1\u6709SRE \u4e3a\u4e86\u91c7\u7528\u57fa\u4e8e\u9519\u8bef\u9884\u7b97\u7684\u53ef\u9760\u6027\u5de5\u7a0b\u65b9\u6cd5\uff0c\u540c\u6837\u6458\u53d6\u539f\u6587\u4e2d\u7684\u6838\u5fc3\u89c2\u70b9\uff1a 1 \u670d\u52a1\u7684\u5229\u76ca\u76f8\u5173\u65b9\u8ba4\u53ef\u6b64SLO 2 \u670d\u52a1\u6b63\u5e38\u72b6\u6001\u4e0b\u53ef\u4ee5\u8fbe\u5230SLO\u7684\u8981\u6c42 3 \u7ec4\u7ec7\u8ba4\u53ef\u9519\u8bef\u9884\u7b97\u5e76\u5728\u51b3\u7b56\u4e2d\u53d1\u6325\u4f5c\u7528 4 \u6709\u5b8c\u5584\u7684SLO\u6d41\u7a0b \u5426\u5219\uff0cSLO\u5408\u89c4\u6027\u6210\u4e3a\u4e00\u4e2aKPI\u6216\u62a5\u544a\u6307\u6807\uff0c\u800c\u4e0d\u662f\u51b3\u7b56\u5236\u5b9a\u5de5\u5177\u3002 2 SLO \u5b9e\u65bd\u6d41\u7a0b \u5728\u300a\u7ad9\u70b9\u53ef\u9760\u6027\u624b\u518c\u300b\u7b2c\u4e8c\u7ae0\u201c\u5b9e\u65bdSLO\u201d\u4e2d\uff0cGoogle\u8be6\u7ec6\u8bb2\u8ff0\u4e86\u5982\u4f55\u5b9e\u65bdSLO\uff0c\u5927\u81f4\u6d41\u7a0b\u5982\u4e0b\uff1a 1. SLI\u9009\u62e9 \u5bf9\u4e8e\u8bf7\u6c42\u9a71\u52a8\u578b\u670d\u52a1\uff0cSLI\u4e00\u822c\u9009\u62e9\u53ef\u7528\u6027\uff08\u6210\u529f\u54cd\u5e94\u7684\u8bf7\u6c42\u6bd4\u4f8b\uff09\u3001\u5ef6\u8fdf\u3001\u8d28\u91cf 2. SLI\u8ba1\u7b97 SLI\u7684\u8ba1\u7b97\u53ef\u4ee5\u4f7f\u7528\u5e94\u7528\u670d\u52a1\u5668\u65e5\u5fd7\u3001\u8d1f\u8f7d\u5747\u8861\u76d1\u63a7\u3001\u9ed1\u76d2\u76d1\u63a7\u3001\u5ba2\u6237\u7aef\u63d2\u4ef6\u7b49\u6570\u636e\u6e90 \u4e00\u822c\u9009\u62e9\u8d1f\u8f7d\u5747\u8861\u76d1\u63a7\uff0c\u56e0\u4e3a\u5176\u4ee3\u8868\u4e00\u4e2a\u7528\u6237\u8bf7\u6c42\u5728\u6574\u5957\u7cfb\u7edf\u6240\u6709\u6a21\u5757\u5904\u7406\u8017\u65f6\u548c\u6240\u6709\u7f51\u7edc\u4f20\u8f93\u8017\u65f6\u7684\u603b\u548c\uff0c\u4e14\u548c\u5ba2\u6237\u7aef\u63d2\u4ef6\u76f8\u6bd4\uff0c\u5b9e\u65bd\u6210\u672c\u8f83\u4f4e 3. SLO\u5b9a\u4e49 \u57fa\u4e8e\u8ba1\u7b97\u51fa\u6765\u7684\u53ef\u7528\u6027\u3001\u5ef6\u8fdf\u6570\u636e\uff0c\u6765\u5b9a\u4e49\u5408\u9002\u7684\u670d\u52a1SLO \u670d\u52a1\u53ef\u7528\u6027\uff1a\u4f8b\u5982\uff0c\u5168\u5e74\u53ef\u7528\u6027 > = 99.99% \u670d\u52a1\u5ef6\u8fdf\uff1a\u4f8b\u5982\uff0c99%\u7684\u8bf7\u6c42<= 200ms\uff0c90\u7684\u8bf7\u6c42< 100ms \u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u65f6\u95f4\u7a97\u53e3\u4e0a\u5b9a\u4e49SLO\uff0c\u6bd4\u5982\u4e00\u4e2a\u6708\u6216\u4e00\u4e2a\u5b63\u5ea6 \u83b7\u5f97\u5173\u952e\u7684\u5229\u76ca\u76f8\u5173\u8005\u8ba4\u53ef\u548c\u6279\u51c6 4. \u9519\u8bef\u9884\u7b97 \u6709\u4e86SLI\u548cSLO\uff0c\u65f6\u95f4\u7a97\u53e3\u5185\u7684\u5141\u8bb8\u5931\u8d25\u6570\u5c31\u77e5\u9053\u4e86 \u5982\u679c\u7ed9\u5b9a\u65f6\u95f4\u5185\u9519\u8bef\u9884\u7b97\u6d88\u8017\u6b86\u5c3d\uff0c\u8981\u5236\u5b9a\u9519\u8bef\u9884\u7b97\u6267\u884c\u7b56\u7565\uff0c\u5982\uff1a \u5f00\u53d1\u56e2\u961f\u4e13\u6ce8\u4e8e\u53ef\u9760\u6027\u95ee\u9898\uff0c\u76f4\u5230\u7cfb\u7edf\u5904\u4e8eSLO\u8303\u56f4\u5185\uff0c\u529f\u80fd\u8fed\u4ee3\u63a8\u8fdf \u4e3a\u4e86\u964d\u4f4e\u98ce\u9669\uff0c\u51bb\u7ed3\u751f\u4ea7\u7cfb\u7edf\u7684\u53d8\u66f4\uff0c\u76f4\u5230\u6709\u4e86\u9519\u8bef\u9884\u7b97\u6765\u652f\u6301\u53d8\u66f4 5. \u8bb0\u5f55SLO\u548c\u9519\u8bef\u9884\u7b97 SLO\u7684\u4f5c\u8005\uff0c\u5ba1\u6838\u4eba\uff0c\u6279\u51c6\u65e5\u671f\uff0c\u4e0b\u6b21\u5ba1\u6838\u65e5\u671f\uff0c\u76f8\u5173\u80cc\u666f \u5b9a\u4e49\u548c\u53d8\u66f4\u6709\u5e73\u53f0\u3001\u6d41\u7a0b\u3001\u5236\u5ea6\u3001\u53d8\u66f4\u4e8b\u4ef6\u53ef\u56de\u6eaf SLO\u7684\u7ec6\u8282\uff1aSLI\u5b9e\u73b0\u3001\u5982\u4f55\u8ba1\u7b97\u3001\u5982\u4f55\u4f7f\u7528\u9519\u8bef\u9884\u7b97 \u9519\u8bef\u9884\u7b97\u7684\u8bb0\u5f55\u8ddf\u4e0a\u9762\u4fe1\u606f\u7c7b\u4f3c 6. \u4eea\u8868\u76d8\u548c\u62a5\u8868 \u9664\u4e86\u5df2\u53d1\u5e03\u7684SLO\u548c\u9519\u8bef\u9884\u7b97\uff0c\u8fd8\u9700\u8981\u4e00\u4e2a\u62a5\u8868\u548c\u4eea\u8868\u76d8\u6765\u505a\u5c55\u793a 7. \u6301\u7eed\u6539\u8fdbSLO\uff0c\u63d0\u9ad8SLO\u8d28\u91cf SLO\u53ea\u662f\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u5408\u7406, \u987b\u8981\u6301\u7eed\u6539\u8fdb.","title":"\u7b2c\u4e09\u7bc7 SLO\u5b9e\u65bd\u6d41\u7a0b"},{"location":"chapter_11/2_slo_process/#_1","text":"\u672c\u7bc7\u8bb2\u8ff0SLO\u5b9e\u65bd\u6d41\u7a0b","title":"\u6982\u8ff0"},{"location":"chapter_11/2_slo_process/#1-slo","text":"\u670d\u52a1\u6c34\u5e73\u76ee\u6807\uff08SLO\uff09\u6307\u5b9a\u4e86\u670d\u52a1\u53ef\u9760\u6027\u7684\u76ee\u6807\u6c34\u5e73\u3002\u7531\u4e8eSLO\u662f\u505a\u51fa\u4ee5\u6570\u636e\u4e3a\u4f9d\u636e\u7684\u53ef\u9760\u6027\u51b3\u7b56\u7684\u5173\u952e\uff0c\u56e0\u6b64\u5b83\u4eec\u662fSRE\u5b9e\u8df5\u7684\u6838\u5fc3\u3002 \u4e0a\u6587\u662fGoogle SRE\u300a\u7ad9\u70b9\u53ef\u9760\u6027\u624b\u518c\u300b\u4e2d\u7684\u539f\u6587\u3002\u90a3\u4e3a\u4ec0\u4e48\u9700\u8981SLO\u5462\uff0c\u6211\u4eec\u6458\u53d6\u539f\u6587\u4e2d\u7684\u6838\u5fc3\u89c2\u70b9\uff1a 1 \u5de5\u7a0b\u5e08\u7a00\u7f3a\uff0c\u9700\u8981\u628a\u65f6\u95f4\u6295\u5165\u5230\u91cd\u8981\u670d\u52a1\u7684\u6838\u5fc3\u95ee\u9898\u4e0a 2 SLO\u662f\u505a\u51fa\u5de5\u4f5c\u4f18\u5148\u7ea7\u6392\u5e8f\u548c\u53ef\u9760\u6027\u76f8\u5173\u5de5\u4f5c\u7684\u5173\u952e 3 SRE\u7684\u6838\u5fc3\u804c\u8d23\u4e0d\u4ec5\u662f\u81ea\u52a8\u5316\u548c\u5904\u7406\u6545\u969c\uff0c\u65e5\u5e38\u5de5\u4f5c\u90fd\u8981\u6309\u7167SLO\u6765\u5f00\u5c55 4 \u6ca1\u6709SLO\uff0c\u5c31\u6ca1\u6709SRE \u4e3a\u4e86\u91c7\u7528\u57fa\u4e8e\u9519\u8bef\u9884\u7b97\u7684\u53ef\u9760\u6027\u5de5\u7a0b\u65b9\u6cd5\uff0c\u540c\u6837\u6458\u53d6\u539f\u6587\u4e2d\u7684\u6838\u5fc3\u89c2\u70b9\uff1a 1 \u670d\u52a1\u7684\u5229\u76ca\u76f8\u5173\u65b9\u8ba4\u53ef\u6b64SLO 2 \u670d\u52a1\u6b63\u5e38\u72b6\u6001\u4e0b\u53ef\u4ee5\u8fbe\u5230SLO\u7684\u8981\u6c42 3 \u7ec4\u7ec7\u8ba4\u53ef\u9519\u8bef\u9884\u7b97\u5e76\u5728\u51b3\u7b56\u4e2d\u53d1\u6325\u4f5c\u7528 4 \u6709\u5b8c\u5584\u7684SLO\u6d41\u7a0b \u5426\u5219\uff0cSLO\u5408\u89c4\u6027\u6210\u4e3a\u4e00\u4e2aKPI\u6216\u62a5\u544a\u6307\u6807\uff0c\u800c\u4e0d\u662f\u51b3\u7b56\u5236\u5b9a\u5de5\u5177\u3002","title":"1 SLO \u80cc\u666f\u4ecb\u7ecd"},{"location":"chapter_11/2_slo_process/#2-slo","text":"\u5728\u300a\u7ad9\u70b9\u53ef\u9760\u6027\u624b\u518c\u300b\u7b2c\u4e8c\u7ae0\u201c\u5b9e\u65bdSLO\u201d\u4e2d\uff0cGoogle\u8be6\u7ec6\u8bb2\u8ff0\u4e86\u5982\u4f55\u5b9e\u65bdSLO\uff0c\u5927\u81f4\u6d41\u7a0b\u5982\u4e0b\uff1a","title":"2 SLO \u5b9e\u65bd\u6d41\u7a0b"},{"location":"chapter_11/2_slo_process/#1-sli","text":"\u5bf9\u4e8e\u8bf7\u6c42\u9a71\u52a8\u578b\u670d\u52a1\uff0cSLI\u4e00\u822c\u9009\u62e9\u53ef\u7528\u6027\uff08\u6210\u529f\u54cd\u5e94\u7684\u8bf7\u6c42\u6bd4\u4f8b\uff09\u3001\u5ef6\u8fdf\u3001\u8d28\u91cf","title":"1. SLI\u9009\u62e9"},{"location":"chapter_11/2_slo_process/#2-sli","text":"SLI\u7684\u8ba1\u7b97\u53ef\u4ee5\u4f7f\u7528\u5e94\u7528\u670d\u52a1\u5668\u65e5\u5fd7\u3001\u8d1f\u8f7d\u5747\u8861\u76d1\u63a7\u3001\u9ed1\u76d2\u76d1\u63a7\u3001\u5ba2\u6237\u7aef\u63d2\u4ef6\u7b49\u6570\u636e\u6e90 \u4e00\u822c\u9009\u62e9\u8d1f\u8f7d\u5747\u8861\u76d1\u63a7\uff0c\u56e0\u4e3a\u5176\u4ee3\u8868\u4e00\u4e2a\u7528\u6237\u8bf7\u6c42\u5728\u6574\u5957\u7cfb\u7edf\u6240\u6709\u6a21\u5757\u5904\u7406\u8017\u65f6\u548c\u6240\u6709\u7f51\u7edc\u4f20\u8f93\u8017\u65f6\u7684\u603b\u548c\uff0c\u4e14\u548c\u5ba2\u6237\u7aef\u63d2\u4ef6\u76f8\u6bd4\uff0c\u5b9e\u65bd\u6210\u672c\u8f83\u4f4e","title":"2. SLI\u8ba1\u7b97"},{"location":"chapter_11/2_slo_process/#3-slo","text":"\u57fa\u4e8e\u8ba1\u7b97\u51fa\u6765\u7684\u53ef\u7528\u6027\u3001\u5ef6\u8fdf\u6570\u636e\uff0c\u6765\u5b9a\u4e49\u5408\u9002\u7684\u670d\u52a1SLO \u670d\u52a1\u53ef\u7528\u6027\uff1a\u4f8b\u5982\uff0c\u5168\u5e74\u53ef\u7528\u6027 > = 99.99% \u670d\u52a1\u5ef6\u8fdf\uff1a\u4f8b\u5982\uff0c99%\u7684\u8bf7\u6c42<= 200ms\uff0c90\u7684\u8bf7\u6c42< 100ms \u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u65f6\u95f4\u7a97\u53e3\u4e0a\u5b9a\u4e49SLO\uff0c\u6bd4\u5982\u4e00\u4e2a\u6708\u6216\u4e00\u4e2a\u5b63\u5ea6 \u83b7\u5f97\u5173\u952e\u7684\u5229\u76ca\u76f8\u5173\u8005\u8ba4\u53ef\u548c\u6279\u51c6","title":"3. SLO\u5b9a\u4e49"},{"location":"chapter_11/2_slo_process/#4","text":"\u6709\u4e86SLI\u548cSLO\uff0c\u65f6\u95f4\u7a97\u53e3\u5185\u7684\u5141\u8bb8\u5931\u8d25\u6570\u5c31\u77e5\u9053\u4e86 \u5982\u679c\u7ed9\u5b9a\u65f6\u95f4\u5185\u9519\u8bef\u9884\u7b97\u6d88\u8017\u6b86\u5c3d\uff0c\u8981\u5236\u5b9a\u9519\u8bef\u9884\u7b97\u6267\u884c\u7b56\u7565\uff0c\u5982\uff1a \u5f00\u53d1\u56e2\u961f\u4e13\u6ce8\u4e8e\u53ef\u9760\u6027\u95ee\u9898\uff0c\u76f4\u5230\u7cfb\u7edf\u5904\u4e8eSLO\u8303\u56f4\u5185\uff0c\u529f\u80fd\u8fed\u4ee3\u63a8\u8fdf \u4e3a\u4e86\u964d\u4f4e\u98ce\u9669\uff0c\u51bb\u7ed3\u751f\u4ea7\u7cfb\u7edf\u7684\u53d8\u66f4\uff0c\u76f4\u5230\u6709\u4e86\u9519\u8bef\u9884\u7b97\u6765\u652f\u6301\u53d8\u66f4","title":"4. \u9519\u8bef\u9884\u7b97"},{"location":"chapter_11/2_slo_process/#5-slo","text":"SLO\u7684\u4f5c\u8005\uff0c\u5ba1\u6838\u4eba\uff0c\u6279\u51c6\u65e5\u671f\uff0c\u4e0b\u6b21\u5ba1\u6838\u65e5\u671f\uff0c\u76f8\u5173\u80cc\u666f \u5b9a\u4e49\u548c\u53d8\u66f4\u6709\u5e73\u53f0\u3001\u6d41\u7a0b\u3001\u5236\u5ea6\u3001\u53d8\u66f4\u4e8b\u4ef6\u53ef\u56de\u6eaf SLO\u7684\u7ec6\u8282\uff1aSLI\u5b9e\u73b0\u3001\u5982\u4f55\u8ba1\u7b97\u3001\u5982\u4f55\u4f7f\u7528\u9519\u8bef\u9884\u7b97 \u9519\u8bef\u9884\u7b97\u7684\u8bb0\u5f55\u8ddf\u4e0a\u9762\u4fe1\u606f\u7c7b\u4f3c","title":"5. \u8bb0\u5f55SLO\u548c\u9519\u8bef\u9884\u7b97"},{"location":"chapter_11/2_slo_process/#6","text":"\u9664\u4e86\u5df2\u53d1\u5e03\u7684SLO\u548c\u9519\u8bef\u9884\u7b97\uff0c\u8fd8\u9700\u8981\u4e00\u4e2a\u62a5\u8868\u548c\u4eea\u8868\u76d8\u6765\u505a\u5c55\u793a","title":"6. \u4eea\u8868\u76d8\u548c\u62a5\u8868"},{"location":"chapter_11/2_slo_process/#7-sloslo","text":"SLO\u53ea\u662f\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u5408\u7406, \u987b\u8981\u6301\u7eed\u6539\u8fdb.","title":"7. \u6301\u7eed\u6539\u8fdbSLO\uff0c\u63d0\u9ad8SLO\u8d28\u91cf"},{"location":"chapter_11/3_stress/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3\u538b\u6d4b\u7ecf\u9a8c \u538b\u6d4b\u6700\u7ec8\u5e94\u8be5\u8f93\u51fa\u4e00\u4efd\u62a5\u544a\u603b\u7ed3\uff0c\u5176\u5b9e\u4e5f\u5c31\u662f\u628a\u6574\u4e2a\u538b\u6d4b\u65b9\u6848\u3001\u8fc7\u7a0b\u3001\u7ed3\u8bba\u8bb0\u5f55\u4e0b\u6765\uff0c\u5199\u660e\u538b\u6d4b\u76ee\u6807\u3001\u538b\u6d4b\u63a5\u53e3\u3001\u538b\u6d4b\u6570\u636e\u3001\u538b\u6d4b\u7ed3\u8bba\uff0c\u7ed9\u51fa\u53d1\u73b0\u7684\u95ee\u9898\u5e76\u63d0\u4f9b\u4f18\u5316\u65b9\u6848\u3002\u62a5\u544a\u7684\u610f\u4e49\u5728\u4e8e\u68b3\u7406\u524d\u9762\u7684\u6574\u4e2a\u6d41\u7a0b\uff0c\u7ed9\u540e\u7eed\u7684\u538b\u6d4b\u63d0\u4f9b\u7ecf\u9a8c\u6307\u5bfc\u3002 \u4e00 \u5b8c\u6574\u7684\u538b\u6d4b\u6d41\u7a0b Step1\uff1a\u538b\u6d4b\u76ee\u6807\u5236\u5b9a \u76ee\u6807qps\uff08\u7edd\u5927\u90e8\u5206\u7684\u6027\u80fd\u95ee\u9898\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7qps\u6765\u4f53\u73b0\uff09 qps\u4e0d\u4ec5\u662f\u5165\u53e3\u7684\u6570\u503c\uff0c\u540c\u65f6\u9700\u8981\u5173\u6ce8\u7cfb\u7edf\u53ca\u5b50\u7cfb\u7edf\u7684\u6027\u80fd\u8868\u73b0\uff08\u4e1a\u52a1\u6307\u6807+\u7cfb\u7edf\u6307\u6807\uff09\uff1b \u538b\u6d4b\u7684\u76ee\u6807\u7cfb\u7edf\u53ca\u91cd\u8981\u5b50\u7cfb\u7edf\u9700\u8981\u6709\u660e\u786e\u7684\u538b\u6d4b\u7194\u65ad\u6307\u6807\uff08\u4e1a\u52a1\u6307\u6807+\u7cfb\u7edf\u6307\u6807\uff09\uff1b \u4e1a\u52a1\u9700\u6c42\u7684\u9a8c\u8bc1 \u670d\u52a1\u7aef\u538b\u529b\u72b6\u51b5\u4e0b\u7684\u5404\u9879\u4ea7\u54c1\u529f\u80fd\u662f\u5426\u7b26\u5408\u9884\u671f, \u6bd4\u5982\u9a8c\u8bc1 \u7cfb\u7edf\u79df\u6237\u9694\u79bb\u7684\u60c5\u51b5 , \u6bd4\u5982\u9a8c\u8bc1 \u9ad8\u4f18\u4efb\u52a1\u4e0d\u6392\u961f \u7b49. Step2: \u538b\u6d4b\u94fe\u8def\u7684\u68b3\u7406 1) \u4e0a\u4e0b\u6e38\u5b9e\u4f8b\u6570\u91cf\u914d\u6bd4\u68c0\u67e5 2) \u4e0a\u4e0b\u6e38\u8fde\u63a5\u5173\u7cfb\u68c0\u67e5 Step3\uff1a\u538b\u6d4b\u51c6\u5907 \u670d\u52a1\u7aef 1) \u6d4b\u8bd5\u73af\u5883\u4e0e\u7ebf\u4e0a\u73af\u5883\u670d\u52a1\u9694\u79bb\uff0c\u82e5\u65e0\u6cd5\u9694\u79bb\u5219\u5fc5\u987b\u8981\u6709\u660e\u786e\u7684\u6b62\u635f\u9884\u6848 2) \u5982\u679c\u662f\u7ebf\u4e0a\u73af\u5883\u76f4\u63a5\u538b\u6d4b\u7684\u8bdd\uff0c\u9700\u8981\u6709\u538b\u6d4b\u6d41\u91cf\u7684\u6807\u8bb0\u3002\u6bd4\u5982\u7533\u8bf7\u4e00\u4e2a\u4e13\u95e8\u7684\u538b\u6d4b\u8d26\u53f7\u3002 3\uff09\u89c2\u5bdf\uff08\u76d1\u63a7\uff09\u6307\u6807\u68b3\u7406 \u5ba2\u6237\u7aef 1) \u53d1\u538b\u811a\u672c/\u6d4b\u8bd5\u5de5\u5177\u51c6\u5907\uff1a \u4f18\u5148\u4e1a\u754c\u901a\u7528\uff0c\u907f\u514d\u81ea\u9020\u8f6e\u5b50 2) \u964d\u7ea7/\u6b62\u635f\u9884\u6848\u51c6\u5907 Step4\uff1a\u9884\u538b\u6d4b \u53d1\u538b\u5de5\u5177\u4ee5\u8f83\u4f4eqps\u8bf7\u6c42\u670d\u52a1\u96c6\u7fa4\uff0c\u76ee\u7684\uff1a 1\uff09\u9884\u6f14\u6574\u4e2a\u538b\u6d4b\u6d41\u7a0b\uff1b 2\uff09\u5206\u6790\u6d41\u91cf\u5206\u53d1\u5230\u5404\u670d\u52a1\u7684\u6bd4\u4f8b\uff1b Step5\uff1a\u538b\u6d4b \u538b\u529b\u5e94\u9636\u6bb5\u6027\u589e\u957f\uff0c\u6bcf\u4e2a\u9636\u6bb5\u5fc5\u987b\u8981\u6709\u4e00\u5b9a\u7684\u505c\u7559\u89c2\u5bdf\u65f6\u95f4\uff1b Step6\uff1a\u626b\u5c3e\u5de5\u4f5c \u538b\u6d4b\u65e5\u5fd7\u4fdd\u5b58\uff1b \u538b\u6d4b\u6307\u6807\u66f2\u7ebf\u56fe\u4fdd\u5b58\uff1b \u5982\u82e5\u6709\uff0c\u56de\u6536\u538b\u6d4b\u8d44\u6e90(\u670d\u52a1\u5668\u3001Bot\u673a\u5668)\uff1b \u5982\u82e5\u6709\uff0c\u5173\u95ed\u5b9e\u9a8c\u5f00\u5173\uff1b \u5982\u82e5\u6709\uff0c\u6e05\u7406\u538b\u6d4b\u6d41\u91cf\u8bb0\u5f55\uff1b","title":"\u7b2c\u56db\u7bc7 \u538b\u6d4b\u7ecf\u9a8c\u603b\u7ed3"},{"location":"chapter_11/3_stress/#_1","text":"\u672c\u7bc7\u603b\u7ed3\u538b\u6d4b\u7ecf\u9a8c \u538b\u6d4b\u6700\u7ec8\u5e94\u8be5\u8f93\u51fa\u4e00\u4efd\u62a5\u544a\u603b\u7ed3\uff0c\u5176\u5b9e\u4e5f\u5c31\u662f\u628a\u6574\u4e2a\u538b\u6d4b\u65b9\u6848\u3001\u8fc7\u7a0b\u3001\u7ed3\u8bba\u8bb0\u5f55\u4e0b\u6765\uff0c\u5199\u660e\u538b\u6d4b\u76ee\u6807\u3001\u538b\u6d4b\u63a5\u53e3\u3001\u538b\u6d4b\u6570\u636e\u3001\u538b\u6d4b\u7ed3\u8bba\uff0c\u7ed9\u51fa\u53d1\u73b0\u7684\u95ee\u9898\u5e76\u63d0\u4f9b\u4f18\u5316\u65b9\u6848\u3002\u62a5\u544a\u7684\u610f\u4e49\u5728\u4e8e\u68b3\u7406\u524d\u9762\u7684\u6574\u4e2a\u6d41\u7a0b\uff0c\u7ed9\u540e\u7eed\u7684\u538b\u6d4b\u63d0\u4f9b\u7ecf\u9a8c\u6307\u5bfc\u3002","title":"\u6982\u8ff0"},{"location":"chapter_11/3_stress/#_2","text":"","title":"\u4e00 \u5b8c\u6574\u7684\u538b\u6d4b\u6d41\u7a0b"},{"location":"chapter_11/3_stress/#step1","text":"\u76ee\u6807qps\uff08\u7edd\u5927\u90e8\u5206\u7684\u6027\u80fd\u95ee\u9898\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7qps\u6765\u4f53\u73b0\uff09 qps\u4e0d\u4ec5\u662f\u5165\u53e3\u7684\u6570\u503c\uff0c\u540c\u65f6\u9700\u8981\u5173\u6ce8\u7cfb\u7edf\u53ca\u5b50\u7cfb\u7edf\u7684\u6027\u80fd\u8868\u73b0\uff08\u4e1a\u52a1\u6307\u6807+\u7cfb\u7edf\u6307\u6807\uff09\uff1b \u538b\u6d4b\u7684\u76ee\u6807\u7cfb\u7edf\u53ca\u91cd\u8981\u5b50\u7cfb\u7edf\u9700\u8981\u6709\u660e\u786e\u7684\u538b\u6d4b\u7194\u65ad\u6307\u6807\uff08\u4e1a\u52a1\u6307\u6807+\u7cfb\u7edf\u6307\u6807\uff09\uff1b \u4e1a\u52a1\u9700\u6c42\u7684\u9a8c\u8bc1 \u670d\u52a1\u7aef\u538b\u529b\u72b6\u51b5\u4e0b\u7684\u5404\u9879\u4ea7\u54c1\u529f\u80fd\u662f\u5426\u7b26\u5408\u9884\u671f, \u6bd4\u5982\u9a8c\u8bc1 \u7cfb\u7edf\u79df\u6237\u9694\u79bb\u7684\u60c5\u51b5 , \u6bd4\u5982\u9a8c\u8bc1 \u9ad8\u4f18\u4efb\u52a1\u4e0d\u6392\u961f \u7b49.","title":"Step1\uff1a\u538b\u6d4b\u76ee\u6807\u5236\u5b9a"},{"location":"chapter_11/3_stress/#step2","text":"1) \u4e0a\u4e0b\u6e38\u5b9e\u4f8b\u6570\u91cf\u914d\u6bd4\u68c0\u67e5 2) \u4e0a\u4e0b\u6e38\u8fde\u63a5\u5173\u7cfb\u68c0\u67e5","title":"Step2: \u538b\u6d4b\u94fe\u8def\u7684\u68b3\u7406"},{"location":"chapter_11/3_stress/#step3","text":"","title":"Step3\uff1a\u538b\u6d4b\u51c6\u5907"},{"location":"chapter_11/3_stress/#_3","text":"1) \u6d4b\u8bd5\u73af\u5883\u4e0e\u7ebf\u4e0a\u73af\u5883\u670d\u52a1\u9694\u79bb\uff0c\u82e5\u65e0\u6cd5\u9694\u79bb\u5219\u5fc5\u987b\u8981\u6709\u660e\u786e\u7684\u6b62\u635f\u9884\u6848 2) \u5982\u679c\u662f\u7ebf\u4e0a\u73af\u5883\u76f4\u63a5\u538b\u6d4b\u7684\u8bdd\uff0c\u9700\u8981\u6709\u538b\u6d4b\u6d41\u91cf\u7684\u6807\u8bb0\u3002\u6bd4\u5982\u7533\u8bf7\u4e00\u4e2a\u4e13\u95e8\u7684\u538b\u6d4b\u8d26\u53f7\u3002 3\uff09\u89c2\u5bdf\uff08\u76d1\u63a7\uff09\u6307\u6807\u68b3\u7406","title":"\u670d\u52a1\u7aef"},{"location":"chapter_11/3_stress/#_4","text":"1) \u53d1\u538b\u811a\u672c/\u6d4b\u8bd5\u5de5\u5177\u51c6\u5907\uff1a \u4f18\u5148\u4e1a\u754c\u901a\u7528\uff0c\u907f\u514d\u81ea\u9020\u8f6e\u5b50 2) \u964d\u7ea7/\u6b62\u635f\u9884\u6848\u51c6\u5907","title":"\u5ba2\u6237\u7aef"},{"location":"chapter_11/3_stress/#step4","text":"\u53d1\u538b\u5de5\u5177\u4ee5\u8f83\u4f4eqps\u8bf7\u6c42\u670d\u52a1\u96c6\u7fa4\uff0c\u76ee\u7684\uff1a 1\uff09\u9884\u6f14\u6574\u4e2a\u538b\u6d4b\u6d41\u7a0b\uff1b 2\uff09\u5206\u6790\u6d41\u91cf\u5206\u53d1\u5230\u5404\u670d\u52a1\u7684\u6bd4\u4f8b\uff1b","title":"Step4\uff1a\u9884\u538b\u6d4b"},{"location":"chapter_11/3_stress/#step5","text":"\u538b\u529b\u5e94\u9636\u6bb5\u6027\u589e\u957f\uff0c\u6bcf\u4e2a\u9636\u6bb5\u5fc5\u987b\u8981\u6709\u4e00\u5b9a\u7684\u505c\u7559\u89c2\u5bdf\u65f6\u95f4\uff1b","title":"Step5\uff1a\u538b\u6d4b"},{"location":"chapter_11/3_stress/#step6","text":"\u538b\u6d4b\u65e5\u5fd7\u4fdd\u5b58\uff1b \u538b\u6d4b\u6307\u6807\u66f2\u7ebf\u56fe\u4fdd\u5b58\uff1b \u5982\u82e5\u6709\uff0c\u56de\u6536\u538b\u6d4b\u8d44\u6e90(\u670d\u52a1\u5668\u3001Bot\u673a\u5668)\uff1b \u5982\u82e5\u6709\uff0c\u5173\u95ed\u5b9e\u9a8c\u5f00\u5173\uff1b \u5982\u82e5\u6709\uff0c\u6e05\u7406\u538b\u6d4b\u6d41\u91cf\u8bb0\u5f55\uff1b","title":"Step6\uff1a\u626b\u5c3e\u5de5\u4f5c"},{"location":"chapter_12/1_shifouzhide/","text":"\u6982\u8ff0 \u4e00 \u771f\u6b63\u7684\u5229\u6da6\u6765\u81ea\u54ea\u91cc? \u4f60\u771f\u6b63\u7684\u5229\u6da6\uff0c\u4e00\u5b9a\u662f\u901a\u8fc7\u67d0\u79cd\u521b\u65b0\uff0c\u505a\u5230\u4f60\u7684\u6210\u672c\u6bd4\u522b\u4eba\u66f4\u4f4e\uff0c\u80fd\u591f\u7528\u540c\u6837\u7684\u6210\u672c\u3002\u83b7\u5f97\u66f4\u591a\u4ef7\u503c\u3002 \u4e8c \u600e\u4e48\u5224\u65ad\u4e00\u4ef6\u4e8b\u60c5\u53c8\u6ca1\u6709\u524d\u9014\uff0c\u503c\u4e0d\u503c\u5f97\u505a \u5224\u65ad\u4e00\u4ef6\u4e8b\u60c5\u53c8\u6ca1\u6709\u524d\u9014\uff0c\u503c\u4e0d\u503c\u5f97\u505a\uff0c\u4ece\u4ef7\u503c\u56de\u62a5\u7684\u89d2\u5ea6\u6765\u770b\uff0c 1 \u6709\u4e00\u6761\u5fc3\u6cd5\uff1a \u201c\u65e2\u8981\u770b\u94b1\uff0c\u53c8\u4e0d\u8981\u53ea\u770b\u94b1\u201d 2 \u7b2c\u4e8c\u6761\u5fc3\u6cd5\uff1a\u60f3\u6e05\u695a\u4ef7\u503c\u7a7a\u95f4\u3002 \u4ef7\u503c\u7a7a\u95f4\u5c31\u662f\u901a\u8fc7\u67d0\u79cd\u521b\u65b0\uff0c\u8fbe\u5230\u964d\u672c\u589e\u6548\u7684\u76ee\u7684 3 \u7b2c\u4e09\u6761\u5fc3\u6cd5\uff1a \u4f60\u548c\u5916\u754c\u6240\u6709\u5408\u4f5c\uff0c\u90fd\u5e94\u8be5\u521b\u9020\u5168\u5c40\u6027\u589e\u91cf. \u6bcf\u6b21\u5408\u4f5c\u90fd\u8981\u900f\u5f7b\u7406\u89e3\u5bf9\u65b9\u8981\u4ec0\u4e48\uff0c\u6e05\u695a\u4e86\u89e3\u81ea\u5df1\u6709\u4ec0\u4e48\uff08\u4f60\u6709\u75c5\u554a\u6211\u6709\u836f\uff09\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u4e00\u8d77\u521b\u9020\u4e9b\u4ec0\u4e48\uff1f 4 \u7b2c\u56db\u6761\u5fc3\u6cd5\uff1a \u820d\u6ee1\u53d6\u534a\uff0c\u62fc\u547d\u63d0\u5347\u81ea\u5df1\u7684\u4ef7\u503c\u52bf\u80fd\u3002 \u4e0e\u5ba2\u6237\u3001\u540c\u4e8b\u3001\u670b\u53cb\u3001\u5bb6\u4eba\u76f8\u5904\uff0c\u7ec8\u6781\u8981\u4e49 \u5c31\u516b\u4e2a\u5b57\uff1a \u505a\u5927\u86cb\u7cd5\uff0c\u820d\u6ee1\u53d6\u534a \u820d\u6ee1\u53d6\u534a\uff1a \u5c31\u662f\u201c\u8ba9\u6d88\u8d39\u8005\u56e0\u6b64\u83b7\u76ca\uff0c\u81ea\u5df1\u540c\u65f6\u83b7\u5f97\u6210\u529f\u201d\uff0c\u8d5a\u7684\u94b1\u6211\u4e0d\u80fd\u90fd\u8981\uff0c\u4f60\u5148\u62ff\u8d70\u4e00\u534a\uff0c\u5269\u4e0b\u7684\u518d\u7ed9\u6211\u3002\u5b66\u5230\u7684\u5c31\u8981\u6559\u4eba\uff0c\u8d5a\u5230\u7684\u5c31\u8981\u7ed9\u4eba\u3002\u8fd9\u5c31\u662f\u4eba\u751f\u7684\u5546\u4e1a\u6a21\u5f0f\u3002","title":"\u7b2c\u4e00\u7bc7 \u5982\u4f55\u5224\u65ad\u4e00\u4ef6\u4e8b\u60c5\u503c\u4e0d\u503c\u5f97\u505a"},{"location":"chapter_12/1_shifouzhide/#_1","text":"","title":"\u6982\u8ff0"},{"location":"chapter_12/1_shifouzhide/#_2","text":"\u4f60\u771f\u6b63\u7684\u5229\u6da6\uff0c\u4e00\u5b9a\u662f\u901a\u8fc7\u67d0\u79cd\u521b\u65b0\uff0c\u505a\u5230\u4f60\u7684\u6210\u672c\u6bd4\u522b\u4eba\u66f4\u4f4e\uff0c\u80fd\u591f\u7528\u540c\u6837\u7684\u6210\u672c\u3002\u83b7\u5f97\u66f4\u591a\u4ef7\u503c\u3002","title":"\u4e00 \u771f\u6b63\u7684\u5229\u6da6\u6765\u81ea\u54ea\u91cc?"},{"location":"chapter_12/1_shifouzhide/#_3","text":"\u5224\u65ad\u4e00\u4ef6\u4e8b\u60c5\u53c8\u6ca1\u6709\u524d\u9014\uff0c\u503c\u4e0d\u503c\u5f97\u505a\uff0c\u4ece\u4ef7\u503c\u56de\u62a5\u7684\u89d2\u5ea6\u6765\u770b\uff0c 1 \u6709\u4e00\u6761\u5fc3\u6cd5\uff1a \u201c\u65e2\u8981\u770b\u94b1\uff0c\u53c8\u4e0d\u8981\u53ea\u770b\u94b1\u201d 2 \u7b2c\u4e8c\u6761\u5fc3\u6cd5\uff1a\u60f3\u6e05\u695a\u4ef7\u503c\u7a7a\u95f4\u3002 \u4ef7\u503c\u7a7a\u95f4\u5c31\u662f\u901a\u8fc7\u67d0\u79cd\u521b\u65b0\uff0c\u8fbe\u5230\u964d\u672c\u589e\u6548\u7684\u76ee\u7684 3 \u7b2c\u4e09\u6761\u5fc3\u6cd5\uff1a \u4f60\u548c\u5916\u754c\u6240\u6709\u5408\u4f5c\uff0c\u90fd\u5e94\u8be5\u521b\u9020\u5168\u5c40\u6027\u589e\u91cf. \u6bcf\u6b21\u5408\u4f5c\u90fd\u8981\u900f\u5f7b\u7406\u89e3\u5bf9\u65b9\u8981\u4ec0\u4e48\uff0c\u6e05\u695a\u4e86\u89e3\u81ea\u5df1\u6709\u4ec0\u4e48\uff08\u4f60\u6709\u75c5\u554a\u6211\u6709\u836f\uff09\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u4e00\u8d77\u521b\u9020\u4e9b\u4ec0\u4e48\uff1f 4 \u7b2c\u56db\u6761\u5fc3\u6cd5\uff1a \u820d\u6ee1\u53d6\u534a\uff0c\u62fc\u547d\u63d0\u5347\u81ea\u5df1\u7684\u4ef7\u503c\u52bf\u80fd\u3002","title":"\u4e8c \u600e\u4e48\u5224\u65ad\u4e00\u4ef6\u4e8b\u60c5\u53c8\u6ca1\u6709\u524d\u9014\uff0c\u503c\u4e0d\u503c\u5f97\u505a"},{"location":"chapter_12/1_shifouzhide/#_4","text":"\u5c31\u516b\u4e2a\u5b57\uff1a \u505a\u5927\u86cb\u7cd5\uff0c\u820d\u6ee1\u53d6\u534a \u820d\u6ee1\u53d6\u534a\uff1a \u5c31\u662f\u201c\u8ba9\u6d88\u8d39\u8005\u56e0\u6b64\u83b7\u76ca\uff0c\u81ea\u5df1\u540c\u65f6\u83b7\u5f97\u6210\u529f\u201d\uff0c\u8d5a\u7684\u94b1\u6211\u4e0d\u80fd\u90fd\u8981\uff0c\u4f60\u5148\u62ff\u8d70\u4e00\u534a\uff0c\u5269\u4e0b\u7684\u518d\u7ed9\u6211\u3002\u5b66\u5230\u7684\u5c31\u8981\u6559\u4eba\uff0c\u8d5a\u5230\u7684\u5c31\u8981\u7ed9\u4eba\u3002\u8fd9\u5c31\u662f\u4eba\u751f\u7684\u5546\u4e1a\u6a21\u5f0f\u3002","title":"\u4e0e\u5ba2\u6237\u3001\u540c\u4e8b\u3001\u670b\u53cb\u3001\u5bb6\u4eba\u76f8\u5904\uff0c\u7ec8\u6781\u8981\u4e49"},{"location":"chapter_13/1_about_riscv/","text":"\u6982\u8ff0 RISC-V \uff08\u53d1\u97f3\u4e3a\u201crisk-five\u201d\uff09\u662f\u4e00\u4e2a\u57fa\u4e8e\u7cbe\u7b80\u6307\u4ee4\u96c6\uff08RISC\uff09\u539f\u5219\u7684\u5f00\u6e90\u6307\u4ee4\u96c6\u67b6\u6784\uff08ISA\uff09\u3002\u8be5\u9879\u76ee\u5728 2010 \u5e74\u8d77\u6e90\u4e8e\u52a0\u5dde\u5927\u5b66\u4f2f\u514b\u5229\u5206\u6821\uff08UC Berkeley\uff09\uff0c\u65e8\u5728\u4e3a\u5b66\u672f\u754c\u548c\u4ea7\u4e1a\u754c\u63d0\u4f9b\u53ef\u4ee5\u5728 BSD \u8bb8\u53ef\u8bc1\u4e0b\u81ea\u7531\u4f7f\u7528\u7684 CPU \u8bbe\u8ba1\u3002\u5c31\u50cf\u5f00\u6e90\u8f6f\u4ef6\u4e00\u6837\uff0cRISC-V \u6307\u4ee4\u96c6\u53ef\u4ee5\u81ea\u7531\u5730\u7528\u4e8e\u4efb\u4f55\u76ee\u7684\uff0c\u5141\u8bb8\u4efb\u4f55\u4eba\u8bbe\u8ba1\u3001\u5236\u9020\u548c\u9500\u552e RISC-V \u82af\u7247\u548c\u8f6f\u4ef6\u800c\u4e0d\u5fc5\u652f\u4ed8\u7ed9\u4efb\u4f55\u516c\u53f8\u4e13\u5229\u8d39\u3002 RISC-V \u4e2d\u7684\u5b57\u6bcd\u201cV\u201d\u5305\u542b\u4e24\u5c42\u610f\u601d\uff0c\u4e00\u662f\u8fd9\u662f Berkeley \u4ece RISCI \u5f00\u59cb\u8bbe\u8ba1\u7684\u7b2c\u4e94\u4ee3\u6307\u4ee4\u96c6\u67b6\u6784\uff1b\u4e8c\u662f\u5b83\u4ee3\u8868\u4e86\u53d8\u5316\uff08Variation\uff09\u548c\u5411\u91cf\uff08Vectors\uff09\u3002 RISC-V \u9879\u76ee\u7684\u4e24\u4e2a\u76ee\u6807\u662f\uff1a \u6210\u4e3a\u4e00\u79cd\u5b8c\u5168\u5f00\u653e\u7684\u6307\u4ee4\u96c6\uff0c\u53ef\u4ee5\u88ab\u4efb\u4f55\u5b66\u672f\u673a\u6784\u6216\u5546\u4e1a\u7ec4\u7ec7\u6240\u81ea\u7531\u4f7f\u7528\uff1b \u6210\u4e3a\u4e00\u79cd\u771f\u6b63\u9002\u5408\u786c\u4ef6\u5b9e\u73b0\u4e14\u7a33\u5b9a\u7684\u6807\u51c6\u6307\u4ee4\u96c6\u3002 1 CISC \u4e0e RISC CISC\uff08Complex Instruction Set Computer\uff0c\u590d\u6742\u6307\u4ee4\u96c6\uff09\uff1a\u6307\u4ee4\u6570\u76ee\u6bd4\u8f83\u591a\uff0c\u4e0d\u4ec5\u5305\u542b\u4e86\u5904\u7406\u5668\u5e38\u7528\u7684\u6307\u4ee4\uff0c\u8fd8\u5305\u542b\u4e86\u8bb8\u591a\u4e0d\u5e38\u7528\u7684\u7279\u6b8a\u6307\u4ee4\u3002 RISC\uff08Reduced Instruction Set Computer\uff0c\u7cbe\u7b80\u6307\u4ee4\u96c6\uff09\uff1a\u6307\u4ee4\u6570\u76ee\u6bd4\u8f83\u5c11\uff0c\u53ea\u5305\u542b\u5904\u7406\u5668\u5e38\u7528\u7684\u6307\u4ee4\uff0c\u5bf9\u4e8e\u4e0d\u5e38\u7528\u7684\u64cd\u4f5c\uff0c\u5219\u901a\u8fc7\u6267\u884c\u591a\u6761\u5e38\u7528\u6307\u4ee4\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u3002 2 RISC-V \u548c ARM \u548c x86 \u5bf9\u6bd4 RISC-V \u57fa\u7840\u662f RISC\uff0c\u548c ARM \u7684\u57fa\u7840\u662f\u4e00\u6837\u7684, RISC-V \u662f\u5f00\u6e90\u7684,\u800c ARM \u662f\u6536\u8d39\u6388\u6743\u7684. Intel X86 \u67b6\u6784\u91c7\u7528\u7684\u662f CISC \u6307\u4ee4\u96c6\uff08\u590d\u6742\u6307\u4ee4\u96c6\uff09\u3002\u4ece\u8ba1\u7b97\u673a\u53d1\u5c55\u4e4b\u521d\u5c31\u4e00\u76f4\u662f\u4e3a\u63d0\u9ad8\u6027\u80fd\u800c\u670d\u52a1\u7684\u67b6\u6784\uff0cRISC \u53ea\u4e0d\u8fc7\u662f\u89c9\u5f97 CISC \u6307\u4ee4\u96c6\u5f88\u591a\u6307\u4ee4\u7528\u5230\u9891\u7387\u4e0d\u9ad8\uff0c\u4e3a\u4e86\u7701\u94b1\u7cbe\u7b80\u800c\u6765\u7684\u3002 RISC \u67b6\u6784\u7684\u4f18\u52bf\u662f\u5d4c\u5165\u5f0f\u548c\u6d88\u8d39\u7535\u5b50\u9886\u57df\uff08\u6bd5\u7adf\u8fd9\u4e9b\u9886\u57df\u6027\u80fd\u8981\u6c42\u4e0d\u9ad8\uff0c\u529f\u8017\u9700\u8981\u63a7\u5236\u5230\u4f4d\uff09 \u5728\u9700\u8981\u9ad8\u6027\u80fd\u3001\u4e0d\u662f\u7279\u522b\u5728\u4e4e\u529f\u8017\u7684\u8ba1\u7b97\u673a\u9886\u57df\uff0c\u82f1\u7279\u5c14\u5df2\u7ecf\u662f\u516c\u8ba4\u7684\u9738\u4e3b\u3002 2.1 \u5173\u4e8e ARM ARM \u516c\u53f8\u975e\u5e38\u4e13\u6ce8\u4e8e\u67b6\u6784\u8bbe\u8ba1\uff0c\u5b83\u7684\u67b6\u6784\u8d8a\u505a\u8d8a\u597d\uff0c\u5145\u5206\u53d1\u6325\u51fa\u4e86\u81ea\u5df1\u7684\u67b6\u6784\u7684\u4f18\u52bf\uff1a\u6027\u80fd\u591f\u7528\uff0c\u529f\u8017\u5f88\u4f4e\uff0c\u4f53\u79ef\u5f88\u5c0f\uff0c\u4ef7\u683c\u4f4e\u5ec9\u3002\u6240\u4ee5\uff0cARM \u67b6\u6784\u5728\u5d4c\u5165\u5f0f\u3001\u6d88\u8d39\u7535\u5b50\u9886\u57df\u5e94\u7528\u975e\u5e38\u5e7f\u6cdb\u3002\u5f53\u7136\u8fd9\u4e5f\u5f97\u76ca\u4e8e ARM \u4e13\u6ce8\u4e8e\u8bbe\u8ba1\uff0c\u800c\u82af\u7247\u8bbe\u8ba1\u7559\u7ed9\u4e86\u5916\u9762\u5927\u91cf\u7684\u5382\u5bb6\uff0c\u4f7f\u5f97 ARM \u67b6\u6784\u7684\u751f\u6001\u5728\u7279\u5b9a\u9886\u57df\u975e\u5e38\u597d\u3002 3 \u53c2\u8003 \u53c2\u8003 1 \u53c2\u8003 2 RISCV \u4e2d\u56fd\u533a\u5b98\u65b9\u7f51\u7ad9","title":"\u7b2c\u4e00\u7bc7 RISC-V \u7b80\u4ecb"},{"location":"chapter_13/1_about_riscv/#_1","text":"RISC-V \uff08\u53d1\u97f3\u4e3a\u201crisk-five\u201d\uff09\u662f\u4e00\u4e2a\u57fa\u4e8e\u7cbe\u7b80\u6307\u4ee4\u96c6\uff08RISC\uff09\u539f\u5219\u7684\u5f00\u6e90\u6307\u4ee4\u96c6\u67b6\u6784\uff08ISA\uff09\u3002\u8be5\u9879\u76ee\u5728 2010 \u5e74\u8d77\u6e90\u4e8e\u52a0\u5dde\u5927\u5b66\u4f2f\u514b\u5229\u5206\u6821\uff08UC Berkeley\uff09\uff0c\u65e8\u5728\u4e3a\u5b66\u672f\u754c\u548c\u4ea7\u4e1a\u754c\u63d0\u4f9b\u53ef\u4ee5\u5728 BSD \u8bb8\u53ef\u8bc1\u4e0b\u81ea\u7531\u4f7f\u7528\u7684 CPU \u8bbe\u8ba1\u3002\u5c31\u50cf\u5f00\u6e90\u8f6f\u4ef6\u4e00\u6837\uff0cRISC-V \u6307\u4ee4\u96c6\u53ef\u4ee5\u81ea\u7531\u5730\u7528\u4e8e\u4efb\u4f55\u76ee\u7684\uff0c\u5141\u8bb8\u4efb\u4f55\u4eba\u8bbe\u8ba1\u3001\u5236\u9020\u548c\u9500\u552e RISC-V \u82af\u7247\u548c\u8f6f\u4ef6\u800c\u4e0d\u5fc5\u652f\u4ed8\u7ed9\u4efb\u4f55\u516c\u53f8\u4e13\u5229\u8d39\u3002 RISC-V \u4e2d\u7684\u5b57\u6bcd\u201cV\u201d\u5305\u542b\u4e24\u5c42\u610f\u601d\uff0c\u4e00\u662f\u8fd9\u662f Berkeley \u4ece RISCI \u5f00\u59cb\u8bbe\u8ba1\u7684\u7b2c\u4e94\u4ee3\u6307\u4ee4\u96c6\u67b6\u6784\uff1b\u4e8c\u662f\u5b83\u4ee3\u8868\u4e86\u53d8\u5316\uff08Variation\uff09\u548c\u5411\u91cf\uff08Vectors\uff09\u3002 RISC-V \u9879\u76ee\u7684\u4e24\u4e2a\u76ee\u6807\u662f\uff1a \u6210\u4e3a\u4e00\u79cd\u5b8c\u5168\u5f00\u653e\u7684\u6307\u4ee4\u96c6\uff0c\u53ef\u4ee5\u88ab\u4efb\u4f55\u5b66\u672f\u673a\u6784\u6216\u5546\u4e1a\u7ec4\u7ec7\u6240\u81ea\u7531\u4f7f\u7528\uff1b \u6210\u4e3a\u4e00\u79cd\u771f\u6b63\u9002\u5408\u786c\u4ef6\u5b9e\u73b0\u4e14\u7a33\u5b9a\u7684\u6807\u51c6\u6307\u4ee4\u96c6\u3002","title":"\u6982\u8ff0"},{"location":"chapter_13/1_about_riscv/#1-cisc-risc","text":"CISC\uff08Complex Instruction Set Computer\uff0c\u590d\u6742\u6307\u4ee4\u96c6\uff09\uff1a\u6307\u4ee4\u6570\u76ee\u6bd4\u8f83\u591a\uff0c\u4e0d\u4ec5\u5305\u542b\u4e86\u5904\u7406\u5668\u5e38\u7528\u7684\u6307\u4ee4\uff0c\u8fd8\u5305\u542b\u4e86\u8bb8\u591a\u4e0d\u5e38\u7528\u7684\u7279\u6b8a\u6307\u4ee4\u3002 RISC\uff08Reduced Instruction Set Computer\uff0c\u7cbe\u7b80\u6307\u4ee4\u96c6\uff09\uff1a\u6307\u4ee4\u6570\u76ee\u6bd4\u8f83\u5c11\uff0c\u53ea\u5305\u542b\u5904\u7406\u5668\u5e38\u7528\u7684\u6307\u4ee4\uff0c\u5bf9\u4e8e\u4e0d\u5e38\u7528\u7684\u64cd\u4f5c\uff0c\u5219\u901a\u8fc7\u6267\u884c\u591a\u6761\u5e38\u7528\u6307\u4ee4\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u3002","title":"1 CISC \u4e0e RISC"},{"location":"chapter_13/1_about_riscv/#2-risc-v-arm-x86","text":"RISC-V \u57fa\u7840\u662f RISC\uff0c\u548c ARM \u7684\u57fa\u7840\u662f\u4e00\u6837\u7684, RISC-V \u662f\u5f00\u6e90\u7684,\u800c ARM \u662f\u6536\u8d39\u6388\u6743\u7684. Intel X86 \u67b6\u6784\u91c7\u7528\u7684\u662f CISC \u6307\u4ee4\u96c6\uff08\u590d\u6742\u6307\u4ee4\u96c6\uff09\u3002\u4ece\u8ba1\u7b97\u673a\u53d1\u5c55\u4e4b\u521d\u5c31\u4e00\u76f4\u662f\u4e3a\u63d0\u9ad8\u6027\u80fd\u800c\u670d\u52a1\u7684\u67b6\u6784\uff0cRISC \u53ea\u4e0d\u8fc7\u662f\u89c9\u5f97 CISC \u6307\u4ee4\u96c6\u5f88\u591a\u6307\u4ee4\u7528\u5230\u9891\u7387\u4e0d\u9ad8\uff0c\u4e3a\u4e86\u7701\u94b1\u7cbe\u7b80\u800c\u6765\u7684\u3002 RISC \u67b6\u6784\u7684\u4f18\u52bf\u662f\u5d4c\u5165\u5f0f\u548c\u6d88\u8d39\u7535\u5b50\u9886\u57df\uff08\u6bd5\u7adf\u8fd9\u4e9b\u9886\u57df\u6027\u80fd\u8981\u6c42\u4e0d\u9ad8\uff0c\u529f\u8017\u9700\u8981\u63a7\u5236\u5230\u4f4d\uff09 \u5728\u9700\u8981\u9ad8\u6027\u80fd\u3001\u4e0d\u662f\u7279\u522b\u5728\u4e4e\u529f\u8017\u7684\u8ba1\u7b97\u673a\u9886\u57df\uff0c\u82f1\u7279\u5c14\u5df2\u7ecf\u662f\u516c\u8ba4\u7684\u9738\u4e3b\u3002","title":"2 RISC-V \u548c ARM \u548c x86 \u5bf9\u6bd4"},{"location":"chapter_13/1_about_riscv/#21-arm","text":"ARM \u516c\u53f8\u975e\u5e38\u4e13\u6ce8\u4e8e\u67b6\u6784\u8bbe\u8ba1\uff0c\u5b83\u7684\u67b6\u6784\u8d8a\u505a\u8d8a\u597d\uff0c\u5145\u5206\u53d1\u6325\u51fa\u4e86\u81ea\u5df1\u7684\u67b6\u6784\u7684\u4f18\u52bf\uff1a\u6027\u80fd\u591f\u7528\uff0c\u529f\u8017\u5f88\u4f4e\uff0c\u4f53\u79ef\u5f88\u5c0f\uff0c\u4ef7\u683c\u4f4e\u5ec9\u3002\u6240\u4ee5\uff0cARM \u67b6\u6784\u5728\u5d4c\u5165\u5f0f\u3001\u6d88\u8d39\u7535\u5b50\u9886\u57df\u5e94\u7528\u975e\u5e38\u5e7f\u6cdb\u3002\u5f53\u7136\u8fd9\u4e5f\u5f97\u76ca\u4e8e ARM \u4e13\u6ce8\u4e8e\u8bbe\u8ba1\uff0c\u800c\u82af\u7247\u8bbe\u8ba1\u7559\u7ed9\u4e86\u5916\u9762\u5927\u91cf\u7684\u5382\u5bb6\uff0c\u4f7f\u5f97 ARM \u67b6\u6784\u7684\u751f\u6001\u5728\u7279\u5b9a\u9886\u57df\u975e\u5e38\u597d\u3002","title":"2.1 \u5173\u4e8e ARM"},{"location":"chapter_13/1_about_riscv/#3","text":"\u53c2\u8003 1 \u53c2\u8003 2 RISCV \u4e2d\u56fd\u533a\u5b98\u65b9\u7f51\u7ad9","title":"3 \u53c2\u8003"},{"location":"chapter_14/10_u_boot/","text":"","title":"\u7b2c\u5341\u7bc7 u-boot\u68b3\u7406\u548c\u603b\u7ed3"},{"location":"chapter_14/11_linux_reset_subsystem_and_framework/","text":"\u6982\u8ff0 \u672c\u6587\u603b\u7ed3 Linux Reset \u5b50\u7cfb\u7edf\u7684\u4e00\u4e9b\u77e5\u8bc6 \u5176\u4e00 consumer \u548c provider \u6846\u67b6 \u7c7b\u4f3c\u4e8e clock \u5b50\u7cfb\u7edf\uff0creset \u5b50\u7cfb\u7edf\u4e5f\u5206\u4e3a\u4e86 consumer \u548c provider\u3002 Consumer consumer \u5c31\u662f\u4f7f\u7528\u8005, \u76f4\u63a5\u4f7f\u7528\u5185\u6838 API \u5c31\u53ef\u4ee5\u4f7f\u7528 Reset \u5b50\u7cfb\u7edf. \u90a3\u4e48\u5177\u4f53\u6709\u90a3\u4e9b API \u5462? Linux \u5185\u6838\u5df2\u7ecf\u89c4\u5b9a\u548c\u63d0\u4f9b: devm_reset_control_get(struct device *dev, const char *id)//\u83b7\u53d6reset\u53e5\u67c4 reset_control_deassert(struct reset_control *rstc)//\u89e3\u590d\u4f4d reset_control_assert(struct reset_control *rstc)//\u590d\u4f4d reset_control_reset(struct reset_control *rstc)//\u5148\u590d\u4f4d\uff0c\u5ef6\u8fdf\u4e00\u4f1a\uff0c\u7136\u540e\u89e3\u590d\u4f4d struct reset_control \u7ed3\u6784\u4f53\u8868\u793a\u4e00\u4e2a reset \u53e5\u67c4\uff0c\u9a71\u52a8\u4e2d\u4f7f\u7528 reset API\uff0c\u9700\u8981\u5148\u83b7\u53d6 reset \u53e5\u67c4 Provider reset \u63d0\u4f9b\u8005\uff0c\u5373 reset \u9a71\u52a8\u3002 struct reset_controller_dev \u7ed3\u6784\u4f53\u4ee3\u8868\u4e00\u4e2a reset\u63a7\u5236\u5668 \uff0c\u5185\u90e8\u5305\u542b\u4e86 reset\u64cd\u4f5c\u51fd\u6570\u96c6\u5408struct reset_control_ops \uff0c\u6ce8\u518c reset\u9a71\u52a8 \u65f6\uff0c\u9700\u8981\u5206\u914d\u4e00\u4e2a struct reset_controller_dev\u7ed3\u6784\u4f53 \uff0c\u7136\u540e\u586b\u5145\u6210\u5458\uff0c\u6700\u540e\u5c06\u8be5\u7ed3\u6784\u4f53\u6ce8\u518c\u3002 struct reset_controller_dev{ const struct reset_control_ops *ops;//\u590d\u4f4d\u63a7\u5236\u64cd\u4f5c\u51fd\u6570 struct list_head list;//\u5168\u5c40\u94fe\u8868\uff0c\u590d\u4f4d\u63a7\u5236\u5668\u6ce8\u518c\u540e\u6302\u8f7d\u5230\u5168\u5c40\u94fe\u8868 struct list_head reset_control_head;//\u5404\u4e2a\u6a21\u5757\u590d\u4f4d\u7684\u94fe\u8868\u5934 struct device *dev\uff1b int of_reset_n_cells;//dts\u4e2d\u5f15\u7528\u65f6\uff0c\u9700\u8981\u51e0\u4e2a\u53c2\u6570 //\u901a\u8fc7dts\u5f15\u7528\u7684\u53c2\u6570\uff0c\u89e3\u6790\u590d\u4f4d\u63a7\u5236\u5668\u4e2d\u76f8\u5e94\u7684\u53c2\u6570 int (*of_xlate)(struct reset_controller_dev *rcdev, const struct of_phandle_args *reset_spec)\uff1b unsigned int nr_resets;//\u590d\u4f4d\u8bbe\u5907\u4e2a\u6570 } struct reset_control_ops{ int (*reset)(struct reset_controller_dev *rcdev, unsigned long id);//\u590d\u4f4d+\u89e3\u590d\u4f4d int (*assert)(struct reset_controller_dev *rcdev, unsigned long id);//\u590d\u4f4d int (*deassert)(struct reset_controller_dev *rcdev, unsigned long id);//\u89e3\u590d\u4f4d int (*status)(struct reset_controller_dev *rcdev, unsigned long id);//\u590d\u4f4d\u72b6\u6001\u67e5\u8be2 } \u5176\u4e8c fops \u601d\u60f3 \u901a\u8fc7\u4e0a\u9762\u7684 struct reset_control_ops \u5176\u5b9e\u5c31\u4e86\u89e3\u5230\u4e86\u8fd9\u4e2a\u601d\u60f3\u548c struct file_operations \u662f\u4e00\u81f4\u7684 \u5185\u6838\u7ed3\u6784\u4f53\u5173\u7cfb\u56fe \u5176\u4e09 \u5185\u6838 API \u8be6\u7ec6\u7248 \u53c2\u8003 \u5728 XXXX_probe \u51fd\u6570\u4e2d\u8fdb\u884c\u590d\u4f4d\u548c\u89e3\u590d\u4f4d \u57fa\u672c\u6b65\u9aa4\uff1a 1\u3001\u8c03\u7528`devm_reset_control_get()`\u83b7\u53d6reset\u53e5\u67c4 2\u3001\u8c03\u7528`reset_control_assert()`\u8fdb\u884c\u590d\u4f4d\u64cd\u4f5c 3\u3001\u8c03\u7528`reset_control_deassert()`\u8fdb\u884c\u89e3\u590d\u4f4d\u64cd\u4f5c static int xx_probe(struct platform_device *pdev) { struct device_node* np = pdev->dev.of_node; ...... /* 1\u3001\u83b7\u53d6reset\u53e5\u67c4 */ host->rstc = devm_reset_control_get(&pdev->dev, np->name); if (IS_ERR(host->rstc)) { dev_err(&pdev->dev, \"No reset controller specified\\n\"); return PTR_ERR(host->rstc); } if (host->rstc) { /* 2\u3001\u590d\u4f4d */ ret = reset_control_assert(host->rstc); if (ret) { dev_err(&pdev->dev, \"unable to reset_control_assert\\n\"); return ret; } udelay(1); /* 3\u3001\u89e3\u590d\u4f4d */ ret = reset_control_deassert(host->rstc); if (ret) { dev_err(&pdev->dev, \"unable to reset_control_deassert\\n\"); return ret; } } ...... } \u5176\u56db \u4e00\u4e2a\u548c\u8bbe\u5907\u6811\u7ed3\u5408\u7684 Reset \u9a71\u52a8\u7a0b\u5e8f\u6848\u4f8b \u7c7b\u4f3c\u4e8e clock \u9a71\u52a8\uff0creset \u9a71\u52a8\u4e5f\u662f\u7f16\u8fdb\u5185\u6838\u7684\uff0c\u5728 Linux \u542f\u52a8\u65f6\uff0c\u5b8c\u6210 reset \u9a71\u52a8\u7684\u52a0\u8f7d\u3002 \u8bbe\u5907\u6811 reset:reset-controller{ compatible = \"xx,xx-reset\"; reg = <0x0 0xc0000000 0x0 0x1000>; #reset-cells = <1>; }; \u4e0a\u8ff0\u662f\u4e00\u4e2a reset \u63a7\u5236\u5668\u7684\u8282\u70b9\uff0c 0xc0000000 \u662f\u5bc4\u5b58\u5668\u57fa\u5740\uff0c 0x1000 \u662f\u6620\u5c04\u5927\u5c0f\u3002 #reset-cells \u4ee3\u8868\u5f15\u7528\u8be5 reset \u65f6\u9700\u8981\u7684 cells \u4e2a\u6570\u3002 \u4f8b\u5982\uff0c #reset-cells = <1>; \u5219\u6b63\u786e\u5f15\u7528\u4e3a\uff1a mmc:mmc@0x12345678{ ...... resets = <&reset 0>;//0\u4ee3\u8868reset\u8bbe\u5907id\uff0cid\u662f\u81ea\u5b9a\u4e49\u7684\uff0c\u4f46\u662f\u4e0d\u80fd\u8d85\u8fc7reset\u9a71\u52a8\u4e2d\u6307\u5b9a\u7684\u8bbe\u5907\u4e2a\u6570 ...... }; \u9a71\u52a8\u7f16\u5199 reset \u9a71\u52a8\u7f16\u5199\u7684\u57fa\u672c\u6b65\u9aa4\uff1a 1\u3001\u5b9e\u73b0 struct reset_control_ops \u7ed3\u6784\u4f53\u4e2d\u7684 .reset \u3001 .assert \u3001 .deassert \u3001 .status \u51fd\u6570 2\u3001\u5206\u914d struct reset_controller_dev \u7ed3\u6784\u4f53\uff0c\u586b\u5145 ops \u3001 owner \u3001 nr_resets \u7b49\u6210\u5458\u5185\u5bb9 3\u3001\u8c03\u7528 reset_controller_register \u51fd\u6570\u6ce8\u518c reset \u8bbe\u5907 \u4ee5\u4e0b\u662f\u4ece\u5b9e\u9645\u9879\u76ee\u4e2d\u5206\u79bb\u51fa\u6765\u7684 reset \u9a71\u52a8\u4ee3\u7801\uff1a #include <linux/of.h> #include <linux/module.h> #include <linux/of_device.h> #include <linux/reset-controller.h> #include <linux/io.h> #include <linux/delay.h> // \u81ea\u5b9a\u4e49\u82af\u7247\u5382\u7684\u7ed3\u6784\u4f53\uff0c\u4fdd\u5b58\u5bc4\u5b58\u5668\u57fa\u5740\u7b49\u4fe1\u606f struct xx_reset{ struct reset_controller_dev rcdev; void __iomem *base; //...... }; static int xx_reset(struct reset_controller_dev *rcdev, unsigned long id) { //\u64cd\u4f5c\u5bc4\u5b58\u5668\uff1a\u5148\u590d\u4f4d\uff0c\u5ef6\u8fdf\u4e00\u4f1a\uff0c\u7136\u540e\u89e3\u590d\u4f4d return 0; } static int xx_reset_assert(struct reset_controller_dev *rcdev, unsigned long id) { //\u64cd\u4f5c\u5bc4\u5b58\u5668\uff1a\u590d\u4f4d return 0; } static int xx_reset_deassert(struct reset_controller_dev *rcdev, unsigned long id) { //\u64cd\u4f5c\u5bc4\u5b58\u5668\uff1a\u89e3\u590d\u4f4d return 0; } static int xx_reset_status(struct reset_controller_dev *rcdev, unsigned long id) { //\u64cd\u4f5c\u5bc4\u5b58\u5668\uff1a\u83b7\u53d6\u590d\u4f4d\u72b6\u6001 return 0; } static struct reset_control_ops xx_reset_ops = { .rest = xx_rest, .assert = xx_reset_asser, .deassert = xx_reset_deassert, .status = xx_rest_status, }; static int xx_reset_probe(struct platform_device *pdev) { struct xx_reset *xx_reset; struct resource *res; xx_reset = devm_kzalloc(&pdev->dev, sizeof(*xx_reset), GFP_KERNEL); if (!xx_reset) return -ENOMEM; platform_set_drvdata(pdev, xx_reset); res = platform_get_resource(pdev, IORESOURCE_MEM, 0); xx_reset->base = devm_ioremap_resource(&pdev->dev, res);//\u6620\u5c04\u5bc4\u5b58\u5668\u57fa\u5740 if (IS_ERR(xx_reset->base)) return PTR_ERR(xx_reset->base); xx_reset->rcdev.ops = &xx_reset_ops;//reset_ops\u64cd\u4f5c\u51fd\u6570\u96c6\u5408 xx_reset->rcdev.owner = THIS_MODULE; xx_reset->rcdev.of_node = pdev->dev.of_node; xx_reset->rcdev.of_reset_n_cells = 1; xx_reset->rcdev.nr_resets = BITS_PER_LONG;//reset\u8bbe\u5907\u4e2a\u6570 return reset_controller_register(&xx_reset->rcdev);//\u6ce8\u518creset controller } static int xx_reset_remove(struct platform_device *pdev) { struct xx_reste *xx_reset = platform_get_drvdata(pdev); reset_controller_unregister(&xx_reset->rcdev); return 0; } static const struct of_device_id ak_reset_of_match[]={ {.compatible = \"xx,xx-reset\"}, {}, }; MODULE_DEVICE_TABLE(of, xx_reset_of_match); static struct platform_driver xx_reset_driver = { .probe = xx_reset_probe, .remove = xx_reset_remove, .driver = { .name = \"xx-reset\", .of_match_table = ak_reset_of_match, }, }; module_platorm_driver(xx_reset_driver); MODULE_LICENSE(\"GPL\"); MODULE_DESCPRIPTION(\"xx reset controller driver\"); MODULE_AUTHOR(\"xx Microelectronic\"); MODULE_VERSION(\"v1.0.00\");","title":"\u7b2c\u5341\u4e00\u7bc7 Linux Reset\u5b50\u7cfb\u7edf\u53ca\u5176\u6846\u67b6"},{"location":"chapter_14/11_linux_reset_subsystem_and_framework/#_1","text":"\u672c\u6587\u603b\u7ed3 Linux Reset \u5b50\u7cfb\u7edf\u7684\u4e00\u4e9b\u77e5\u8bc6","title":"\u6982\u8ff0"},{"location":"chapter_14/11_linux_reset_subsystem_and_framework/#consumer-provider","text":"\u7c7b\u4f3c\u4e8e clock \u5b50\u7cfb\u7edf\uff0creset \u5b50\u7cfb\u7edf\u4e5f\u5206\u4e3a\u4e86 consumer \u548c provider\u3002","title":"\u5176\u4e00 consumer \u548c provider \u6846\u67b6"},{"location":"chapter_14/11_linux_reset_subsystem_and_framework/#consumer","text":"consumer \u5c31\u662f\u4f7f\u7528\u8005, \u76f4\u63a5\u4f7f\u7528\u5185\u6838 API \u5c31\u53ef\u4ee5\u4f7f\u7528 Reset \u5b50\u7cfb\u7edf. \u90a3\u4e48\u5177\u4f53\u6709\u90a3\u4e9b API \u5462? Linux \u5185\u6838\u5df2\u7ecf\u89c4\u5b9a\u548c\u63d0\u4f9b: devm_reset_control_get(struct device *dev, const char *id)//\u83b7\u53d6reset\u53e5\u67c4 reset_control_deassert(struct reset_control *rstc)//\u89e3\u590d\u4f4d reset_control_assert(struct reset_control *rstc)//\u590d\u4f4d reset_control_reset(struct reset_control *rstc)//\u5148\u590d\u4f4d\uff0c\u5ef6\u8fdf\u4e00\u4f1a\uff0c\u7136\u540e\u89e3\u590d\u4f4d struct reset_control \u7ed3\u6784\u4f53\u8868\u793a\u4e00\u4e2a reset \u53e5\u67c4\uff0c\u9a71\u52a8\u4e2d\u4f7f\u7528 reset API\uff0c\u9700\u8981\u5148\u83b7\u53d6 reset \u53e5\u67c4","title":"Consumer"},{"location":"chapter_14/11_linux_reset_subsystem_and_framework/#provider","text":"reset \u63d0\u4f9b\u8005\uff0c\u5373 reset \u9a71\u52a8\u3002 struct reset_controller_dev \u7ed3\u6784\u4f53\u4ee3\u8868\u4e00\u4e2a reset\u63a7\u5236\u5668 \uff0c\u5185\u90e8\u5305\u542b\u4e86 reset\u64cd\u4f5c\u51fd\u6570\u96c6\u5408struct reset_control_ops \uff0c\u6ce8\u518c reset\u9a71\u52a8 \u65f6\uff0c\u9700\u8981\u5206\u914d\u4e00\u4e2a struct reset_controller_dev\u7ed3\u6784\u4f53 \uff0c\u7136\u540e\u586b\u5145\u6210\u5458\uff0c\u6700\u540e\u5c06\u8be5\u7ed3\u6784\u4f53\u6ce8\u518c\u3002 struct reset_controller_dev{ const struct reset_control_ops *ops;//\u590d\u4f4d\u63a7\u5236\u64cd\u4f5c\u51fd\u6570 struct list_head list;//\u5168\u5c40\u94fe\u8868\uff0c\u590d\u4f4d\u63a7\u5236\u5668\u6ce8\u518c\u540e\u6302\u8f7d\u5230\u5168\u5c40\u94fe\u8868 struct list_head reset_control_head;//\u5404\u4e2a\u6a21\u5757\u590d\u4f4d\u7684\u94fe\u8868\u5934 struct device *dev\uff1b int of_reset_n_cells;//dts\u4e2d\u5f15\u7528\u65f6\uff0c\u9700\u8981\u51e0\u4e2a\u53c2\u6570 //\u901a\u8fc7dts\u5f15\u7528\u7684\u53c2\u6570\uff0c\u89e3\u6790\u590d\u4f4d\u63a7\u5236\u5668\u4e2d\u76f8\u5e94\u7684\u53c2\u6570 int (*of_xlate)(struct reset_controller_dev *rcdev, const struct of_phandle_args *reset_spec)\uff1b unsigned int nr_resets;//\u590d\u4f4d\u8bbe\u5907\u4e2a\u6570 } struct reset_control_ops{ int (*reset)(struct reset_controller_dev *rcdev, unsigned long id);//\u590d\u4f4d+\u89e3\u590d\u4f4d int (*assert)(struct reset_controller_dev *rcdev, unsigned long id);//\u590d\u4f4d int (*deassert)(struct reset_controller_dev *rcdev, unsigned long id);//\u89e3\u590d\u4f4d int (*status)(struct reset_controller_dev *rcdev, unsigned long id);//\u590d\u4f4d\u72b6\u6001\u67e5\u8be2 }","title":"Provider"},{"location":"chapter_14/11_linux_reset_subsystem_and_framework/#fops","text":"\u901a\u8fc7\u4e0a\u9762\u7684 struct reset_control_ops \u5176\u5b9e\u5c31\u4e86\u89e3\u5230\u4e86\u8fd9\u4e2a\u601d\u60f3\u548c struct file_operations \u662f\u4e00\u81f4\u7684","title":"\u5176\u4e8c fops \u601d\u60f3"},{"location":"chapter_14/11_linux_reset_subsystem_and_framework/#_2","text":"","title":"\u5185\u6838\u7ed3\u6784\u4f53\u5173\u7cfb\u56fe"},{"location":"chapter_14/11_linux_reset_subsystem_and_framework/#api","text":"\u53c2\u8003","title":"\u5176\u4e09 \u5185\u6838 API \u8be6\u7ec6\u7248"},{"location":"chapter_14/11_linux_reset_subsystem_and_framework/#xxxx_probe","text":"\u57fa\u672c\u6b65\u9aa4\uff1a 1\u3001\u8c03\u7528`devm_reset_control_get()`\u83b7\u53d6reset\u53e5\u67c4 2\u3001\u8c03\u7528`reset_control_assert()`\u8fdb\u884c\u590d\u4f4d\u64cd\u4f5c 3\u3001\u8c03\u7528`reset_control_deassert()`\u8fdb\u884c\u89e3\u590d\u4f4d\u64cd\u4f5c static int xx_probe(struct platform_device *pdev) { struct device_node* np = pdev->dev.of_node; ...... /* 1\u3001\u83b7\u53d6reset\u53e5\u67c4 */ host->rstc = devm_reset_control_get(&pdev->dev, np->name); if (IS_ERR(host->rstc)) { dev_err(&pdev->dev, \"No reset controller specified\\n\"); return PTR_ERR(host->rstc); } if (host->rstc) { /* 2\u3001\u590d\u4f4d */ ret = reset_control_assert(host->rstc); if (ret) { dev_err(&pdev->dev, \"unable to reset_control_assert\\n\"); return ret; } udelay(1); /* 3\u3001\u89e3\u590d\u4f4d */ ret = reset_control_deassert(host->rstc); if (ret) { dev_err(&pdev->dev, \"unable to reset_control_deassert\\n\"); return ret; } } ...... }","title":"\u5728 XXXX_probe \u51fd\u6570\u4e2d\u8fdb\u884c\u590d\u4f4d\u548c\u89e3\u590d\u4f4d"},{"location":"chapter_14/11_linux_reset_subsystem_and_framework/#reset","text":"\u7c7b\u4f3c\u4e8e clock \u9a71\u52a8\uff0creset \u9a71\u52a8\u4e5f\u662f\u7f16\u8fdb\u5185\u6838\u7684\uff0c\u5728 Linux \u542f\u52a8\u65f6\uff0c\u5b8c\u6210 reset \u9a71\u52a8\u7684\u52a0\u8f7d\u3002","title":"\u5176\u56db \u4e00\u4e2a\u548c\u8bbe\u5907\u6811\u7ed3\u5408\u7684 Reset \u9a71\u52a8\u7a0b\u5e8f\u6848\u4f8b"},{"location":"chapter_14/11_linux_reset_subsystem_and_framework/#_3","text":"reset:reset-controller{ compatible = \"xx,xx-reset\"; reg = <0x0 0xc0000000 0x0 0x1000>; #reset-cells = <1>; }; \u4e0a\u8ff0\u662f\u4e00\u4e2a reset \u63a7\u5236\u5668\u7684\u8282\u70b9\uff0c 0xc0000000 \u662f\u5bc4\u5b58\u5668\u57fa\u5740\uff0c 0x1000 \u662f\u6620\u5c04\u5927\u5c0f\u3002 #reset-cells \u4ee3\u8868\u5f15\u7528\u8be5 reset \u65f6\u9700\u8981\u7684 cells \u4e2a\u6570\u3002 \u4f8b\u5982\uff0c #reset-cells = <1>; \u5219\u6b63\u786e\u5f15\u7528\u4e3a\uff1a mmc:mmc@0x12345678{ ...... resets = <&reset 0>;//0\u4ee3\u8868reset\u8bbe\u5907id\uff0cid\u662f\u81ea\u5b9a\u4e49\u7684\uff0c\u4f46\u662f\u4e0d\u80fd\u8d85\u8fc7reset\u9a71\u52a8\u4e2d\u6307\u5b9a\u7684\u8bbe\u5907\u4e2a\u6570 ...... };","title":"\u8bbe\u5907\u6811"},{"location":"chapter_14/11_linux_reset_subsystem_and_framework/#_4","text":"reset \u9a71\u52a8\u7f16\u5199\u7684\u57fa\u672c\u6b65\u9aa4\uff1a 1\u3001\u5b9e\u73b0 struct reset_control_ops \u7ed3\u6784\u4f53\u4e2d\u7684 .reset \u3001 .assert \u3001 .deassert \u3001 .status \u51fd\u6570 2\u3001\u5206\u914d struct reset_controller_dev \u7ed3\u6784\u4f53\uff0c\u586b\u5145 ops \u3001 owner \u3001 nr_resets \u7b49\u6210\u5458\u5185\u5bb9 3\u3001\u8c03\u7528 reset_controller_register \u51fd\u6570\u6ce8\u518c reset \u8bbe\u5907 \u4ee5\u4e0b\u662f\u4ece\u5b9e\u9645\u9879\u76ee\u4e2d\u5206\u79bb\u51fa\u6765\u7684 reset \u9a71\u52a8\u4ee3\u7801\uff1a #include <linux/of.h> #include <linux/module.h> #include <linux/of_device.h> #include <linux/reset-controller.h> #include <linux/io.h> #include <linux/delay.h> // \u81ea\u5b9a\u4e49\u82af\u7247\u5382\u7684\u7ed3\u6784\u4f53\uff0c\u4fdd\u5b58\u5bc4\u5b58\u5668\u57fa\u5740\u7b49\u4fe1\u606f struct xx_reset{ struct reset_controller_dev rcdev; void __iomem *base; //...... }; static int xx_reset(struct reset_controller_dev *rcdev, unsigned long id) { //\u64cd\u4f5c\u5bc4\u5b58\u5668\uff1a\u5148\u590d\u4f4d\uff0c\u5ef6\u8fdf\u4e00\u4f1a\uff0c\u7136\u540e\u89e3\u590d\u4f4d return 0; } static int xx_reset_assert(struct reset_controller_dev *rcdev, unsigned long id) { //\u64cd\u4f5c\u5bc4\u5b58\u5668\uff1a\u590d\u4f4d return 0; } static int xx_reset_deassert(struct reset_controller_dev *rcdev, unsigned long id) { //\u64cd\u4f5c\u5bc4\u5b58\u5668\uff1a\u89e3\u590d\u4f4d return 0; } static int xx_reset_status(struct reset_controller_dev *rcdev, unsigned long id) { //\u64cd\u4f5c\u5bc4\u5b58\u5668\uff1a\u83b7\u53d6\u590d\u4f4d\u72b6\u6001 return 0; } static struct reset_control_ops xx_reset_ops = { .rest = xx_rest, .assert = xx_reset_asser, .deassert = xx_reset_deassert, .status = xx_rest_status, }; static int xx_reset_probe(struct platform_device *pdev) { struct xx_reset *xx_reset; struct resource *res; xx_reset = devm_kzalloc(&pdev->dev, sizeof(*xx_reset), GFP_KERNEL); if (!xx_reset) return -ENOMEM; platform_set_drvdata(pdev, xx_reset); res = platform_get_resource(pdev, IORESOURCE_MEM, 0); xx_reset->base = devm_ioremap_resource(&pdev->dev, res);//\u6620\u5c04\u5bc4\u5b58\u5668\u57fa\u5740 if (IS_ERR(xx_reset->base)) return PTR_ERR(xx_reset->base); xx_reset->rcdev.ops = &xx_reset_ops;//reset_ops\u64cd\u4f5c\u51fd\u6570\u96c6\u5408 xx_reset->rcdev.owner = THIS_MODULE; xx_reset->rcdev.of_node = pdev->dev.of_node; xx_reset->rcdev.of_reset_n_cells = 1; xx_reset->rcdev.nr_resets = BITS_PER_LONG;//reset\u8bbe\u5907\u4e2a\u6570 return reset_controller_register(&xx_reset->rcdev);//\u6ce8\u518creset controller } static int xx_reset_remove(struct platform_device *pdev) { struct xx_reste *xx_reset = platform_get_drvdata(pdev); reset_controller_unregister(&xx_reset->rcdev); return 0; } static const struct of_device_id ak_reset_of_match[]={ {.compatible = \"xx,xx-reset\"}, {}, }; MODULE_DEVICE_TABLE(of, xx_reset_of_match); static struct platform_driver xx_reset_driver = { .probe = xx_reset_probe, .remove = xx_reset_remove, .driver = { .name = \"xx-reset\", .of_match_table = ak_reset_of_match, }, }; module_platorm_driver(xx_reset_driver); MODULE_LICENSE(\"GPL\"); MODULE_DESCPRIPTION(\"xx reset controller driver\"); MODULE_AUTHOR(\"xx Microelectronic\"); MODULE_VERSION(\"v1.0.00\");","title":"\u9a71\u52a8\u7f16\u5199"},{"location":"chapter_14/12_pinctl_and_gpio/","text":"\u6982\u8ff0 \u672c\u6587\u603b\u7ed3 Linux pinctrl \u5b50\u7cfb\u7edf\u548c gpio \u5b50\u7cfb\u7edf pinctrl \u5b50\u7cfb\u7edf 1 \u4ec0\u4e48\u662f pinctrl \u5b50\u7cfb\u7edf 1 \u4ec0\u4e48\u662f pin pin \u5c31\u662f\u7269\u7406\u4e0a\u4e00\u4e2a\u4e00\u4e2a\u5f15\u811a 2 \u4ec0\u4e48\u662f pinctrl \u5b50\u7cfb\u7edf \u4f17\u6240\u5468\u77e5\uff0cARM SoC \u63d0\u4f9b\u4e86\u5341\u5206\u4e30\u5bcc\u7684\u786c\u4ef6\u63a5\u53e3\uff0c\u800c\u63a5\u53e3\u7269\u7406\u4e0a\u7684\u8868\u73b0\u5c31\u662f\u4e00\u4e2a\u4e2a\u7684 pin(\u6216\u8005\u53eb\u505a pad, finger \u7b49)\u3002\u4e3a\u4e86\u5b9e\u73b0\u4e30\u5bcc\u7684\u786c\u4ef6\u529f\u80fd\uff0cSoC \u7684 pin \u9700\u8981\u5b9e\u73b0\u590d\u7528\u529f\u80fd\uff0c\u5373\u5355\u72ec\u7684 pin \u9700\u8981\u63d0\u4f9b\u4e0d\u540c\u529f\u80fd\uff0c\u4f8b\u5982\uff0cpin0 \u65e2\u53ef\u4ee5\u4f5c\u4e3a GPIO\uff0c\u53ef\u4ee5\u4e5f\u7528\u4e8e i2c \u7684 SCL\uff0c\u901a\u8fc7 pin \u76f8\u5173\u7684\u590d\u7528\u5bc4\u5b58\u5668\u6765\u5207\u6362\u4e0d\u540c\u7684\u529f\u80fd\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8f6f\u4ef6\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5bc4\u5b58\u5668\u914d\u7f6e pin \u76f8\u5173\u7684\u7535\u6c14\u7279\u6027\uff0c\u4f8b\u5982\uff0c\u4e0a\u62c9/\u4e0b\u62c9\u3001\u9a71\u52a8\u80fd\u529b\u3001\u5f00\u6f0f\u7b49\u3002 Linux kernel 3.0 \u4e4b\u524d\u7684\u5185\u6838\uff0c\u5bf9\u4e8e pin \u7684\u529f\u80fd\u914d\u7f6e\u90fd\u662f\u901a\u8fc7\u76ee\u6807\u677f\u7684\u914d\u7f6e\u6587\u4ef6(arch/arm/mach-*)\u6765\u521d\u59cb\u5316\u7684\uff0c\u8fd9\u79cd\u914d\u7f6e\u65b9\u5f0f\u6bd4\u8f83\u7e41\u7410\uff0c\u5341\u5206\u5bb9\u6613\u51fa\u73b0\u95ee\u9898(\u4f8b\u5982\uff0cpin \u7684\u529f\u80fd\u914d\u7f6e\u51b2\u7a81)\u3002\u6240\u4ee5\uff0cLinux kernel 3.0 \u4e4b\u540e\uff0c\u5b9e\u73b0\u4e86 DT \u7684\u677f\u7ea7\u914d\u7f6e\u4fe1\u606f\u7ba1\u7406\u673a\u5236\uff0c\u5927\u5927\u6539\u5584\u4e86\u5bf9\u4e8e pin \u7684\u914d\u7f6e\u65b9\u5f0f\uff0c\u968f\u4e4b\u4e00\u8d77\u5b9e\u73b0\u7684\u5c31\u662f pinctrl \u5b50\u7cfb\u7edf\u3002 pinctrl \u5b50\u7cfb\u7edf\u4e3b\u8981\u8d1f\u8d23\u4ee5\u4e0b\u529f\u80fd\uff1a \u679a\u4e3e\u3001\u547d\u540d\u901a\u8fc7\u677f\u7ea7 DTS \u914d\u7f6e\u7684\u6240\u6709 pin\uff1b \u5bf9\u4e8e pin \u5b9e\u73b0\u590d\u7528\u529f\u80fd\uff1b \u914d\u7f6e pin \u7684\u7535\u5668\u7279\u6027\uff0c\u4f8b\u5982\uff0c\u4e0a\u62c9/\u4e0b\u62c9\u3001\u9a71\u52a8\u80fd\u529b\u3001\u5f00\u6f0f\u7b49\u3002 \u53ef\u89c1\uff0cpinctrl \u5b50\u7cfb\u7edf\u5730\u4f4d\u76f8\u5f53\u4e8e kernel \u5168\u5c40\u7684 pin \u7ba1\u7406\u4e2d\u5fc3\uff0ckernel \u4e2d\u6240\u6709\u9700\u8981 pin \u8d44\u6e90\u7684\u9a71\u52a8\u3001\u5b50\u7cfb\u7edf\u90fd\u9700\u8981\u901a\u8fc7 pinctrl \u5b50\u7cfb\u7edf\u6765\u7533\u8bf7\u3001\u914d\u7f6e\u3001\u91ca\u653e\u3002\u53ef\u5c06\u5bf9\u4e8e pin \u7684\u64cd\u4f5c\u6765\u8bf4\uff0cpinctrl \u5b50\u7cfb\u7edf\u5341\u5206\u91cd\u8981\u7684\u3002 2 pinctrl \u7684\u4f5c\u7528 \u65e0\u8bba\u662f\u54ea\u79cd\u82af\u7247\uff0c\u90fd\u6709\u7c7b\u4f3c\u4e0b\u56fe\u7684\u7ed3\u6784\uff1a \u60f3\u8981 pinA\u3001B \u7528\u4e8e GPIO\uff0c\u9700\u8981\u8bbe\u7f6e IOMUX \u8ba9\u5b83\u4eec\u8fde\u63a5\u5230 GPIO \u6a21\u5757\uff1b\u8981\u60f3\u8ba9 pinA\u3001B \u7528\u4e8e I2C\uff0c\u9700\u8981\u8bbe\u7f6e IOMUX \u8ba9\u5b83\u4eec\u8fde\u63a5\u5230 I2C \u6a21\u5757\uff0c\u8fd9\u91cc GPIO\u3001I2C \u5e94\u8be5\u662f\u5e76\u5217\u7684\u5173\u7cfb\uff0c\u5b83\u4eec\u80fd\u591f\u4f7f\u7528\u4e4b\u524d\uff0c\u9700\u8981\u8bbe\u7f6e\u590d\u7528\u5173\u7cfb IOMUX\uff0c\u6709\u65f6\u8fd8\u8981\u914d\u7f6e\u5f15\u811a\uff0c\u6bd4\u5982\u4e0a\u62c9\u3001\u4e0b\u62c9\u3001\u5f00\u6f0f\u7b49\u7b49\u3002\u73b0\u5728\u82af\u7247\u4e00\u822c\u52a8\u8f84\u51e0\u767e\u4e2a\u5f15\u811a\uff0c\u5728\u4f7f\u7528\u5230 GPIO\u3001I2C \u7b49\u529f\u80fd\u65f6\uff0c\u82e5\u4e00\u4e2a\u5f15\u811a\u4e00\u4e2a\u5f15\u811a\u53bb\u627e\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u8fdb\u884c\u914d\u7f6e\u975e\u5e38\u6d6a\u8d39\u65f6\u95f4\u548c\u7cbe\u529b\uff0c\u6240\u4ee5\u5185\u6838\u5f15\u5165\u4e86 Pinctrl \u5b50\u7cfb\u7edf\uff0c\u628a\u5f15\u811a\u7684\u590d\u7528\u548c\u914d\u7f6e\u62bd\u8c61\u51fa\u6765\uff0c\u53ea\u9700\u8981\u82af\u7247\u5382\u5546\u628a\u81ea\u5bb6\u82af\u7247\u7684\u652f\u6301\u8fdb\u53bb(\u8bf4\u767d\u4e86\u9075\u5b88\u8f6f\u4ef6\u89c4\u8303)\uff0c\u5c31\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u914d\u7f6e\u5f15\u811a\u3002","title":"\u7b2c\u5341\u4e8c\u7bc7 Linux pinctl\u548cgpio\u5b50\u7cfb\u7edf\u53ca\u5176\u6846\u67b6"},{"location":"chapter_14/12_pinctl_and_gpio/#_1","text":"\u672c\u6587\u603b\u7ed3 Linux pinctrl \u5b50\u7cfb\u7edf\u548c gpio \u5b50\u7cfb\u7edf","title":"\u6982\u8ff0"},{"location":"chapter_14/12_pinctl_and_gpio/#pinctrl","text":"","title":"pinctrl \u5b50\u7cfb\u7edf"},{"location":"chapter_14/12_pinctl_and_gpio/#1-pinctrl","text":"","title":"1 \u4ec0\u4e48\u662f pinctrl \u5b50\u7cfb\u7edf"},{"location":"chapter_14/12_pinctl_and_gpio/#1-pin","text":"pin \u5c31\u662f\u7269\u7406\u4e0a\u4e00\u4e2a\u4e00\u4e2a\u5f15\u811a","title":"1 \u4ec0\u4e48\u662f pin"},{"location":"chapter_14/12_pinctl_and_gpio/#2-pinctrl","text":"\u4f17\u6240\u5468\u77e5\uff0cARM SoC \u63d0\u4f9b\u4e86\u5341\u5206\u4e30\u5bcc\u7684\u786c\u4ef6\u63a5\u53e3\uff0c\u800c\u63a5\u53e3\u7269\u7406\u4e0a\u7684\u8868\u73b0\u5c31\u662f\u4e00\u4e2a\u4e2a\u7684 pin(\u6216\u8005\u53eb\u505a pad, finger \u7b49)\u3002\u4e3a\u4e86\u5b9e\u73b0\u4e30\u5bcc\u7684\u786c\u4ef6\u529f\u80fd\uff0cSoC \u7684 pin \u9700\u8981\u5b9e\u73b0\u590d\u7528\u529f\u80fd\uff0c\u5373\u5355\u72ec\u7684 pin \u9700\u8981\u63d0\u4f9b\u4e0d\u540c\u529f\u80fd\uff0c\u4f8b\u5982\uff0cpin0 \u65e2\u53ef\u4ee5\u4f5c\u4e3a GPIO\uff0c\u53ef\u4ee5\u4e5f\u7528\u4e8e i2c \u7684 SCL\uff0c\u901a\u8fc7 pin \u76f8\u5173\u7684\u590d\u7528\u5bc4\u5b58\u5668\u6765\u5207\u6362\u4e0d\u540c\u7684\u529f\u80fd\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8f6f\u4ef6\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5bc4\u5b58\u5668\u914d\u7f6e pin \u76f8\u5173\u7684\u7535\u6c14\u7279\u6027\uff0c\u4f8b\u5982\uff0c\u4e0a\u62c9/\u4e0b\u62c9\u3001\u9a71\u52a8\u80fd\u529b\u3001\u5f00\u6f0f\u7b49\u3002 Linux kernel 3.0 \u4e4b\u524d\u7684\u5185\u6838\uff0c\u5bf9\u4e8e pin \u7684\u529f\u80fd\u914d\u7f6e\u90fd\u662f\u901a\u8fc7\u76ee\u6807\u677f\u7684\u914d\u7f6e\u6587\u4ef6(arch/arm/mach-*)\u6765\u521d\u59cb\u5316\u7684\uff0c\u8fd9\u79cd\u914d\u7f6e\u65b9\u5f0f\u6bd4\u8f83\u7e41\u7410\uff0c\u5341\u5206\u5bb9\u6613\u51fa\u73b0\u95ee\u9898(\u4f8b\u5982\uff0cpin \u7684\u529f\u80fd\u914d\u7f6e\u51b2\u7a81)\u3002\u6240\u4ee5\uff0cLinux kernel 3.0 \u4e4b\u540e\uff0c\u5b9e\u73b0\u4e86 DT \u7684\u677f\u7ea7\u914d\u7f6e\u4fe1\u606f\u7ba1\u7406\u673a\u5236\uff0c\u5927\u5927\u6539\u5584\u4e86\u5bf9\u4e8e pin \u7684\u914d\u7f6e\u65b9\u5f0f\uff0c\u968f\u4e4b\u4e00\u8d77\u5b9e\u73b0\u7684\u5c31\u662f pinctrl \u5b50\u7cfb\u7edf\u3002 pinctrl \u5b50\u7cfb\u7edf\u4e3b\u8981\u8d1f\u8d23\u4ee5\u4e0b\u529f\u80fd\uff1a \u679a\u4e3e\u3001\u547d\u540d\u901a\u8fc7\u677f\u7ea7 DTS \u914d\u7f6e\u7684\u6240\u6709 pin\uff1b \u5bf9\u4e8e pin \u5b9e\u73b0\u590d\u7528\u529f\u80fd\uff1b \u914d\u7f6e pin \u7684\u7535\u5668\u7279\u6027\uff0c\u4f8b\u5982\uff0c\u4e0a\u62c9/\u4e0b\u62c9\u3001\u9a71\u52a8\u80fd\u529b\u3001\u5f00\u6f0f\u7b49\u3002 \u53ef\u89c1\uff0cpinctrl \u5b50\u7cfb\u7edf\u5730\u4f4d\u76f8\u5f53\u4e8e kernel \u5168\u5c40\u7684 pin \u7ba1\u7406\u4e2d\u5fc3\uff0ckernel \u4e2d\u6240\u6709\u9700\u8981 pin \u8d44\u6e90\u7684\u9a71\u52a8\u3001\u5b50\u7cfb\u7edf\u90fd\u9700\u8981\u901a\u8fc7 pinctrl \u5b50\u7cfb\u7edf\u6765\u7533\u8bf7\u3001\u914d\u7f6e\u3001\u91ca\u653e\u3002\u53ef\u5c06\u5bf9\u4e8e pin \u7684\u64cd\u4f5c\u6765\u8bf4\uff0cpinctrl \u5b50\u7cfb\u7edf\u5341\u5206\u91cd\u8981\u7684\u3002","title":"2 \u4ec0\u4e48\u662f pinctrl \u5b50\u7cfb\u7edf"},{"location":"chapter_14/12_pinctl_and_gpio/#2-pinctrl_1","text":"\u65e0\u8bba\u662f\u54ea\u79cd\u82af\u7247\uff0c\u90fd\u6709\u7c7b\u4f3c\u4e0b\u56fe\u7684\u7ed3\u6784\uff1a \u60f3\u8981 pinA\u3001B \u7528\u4e8e GPIO\uff0c\u9700\u8981\u8bbe\u7f6e IOMUX \u8ba9\u5b83\u4eec\u8fde\u63a5\u5230 GPIO \u6a21\u5757\uff1b\u8981\u60f3\u8ba9 pinA\u3001B \u7528\u4e8e I2C\uff0c\u9700\u8981\u8bbe\u7f6e IOMUX \u8ba9\u5b83\u4eec\u8fde\u63a5\u5230 I2C \u6a21\u5757\uff0c\u8fd9\u91cc GPIO\u3001I2C \u5e94\u8be5\u662f\u5e76\u5217\u7684\u5173\u7cfb\uff0c\u5b83\u4eec\u80fd\u591f\u4f7f\u7528\u4e4b\u524d\uff0c\u9700\u8981\u8bbe\u7f6e\u590d\u7528\u5173\u7cfb IOMUX\uff0c\u6709\u65f6\u8fd8\u8981\u914d\u7f6e\u5f15\u811a\uff0c\u6bd4\u5982\u4e0a\u62c9\u3001\u4e0b\u62c9\u3001\u5f00\u6f0f\u7b49\u7b49\u3002\u73b0\u5728\u82af\u7247\u4e00\u822c\u52a8\u8f84\u51e0\u767e\u4e2a\u5f15\u811a\uff0c\u5728\u4f7f\u7528\u5230 GPIO\u3001I2C \u7b49\u529f\u80fd\u65f6\uff0c\u82e5\u4e00\u4e2a\u5f15\u811a\u4e00\u4e2a\u5f15\u811a\u53bb\u627e\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u8fdb\u884c\u914d\u7f6e\u975e\u5e38\u6d6a\u8d39\u65f6\u95f4\u548c\u7cbe\u529b\uff0c\u6240\u4ee5\u5185\u6838\u5f15\u5165\u4e86 Pinctrl \u5b50\u7cfb\u7edf\uff0c\u628a\u5f15\u811a\u7684\u590d\u7528\u548c\u914d\u7f6e\u62bd\u8c61\u51fa\u6765\uff0c\u53ea\u9700\u8981\u82af\u7247\u5382\u5546\u628a\u81ea\u5bb6\u82af\u7247\u7684\u652f\u6301\u8fdb\u53bb(\u8bf4\u767d\u4e86\u9075\u5b88\u8f6f\u4ef6\u89c4\u8303)\uff0c\u5c31\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u914d\u7f6e\u5f15\u811a\u3002","title":"2 pinctrl \u7684\u4f5c\u7528"},{"location":"chapter_14/13_embedded_development_direction/","text":"\u6982\u8ff0 \u603b\u7ed3\u5d4c\u5165\u5f0f\u5f00\u53d1\u9886\u57df\u7684\u5de5\u4f5c\u65b9\u5411 \u5404\u4e2a\u65b9\u5411 \u4e00\u3001\u5d4c\u5165\u5f0f\u786c\u4ef6\u5f00\u53d1\uff1a \u719f\u6089\u7535\u8def\u7b49\u77e5\u8bc6\uff0c\u975e\u5e38\u719f\u6089\u5404\u79cd\u5e38\u7528\u5143\u5668\u4ef6\uff0c\u638c\u63e1\u6a21\u62df\u7535\u8def\u548c\u6570\u5b57\u7535\u8def\u8bbe\u8ba1\u7684\u5f00\u53d1\u80fd\u529b\u3002\u719f\u7ec3\u638c\u63e1\u5d4c\u5165\u5f0f\u786c\u4ef6\u77e5\u8bc6\uff0c\u719f\u6089\u786c\u4ef6\u5f00\u53d1\u6a21\u5f0f\u548c\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u719f\u6089 ARM32 \u4f4d\u5904\u7406\u5668\u5d4c\u5165\u5f0f\u786c\u4ef6\u5e73\u53f0\u5f00\u53d1\u3001\u5e76\u5177\u5907\u4ea7\u54c1\u5f00\u53d1\u7ecf\u9a8c\u3002\u7cbe\u901a\u5e38\u7528\u7684\u786c\u4ef6\u8bbe\u8ba1\u5de5\u5177\uff1aProtel/PADS(PowerPCB)/Cadence/OrCad\u3002\u4e00\u822c\u9700\u8981\u6709 4~8 \u5c42\u9ad8\u901f PCB \u8bbe\u8ba1\u7ecf\u9a8c\u3002 \u786c\u4ef6\u5de5\u7a0b\u5e08 \u4e8c \u5d4c\u5165\u5f0f\u9a71\u52a8+\u7cfb\u7edf\u5f00\u53d1 \u9a71\u52a8\u5de5\u7a0b\u5e08\u3001Linux \u5185\u6838\u4e13\u5bb6 \u4e09 \u5d4c\u5165\u5f0f\u5e94\u7528\u5f00\u53d1 \u57fa\u4e8e Arm + Linux \u7cfb\u7edf, \u8fd9\u4e2a\u57fa\u672c\u662f\u5e94\u7528\u5c42\u5f00\u53d1\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u76f8\u5bf9\u6bd4\u8f83\u5927\u7684\u9886\u57df\u662f\u57fa\u4e8e Qt \u5f00\u53d1\u56fe\u5f62\u754c\u9762. \u56db \u5d4c\u5165\u5f0f\u548c AI \u7ed3\u5408\u65b9\u5411 \u672a\u6765\u7684\u4e3b\u6d41 \u4e94 \u672a\u6d89\u53ca\u677f\u5757 \u5355\u7247\u673a stm32 rtos \u5176\u4ed6 \u5d4c\u5165\u5f0f\u8f6f\u4ef6\u884c\u4e1a\u548c\u516c\u53f8\u603b\u7ed3","title":"\u7b2c\u5341\u4e09\u7bc7 \u5d4c\u5165\u5f0f\u5f00\u53d1\u65b9\u5411\u548c\u5206\u7c7b"},{"location":"chapter_14/13_embedded_development_direction/#_1","text":"\u603b\u7ed3\u5d4c\u5165\u5f0f\u5f00\u53d1\u9886\u57df\u7684\u5de5\u4f5c\u65b9\u5411","title":"\u6982\u8ff0"},{"location":"chapter_14/13_embedded_development_direction/#_2","text":"","title":"\u5404\u4e2a\u65b9\u5411"},{"location":"chapter_14/13_embedded_development_direction/#_3","text":"\u719f\u6089\u7535\u8def\u7b49\u77e5\u8bc6\uff0c\u975e\u5e38\u719f\u6089\u5404\u79cd\u5e38\u7528\u5143\u5668\u4ef6\uff0c\u638c\u63e1\u6a21\u62df\u7535\u8def\u548c\u6570\u5b57\u7535\u8def\u8bbe\u8ba1\u7684\u5f00\u53d1\u80fd\u529b\u3002\u719f\u7ec3\u638c\u63e1\u5d4c\u5165\u5f0f\u786c\u4ef6\u77e5\u8bc6\uff0c\u719f\u6089\u786c\u4ef6\u5f00\u53d1\u6a21\u5f0f\u548c\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u719f\u6089 ARM32 \u4f4d\u5904\u7406\u5668\u5d4c\u5165\u5f0f\u786c\u4ef6\u5e73\u53f0\u5f00\u53d1\u3001\u5e76\u5177\u5907\u4ea7\u54c1\u5f00\u53d1\u7ecf\u9a8c\u3002\u7cbe\u901a\u5e38\u7528\u7684\u786c\u4ef6\u8bbe\u8ba1\u5de5\u5177\uff1aProtel/PADS(PowerPCB)/Cadence/OrCad\u3002\u4e00\u822c\u9700\u8981\u6709 4~8 \u5c42\u9ad8\u901f PCB \u8bbe\u8ba1\u7ecf\u9a8c\u3002 \u786c\u4ef6\u5de5\u7a0b\u5e08","title":"\u4e00\u3001\u5d4c\u5165\u5f0f\u786c\u4ef6\u5f00\u53d1\uff1a"},{"location":"chapter_14/13_embedded_development_direction/#_4","text":"\u9a71\u52a8\u5de5\u7a0b\u5e08\u3001Linux \u5185\u6838\u4e13\u5bb6","title":"\u4e8c \u5d4c\u5165\u5f0f\u9a71\u52a8+\u7cfb\u7edf\u5f00\u53d1"},{"location":"chapter_14/13_embedded_development_direction/#_5","text":"\u57fa\u4e8e Arm + Linux \u7cfb\u7edf, \u8fd9\u4e2a\u57fa\u672c\u662f\u5e94\u7528\u5c42\u5f00\u53d1\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u76f8\u5bf9\u6bd4\u8f83\u5927\u7684\u9886\u57df\u662f\u57fa\u4e8e Qt \u5f00\u53d1\u56fe\u5f62\u754c\u9762.","title":"\u4e09 \u5d4c\u5165\u5f0f\u5e94\u7528\u5f00\u53d1"},{"location":"chapter_14/13_embedded_development_direction/#ai","text":"\u672a\u6765\u7684\u4e3b\u6d41","title":"\u56db \u5d4c\u5165\u5f0f\u548c AI \u7ed3\u5408\u65b9\u5411"},{"location":"chapter_14/13_embedded_development_direction/#_6","text":"\u5355\u7247\u673a stm32 rtos","title":"\u4e94 \u672a\u6d89\u53ca\u677f\u5757"},{"location":"chapter_14/13_embedded_development_direction/#_7","text":"\u5d4c\u5165\u5f0f\u8f6f\u4ef6\u884c\u4e1a\u548c\u516c\u53f8\u603b\u7ed3","title":"\u5176\u4ed6"},{"location":"chapter_14/14_linux_kernel_trimming/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3 Linux \u5185\u6838\u88c1\u526a\u76f8\u5173\u8fc7\u7a0b\u548c\u6280\u5de7 \u4ee5\u53ca\u624b\u5199\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u6587\u4ef6\u7cfb\u7edf\u5e76\u4e14\u5bfc\u5165\u5185\u6838 \u662f\u4ec0\u4e48 \u8fd1\u5e74\u6765\uff0cLinux \u64cd\u4f5c\u7cfb\u7edf\u5728\u590d\u6742\u6027\u548c\u89c4\u6a21\u4e0a\u90fd\u5728\u589e\u957f\u3002\u7136\u800c\uff0c\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u53ea\u9700\u8981\u4e00\u90e8\u5206 OS \u529f\u80fd\uff0c\u4f17\u591a\u7684\u5e94\u7528\u9700\u6c42\u5bfc\u81f4\u4e86 Linux \u5185\u6838\u7684\u81a8\u80c0\u3002\u64cd\u4f5c\u7cfb\u7edf\u7684\u5185\u6838\u81a8\u80c0\u540c\u6837\u5bfc\u81f4\u4e86\u5b89\u5168\u6027\u9690\u60a3\u3001\u542f\u52a8\u65f6\u95f4\u53d8\u957f\u548c\u5185\u5b58\u4f7f\u7528\u7684\u589e\u52a0\u3002 \u968f\u7740\u670d\u52a1\u5316\u548c\u5fae\u670d\u52a1\u7684\u6d41\u884c\uff0c\u8fdb\u4e00\u6b65\u63d0\u51fa\u4e86\u5bf9\u5185\u6838\u88c1\u526a\u7684\u9700\u6c42\u3002\u5728\u8fd9\u4e9b\u573a\u666f\u4e2d\uff0c\u865a\u62df\u673a\u8fd0\u884c\u5c0f\u578b\u5e94\u7528\u7a0b\u5e8f\uff0c\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5f80\u5f80\u662f\u201c\u5fae\u578b\u201d\u7684\uff0c\u5185\u6838\u5360\u7528\u8f83\u5c0f\uff0c\u4e00\u4e9b\u865a\u62df\u5316\u6280\u672f\u8981\u4e3a\u76ee\u6807\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u6700\u7b80\u5355\u7684 Linux \u5185\u6838\u3002 Linux \u5185\u6838\u88c1\u526a\u6307\u7684\u662f\uff0c\u6839\u636e\u5b9e\u9645\u9700\u6c42\u53bb\u6389\u6216\u8005\u4fdd\u7559\u90e8\u5206\u5185\u6838\u6a21\u5757\u6216\u8005\u51fd\u6570\uff0c\u4ee5\u8fbe\u5230\u4f18\u5316\u7cfb\u7edf\u6027\u80fd\u3001\u51cf\u5c0f\u5185\u5b58\u5360\u7528\u3001\u63d0\u9ad8\u5b89\u5168\u6027\u7b49\u76ee\u7684\u7684\u8fc7\u7a0b\u3002\u901a\u8fc7\u88c1\u526a\u53ef\u4ee5\u4f7f\u5f97\u5185\u6838\u66f4\u52a0\u8f7b\u91cf\u7ea7\uff0c\u66f4\u9002\u5408\u7279\u5b9a\u573a\u666f\u4e0b\u7684\u4f7f\u7528\u3002 \u4e3a\u4ec0\u4e48 1.\u8282\u7701\u7a7a\u95f4\uff1a\u5728\u5d4c\u5165\u5f0f\u8bbe\u5907\u4e2d\uff0c\u5f80\u5f80\u53ea\u6709\u51e0\u5341 MB \u6216\u8005\u51e0\u767e MB \u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7cbe\u7b80\u7248\u7684\u5185\u6838\u53ef\u4ee5\u8282\u7701\u5927\u91cf\u7684\u7a7a\u95f4\u3002 2.\u63d0\u9ad8\u6027\u80fd\uff1a\u53ea\u4fdd\u7559\u5fc5\u8981\u6a21\u5757\u53ef\u4ee5\u51cf\u5c11\u5185\u5b58\u5360\u7528\u548c CPU \u8d1f\u8f7d\uff0c\u5728\u4e00\u4e9b\u8d44\u6e90\u6709\u9650\u7684\u573a\u666f\u4e0b\u53ef\u4ee5\u63d0\u9ad8\u7cfb\u7edf\u6027\u80fd\u3002 3.\u63d0\u9ad8\u5b89\u5168\u6027\uff1a\u88c1\u526a\u6389\u4e0d\u5fc5\u8981\u7684\u6a21\u5757\u53ef\u4ee5\u51cf\u5c11\u7cfb\u7edf\u7684\u653b\u51fb\u9762\uff0c\u63d0\u9ad8\u7cfb\u7edf\u7684\u5b89\u5168\u6027\u3002 \u600e\u4e48\u529e \u5176\u4e00 \u88c1\u526a\u6b65\u9aa4 \u88c1\u526a\u5185\u6838\u7684\u8fc7\u7a0b\u4e00\u822c\u5982\u4e0b\uff1a \u5b9a\u4e49\u5185\u6838\u914d\u7f6e\uff1a\u901a\u8fc7\u4f7f\u7528\u300cmake config\u300d\u6216\u300cmake menuconfig\u300d\u547d\u4ee4\u786e\u5b9a\u4f60\u9700\u8981\u7f16\u8bd1\u54ea\u4e9b\u4ee3\u7801\u3002 \u5220\u9664\u4e0d\u5fc5\u8981\u7684\u4ee3\u7801\uff1a\u628a\u4e0d\u9700\u8981\u7684\u4ee3\u7801\u4ece\u5185\u6838\u6e90\u4ee3\u7801\u4e2d\u5220\u9664\u3002 \u7f16\u8bd1\u5185\u6838\uff1a\u4f7f\u7528\u300cmake\u300d\u547d\u4ee4\u7f16\u8bd1\u5185\u6838\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u80fd\u9700\u8981\u51e0\u5206\u949f\u5230\u51e0\u4e2a\u5c0f\u65f6\u4e0d\u7b49\u3002 1.\u4e86\u89e3\u5f53\u524d\u5185\u6838\u914d\u7f6e\uff1a\u8fd0\u884c\u547d\u4ee4\u201cmake menuconfig\u201d\u53ef\u4ee5\u6253\u5f00\u5185\u6838\u914d\u7f6e\u754c\u9762\uff0c\u67e5\u770b\u5f53\u524d\u5185\u6838\u7684\u6240\u6709\u914d\u7f6e\u548c\u6a21\u5757\u4fe1\u606f\u3002 2.\u6839\u636e\u9700\u6c42\u88c1\u526a\uff1a\u6839\u636e\u5b9e\u9645\u9700\u6c42\u9009\u62e9\u9700\u8981\u4fdd\u7559\u6216\u8005\u53bb\u6389\u7684\u5185\u6838\u6a21\u5757\uff0c\u6ce8\u610f\u4fdd\u7559\u5fc5\u8981\u7684\u9a71\u52a8\u7a0b\u5e8f\u548c\u6587\u4ef6\u7cfb\u7edf\u3002 3.\u7f16\u8bd1\u5185\u6838\uff1a\u5b8c\u6210\u914d\u7f6e\u540e\uff0c\u4f7f\u7528\u201cmake\u201d\u547d\u4ee4\u7f16\u8bd1\u5185\u6838\u3002 4.\u5b89\u88c5\u65b0\u5185\u6838\uff1a\u4f7f\u7528\u201cmake install\u201d\u547d\u4ee4\u5b89\u88c5\u65b0\u5185\u6838\u5e76\u66f4\u65b0\u5f15\u5bfc\u7a0b\u5e8f\u3002 5.\u6d4b\u8bd5\u65b0\u5185\u6838\uff1a\u91cd\u542f\u7cfb\u7edf\u5e76\u6d4b\u8bd5\u65b0\u5185\u6838\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\u3002 \u5176\u4e8c \u5982\u4f55\u9009\u62e9\u4e0d\u9700\u8981\u7684\u4ee3\u7801\u6a21\u5757 1.\u53bb\u6389\u4e0d\u5fc5\u8981\u7684\u786c\u4ef6\u652f\u6301\uff1a\u6839\u636e\u5b9e\u9645\u786c\u4ef6\u8bbe\u5907\u60c5\u51b5\uff0c\u53bb\u6389\u5bf9\u5e94\u7684\u786c\u4ef6\u652f\u6301\u6a21\u5757\uff0c\u6bd4\u5982\u6ca1\u6709 USB \u63a5\u53e3\u5c31\u53ef\u4ee5\u53bb\u6389 USB \u652f\u6301\u3002 2.\u53bb\u6389\u4e0d\u5fc5\u8981\u7684\u6587\u4ef6\u7cfb\u7edf\u652f\u6301\uff1a\u6839\u636e\u5b9e\u9645\u4f7f\u7528\u60c5\u51b5\uff0c\u53bb\u6389\u4e0d\u9700\u8981\u7684\u6587\u4ef6\u7cfb\u7edf\u652f\u6301\u6a21\u5757\uff0c\u6bd4\u5982\u6ca1\u6709\u4f7f\u7528 NFS \u5c31\u53ef\u4ee5\u53bb\u6389 NFS \u652f\u6301\u3002 3.\u53bb\u6389\u4e0d\u5fc5\u8981\u7684\u7f51\u7edc\u534f\u8bae\u652f\u6301\uff1a\u6839\u636e\u5b9e\u9645\u7f51\u7edc\u73af\u5883\uff0c\u53bb\u6389\u4e0d\u9700\u8981\u7684\u7f51\u7edc\u534f\u8bae\u652f\u6301\u6a21\u5757\u7ea2\u5e3d\u5b50 linux \u4e0b\u8f7d\uff0c\u6bd4\u5982\u6ca1\u6709\u4f7f\u7528 IPv6 \u5c31\u53ef\u4ee5\u53bb\u6389 IPv6 \u652f\u6301\u3002 \u5176\u4e09 \u6ce8\u610f\u4e8b\u9879 \u88c1\u526a\u5185\u6838\u9700\u8981\u4e00\u5b9a\u7684\u6280\u5de7\u548c\u7ecf\u9a8c\uff0c\u56e0\u4e3a\u5220\u9664\u7684\u4ee3\u7801\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5185\u6838\u4e0d\u7a33\u5b9a\u6216\u51fa\u73b0\u5176\u4ed6\u95ee\u9898\u3002\u5efa\u8bae\u5728\u88c1\u526a\u5185\u6838\u524d\u5145\u5206\u4e86\u89e3 Linux \u5185\u6838\u7684\u67b6\u6784\u548c\u5b9e\u73b0\u3002 \u88c1\u526a\u540e\u7684\u5185\u6838\u4e5f\u53ef\u80fd\u4e0d\u5b8c\u5168\u652f\u6301\u6240\u6709\u7684\u786c\u4ef6\u548c\u8f6f\u4ef6\uff0c\u56e0\u6b64\u9700\u8981\u8c28\u614e\u64cd\u4f5c\u3002 \u4fdd\u7559\u5fc5\u8981\u7684\u9a71\u52a8\u7a0b\u5e8f\uff1a\u4e00\u4e9b\u786c\u4ef6\u8bbe\u5907\u53ef\u80fd\u9700\u8981\u5bf9\u5e94\u7684\u9a71\u52a8\u7a0b\u5e8f\u624d\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u6240\u4ee5\u5728\u88c1\u526a\u65f6\u8981\u4fdd\u7559\u5fc5\u8981\u7684\u9a71\u52a8\u7a0b\u5e8f\u3002 \u8c28\u614e\u88c1\u526a\uff1a\u88c1\u526a\u6389\u4e0d\u5fc5\u8981\u7684\u6a21\u5757\u53ef\u4ee5\u51cf\u5c0f\u5185\u6838\u4f53\u79ef\uff0c\u4f46\u662f\u8fc7\u5ea6\u88c1\u526a\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7cfb\u7edf\u4e0d\u7a33\u5b9a\u6216\u8005\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002 \u6ce8\u610f\u7248\u672c\u517c\u5bb9\u6027\uff1a\u5185\u6838\u7248\u672c\u4e0d\u540c linux \u5185\u6838\u88c1\u526a\uff0c\u914d\u7f6e\u548c\u7f16\u8bd1\u65b9\u5f0f\u4e5f\u53ef\u80fd\u5b58\u5728\u5dee\u5f02\u3002 \u53c2\u8003 \u3010linux kernel\u3011\u8bb0\u4e00\u6b21 linux \u5185\u6838\u88c1\u526a\u603b\u7ed3 linux \u5185\u6838\u88c1\u526a\u53ca\u7f16\u8bd1 \u638c\u63e1 Linux \u5185\u6838\u88c1\u526a\u6280\u5de7\uff0c\u8f7b\u677e\u4f18\u5316\u7cfb\u7edf \u624b\u5199\u4e00\u4e2a\u7b80\u5355\u53ef\u7528\u7684\u6587\u4ef6\u7cfb\u7edf\u52a0\u5165\u5185\u6838 Linux \u5185\u6838\u8c03\u8bd5 \u5229\u7528 QEMU+GDB \u642d\u5efa Linux \u5185\u6838\u8c03\u8bd5\u73af\u5883 qemu-system-x86_64 -kernel ./arch/x86/boot/bzImage -initrd ../initramfs.cpio.gz -append \"nokaslr console=ttyS0\" -s -S -nographic -kernel ./arch/x86/boot/bzImage\uff1a\u6307\u5b9a\u542f\u7528\u7684\u5185\u6838\u955c\u50cf\uff1b -initrd ../initramfs.cpio.gz\uff1a\u6307\u5b9a\u542f\u52a8\u7684\u5185\u5b58\u6587\u4ef6\u7cfb\u7edf\uff1b -append \"nokaslr console=ttyS0\" \uff1a\u9644\u52a0\u53c2\u6570\uff0c\u5176\u4e2d nokaslr \u53c2\u6570\u5fc5\u987b\u6dfb\u52a0\u8fdb\u6765\uff0c\u9632\u6b62\u5185\u6838\u8d77\u59cb\u5730\u5740\u968f\u673a\u5316\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4 gdb \u65ad\u70b9\u4e0d\u80fd\u547d\u4e2d\uff1b -s \uff1a\u76d1\u542c\u5728 gdb 1234 \u7aef\u53e3\uff1b -S \uff1a\u8868\u793a\u542f\u52a8\u540e\u5c31\u6302\u8d77\uff0c\u7b49\u5f85 gdb \u8fde\u63a5\uff1b -nographic\uff1a\u4e0d\u542f\u52a8\u56fe\u5f62\u754c\u9762\uff0c\u8c03\u8bd5\u4fe1\u606f\u8f93\u51fa\u5230\u7ec8\u7aef\u4e0e\u53c2\u6570 console=ttyS0 \u7ec4\u5408\u4f7f\u7528\uff1b \u542f\u52a8\u4e4b\u540e\u5728\u53e6\u4e00\u4e2a\u7a97\u53e3\u4e2d\uff0c\u8f93\u5165 gdb\uff0c\u5373\u53ef\u5f00\u542f\u8c03\u8bd5\u3002 Kconfig \u548c Makefile Linux \u5185\u6838\u6e90\u7801\u6811\u7684\u6bcf\u4e2a\u76ee\u5f55\u4e0b\u90fd\u6709\u4e24\u4e2a\u6587\u6863 Kconfig \u548c Makefile\u3002\u5206\u5e03\u5230\u5404\u76ee\u5f55\u7684 Kconfig \u6784\u6210\u4e86 \u4e00\u4e2a\u5206\u5e03\u5f0f\u7684\u5185\u6838\u914d\u7f6e\u6570\u636e\u5e93 \uff0c\u6bcf\u4e2a Kconfig \u5206\u522b\u63cf\u8ff0\u4e86\u6240\u5c5e\u76ee\u5f55\u6e90\u6587\u6863\u76f8\u5173\u7684\u5185\u6838\u914d\u7f6e\u83dc\u5355\u3002\u5728\u6267\u884c\u5185\u6838\u914d\u7f6e make menuconfig \u65f6\uff0c\u4ece Kconfig \u4e2d\u8bfb\u51fa\u83dc\u5355\uff0c\u7528\u6237\u9009\u62e9\u540e\u4fdd\u5b58\u5230.config \u7684\u5185\u6838\u914d\u7f6e\u6587\u6863\u4e2d\u3002\u5728\u5185\u6838\u7f16\u8bd1\u65f6\uff0c\u4e3b Makefile \u8c03\u7528\u8fd9\u4e2a.config\uff0c\u5c31\u77e5\u9053\u4e86\u7528\u6237\u7684\u9009\u62e9\u3002\u8fd9\u4e2a\u5185\u5bb9\u8bf4\u660e\u4e86\uff0cKconfig \u5c31\u662f\u5bf9\u5e94\u7740\u5185\u6838\u7684\u6bcf\u7ea7\u914d\u7f6e\u83dc\u5355\u3002 \u5047\u5982\u8981\u60f3\u6dfb\u52a0\u65b0\u7684\u9a71\u52a8\u5230\u5185\u6838\u7684\u6e90\u7801\u4e2d\uff0c\u8981\u4fee\u6539 Kconfig,\u8fd9\u6837\u5c31\u80fd\u591f\u9009\u62e9\u8fd9\u4e2a\u9a71\u52a8\uff0c\u5047\u5982\u60f3\u4f7f\u8fd9\u4e2a\u9a71\u52a8\u88ab\u7f16\u8bd1\uff0c\u5219\u8981\u4fee\u6539 Makefile\u3002\u6dfb\u52a0\u65b0\u7684\u9a71\u52a8\u65f6\u9700\u8981\u4fee\u6539\u7684\u6587\u6863\u6709\u4e24\u79cd\uff08\u5982\u679c\u6dfb\u52a0\u7684\u53ea\u662f\u6587\u4ef6\uff0c\u5219\u53ea\u9700\u4fee\u6539\u5f53\u524d\u5c42 Kconfig \u548c Makefile \u6587\u4ef6\uff1b\u5982\u679c\u6dfb\u52a0\u7684\u662f\u76ee\u5f55\uff0c\u5219\u9700\u4fee\u6539\u5f53\u524d\u5c42\u548c\u76ee\u5f55\u4e0b\u7684\u5171\u4e00\u5bf9 Kconfig \u548c Makefile\uff09Kconfig \u548c Makefile\u3002\u8981\u60f3\u77e5\u9053\u600e\u4e48\u4fee\u6539\u8fd9\u4e24\u79cd\u6587\u6863\uff0c\u5c31\u8981\u77e5\u9053\u4e24\u79cd\u6587\u6863\u7684\u8bed\u6cd5\u7ed3\u6784\u3002","title":"\u7b2c\u5341\u56db\u7bc7 Linux\u5185\u6838\u88c1\u526a\u603b\u7ed3"},{"location":"chapter_14/14_linux_kernel_trimming/#_1","text":"\u672c\u7bc7\u603b\u7ed3 Linux \u5185\u6838\u88c1\u526a\u76f8\u5173\u8fc7\u7a0b\u548c\u6280\u5de7 \u4ee5\u53ca\u624b\u5199\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u6587\u4ef6\u7cfb\u7edf\u5e76\u4e14\u5bfc\u5165\u5185\u6838","title":"\u6982\u8ff0"},{"location":"chapter_14/14_linux_kernel_trimming/#_2","text":"\u8fd1\u5e74\u6765\uff0cLinux \u64cd\u4f5c\u7cfb\u7edf\u5728\u590d\u6742\u6027\u548c\u89c4\u6a21\u4e0a\u90fd\u5728\u589e\u957f\u3002\u7136\u800c\uff0c\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u53ea\u9700\u8981\u4e00\u90e8\u5206 OS \u529f\u80fd\uff0c\u4f17\u591a\u7684\u5e94\u7528\u9700\u6c42\u5bfc\u81f4\u4e86 Linux \u5185\u6838\u7684\u81a8\u80c0\u3002\u64cd\u4f5c\u7cfb\u7edf\u7684\u5185\u6838\u81a8\u80c0\u540c\u6837\u5bfc\u81f4\u4e86\u5b89\u5168\u6027\u9690\u60a3\u3001\u542f\u52a8\u65f6\u95f4\u53d8\u957f\u548c\u5185\u5b58\u4f7f\u7528\u7684\u589e\u52a0\u3002 \u968f\u7740\u670d\u52a1\u5316\u548c\u5fae\u670d\u52a1\u7684\u6d41\u884c\uff0c\u8fdb\u4e00\u6b65\u63d0\u51fa\u4e86\u5bf9\u5185\u6838\u88c1\u526a\u7684\u9700\u6c42\u3002\u5728\u8fd9\u4e9b\u573a\u666f\u4e2d\uff0c\u865a\u62df\u673a\u8fd0\u884c\u5c0f\u578b\u5e94\u7528\u7a0b\u5e8f\uff0c\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5f80\u5f80\u662f\u201c\u5fae\u578b\u201d\u7684\uff0c\u5185\u6838\u5360\u7528\u8f83\u5c0f\uff0c\u4e00\u4e9b\u865a\u62df\u5316\u6280\u672f\u8981\u4e3a\u76ee\u6807\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u6700\u7b80\u5355\u7684 Linux \u5185\u6838\u3002 Linux \u5185\u6838\u88c1\u526a\u6307\u7684\u662f\uff0c\u6839\u636e\u5b9e\u9645\u9700\u6c42\u53bb\u6389\u6216\u8005\u4fdd\u7559\u90e8\u5206\u5185\u6838\u6a21\u5757\u6216\u8005\u51fd\u6570\uff0c\u4ee5\u8fbe\u5230\u4f18\u5316\u7cfb\u7edf\u6027\u80fd\u3001\u51cf\u5c0f\u5185\u5b58\u5360\u7528\u3001\u63d0\u9ad8\u5b89\u5168\u6027\u7b49\u76ee\u7684\u7684\u8fc7\u7a0b\u3002\u901a\u8fc7\u88c1\u526a\u53ef\u4ee5\u4f7f\u5f97\u5185\u6838\u66f4\u52a0\u8f7b\u91cf\u7ea7\uff0c\u66f4\u9002\u5408\u7279\u5b9a\u573a\u666f\u4e0b\u7684\u4f7f\u7528\u3002","title":"\u662f\u4ec0\u4e48"},{"location":"chapter_14/14_linux_kernel_trimming/#_3","text":"1.\u8282\u7701\u7a7a\u95f4\uff1a\u5728\u5d4c\u5165\u5f0f\u8bbe\u5907\u4e2d\uff0c\u5f80\u5f80\u53ea\u6709\u51e0\u5341 MB \u6216\u8005\u51e0\u767e MB \u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7cbe\u7b80\u7248\u7684\u5185\u6838\u53ef\u4ee5\u8282\u7701\u5927\u91cf\u7684\u7a7a\u95f4\u3002 2.\u63d0\u9ad8\u6027\u80fd\uff1a\u53ea\u4fdd\u7559\u5fc5\u8981\u6a21\u5757\u53ef\u4ee5\u51cf\u5c11\u5185\u5b58\u5360\u7528\u548c CPU \u8d1f\u8f7d\uff0c\u5728\u4e00\u4e9b\u8d44\u6e90\u6709\u9650\u7684\u573a\u666f\u4e0b\u53ef\u4ee5\u63d0\u9ad8\u7cfb\u7edf\u6027\u80fd\u3002 3.\u63d0\u9ad8\u5b89\u5168\u6027\uff1a\u88c1\u526a\u6389\u4e0d\u5fc5\u8981\u7684\u6a21\u5757\u53ef\u4ee5\u51cf\u5c11\u7cfb\u7edf\u7684\u653b\u51fb\u9762\uff0c\u63d0\u9ad8\u7cfb\u7edf\u7684\u5b89\u5168\u6027\u3002","title":"\u4e3a\u4ec0\u4e48"},{"location":"chapter_14/14_linux_kernel_trimming/#_4","text":"","title":"\u600e\u4e48\u529e"},{"location":"chapter_14/14_linux_kernel_trimming/#_5","text":"\u88c1\u526a\u5185\u6838\u7684\u8fc7\u7a0b\u4e00\u822c\u5982\u4e0b\uff1a \u5b9a\u4e49\u5185\u6838\u914d\u7f6e\uff1a\u901a\u8fc7\u4f7f\u7528\u300cmake config\u300d\u6216\u300cmake menuconfig\u300d\u547d\u4ee4\u786e\u5b9a\u4f60\u9700\u8981\u7f16\u8bd1\u54ea\u4e9b\u4ee3\u7801\u3002 \u5220\u9664\u4e0d\u5fc5\u8981\u7684\u4ee3\u7801\uff1a\u628a\u4e0d\u9700\u8981\u7684\u4ee3\u7801\u4ece\u5185\u6838\u6e90\u4ee3\u7801\u4e2d\u5220\u9664\u3002 \u7f16\u8bd1\u5185\u6838\uff1a\u4f7f\u7528\u300cmake\u300d\u547d\u4ee4\u7f16\u8bd1\u5185\u6838\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u80fd\u9700\u8981\u51e0\u5206\u949f\u5230\u51e0\u4e2a\u5c0f\u65f6\u4e0d\u7b49\u3002 1.\u4e86\u89e3\u5f53\u524d\u5185\u6838\u914d\u7f6e\uff1a\u8fd0\u884c\u547d\u4ee4\u201cmake menuconfig\u201d\u53ef\u4ee5\u6253\u5f00\u5185\u6838\u914d\u7f6e\u754c\u9762\uff0c\u67e5\u770b\u5f53\u524d\u5185\u6838\u7684\u6240\u6709\u914d\u7f6e\u548c\u6a21\u5757\u4fe1\u606f\u3002 2.\u6839\u636e\u9700\u6c42\u88c1\u526a\uff1a\u6839\u636e\u5b9e\u9645\u9700\u6c42\u9009\u62e9\u9700\u8981\u4fdd\u7559\u6216\u8005\u53bb\u6389\u7684\u5185\u6838\u6a21\u5757\uff0c\u6ce8\u610f\u4fdd\u7559\u5fc5\u8981\u7684\u9a71\u52a8\u7a0b\u5e8f\u548c\u6587\u4ef6\u7cfb\u7edf\u3002 3.\u7f16\u8bd1\u5185\u6838\uff1a\u5b8c\u6210\u914d\u7f6e\u540e\uff0c\u4f7f\u7528\u201cmake\u201d\u547d\u4ee4\u7f16\u8bd1\u5185\u6838\u3002 4.\u5b89\u88c5\u65b0\u5185\u6838\uff1a\u4f7f\u7528\u201cmake install\u201d\u547d\u4ee4\u5b89\u88c5\u65b0\u5185\u6838\u5e76\u66f4\u65b0\u5f15\u5bfc\u7a0b\u5e8f\u3002 5.\u6d4b\u8bd5\u65b0\u5185\u6838\uff1a\u91cd\u542f\u7cfb\u7edf\u5e76\u6d4b\u8bd5\u65b0\u5185\u6838\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\u3002","title":"\u5176\u4e00 \u88c1\u526a\u6b65\u9aa4"},{"location":"chapter_14/14_linux_kernel_trimming/#_6","text":"1.\u53bb\u6389\u4e0d\u5fc5\u8981\u7684\u786c\u4ef6\u652f\u6301\uff1a\u6839\u636e\u5b9e\u9645\u786c\u4ef6\u8bbe\u5907\u60c5\u51b5\uff0c\u53bb\u6389\u5bf9\u5e94\u7684\u786c\u4ef6\u652f\u6301\u6a21\u5757\uff0c\u6bd4\u5982\u6ca1\u6709 USB \u63a5\u53e3\u5c31\u53ef\u4ee5\u53bb\u6389 USB \u652f\u6301\u3002 2.\u53bb\u6389\u4e0d\u5fc5\u8981\u7684\u6587\u4ef6\u7cfb\u7edf\u652f\u6301\uff1a\u6839\u636e\u5b9e\u9645\u4f7f\u7528\u60c5\u51b5\uff0c\u53bb\u6389\u4e0d\u9700\u8981\u7684\u6587\u4ef6\u7cfb\u7edf\u652f\u6301\u6a21\u5757\uff0c\u6bd4\u5982\u6ca1\u6709\u4f7f\u7528 NFS \u5c31\u53ef\u4ee5\u53bb\u6389 NFS \u652f\u6301\u3002 3.\u53bb\u6389\u4e0d\u5fc5\u8981\u7684\u7f51\u7edc\u534f\u8bae\u652f\u6301\uff1a\u6839\u636e\u5b9e\u9645\u7f51\u7edc\u73af\u5883\uff0c\u53bb\u6389\u4e0d\u9700\u8981\u7684\u7f51\u7edc\u534f\u8bae\u652f\u6301\u6a21\u5757\u7ea2\u5e3d\u5b50 linux \u4e0b\u8f7d\uff0c\u6bd4\u5982\u6ca1\u6709\u4f7f\u7528 IPv6 \u5c31\u53ef\u4ee5\u53bb\u6389 IPv6 \u652f\u6301\u3002","title":"\u5176\u4e8c \u5982\u4f55\u9009\u62e9\u4e0d\u9700\u8981\u7684\u4ee3\u7801\u6a21\u5757"},{"location":"chapter_14/14_linux_kernel_trimming/#_7","text":"\u88c1\u526a\u5185\u6838\u9700\u8981\u4e00\u5b9a\u7684\u6280\u5de7\u548c\u7ecf\u9a8c\uff0c\u56e0\u4e3a\u5220\u9664\u7684\u4ee3\u7801\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5185\u6838\u4e0d\u7a33\u5b9a\u6216\u51fa\u73b0\u5176\u4ed6\u95ee\u9898\u3002\u5efa\u8bae\u5728\u88c1\u526a\u5185\u6838\u524d\u5145\u5206\u4e86\u89e3 Linux \u5185\u6838\u7684\u67b6\u6784\u548c\u5b9e\u73b0\u3002 \u88c1\u526a\u540e\u7684\u5185\u6838\u4e5f\u53ef\u80fd\u4e0d\u5b8c\u5168\u652f\u6301\u6240\u6709\u7684\u786c\u4ef6\u548c\u8f6f\u4ef6\uff0c\u56e0\u6b64\u9700\u8981\u8c28\u614e\u64cd\u4f5c\u3002 \u4fdd\u7559\u5fc5\u8981\u7684\u9a71\u52a8\u7a0b\u5e8f\uff1a\u4e00\u4e9b\u786c\u4ef6\u8bbe\u5907\u53ef\u80fd\u9700\u8981\u5bf9\u5e94\u7684\u9a71\u52a8\u7a0b\u5e8f\u624d\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u6240\u4ee5\u5728\u88c1\u526a\u65f6\u8981\u4fdd\u7559\u5fc5\u8981\u7684\u9a71\u52a8\u7a0b\u5e8f\u3002 \u8c28\u614e\u88c1\u526a\uff1a\u88c1\u526a\u6389\u4e0d\u5fc5\u8981\u7684\u6a21\u5757\u53ef\u4ee5\u51cf\u5c0f\u5185\u6838\u4f53\u79ef\uff0c\u4f46\u662f\u8fc7\u5ea6\u88c1\u526a\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7cfb\u7edf\u4e0d\u7a33\u5b9a\u6216\u8005\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002 \u6ce8\u610f\u7248\u672c\u517c\u5bb9\u6027\uff1a\u5185\u6838\u7248\u672c\u4e0d\u540c linux \u5185\u6838\u88c1\u526a\uff0c\u914d\u7f6e\u548c\u7f16\u8bd1\u65b9\u5f0f\u4e5f\u53ef\u80fd\u5b58\u5728\u5dee\u5f02\u3002","title":"\u5176\u4e09 \u6ce8\u610f\u4e8b\u9879"},{"location":"chapter_14/14_linux_kernel_trimming/#_8","text":"\u3010linux kernel\u3011\u8bb0\u4e00\u6b21 linux \u5185\u6838\u88c1\u526a\u603b\u7ed3 linux \u5185\u6838\u88c1\u526a\u53ca\u7f16\u8bd1 \u638c\u63e1 Linux \u5185\u6838\u88c1\u526a\u6280\u5de7\uff0c\u8f7b\u677e\u4f18\u5316\u7cfb\u7edf","title":"\u53c2\u8003"},{"location":"chapter_14/14_linux_kernel_trimming/#_9","text":"","title":"\u624b\u5199\u4e00\u4e2a\u7b80\u5355\u53ef\u7528\u7684\u6587\u4ef6\u7cfb\u7edf\u52a0\u5165\u5185\u6838"},{"location":"chapter_14/14_linux_kernel_trimming/#linux","text":"\u5229\u7528 QEMU+GDB \u642d\u5efa Linux \u5185\u6838\u8c03\u8bd5\u73af\u5883 qemu-system-x86_64 -kernel ./arch/x86/boot/bzImage -initrd ../initramfs.cpio.gz -append \"nokaslr console=ttyS0\" -s -S -nographic -kernel ./arch/x86/boot/bzImage\uff1a\u6307\u5b9a\u542f\u7528\u7684\u5185\u6838\u955c\u50cf\uff1b -initrd ../initramfs.cpio.gz\uff1a\u6307\u5b9a\u542f\u52a8\u7684\u5185\u5b58\u6587\u4ef6\u7cfb\u7edf\uff1b -append \"nokaslr console=ttyS0\" \uff1a\u9644\u52a0\u53c2\u6570\uff0c\u5176\u4e2d nokaslr \u53c2\u6570\u5fc5\u987b\u6dfb\u52a0\u8fdb\u6765\uff0c\u9632\u6b62\u5185\u6838\u8d77\u59cb\u5730\u5740\u968f\u673a\u5316\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4 gdb \u65ad\u70b9\u4e0d\u80fd\u547d\u4e2d\uff1b -s \uff1a\u76d1\u542c\u5728 gdb 1234 \u7aef\u53e3\uff1b -S \uff1a\u8868\u793a\u542f\u52a8\u540e\u5c31\u6302\u8d77\uff0c\u7b49\u5f85 gdb \u8fde\u63a5\uff1b -nographic\uff1a\u4e0d\u542f\u52a8\u56fe\u5f62\u754c\u9762\uff0c\u8c03\u8bd5\u4fe1\u606f\u8f93\u51fa\u5230\u7ec8\u7aef\u4e0e\u53c2\u6570 console=ttyS0 \u7ec4\u5408\u4f7f\u7528\uff1b \u542f\u52a8\u4e4b\u540e\u5728\u53e6\u4e00\u4e2a\u7a97\u53e3\u4e2d\uff0c\u8f93\u5165 gdb\uff0c\u5373\u53ef\u5f00\u542f\u8c03\u8bd5\u3002","title":"Linux \u5185\u6838\u8c03\u8bd5"},{"location":"chapter_14/14_linux_kernel_trimming/#kconfig-makefile","text":"Linux \u5185\u6838\u6e90\u7801\u6811\u7684\u6bcf\u4e2a\u76ee\u5f55\u4e0b\u90fd\u6709\u4e24\u4e2a\u6587\u6863 Kconfig \u548c Makefile\u3002\u5206\u5e03\u5230\u5404\u76ee\u5f55\u7684 Kconfig \u6784\u6210\u4e86 \u4e00\u4e2a\u5206\u5e03\u5f0f\u7684\u5185\u6838\u914d\u7f6e\u6570\u636e\u5e93 \uff0c\u6bcf\u4e2a Kconfig \u5206\u522b\u63cf\u8ff0\u4e86\u6240\u5c5e\u76ee\u5f55\u6e90\u6587\u6863\u76f8\u5173\u7684\u5185\u6838\u914d\u7f6e\u83dc\u5355\u3002\u5728\u6267\u884c\u5185\u6838\u914d\u7f6e make menuconfig \u65f6\uff0c\u4ece Kconfig \u4e2d\u8bfb\u51fa\u83dc\u5355\uff0c\u7528\u6237\u9009\u62e9\u540e\u4fdd\u5b58\u5230.config \u7684\u5185\u6838\u914d\u7f6e\u6587\u6863\u4e2d\u3002\u5728\u5185\u6838\u7f16\u8bd1\u65f6\uff0c\u4e3b Makefile \u8c03\u7528\u8fd9\u4e2a.config\uff0c\u5c31\u77e5\u9053\u4e86\u7528\u6237\u7684\u9009\u62e9\u3002\u8fd9\u4e2a\u5185\u5bb9\u8bf4\u660e\u4e86\uff0cKconfig \u5c31\u662f\u5bf9\u5e94\u7740\u5185\u6838\u7684\u6bcf\u7ea7\u914d\u7f6e\u83dc\u5355\u3002 \u5047\u5982\u8981\u60f3\u6dfb\u52a0\u65b0\u7684\u9a71\u52a8\u5230\u5185\u6838\u7684\u6e90\u7801\u4e2d\uff0c\u8981\u4fee\u6539 Kconfig,\u8fd9\u6837\u5c31\u80fd\u591f\u9009\u62e9\u8fd9\u4e2a\u9a71\u52a8\uff0c\u5047\u5982\u60f3\u4f7f\u8fd9\u4e2a\u9a71\u52a8\u88ab\u7f16\u8bd1\uff0c\u5219\u8981\u4fee\u6539 Makefile\u3002\u6dfb\u52a0\u65b0\u7684\u9a71\u52a8\u65f6\u9700\u8981\u4fee\u6539\u7684\u6587\u6863\u6709\u4e24\u79cd\uff08\u5982\u679c\u6dfb\u52a0\u7684\u53ea\u662f\u6587\u4ef6\uff0c\u5219\u53ea\u9700\u4fee\u6539\u5f53\u524d\u5c42 Kconfig \u548c Makefile \u6587\u4ef6\uff1b\u5982\u679c\u6dfb\u52a0\u7684\u662f\u76ee\u5f55\uff0c\u5219\u9700\u4fee\u6539\u5f53\u524d\u5c42\u548c\u76ee\u5f55\u4e0b\u7684\u5171\u4e00\u5bf9 Kconfig \u548c Makefile\uff09Kconfig \u548c Makefile\u3002\u8981\u60f3\u77e5\u9053\u600e\u4e48\u4fee\u6539\u8fd9\u4e24\u79cd\u6587\u6863\uff0c\u5c31\u8981\u77e5\u9053\u4e24\u79cd\u6587\u6863\u7684\u8bed\u6cd5\u7ed3\u6784\u3002","title":"Kconfig \u548c Makefile"},{"location":"chapter_14/15_imx6ull/","text":"\u6982\u8ff0 \u672c\u7bc7\u8bb0\u5f55\u6240\u6709\u57fa\u4e8e IMX6UL \u7684\u5b9e\u9a8c, \u4ece\u88f8\u673a\u5b9e\u9a8c\u5230 Linux \u5b9e\u9a8c \u53c2\u8003\u6587\u6863 \u9879\u76ee\u7684 BSP \u5de5\u7a0b\u7ba1\u7406 \u95ee\u9898 \u4e3a\u4ec0\u4e48\u4e00\u5b9a\u8981\u5148\u4f7f\u80fd GPIO \u65f6\u949f? \u64cd\u4f5c\u5916\u8bbe\u662f\u901a\u8fc7\u5916\u8bbe\u603b\u7ebf\u6765\u5b9e\u73b0\uff0c\u53ea\u6709\u5916\u8bbe\u603b\u7ebf\u6709\u65f6\u949f\u4e86\u624d\u80fd\u64cd\u4f5c\u5916\u8bbe\u3002 ARM \u67b6\u6784\u4f53\u7cfb\u719f\u6089 \u8981\u719f\u6089 arm \u67b6\u6784\uff0c\u60a8\u9700\u8981\u4e86\u89e3\u4ee5\u4e0b\u5185\u5bb9\uff1a ARM \u5904\u7406\u5668\u67b6\u6784\uff0c\u5305\u62ec\u5176\u4f53\u7cfb\u7ed3\u6784\u3001\u6307\u4ee4\u96c6\u3001\u5bc4\u5b58\u5668\u7b49\u3002 ARM SoC\uff08\u7cfb\u7edf\u7ea7\u82af\u7247\uff09\u7684\u7ec4\u6210\uff0c\u5305\u62ec CPU\u3001\u5185\u5b58\u63a7\u5236\u5668\u3001I/O \u63a7\u5236\u5668\u7b49\u3002 \u5982\u4f55\u5728 ARM \u5904\u7406\u5668\u4e0a\u5f00\u53d1\u8f6f\u4ef6\uff0c\u5305\u62ec\u5982\u4f55\u7f16\u8bd1\u3001\u94fe\u63a5\u3001\u8c03\u8bd5\u7b49\u3002 ARM \u67b6\u6784\u7684\u751f\u6001\u7cfb\u7edf\uff0c\u5305\u62ec RTOS\uff08\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\uff09\u3001\u5f00\u53d1\u5de5\u5177\u94fe\u3001\u7b2c\u4e09\u65b9\u8f6f\u4ef6\u5e93\u7b49\u3002 ARM \u67b6\u6784\u5728\u5404\u79cd\u5e94\u7528\u9886\u57df\u7684\u4f7f\u7528\uff0c\u4f8b\u5982\u667a\u80fd\u624b\u673a\u3001\u7269\u8054\u7f51\u8bbe\u5907\u3001\u5d4c\u5165\u5f0f\u7cfb\u7edf\u7b49\u3002 ARM \u5168\u79f0\u662f\u4ec0\u4e48\u4ee5\u53ca\u6765\u6e90\u662f\u4ec0\u4e48 1985 \u5e74 4 \u6708 26 \u65e5\uff0c\u7b2c\u4e00\u53f0\u539f\u578b\u673a\u5728 Acorn \u7684\u5251\u6865\u529e\u516c\u5ba4\u4e2d\u5f00\u59cb\u8fd0\u884c\u4ee3\u7801\uff0c\u90a3\u65f6\u5b83\u88ab\u79f0\u4e3a\u201dAcorn RISC Machine\u201d\uff0c\u968f\u7740 Acorn \u516c\u53f8\u8f6c\u5411\u8870\u843d\uff0c\u5904\u7406\u5668\u8bbe\u8ba1\u90e8\u95e8\u88ab\u5206\u4e86\u51fa\u6765\uff0c\u7ec4\u6210\u4e86\u4e00\u5bb6\u65b0\u516c\u53f8\uff0c\u6700\u521d\u53eb\u505a Advanced RSIC Machines Ltd\u3002\u73b0\u5728\u516c\u53f8\u548c\u5904\u7406\u5668\u90fd\u7b80\u79f0\u4e3a ARM\u3002 ARM \u516c\u53f8\u5356\u54ea\u4e9b\u4ea7\u54c1 \u4e3b\u8981\u5206\u4e3a\u4e24\u5927\u5757 1 \u5404\u79cd RISC \u5904\u7406\u5668\u5185\u6838 \u662f\u4ec0\u4e48 \u4e3a\u4ec0\u4e48 \u600e\u4e48\u529e \u7cfb\u5217 Cortex-M \u7cfb\u5217 Cortex-R \u7cfb\u5217 Cortex-A \u7cfb\u5217 2 \u51fa\u54c1\u5927\u91cf\u7684\u652f\u6301\u6280\u672f \u8fd9\u4e9b\u5927\u91cf\u7684\u652f\u6301\u6280\u672f\u662f\u5e72\u4ec0\u4e48\u7684\uff1f \u6ee1\u8db3\u82af\u7247\u8bbe\u8ba1\u5e08\u548c\u8f6f\u4ef6\u5f00\u53d1\u8005\u7684\u9700\u8981. \u8fd9\u4e9b\u5927\u91cf\u7684\u652f\u6301\u6280\u672f\u662f\u6db5\u76d6\u54ea\u4e9b\u8303\u56f4? \u7269\u7406 IP \u3001 \u8f6f\u4ef6\u6a21\u578b \u548c \u5f00\u53d1\u5de5\u5177 \uff0c \u56fe\u5f62\u5904\u7406\u5668 \uff0c\u4ee5\u53ca \u5916\u56f4\u8bbe\u5907 ARM Cortex-A7 \u5904\u7406\u5668\u8fd0\u884c\u6a21\u5f0f \u6a21\u5f0f \u8bf4\u660e User(USR) \u7528\u6237\u6a21\u5f0f,\u975e\u7279\u6743\u6a21\u5f0f,\u5927\u90e8\u5206\u7a0b\u5e8f\u8fd0\u884c\u7684\u65f6\u5019\u5904\u4e8e\u6b64\u6a21\u5f0f FIQ \u5feb\u901f\u4e2d\u65ad\u6a21\u5f0f IRQ \u9ed8\u8ba4\u4e2d\u65ad\u6a21\u5f0f Supervisor(SVC) \u8d85\u7ea7\u7ba1\u7406\u5458\u6a21\u5f0f\u5f0f Monitor(MON) \u76d1\u63a7\u6a21\u5f0f Abort(ABT) \u6570\u636e\u8bbf\u95ee\u7ec8\u6b62\u6a21\u5f0f,\u7528\u4e8e\u865a\u62df\u5b58\u50a8\u4ee5\u53ca\u5b58\u50a8\u4fdd\u62a4 Hyp \u8d85\u7ea7\u76d1\u89c6\u6a21\u5f0f Undef(UND) \u672a\u5b9a\u4e49\u6307\u4ee4\u7ec8\u6b62\u6a21\u5f0f System(SYS) \u7cfb\u7edf\u6a21\u5f0f,\u7528\u4e8e\u8fd0\u884c\u7279\u6743\u7ea7\u7684\u64cd\u4f5c\u7cfb\u7edf\u4efb\u52a1 \u9664\u4e86 User(USR)\u6a21\u5f0f\u5916, \u5176\u4ed6 8 \u79cd\u6a21\u5f0f\u90fd\u5c5e\u4e8e\u7279\u6743\u6a21\u5f0f \u963f\u5c14\u6cd5 Linux \u5f00\u53d1\u677f\u5b9e\u9a8c \u963f\u5c14\u6cd5 Linux \u5f00\u53d1\u677f(IMX6U \u5f00\u53d1\u677f\u57fa\u7840\u77e5\u8bc6) 1 \u57fa\u7840 \u9996\u5148, IMX6ULL \u6709\u5bf9\u5e94\u7684\u624b\u518c, \u5206\u4e3a \u53c2\u8003\u624b\u518c \u548c \u6570\u636e\u624b\u518c i.MX6ULL \u6709\u591a\u79cd\u70b9\u706f\u65b9\u5f0f\uff1a 1 \u88f8\u673a\u7cfb\u7edf \uff1a\u6c47\u7f16\u64cd\u4f5c\u5bc4\u5b58\u5668\u70b9\u706f\u3001C \u8bed\u8a00\u64cd\u4f5c\u5bc4\u5b58\u5668\u70b9\u706f 2 \u8dd1 Linux \u7cfb\u7edf \uff1a\u5b57\u7b26\u9a71\u52a8 LED \u70b9\u706f\u3001\u8bbe\u5907\u6811\u9a71\u52a8 LED \u70b9\u706f \u7a76\u5176\u672c\u8d28\uff0c\u6700\u7ec8\u90fd\u662f\u8981\u64cd\u4f5c i.MX6ULL \u7684\u5bc4\u5b58\u5668\u3002\u6bd4\u5982\uff0c\u5728\u63a7\u5236 GPIO \u5f15\u811a\u5b9e\u73b0 LED \u4eae\u706d\u65f6\uff0c\u4f1a\u8fdb\u884c\u7c7b\u4f3c\u5982\u4e0b\u7684\u5bc4\u5b58\u5668\u914d\u7f6e\uff1a /* \u5bc4\u5b58\u5668\u7269\u7406\u5730\u5740 */ #define CCM_CCGR1_BASE (0X020C406C) #define SW_MUX_SNVS_TAMPER3_BASE (0X02290014) #define SW_PAD_SNVS_TAMPER3_BASE (0X02290058) #define GPIO5_DR_BASE (0X020AC000) #define GPIO5_GDIR_BASE (0X020AC004) I.MX6U \u7684 GPIO \u4e00\u5171\u6709 5 \u7ec4:GPIO1\u3001GPIO2\u3001GPIO3\u3001GPIO4 \u548c GPIO5, \u5176\u4e2d\u6bcf\u4e2a\u7ec4\u6700\u591a 32 \u4e2a IO \u53e3. \u5176\u4e2d GPIO1 \u6709 32 \u4e2a IO\uff0cGPIO2 \u6709 22 \u4e2a IO\uff0cGPIO3 \u6709 29 \u4e2a IO\u3001GPIO4 \u6709 29 \u4e2a IO\uff0cGPIO5 \u6700\u5c11\uff0c\u53ea\u6709 12 \u4e2a IO\uff0c\u8fd9\u6837\u4e00\u5171\u6709 124 \u4e2a IO\u3002 \u5176\u4e2d\u7b2c\u4e00\u7ec4 GPIO \u7684\u4e0d\u540c IO \u53e3\u547d\u540d\u65b9\u5f0f\u4e3a GPIO1_IO00, GPIO1_IO01, GPIO1_IO02 \u4ee5\u6b64\u7c7b\u63a8. IOMUXC_SW_MUX_CTL_PAD_XX_XX \u548c IOMUXC_SW_PAD_CTL_PAD_XX_XX \u8fd9\u4e24\u79cd\u5bc4\u5b58\u5668\u90fd\u662f\u914d\u7f6e IO \u7684\uff0c\u6ce8\u610f\u662f IO\uff01\u4e0d\u662f GPIO! GPIO \u662f\u4e00\u4e2a IO \u4f17\u591a\u590d\u7528\u529f\u80fd\u4e2d\u7684\u4e00\u79cd\u3002\u6bd4\u5982 GPIO1_IO03 \u8fd9\u4e2a IO \u53ef\u4ee5\u590d\u7528\u4e3a\uff1aI2C2_SCL\u3001GPT1_CAPTURE1\u3001ANATOP_OTG1_ID\u3001ENET1_REF_CLK\u3001 MQS_RIGHT\u3001 GPIO1_IO03\u3001 ENET1_1588_EVENT0_IN\u3001SRC_SYSTEM_RESET \u548c WDOG3_WDOG_B \u8fd9 9 \u4e2a\u529f\u80fd\uff0cGPIO1_IO03 \u662f\u5176\u4e2d\u7684\u4e00\u79cd. \u60f3\u8981\u628a GPIO1_IO03 \u7528\u4f5c\u54ea\u4e2a\u5916\u8bbe\u5c31\u590d\u7528\u4e3a\u54ea\u4e2a\u5916\u8bbe\u529f\u80fd\u5373\u53ef\u3002\u5982\u679c\u6211\u4eec\u8981\u7528 GPIO1_IO03 \u6765\u70b9\u4e2a\u706f\u3001\u4f5c\u4e3a\u6309\u952e\u8f93\u5165\u5565\u7684\u5c31\u662f\u4f7f\u7528\u5176 GPIO(\u901a\u7528\u8f93\u5165\u8f93\u51fa)\u7684\u529f\u80fd\u3002 IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03 \u5bc4\u5b58\u5668\u548c IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03 \u5bc4\u5b58\u5668\u662f\u7528\u6765\u914d\u7f6e GPIO1_IO03 \u8fd9\u4e2a IO \u53e3. \u6240\u4ee5\u6211\u4eec\u53d1\u73b0\u867d\u7136 IO \u53e3\u7684\u529f\u80fd\u662f\u5927\u4e8e GPIO \u529f\u80fd\u7684\uff0c\u4f46\u662f IO \u53e3\u7684\u540d\u5b57\u8fd8\u662f\u53eb GPIO \u901a\u8fc7 \u591a\u4e2a\u5bc4\u5b58\u5668 \u6765 \u8c03\u8282\u4e00\u4e2a IO\u53e3 \u4f5c\u7528 , \u4e00\u4e2a IO\u53e3 \u5bf9\u5e94\u4e00\u4e2a \u5f15\u811a , \u6bcf\u4e2a \u5f15\u811a \u53ef\u4ee5\u8fde\u63a5\u4e00\u4e2a \u5916\u8bbe \u3002I.MX6U \u6700\u591a 124 \u4e2a IO \u53e3\uff08\u8fd9\u91cc I.MX6U \u5305\u542b I.MX6UL \u548c I.MX6ULL\uff09. \u4e0a\u9762\u8fd9\u5f20\u56fe\u5e94\u8be5\u7406\u89e3\u4e3a IO \u7ed3\u6784\u56fe \uff0c\u800c\u975e GPIO\u7ed3\u6784\u56fe \u5e76\u4e14\u4ece\u4e0a\u56fe\u53ef\u77e5\uff0c\u4e00\u4e2a IO \u53e3 \u4f5c\u4e3a\u6838\u5fc3\u6a21\u578b, \u4e00\u4e2a IO \u53e3 \u7684\u914d\u7f6e\u5206\u4e3a\u591a\u4e2a\u90e8\u5206\uff0c\u81f3\u5c11\u5305\u542b IOMUXC \u90e8\u5206\uff08\u53ef\u4ee5\u7406\u89e3\u4e3a IOMUX Config\uff09\u548c GPIO \u90e8\u5206 2 \u600e\u4e48\u627e\u5230\u5bf9\u5e94 GPIO \u7684\u7269\u7406\u5730\u5740? \u67e5\u770b\u5bf9\u5e94\u7684\u6570\u636e\u624b\u518c\u91cc\u5bf9\u5e94\u7aef\u53e3\u7684\u4ecb\u7ecd, \u5176\u4e2d\u6709 Address, \u5982\u4e0b\u56fe: I.MX6ULL \u7684 IO \u5206\u4e3a\u4e24\u7c7b:SNVS \u57df\u7684\u548c\u901a\u7528\u7684 ----> \u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u5206\u7c7b? \u66f4\u591a I.MX6ULL \u786c\u4ef6\u77e5\u8bc6 3 \u66f4\u591a I.MX6ULL \u786c\u4ef6\u77e5\u8bc6 ---- \u66f4\u591a\u5bc4\u5b58\u5668 IOMUXC_SW_MUX_CTL_PAD** \u548c IOMUXC_SW_PAD_CTL_PAD** \u4e24\u79cd\u5bc4\u5b58\u5668\u7528\u6765\u8bbe\u7f6e IO \u7684\u590d\u7528\u529f\u80fd\u548c IO \u5c5e\u6027 \u914d\u7f6e, \u4e5f\u5c31\u662f\u6211\u4eec\u901a\u8fc7\u8bbe\u7f6e\u4e0a\u9762\u8fd9\u4e24\u79cd\u5bc4\u5b58\u5668\u7684\u4e0d\u540c\u503c\u4e4b\u540e, \u7ec8\u4e8e\u5c06\u67d0\u4e2a IO \u53e3\u8bbe\u7f6e\u4e3a\u4e86 GPIO \u529f\u80fd. \u73b0\u5728\u6211\u4eec\u8981\u63a5\u7740\u6765\u914d\u7f6e GPIO \u7279\u6709\u7684\u5bc4\u5b58\u5668\u4e86. \u5f53 IO \u7528\u4f5c GPIO \u7684\u65f6\u5019\u9700\u8981\u8bbe\u7f6e\u7684\u5bc4\u5b58\u5668\uff0c\u4e00\u5171\u6709\u516b\u4e2a: DR\u3001GDIR\u3001PSR\u3001ICR1\u3001ICR2\u3001EDGE_SEL\u3001IMR \u548c ISR\u3002\u524d\u9762\u6211\u4eec\u8bf4\u4e86 I.MX6U \u4e00\u5171\u6709 GPIO1~GPIO5 \u5171\u4e94\u7ec4 GPIO\uff0c\u6bcf\u7ec4 GPIO \u90fd\u6709\u8fd9 8 \u4e2a\u5bc4\u5b58\u5668\u3002 \u6bd4\u5982\u7b2c\u4e00\u7ec4 GPIO \u7684\u5bc4\u5b58\u5668\u547d\u540d\u65b9\u5f0f\u4e3a GPIO1.DR, \u7b2c\u4e8c\u7ec4 GPIO \u7684\u5bc4\u5b58\u5668\u547d\u540d\u65b9\u5f0f\u4e3a GPIO2.DR \u7531\u4e8e\u6bcf\u7ec4 GPIO \u6700\u591a 32 \u4e2a IO \u53e3, \u56e0\u6b64\u76f8\u5e94\u5bc4\u5b58\u5668\u5bf9\u5e94\u7684\u4f4d\u6570\u4e5f\u4e3a 32 \u4f4d, \u6bcf\u4e00\u4f4d\u63a7\u5236\u5bf9\u5e94\u7684 IO \u53e3. \u6bd4\u5982 GPIO2.DR \u662f 32 \u4f4d\u5bc4\u5b58\u5668\u3001GPIO1.PSR \u5bc4\u5b58\u5668\u4e5f\u662f 32 \u4f4d 3.1 \u5404\u4e2a\u5bc4\u5b58\u5668\u542b\u4e49 DR: \u6570\u636e\u5bc4\u5b58\u5668. \u6bd4\u5982\u65b9\u5411\u5bc4\u5b58\u5668\u8bbe\u7f6e\u4e3a\u8f93\u51fa, \u90a3\u4e48\u6b64\u65f6\u5411\u6570\u636e\u5bc4\u5b58\u5668\u8f93\u51fa 1 \u5373\u53ef\u5411\u5bf9\u5e94 IO \u53e3\u8f93\u51fa\u9ad8\u7535\u5e73, \u8f93\u51fa 0 \u5373\u53ef\u5411\u5bf9\u5e94 IO \u53e3\u8f93\u51fa\u4f4e\u7535\u5e73.(\u5176\u5b9e\u5c31\u6bd4\u8f83\u597d\u63a7\u5236 LED \u706f\u8fd9\u79cd\u7b80\u5355\u8bbe\u5907\u7684\u5f00\u6216\u8005\u5173) \u6bd4\u5982\u65b9\u5411\u5bc4\u5b58\u5668\u8bbe\u7f6e\u4e3a\u8f93\u5165, \u90a3\u4e48\u6b64\u65f6\u5c31\u662f\u901a\u8fc7\u8bfb\u53d6\u5bc4\u5b58\u5668\u7684\u503c\u83b7\u53d6\u5bf9\u5e94 IO \u53e3\u5bf9\u5e94\u7684\u7535\u5e73\u503c(\u662f\u9ad8\u7535\u5e73\u8fd8\u662f\u4f4e\u7535\u5e73) GDIR: \u65b9\u5411\u5bc4\u5b58\u5668, \u8bbe\u7f6e\u67d0\u4e2a IO \u53e3\u4e3a\u8f93\u51fa\u7535\u5e73\u6216\u8005\u8f93\u5165\u7535\u5e73. PSR: \u72b6\u6001\u5bc4\u5b58\u5668. \u7528\u4e8e\u83b7\u53d6\u5bf9\u5e94 IO \u53e3\u7684\u5f53\u524d\u72b6\u6001(\u5f53\u524d\u662f\u9ad8\u7535\u5e73\u6216\u8005\u4f4e\u7535\u5e73) ICR1 \u548c ICR2: \u8fd9\u4e24\u4e2a\u5bc4\u5b58\u5668\uff0c\u90fd\u662f\u4e2d\u65ad\u63a7\u5236\u5bc4\u5b58\u5668\uff0cICR1 \u7528\u4e8e\u914d\u7f6e\u4f4e 16 \u4e2a IO, ICR2 \u7528\u4e8e\u914d\u7f6e\u9ad8 16 \u4e2a IO, \u4e5f\u5c31\u662f\u6bcf 2 \u4f4d\u914d\u7f6e\u4e00\u4e2a IO. \u6bd4\u5982\u67d0\u4e2a\u5916\u8bbe\uff08\u6bd4\u5982\u952e\u76d8\uff09\u53ef\u4ee5\u4e0a\u5347\u6cbf\u89e6\u53d1\u4e2d\u65ad. IMR: \u662f\u4e2d\u65ad\u5c4f\u853d\u5bc4\u5b58\u5668. IMR \u5bc4\u5b58\u5668\u4e5f\u662f\u4e00\u4e2a IO \u5bf9\u5e94\u4e00\u4e2a\u4f4d\uff0cIMR \u5bc4\u5b58\u5668\u7528\u6765\u8bbe\u7f6e IO \u7684\u4e2d\u65ad\u7981\u6b62\u548c\u4f7f\u80fd\uff0c\u5982\u679c\u4f7f\u80fd\u67d0\u4e2a IO \u7684\u4e2d\u65ad\uff0c\u90a3\u4e48\u8bbe\u7f6e\u76f8\u5e94\u7684\u4f4d\u4e3a 1 \u5373\u53ef\uff0c\u53cd\u4e4b\uff0c\u5982\u679c\u8981\u7981\u6b62\u4e2d\u65ad\uff0c\u90a3\u4e48\u5c31\u8bbe \u7f6e\u76f8\u5e94\u7684\u4f4d\u4e3a 0 \u5373\u53ef\u3002\u4f8b\u5982\uff0c\u8981\u4f7f\u80fd GPIO1_IO00 \u7684\u4e2d\u65ad\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u8bbe\u7f6e GPIO1.MIR=1 \u5373 \u53ef\u3002 ISR: \u4e2d\u65ad\u72b6\u6001\u5bc4\u5b58\u5668. EDGE_SEL: \u662f\u8fb9\u6cbf\u9009\u62e9\u5bc4\u5b58\u5668. EDGE_SEL \u5bc4\u5b58\u5668\u7528\u6765\u8bbe\u7f6e\u8fb9\u6cbf\u4e2d\u65ad\uff0c\u8fd9\u4e2a\u5bc4\u5b58\u5668\u4f1a\u8986\u76d6 ICR1 \u548c ICR2 \u7684\u8bbe\u7f6e\uff0c\u540c\u6837\u662f\u4e00\u4e2a IO \u5bf9\u5e94\u4e00\u4e2a\u4f4d\u3002\u5982\u679c\u76f8\u5e94\u7684\u4f4d\u88ab\u7f6e 1\uff0c\u90a3\u4e48\u5c31\u76f8\u5f53\u4e0e\u8bbe\u7f6e\u4e86\u5bf9\u5e94\u7684 IO \u662f\u4e0a\u5347\u6cbf\u548c\u4e0b\u964d \u6cbf(\u53cc\u8fb9\u6cbf)\u89e6\u53d1\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u8bbe\u7f6e GPIO1.EDGE_SEL=1\uff0c\u90a3\u4e48\u5c31\u8868\u793a GPIO1_IO01 \u662f\u53cc\u8fb9\u6cbf\u89e6 \u53d1\u4e2d\u65ad\uff0c\u65e0\u8bba GFPIO1_ICR1 \u7684\u8bbe\u7f6e\u4e3a\u591a\u5c11\uff0c\u90fd\u662f\u53cc\u8fb9\u6cbf\u89e6\u53d1\u3002 3.2 CPU \u5730\u5740\u8303\u56f4 \u6bd4\u5982 CPU \u5185\u90e8\u5bc4\u5b58\u5668\u5730\u5740\uff0cIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03 \u5bc4\u5b58\u5668\u5730\u5740\u4e3a 0x020e0068\uff0cIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03 \u5bc4\u5b58\u5668\u5730\u5740\u4e3a 0x020e02f4 \u6bd4\u5982 DDR \u5185\u5b58\u5730\u5740: I.MX6U-ALPHA \u5f00\u53d1 \u677f \u4e0a \u7684 DDR3 \u5730 \u5740 \u8303 \u56f4 \u662f 0x80000000~0xA0000000(512MB) \u6216 \u8005 0x80000000~0x90000000(256MB)\uff0c \u8bf4\u660e IMX6ULL \u5f00\u53d1\u677f CPU \u7684\u7269\u7406\u5185\u5b58\u5730\u5740\u7a7a\u95f4\u662f IO \u8bbe\u5907\u548c\u5185\u5b58\u8bbe\u5907\u7edf\u4e00\u7f16\u5740\u7684 \u6c47\u7f16\u8bed\u8a00\u70b9\u4eae LED \u706f I.MX6U-ALPHA \u5f00\u53d1\u677f \uff0c\u5728\u5f00\u53d1\u677f\u4e2d\u4e2d\u6709\u4e00\u4e2a LED \u706f\uff0c\u5982\u56fe\u6240\u793a\uff1a \u706f\u901a\u8fc7 3.3V \u4f9b\u7535\uff0c\u7ecf\u8fc7 510 \u6b27\u7684\u9650\u6d41\u7535\u963b\u548c\u63a7\u5236\u53e3 LED0 \u76f8\u8fde\uff0c\u901a\u8fc7\u641c\u7d22\u67e5\u8be2\uff0c\u6211\u4eec\u53d1\u73b0 LED0 \u8282\u70b9\u548c GPIO_3 \u76f8\u8fde(\u5e94\u8be5\u662f GPIO1_3) \u8981\u5bf9 IO \u8fdb\u884c\u521d\u59cb\u5316\uff0c\u9700\u8981\u4e0b\u9762\u7684\u6d41\u7a0b\uff1a \u4f7f\u80fd IO \u65f6\u949f // \u8fd9\u4e00\u6b65\u7684\u4f5c\u7528\u6709\u70b9\u7c7b\u4f3c\u628a\u5bf9\u5e94 IO \u53e3\u542f\u52a8\u65f6\u949f\u4e2d\u65ad\u6216\u8005\u65f6\u949f\u8109\u51b2,\u8ba9\u5bf9\u5e94 IO \u53e3\u6d3b\u52a8\u8d77\u6765. ---> \u7406\u89e3 \u8bbe\u7f6e IO \u590d\u7528\uff0c\u5c06\u5176\u8bbe\u7f6e\u4e3a GPIO // ---> \u8fd9\u4e00\u6b65\u80fd\u591f\u7406\u89e3, \u7ecf\u8fc7\u914d\u7f6e\u628a\u67d0\u4e2a IO \u4fee\u6539\u914d\u7f6e\u3001\u914d\u7f6e\u4e3a GPIO \u53e3 \u914d\u7f6e IO \u7684\u7535\u6c14\u5c5e\u6027 // ---> \u8fd9\u4e00\u6b65\u8fd8\u4e0d\u5b8c\u5168\u7406\u89e3, \u53ea\u662f\u7406\u89e3\u4e86\u538b\u6446\u7387 \u914d\u7f6e GPIO \u7684\u7279\u6709\u5c5e\u6027\uff0c\u6bd4\u5982\u8bbe\u7f6e\u65b9\u5411\u5bc4\u5b58\u5668 // ---> \u8fd9\u4e00\u6b65\u7406\u89e3\u4e86, \u6bd4\u5982\u6211\u8fd9\u4e2a IO \u53e3\u5230\u5e95\u662f\u4f5c\u4e3a\u8f93\u5165\u8fd8\u662f\u8f93\u51fa\uff0c\u8981\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u5b9a \u4f7f\u7528 GPIO \uff0c\u6bd4\u5982\u8f93\u51fa\u9ad8\u4f4e\u7535\u5e73 // ---> \u7406\u89e3\u4e86, \u5176\u5b9e\u5c31\u662f\u5f80\u76f8\u5e94\u5bc4\u5b58\u5668\u5199 0 \u6216\u8005 1\uff0c0 \u5173\u95ed LED \u706f\uff0c1 \u70b9\u4eae LED \u706f \u5bf9\u4e8e IMX6ULL \u6765\u8bf4\uff0c\u6d41\u7a0b\u57fa\u672c\u662f\u4e00\u6837\u7684\uff0c\u6211\u4eec\u4e00\u6b65\u4e00\u6b65\u6765\u8bbe\u7f6e \u4e00 \u4f7f\u80fd\u65f6\u949f \u4e8c IO \u53e3\u590d\u7528\u8bbe\u7f6e \u8fd9\u91cc\u8bf4\u7684\u662f\u67d0\u4e2a IO \u53e3\u7684\u590d\u7528\u8bbe\u7f6e \u590d\u7528\u8bbe\u7f6e\u7684\u7ba1\u7406\u5c5e\u4e8e IOMUX Controller \u7ba1\u7406\uff0c\u67e5\u8be2\u82af\u7247\u624b\u518c\uff0c\u6211\u4eec\u8981\u8bbe\u7f6e\u7684\u662f GPIO1 \u7684 IO3,\u8981\u8bbe\u7f6e\u7684\u662f IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03(SW_MUX_CTL_PAD_GPIO1_IO03 SW MUX Control Register ) \u4e0b\u9762\u6709\u4e2a\u8868\u662f\u5bf9\u5176\u8fdb\u884c\u8bf4\u660e\u7684 led.s \u4ee3\u7801\u5982\u4e0b: global _start @\u5168\u5c40\u53d8\u91cf _start: /*\u7b2c\u4e00\u6b65 \u65f6\u80fd\u6240\u6709\u5916\u8bbe\u65f6\u949f*/ ldr r0, =0x020c4068 @CCGR0 ldr r1, =0xffffffff @\u8981\u5411CCGR0\u5199\u5165\u7684\u6570\u636e str r1, [r0] @\u5c060xffffffff\u5199\u5165\u5230CCGR0 ldr r0, =0x020c406c @CCGR1 str r1, [r0] ldr r0, =0x020c4070 @CCGR2 str r1, [r0] ldr r0, =0x020c4074 @CCGR3 str r1, [r0] ldr r0, =0x020c4078 @CCGR4 str r1, [r0] ldr r0, =0x020c407c @CCGR5 str r1, [r0] ldr r0, =0x020c4080 @CCGR6 str r1, [r0] /* \u7b2c\u4e8c\u6b65: \u914d\u7f6e GPIO1_IO03 PIN\u7684\u590d\u7528\u4e3aGPIO * \u4e5f\u5c31\u662f\u8bbe\u7f6eIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03=5 * IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03\u5bc4\u5b58\u5668\u5730\u5740\u4e3a0x020e0068, \u67e5\u8be2\u82af\u7247\u624b\u518c\u5f97\u77e5 */ ldr r0, =0x020e0068 @IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03, \u8fd9\u4e2a\u5730\u5740\u5c31\u662f\u4e0a\u9762\u6570\u636e\u624b\u518c\u91cc\u62ff\u5230\u5230\u5bc4\u5b58\u5668\u5730\u5740 ldr r1, =0x5 @\u8981\u5411IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03\u5199\u5165\u7684\u6570\u636e, \u628aMUX_MODE\u90e8\u5206\u8bbe\u7f6e\u4e3a0101\u5c31\u8868\u793a\u628a\u8fd9\u4e2a\u53e3\u5b50\u8bbe\u7f6e\u4e3aGPIO\u6a21\u5f0f str r1, [r0] @\u5c065\u5199\u5165\u5230IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03\u4e2d /* \u914d\u7f6eGPIO1_IO03\u7684\u7535\u6c14\u5c5e\u6027 \u4e5f\u5c31\u662f\u5bc4\u5b58\u5668\uff1a * IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03 * IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03\u5bc4\u5b58\u5668\u5730\u5740\u4e3a0x020e02f4 */ /* \u8fd9\u91cc\u662fbit0\u5230bit16\uff0c\u4e00\u517117\u4f4d\u8981\u8bbe\u7f6e @ *bit 16:0 HYS\u5173\u95ed @ HYS\uff0c\u7528\u6765\u4f7f\u80fd\u8fdf\u6ede\u6bd4\u8f83\u5668\uff0c\u5f53 IO\u4f5c\u4e3a\u8f93\u5165\u529f\u80fd\u7684\u65f6\u5019\u6709\u6548\uff0c\u7528\u4e8e\u8bbe\u7f6e\u8f93\u5165\u63a5\u6536\u5668\u7684\u65bd\u5bc6\u7279\u89e6\u53d1\u5668\u662f\u5426\u4f7f\u80fd\u3002 @ \u660e\u663e\u6211\u4eec\u8fd9\u91cc\u7684IO\u662f\u4f5c\u4e3a\u8f93\u51fa\u7684\uff0c\u56e0\u6b64\u8fd9\u91cc\u8981\u8bbe\u7f6e\u4e3a0 @ *bit [15:14]: 00 \u9ed8\u8ba4\u4e0b\u62c9 @ PUS\uff0c\u7528\u6765\u8bbe\u7f6e\u4e0a\u4e0b\u62c9\u7535\u963b\u7684\uff0c\u4e00\u5171\u6709\u56db\u79cd\u9009\u9879\u53ef\u4ee5\u9009\u3002\u9ed8\u8ba4\u662f00\uff0c100K\u4e0b\u62c9\u3002\u8fd9\u4e2a\u5c31\u6682\u65f6\u4e0d\u7ba1\u4e86\uff0c\u9ed8\u8ba4\u8bbe\u7f6e\u5427\u3002\u4f46\u662f\u8981\u641e\u6e05\u695a\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4e5f\u8981\u5176\u4ed6\u8bbe\u7f6e\u3002 @ *bit [13]: 0 kepper\u529f\u80fd @ \u5f53IO\u4f5c\u4e3a\u8f93\u5165\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u4f4d\u7528\u6765\u8bbe\u7f6e IO\u4f7f\u7528\u4e0a\u4e0b\u62c9\u8fd8\u662f\u72b6\u6001\u4fdd\u6301\u5668\u3002\u5f53\u4e3a 0\u7684\u65f6\u5019\u4f7f\u7528\u72b6\u6001\u4fdd\u6301\u5668\uff0c\u5f53\u4e3a1\u7684\u65f6\u5019\u4f7f\u7528\u4e0a\u4e0b\u62c9\u3002\u72b6\u6001\u4fdd\u6301\u5668\u5728IO \u4f5c\u4e3a\u8f93\u5165\u7684\u65f6\u5019\u624d\u6709\u7528\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u5f53\u5916\u90e8\u7535\u8def\u65ad\u7535\u4ee5\u540e\u6b64 IO \u53e3\u53ef\u4ee5\u4fdd\u6301\u4f4f\u4ee5\u524d\u7684\u72b6\u6001\u3002 @ \u54b1\u4eec\u8fd9\u91cc\u8fd9\u4e2aIO\u53e3\u662f\u4f5c\u4e3a\u8f93\u51fa\uff0c\u56e0\u6b64\u8fd9\u91cc\u4e5f\u662f\u9ed8\u8ba40. @ *bit [12]: 1 pull/keeper\u4f7f\u80fd @\u6b64\u4f4d\u7528\u6765\u4f7f\u80fd\u6216\u8005\u7981\u6b62\u4e0a\u4e0b\u62c9/\u72b6\u6001\u4fdd\u6301\u5668\u529f\u80fd\uff0c\u4e3a0\u65f6\u7981\u6b62\u4e0a\u4e0b\u62c9/\u72b6\u6001\u4fdd\u6301\u5668\uff0c\u4e3a 1\u65f6\u4f7f\u80fd\u4e0a\u4e0b\u62c9\u548c\u72b6\u6001\u4fdd\u6301\u5668\u3002 @ *bit [11]: 0 \u5173\u95ed\u5f00\u8def\u8f93\u51fa @\u5f53 IO\u4f5c\u4e3a\u8f93\u51fa\u7684\u65f6\u5019\uff0c\u6b64\u4f4d\u7528\u6765\u7981\u6b62\u6216\u8005\u4f7f\u80fd\u5f00\u8def\u8f93\u51fa\uff0c\u6b64\u4f4d\u4e3a0\u7684\u65f6\u5019\u7981\u6b62\u5f00\u8def\u8f93\u51fa\uff0c\u5f53\u6b64\u4f4d\u4e3a1\u7684\u65f6\u5019\u5c31\u4f7f\u80fd\u5f00\u8def\u8f93\u51fa\u529f\u80fd\u3002 @\u8fd9\u91cc\u660e\u663e\u5e94\u8be5\u4f7f\u80fd\u5f00\u8def\u8f93\u51fa\u3002\u90a3\u4e48\u5f00\u8def\u8f93\u51fa\u5177\u4f53\u662f\u4ec0\u4e48\u5462\uff1f\u7b80\u5355\u770b\u4e00\u53e5\u8bdd\uff08\u8fd9\u91cc\u4e0d\u4e00\u5b9a\u5bf9\uff09\uff1a @ \u6f0f\u6781\u5f00\u8def\u8f93\u51fa\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u9700\u8981\u5916\u63a5\u4e0a\u62c9\u7535\u963b\uff0c\u624d\u80fd\u8f93\u51fa\u9ad8\u7535\u5e73\u3002 @ \u96c6\u7535\u6781\u5f00\u8def\u8f93\u51fa\u662f\u4ee5\u8f93\u51fa\u7535\u8def\u7684\u6676\u4f53\u7ba1\u53d1\u5c04\u6781\u4f5c\u4e3a\u516c\u5171\u7aef\uff0c\u5e76\u4e14\u96c6\u7535\u6781\u60ac\u7a7a\u7684\u8f93\u51fa\u7535\u8def\u3002 @ *bit [10-8]: 000 \u7a7a @ \u8fd9\u4e2abit [10-8]\u662f\u4fdd\u7559\u7684\uff0c\u4e0d\u53ef\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u4e3a0 @ *bit [7:6]: 10 \u901f\u5ea6100Mhz @ \u5bf9\u5e94\u56fe8.1.4.2\u4e2d\u7684SPEED\uff0c\u5f53IO\u7528\u4f5c\u8f93\u51fa\u7684\u65f6\u5019\uff0c\u6b64\u4f4d\u7528\u6765\u8bbe\u7f6e IO\u901f\u5ea6\uff0c\u8bbe\u7f6e\u5982\u88688.1.4.2\u6240\u793a\u3002 @ 10\u4ee3\u8868100Mhz\uff0c\u6700\u9ad8\u662f11\uff0c11\u4ee3\u8868200Mhz @ *bit [5:3]: 110 R0/6\u9a71\u52a8\u80fd\u529b @\u5bf9\u5e94\u56fe 8.1.4.2 \u4e2d\u7684 DSE\uff0c\u5f53 IO \u7528\u4f5c\u8f93\u51fa\u7684\u65f6\u5019\u7528\u6765\u8bbe\u7f6e IO \u7684\u9a71\u52a8\u80fd\u529b\uff0c\u603b\u5171\u67098\u4e2a\u53ef\u9009\u9009\u9879\uff0c\u5982\u8868 8.1.4.3\u6240\u793a @\u5047\u8bbeR0\u662f260\u6b27\u59c6\uff0cR0/6\u5c31\u662f43.3\u6b27\u59c6 @\u611f\u89c9\u8fd9\u4e2a\u662f\u8bbe\u7f6e\u7535\u963b\u5927\u5c0f\u7684 @ *bit [2:1]: 00 \u7a7a @\u8fd9\u4e2abit [2-1]\u662f\u4fdd\u7559\u7684\uff0c\u4e0d\u53ef\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u4e3a0 @ *bit [0]: 0 \u4f4e\u8f6c\u6362\u7387 @\u5bf9\u5e94\u56fe 8.1.4.2\u4e2d\u7684SRE\uff0c\u8bbe\u7f6e\u538b\u6446\u7387\uff0c\u5f53\u6b64\u4f4d\u4e3a 0\u7684\u65f6\u5019\u662f\u4f4e\u538b\u6446\u7387\uff0c\u5f53\u4e3a 1\u7684\u65f6\u5019\u662f\u9ad8\u538b\u6446\u7387\u3002 @LED\u706f\u4e5f\u7b97\u4e00\u4e2a\u4f4e\u4fd7\u8bbe\u5907\u5427\uff0c\u5c31\u8bbe\u7f6e\u4e3a0 @ 0 00 0 1 0 000 10 110 00 0 = 0x10B0 */ ldr r0, =0x020e02f4 ldr r1, =0x10b0 str r1, [r0] /* \u8bbe\u7f6eGPIO * \u8bbe\u7f6eGPIO_GDIR\u5bc4\u5b58\u5668\uff0c\u8bbe\u7f6eGPIO1_IO03\u4e3a\u8f93\u51fa * GPIO1_GDIR\u5bc4\u5b58\u5668\u5730\u5740\u4e3a0x0209c004\uff0c\u8bbe\u7f6eGPIO1_GDIR\u7684bit3\u4e3a1 * \u4e5f\u5c31\u662f\u8bbe\u7f6eGPIO1_IO03\u4e3a\u8f93\u51fa */ ldr r0, =0x0209c004 ldr r1, =0x08 str r1, [r0] /* \u6253\u5f00LED\uff0c\u4e5f\u5c31\u662f\u8bbe\u7f6eGPIO_IO03\u4e3a0 * GPIO1_DR\u5bc4\u5b58\u5668\u5730\u5740\u4e3a0x0209c000 */ ldr r0, =0x0209c000 ldr r1,=0x0 /*\u5982\u679c\u8fd9\u91cc\u662fldr r1,=0x8, \u5219\u8868\u793a\u8be5\u5bc4\u5b58\u5668\u7b2c\u4e09\u4f4d\u7f6e\u4e3a1\uff0c\u5219\u4f1a\u5173\u95edLED\u706f*/ str r1, [r0] loop: b loop @\u901a\u8fc7 b \u6307\u4ee4\uff0cCPU \u91cd\u590d\u4e0d\u65ad\u7684\u8df3\u5230 loop \u51fd\u6570\u6267\u884c\uff0c\u8fdb\u5165\u4e00\u4e2a\u6b7b\u5faa\u73af\u3002 b \u662f\u8df3\u8f6c ldr\uff1a load register str: set register \u5230\u8fd9\u91cc\u518d\u603b\u7ed3\u4e0b: \u4e00\u4e2a \u5177\u4f53 IO \u53e3 \uff0c\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u5bc4\u5b58\u5668(\u6bd4\u5982 IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03 \u548c IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03 )\u8bbe\u7f6e\u4e0d\u540c\u7684\u503c\u6765\u63a7\u5236 IO \u53e3\u7684\u4f5c\u7528\uff0c \u53ef\u4ee5\u4f5c\u4e3a GPIO \u53e3 \uff0c \u53ef\u4ee5\u4f5c\u4e3a UART \u53e3\u6216\u8005\u5176\u4ed6\u53e3 \u4e09 IO \u53e3\u7535\u5668\u5c5e\u6027\u8bbe\u7f6e IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03\u5bc4\u5b58\u5668\u5730\u5740\u4e3a0x020e02f4 \u5bc4\u5b58\u5668 IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03 \u662f\u7528\u6765\u914d\u7f6e GPIO1_IO03 \u53e3\u7684\u7535\u5668\u5c5e\u6027\u7684\uff0c\u7535\u5668\u5c5e\u6027\u5305\u62ec\u901f\u5ea6\u8bbe\u7f6e\u3001\u9a71\u52a8\u80fd\u529b\u8bbe\u7f6e\u3001\u538b\u6446\u7387\u8bbe\u7f6e\u7b49\u7b49. \u6bd4\u5982\u67d0\u4e2a IO \u53e3\u9996\u5148\u901a\u8fc7 IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03 \u5bc4\u5b58\u5668\u88ab\u4ece\u9ed8\u8ba4\u8bbe\u7f6e\u6539\u6210\u4e86 GPIO \u53e3\uff0c\u7136\u540e\u53c8\u53ef\u4ee5\u901a\u8fc7 IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03 \u5bc4\u5b58\u5668\u8bbe\u7f6e\u7535\u5668\u5c5e\u6027\uff0c\u6bd4\u5982\u8fd9\u4e2a IO \u53e3\u5b9e\u9645\u8fde\u7684\u662f EMC \u5219\u8981\u628a\u538b\u6446\u7387\u8bbe\u7f6e\u7684\u4f4e\u4e00\u4e9b\uff0c\u6bd4\u5982\u8fd9\u4e2a IO \u5b9e\u9645\u8fde\u7684\u662f\u9ad8\u901f\u901a\u4fe1\u8bbe\u5907\u5219\u8981\u628a\u538b\u6446\u7387\u8bbe\u7f6e\u9ad8\u4e00\u4e9b. \u56db \u8bbe\u7f6e\u4e3a GPIO \u53e3\u540e, GPIO \u7279\u6709\u914d\u7f6e(GPIO \u7279\u6709\u5bc4\u5b58\u5668\u914d\u7f6e) \u7ecf\u8fc7\u4e0a\u9762\u7684\u7efc\u5408\u77e5\u8bc6\uff0c\u6211\u4eec\u77e5\u9053\u4e86 \u8981\u8c03\u6574 GPIO1_IO03 \u53e3 \u4e3a\u8f93\u51fa\u65b9\u5411\uff08\u8981\u8bbe\u7f6e GPIO1 \u7ec4 \u7684 GPIO1.GPIR \u5bc4\u5b58\u5668 \uff09 \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u5199\u4e3a: \u8c03\u6574 IO1 \u7ec4-IO03 \u53e3 \u7684\u65b9\u5411\u4e3a\u8f93\u51fa,\u8bbe\u7f6e IO1 \u7ec4 \u7684 IO1.GPIR \u5bc4\u5b58\u5668 \u771f\u6b63\u8f93\u51fa\u7684\u65f6\u5019\u662f\u8bbe\u7f6e IO1 \u7ec4- IO03 \u53e3 \u503c\u4e3a 0, \u672c\u8d28\u662f\u8bbe\u7f6e IO1 \u7ec4 \u7684 IO1.DR \u5bc4\u5b58\u5668 \u63a5\u4e0b\u6765\u627e\u5230\u5bf9\u5e94\u5bc4\u5b58\u5668\u7684\u503c GPIO1.DR \u5bc4\u5b58\u5668\u5730\u5740\u4e3a 0x0209_C000 , \u5176\u4e2d\u63a7\u5236 IO03 \u7684\u662f\u8be5\u5bc4\u5b58\u5668\u7684\u7b2c 3 \u4f4d GPIO1.GPDR \u5bc4\u5b58\u5668\u5730\u5740\u4e3a 0x0209_C004 , , \u5176\u4e2d\u63a7\u5236 IO03 \u7684\u662f\u8be5\u5bc4\u5b58\u5668\u7684\u7b2c 3 \u4f4d C \u8bed\u8a00\u70b9\u4eae LED \u706f \u57fa\u7840\u77e5\u8bc6 ARM \u6bcf\u79cd\u5de5\u4f5c\u6a21\u5f0f\u9664 R0~R15 \u5171 16 \u4e2a\u5bc4\u5b58\u5668\u5916\uff0c\u8fd8\u6709\u7b2c 17 \u4e2a\u5bc4\u5b58\u5668 CPSR,\u53eb\u505a \u5f53\u524d\u7a0b\u5e8f\u72b6\u6001\u5bc4\u5b58\u5668 R0 ~ R7 \u662f\u6240\u6709\u6a21\u5f0f\u901a\u7528\u7684\u5bc4\u5b58\u5668 CPSR \u5bc4\u5b58\u5668\uff0c\u662f\u4e00\u4e2a 32 \u4f4d\u5bc4\u5b58\u5668,\u6bcf\u4e2a\u4f4d\u7684\u542b\u4e49\u5982\u4e0b\u56fe\uff1a \u5206\u6210\u4e86 4 \u90e8\u5206\uff1a 1\uff0c\u6761\u4ef6\u6807\u5fd7\u4f4d N(Negative), Z(Zero), C(Carry), V(Verflow)\u7edf\u79f0\u4e3a\u6761\u4ef6\u6807\u5fd7\u4f4d\u3002ARM \u6307\u4ee4\u53ef\u4ee5\u6839\u636e CPSR \u4e2d\u7684\u8fd9\u4e9b\u6761\u4ef6\u6807\u5fd7\u4f4d\u6765\u9009\u62e9\u6027\u7684\u6267\u884c\u3002 2\uff0cQ \u6807\u5fd7\u4f4d ARM v5 \u7684 E \u7cfb\u5217\u5904\u7406\u5668\u4e2d\uff0cCPSR \u7684 bit[27]\u79f0\u4e3a Q \u6807\u5fd7\u4f4d\u3002\u4e3b\u8981\u7528\u4e8e\u6307\u793a\u589e\u5f3a\u7684 DSP \u6307\u4ee4\u662f\u5426\u53d1\u751f\u4e86\u6ea2\u51fa\u3002 3\uff0c\u4fdd\u7559\u4f4d \u7528\u4e8e\u5c06\u6765 ARM \u7248\u672c\u7684\u6269\u5c55\u3002 4, \u63a7\u5236\u4f4d I, F, T \u4ee5\u53ca M[4:0]\u7edf\u79f0\u4e3a\u63a7\u5236\u4f4d\u3002\u5f53\u5f02\u5e38\u4e2d\u65ad\u53d1\u751f\u65f6\uff0c\u8fd9\u4e9b\u4f4d\u53d1\u751f\u53d8\u5316\u3002\u5728\u7279\u6743\u7ea7\u7684\u5904\u7406\u5668\u6a21\u5f0f\u4e0b\uff0c\u8f6f\u4ef6\u53ef\u4ee5\u4fee\u6539\u8fd9\u4e9b\u63a7\u5236\u4f4d\u3002 \u4e0b\u8868\u793a\u63a7\u5236\u4f4d M[4:0]\u7684\u542b\u4e49\uff1a \u5176\u4e2d M 4:0 \u5c31\u662f\u8bbe\u7f6e\u5904\u7406\u5668\u8fd0\u884c\u6a21\u5f0f\u7684,\u6bd4\u5982 USR \u6a21\u5f0f\u5207\u6362\u5230 SVC \u6a21\u5f0f\uff08\u8d85\u7ea7\u7ba1\u7406\u5458\u6a21\u5f0f\uff09 \u4ece\u4e0a\u9762\u7684\u8868\u683c\u5f97\u77e5\uff0c\u628a M[4:0]\u5207\u6362\u5230 10011 \u5c31\u8fdb\u5165 SVC \u6a21\u5f0f \u72b6\u6001\u5bc4\u5b58\u5668\u8bbf\u95ee\u6307\u4ee4\u4ec5\u6709\u4e24\u6761\uff1a MRS: \u72b6\u6001\u5bc4\u5b58\u5668\u5230\u901a\u7528\u5bc4\u5b58\u5668\u7684\u4f20\u9001\u6307\u4ee4\u3002\u6bd4\u5982 mrs r0, cpsr \uff0c\u5c06 cpsr \u5bc4\u5b58\u5668\u7684\u503c\u8bfb\u5230\u901a\u7528\u5bc4\u5b58\u5668 r0. MSR: \u901a\u7528\u5bc4\u5b58\u5668\u5230\u72b6\u6001\u5bc4\u5b58\u5668\u7684\u4f20\u9001\u6307\u4ee4\u3002\u6bd4\u5982 msr cpsr, r0 \uff0c\u5c06\u901a\u7528\u5bc4\u5b58\u5668 r0 \u7684\u503c\u5199\u5230 cpsr. \u53c2\u8003 ARM \u6c47\u7f16\uff1aMRS \u548c MSR \u6307\u4ee4 Makefile \u8bb2\u89e3 \u672c\u6559\u7a0b\u6240\u6709\u7684\u88f8\u673a\u4f8b\u7a0b\u90fd\u662f\u70e7\u5199\u5230 SD \u5361\u4e2d\uff0c\u4e0a\u7535\u4ee5\u540e I.MX6U \u7684\u5185\u90e8 boot rom \u7a0b\u5e8f\u4f1a\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u62f7\u8d1d\u5230\u94fe\u63a5\u5730\u5740\u5904\uff0c\u8fd9\u4e2a\u94fe\u63a5\u5730\u5740\u53ef\u4ee5\u5728 I.MX6U \u7684\u5185\u90e8 128KB RAM \u4e2d(0X900000~0X91FFFF)\uff0c\u4e5f\u53ef\u4ee5\u5728\u5916\u90e8\u7684 DDR \u4e2d\u3002\u672c\u6559\u7a0b\u6240\u6709\u88f8\u673a\u4f8b\u7a0b\u7684\u94fe\u63a5\u5730\u5740\u90fd\u5728 DDR \u4e2d\uff0c\u94fe\u63a5\u8d77\u59cb\u5730\u5740\u4e3a 0X87800000\u3002 \u8bf4\u660e\u8fd9\u662f\u963f\u5c14\u6cd5\u5f00\u53d1\u677f\u7684\u4e00\u4e2a\u89c4\u5b9a\u3002 \u5f00\u53d1\u677f ROM \u5185\u7a0b\u5e8f\u542f\u52a8\u540e\uff0c\u81ea\u52a8\u5c31\u628a PC \u6307\u5411\u8be5\u5730\u5740 \u5176\u4ed6\u95ee\u9898 \u95ee\u9898\u4e09 \u5916\u8bbe\u65f6\u949f\u4f7f\u80fd I.MX6U \u6bcf\u4e2a\u5916\u8bbe\u7684\u65f6\u949f\u90fd\u53ef\u4ee5\u72ec\u7acb\u7684\u4f7f\u80fd\u6216\u7981\u6b62\uff0c\u8fd9\u6837\u53ef\u4ee5\u5173\u95ed\u6389\u4e0d\u4f7f\u7528\u7684\u5916\u8bbe\u65f6\u949f\uff0c\u8d77\u5230 \u7701\u7535\u7684\u76ee\u7684\u3002 CCM \u6709 CCM_CCGR0~CCM_CCGR6 \u8fd9 7 \u4e2a\u5bc4\u5b58\u5668\uff0c\u8fd9 7 \u4e2a\u5bc4\u5b58\u5668\u63a7\u5236\u7740 I.MX6U \u7684\u6240\u6709\u5916\u8bbe\u65f6\u949f\u5f00\u5173 \u6839\u636e CCM_CCGR0 \u5bc4\u5b58\u5668\u7684\u4f7f\u7528\u8bf4\u660e, \u6211\u4eec\u53d1\u73b0\u5982\u679c\u6211\u4eec\u8981\u6253\u5f00 GPIO2 \u7684\u5916\u8bbe\u65f6\u949f\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u8bbe\u7f6e CCM_CCGR0 \u7684 bit31 \u548c bit30 \u90fd\u4e3a 1 \u5373\u53ef\uff0c\u4e5f\u5c31\u662f CCM_CCGR0=3 << 30\u3002\u53cd\u4e4b\uff0c\u5982\u679c\u8981\u5173\u95ed GPIO2 \u7684\u5916\u8bbe\u65f6\u949f\uff0c\u90a3\u5c31\u8bbe\u7f6e CCM_CCGR0 \u7684 bit31 \u548c bit30 \u90fd\u4e3a 0 \u5373\u53ef\u3002 \u95ee\u9898\u56db \u914d\u7f6e GPIO1_IO03 \u7684 IO \u5c5e\u6027 \u8fd9\u4e48\u591a IO\u5c5e\u6027 \u662f\u5e72\u561b\u7684? \u95ee\u9898\u4e94 I.MX6ULL ROM \u7a0b\u5e8f\u542f\u52a8\u4e4b\u540e, \u5176\u6267\u884c\u5730\u5740 \u76ee\u524d\u6839\u636e\u6587\u6863 8.4.15 \u6765\u770b, \u542f\u52a8\u4e4b\u540e ROM \u7a0b\u5e8f\u5c31\u4f1a\u6267\u884c 0X87800000 \u8fd9\u4e2a\u5730\u5740\u7684\u4ee3\u7801.","title":"\u7b2c\u5341\u4e94\u7bc7 IMX6UL\u5b9e\u9a8c\u8bb0\u5f55"},{"location":"chapter_14/15_imx6ull/#_1","text":"\u672c\u7bc7\u8bb0\u5f55\u6240\u6709\u57fa\u4e8e IMX6UL \u7684\u5b9e\u9a8c, \u4ece\u88f8\u673a\u5b9e\u9a8c\u5230 Linux \u5b9e\u9a8c","title":"\u6982\u8ff0"},{"location":"chapter_14/15_imx6ull/#_2","text":"\u9879\u76ee\u7684 BSP \u5de5\u7a0b\u7ba1\u7406","title":"\u53c2\u8003\u6587\u6863"},{"location":"chapter_14/15_imx6ull/#_3","text":"","title":"\u95ee\u9898"},{"location":"chapter_14/15_imx6ull/#gpio","text":"\u64cd\u4f5c\u5916\u8bbe\u662f\u901a\u8fc7\u5916\u8bbe\u603b\u7ebf\u6765\u5b9e\u73b0\uff0c\u53ea\u6709\u5916\u8bbe\u603b\u7ebf\u6709\u65f6\u949f\u4e86\u624d\u80fd\u64cd\u4f5c\u5916\u8bbe\u3002","title":"\u4e3a\u4ec0\u4e48\u4e00\u5b9a\u8981\u5148\u4f7f\u80fd GPIO \u65f6\u949f?"},{"location":"chapter_14/15_imx6ull/#arm","text":"\u8981\u719f\u6089 arm \u67b6\u6784\uff0c\u60a8\u9700\u8981\u4e86\u89e3\u4ee5\u4e0b\u5185\u5bb9\uff1a ARM \u5904\u7406\u5668\u67b6\u6784\uff0c\u5305\u62ec\u5176\u4f53\u7cfb\u7ed3\u6784\u3001\u6307\u4ee4\u96c6\u3001\u5bc4\u5b58\u5668\u7b49\u3002 ARM SoC\uff08\u7cfb\u7edf\u7ea7\u82af\u7247\uff09\u7684\u7ec4\u6210\uff0c\u5305\u62ec CPU\u3001\u5185\u5b58\u63a7\u5236\u5668\u3001I/O \u63a7\u5236\u5668\u7b49\u3002 \u5982\u4f55\u5728 ARM \u5904\u7406\u5668\u4e0a\u5f00\u53d1\u8f6f\u4ef6\uff0c\u5305\u62ec\u5982\u4f55\u7f16\u8bd1\u3001\u94fe\u63a5\u3001\u8c03\u8bd5\u7b49\u3002 ARM \u67b6\u6784\u7684\u751f\u6001\u7cfb\u7edf\uff0c\u5305\u62ec RTOS\uff08\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\uff09\u3001\u5f00\u53d1\u5de5\u5177\u94fe\u3001\u7b2c\u4e09\u65b9\u8f6f\u4ef6\u5e93\u7b49\u3002 ARM \u67b6\u6784\u5728\u5404\u79cd\u5e94\u7528\u9886\u57df\u7684\u4f7f\u7528\uff0c\u4f8b\u5982\u667a\u80fd\u624b\u673a\u3001\u7269\u8054\u7f51\u8bbe\u5907\u3001\u5d4c\u5165\u5f0f\u7cfb\u7edf\u7b49\u3002","title":"ARM \u67b6\u6784\u4f53\u7cfb\u719f\u6089"},{"location":"chapter_14/15_imx6ull/#arm_1","text":"1985 \u5e74 4 \u6708 26 \u65e5\uff0c\u7b2c\u4e00\u53f0\u539f\u578b\u673a\u5728 Acorn \u7684\u5251\u6865\u529e\u516c\u5ba4\u4e2d\u5f00\u59cb\u8fd0\u884c\u4ee3\u7801\uff0c\u90a3\u65f6\u5b83\u88ab\u79f0\u4e3a\u201dAcorn RISC Machine\u201d\uff0c\u968f\u7740 Acorn \u516c\u53f8\u8f6c\u5411\u8870\u843d\uff0c\u5904\u7406\u5668\u8bbe\u8ba1\u90e8\u95e8\u88ab\u5206\u4e86\u51fa\u6765\uff0c\u7ec4\u6210\u4e86\u4e00\u5bb6\u65b0\u516c\u53f8\uff0c\u6700\u521d\u53eb\u505a Advanced RSIC Machines Ltd\u3002\u73b0\u5728\u516c\u53f8\u548c\u5904\u7406\u5668\u90fd\u7b80\u79f0\u4e3a ARM\u3002","title":"ARM \u5168\u79f0\u662f\u4ec0\u4e48\u4ee5\u53ca\u6765\u6e90\u662f\u4ec0\u4e48"},{"location":"chapter_14/15_imx6ull/#arm_2","text":"\u4e3b\u8981\u5206\u4e3a\u4e24\u5927\u5757","title":"ARM \u516c\u53f8\u5356\u54ea\u4e9b\u4ea7\u54c1"},{"location":"chapter_14/15_imx6ull/#1-risc","text":"\u662f\u4ec0\u4e48 \u4e3a\u4ec0\u4e48 \u600e\u4e48\u529e \u7cfb\u5217 Cortex-M \u7cfb\u5217 Cortex-R \u7cfb\u5217 Cortex-A \u7cfb\u5217","title":"1 \u5404\u79cd RISC \u5904\u7406\u5668\u5185\u6838"},{"location":"chapter_14/15_imx6ull/#2","text":"\u8fd9\u4e9b\u5927\u91cf\u7684\u652f\u6301\u6280\u672f\u662f\u5e72\u4ec0\u4e48\u7684\uff1f \u6ee1\u8db3\u82af\u7247\u8bbe\u8ba1\u5e08\u548c\u8f6f\u4ef6\u5f00\u53d1\u8005\u7684\u9700\u8981. \u8fd9\u4e9b\u5927\u91cf\u7684\u652f\u6301\u6280\u672f\u662f\u6db5\u76d6\u54ea\u4e9b\u8303\u56f4? \u7269\u7406 IP \u3001 \u8f6f\u4ef6\u6a21\u578b \u548c \u5f00\u53d1\u5de5\u5177 \uff0c \u56fe\u5f62\u5904\u7406\u5668 \uff0c\u4ee5\u53ca \u5916\u56f4\u8bbe\u5907","title":"2 \u51fa\u54c1\u5927\u91cf\u7684\u652f\u6301\u6280\u672f"},{"location":"chapter_14/15_imx6ull/#arm-cortex-a7","text":"\u6a21\u5f0f \u8bf4\u660e User(USR) \u7528\u6237\u6a21\u5f0f,\u975e\u7279\u6743\u6a21\u5f0f,\u5927\u90e8\u5206\u7a0b\u5e8f\u8fd0\u884c\u7684\u65f6\u5019\u5904\u4e8e\u6b64\u6a21\u5f0f FIQ \u5feb\u901f\u4e2d\u65ad\u6a21\u5f0f IRQ \u9ed8\u8ba4\u4e2d\u65ad\u6a21\u5f0f Supervisor(SVC) \u8d85\u7ea7\u7ba1\u7406\u5458\u6a21\u5f0f\u5f0f Monitor(MON) \u76d1\u63a7\u6a21\u5f0f Abort(ABT) \u6570\u636e\u8bbf\u95ee\u7ec8\u6b62\u6a21\u5f0f,\u7528\u4e8e\u865a\u62df\u5b58\u50a8\u4ee5\u53ca\u5b58\u50a8\u4fdd\u62a4 Hyp \u8d85\u7ea7\u76d1\u89c6\u6a21\u5f0f Undef(UND) \u672a\u5b9a\u4e49\u6307\u4ee4\u7ec8\u6b62\u6a21\u5f0f System(SYS) \u7cfb\u7edf\u6a21\u5f0f,\u7528\u4e8e\u8fd0\u884c\u7279\u6743\u7ea7\u7684\u64cd\u4f5c\u7cfb\u7edf\u4efb\u52a1 \u9664\u4e86 User(USR)\u6a21\u5f0f\u5916, \u5176\u4ed6 8 \u79cd\u6a21\u5f0f\u90fd\u5c5e\u4e8e\u7279\u6743\u6a21\u5f0f","title":"ARM Cortex-A7 \u5904\u7406\u5668\u8fd0\u884c\u6a21\u5f0f"},{"location":"chapter_14/15_imx6ull/#linux","text":"","title":"\u963f\u5c14\u6cd5 Linux \u5f00\u53d1\u677f\u5b9e\u9a8c"},{"location":"chapter_14/15_imx6ull/#linux-imx6u","text":"","title":"\u963f\u5c14\u6cd5 Linux \u5f00\u53d1\u677f(IMX6U \u5f00\u53d1\u677f\u57fa\u7840\u77e5\u8bc6)"},{"location":"chapter_14/15_imx6ull/#1","text":"\u9996\u5148, IMX6ULL \u6709\u5bf9\u5e94\u7684\u624b\u518c, \u5206\u4e3a \u53c2\u8003\u624b\u518c \u548c \u6570\u636e\u624b\u518c i.MX6ULL \u6709\u591a\u79cd\u70b9\u706f\u65b9\u5f0f\uff1a 1 \u88f8\u673a\u7cfb\u7edf \uff1a\u6c47\u7f16\u64cd\u4f5c\u5bc4\u5b58\u5668\u70b9\u706f\u3001C \u8bed\u8a00\u64cd\u4f5c\u5bc4\u5b58\u5668\u70b9\u706f 2 \u8dd1 Linux \u7cfb\u7edf \uff1a\u5b57\u7b26\u9a71\u52a8 LED \u70b9\u706f\u3001\u8bbe\u5907\u6811\u9a71\u52a8 LED \u70b9\u706f \u7a76\u5176\u672c\u8d28\uff0c\u6700\u7ec8\u90fd\u662f\u8981\u64cd\u4f5c i.MX6ULL \u7684\u5bc4\u5b58\u5668\u3002\u6bd4\u5982\uff0c\u5728\u63a7\u5236 GPIO \u5f15\u811a\u5b9e\u73b0 LED \u4eae\u706d\u65f6\uff0c\u4f1a\u8fdb\u884c\u7c7b\u4f3c\u5982\u4e0b\u7684\u5bc4\u5b58\u5668\u914d\u7f6e\uff1a /* \u5bc4\u5b58\u5668\u7269\u7406\u5730\u5740 */ #define CCM_CCGR1_BASE (0X020C406C) #define SW_MUX_SNVS_TAMPER3_BASE (0X02290014) #define SW_PAD_SNVS_TAMPER3_BASE (0X02290058) #define GPIO5_DR_BASE (0X020AC000) #define GPIO5_GDIR_BASE (0X020AC004) I.MX6U \u7684 GPIO \u4e00\u5171\u6709 5 \u7ec4:GPIO1\u3001GPIO2\u3001GPIO3\u3001GPIO4 \u548c GPIO5, \u5176\u4e2d\u6bcf\u4e2a\u7ec4\u6700\u591a 32 \u4e2a IO \u53e3. \u5176\u4e2d GPIO1 \u6709 32 \u4e2a IO\uff0cGPIO2 \u6709 22 \u4e2a IO\uff0cGPIO3 \u6709 29 \u4e2a IO\u3001GPIO4 \u6709 29 \u4e2a IO\uff0cGPIO5 \u6700\u5c11\uff0c\u53ea\u6709 12 \u4e2a IO\uff0c\u8fd9\u6837\u4e00\u5171\u6709 124 \u4e2a IO\u3002 \u5176\u4e2d\u7b2c\u4e00\u7ec4 GPIO \u7684\u4e0d\u540c IO \u53e3\u547d\u540d\u65b9\u5f0f\u4e3a GPIO1_IO00, GPIO1_IO01, GPIO1_IO02 \u4ee5\u6b64\u7c7b\u63a8. IOMUXC_SW_MUX_CTL_PAD_XX_XX \u548c IOMUXC_SW_PAD_CTL_PAD_XX_XX \u8fd9\u4e24\u79cd\u5bc4\u5b58\u5668\u90fd\u662f\u914d\u7f6e IO \u7684\uff0c\u6ce8\u610f\u662f IO\uff01\u4e0d\u662f GPIO! GPIO \u662f\u4e00\u4e2a IO \u4f17\u591a\u590d\u7528\u529f\u80fd\u4e2d\u7684\u4e00\u79cd\u3002\u6bd4\u5982 GPIO1_IO03 \u8fd9\u4e2a IO \u53ef\u4ee5\u590d\u7528\u4e3a\uff1aI2C2_SCL\u3001GPT1_CAPTURE1\u3001ANATOP_OTG1_ID\u3001ENET1_REF_CLK\u3001 MQS_RIGHT\u3001 GPIO1_IO03\u3001 ENET1_1588_EVENT0_IN\u3001SRC_SYSTEM_RESET \u548c WDOG3_WDOG_B \u8fd9 9 \u4e2a\u529f\u80fd\uff0cGPIO1_IO03 \u662f\u5176\u4e2d\u7684\u4e00\u79cd. \u60f3\u8981\u628a GPIO1_IO03 \u7528\u4f5c\u54ea\u4e2a\u5916\u8bbe\u5c31\u590d\u7528\u4e3a\u54ea\u4e2a\u5916\u8bbe\u529f\u80fd\u5373\u53ef\u3002\u5982\u679c\u6211\u4eec\u8981\u7528 GPIO1_IO03 \u6765\u70b9\u4e2a\u706f\u3001\u4f5c\u4e3a\u6309\u952e\u8f93\u5165\u5565\u7684\u5c31\u662f\u4f7f\u7528\u5176 GPIO(\u901a\u7528\u8f93\u5165\u8f93\u51fa)\u7684\u529f\u80fd\u3002 IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03 \u5bc4\u5b58\u5668\u548c IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03 \u5bc4\u5b58\u5668\u662f\u7528\u6765\u914d\u7f6e GPIO1_IO03 \u8fd9\u4e2a IO \u53e3. \u6240\u4ee5\u6211\u4eec\u53d1\u73b0\u867d\u7136 IO \u53e3\u7684\u529f\u80fd\u662f\u5927\u4e8e GPIO \u529f\u80fd\u7684\uff0c\u4f46\u662f IO \u53e3\u7684\u540d\u5b57\u8fd8\u662f\u53eb GPIO \u901a\u8fc7 \u591a\u4e2a\u5bc4\u5b58\u5668 \u6765 \u8c03\u8282\u4e00\u4e2a IO\u53e3 \u4f5c\u7528 , \u4e00\u4e2a IO\u53e3 \u5bf9\u5e94\u4e00\u4e2a \u5f15\u811a , \u6bcf\u4e2a \u5f15\u811a \u53ef\u4ee5\u8fde\u63a5\u4e00\u4e2a \u5916\u8bbe \u3002I.MX6U \u6700\u591a 124 \u4e2a IO \u53e3\uff08\u8fd9\u91cc I.MX6U \u5305\u542b I.MX6UL \u548c I.MX6ULL\uff09. \u4e0a\u9762\u8fd9\u5f20\u56fe\u5e94\u8be5\u7406\u89e3\u4e3a IO \u7ed3\u6784\u56fe \uff0c\u800c\u975e GPIO\u7ed3\u6784\u56fe \u5e76\u4e14\u4ece\u4e0a\u56fe\u53ef\u77e5\uff0c\u4e00\u4e2a IO \u53e3 \u4f5c\u4e3a\u6838\u5fc3\u6a21\u578b, \u4e00\u4e2a IO \u53e3 \u7684\u914d\u7f6e\u5206\u4e3a\u591a\u4e2a\u90e8\u5206\uff0c\u81f3\u5c11\u5305\u542b IOMUXC \u90e8\u5206\uff08\u53ef\u4ee5\u7406\u89e3\u4e3a IOMUX Config\uff09\u548c GPIO \u90e8\u5206","title":"1 \u57fa\u7840"},{"location":"chapter_14/15_imx6ull/#2-gpio","text":"\u67e5\u770b\u5bf9\u5e94\u7684\u6570\u636e\u624b\u518c\u91cc\u5bf9\u5e94\u7aef\u53e3\u7684\u4ecb\u7ecd, \u5176\u4e2d\u6709 Address, \u5982\u4e0b\u56fe: I.MX6ULL \u7684 IO \u5206\u4e3a\u4e24\u7c7b:SNVS \u57df\u7684\u548c\u901a\u7528\u7684 ----> \u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u5206\u7c7b? \u66f4\u591a I.MX6ULL \u786c\u4ef6\u77e5\u8bc6","title":"2 \u600e\u4e48\u627e\u5230\u5bf9\u5e94 GPIO \u7684\u7269\u7406\u5730\u5740?"},{"location":"chapter_14/15_imx6ull/#3-imx6ull-","text":"IOMUXC_SW_MUX_CTL_PAD** \u548c IOMUXC_SW_PAD_CTL_PAD** \u4e24\u79cd\u5bc4\u5b58\u5668\u7528\u6765\u8bbe\u7f6e IO \u7684\u590d\u7528\u529f\u80fd\u548c IO \u5c5e\u6027 \u914d\u7f6e, \u4e5f\u5c31\u662f\u6211\u4eec\u901a\u8fc7\u8bbe\u7f6e\u4e0a\u9762\u8fd9\u4e24\u79cd\u5bc4\u5b58\u5668\u7684\u4e0d\u540c\u503c\u4e4b\u540e, \u7ec8\u4e8e\u5c06\u67d0\u4e2a IO \u53e3\u8bbe\u7f6e\u4e3a\u4e86 GPIO \u529f\u80fd. \u73b0\u5728\u6211\u4eec\u8981\u63a5\u7740\u6765\u914d\u7f6e GPIO \u7279\u6709\u7684\u5bc4\u5b58\u5668\u4e86. \u5f53 IO \u7528\u4f5c GPIO \u7684\u65f6\u5019\u9700\u8981\u8bbe\u7f6e\u7684\u5bc4\u5b58\u5668\uff0c\u4e00\u5171\u6709\u516b\u4e2a: DR\u3001GDIR\u3001PSR\u3001ICR1\u3001ICR2\u3001EDGE_SEL\u3001IMR \u548c ISR\u3002\u524d\u9762\u6211\u4eec\u8bf4\u4e86 I.MX6U \u4e00\u5171\u6709 GPIO1~GPIO5 \u5171\u4e94\u7ec4 GPIO\uff0c\u6bcf\u7ec4 GPIO \u90fd\u6709\u8fd9 8 \u4e2a\u5bc4\u5b58\u5668\u3002 \u6bd4\u5982\u7b2c\u4e00\u7ec4 GPIO \u7684\u5bc4\u5b58\u5668\u547d\u540d\u65b9\u5f0f\u4e3a GPIO1.DR, \u7b2c\u4e8c\u7ec4 GPIO \u7684\u5bc4\u5b58\u5668\u547d\u540d\u65b9\u5f0f\u4e3a GPIO2.DR \u7531\u4e8e\u6bcf\u7ec4 GPIO \u6700\u591a 32 \u4e2a IO \u53e3, \u56e0\u6b64\u76f8\u5e94\u5bc4\u5b58\u5668\u5bf9\u5e94\u7684\u4f4d\u6570\u4e5f\u4e3a 32 \u4f4d, \u6bcf\u4e00\u4f4d\u63a7\u5236\u5bf9\u5e94\u7684 IO \u53e3. \u6bd4\u5982 GPIO2.DR \u662f 32 \u4f4d\u5bc4\u5b58\u5668\u3001GPIO1.PSR \u5bc4\u5b58\u5668\u4e5f\u662f 32 \u4f4d","title":"3 \u66f4\u591a I.MX6ULL \u786c\u4ef6\u77e5\u8bc6 ---- \u66f4\u591a\u5bc4\u5b58\u5668"},{"location":"chapter_14/15_imx6ull/#31","text":"DR: \u6570\u636e\u5bc4\u5b58\u5668. \u6bd4\u5982\u65b9\u5411\u5bc4\u5b58\u5668\u8bbe\u7f6e\u4e3a\u8f93\u51fa, \u90a3\u4e48\u6b64\u65f6\u5411\u6570\u636e\u5bc4\u5b58\u5668\u8f93\u51fa 1 \u5373\u53ef\u5411\u5bf9\u5e94 IO \u53e3\u8f93\u51fa\u9ad8\u7535\u5e73, \u8f93\u51fa 0 \u5373\u53ef\u5411\u5bf9\u5e94 IO \u53e3\u8f93\u51fa\u4f4e\u7535\u5e73.(\u5176\u5b9e\u5c31\u6bd4\u8f83\u597d\u63a7\u5236 LED \u706f\u8fd9\u79cd\u7b80\u5355\u8bbe\u5907\u7684\u5f00\u6216\u8005\u5173) \u6bd4\u5982\u65b9\u5411\u5bc4\u5b58\u5668\u8bbe\u7f6e\u4e3a\u8f93\u5165, \u90a3\u4e48\u6b64\u65f6\u5c31\u662f\u901a\u8fc7\u8bfb\u53d6\u5bc4\u5b58\u5668\u7684\u503c\u83b7\u53d6\u5bf9\u5e94 IO \u53e3\u5bf9\u5e94\u7684\u7535\u5e73\u503c(\u662f\u9ad8\u7535\u5e73\u8fd8\u662f\u4f4e\u7535\u5e73) GDIR: \u65b9\u5411\u5bc4\u5b58\u5668, \u8bbe\u7f6e\u67d0\u4e2a IO \u53e3\u4e3a\u8f93\u51fa\u7535\u5e73\u6216\u8005\u8f93\u5165\u7535\u5e73. PSR: \u72b6\u6001\u5bc4\u5b58\u5668. \u7528\u4e8e\u83b7\u53d6\u5bf9\u5e94 IO \u53e3\u7684\u5f53\u524d\u72b6\u6001(\u5f53\u524d\u662f\u9ad8\u7535\u5e73\u6216\u8005\u4f4e\u7535\u5e73) ICR1 \u548c ICR2: \u8fd9\u4e24\u4e2a\u5bc4\u5b58\u5668\uff0c\u90fd\u662f\u4e2d\u65ad\u63a7\u5236\u5bc4\u5b58\u5668\uff0cICR1 \u7528\u4e8e\u914d\u7f6e\u4f4e 16 \u4e2a IO, ICR2 \u7528\u4e8e\u914d\u7f6e\u9ad8 16 \u4e2a IO, \u4e5f\u5c31\u662f\u6bcf 2 \u4f4d\u914d\u7f6e\u4e00\u4e2a IO. \u6bd4\u5982\u67d0\u4e2a\u5916\u8bbe\uff08\u6bd4\u5982\u952e\u76d8\uff09\u53ef\u4ee5\u4e0a\u5347\u6cbf\u89e6\u53d1\u4e2d\u65ad. IMR: \u662f\u4e2d\u65ad\u5c4f\u853d\u5bc4\u5b58\u5668. IMR \u5bc4\u5b58\u5668\u4e5f\u662f\u4e00\u4e2a IO \u5bf9\u5e94\u4e00\u4e2a\u4f4d\uff0cIMR \u5bc4\u5b58\u5668\u7528\u6765\u8bbe\u7f6e IO \u7684\u4e2d\u65ad\u7981\u6b62\u548c\u4f7f\u80fd\uff0c\u5982\u679c\u4f7f\u80fd\u67d0\u4e2a IO \u7684\u4e2d\u65ad\uff0c\u90a3\u4e48\u8bbe\u7f6e\u76f8\u5e94\u7684\u4f4d\u4e3a 1 \u5373\u53ef\uff0c\u53cd\u4e4b\uff0c\u5982\u679c\u8981\u7981\u6b62\u4e2d\u65ad\uff0c\u90a3\u4e48\u5c31\u8bbe \u7f6e\u76f8\u5e94\u7684\u4f4d\u4e3a 0 \u5373\u53ef\u3002\u4f8b\u5982\uff0c\u8981\u4f7f\u80fd GPIO1_IO00 \u7684\u4e2d\u65ad\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u8bbe\u7f6e GPIO1.MIR=1 \u5373 \u53ef\u3002 ISR: \u4e2d\u65ad\u72b6\u6001\u5bc4\u5b58\u5668. EDGE_SEL: \u662f\u8fb9\u6cbf\u9009\u62e9\u5bc4\u5b58\u5668. EDGE_SEL \u5bc4\u5b58\u5668\u7528\u6765\u8bbe\u7f6e\u8fb9\u6cbf\u4e2d\u65ad\uff0c\u8fd9\u4e2a\u5bc4\u5b58\u5668\u4f1a\u8986\u76d6 ICR1 \u548c ICR2 \u7684\u8bbe\u7f6e\uff0c\u540c\u6837\u662f\u4e00\u4e2a IO \u5bf9\u5e94\u4e00\u4e2a\u4f4d\u3002\u5982\u679c\u76f8\u5e94\u7684\u4f4d\u88ab\u7f6e 1\uff0c\u90a3\u4e48\u5c31\u76f8\u5f53\u4e0e\u8bbe\u7f6e\u4e86\u5bf9\u5e94\u7684 IO \u662f\u4e0a\u5347\u6cbf\u548c\u4e0b\u964d \u6cbf(\u53cc\u8fb9\u6cbf)\u89e6\u53d1\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u8bbe\u7f6e GPIO1.EDGE_SEL=1\uff0c\u90a3\u4e48\u5c31\u8868\u793a GPIO1_IO01 \u662f\u53cc\u8fb9\u6cbf\u89e6 \u53d1\u4e2d\u65ad\uff0c\u65e0\u8bba GFPIO1_ICR1 \u7684\u8bbe\u7f6e\u4e3a\u591a\u5c11\uff0c\u90fd\u662f\u53cc\u8fb9\u6cbf\u89e6\u53d1\u3002","title":"3.1 \u5404\u4e2a\u5bc4\u5b58\u5668\u542b\u4e49"},{"location":"chapter_14/15_imx6ull/#32-cpu","text":"\u6bd4\u5982 CPU \u5185\u90e8\u5bc4\u5b58\u5668\u5730\u5740\uff0cIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03 \u5bc4\u5b58\u5668\u5730\u5740\u4e3a 0x020e0068\uff0cIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03 \u5bc4\u5b58\u5668\u5730\u5740\u4e3a 0x020e02f4 \u6bd4\u5982 DDR \u5185\u5b58\u5730\u5740: I.MX6U-ALPHA \u5f00\u53d1 \u677f \u4e0a \u7684 DDR3 \u5730 \u5740 \u8303 \u56f4 \u662f 0x80000000~0xA0000000(512MB) \u6216 \u8005 0x80000000~0x90000000(256MB)\uff0c \u8bf4\u660e IMX6ULL \u5f00\u53d1\u677f CPU \u7684\u7269\u7406\u5185\u5b58\u5730\u5740\u7a7a\u95f4\u662f IO \u8bbe\u5907\u548c\u5185\u5b58\u8bbe\u5907\u7edf\u4e00\u7f16\u5740\u7684","title":"3.2 CPU \u5730\u5740\u8303\u56f4"},{"location":"chapter_14/15_imx6ull/#led","text":"I.MX6U-ALPHA \u5f00\u53d1\u677f \uff0c\u5728\u5f00\u53d1\u677f\u4e2d\u4e2d\u6709\u4e00\u4e2a LED \u706f\uff0c\u5982\u56fe\u6240\u793a\uff1a \u706f\u901a\u8fc7 3.3V \u4f9b\u7535\uff0c\u7ecf\u8fc7 510 \u6b27\u7684\u9650\u6d41\u7535\u963b\u548c\u63a7\u5236\u53e3 LED0 \u76f8\u8fde\uff0c\u901a\u8fc7\u641c\u7d22\u67e5\u8be2\uff0c\u6211\u4eec\u53d1\u73b0 LED0 \u8282\u70b9\u548c GPIO_3 \u76f8\u8fde(\u5e94\u8be5\u662f GPIO1_3) \u8981\u5bf9 IO \u8fdb\u884c\u521d\u59cb\u5316\uff0c\u9700\u8981\u4e0b\u9762\u7684\u6d41\u7a0b\uff1a \u4f7f\u80fd IO \u65f6\u949f // \u8fd9\u4e00\u6b65\u7684\u4f5c\u7528\u6709\u70b9\u7c7b\u4f3c\u628a\u5bf9\u5e94 IO \u53e3\u542f\u52a8\u65f6\u949f\u4e2d\u65ad\u6216\u8005\u65f6\u949f\u8109\u51b2,\u8ba9\u5bf9\u5e94 IO \u53e3\u6d3b\u52a8\u8d77\u6765. ---> \u7406\u89e3 \u8bbe\u7f6e IO \u590d\u7528\uff0c\u5c06\u5176\u8bbe\u7f6e\u4e3a GPIO // ---> \u8fd9\u4e00\u6b65\u80fd\u591f\u7406\u89e3, \u7ecf\u8fc7\u914d\u7f6e\u628a\u67d0\u4e2a IO \u4fee\u6539\u914d\u7f6e\u3001\u914d\u7f6e\u4e3a GPIO \u53e3 \u914d\u7f6e IO \u7684\u7535\u6c14\u5c5e\u6027 // ---> \u8fd9\u4e00\u6b65\u8fd8\u4e0d\u5b8c\u5168\u7406\u89e3, \u53ea\u662f\u7406\u89e3\u4e86\u538b\u6446\u7387 \u914d\u7f6e GPIO \u7684\u7279\u6709\u5c5e\u6027\uff0c\u6bd4\u5982\u8bbe\u7f6e\u65b9\u5411\u5bc4\u5b58\u5668 // ---> \u8fd9\u4e00\u6b65\u7406\u89e3\u4e86, \u6bd4\u5982\u6211\u8fd9\u4e2a IO \u53e3\u5230\u5e95\u662f\u4f5c\u4e3a\u8f93\u5165\u8fd8\u662f\u8f93\u51fa\uff0c\u8981\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u5b9a \u4f7f\u7528 GPIO \uff0c\u6bd4\u5982\u8f93\u51fa\u9ad8\u4f4e\u7535\u5e73 // ---> \u7406\u89e3\u4e86, \u5176\u5b9e\u5c31\u662f\u5f80\u76f8\u5e94\u5bc4\u5b58\u5668\u5199 0 \u6216\u8005 1\uff0c0 \u5173\u95ed LED \u706f\uff0c1 \u70b9\u4eae LED \u706f \u5bf9\u4e8e IMX6ULL \u6765\u8bf4\uff0c\u6d41\u7a0b\u57fa\u672c\u662f\u4e00\u6837\u7684\uff0c\u6211\u4eec\u4e00\u6b65\u4e00\u6b65\u6765\u8bbe\u7f6e","title":"\u6c47\u7f16\u8bed\u8a00\u70b9\u4eae LED \u706f"},{"location":"chapter_14/15_imx6ull/#_4","text":"","title":"\u4e00 \u4f7f\u80fd\u65f6\u949f"},{"location":"chapter_14/15_imx6ull/#io","text":"\u8fd9\u91cc\u8bf4\u7684\u662f\u67d0\u4e2a IO \u53e3\u7684\u590d\u7528\u8bbe\u7f6e \u590d\u7528\u8bbe\u7f6e\u7684\u7ba1\u7406\u5c5e\u4e8e IOMUX Controller \u7ba1\u7406\uff0c\u67e5\u8be2\u82af\u7247\u624b\u518c\uff0c\u6211\u4eec\u8981\u8bbe\u7f6e\u7684\u662f GPIO1 \u7684 IO3,\u8981\u8bbe\u7f6e\u7684\u662f IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03(SW_MUX_CTL_PAD_GPIO1_IO03 SW MUX Control Register ) \u4e0b\u9762\u6709\u4e2a\u8868\u662f\u5bf9\u5176\u8fdb\u884c\u8bf4\u660e\u7684 led.s \u4ee3\u7801\u5982\u4e0b: global _start @\u5168\u5c40\u53d8\u91cf _start: /*\u7b2c\u4e00\u6b65 \u65f6\u80fd\u6240\u6709\u5916\u8bbe\u65f6\u949f*/ ldr r0, =0x020c4068 @CCGR0 ldr r1, =0xffffffff @\u8981\u5411CCGR0\u5199\u5165\u7684\u6570\u636e str r1, [r0] @\u5c060xffffffff\u5199\u5165\u5230CCGR0 ldr r0, =0x020c406c @CCGR1 str r1, [r0] ldr r0, =0x020c4070 @CCGR2 str r1, [r0] ldr r0, =0x020c4074 @CCGR3 str r1, [r0] ldr r0, =0x020c4078 @CCGR4 str r1, [r0] ldr r0, =0x020c407c @CCGR5 str r1, [r0] ldr r0, =0x020c4080 @CCGR6 str r1, [r0] /* \u7b2c\u4e8c\u6b65: \u914d\u7f6e GPIO1_IO03 PIN\u7684\u590d\u7528\u4e3aGPIO * \u4e5f\u5c31\u662f\u8bbe\u7f6eIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03=5 * IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03\u5bc4\u5b58\u5668\u5730\u5740\u4e3a0x020e0068, \u67e5\u8be2\u82af\u7247\u624b\u518c\u5f97\u77e5 */ ldr r0, =0x020e0068 @IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03, \u8fd9\u4e2a\u5730\u5740\u5c31\u662f\u4e0a\u9762\u6570\u636e\u624b\u518c\u91cc\u62ff\u5230\u5230\u5bc4\u5b58\u5668\u5730\u5740 ldr r1, =0x5 @\u8981\u5411IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03\u5199\u5165\u7684\u6570\u636e, \u628aMUX_MODE\u90e8\u5206\u8bbe\u7f6e\u4e3a0101\u5c31\u8868\u793a\u628a\u8fd9\u4e2a\u53e3\u5b50\u8bbe\u7f6e\u4e3aGPIO\u6a21\u5f0f str r1, [r0] @\u5c065\u5199\u5165\u5230IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03\u4e2d /* \u914d\u7f6eGPIO1_IO03\u7684\u7535\u6c14\u5c5e\u6027 \u4e5f\u5c31\u662f\u5bc4\u5b58\u5668\uff1a * IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03 * IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03\u5bc4\u5b58\u5668\u5730\u5740\u4e3a0x020e02f4 */ /* \u8fd9\u91cc\u662fbit0\u5230bit16\uff0c\u4e00\u517117\u4f4d\u8981\u8bbe\u7f6e @ *bit 16:0 HYS\u5173\u95ed @ HYS\uff0c\u7528\u6765\u4f7f\u80fd\u8fdf\u6ede\u6bd4\u8f83\u5668\uff0c\u5f53 IO\u4f5c\u4e3a\u8f93\u5165\u529f\u80fd\u7684\u65f6\u5019\u6709\u6548\uff0c\u7528\u4e8e\u8bbe\u7f6e\u8f93\u5165\u63a5\u6536\u5668\u7684\u65bd\u5bc6\u7279\u89e6\u53d1\u5668\u662f\u5426\u4f7f\u80fd\u3002 @ \u660e\u663e\u6211\u4eec\u8fd9\u91cc\u7684IO\u662f\u4f5c\u4e3a\u8f93\u51fa\u7684\uff0c\u56e0\u6b64\u8fd9\u91cc\u8981\u8bbe\u7f6e\u4e3a0 @ *bit [15:14]: 00 \u9ed8\u8ba4\u4e0b\u62c9 @ PUS\uff0c\u7528\u6765\u8bbe\u7f6e\u4e0a\u4e0b\u62c9\u7535\u963b\u7684\uff0c\u4e00\u5171\u6709\u56db\u79cd\u9009\u9879\u53ef\u4ee5\u9009\u3002\u9ed8\u8ba4\u662f00\uff0c100K\u4e0b\u62c9\u3002\u8fd9\u4e2a\u5c31\u6682\u65f6\u4e0d\u7ba1\u4e86\uff0c\u9ed8\u8ba4\u8bbe\u7f6e\u5427\u3002\u4f46\u662f\u8981\u641e\u6e05\u695a\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4e5f\u8981\u5176\u4ed6\u8bbe\u7f6e\u3002 @ *bit [13]: 0 kepper\u529f\u80fd @ \u5f53IO\u4f5c\u4e3a\u8f93\u5165\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u4f4d\u7528\u6765\u8bbe\u7f6e IO\u4f7f\u7528\u4e0a\u4e0b\u62c9\u8fd8\u662f\u72b6\u6001\u4fdd\u6301\u5668\u3002\u5f53\u4e3a 0\u7684\u65f6\u5019\u4f7f\u7528\u72b6\u6001\u4fdd\u6301\u5668\uff0c\u5f53\u4e3a1\u7684\u65f6\u5019\u4f7f\u7528\u4e0a\u4e0b\u62c9\u3002\u72b6\u6001\u4fdd\u6301\u5668\u5728IO \u4f5c\u4e3a\u8f93\u5165\u7684\u65f6\u5019\u624d\u6709\u7528\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u5f53\u5916\u90e8\u7535\u8def\u65ad\u7535\u4ee5\u540e\u6b64 IO \u53e3\u53ef\u4ee5\u4fdd\u6301\u4f4f\u4ee5\u524d\u7684\u72b6\u6001\u3002 @ \u54b1\u4eec\u8fd9\u91cc\u8fd9\u4e2aIO\u53e3\u662f\u4f5c\u4e3a\u8f93\u51fa\uff0c\u56e0\u6b64\u8fd9\u91cc\u4e5f\u662f\u9ed8\u8ba40. @ *bit [12]: 1 pull/keeper\u4f7f\u80fd @\u6b64\u4f4d\u7528\u6765\u4f7f\u80fd\u6216\u8005\u7981\u6b62\u4e0a\u4e0b\u62c9/\u72b6\u6001\u4fdd\u6301\u5668\u529f\u80fd\uff0c\u4e3a0\u65f6\u7981\u6b62\u4e0a\u4e0b\u62c9/\u72b6\u6001\u4fdd\u6301\u5668\uff0c\u4e3a 1\u65f6\u4f7f\u80fd\u4e0a\u4e0b\u62c9\u548c\u72b6\u6001\u4fdd\u6301\u5668\u3002 @ *bit [11]: 0 \u5173\u95ed\u5f00\u8def\u8f93\u51fa @\u5f53 IO\u4f5c\u4e3a\u8f93\u51fa\u7684\u65f6\u5019\uff0c\u6b64\u4f4d\u7528\u6765\u7981\u6b62\u6216\u8005\u4f7f\u80fd\u5f00\u8def\u8f93\u51fa\uff0c\u6b64\u4f4d\u4e3a0\u7684\u65f6\u5019\u7981\u6b62\u5f00\u8def\u8f93\u51fa\uff0c\u5f53\u6b64\u4f4d\u4e3a1\u7684\u65f6\u5019\u5c31\u4f7f\u80fd\u5f00\u8def\u8f93\u51fa\u529f\u80fd\u3002 @\u8fd9\u91cc\u660e\u663e\u5e94\u8be5\u4f7f\u80fd\u5f00\u8def\u8f93\u51fa\u3002\u90a3\u4e48\u5f00\u8def\u8f93\u51fa\u5177\u4f53\u662f\u4ec0\u4e48\u5462\uff1f\u7b80\u5355\u770b\u4e00\u53e5\u8bdd\uff08\u8fd9\u91cc\u4e0d\u4e00\u5b9a\u5bf9\uff09\uff1a @ \u6f0f\u6781\u5f00\u8def\u8f93\u51fa\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u9700\u8981\u5916\u63a5\u4e0a\u62c9\u7535\u963b\uff0c\u624d\u80fd\u8f93\u51fa\u9ad8\u7535\u5e73\u3002 @ \u96c6\u7535\u6781\u5f00\u8def\u8f93\u51fa\u662f\u4ee5\u8f93\u51fa\u7535\u8def\u7684\u6676\u4f53\u7ba1\u53d1\u5c04\u6781\u4f5c\u4e3a\u516c\u5171\u7aef\uff0c\u5e76\u4e14\u96c6\u7535\u6781\u60ac\u7a7a\u7684\u8f93\u51fa\u7535\u8def\u3002 @ *bit [10-8]: 000 \u7a7a @ \u8fd9\u4e2abit [10-8]\u662f\u4fdd\u7559\u7684\uff0c\u4e0d\u53ef\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u4e3a0 @ *bit [7:6]: 10 \u901f\u5ea6100Mhz @ \u5bf9\u5e94\u56fe8.1.4.2\u4e2d\u7684SPEED\uff0c\u5f53IO\u7528\u4f5c\u8f93\u51fa\u7684\u65f6\u5019\uff0c\u6b64\u4f4d\u7528\u6765\u8bbe\u7f6e IO\u901f\u5ea6\uff0c\u8bbe\u7f6e\u5982\u88688.1.4.2\u6240\u793a\u3002 @ 10\u4ee3\u8868100Mhz\uff0c\u6700\u9ad8\u662f11\uff0c11\u4ee3\u8868200Mhz @ *bit [5:3]: 110 R0/6\u9a71\u52a8\u80fd\u529b @\u5bf9\u5e94\u56fe 8.1.4.2 \u4e2d\u7684 DSE\uff0c\u5f53 IO \u7528\u4f5c\u8f93\u51fa\u7684\u65f6\u5019\u7528\u6765\u8bbe\u7f6e IO \u7684\u9a71\u52a8\u80fd\u529b\uff0c\u603b\u5171\u67098\u4e2a\u53ef\u9009\u9009\u9879\uff0c\u5982\u8868 8.1.4.3\u6240\u793a @\u5047\u8bbeR0\u662f260\u6b27\u59c6\uff0cR0/6\u5c31\u662f43.3\u6b27\u59c6 @\u611f\u89c9\u8fd9\u4e2a\u662f\u8bbe\u7f6e\u7535\u963b\u5927\u5c0f\u7684 @ *bit [2:1]: 00 \u7a7a @\u8fd9\u4e2abit [2-1]\u662f\u4fdd\u7559\u7684\uff0c\u4e0d\u53ef\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u4e3a0 @ *bit [0]: 0 \u4f4e\u8f6c\u6362\u7387 @\u5bf9\u5e94\u56fe 8.1.4.2\u4e2d\u7684SRE\uff0c\u8bbe\u7f6e\u538b\u6446\u7387\uff0c\u5f53\u6b64\u4f4d\u4e3a 0\u7684\u65f6\u5019\u662f\u4f4e\u538b\u6446\u7387\uff0c\u5f53\u4e3a 1\u7684\u65f6\u5019\u662f\u9ad8\u538b\u6446\u7387\u3002 @LED\u706f\u4e5f\u7b97\u4e00\u4e2a\u4f4e\u4fd7\u8bbe\u5907\u5427\uff0c\u5c31\u8bbe\u7f6e\u4e3a0 @ 0 00 0 1 0 000 10 110 00 0 = 0x10B0 */ ldr r0, =0x020e02f4 ldr r1, =0x10b0 str r1, [r0] /* \u8bbe\u7f6eGPIO * \u8bbe\u7f6eGPIO_GDIR\u5bc4\u5b58\u5668\uff0c\u8bbe\u7f6eGPIO1_IO03\u4e3a\u8f93\u51fa * GPIO1_GDIR\u5bc4\u5b58\u5668\u5730\u5740\u4e3a0x0209c004\uff0c\u8bbe\u7f6eGPIO1_GDIR\u7684bit3\u4e3a1 * \u4e5f\u5c31\u662f\u8bbe\u7f6eGPIO1_IO03\u4e3a\u8f93\u51fa */ ldr r0, =0x0209c004 ldr r1, =0x08 str r1, [r0] /* \u6253\u5f00LED\uff0c\u4e5f\u5c31\u662f\u8bbe\u7f6eGPIO_IO03\u4e3a0 * GPIO1_DR\u5bc4\u5b58\u5668\u5730\u5740\u4e3a0x0209c000 */ ldr r0, =0x0209c000 ldr r1,=0x0 /*\u5982\u679c\u8fd9\u91cc\u662fldr r1,=0x8, \u5219\u8868\u793a\u8be5\u5bc4\u5b58\u5668\u7b2c\u4e09\u4f4d\u7f6e\u4e3a1\uff0c\u5219\u4f1a\u5173\u95edLED\u706f*/ str r1, [r0] loop: b loop @\u901a\u8fc7 b \u6307\u4ee4\uff0cCPU \u91cd\u590d\u4e0d\u65ad\u7684\u8df3\u5230 loop \u51fd\u6570\u6267\u884c\uff0c\u8fdb\u5165\u4e00\u4e2a\u6b7b\u5faa\u73af\u3002 b \u662f\u8df3\u8f6c ldr\uff1a load register str: set register \u5230\u8fd9\u91cc\u518d\u603b\u7ed3\u4e0b: \u4e00\u4e2a \u5177\u4f53 IO \u53e3 \uff0c\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u5bc4\u5b58\u5668(\u6bd4\u5982 IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03 \u548c IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03 )\u8bbe\u7f6e\u4e0d\u540c\u7684\u503c\u6765\u63a7\u5236 IO \u53e3\u7684\u4f5c\u7528\uff0c \u53ef\u4ee5\u4f5c\u4e3a GPIO \u53e3 \uff0c \u53ef\u4ee5\u4f5c\u4e3a UART \u53e3\u6216\u8005\u5176\u4ed6\u53e3","title":"\u4e8c IO \u53e3\u590d\u7528\u8bbe\u7f6e"},{"location":"chapter_14/15_imx6ull/#io_1","text":"IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03\u5bc4\u5b58\u5668\u5730\u5740\u4e3a0x020e02f4 \u5bc4\u5b58\u5668 IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03 \u662f\u7528\u6765\u914d\u7f6e GPIO1_IO03 \u53e3\u7684\u7535\u5668\u5c5e\u6027\u7684\uff0c\u7535\u5668\u5c5e\u6027\u5305\u62ec\u901f\u5ea6\u8bbe\u7f6e\u3001\u9a71\u52a8\u80fd\u529b\u8bbe\u7f6e\u3001\u538b\u6446\u7387\u8bbe\u7f6e\u7b49\u7b49. \u6bd4\u5982\u67d0\u4e2a IO \u53e3\u9996\u5148\u901a\u8fc7 IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03 \u5bc4\u5b58\u5668\u88ab\u4ece\u9ed8\u8ba4\u8bbe\u7f6e\u6539\u6210\u4e86 GPIO \u53e3\uff0c\u7136\u540e\u53c8\u53ef\u4ee5\u901a\u8fc7 IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03 \u5bc4\u5b58\u5668\u8bbe\u7f6e\u7535\u5668\u5c5e\u6027\uff0c\u6bd4\u5982\u8fd9\u4e2a IO \u53e3\u5b9e\u9645\u8fde\u7684\u662f EMC \u5219\u8981\u628a\u538b\u6446\u7387\u8bbe\u7f6e\u7684\u4f4e\u4e00\u4e9b\uff0c\u6bd4\u5982\u8fd9\u4e2a IO \u5b9e\u9645\u8fde\u7684\u662f\u9ad8\u901f\u901a\u4fe1\u8bbe\u5907\u5219\u8981\u628a\u538b\u6446\u7387\u8bbe\u7f6e\u9ad8\u4e00\u4e9b.","title":"\u4e09 IO \u53e3\u7535\u5668\u5c5e\u6027\u8bbe\u7f6e"},{"location":"chapter_14/15_imx6ull/#gpio-gpio-gpio","text":"\u7ecf\u8fc7\u4e0a\u9762\u7684\u7efc\u5408\u77e5\u8bc6\uff0c\u6211\u4eec\u77e5\u9053\u4e86 \u8981\u8c03\u6574 GPIO1_IO03 \u53e3 \u4e3a\u8f93\u51fa\u65b9\u5411\uff08\u8981\u8bbe\u7f6e GPIO1 \u7ec4 \u7684 GPIO1.GPIR \u5bc4\u5b58\u5668 \uff09 \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u5199\u4e3a: \u8c03\u6574 IO1 \u7ec4-IO03 \u53e3 \u7684\u65b9\u5411\u4e3a\u8f93\u51fa,\u8bbe\u7f6e IO1 \u7ec4 \u7684 IO1.GPIR \u5bc4\u5b58\u5668 \u771f\u6b63\u8f93\u51fa\u7684\u65f6\u5019\u662f\u8bbe\u7f6e IO1 \u7ec4- IO03 \u53e3 \u503c\u4e3a 0, \u672c\u8d28\u662f\u8bbe\u7f6e IO1 \u7ec4 \u7684 IO1.DR \u5bc4\u5b58\u5668 \u63a5\u4e0b\u6765\u627e\u5230\u5bf9\u5e94\u5bc4\u5b58\u5668\u7684\u503c GPIO1.DR \u5bc4\u5b58\u5668\u5730\u5740\u4e3a 0x0209_C000 , \u5176\u4e2d\u63a7\u5236 IO03 \u7684\u662f\u8be5\u5bc4\u5b58\u5668\u7684\u7b2c 3 \u4f4d GPIO1.GPDR \u5bc4\u5b58\u5668\u5730\u5740\u4e3a 0x0209_C004 , , \u5176\u4e2d\u63a7\u5236 IO03 \u7684\u662f\u8be5\u5bc4\u5b58\u5668\u7684\u7b2c 3 \u4f4d","title":"\u56db \u8bbe\u7f6e\u4e3a GPIO \u53e3\u540e, GPIO \u7279\u6709\u914d\u7f6e(GPIO \u7279\u6709\u5bc4\u5b58\u5668\u914d\u7f6e)"},{"location":"chapter_14/15_imx6ull/#c-led","text":"","title":"C \u8bed\u8a00\u70b9\u4eae LED \u706f"},{"location":"chapter_14/15_imx6ull/#_5","text":"ARM \u6bcf\u79cd\u5de5\u4f5c\u6a21\u5f0f\u9664 R0~R15 \u5171 16 \u4e2a\u5bc4\u5b58\u5668\u5916\uff0c\u8fd8\u6709\u7b2c 17 \u4e2a\u5bc4\u5b58\u5668 CPSR,\u53eb\u505a \u5f53\u524d\u7a0b\u5e8f\u72b6\u6001\u5bc4\u5b58\u5668 R0 ~ R7 \u662f\u6240\u6709\u6a21\u5f0f\u901a\u7528\u7684\u5bc4\u5b58\u5668 CPSR \u5bc4\u5b58\u5668\uff0c\u662f\u4e00\u4e2a 32 \u4f4d\u5bc4\u5b58\u5668,\u6bcf\u4e2a\u4f4d\u7684\u542b\u4e49\u5982\u4e0b\u56fe\uff1a \u5206\u6210\u4e86 4 \u90e8\u5206\uff1a 1\uff0c\u6761\u4ef6\u6807\u5fd7\u4f4d N(Negative), Z(Zero), C(Carry), V(Verflow)\u7edf\u79f0\u4e3a\u6761\u4ef6\u6807\u5fd7\u4f4d\u3002ARM \u6307\u4ee4\u53ef\u4ee5\u6839\u636e CPSR \u4e2d\u7684\u8fd9\u4e9b\u6761\u4ef6\u6807\u5fd7\u4f4d\u6765\u9009\u62e9\u6027\u7684\u6267\u884c\u3002 2\uff0cQ \u6807\u5fd7\u4f4d ARM v5 \u7684 E \u7cfb\u5217\u5904\u7406\u5668\u4e2d\uff0cCPSR \u7684 bit[27]\u79f0\u4e3a Q \u6807\u5fd7\u4f4d\u3002\u4e3b\u8981\u7528\u4e8e\u6307\u793a\u589e\u5f3a\u7684 DSP \u6307\u4ee4\u662f\u5426\u53d1\u751f\u4e86\u6ea2\u51fa\u3002 3\uff0c\u4fdd\u7559\u4f4d \u7528\u4e8e\u5c06\u6765 ARM \u7248\u672c\u7684\u6269\u5c55\u3002 4, \u63a7\u5236\u4f4d I, F, T \u4ee5\u53ca M[4:0]\u7edf\u79f0\u4e3a\u63a7\u5236\u4f4d\u3002\u5f53\u5f02\u5e38\u4e2d\u65ad\u53d1\u751f\u65f6\uff0c\u8fd9\u4e9b\u4f4d\u53d1\u751f\u53d8\u5316\u3002\u5728\u7279\u6743\u7ea7\u7684\u5904\u7406\u5668\u6a21\u5f0f\u4e0b\uff0c\u8f6f\u4ef6\u53ef\u4ee5\u4fee\u6539\u8fd9\u4e9b\u63a7\u5236\u4f4d\u3002 \u4e0b\u8868\u793a\u63a7\u5236\u4f4d M[4:0]\u7684\u542b\u4e49\uff1a \u5176\u4e2d M 4:0 \u5c31\u662f\u8bbe\u7f6e\u5904\u7406\u5668\u8fd0\u884c\u6a21\u5f0f\u7684,\u6bd4\u5982 USR \u6a21\u5f0f\u5207\u6362\u5230 SVC \u6a21\u5f0f\uff08\u8d85\u7ea7\u7ba1\u7406\u5458\u6a21\u5f0f\uff09 \u4ece\u4e0a\u9762\u7684\u8868\u683c\u5f97\u77e5\uff0c\u628a M[4:0]\u5207\u6362\u5230 10011 \u5c31\u8fdb\u5165 SVC \u6a21\u5f0f \u72b6\u6001\u5bc4\u5b58\u5668\u8bbf\u95ee\u6307\u4ee4\u4ec5\u6709\u4e24\u6761\uff1a MRS: \u72b6\u6001\u5bc4\u5b58\u5668\u5230\u901a\u7528\u5bc4\u5b58\u5668\u7684\u4f20\u9001\u6307\u4ee4\u3002\u6bd4\u5982 mrs r0, cpsr \uff0c\u5c06 cpsr \u5bc4\u5b58\u5668\u7684\u503c\u8bfb\u5230\u901a\u7528\u5bc4\u5b58\u5668 r0. MSR: \u901a\u7528\u5bc4\u5b58\u5668\u5230\u72b6\u6001\u5bc4\u5b58\u5668\u7684\u4f20\u9001\u6307\u4ee4\u3002\u6bd4\u5982 msr cpsr, r0 \uff0c\u5c06\u901a\u7528\u5bc4\u5b58\u5668 r0 \u7684\u503c\u5199\u5230 cpsr. \u53c2\u8003 ARM \u6c47\u7f16\uff1aMRS \u548c MSR \u6307\u4ee4","title":"\u57fa\u7840\u77e5\u8bc6"},{"location":"chapter_14/15_imx6ull/#makefile","text":"\u672c\u6559\u7a0b\u6240\u6709\u7684\u88f8\u673a\u4f8b\u7a0b\u90fd\u662f\u70e7\u5199\u5230 SD \u5361\u4e2d\uff0c\u4e0a\u7535\u4ee5\u540e I.MX6U \u7684\u5185\u90e8 boot rom \u7a0b\u5e8f\u4f1a\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u62f7\u8d1d\u5230\u94fe\u63a5\u5730\u5740\u5904\uff0c\u8fd9\u4e2a\u94fe\u63a5\u5730\u5740\u53ef\u4ee5\u5728 I.MX6U \u7684\u5185\u90e8 128KB RAM \u4e2d(0X900000~0X91FFFF)\uff0c\u4e5f\u53ef\u4ee5\u5728\u5916\u90e8\u7684 DDR \u4e2d\u3002\u672c\u6559\u7a0b\u6240\u6709\u88f8\u673a\u4f8b\u7a0b\u7684\u94fe\u63a5\u5730\u5740\u90fd\u5728 DDR \u4e2d\uff0c\u94fe\u63a5\u8d77\u59cb\u5730\u5740\u4e3a 0X87800000\u3002 \u8bf4\u660e\u8fd9\u662f\u963f\u5c14\u6cd5\u5f00\u53d1\u677f\u7684\u4e00\u4e2a\u89c4\u5b9a\u3002 \u5f00\u53d1\u677f ROM \u5185\u7a0b\u5e8f\u542f\u52a8\u540e\uff0c\u81ea\u52a8\u5c31\u628a PC \u6307\u5411\u8be5\u5730\u5740","title":"Makefile \u8bb2\u89e3"},{"location":"chapter_14/15_imx6ull/#_6","text":"","title":"\u5176\u4ed6\u95ee\u9898"},{"location":"chapter_14/15_imx6ull/#_7","text":"I.MX6U \u6bcf\u4e2a\u5916\u8bbe\u7684\u65f6\u949f\u90fd\u53ef\u4ee5\u72ec\u7acb\u7684\u4f7f\u80fd\u6216\u7981\u6b62\uff0c\u8fd9\u6837\u53ef\u4ee5\u5173\u95ed\u6389\u4e0d\u4f7f\u7528\u7684\u5916\u8bbe\u65f6\u949f\uff0c\u8d77\u5230 \u7701\u7535\u7684\u76ee\u7684\u3002 CCM \u6709 CCM_CCGR0~CCM_CCGR6 \u8fd9 7 \u4e2a\u5bc4\u5b58\u5668\uff0c\u8fd9 7 \u4e2a\u5bc4\u5b58\u5668\u63a7\u5236\u7740 I.MX6U \u7684\u6240\u6709\u5916\u8bbe\u65f6\u949f\u5f00\u5173 \u6839\u636e CCM_CCGR0 \u5bc4\u5b58\u5668\u7684\u4f7f\u7528\u8bf4\u660e, \u6211\u4eec\u53d1\u73b0\u5982\u679c\u6211\u4eec\u8981\u6253\u5f00 GPIO2 \u7684\u5916\u8bbe\u65f6\u949f\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u8bbe\u7f6e CCM_CCGR0 \u7684 bit31 \u548c bit30 \u90fd\u4e3a 1 \u5373\u53ef\uff0c\u4e5f\u5c31\u662f CCM_CCGR0=3 << 30\u3002\u53cd\u4e4b\uff0c\u5982\u679c\u8981\u5173\u95ed GPIO2 \u7684\u5916\u8bbe\u65f6\u949f\uff0c\u90a3\u5c31\u8bbe\u7f6e CCM_CCGR0 \u7684 bit31 \u548c bit30 \u90fd\u4e3a 0 \u5373\u53ef\u3002","title":"\u95ee\u9898\u4e09 \u5916\u8bbe\u65f6\u949f\u4f7f\u80fd"},{"location":"chapter_14/15_imx6ull/#gpio1_io03-io","text":"\u8fd9\u4e48\u591a IO\u5c5e\u6027 \u662f\u5e72\u561b\u7684?","title":"\u95ee\u9898\u56db \u914d\u7f6e GPIO1_IO03 \u7684 IO \u5c5e\u6027"},{"location":"chapter_14/15_imx6ull/#imx6ull-rom","text":"\u76ee\u524d\u6839\u636e\u6587\u6863 8.4.15 \u6765\u770b, \u542f\u52a8\u4e4b\u540e ROM \u7a0b\u5e8f\u5c31\u4f1a\u6267\u884c 0X87800000 \u8fd9\u4e2a\u5730\u5740\u7684\u4ee3\u7801.","title":"\u95ee\u9898\u4e94 I.MX6ULL ROM \u7a0b\u5e8f\u542f\u52a8\u4e4b\u540e, \u5176\u6267\u884c\u5730\u5740"},{"location":"chapter_14/1_demo_of_led_driver/","text":"\u6982\u8ff0 \u8fd9\u4e00\u7ae0\u4e3b\u8981\u8bb2\u8ff0 Linux \u9a71\u52a8\u7a0b\u5e8f\u5f00\u53d1\u65b9\u5411\u7684\u603b\u7ed3. Linux \u9a71\u52a8 = \u8f6f\u4ef6\u6846\u67b6 + \u786c\u4ef6\u64cd\u4f5c \u672c\u7bc7\u63cf\u8ff0\u9a71\u52a8\u7a0b\u5e8f\u65b9\u5411\u7684 Hello World \u7a0b\u5e8f 1 \u5982\u4f55\u7f16\u8bd1\u4e00\u4e2a\u5185\u6838\u6a21\u5757(Hello World \u9a71\u52a8\u6559\u7a0b) \u5185\u6838\u6a21\u5757 Hello World \u6559\u7a0b 2 \u76f8\u5173\u8054\u60f3 Linux \u7684 file \u7ed3\u6784\u4f53, \u672c\u8eab\u5c31\u6709\u4e00\u4e2a private_data \u6210\u5458, \u662f\u4e00\u4e2a\u7a7a\u6307\u9488 \u5728\u9a71\u52a8\u7a0b\u5e8f\u4e2d, \u901a\u8fc7\u4f20\u5165 file \u7ed3\u6784\u4f53, \u7136\u540e\u901a\u8fc7\u5b83\u7684 private_data \u6210\u5458\u62ff\u5230\u5177\u4f53\u7684\u8bbe\u5907\u7ed3\u6784\u4f53 3 \u9a71\u52a8\u7a0b\u5e8f\u4ece\u5165\u95e8\u5230\u7cbe\u901a\u8def\u5f84 1 HelloWorld \u6559\u7a0b 2 \u7406\u89e3 module_init, module_exit, file_operation \u5199\u597d\u9a71\u52a8\u7a0b\u5e8f\u540e, \u51fa\u73b0/dev/yourdevfile, \u5e94\u7528\u5c42\u53ef\u4ee5 open, read, write, ioctl, \u7136\u540e\u9a71\u52a8\u7a0b\u5e8f\u5c31\u771f\u6b63\u7684\u548c\u786c\u4ef6\u4ea4\u4e92(\u8bfb\u5199\u6307\u4ee4\u3001\u6570\u636e) 3 \u5404\u81ea\u9879\u76ee\u5b9e\u8df5, \u5b9e\u9645\u548c\u7406\u8bba\u76f8\u7ed3\u5408 4 \u4e00\u4e2a\u5b8c\u6574\u7684 hello_drv \u4ec0\u4e48\u662f\u5b8c\u6574? \u5305\u62ec\u521b\u5efa\u4e86/dev/hello \u6587\u4ef6, \u6709\u5b9e\u73b0\u5bf9\u5e94 open, close, read, write \u64cd\u4f5c A hello_drv.c #include <linux/module.h> #include <linux/fs.h> #include <linux/errno.h> #include <linux/miscdevice.h> #include <linux/kernel.h> #include <linux/major.h> #include <linux/mutex.h> #include <linux/proc_fs.h> #include <linux/seq_file.h> #include <linux/stat.h> #include <linux/init.h> #include <linux/device.h> #include <linux/tty.h> #include <linux/kmod.h> #include <linux/gfp.h> /* 1. \u786e\u5b9a\u4e3b\u8bbe\u5907\u53f7 */ static int major = 0; static char kernel_buf[1024]; static struct class *hello_class; #define MIN(a, b) (a < b ? a : b) /* 3. \u5b9e\u73b0\u5bf9\u5e94\u7684open/read/write\u7b49\u51fd\u6570\uff0c\u586b\u5165file_operations\u7ed3\u6784\u4f53 */ static ssize_t hello_drv_read (struct file *file, char __user *buf, size_t size, loff_t *offset) { int err; printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); err = copy_to_user(buf, kernel_buf, MIN(1024, size)); return MIN(1024, size); } static ssize_t hello_drv_write (struct file *file, const char __user *buf, size_t size, loff_t *offset) { int err; printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); err = copy_from_user(kernel_buf, buf, MIN(1024, size)); return MIN(1024, size); } static int hello_drv_open (struct inode *node, struct file *file) { printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); return 0; } static int hello_drv_close (struct inode *node, struct file *file) { printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); return 0; } /* 2. \u5b9a\u4e49\u81ea\u5df1\u7684file_operations\u7ed3\u6784\u4f53 */ static struct file_operations hello_drv = { .owner = THIS_MODULE, .open = hello_drv_open, .read = hello_drv_read, .write = hello_drv_write, .release = hello_drv_close, }; /* 4. \u628afile_operations\u7ed3\u6784\u4f53\u544a\u8bc9\u5185\u6838\uff1a\u6ce8\u518c\u9a71\u52a8\u7a0b\u5e8f */ /* 5. \u8c01\u6765\u6ce8\u518c\u9a71\u52a8\u7a0b\u5e8f\u554a\uff1f\u5f97\u6709\u4e00\u4e2a\u5165\u53e3\u51fd\u6570\uff1a\u5b89\u88c5\u9a71\u52a8\u7a0b\u5e8f\u65f6\uff0c\u5c31\u4f1a\u53bb\u8c03\u7528\u8fd9\u4e2a\u5165\u53e3\u51fd\u6570 */ static int __init hello_init(void) // __init\u8868\u793a\u53ea\u5728\u521d\u59cb\u5316\u9636\u6bb5\u4f7f\u7528, \u6a21\u5757\u88c5\u8f7d\u540e\u5c31\u6254\u6389, \u91ca\u653e\u5185\u5b58 { int err; printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); major = register_chrdev(0, \"hello\", &hello_drv); /* /dev/hello */ hello_class = class_create(THIS_MODULE, \"hello_class\"); err = PTR_ERR(hello_class); if (IS_ERR(hello_class)) { printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); unregister_chrdev(major, \"hello\"); return -1; } device_create(hello_class, NULL, MKDEV(major, 0), NULL, \"hello\"); /* /dev/hello */ return 0; } /* 6. \u6709\u5165\u53e3\u51fd\u6570\u5c31\u5e94\u8be5\u6709\u51fa\u53e3\u51fd\u6570\uff1a\u5378\u8f7d\u9a71\u52a8\u7a0b\u5e8f\u65f6\uff0c\u5c31\u4f1a\u53bb\u8c03\u7528\u8fd9\u4e2a\u51fa\u53e3\u51fd\u6570 */ static void __exit hello_exit(void) { printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); device_destroy(hello_class, MKDEV(major, 0)); class_destroy(hello_class); unregister_chrdev(major, \"hello\"); } /* 7. \u5176\u4ed6\u5b8c\u5584\uff1a\u63d0\u4f9b\u8bbe\u5907\u4fe1\u606f\uff0c\u81ea\u52a8\u521b\u5efa\u8bbe\u5907\u8282\u70b9 */ module_init(hello_init); module_exit(hello_exit); MODULE_LICENSE(\"GPL\"); B hello_drv_test.c \u8fd9\u4e2a\u662f\u7528\u6237\u7a7a\u95f4\u7684\u6d4b\u8bd5\u7a0b\u5e8f, \u5bf9/dev/hello \u6587\u4ef6\u8fdb\u884c\u5199\u548c\u8bfb #include <sys/types.h> #include <sys/stat.h> #include <fcntl.h> #include <unistd.h> #include <stdio.h> #include <string.h> /* * ./hello_drv_test -w abc * ./hello_drv_test -r */ int main(int argc, char **argv) { int fd; char buf[1024]; int len; /* 1. \u5224\u65ad\u53c2\u6570 */ if (argc < 2) { printf(\"Usage: %s -w <string>\\n\", argv[0]); printf(\" %s -r\\n\", argv[0]); return -1; } /* 2. \u6253\u5f00\u6587\u4ef6 */ fd = open(\"/dev/hello\", O_RDWR); if (fd == -1) { printf(\"can not open file /dev/hello\\n\"); return -1; } /* 3. \u5199\u6587\u4ef6\u6216\u8bfb\u6587\u4ef6 */ if ((0 == strcmp(argv[1], \"-w\")) && (argc == 3)) { len = strlen(argv[2]) + 1; len = len < 1024 ? len : 1024; write(fd, argv[2], len); } else { len = read(fd, buf, 1024); buf[1023] = '\\0'; printf(\"APP read : %s\\n\", buf); } close(fd); return 0; } C Makefile ifneq ($(KERNELRELEASE),) obj-m :=hello_drv.o else KDIR :=/lib/modules/$(shell uname -r)/build all: make -C $(KDIR) M=$(PWD) modules clean: rm -f *.ko *.o *.mod.o *.mod.c *.symvers *.order endif D \u5b9e\u9a8c\u8bb0\u5f55 \u7f16\u8bd1\u5185\u6838\u6a21\u5757 make \u5b89\u88c5 hello_drv.ko insmod hello_drv.ko \u6d4b\u8bd5 \u5378\u8f7d\u6a21\u5757 rmmod hello_drv.ko \u67e5\u770b\u5185\u6838\u6253\u5370\u65e5\u5fd7 # tail -n 10 /var/log/messages E \u5185\u6838\u961f\u5217 kfifo \u4f7f\u7528 #include <linux/module.h> #include <linux/fs.h> #include <linux/errno.h> #include <linux/miscdevice.h> #include <linux/kernel.h> #include <linux/major.h> #include <linux/mutex.h> #include <linux/proc_fs.h> #include <linux/seq_file.h> #include <linux/stat.h> #include <linux/init.h> #include <linux/device.h> #include <linux/tty.h> #include <linux/kmod.h> #include <linux/gfp.h> #include <linux/kfifo.h> /* 1. \u786e\u5b9a\u4e3b\u8bbe\u5907\u53f7 */ static int major = 0; static char kernel_buf[1024]; static struct class *hello_class; struct kfifo test_fifo; #define MIN(a, b) (a < b ? a : b) /* 3. \u5b9e\u73b0\u5bf9\u5e94\u7684open/read/write\u7b49\u51fd\u6570\uff0c\u586b\u5165file_operations\u7ed3\u6784\u4f53 */ static ssize_t hello_drv_read (struct file *file, char __user *buf, size_t size, loff_t *offset) { int err; printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); err = copy_to_user(buf, kernel_buf, MIN(1024, size)); int ret; ret = kfifo_alloc(&test_fifo,PAGE_SIZE,GFP_KERNEL); //\u521d\u59cb\u5316\u961f\u5217\uff0c\u4f7f\u7528kfifo_alloc if (ret) return 1; int i; for (i=0;i<32;i++) kfifo_in(&test_fifo, &i, sizeof(i)); //\u5199\u961f\u5217\uff0c\u4f7f\u7528kfifo_in int val; ret = kfifo_out_peek(&test_fifo,&val,sizeof(val)); //\u8bfb\u961f\u5217\u4f46\u662f\u4e0d\u771f\u6b63\u53d6\u6570\u636e\uff0c\u7528kfifo_out_peek\uff0c \u771f\u6b63\u53d6\u6570\u636e\u7528kfifo_out if (ret != sizeof(val)) return -EINVAL; printk(\"%s %s line %d val is %u\\n\", __FILE__, __FUNCTION__, __LINE__,val); while (kfifo_avail(&test_fifo)) //\u63a2\u6d4b\u961f\u5217\u4e2d\u662f\u5426\u8fd8\u6709\u6570\u636e { int val2; int ret2; ret2 = kfifo_out(&test_fifo,&val2,sizeof(val2)); if (ret2 != sizeof(val2)) return -EINVAL; printk(\"%s %s line %d val2 is %u\\n\", __FILE__, __FUNCTION__, __LINE__,val2); } kfifo_free(&test_fifo); return MIN(1024, size); } static ssize_t hello_drv_write (struct file *file, const char __user *buf, size_t size, loff_t *offset) { int err; printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); err = copy_from_user(kernel_buf, buf, MIN(1024, size)); return MIN(1024, size); } static int hello_drv_open (struct inode *node, struct file *file) { printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); return 0; } static int hello_drv_close (struct inode *node, struct file *file) { printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); return 0; } /* 2. \u5b9a\u4e49\u81ea\u5df1\u7684file_operations\u7ed3\u6784\u4f53 */ static struct file_operations hello_drv = { .owner = THIS_MODULE, .open = hello_drv_open, .read = hello_drv_read, .write = hello_drv_write, .release = hello_drv_close, }; /* 4. \u628afile_operations\u7ed3\u6784\u4f53\u544a\u8bc9\u5185\u6838\uff1a\u6ce8\u518c\u9a71\u52a8\u7a0b\u5e8f */ /* 5. \u8c01\u6765\u6ce8\u518c\u9a71\u52a8\u7a0b\u5e8f\u554a\uff1f\u5f97\u6709\u4e00\u4e2a\u5165\u53e3\u51fd\u6570\uff1a\u5b89\u88c5\u9a71\u52a8\u7a0b\u5e8f\u65f6\uff0c\u5c31\u4f1a\u53bb\u8c03\u7528\u8fd9\u4e2a\u5165\u53e3\u51fd\u6570 */ static int __init hello_init(void) // __init\u8868\u793a\u53ea\u5728\u521d\u59cb\u5316\u9636\u6bb5\u4f7f\u7528, \u6a21\u5757\u88c5\u8f7d\u540e\u5c31\u6254\u6389, \u91ca\u653e\u5185\u5b58 { int err; printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); major = register_chrdev(0, \"hello\", &hello_drv); /* /dev/hello */ hello_class = class_create(THIS_MODULE, \"hello_class\"); err = PTR_ERR(hello_class); if (IS_ERR(hello_class)) { printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); unregister_chrdev(major, \"hello\"); return -1; } device_create(hello_class, NULL, MKDEV(major, 0), NULL, \"hello\"); /* /dev/hello */ return 0; } /* 6. \u6709\u5165\u53e3\u51fd\u6570\u5c31\u5e94\u8be5\u6709\u51fa\u53e3\u51fd\u6570\uff1a\u5378\u8f7d\u9a71\u52a8\u7a0b\u5e8f\u65f6\uff0c\u5c31\u4f1a\u53bb\u8c03\u7528\u8fd9\u4e2a\u51fa\u53e3\u51fd\u6570 */ static void __exit hello_exit(void) { printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); device_destroy(hello_class, MKDEV(major, 0)); class_destroy(hello_class); unregister_chrdev(major, \"hello\"); } /* 7. \u5176\u4ed6\u5b8c\u5584\uff1a\u63d0\u4f9b\u8bbe\u5907\u4fe1\u606f\uff0c\u81ea\u52a8\u521b\u5efa\u8bbe\u5907\u8282\u70b9 */ module_init(hello_init); module_exit(hello_exit); MODULE_LICENSE(\"GPL\"); 5 \u5173\u4e8e/dev/null \u548c /dev/full \u7b49\u5b57\u7b26\u8bbe\u5907 \u57fa\u4e8e\u4e0a\u9762\u7684\u7406\u89e3, /dev/null \u8bbe\u5907\u7684\u5b9e\u73b0\u5c31\u5f88\u597d\u5b9e\u73b0 \u4ece\u7a7a\u8bbe\u5907\u8bfb\u53d6\u65f6\u4ec0\u4e48\u4e5f\u4e0d\u8fd4\u56de, \u4ee3\u7801\u5982\u4e0b: static ssize_t read_null (struct file *file, const char __user *buf, size_t size, loff_t *offset) { return 0; } \u65e0\u8bba\u7528\u6237\u7a7a\u95f4\u600e\u4e48\u5199\u90fd\u5199\u4e0d\u6ee1, \u4ee3\u7801\u5982\u4e0b: static ssize_t write_null (struct file *file, const char __user *buf, size_t size, loff_t *offset) { return count; }","title":"\u7b2c\u4e00\u7bc7 \u9a71\u52a8\u7a0b\u5e8f\u7684Hello World"},{"location":"chapter_14/1_demo_of_led_driver/#_1","text":"\u8fd9\u4e00\u7ae0\u4e3b\u8981\u8bb2\u8ff0 Linux \u9a71\u52a8\u7a0b\u5e8f\u5f00\u53d1\u65b9\u5411\u7684\u603b\u7ed3. Linux \u9a71\u52a8 = \u8f6f\u4ef6\u6846\u67b6 + \u786c\u4ef6\u64cd\u4f5c \u672c\u7bc7\u63cf\u8ff0\u9a71\u52a8\u7a0b\u5e8f\u65b9\u5411\u7684 Hello World \u7a0b\u5e8f","title":"\u6982\u8ff0"},{"location":"chapter_14/1_demo_of_led_driver/#1-hello-world","text":"\u5185\u6838\u6a21\u5757 Hello World \u6559\u7a0b","title":"1 \u5982\u4f55\u7f16\u8bd1\u4e00\u4e2a\u5185\u6838\u6a21\u5757(Hello World \u9a71\u52a8\u6559\u7a0b)"},{"location":"chapter_14/1_demo_of_led_driver/#2","text":"Linux \u7684 file \u7ed3\u6784\u4f53, \u672c\u8eab\u5c31\u6709\u4e00\u4e2a private_data \u6210\u5458, \u662f\u4e00\u4e2a\u7a7a\u6307\u9488 \u5728\u9a71\u52a8\u7a0b\u5e8f\u4e2d, \u901a\u8fc7\u4f20\u5165 file \u7ed3\u6784\u4f53, \u7136\u540e\u901a\u8fc7\u5b83\u7684 private_data \u6210\u5458\u62ff\u5230\u5177\u4f53\u7684\u8bbe\u5907\u7ed3\u6784\u4f53","title":"2 \u76f8\u5173\u8054\u60f3"},{"location":"chapter_14/1_demo_of_led_driver/#3","text":"1 HelloWorld \u6559\u7a0b 2 \u7406\u89e3 module_init, module_exit, file_operation \u5199\u597d\u9a71\u52a8\u7a0b\u5e8f\u540e, \u51fa\u73b0/dev/yourdevfile, \u5e94\u7528\u5c42\u53ef\u4ee5 open, read, write, ioctl, \u7136\u540e\u9a71\u52a8\u7a0b\u5e8f\u5c31\u771f\u6b63\u7684\u548c\u786c\u4ef6\u4ea4\u4e92(\u8bfb\u5199\u6307\u4ee4\u3001\u6570\u636e) 3 \u5404\u81ea\u9879\u76ee\u5b9e\u8df5, \u5b9e\u9645\u548c\u7406\u8bba\u76f8\u7ed3\u5408","title":"3 \u9a71\u52a8\u7a0b\u5e8f\u4ece\u5165\u95e8\u5230\u7cbe\u901a\u8def\u5f84"},{"location":"chapter_14/1_demo_of_led_driver/#4-hello_drv","text":"\u4ec0\u4e48\u662f\u5b8c\u6574? \u5305\u62ec\u521b\u5efa\u4e86/dev/hello \u6587\u4ef6, \u6709\u5b9e\u73b0\u5bf9\u5e94 open, close, read, write \u64cd\u4f5c","title":"4 \u4e00\u4e2a\u5b8c\u6574\u7684 hello_drv"},{"location":"chapter_14/1_demo_of_led_driver/#a-hello_drvc","text":"#include <linux/module.h> #include <linux/fs.h> #include <linux/errno.h> #include <linux/miscdevice.h> #include <linux/kernel.h> #include <linux/major.h> #include <linux/mutex.h> #include <linux/proc_fs.h> #include <linux/seq_file.h> #include <linux/stat.h> #include <linux/init.h> #include <linux/device.h> #include <linux/tty.h> #include <linux/kmod.h> #include <linux/gfp.h> /* 1. \u786e\u5b9a\u4e3b\u8bbe\u5907\u53f7 */ static int major = 0; static char kernel_buf[1024]; static struct class *hello_class; #define MIN(a, b) (a < b ? a : b) /* 3. \u5b9e\u73b0\u5bf9\u5e94\u7684open/read/write\u7b49\u51fd\u6570\uff0c\u586b\u5165file_operations\u7ed3\u6784\u4f53 */ static ssize_t hello_drv_read (struct file *file, char __user *buf, size_t size, loff_t *offset) { int err; printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); err = copy_to_user(buf, kernel_buf, MIN(1024, size)); return MIN(1024, size); } static ssize_t hello_drv_write (struct file *file, const char __user *buf, size_t size, loff_t *offset) { int err; printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); err = copy_from_user(kernel_buf, buf, MIN(1024, size)); return MIN(1024, size); } static int hello_drv_open (struct inode *node, struct file *file) { printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); return 0; } static int hello_drv_close (struct inode *node, struct file *file) { printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); return 0; } /* 2. \u5b9a\u4e49\u81ea\u5df1\u7684file_operations\u7ed3\u6784\u4f53 */ static struct file_operations hello_drv = { .owner = THIS_MODULE, .open = hello_drv_open, .read = hello_drv_read, .write = hello_drv_write, .release = hello_drv_close, }; /* 4. \u628afile_operations\u7ed3\u6784\u4f53\u544a\u8bc9\u5185\u6838\uff1a\u6ce8\u518c\u9a71\u52a8\u7a0b\u5e8f */ /* 5. \u8c01\u6765\u6ce8\u518c\u9a71\u52a8\u7a0b\u5e8f\u554a\uff1f\u5f97\u6709\u4e00\u4e2a\u5165\u53e3\u51fd\u6570\uff1a\u5b89\u88c5\u9a71\u52a8\u7a0b\u5e8f\u65f6\uff0c\u5c31\u4f1a\u53bb\u8c03\u7528\u8fd9\u4e2a\u5165\u53e3\u51fd\u6570 */ static int __init hello_init(void) // __init\u8868\u793a\u53ea\u5728\u521d\u59cb\u5316\u9636\u6bb5\u4f7f\u7528, \u6a21\u5757\u88c5\u8f7d\u540e\u5c31\u6254\u6389, \u91ca\u653e\u5185\u5b58 { int err; printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); major = register_chrdev(0, \"hello\", &hello_drv); /* /dev/hello */ hello_class = class_create(THIS_MODULE, \"hello_class\"); err = PTR_ERR(hello_class); if (IS_ERR(hello_class)) { printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); unregister_chrdev(major, \"hello\"); return -1; } device_create(hello_class, NULL, MKDEV(major, 0), NULL, \"hello\"); /* /dev/hello */ return 0; } /* 6. \u6709\u5165\u53e3\u51fd\u6570\u5c31\u5e94\u8be5\u6709\u51fa\u53e3\u51fd\u6570\uff1a\u5378\u8f7d\u9a71\u52a8\u7a0b\u5e8f\u65f6\uff0c\u5c31\u4f1a\u53bb\u8c03\u7528\u8fd9\u4e2a\u51fa\u53e3\u51fd\u6570 */ static void __exit hello_exit(void) { printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); device_destroy(hello_class, MKDEV(major, 0)); class_destroy(hello_class); unregister_chrdev(major, \"hello\"); } /* 7. \u5176\u4ed6\u5b8c\u5584\uff1a\u63d0\u4f9b\u8bbe\u5907\u4fe1\u606f\uff0c\u81ea\u52a8\u521b\u5efa\u8bbe\u5907\u8282\u70b9 */ module_init(hello_init); module_exit(hello_exit); MODULE_LICENSE(\"GPL\");","title":"A hello_drv.c"},{"location":"chapter_14/1_demo_of_led_driver/#b-hello_drv_testc","text":"\u8fd9\u4e2a\u662f\u7528\u6237\u7a7a\u95f4\u7684\u6d4b\u8bd5\u7a0b\u5e8f, \u5bf9/dev/hello \u6587\u4ef6\u8fdb\u884c\u5199\u548c\u8bfb #include <sys/types.h> #include <sys/stat.h> #include <fcntl.h> #include <unistd.h> #include <stdio.h> #include <string.h> /* * ./hello_drv_test -w abc * ./hello_drv_test -r */ int main(int argc, char **argv) { int fd; char buf[1024]; int len; /* 1. \u5224\u65ad\u53c2\u6570 */ if (argc < 2) { printf(\"Usage: %s -w <string>\\n\", argv[0]); printf(\" %s -r\\n\", argv[0]); return -1; } /* 2. \u6253\u5f00\u6587\u4ef6 */ fd = open(\"/dev/hello\", O_RDWR); if (fd == -1) { printf(\"can not open file /dev/hello\\n\"); return -1; } /* 3. \u5199\u6587\u4ef6\u6216\u8bfb\u6587\u4ef6 */ if ((0 == strcmp(argv[1], \"-w\")) && (argc == 3)) { len = strlen(argv[2]) + 1; len = len < 1024 ? len : 1024; write(fd, argv[2], len); } else { len = read(fd, buf, 1024); buf[1023] = '\\0'; printf(\"APP read : %s\\n\", buf); } close(fd); return 0; }","title":"B hello_drv_test.c"},{"location":"chapter_14/1_demo_of_led_driver/#c-makefile","text":"ifneq ($(KERNELRELEASE),) obj-m :=hello_drv.o else KDIR :=/lib/modules/$(shell uname -r)/build all: make -C $(KDIR) M=$(PWD) modules clean: rm -f *.ko *.o *.mod.o *.mod.c *.symvers *.order endif","title":"C Makefile"},{"location":"chapter_14/1_demo_of_led_driver/#d","text":"\u7f16\u8bd1\u5185\u6838\u6a21\u5757 make \u5b89\u88c5 hello_drv.ko insmod hello_drv.ko \u6d4b\u8bd5 \u5378\u8f7d\u6a21\u5757 rmmod hello_drv.ko \u67e5\u770b\u5185\u6838\u6253\u5370\u65e5\u5fd7 # tail -n 10 /var/log/messages","title":"D \u5b9e\u9a8c\u8bb0\u5f55"},{"location":"chapter_14/1_demo_of_led_driver/#e-kfifo","text":"#include <linux/module.h> #include <linux/fs.h> #include <linux/errno.h> #include <linux/miscdevice.h> #include <linux/kernel.h> #include <linux/major.h> #include <linux/mutex.h> #include <linux/proc_fs.h> #include <linux/seq_file.h> #include <linux/stat.h> #include <linux/init.h> #include <linux/device.h> #include <linux/tty.h> #include <linux/kmod.h> #include <linux/gfp.h> #include <linux/kfifo.h> /* 1. \u786e\u5b9a\u4e3b\u8bbe\u5907\u53f7 */ static int major = 0; static char kernel_buf[1024]; static struct class *hello_class; struct kfifo test_fifo; #define MIN(a, b) (a < b ? a : b) /* 3. \u5b9e\u73b0\u5bf9\u5e94\u7684open/read/write\u7b49\u51fd\u6570\uff0c\u586b\u5165file_operations\u7ed3\u6784\u4f53 */ static ssize_t hello_drv_read (struct file *file, char __user *buf, size_t size, loff_t *offset) { int err; printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); err = copy_to_user(buf, kernel_buf, MIN(1024, size)); int ret; ret = kfifo_alloc(&test_fifo,PAGE_SIZE,GFP_KERNEL); //\u521d\u59cb\u5316\u961f\u5217\uff0c\u4f7f\u7528kfifo_alloc if (ret) return 1; int i; for (i=0;i<32;i++) kfifo_in(&test_fifo, &i, sizeof(i)); //\u5199\u961f\u5217\uff0c\u4f7f\u7528kfifo_in int val; ret = kfifo_out_peek(&test_fifo,&val,sizeof(val)); //\u8bfb\u961f\u5217\u4f46\u662f\u4e0d\u771f\u6b63\u53d6\u6570\u636e\uff0c\u7528kfifo_out_peek\uff0c \u771f\u6b63\u53d6\u6570\u636e\u7528kfifo_out if (ret != sizeof(val)) return -EINVAL; printk(\"%s %s line %d val is %u\\n\", __FILE__, __FUNCTION__, __LINE__,val); while (kfifo_avail(&test_fifo)) //\u63a2\u6d4b\u961f\u5217\u4e2d\u662f\u5426\u8fd8\u6709\u6570\u636e { int val2; int ret2; ret2 = kfifo_out(&test_fifo,&val2,sizeof(val2)); if (ret2 != sizeof(val2)) return -EINVAL; printk(\"%s %s line %d val2 is %u\\n\", __FILE__, __FUNCTION__, __LINE__,val2); } kfifo_free(&test_fifo); return MIN(1024, size); } static ssize_t hello_drv_write (struct file *file, const char __user *buf, size_t size, loff_t *offset) { int err; printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); err = copy_from_user(kernel_buf, buf, MIN(1024, size)); return MIN(1024, size); } static int hello_drv_open (struct inode *node, struct file *file) { printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); return 0; } static int hello_drv_close (struct inode *node, struct file *file) { printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); return 0; } /* 2. \u5b9a\u4e49\u81ea\u5df1\u7684file_operations\u7ed3\u6784\u4f53 */ static struct file_operations hello_drv = { .owner = THIS_MODULE, .open = hello_drv_open, .read = hello_drv_read, .write = hello_drv_write, .release = hello_drv_close, }; /* 4. \u628afile_operations\u7ed3\u6784\u4f53\u544a\u8bc9\u5185\u6838\uff1a\u6ce8\u518c\u9a71\u52a8\u7a0b\u5e8f */ /* 5. \u8c01\u6765\u6ce8\u518c\u9a71\u52a8\u7a0b\u5e8f\u554a\uff1f\u5f97\u6709\u4e00\u4e2a\u5165\u53e3\u51fd\u6570\uff1a\u5b89\u88c5\u9a71\u52a8\u7a0b\u5e8f\u65f6\uff0c\u5c31\u4f1a\u53bb\u8c03\u7528\u8fd9\u4e2a\u5165\u53e3\u51fd\u6570 */ static int __init hello_init(void) // __init\u8868\u793a\u53ea\u5728\u521d\u59cb\u5316\u9636\u6bb5\u4f7f\u7528, \u6a21\u5757\u88c5\u8f7d\u540e\u5c31\u6254\u6389, \u91ca\u653e\u5185\u5b58 { int err; printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); major = register_chrdev(0, \"hello\", &hello_drv); /* /dev/hello */ hello_class = class_create(THIS_MODULE, \"hello_class\"); err = PTR_ERR(hello_class); if (IS_ERR(hello_class)) { printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); unregister_chrdev(major, \"hello\"); return -1; } device_create(hello_class, NULL, MKDEV(major, 0), NULL, \"hello\"); /* /dev/hello */ return 0; } /* 6. \u6709\u5165\u53e3\u51fd\u6570\u5c31\u5e94\u8be5\u6709\u51fa\u53e3\u51fd\u6570\uff1a\u5378\u8f7d\u9a71\u52a8\u7a0b\u5e8f\u65f6\uff0c\u5c31\u4f1a\u53bb\u8c03\u7528\u8fd9\u4e2a\u51fa\u53e3\u51fd\u6570 */ static void __exit hello_exit(void) { printk(\"%s %s line %d\\n\", __FILE__, __FUNCTION__, __LINE__); device_destroy(hello_class, MKDEV(major, 0)); class_destroy(hello_class); unregister_chrdev(major, \"hello\"); } /* 7. \u5176\u4ed6\u5b8c\u5584\uff1a\u63d0\u4f9b\u8bbe\u5907\u4fe1\u606f\uff0c\u81ea\u52a8\u521b\u5efa\u8bbe\u5907\u8282\u70b9 */ module_init(hello_init); module_exit(hello_exit); MODULE_LICENSE(\"GPL\");","title":"E \u5185\u6838\u961f\u5217 kfifo \u4f7f\u7528"},{"location":"chapter_14/1_demo_of_led_driver/#5-devnull-devfull","text":"\u57fa\u4e8e\u4e0a\u9762\u7684\u7406\u89e3, /dev/null \u8bbe\u5907\u7684\u5b9e\u73b0\u5c31\u5f88\u597d\u5b9e\u73b0 \u4ece\u7a7a\u8bbe\u5907\u8bfb\u53d6\u65f6\u4ec0\u4e48\u4e5f\u4e0d\u8fd4\u56de, \u4ee3\u7801\u5982\u4e0b: static ssize_t read_null (struct file *file, const char __user *buf, size_t size, loff_t *offset) { return 0; } \u65e0\u8bba\u7528\u6237\u7a7a\u95f4\u600e\u4e48\u5199\u90fd\u5199\u4e0d\u6ee1, \u4ee3\u7801\u5982\u4e0b: static ssize_t write_null (struct file *file, const char __user *buf, size_t size, loff_t *offset) { return count; }","title":"5 \u5173\u4e8e/dev/null \u548c /dev/full \u7b49\u5b57\u7b26\u8bbe\u5907"},{"location":"chapter_14/2_qianrushidev/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3\u4e00\u4e9b\u5d4c\u5165\u5f0f Linux \u7cfb\u7edf\u5f00\u53d1\u57fa\u7840 \u4e00 \u5404\u79cd\u57fa\u7840\u6982\u5ff5 1 \u7f16\u8bd1\u597d\u7684\u5185\u6838\u5206\u4e3a\u54ea\u4e9b\u6a21\u5757 \u7f16\u8bd1\u597d\u4e4b\u540e\u7684 Linux \u5185\u6838\u5206\u4e3a\u5185\u6838\u6587\u4ef6 zImage\u3001\u8bbe\u5907\u6811\u6587\u4ef6\u3001\u5404\u7c7b\u5185\u6838\u6a21\u5757, \u628a\u4ed6\u4eec\u66ff\u6362\u5230\u4e00\u53f0 Linux \u4e3b\u673a\u4e0a\u5c31\u53ef\u4ee5\u66ff\u6362\u6574\u4e2a\u7cfb\u7edf\u5185\u6838 2 \u4ec0\u4e48\u662f\u4ea4\u53c9\u7f16\u8bd1? \u6240\u8c13\u4ea4\u53c9\u7f16\u8bd1, \u5176\u4e2d\u4e00\u4e2a\u4f8b\u5b50\u5c31\u662f\u5728 x86 CPU \u7684\u4e3b\u673a\u4e0a\u7f16\u8bd1\u4e00\u4e2a\u53ef\u4ee5\u5728 Arm CPU \u4e0a\u53ef\u4ee5\u8fd0\u884c\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6, \u6709\u76f8\u5e94\u7684\u5de5\u5177\u94fe. 3 \u4ec0\u4e48\u662f eMMC eMMC \u662f embedded MultiMediaCard \u7684\u7b80\u79f0\u3002MultiMediaCard\uff0c\u5373 MMC\uff0c\u662f\u4e00\u79cd\u95ea\u5b58\u5361(Flash Memory Card)\u6807\u51c6\uff0c\u5b83\u5b9a\u4e49\u4e86 MMC \u7684\u67b6\u6784\u4ee5\u53ca\u8bbf\u95ee Flash Memory \u7684\u63a5\u53e3\u548c\u534f\u8bae\u3002\u800c eMMC \u5219\u662f\u5bf9 MMC \u7684\u4e00\u4e2a\u62d3\u5c55\uff0c\u4ee5\u6ee1\u8db3\u66f4\u9ad8\u6807\u51c6\u7684\u6027\u80fd\u3001\u6210\u672c\u3001\u4f53\u79ef\u3001\u7a33\u5b9a\u3001\u6613\u7528\u7b49\u7684\u9700\u6c42\u3002 \u4e2a\u4eba\u7406\u89e3\u4e3a\u5d4c\u5165\u5f0f\u5f00\u53d1\u677f\u4e0a\u81ea\u5e26\u7684\u95ea\u5b58 4 \u4ec0\u4e48\u662f SoC \u5355\u7247\u7cfb\u7edf\u6216\u7247\u4e0a\u7cfb\u7edf\uff08\u82f1\u8bed\uff1aSystem on a Chip\uff0c\u7f29\u5199\uff1aSoC\uff09\u662f\u4e00\u4e2a\u5c06\u7535\u8111\u6216\u5176\u4ed6\u7535\u5b50\u7cfb\u7edf\u96c6\u6210\u5230\u5355\u4e00\u82af\u7247\u7684\u96c6\u6210\u7535\u8def. 4.1 \u4ec0\u4e48\u662f SFR \u7279\u6b8a\u529f\u80fd\u5bc4\u5b58\u5668\uff08special function register,SFR\uff09 4.2 \u7269\u7406\u5730\u5740\u548c\u5bf9\u5e94\u5f15\u811a\u7684\u5173\u7cfb \u8fd9\u7bc7\u6587\u7ae0 \u5f88\u6709\u610f\u601d, \u89e3\u91ca\u4e86\u7269\u7406\u5730\u5740\u548c\u5bf9\u5e94\u5f15\u811a\u7684\u5173\u7cfb. \u5bc4\u5b58\u5668\u662f RAM \u548c ROM \u7684\u7edf\u79f0 . (\u8bf4\u5230\u5e95\u5bc4\u5b58\u5668\u5c31\u662f RAM \u548c ROM, \u6709\u7269\u7406\u5730\u5740, \u6bd4\u5982 0x90. \u800c\u8fd0\u7ef4\u5de5\u7a0b\u5e08\u7531\u4e8e\u5e38\u5e74\u63a5\u89e6\u7ebf\u4e0a\u670d\u52a1\u5668\u603b\u4ee5\u4e3a RAM \u5f88\u5927,\u5c11\u5219 128GB \u591a\u5219 384GB, \u5176\u5b9e\u4e5f\u6709\u5f88\u591a\u5f88\u591a\u5f88\u5c0f\u7684 RAM) \u5c31\u50cf\u732b\u79d1\u52a8\u7269\u662f\u8001\u864e\u4e0e\u72ee\u5b50\u7684\u7edf\u79f0\u4e00\u6837 ROM/RAM \u5bf9\u4e8e\u73a9\u7535\u8111\u7684\u4eba\u5e76\u4e0d\u964c\u751f\uff0c\u4ec0\u4e48\u5185\u5b58 3G\uff08\u5185\u5b58\u5c31\u662f RAM\uff09\uff0c- - \u786c\u76d8 100G\uff08\u786c\u76d8\u5c31\u662f ROM\uff09 \u5355\u7247\u673a\u91cc\u9762\u548c\u7535\u8111\u4e00\u6837\uff0c\u6709 ROM \u548c RAM \u4e4b\u5206 \u4e00\u5f00\u59cb\u5355\u7247\u673a\u6ca1\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u5355\u7247\u673a\u4e0d\u8ba4\u5f97\u4ec0\u4e48\u53eb P1 \u53e3 \u4ed6\u53ea\u77e5\u9053 P1 \u53e3\u7684 8 \u53ea\u5f15\u811a\uff0c\u662f\u8fde\u7740\u5185\u90e8\u5730\u5740 0x90 \u7b80\u6d01\u6765\u8bf4\u5c31\u662f\uff0cP1 \u53e3\u8fd9\u4e9b\u5f15\u811a\u5c31\u662f 0x90 \u5730\u5740\u5ef6\u4f38\u51fa\u6765\u7684\u5f15\u811a\uff0c\u5728\u6ca1\u7a0b\u5e8f\u7684\u60c5\u51b5\u4e0b\uff0c\u5355\u7247\u673a\u662f\u4e0d\u77e5\u9053\u4ec0\u4e48\u53eb P1 \u53e3\u7684\uff0c\u4ed6\u53ea\u77e5\u9053 0x90 \u5730\u5740\u548c\u5916\u90e8\u7684\u5f15\u811a\u5c31\u8fd9\u4e48\u8fde\u7740\uff0c\u4f60\u4e5f\u53ef\u4ee5\u62ff\u7740 0x80\uff0c0x90\uff0c\u8fd9\u4e9b\u5730\u5740\u53bb\u7f16\u5199\u6211\u4eec\u7684\u7a0b\u5e8f\uff0c\u4e00\u4e2a\u4e24\u4e2a\u5012\u662f\u65e0\u6240\u8c13\uff0c\u4f46\u662f\u591a\u51e0\u4e2a\u4f60\u5c31\u4f1a\u89c9\u5f97\u5f88\u70e6\u4e86 \u6240\u4ee5 sfr P1 = 0x90\uff0c\u5c31\u662f\u628a\u5355\u7247\u673a\u7684\u5730\u5740 0x90 \u6539\u540d\u5b57\u4e3a P1\uff0c\u65b9\u4fbf\u6211\u4eec\u4f7f\u7528\uff0c\u660e\u767d\u4e86\u5417\uff1f \u4e00\u4e2a\u5f04\u660e\u767d\u540e\uff0c\u5269\u4e0b\u7684\u4e00\u5806\uff0c\u4f60\u5c31\u61c2\u4e86 sfr P1 = 0x90; sfr P2 = 0xA0; sfr P3 = 0xB0; sfr PSW = 0xD0; sfr ACC = 0xE0; \u7b80\u5355\u6765\u4e86\u5c31\u662f\u4e3a RAM \u91cc\u9762\u7684\u5730\u5740\u6539\u540d\u5b57\u65b9\u4fbf\u6211\u4eec\u7528 \u5176\u5b9e\u8fd9\u4e9b\u4e1c\u897f\u4f60\u4e0d\u7528\u8fc7\u4e8e\u7814\u7a76\u7684\uff0c\u4f60\u4e86\u89e3\u4e00\u4e0b\u5c31\u53ef\u4ee5\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u5199\u7a0b\u5e8f\u4e2d\u80af\u5b9a\u6709\u4e00\u4e2a reg52.h \u7684\u5934\u6587\u4ef6\uff0c\u56e0\u4e3a\u5b9a\u4e49\u540d\u5b57\u8fd9\u4e2a\u4e8b\u60c5\u5c31\u5728\u8fd9\u4e2a\u5934\u6587\u4ef6\u91cc\u9762\u4e86\uff0c\u4f60\u4f1a\u8c03\u7528\u5c31\u884c\uff0c\u4e0d\u7528\u8fc7\u4e8e\u7814\u7a76\u3002 \u603b\u7ed3\u5982\u4e0b : \u5728\u6ca1\u7a0b\u5e8f\u7684\u60c5\u51b5\u4e0b\uff0c\u5355\u7247\u673a\u662f\u4e0d\u77e5\u9053\u4ec0\u4e48\u53eb P1 \u53e3\u7684\uff0c\u4ed6\u53ea\u77e5\u9053 0x90 \u5730\u5740\u548c\u5916\u90e8\u7684\u5f15\u811a\u5c31\u8fd9\u4e48\u8fde\u7740\uff0c\u4f60\u4e5f\u53ef\u4ee5\u62ff\u7740 0x80\uff0c0x90\uff0c\u8fd9\u4e9b\u5730\u5740\u53bb\u7f16\u5199\u6211\u4eec\u7684\u7a0b\u5e8f\uff0c\u4e00\u4e2a\u4e24\u4e2a\u5012\u662f\u65e0\u6240\u8c13\uff0c\u4f46\u662f\u591a\u51e0\u4e2a\u4f60\u5c31\u4f1a\u89c9\u5f97\u5f88\u70e6\u4e86 \u6240\u4ee5 sfr P1 = 0x90\uff0c\u5c31\u662f\u628a\u5355\u7247\u673a\u7684\u5730\u5740 0x90 \u6539\u540d\u5b57\u4e3a P1\uff0c\u65b9\u4fbf\u6211\u4eec\u4f7f\u7528. \u4e5f\u5c31\u662f\u8bf4\u5916\u8bbe\u63a5\u5165\u4e00\u53f0 Linux \u4e3b\u673a\u540e, \u5176\u5b9e\u5b83\u7684\u7269\u7406\u5185\u5b58\u5730\u5740\u662f\u56fa\u5b9a\u7684(\u8fd9\u4e2a\u662f\u786c\u4ef6\u8bbe\u8ba1\u7684\u65f6\u5019\u5c31\u505a\u597d\u7684). \u6211\u4eec\u5199\u9a71\u52a8\u7a0b\u5e8f\u7684\u65f6\u5019, \u6700\u6700\u5e95\u5c42\u5c31\u8bf4\u53bb\u64cd\u4f5c\u8fd9\u4e9b\u7269\u7406\u5185\u5b58\u5730\u5740(\u53d6\u503c\u3001\u8d4b\u503c\u3001\u4fee\u6539) 5 Linux \u8bbe\u5907\u6811\uff08Device Tree\uff09\u7b80\u4ecb 5.1 DTS (device tree source) .dts \u6587\u4ef6\u662f\u4e00\u79cd ASCII \u6587\u672c\u683c\u5f0f\u7684 Device Tree \u63cf\u8ff0\uff0c\u6b64\u6587\u672c\u683c\u5f0f\u975e\u5e38\u4eba\u6027\u5316\uff0c\u9002\u5408\u4eba\u7c7b\u7684\u9605\u8bfb\u4e60\u60ef\u3002\u57fa\u672c\u4e0a\uff0c\u5728 ARM Linux \u5728\uff0c\u4e00\u4e2a.dts \u6587\u4ef6\u5bf9\u5e94\u4e00\u4e2a ARM \u7684 machine\uff0c\u4e00\u822c\u653e\u7f6e\u5728\u5185\u6838\u7684 arch/arm/boot/dts/\u76ee\u5f55\u3002\u7531\u4e8e\u4e00\u4e2a SoC \u53ef\u80fd\u5bf9\u5e94\u591a\u4e2a machine\uff08\u4e00\u4e2a SoC \u53ef\u4ee5\u5bf9\u5e94\u591a\u4e2a\u4ea7\u54c1\u548c\u7535\u8def\u677f\uff09\uff0c\u52bf\u5fc5\u8fd9\u4e9b.dts \u6587\u4ef6\u9700\u5305\u542b\u8bb8\u591a\u5171\u540c\u7684\u90e8\u5206\uff0cLinux \u5185\u6838\u4e3a\u4e86\u7b80\u5316\uff0c\u628a SoC \u516c\u7528\u7684\u90e8\u5206\u6216\u8005\u591a\u4e2a machine \u5171\u540c\u7684\u90e8\u5206\u4e00\u822c\u63d0\u70bc\u4e3a.dtsi\uff0c\u7c7b\u4f3c\u4e8e C \u8bed\u8a00\u7684\u5934\u6587\u4ef6\u3002\u5176\u4ed6\u7684 machine \u5bf9\u5e94\u7684.dts \u5c31 include \u8fd9\u4e2a.dtsi\u3002 5.2 DTC (device tree compiler) \u5c06.dts \u7f16\u8bd1\u4e3a.dtb \u7684\u5de5\u5177\u3002DTC \u7684\u6e90\u4ee3\u7801\u4f4d\u4e8e\u5185\u6838\u7684 scripts/dtc \u76ee\u5f55\uff0c\u5728 Linux \u5185\u6838\u4f7f\u80fd\u4e86 Device Tree \u7684\u60c5\u51b5\u4e0b\uff0c\u7f16\u8bd1\u5185\u6838\u7684\u65f6\u5019\u4e3b\u673a\u5de5\u5177 dtc \u4f1a\u88ab\u7f16\u8bd1\u51fa\u6765\uff0c\u5bf9\u5e94 scripts/dtc/Makefile \u4e2d\u7684\u201chostprogs-y := dtc\u201d\u8fd9\u4e00 hostprogs \u7f16\u8bd1 target\u3002 \u5728 Linux \u5185\u6838\u7684 arch/arm/boot/dts/Makefile \u4e2d\uff0c\u63cf\u8ff0\u4e86\u5f53\u67d0\u79cd SoC \u88ab\u9009\u4e2d\u540e\uff0c\u54ea\u4e9b.dtb \u6587\u4ef6\u4f1a\u88ab\u7f16\u8bd1\u51fa\u6765\u3002 5.3 Device Tree Blob (.dtb) .dtb \u662f.dts \u88ab DTC \u7f16\u8bd1\u540e\u7684\u4e8c\u8fdb\u5236\u683c\u5f0f\u7684 Device Tree \u63cf\u8ff0\uff0c\u53ef\u7531 Linux \u5185\u6838\u89e3\u6790\u3002\u901a\u5e38\u5728\u6211\u4eec\u4e3a\u7535\u8def\u677f\u5236\u4f5c NAND\u3001SD \u542f\u52a8 image \u65f6\uff0c\u4f1a\u4e3a.dtb \u6587\u4ef6\u5355\u72ec\u7559\u4e0b\u4e00\u4e2a\u5f88\u5c0f\u7684\u533a\u57df\u4ee5\u5b58\u653e\u4e4b\uff0c\u4e4b\u540e bootloader \u5728\u5f15\u5bfc kernel \u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u5148\u8bfb\u53d6\u8be5.dtb \u5230\u5185\u5b58\u3002 \u5c06 dtb \u53cd\u7f16\u8bd1\u6210 dts $ dtc -I dtb -O dts -o .dts .dtb \u6216 $ dtc -I dtb -O dts .dtb > .dts 6 \u4ec0\u4e48\u662f\u70e7\u5199 \u5177\u4f53\u7684\u6848\u4f8b\u662f: Windows \u4e0a\u4f7f\u7528\u4e13\u95e8\u7684\u5de5\u5177\u8f6f\u4ef6, \u5c06\u7f16\u8bd1\u597d\u7684 Linux \u7cfb\u7edf\u5b8c\u6574\u955c\u50cf\u6587\u4ef6(\u5305\u62ec uboot\u3001zImage\u3001\u8bbe\u5907\u6811\u6587\u4ef6)\u70e7\u5199\u5230\u5f00\u53d1\u677f\u7684 eMMC \u6216\u8005 SD \u5361\u4e0a, \u4ee5\u5b8c\u6210\u6574\u4e2a\u7cfb\u7edf\u66ff\u6362\u7684\u8fc7\u7a0b. \u53ef\u4ee5\u89e3\u51b3\u4eba\u4e3a\u5c06\u5f00\u53d1\u677f\u7cfb\u7edf\u7834\u574f\u5bfc\u81f4\u7cfb\u7edf\u8fd0\u884c\u4e0d\u6b63\u5e38\u7b49\u95ee\u9898. \u70e7\u5199 \u5c31\u662f\u5c06\u5199\u597d\u7684\u7a0b\u5e8f\u7f16\u8bd1\u597d\u5f62\u6210 HEX \u6216 BIN \u6587\u4ef6\u540e\uff0c\u5c06\u8fd9\u4e2a\u7a0b\u5e8f\u5199\u8fdb\u5355\u7247\u673a\u82af\u7247\u7684\u8fc7\u7a0b\u5c31\u53eb\u70e7\u5199\u3002 \u662f\u6cbf\u7528\u6700\u65e9\u7684\u5355\u7247\u673a\u53ea\u80fd\u4e00\u6b21\u6027\u5199\u5165\uff0c\u56e0\u6b64\u5c31\u53eb\u505a\u70e7\u5199\u3002\u540e\u6765\u6709\u4e86\u7d2b\u5916\u7ebf\u53ef\u64e6\u9664\u7684 EEPROM\uff0c\u73b0\u5728\u6709\u4e86\u53ef\u968f\u65f6\u64e6\u9664\u7684 FLASH ROM\uff0c\u4f46\u4f9d\u7136\u6cbf\u7528\u53eb\u70e7\u5199\u4e86\uff0c\u8fd9\u6837\u4e5f\u65b9\u4fbf\u7279\u6307 PC \u5411 MCU \u5199\u5165\u7a0b\u5e8f\u3002\u514d\u5f97\u548c\u5355\u7247\u673a\u5de5\u4f5c\u65f6\u4e32\u53e3\u7684\u4e0a\u4f20\u548c\u4e0b\u6b21\u6570\u636e\u76f8\u6df7\u6dc6\u3002 7 \u4ec0\u4e48\u662f STM32 STM32 \u662f\u610f\u6cd5\u534a\u5bfc\u4f53 (STMicroelectronics) \u516c\u53f8\u63a8\u51fa\u7684\u65b0\u4e00\u4ee3\u57fa\u4e8e Cortex-M \u5185\u6838\u7684 32 \u4f4d\u5fae\u63a7\u5236\u5668\u7cfb\u5217\u3002STM32 \u4ee5\u5176\u9ad8\u6027\u80fd\u3001\u4f4e\u529f\u8017\u3001\u4e00\u6d41\u7684\u5916\u8bbe\u3001\u7b80\u5355\u6613\u7528\u7b49\u7279\u70b9\u5728\u8fd1\u51e0\u5e74\u8fc5\u901f\u53d1\u5c55\uff0c\u5360\u9886\u4e86\u5f88\u5927\u5e02\u573a\uff0c\u5f97\u5230\u4e86\u5f88\u591a\u5f00\u53d1\u8005\u9752\u7750\u3002 \u53c2\u8003 stm32 \u7684\u7528\u9014\u5f88\u5e7f \uff0c\u6211\u4eec\u8eab\u8fb9\u968f\u5904\u53ef\u89c1\u3002STM32 \u5c5e\u4e8e\u4e00\u4e2a\u5fae\u63a7\u5236\u5668\uff0c\u81ea\u5e26\u4e86\u5404\u79cd\u5e38\u7528\u901a\u4fe1\u63a5\u53e3\uff0c\u6bd4\u5982 USART\u3001 I2C\u3001 SPI \u7b49\uff0c\u53ef\u63a5\u975e\u5e38\u591a\u7684\u4f20\u611f\u5668\uff0c\u53ef\u4ee5\u63a7\u5236\u5f88\u591a\u7684\u8bbe\u5907\u3002\u6bd4\u5982\u667a\u80fd\u624b\u73af\uff0c\u5fae\u578b\u56db\u8f74\u98de\u884c\u5668\uff0c\u5e73\u8861\u8f66\u3001\u79fb\u52a8 POST \u673a\uff0c\u667a\u80fd\u7535\u996d\u9505\uff0c 3D \u6253\u5370\u673a\u7b49\u7b49\u3002\u5c0f\u7c73\u7684\u5f88\u591a\u8bbe\u5907\u91cc\u90fd\u6709\u4f7f\u7528 stm32\u3002 STM32\uff0c\u4ece\u5b57\u9762\u4e0a\u6765\u7406\u89e3\uff0c ST \u662f\u610f\u6cd5\u534a\u5bfc\u4f53\uff0c M \u662f Microelectronics \u7684\u7f29\u5199\uff0c 32 \u8868\u793a 32 \u4f4d\uff0c\u5408\u8d77\u6765\u7406\u89e3\uff0c STM32 \u5c31\u662f\u6307 ST \u516c\u53f8\u5f00\u53d1\u7684 32 \u4f4d\u5fae\u63a7\u5236\u5668\u3002 8 \u4ec0\u4e48\u662f GPIO A \u57fa\u7840\u6982\u5ff5 General Purpose Input Output(\u901a\u7528\u8f93\u5165/\u8f93\u51fa.) GPIO \u662f\u901a\u7528\u8f93\u5165/\u8f93\u51fa\u7aef\u53e3\u7684\u7b80\u79f0\uff0c\u662f STM32 \u53ef\u63a7\u5236\u7684\u5f15\u811a\u3002GPIO \u7684\u5f15\u811a\u4e0e\u5916\u90e8\u786c\u4ef6\u8bbe\u5907\u8fde\u63a5\uff0c\u53ef\u5b9e\u73b0\u4e0e\u5916\u90e8\u901a\u8baf\u3001\u63a7\u5236\u5916\u90e8\u786c\u4ef6\u6216\u8005\u91c7\u96c6\u5916\u90e8\u786c\u4ef6\u6570\u636e\u7684\u529f\u80fd\u3002 \u5176\u5b9e GPIO \u7684\u672c\u8d28\u5c31\u662f\u82af\u7247\u7684\u4e00\u4e2a\u5f15\u811a\uff0c\u901a\u5e38\u5728 ARM \u4e2d\u6240\u6709\u7684 I/O \u90fd\u662f\u901a\u7528\u7684\u3002\u4e0d\u8fc7\u7531\u4e8e\u6bcf\u4e2a\u5f00\u53d1\u677f\u4e0a\u90fd\u4f1a\u8bbe\u8ba1\u4e0d\u540c\u7684\u5916\u56f4\u7535\u8def\uff0c\u8fd9\u5c31\u9020\u6210 GPIO \u7684\u529f\u80fd\u53ef\u80fd\u6709\u6240\u4e0d\u540c. B GPIO \u7684 8 \u79cd\u8f93\u5165\u8f93\u51fa\u6a21\u5f0f GPIO \u5171\u6709 8 \u4e2d\u8f93\u5165\u8f93\u51fa\u6a21\u5f0f\uff0c\u5206\u522b\u662f\uff1a \u4e0a\u62c9\u8f93\u5165 \u3001 \u4e0b\u62c9\u8f93\u5165 \u3001 \u6d6e\u7a7a\u8f93\u5165 \u3001 \u6a21\u62df\u8f93\u5165 \u3001 \u5f00\u6f0f\u8f93\u51fa \u3001 \u63a8\u633d\u8f93\u51fa \u3001 \u5f00\u6f0f\u590d\u7528\u8f93\u51fa \u3001 \u63a8\u633d\u590d\u7528\u8f93\u51fa \uff0c\u4e0b\u9762\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4ee5\u4e0b\u4e0a\u9762\u7684\u516b\u79cd\u8f93\u5165\u8f93\u51fa\u6a21\u5f0f\u3002 \u4e0a\u62c9\u8f93\u5165\uff1a GPIO_Mode_IPU \u4e0b\u62c9\u8f93\u5165\uff1a GPIO_Mode_IPD \u6d6e\u7a7a\u8f93\u5165\uff1a GPIO_Mode_IN_FLOATING \u6a21\u62df\u8f93\u5165\uff1a GPIO_Mode_AIN \u5f00\u6f0f\u8f93\u51fa\uff1a GPIO_Mode_Out_OD \u63a8\u633d\u8f93\u51fa\uff1a GPIO_Mode_Out_PP \u5f00\u6f0f\u590d\u7528\uff1a GPIO_Mode_AF_OD \u63a8\u5b8c\u590d\u7528\uff1a GPIO_Mode_AF_PP 9 \u4ec0\u4e48\u662f FPGA A \u57fa\u7840\u524d\u63d0 \u8981\u77e5\u9053 CPU\u3001GPU\u3001FPGA \u4e09\u8005\u80fd\u529b\u76f8\u52a0\u5c31\u662f\u82af\u7247\u7684\u672a\u6765\uff01 FPGA \u95e8\u69db\u4e4b\u9ad8\u5728\u82af\u7247\u884c\u4e1a\u91cc\u65e0\u51fa\u5176\u53f3\u3002 FPGA \u662f\u4e00\u4e2a\u672c\u9886\u7fa4\u96c6\u578b\u7684\u884c\u4e1a\uff0c\u6ca1\u6709\u575a\u5b9e\u7684\u672c\u9886\u529f\u5e95\uff0c\u5f88\u96be\u9020\u6210\u6709\u89d2\u9010\u529b\u7684\u4ea7\u7269\u3002 B \u57fa\u7840\u6982\u5ff5 1 FPGA FPGA \u662f\u4e00\u79cd\u786c\u4ef6\u53ef\u91cd\u6784\u7684\u4f53\u7cfb\u7ed3\u6784\u3002\u5b83\u7684\u82f1\u6587\u5168\u79f0\u662f Field Programmable Gate Array\uff0c\u4e2d\u6587\u540d\u662f\u73b0\u573a\u53ef\u7f16\u7a0b\u95e8\u9635\u5217\u3002 FPGA \u662f\u4e00\u4e2a\u53ef\u4ee5\u901a\u8fc7\u7f16\u7a0b\u6765\u6539\u53d8\u5185\u90e8\u7ed3\u6784\u7684\u82af\u7247. FPGA \u5e94\u7528\u573a\u666f: 1 \u7528\u4f5c\u4e13\u7528\u82af\u7247\uff08ASIC\uff09\u7684\u5c0f\u6279\u91cf\u66ff\u4ee3\u54c1\uff0c 2 \u540c\u65f6\u4e5f\u5728\u5fae\u8f6f\u3001\u767e\u5ea6\u7b49\u516c\u53f8\u7684\u6570\u636e\u4e2d\u5fc3\u5927\u89c4\u6a21\u90e8\u7f72\uff0c\u4ee5\u540c\u65f6\u63d0\u4f9b\u5f3a\u5927\u7684\u8ba1\u7b97\u80fd\u529b\u548c\u8db3\u591f\u7684\u7075\u6d3b\u6027\u3002 2 IP \u6838 FPGA \u6709\u4e2a\u6700\u91cd\u8981\u7684\u6982\u5ff5\u5c31\u662f IP \u6838\u3002 IP(Intelligent Property) \u6838\u662f\u5177\u6709\u77e5\u8bc6\u4ea7\u6743\u6838\u7684\u96c6\u6210\u7535\u8def\u82af\u6838\u603b\u79f0\uff0c\u662f\u7ecf\u8fc7\u53cd\u590d\u9a8c\u8bc1\u8fc7\u7684\u3001\u5177\u6709\u7279\u5b9a\u529f\u80fd\u7684\u5b8f\u6a21\u5757\uff0c\u4e0e\u82af\u7247\u5236\u9020\u5de5\u827a\u65e0\u5173\uff0c\u53ef\u4ee5\u79fb\u690d\u5230\u4e0d\u540c\u7684\u534a\u5bfc\u4f53\u5de5\u827a\u4e2d\u3002 \u5982\u679c\u8fd8\u4e0d\u7406\u89e3\uff0c\u4f60\u5c31\u5f53\u4ed6\u662f\u4e00\u4e2a\u8f6f\u4ef6\u6a21\u5757\uff0c\u6216\u8005\u662f\u4e00\u4e2a\u79ef\u6728\u7684\u90e8\u4ef6\u3002 \u6bd4\u5982\u8d5b\u7075\u601d\u5df2\u7ecf\u57fa\u4e8e FPGA \u8bbe\u8ba1\u597d\u4e86 UDP \u6838\u3001PCIE xDMA \u6838\u3001UART \u6838\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628a\u4eba\u5bb6\u7684\u6838\u6dfb\u52a0\u5230\u6211\u4eec\u5de5\u7a0b\u4e2d\uff0c\u90a3\u4e48\u5c31\u76f8\u5f53\u4e8e\u4e0e\u6211\u4eec\u7684\u677f\u5b50\u5df2\u7ecf\u652f\u6301\u4e86\u8fd9\u4e2a\u529f\u80fd\u3002 \u5bf9\u4e8e FPGA \u5f00\u53d1\u8f6f\u4ef6\uff0c \u5176\u63d0\u4f9b\u7684 IP \u6838\u8d8a\u4e30\u5bcc\uff0c\u7528\u6237\u7684\u8bbe\u8ba1\u5c31\u8d8a\u65b9\u4fbf\uff0c\u5176\u5e02\u573a\u5360\u7528\u7387\u5c31\u8d8a\u9ad8\u3002 \u4e00\u53e5\u8bdd\uff1aIP \u6838\u5f88\u503c\u94b1\uff01 C FPGA \u4e0e GPU \u7684\u533a\u522b FPGA \u4e0e GPU \u7684\u533a\u522b\u672c\u8d28\u4e0a\u662f\u4f53\u7cfb\u7ed3\u6784\u7684\u533a\u522b CPU\u3001GPU \u90fd\u5c5e\u4e8e\u51af\u00b7\u8bfa\u4f9d\u66fc\u7ed3\u6784\uff0c\u6307\u4ee4\u8bd1\u7801\u6267\u884c\u3001\u5171\u4eab\u5185\u5b58\u3002 FPGA \u672c\u8d28\u4e0a\u662f\u65e0\u6307\u4ee4\u3001\u65e0\u9700\u5171\u4eab\u5185\u5b58\u7684\u4f53\u7cfb\u7ed3\u6784\u3002 10 MCU \u548c MPU 10.1 \u662f\u4ec0\u4e48 MCU\uff08Microcontroller Unit\uff09\u548c MPU\uff08Microprocessor Unit\uff09\u662f\u4e24\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u5d4c\u5165\u5f0f\u5904\u7406\u5668 \u4e00\u4e2a\u662f\u5fae\u63a7\u5236\u5668\u3001\u4e00\u4e2a\u5fae\u5904\u7406\u5668 10.2 \u533a\u522b 1 \u7528\u9014 MCU\uff1aMCU \u901a\u5e38\u7528\u4e8e\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u8fd9\u4e9b\u7cfb\u7edf\u9700\u8981\u6267\u884c\u7279\u5b9a\u7684\u63a7\u5236\u4efb\u52a1\uff0c\u5982\u4f20\u611f\u5668\u6570\u636e\u91c7\u96c6\u3001\u81ea\u52a8\u63a7\u5236\u3001\u5d4c\u5165\u5f0f\u8bbe\u5907\u63a7\u5236\u7b49\u3002\u5b83\u4eec\u4e13\u6ce8\u4e8e\u5b9e\u65f6\u63a7\u5236\u548c\u4f4e\u529f\u8017\u64cd\u4f5c\u3002 MPU\uff1aMPU \u66f4\u7c7b\u4f3c\u4e8e\u901a\u7528\u8ba1\u7b97\u673a\u5904\u7406\u5668\uff0c\u901a\u5e38\u7528\u4e8e\u6267\u884c\u66f4\u590d\u6742\u7684\u901a\u7528\u8ba1\u7b97\u4efb\u52a1\uff0c\u8fd0\u884c\u64cd\u4f5c\u7cfb\u7edf\u4ee5\u53ca\u652f\u6301\u5404\u79cd\u5e94\u7528\u7a0b\u5e8f\uff0c\u5982\u667a\u80fd\u624b\u673a\u3001\u4e2a\u4eba\u7535\u8111\u3001\u670d\u52a1\u5668\u7b49\u3002 2 \u5904\u7406\u5668\u6838\u5fc3 MCU\uff1aMCU \u901a\u5e38\u4f7f\u7528\u8f83\u7b80\u5355\u7684\u5904\u7406\u5668\u6838\u5fc3\uff0c\u5982\u57fa\u4e8e RISC\uff08\u7cbe\u7b80\u6307\u4ee4\u96c6\u8ba1\u7b97\u673a\uff09\u67b6\u6784\u7684\u6838\u5fc3\u3002\u8fd9\u4e9b\u6838\u5fc3\u4e13\u6ce8\u4e8e\u6267\u884c\u5d4c\u5165\u5f0f\u63a7\u5236\u4efb\u52a1\uff0c\u901a\u5e38\u6027\u80fd\u8f83\u4f4e\u3002 MPU\uff1aMPU \u4f7f\u7528\u66f4\u5f3a\u5927\u7684\u901a\u7528\u5904\u7406\u5668\u6838\u5fc3\uff0c\u5177\u6709\u66f4\u9ad8\u7684\u6027\u80fd\u548c\u66f4\u590d\u6742\u7684\u6307\u4ee4\u96c6\uff0c\u9002\u7528\u4e8e\u901a\u7528\u8ba1\u7b97\u4efb\u52a1\u3002 3 \u5185\u5b58\u548c\u5b58\u50a8 MCU\uff1aMCU \u901a\u5e38\u5177\u6709\u8f83\u5c0f\u7684\u5185\u5b58\u548c\u5b58\u50a8\u5bb9\u91cf\uff0c\u8db3\u4ee5\u652f\u6301\u5d4c\u5165\u5f0f\u63a7\u5236\u4efb\u52a1\uff0c\u4f46\u4e0d\u9002\u7528\u4e8e\u8fd0\u884c\u5927\u578b\u5e94\u7528\u7a0b\u5e8f\u6216\u64cd\u4f5c\u7cfb\u7edf\u3002 MPU\uff1aMPU \u901a\u5e38\u5177\u6709\u66f4\u5927\u7684\u5185\u5b58\u548c\u5b58\u50a8\u5bb9\u91cf\uff0c\u4ee5\u652f\u6301\u8fd0\u884c\u590d\u6742\u7684\u5e94\u7528\u7a0b\u5e8f\u548c\u64cd\u4f5c\u7cfb\u7edf\u3002 4 \u5916\u8bbe\u548c\u63a5\u53e3 MCU\uff1aMCU \u901a\u5e38\u96c6\u6210\u4e86\u7279\u5b9a\u4e8e\u5d4c\u5165\u5f0f\u63a7\u5236\u4efb\u52a1\u7684\u5916\u8bbe\u548c\u63a5\u53e3\uff0c\u5982\u6a21\u62df/\u6570\u5b57\u8f6c\u6362\u5668\uff08ADC\uff09\u3001\u4e32\u53e3\u901a\u4fe1\uff08UART\uff09\u3001\u5b9a\u65f6\u5668\u7b49\u3002 MPU\uff1aMPU \u5177\u6709\u66f4\u4e30\u5bcc\u7684\u5916\u8bbe\u548c\u63a5\u53e3\u9009\u9879\uff0c\u5305\u62ec USB\u3001\u4ee5\u592a\u7f51\u3001\u9ad8\u7ea7\u56fe\u5f62\u63a5\u53e3\u7b49\uff0c\u4ee5\u652f\u6301\u591a\u79cd\u5916\u90e8\u8bbe\u5907\u548c\u8fde\u63a5\u3002 5 \u529f\u8017 MCU\uff1aMCU \u901a\u5e38\u5177\u6709\u8f83\u4f4e\u7684\u529f\u8017\uff0c\u56e0\u4e3a\u5b83\u4eec\u7ecf\u5e38\u7528\u4e8e\u7535\u6c60\u4f9b\u7535\u7684\u8bbe\u5907\u548c\u9700\u8981\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u5d4c\u5165\u5f0f\u7cfb\u7edf\u3002 MPU\uff1aMPU \u901a\u5e38\u5177\u6709\u8f83\u9ad8\u7684\u529f\u8017\uff0c\u56e0\u4e3a\u5b83\u4eec\u8bbe\u8ba1\u7528\u4e8e\u9ad8\u6027\u80fd\u8ba1\u7b97\u548c\u591a\u4efb\u52a1\u5904\u7406\u3002 6 \u6210\u672c MCU\uff1aMCU \u901a\u5e38\u4ef7\u683c\u8f83\u4f4e\uff0c\u9002\u7528\u4e8e\u5927\u89c4\u6a21\u751f\u4ea7\u548c\u6210\u672c\u654f\u611f\u7684\u5e94\u7528\u3002 MPU\uff1aMPU \u4ef7\u683c\u901a\u5e38\u8f83\u9ad8\uff0c\u9002\u7528\u4e8e\u66f4\u590d\u6742\u548c\u9ad8\u6027\u80fd\u7684\u5e94\u7528\u3002 \u9009\u62e9 MCU \u6216 MPU \u53d6\u51b3\u4e8e\u60a8\u7684\u9879\u76ee\u9700\u6c42 \uff0c\u5305\u62ec\u6027\u80fd\u3001\u529f\u8017\u3001\u6210\u672c\u548c\u529f\u80fd\u7b49\u56e0\u7d20\u3002\u5982\u679c\u60a8\u9700\u8981\u6267\u884c\u5d4c\u5165\u5f0f\u63a7\u5236\u4efb\u52a1\uff0cMCU \u53ef\u80fd\u662f\u66f4\u5408\u9002\u7684\u9009\u62e9\u3002\u5982\u679c\u60a8\u9700\u8981\u8fd0\u884c\u590d\u6742\u7684\u5e94\u7528\u7a0b\u5e8f\u548c\u64cd\u4f5c\u7cfb\u7edf\uff0cMPU \u53ef\u80fd\u66f4\u9002\u5408\u60a8\u7684\u9700\u6c42\u3002 \u4e8c \u5f85\u89e3\u51b3\u7684\u95ee\u9898 \u4e09 \u5d4c\u5165\u5f0f\u5b66\u4e60\u8def\u7ebf \u5176\u4e00 \u4e00\u3001\u57fa\u7840 1. linux \u57fa\u672c\u64cd\u4f5c\uff1a \u9700\u8981\u638c\u63e1\u7684\u77e5\u8bc6\u5982\u4e0b\uff1a 1 \u73af\u5883\u7684\u642d\u5efa\uff1aubuntu\u3001vmware \u5b89\u88c5 2 Linux \u76ee\u5f55\u7ed3\u6784\uff1b 3 \u6587\u4ef6\u7c7b\u578b\uff1b 4 \u57fa\u672c\u76ee\u5f55\u64cd\u4f5c\uff0c\u6587\u4ef6\u64cd\u4f5c\uff0cvim\uff0cifconfig\uff0cping\uff0ccd\uff0ccp\uff0cmv\uff0cmkdir \u7b49\uff0c\u6700\u5173\u952e\u662f gcc \u547d\u4ee4\u8981\u4f1a\u7528\uff1b 5 \u4e00\u4e9b\u7b80\u5355\u7684 shell \u811a\u672c\uff1b 6 Makefile \u7684\u7f16\u5199\u3002 \u4e2a\u4eba\u5efa\u8bae\u53ea\u8981\u4f1a\u4e00\u4e9b\u57fa\u672c\u7684\u64cd\u4f5c\u5c31\u884c\u4e86\uff0c\u4e0d\u9700\u8981\u592a\u6df1\u5165\u7684\u5b66\u4e60\u6bcf\u4e00\u4e2a\u547d\u4ee4\uff0c\u7528\u5230\u7684\u65f6\u5019\u4f1a\u53bb\u641c\u7d22\u5c31\u884c\u4e86\u3002 \u53c2\u8003\u6587\u7ae0\u5982\u4e0b\uff1a \u300aLinux \u5165\u95e8\u7684\u57fa\u7840\u77e5\u8bc6\u70b9\u6c47\u603b\uff0c\u6709\u8fd9\u7bc7\u5c31\u591f\u4e86\u300b \u300alinux \u9a71\u52a8\u3001ARM \u5b66\u4e60\u73af\u5883\u642d\u5efa\u300b \u300aLinux \u5165\u95e8-shell \u7f16\u7a0b-\u9002\u5408\u5c0f\u767d\u300b \u300a\u4e00\u952e\u83b7\u53d6 linux \u5185\u5b58\u3001cpu\u3001\u78c1\u76d8 IO \u7b49\u4fe1\u606f\u811a\u672c\u7f16\u5199\uff0c\u53ca\u5176\u539f\u7406\u8be6\u89e3\u300b 2. c \u8bed\u8a00\uff1a \u6240\u8c13\u7f16\u7a0b\u4e0d\u5b66 C \u8bed\u8a00\uff0c\u4fbf\u79f0\u7801\u519c\u4e5f\u6789\u7136\u3002 \u5b66 Linux\uff0c\u4e0d\u5b66\u7f16\u7a0b\uff0c\u5efa\u8bae\u5c31\u4e0d\u8981\u5b66\u4e86\uff0c\u5426\u5219\u804c\u4e1a\u540e\u671f\u5168\u662f\u74f6\u9888\u3002 \u90a3\u4e9b\u548c\u4f60\u8bf4\u5b66 Linux \u4e0d\u9700\u8981\u61c2\u7f16\u7a0b\u7684\u90fd\u662f\u518d\u800d LM\u3002 \u5b66\u4e60 C \u8bed\u8a00\u4e00\u5b9a\u8981\u5b66\u4e60 Linux \u4e0b C \u7f16\u7a0b\uff0cC \u8bed\u8a00\u7f51\u4e0a\u89c6\u9891\u4e5f\u5f88\u591a\uff0c\u77e5\u8bc6\u70b9\u4e0d\u4e00\u4e00\u4ecb\u7ecd\u4e86\u3002 \u4f46\u662f\u6709\u4e00\u70b9\uff0c\u5c31\u662f\u4e00\u5b9a\u8981\u8bb0\u4f4f\uff0c\u4e00\u822c\u7684\u7a0b\u5e8f\u5458\u4ece\u5165\u95e8\u5230\u7edd\u5bf9\u7684\u7cbe\u901a\u5927\u6982\u9700\u8981 2 \u5e74\u65f6\u95f4\uff0c\u8981\u60f3\u968f\u5fc3\u6240\u6b32\u5199\u51fa\u8d85\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801\uff0c\u65f6\u95f4\u56e0\u4eba\u800c\u5f02\uff0c\u8fd8\u8981\u770b\u4e2a\u4eba\u9020\u5316\u3002 \u5b9e\u9645\u4e0a\u5e76\u4e0d\u9700\u8981\u6bcf\u4e2a\u4eba\u90fd\u6210\u4e3a\u5927\u5e08\uff0c\u80fd\u6210\u4e3a\u4e00\u4e2a\u5feb\u5feb\u4e50\u4e50\u7684\u5c0f\u7801\u519c\uff0c\u4e0d\u4e5f\u662f\u89c1\u5f00\u5fc3\u7684\u4e8b\u5417\uff1f 3. \u6570\u636e\u7ed3\u6784\uff1a \u6570\u636e\u7ed3\u6784\u5f88\u91cd\u8981\uff0c\u4f46\u662f\u5728\u8fd9\u4e2a\u4e0a\u9762\u82b1\u592a\u591a\u65f6\u95f4\uff0c\u4e5f\u662f\u6ca1\u5fc5\u8981\u7684\u3002\u60f3\u8fdb\u5927\u5382\u7684\u9664\u5916\uff0c\u81ea\u5df1\u62fc\u547d\u53bb\u5237\u9898\u5427\u3002\u5bf9\u4e8e\u5d4c\u5165\u5f0f\u65b9\u5411\u6765\u8bf4\uff0c\u4e2a\u4eba\u5efa\u8bae\u53ea\u8981\u638c\u63e1\u51e0\u4e2a\u57fa\u672c\u7684\u6392\u5e8f\u548c\u67e5\u627e\u7b97\u6cd5\u5373\u53ef\uff0c\u6ca1\u5fc5\u8981\u628a\u6240\u6709\u7b97\u6cd5\u90fd\u7814\u7a76\u4e00\u904d\u3002 \u300a\u73a9\u8f6c\u5185\u6838\u94fe\u8868 list_head\uff0c\u5982\u4f55\u7ba1\u7406\u4e0d\u540c\u7c7b\u578b\u8282\u70b9\u7684\u5b9e\u73b0\uff08\u4e07\u5b57\u6587\uff09\u53ef\u4ee5\u6536\u85cf\u300b \u300a\u5341\u5927\u7ecf\u5178\u6392\u5e8f\u7b97\u6cd5(\u4ee3\u7801\u5b9e\u73b0)\uff0c\u5efa\u8bae\u6536\u85cf\u300b \u300a20 \u5f20\u56fe\u63ed\u5f00\u300c\u961f\u5217\u300d\u7684\u8ff7\u96fe\u300b \u300a\u4e8c\u53c9\u6811\u8be6\u89e3\uff0c\u975e\u5e38\u5168\uff0c\u8fd8\u5305\u542b C \u4ee3\u7801\u300b \u80fd\u638c\u63e1\u5e38\u89c1\u7684\u7b97\u6cd5\u6bd4\u5982\uff1a\u5192\u6ce1\u6392\u5e8f\u3001\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u3001\u5feb\u901f\u6392\u5e8f\u3001\u4e8c\u53c9\u6811\u7b49\u3002 \u94fe\u8868\uff1a\u53cc\u5411\u94fe\u8868\uff0c\u589e\u5220\u6539\u67e5\u3002 4. \u57fa\u7840\u9636\u6bb5\u9879\u76ee \u57fa\u7840\u9636\u6bb5\uff0c\u4e2a\u4eba\u5f3a\u70c8\u5efa\u8bae\u4e00\u5b9a\u8981\u505a\u4e00\u4e2a\u7efc\u5408\u6027\u9879\u76ee\uff0c\u4e00\u5b9a\u8981\u4ece 0 \u5f00\u59cb\u5199\u3002 \u5efa\u8bae\u9879\u76ee \u300a\u7535\u8bdd\u672c\u7ba1\u7406\u8f6f\u4ef6\u300b \u8be5\u9879\u76ee\u5305\u542b\u7684\u77e5\u8bc6\u70b9\u3001\u529f\u80fd\u70b9\uff1a \u5305\u542b\u7b80\u5355\u7684\u83dc\u5355\u529f\u80fd \u94fe\u8868\uff1a\u5305\u62ec\u589e\u3001\u5220\u3001\u6539\u3001\u67e5\u3001\u6392\u5e8f\u7b49\u64cd\u4f5c\u7684\u53cc\u5411\u94fe\u8868\u3002 \u7ed3\u6784\u4f53\u3001\u6570\u7ec4\u3001\u6307\u9488\u3001\u4e8c\u7ea7\u6307\u9488\uff0c\u5b57\u7b26\u4e32\u64cd\u4f5c \u6392\u5e8f \u7528\u6237\u767b\u5f55 \u7528\u6237\u7535\u8bdd\u53f7\u7801\u4fe1\u606f\u7684\u6dfb\u52a0\u3001\u5220\u9664\u3001\u4fee\u6539 \u4e8c\u3001\u8fdb\u9636 \u8fdb\u9636\u9636\u6bb5\u77e5\u8bc6\u70b9\u5f88\u91cd\u8981\uff0c\u5b66\u5b8c\u8fd9\u4e2a\u9636\u6bb5\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u5404\u79cd\u5e93\u51fd\u6570+\u7cfb\u7edf\u8c03\u7528\u6765\u81ea\u5df1\u5b9e\u73b0 Linux \u547d\u4ee4\uff1als\u3001cd\u3001stat\u3001pwd\u3001ifconfig\uff0c\u751a\u81f3\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e9b\u7f51\u7edc\u534f\u8bae\uff1atftp\u3001ftp\u3001http\u3002 \u5373\u4f7f\u4ee5\u540e\u4e0d\u505a linux c \u5f00\u53d1\uff0c\u6709\u4e86\u8fd9\u4e9b\u57fa\u7840\uff0c\u4f60\u518d\u53bb\u5b66 java\u3001c++\u4f60\u7684\u89c6\u91ce\u4e00\u5b9a\u4f1a\u4e0d\u4e00\u6837\uff0cLinux \u4e0b\u7cfb\u7edf\u7f16\u7a0b\u662f\u771f\u6b63\u57fa\u4e8e\u4e00\u4e2a\u80f8\u75db\u6765\u7f16\u7a0b\u7684\u3002 \u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u5b66 Linux\uff0c\u5c31\u662f\u56e0\u4e3a\u4ed6\u7684\u5f00\u653e\u6027\uff0c\u6709\u65e0\u6570\u7684\u5927\u725b\u5728\u7ed9 Linux \u6dfb\u7816\u52a0\u74e6\uff0c\u6240\u6709\u4ee3\u7801\u90fd\u53ef\u4ee5\u770b\u5230\uff0c\u800c\u6211\u4eec\u6839\u672c\u4e0d\u7528\u62c5\u5fc3\u7248\u6743\u95ee\u9898\uff01 1. \u6587\u4ef6 IO \u638c\u63e1 Linux \u6587\u4ef6 IO \u7684\u4e00\u5957\u7cfb\u7edf\u8c03\u7528 API\uff1aopen\u3001read\u3001write\u3001lseek\uff0cclose \u7b49\u3002 \u719f\u7ec3\u5199\u51fa\u6587\u4ef6\u62f7\u8d1d\u7b49\u529f\u80fd\u6a21\u5757\u3002 \u7406\u89e3 I/O\u3001\u7f13\u51b2\u7684\u6982\u5ff5\u3002 \u5728 Linux \u4e0b\uff0c\u4e00\u5207\u7686\u6587\u4ef6\uff0c\u6211\u4eec\u64cd\u4f5c\u64cd\u4f5c\u8bb8\u8bb8\u591a\u591a\u7684\u5916\u8bbe\uff08\u5b57\u7b26\u8bbe\u5907\u3001\u5957\u63a5\u5b57\u3001\u6587\u4ef6\u7b49\u7b49\uff09\u5c31\u50cf\u64cd\u4f5c\u6587\u4ef6\u4e00\u6837\u3002\u8981\u60f3\u77e5\u9053\u5982\u4f55\u64cd\u4f5c\u6587\u4ef6\u548c\u5916\u8bbe\uff0c\u6211\u4eec\u5c31\u5fc5\u987b\u719f\u7ec3\u638c\u63e1\u6587\u4ef6 IO\uff0c\u8fd9\u662f\u6211\u4eec\u5b66\u4e60 Linux \u4e0b\u9762\u7f16\u7a0b\u6700\u57fa\u672c\u7684\u77e5\u8bc6\u70b9\u3002 2. \u8fdb\u7a0b\u7ebf\u7a0b \u8fdb\u7a0b\u4e0e\u7ebf\u7a0b\u7684\u6982\u5ff5 \u638c\u63e1\u5e38\u7528\u7684\u51fd\u6570 fork\u3001exec \u65cf\u51fd\u6570\u7b49 api\uff1b \u8fdb\u7a0b\u521b\u5efa\u3001\u56de\u6536\uff0c\u4e00\u4e2a.c \u6e90\u6587\u4ef6\u53d8\u6210\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u8fc7\u7a0b\uff1b \u5e38\u7528\u7684\u8fdb\u7a0b\u76f8\u5173\u547d\u4ee4\uff1aps\u3001top\u3001crontab\u3001at\uff1b \u8fdb\u7a0b\u95f4\u901a\u4fe1\uff1a\u4fe1\u53f7\u91cf\u3001\u6d88\u606f\u961f\u5217\u3001\u5171\u4eab\u5185\u5b58\u3001\u7ba1\u9053\u3001\u4fe1\u53f7\uff1b \u5b88\u62a4\u8fdb\u7a0b\uff1b \u7ebf\u7a0b\u521b\u5efa\u3001\u540c\u6b65\u4e92\u65a5\uff0c\u4e92\u65a5\u9501\uff1b \u5e93\u7684\u6982\u5ff5\uff0c\u4ec0\u4e48\u662f\u52a8\u6001\u5e93\u548c\u9759\u6001\u5e93\uff0c\u5982\u4f55\u81ea\u5df1\u5236\u4f5c\u52a8\u6001\u5e93\u548c\u9759\u6001\u5e93\u3002 \u8fdb\u7a0b\u3001\u7ebf\u7a0b\u662f\u6211\u4eec\u5b66\u4e60 Linux \u4e0b\u7cfb\u7edf\u7f16\u7a0b\u975e\u5e38\u91cd\u8981\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\uff0c\u5fc5\u987b\u638c\u63e1\u3002 \u53c2\u8003\u6587\u7ae0\u5982\u4e0b\uff1a \u300a\u591a\u7ebf\u7a0b\u8be6\u89e3\uff0c\u4e00\u7bc7\u6587\u7ae0\u5f7b\u5e95\u641e\u61c2\u591a\u7ebf\u7a0b\u4e2d\u5404\u4e2a\u96be\u70b9\u300b \u300aLinux \u4e2d\u5e38\u89c1\u540c\u6b65\u548c\u4e92\u65a5\u673a\u5236\u8bbe\u8ba1\u539f\u7406 \u300b \u300aLinux \u4fe1\u53f7\u91cf\uff081\uff09-SYSTEM V\u300b \u300aLinux \u4fe1\u53f7\u91cf\uff082\uff09-POSIX \u4fe1\u53f7\u91cf\u300b \u300aLinux \u4e92\u65a5\u9501\uff081\uff09-\u7ebf\u7a0b\u4e92\u65a5\u9501\u300b \u300a\u8fdb\u7a0b\u7ec4\u3001\u4f1a\u8bdd\u3001\u63a7\u5236\u7ec8\u7aef\u5173\u7cfb\uff0c\u5b88\u62a4\u8fdb\u7a0b\u8be6\u89e3\u300b \u300a \u4e00\u4e2a\u591a\u7ebf\u7a0b\u7684\u7b80\u5355\u4f8b\u5b50\u8ba9\u4f60\u770b\u6e05\u7ebf\u7a0b\u8c03\u5ea6\u7684\u968f\u673a\u6027\u7c89\u4e1d\u63d0\u95ee\u300b \u300aLinux \u5e93\u6982\u5ff5\uff0c\u52a8\u6001\u5e93\u548c\u9759\u6001\u5e93\u7684\u5236\u4f5c\uff0c\u5982\u4f55\u79fb\u690d\u7b2c\u4e09\u65b9\u5e93\u300b \u300a \u4e24\u4e2a\u7ebf\u7a0b\uff0c\u4e24\u4e2a\u4e92\u65a5\u9501\uff0c\u600e\u4e48\u5f62\u6210\u4e00\u4e2a\u6b7b\u5faa\u73af\uff1f \u7c89\u4e1d\u63d0\u95ee\u300b \u300a\u7528\u4e86\u8fd9\u4e48\u591a\u5e74 Linux\uff0c\u4f60\u6e05\u695a\u63a7\u5236\u53f0\u3001\u7ec8\u7aef\u4e0e shell \u53ca\u5b83\u4eec\u7684\u5173\u7cfb\u5417\uff1f\u300b \u300a\u591a\u7ebf\u7a0b\u8be6\u89e3\uff0c\u4e00\u7bc7\u6587\u7ae0\u5f7b\u5e95\u641e\u61c2\u591a\u7ebf\u7a0b\u4e2d\u5404\u4e2a\u96be\u70b9\u300b \u300a\u5b50\u8fdb\u7a0b\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u5173\u7cfb\u300b 3. \u7f51\u7edc\u7f16\u7a0b TCP/IP \u534f\u8bae\u5206\u5c42\u4ee5\u53ca\u6bcf\u4e00\u5c42\u7684\u529f\u80fd\uff1b\u4e0d\u8981\u770b OSI\uff0c\u53ea\u8981\u77e5\u9053\u5373\u53ef\uff1b socket api \u7684\u4f7f\u7528\uff0c tcp\u3001udp\uff1bC/S \u67b6\u6784\u5982\u4f55\u521b\u5efa\uff1b \u5957\u63a5\u5b57\u5c5e\u6027\u7684\u8bbe\u7f6e\uff1b C/S \u67b6\u6784\uff1b \u591a\u8fdb\u7a0b\u3001\u591a\u7ebf\u7a0b\u7f51\u7edc\u670d\u52a1\u5668\u6a21\u578b\uff1b \u4efb\u610f\u4e00\u6b3e\u6293\u5305\u5de5\u5177\u4f7f\u7528\uff1b \u5e38\u89c1\u7684\u7f51\u7edc\u534f\u8bae\u5206\u6790\uff1aping\u3001 tftp\u3001 ftp\u3001http\u3001telnet \u7b49\u3002 \u7f51\u7edc\u7684\u91cd\u8981\u6027\u4e0d\u8a00\u800c\u55bb\uff0c\u5e94\u7528\u5b9e\u5728\u592a\u5e7f\u4e86\uff0c\u7f51\u7edc\u7684\u77e5\u8bc6\u4e5f\u975e\u5e38\u7684\u590d\u6742\uff1a\u7f51\u7edc\u7f16\u7a0b\u3001TCP/IP \u534f\u8bae\u6808\u3001\u7f51\u7edc\u62d3\u6251\u3001\u7f51\u5361\u9a71\u52a8\u3001\u5404\u79cd\u65e0\u7ebf\u901a\u4fe1\u534f\u8bae\u3002 \u53ef\u4ee5\u6536\u6bcf\u4e00\u5927\u5757\u77e5\u8bc6\u7684\u5b66\u4e60\uff0c\u90fd\u9700\u8981\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u6765\u5165\u95e8\uff0c\u5e76\u9700\u8981\u4e00\u5b9a\u96be\u5ea6\u7684\u9879\u76ee\u505a\u652f\u6491\uff0c\u624d\u80fd\u771f\u6b63\u4e86\u89e3\u548c\u638c\u63e1\u7f51\u7edc\u3002\u5bf9\u4e8e\u5d4c\u5165\u5f0f\u65b9\u5411\u521d\u5b66\u8005\uff0c\u6211\u4eec\u6700\u597d\u5148\u4e86\u89e3\u4e00\u4e9b\u57fa\u7840\u7684\u7f51\u7edc\u534f\u8bae\u77e5\u8bc6\uff0c\u7136\u540e\u5b66\u4e60\u5957\u63a5\u5b57\u7684\u4f7f\u7528\u3002 \u53c2\u8003\u6587\u7ae0\u5982\u4e0b\uff1a \u300a22 \u5f20\u56fe\u8be6\u89e3\u6d4f\u89c8\u5668\u8bf7\u6c42\u6570\u636e\u5305\u5982\u4f55\u5230\u8fbe web \u670d\u52a1\u5668\uff08\u641e\u61c2\u7f51\u7edc\u53ef\u4ee5\u6bd5\u4e1a\u4e86\uff09\u300b \u300a\u4e00\u4e2a\u7aef\u53e3\u53f7\u53ef\u4ee5\u540c\u65f6\u88ab\u4e24\u4e2a\u8fdb\u7a0b\u7ed1\u5b9a\u5417\uff1f \u300b \u300a\u3010\u7c89\u4e1d\u95ee\u7b54 7\u3011\u5c40\u57df\u7f51\u5185\u7ec8\u7aef\u662f\u5982\u4f55\u8bbf\u95ee\u5916\u7f51\uff1f\u7b54\u6848\u5728\u6700\u540e \u300b \u300a\u4e00\u6587\u5305\u4f60\u5b66\u4f1a\u7f51\u7edc\u6570\u636e\u6293\u5305 \u300b \u300a\u3010\u89c6\u9891\u3011\u6559\u4f60\u5982\u4f55\u6293\u53d6\u7f51\u7edc\u4e2d\u7684\u6570\u636e\u5305\uff01\u9ed1\u5ba2\u5fc5\u5907\u6280\u80fd\u300b \u300a\u7f51\u7edc/\u547d\u4ee4\u884c\u6293\u5305\u5de5\u5177 tcpdump \u8be6\u89e3 \u300b \u300a\u3010\u7c89\u4e1d\u95ee\u7b54 11\u3011\u5982\u4f55\u5728\u5185\u7f51\u642d\u5efa TCP \u670d\u52a1\u5668\u5e76\u80fd\u88ab\u5916\u7f51\u76f4\u63a5\u8bbf\u95ee\u300b 4. \u8fdb\u9636\u9879\u76ee \u8be5\u9636\u6bb5\u53ef\u4ee5\u9009\u62e9\u7efc\u5408\u9879\u76ee\u300a\u591a\u7ebf\u7a0b\u804a\u5929\u5ba4\u300b\uff0c\u5b9e\u73b0\u516c\u804a\u3001\u79c1\u804a\u3001\u6ce8\u518c\u767b\u5f55\uff0c\u4e92\u76f8\u53d1\u9001\u6587\u4ef6\u7b49\u529f\u80fd\u3002 \u4e00\u53e3\u541b\u5df2\u7ecf\u628a\u8fd9\u4e2a\u9879\u76ee\u62c6\u89e3\u6210 4 \u7bc7\u6587\u7ae0\uff0c\u5e76\u63d0\u4f9b\u6e90\u7801\uff0c\u65b9\u4fbf\u5927\u5bb6\u5165\u95e8\u3002 \u300a\u4ece 0 \u5b9e\u73b0\u57fa\u4e8e Linux socket \u804a\u5929\u5ba4\u300b \u4e09\u3001\u9ad8\u9636 \u8be5\u9636\u6bb5\u5b66\u4e60\u9700\u8981\u5f00\u53d1\u677f\u914d\u5408\uff0c\u5efa\u8bae\u65b0\u624b\u5148\u628a\u4e4b\u524d\u5185\u5bb9\u6253\u624e\u5b9e\uff0c\u518d\u8fdb\u5165\u8fd9\u4e2a\u9636\u6bb5\u5b66\u4e60\u3002 \u5f00\u53d1\u677f\u7684\u9009\u62e9\uff0c\u6700\u91cd\u8981\u7684\u662f\u8d44\u6599\uff01\u8d44\u6599\uff01\u8d44\u6599\uff01\u8d44\u6599\uff01\u8d44\u6599\uff01\u8d44\u6599\uff01\u8d44\u6599\uff01\u8d44\u6599\uff01 \u8d44\u6599\u4e0d\u5168\u7684\u677f\u5b50\u4e0d\u8981\u4e70\uff01 1. ARM arm \u67b6\u6784\u3001arm \u7684\u6a21\u5f0f\u3001arm \u6307\u4ee4\uff0c\u5bfb\u5740\uff0c\u5f02\u5e38\uff0c\u4e2d\u65ad\uff0c\u5f02\u5e38\u5411\u91cf\u8868\uff0c \u4f2a\u6307\u4ee4\u3001C \u8bed\u8a00\u548c\u6c47\u7f16\u4ee3\u7801\u7684\u4e92\u76f8\u8c03\u7528\u3001\u5185\u8054\u6c47\u7f16\uff1b \u5b66\u4f1a\u67e5\u770b\u5e38\u89c1\u7535\u8def\u56fe\uff0c\u4e86\u89e3\u6570\u636e\u7ebf\u3001\u4fe1\u53f7\u7ebf\u3001\u5730\u5740\u7ebf\u3001\u4e2d\u65ad\u7ebf\uff0c\u5e38\u89c1\u5916\u8bbe\u7535\u8def\u56fe \u5b66\u4f1a\u67e5\u770b\u5404\u79cd\u82af\u7247\u7684\u7528\u6237\u624b\u518c \u5e38\u89c1\u7684\u5916\u8bbe\u7684\u88f8\u673a\u9a71\u52a8\u5f00\u53d1\uff0cled\u3001key\u3001adc\u3001pwm\u3001rtc\u3001\u770b\u95e8\u72d7\u3001i2c\u3001spi\u3001\u7f51\u5361\u3001flash\u3001USB \u7b49 \u8fd9\u4e2a\u9636\u6bb5\u7684\u5185\u5bb9\uff0c\u5bf9\u4e8e\u4e86\u89e3\u6574\u4e2a\u8ba1\u7b97\u673a\u8f6f\u4ef6\u7684\u5de5\u4f5c\u539f\u7406\u975e\u5e38\u91cd\u8981\uff0cLinux \u5185\u6838\u7684\u5f88\u591a\u673a\u5236\u90fd\u8981\u4f9d\u8d56\u6c47\u7f16\u6307\u4ee4\uff0c\u5c24\u5176 ARM \u5de5\u4f5c\u6a21\u5f0f\u3001\u5bfb\u5740\u3001\u5f02\u5e38\uff0c\u4e2d\u65ad\uff0c\u5f02\u5e38\u5411\u91cf\u8868\u8fd9\u4e9b\u6982\u5ff5\u3002\u53ef\u4ee5\u8bf4\uff0c\u638c\u63e1\u4e86\u8fd9\u4e2a\u9636\u6bb5\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u5355\u7247\u673a\u3001STM32 \u771f\u7684\u5c31\u662f\u624b\u5230\u64d2\u6765\u4e86\uff01 \u5927\u5bb6\u4e5f\u53ef\u4ee5\u53c2\u8003\u6211\u5199\u7684\u300aARM \u7cfb\u5217\u6587\u7ae0\u300b B \u7ad9\u6b63\u5728\u66f4\u65b0\u8fd9\u4e2a\u7cfb\u5217\u7684\u89c6\u9891\u6559\u7a0b\uff0c \u7eaf\u5976\u5988\u5f0f\u6559\u5b66\uff0c\u53ea\u8981\u6709 C \u57fa\u7840\uff0c\u7edd\u5bf9\u5b66\u5f97\u4f1a\uff01 https://space.bilibili.com/661326452 2. \u7cfb\u7edf\u79fb\u690d uboot \u79fb\u690d\u3001uboot \u53c2\u6570\u8bbe\u7f6e rootfs \u5236\u4f5c\u3001\u5185\u6838\u526a\u88c1\u79fb\u690d\uff0c usb\u3001\u7f51\u5361\u9a71\u52a8\u79fb\u690d\uff0c uboot\u3001linux \u542f\u52a8\u6d41\u7a0b\uff0c \u81ea\u5df1\u6dfb\u52a0 uboot \u547d\u4ee4 \u8fd9\u4e00\u9636\u6bb5\u7684\u5185\u5bb9\u5bf9\u4e8e\u5d4c\u5165\u5f0f\u5de5\u7a0b\u5e08\u6765\u8bf4\uff0c\u5728\u505a\u5b9e\u9645\u9879\u76ee\u7684\u65f6\u5019\uff0c\u4f1a\u7ecf\u5e38\u7528\u5230\uff0c\u5404\u4e2a\u5382\u5bb6\u7684\u79fb\u690d\u6b65\u9aa4\u4f1a\u6709\u6240\u5dee\u5f02\uff0c\u4f46\u539f\u7406\u57fa\u672c\u76f8\u540c\uff0c\u719f\u7ec3\u638c\u63e1\u8fd9\u4e9b\u64cd\u4f5c\uff0c\u975e\u5e38\u5fc5\u8981\u3002 \u8fd9\u90e8\u5206\u5185\u5bb9\u5176\u5b9e\u5f88\u590d\u6742\uff0c\u5bf9\u4e8e\u65b0\u624b\u6765\u8bf4\uff0c\u5efa\u8bae\u4f1a\u64cd\u4f5c\u5373\u53ef\uff0c\u5de5\u4f5c\u540e\u5982\u679c\u5728\u6df1\u5165\u7814\u7a76\uff0c\u518d\u56de\u5934\u7814\u7a76\u8fd9\u4e9b\u7ec6\u8282\u3002 \u53c2\u8003\u6587\u7ae0 \u300a\u3010\u95ee\u7b54 23\u3011\u79fb\u690d Linux\uff1a\u5982\u4f55\u5236\u4f5c rootfs\uff1f\u8be6\u7ec6\u6559\u7a0b\u300b \u300a19. Cortex-A9 uboot \u542f\u52a8\u4ee3\u7801\u8be6\u89e3\u5fc5\u770b\u300b \u300a20.\u4ece 0 \u5b66 ARM-\u4ece 0 \u79fb\u690d uboot \u652f\u6301 exynos4412-\u4eb2\u6d4b\u300b \u300aLinux \u6a21\u5757\u6587\u4ef6\u5982\u4f55\u7f16\u8bd1\u5230\u5185\u6838\u548c\u72ec\u7acb\u7f16\u8bd1\u6210\u6a21\u5757\uff1f\u300b 3. Linux \u9a71\u52a8 \u5b57\u7b26\u8bbe\u5907\u67b6\u6784\u3001inode\u3001cdev\u3001file_operations\u3001file \u4e4b\u95f4\u5173\u7cfb\uff1b platform \u603b\u7ebf\u3001\u8bbe\u5907\u6811\uff1b \u5185\u5b58\u7ba1\u7406\uff1b \u540c\u6b65\u4e92\u65a5\u673a\u5236\uff0c\u81ea\u65cb\u9501\u3001\u4fe1\u53f7\u91cf\u3001\u4e92\u65a5\u4f53\uff0c\u539f\u5b50\u64cd\u4f5c\uff1b Linux \u8fdb\u7a0b\u7ba1\u7406 \u5757\u8bbe\u5907 \u4e2d\u65ad\u3001\u4e2d\u65ad\u5e95\u534a\u90e8\uff1b \u7b49\u5f85\u961f\u5217\uff0cpoll \u7684\u5b9e\u73b0\uff1b \u5e38\u89c1\u8bbe\u5907\u7684\u9a71\u52a8\u7684\u7f16\u5199\u548c\u4ee3\u7801\u5206\u6790\uff1b \u7f51\u7edc\u8bbe\u5907\uff1a\u7f51\u5361\u9a71\u52a8\u5206\u6790\u3001netfilter \u4f7f\u7528\u3001\u7f51\u7edc\u534f\u8bae\u6808\u67b6\u6784\uff1b USB\u3001TTY\u3001SPI\u3001IIC\u3001PCIE \u7b49\u67b6\u6784\u3002 \u80fd\u591f\u5b66\u5230\u8fd9\u4e2a\u9636\u6bb5\uff0c\u90a3\u4e48\u606d\u559c\u4f60\uff0c\u4f60\u53ef\u4ee5\u79f0\u4e3a\u4e00\u540d\u771f\u6b63\u5408\u683c\u7684\u5d4c\u5165\u5f0f\u5de5\u7a0b\u5e08\u4e86\u3002 Linux \u9a71\u52a8\u6211\u4eec\u5b66\u4e60 Linux \u5185\u6838\u6700\u597d\u7684\u4e00\u4e2a\u5165\u53e3\uff0c \u5728\u8fd9\u5e9e\u5927\u3001\u6d69\u701a\u3001\u9519\u7efc\u590d\u6742\u7684\u5185\u6838\u4ee3\u7801\u4e2d\u627e\u5230\u4e00\u4e2a\u7a81\u7834\u53e3\uff0c \u4ece\u800c\u771f\u6b63\u8d70\u5411\u5927\u795e\u4e4b\u8def\uff01 \u9a71\u52a8\u7684\u5b66\u4e60\uff0c\u4e3b\u8981\u5728\u4e8e\u591a\u634b\u67b6\u6784\uff0c\u591a\u9605\u8bfb\u5927\u725b\u7684\u4ee3\u7801\uff01 \u4ee3\u7801\u8bfb\u767e\u904d\uff0c\u5176\u4e49\u81ea\u89c1\uff01 \u4ee3\u7801\u4e2d\u81ea\u7531\u989c\u5982\u7389\uff0c\u4ee3\u7801\u4e2d\u81ea\u7531\u9ec4\u91d1\u5c4b\uff01 \u6bcf\u5929\u62b1\u7740\u5185\u6838\u770b\uff0c\u50cf\u6ce1\u5973\u4eba\u4e00\u6837\u6ce1\u5979\uff0c\u8fdf\u65e9\u4f60\u4f1a\u6210\u4e3a\u5927\u5e08\u3002 \u9a71\u52a8\u6587\u7ae0\u53ef\u4ee5\u53c2\u8003\u6211\u5199\u7684\u300a\u9a71\u52a8\u96c6\u5408\u300b \u4e5f\u53ef\u4ee5\u8fdb\u5165\u6211\u7684 B \u7ad9\uff0c\u4e00\u53e3\u541b\u5df2\u7ecf\u66f4\u65b0\u4e86\u300a\u4ece 0 \u5b66 Linux \u9a71\u52a8\u7b2c\u4e00\u671f\u300b https://space.bilibili.com/661326452 \u56db\u3001\u7ec8\u6781 \u6211\u60f3\u5982\u679c\u80fd\u5b66\u5230\u8fd9\u4e2a\u4efd\u4e0a\uff0c\u540e\u9762\u5982\u4f55\u53d1\u5c55\uff0c\u5df2\u7ecf\u4e0d\u9700\u8981\u4e00\u53e3\u541b\u518d\u591a\u8d39\u5507\u820c\u4e86\uff0c\u53ef\u4ee5\u7ee7\u7eed\u5b66\u4e60 \u5b89\u5353\u3001QT\uff0c\u4e5f\u53ef\u4ee5\u6df1\u6316\u7269\u8054\u7f51\u3001\u7b97\u6cd5\uff0cAI\u3001VR\u3001\u5927\u6570\u636e\u6216\u8005\u94bb\u7814 Linux \u5185\u6838\u4f18\u5316\u5185\u6838 \u7b49\uff0c\u6bcf\u4e2a\u9886\u57df\u72ec\u5f53\u4e00\u9762\uff0c\u6536\u5165\u90fd\u4e0d\u4f1a\u4f4e\u3002 \u4e5f\u8877\u5fc3\u795d\u613f\u5404\u4f4d\u8fd8\u80fd\u575a\u6301\u5230\u8fd9\u4e2a\u9636\u6bb5\u7684\uff0c\u5934\u53d1\u4f9d\u7136\u4fdd\u6301\u8302\u5bc6\uff01 \u6700\u540e\u7ed9\u5927\u5bb6\u4e00\u4e2a\u5efa\u8bae\uff0c\u5b66\u4e60\u7f16\u7a0b\u6ca1\u6709\u4efb\u4f55\u6377\u5f84\u53ef\u4ee5\u8d70\uff0c\u9700\u8981\u82b1\u8d39\u51e0\u5e74\u7684\u65f6\u95f4\u624d\u80fd\u6709\u6240\u6210\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u63d0\u65e9 \u505a\u597d\u89c4\u5212\uff0c\u627e\u597d\u5927\u65b9\u5411\uff0c\u5236\u5b9a\u597d\u77ed\u671f\u3001\u957f\u671f\u7684\u8ba1\u5212\uff0c\u7136\u540e\u6309\u7167\u8ba1\u5212\uff0c\u4e00\u70b9\u70b9\u7684\u5b9e\u65bd\u3002 \u5176\u4e8c \u4e00 \u524d\u8a00 \u6700\u8fd1\u770b\u5230 APP \u4e0a\uff0c\u7ed9\u6211\u63a8\u9001\u4e86\u5f88\u591a\u7c7b\u4f3c\u7684\u56de\u7b54\uff0c\u501f\u6b64\u673a\u4f1a\uff0c\u4e5f\u60f3\u7740\u91cd\u65b0\u5ba1\u89c6\u4e00\u4e0b\u81ea\u5df1\u7684\u5b66\u4e60\u5386\u7a0b\uff0c\u4ee5\u53ca\u7ed3\u5408\u81ea\u8eab\u548c\u5927\u725b\uff0c\u5206\u4eab\u4e00\u4e9b\u5b66\u4e60\u7ecf\u9a8c\uff0c\u5e0c\u671b\u5bf9\u5927\u5bb6\u6709\u6240\u542f\u53d1\u548c\u5e2e\u52a9\u3002 \u672c\u6587\u4e3b\u8981\u76ee\u7684\u662f\u4e3a\u4e86\uff1a \u63d0\u4f9b\u4e00\u5f20\u5d4c\u5165\u5f0f\u5b66\u4e60\u8def\u7ebf\u5730\u56fe \u63d0\u4f9b\u4e0d\u540c\u9636\u6bb5\u7684\u5b66\u4e60\u5efa\u8bae \u63a8\u8350\u4e0d\u540c\u9636\u6bb5\u7684\u5b66\u4e60\u8d44\u6599 3000 \u4f59\u5b57\uff0c\u8017\u65f6 1 \u5468\uff0c\u5efa\u8bae\u6536\u85cf\uff1b\u7801\u5b57\u4e0d\u6613\uff0c\u5982\u6709\u5e2e\u52a9\uff0c\u6177\u6168\u4e09\u8fde \u672c\u6587\u5c06\u5d4c\u5165\u5f0f\u5b66\u4e60\u8def\u7ebf\u5206\u4e3a\u51e0\u4e2a\u65b9\u9762\uff1a \u5d4c\u5165\u5f0f\u57fa\u7840\u5fc5\u5907\u77e5\u8bc6 51 \u5355\u7247\u673a STM32 \u5355\u7247\u673a \u5c0f\u800c\u7f8e\u7684 RTOS ARM+LINUX \u5728\u8fd9\u4e2a\u5feb\u8282\u594f\u7684\u65f6\u4ee3\uff0c\u80fd\u9759\u4e0b\u5fc3\uff0c\u8010\u4f4f\u6027\u5b50\u770b\u770b\u6587\u7ae0\uff0c\u5b9e\u5c5e\u4e0d\u6613\u3002 \u4e8c \u5d4c\u5165\u5f0f\u57fa\u7840\u5fc5\u5907\u77e5\u8bc6 \u8001\u5b50\u66f0\uff1a\u201c\u5408\u62b1\u4e4b\u6728\uff0c\u751f\u4e8e\u6beb\u672b\uff1a\u4e5d\u5c42\u4e4b\u53f0\uff0c\u8d77\u4e8e\u5792\u571f\uff1b\u5343\u91cc\u4e4b\u884c\uff0c\u59cb\u4e8e\u8db3\u4e0b\u201d\uff0c\u6839\u57fa\u7684\u91cd\u8981\u6027\u4e0d\u8a00\u800c\u55bb\u3002 \u90a3\u4e48\u5bf9\u4e8e\u5d4c\u5165\u5f0f\u8fd9\u6761\u8def\u7ebf\u800c\u8a00\uff0c\u5982\u4f55\u5efa\u7acb\u4e00\u4e2a\u7a33\u56fa\u7684\u6839\u57fa\uff1f 2.1\u3001\u5b66\u4e60\u5185\u5bb9 C \u8bed\u8a00\u57fa\u7840 \u8be5\u90e8\u5206\uff0c\u4e3b\u8981\u5305\u62ec\u51e0\u4e2a\u6838\u5fc3\u77e5\u8bc6\u70b9\uff1a \u4e09\u5927\u8bed\u6cd5\u7ed3\u6784\u3001\u5e38\u7528\u7684\u6570\u636e\u7c7b\u578b\u3001\u51fd\u6570\u3001\u7ed3\u6784\u4f53\u3001\u6307\u9488\u3001\u6587\u4ef6\u64cd\u4f5c \u7b49\u3002 \u786c\u4ef6\u57fa\u7840\u77e5\u8bc6 \u8be5\u90e8\u5206\uff0c\u6838\u5fc3\u77e5\u8bc6\u70b9\u5728\u4e8e\uff1a \u7535\u8def\u57fa\u7840\u77e5\u8bc6\u3001\u6570\u7535\u6a21\u7535\u57fa\u7840\u77e5\u8bc6\u3001\u5e38\u7528\u7684\u7535\u5b50\u5143\u5668\u4ef6 \u7b49\u3002 \u6570\u636e\u7ed3\u6784 \u6838\u5fc3\u77e5\u8bc6\u70b9\uff1a \u6570\u7ec4\u3001\u961f\u5217\u3001\u94fe\u8868\u3001\u5806\u6808\u3001\u6811\u3001\u56fe\u3001\u6563\u5217\u8868 \u7b49\u3002 \u64cd\u4f5c\u7cfb\u7edf \u6838\u5fc3\u77e5\u8bc6\u70b9\uff1a \u8fdb\u7a0b\u7ba1\u7406\u3001\u5185\u5b58\u7ba1\u7406\u3001\u6587\u4ef6\u7ba1\u7406\u3001\u8f93\u5165\u8f93\u51fa\u7ba1\u7406 \u7b49\u3002 \u8ba1\u7b97\u673a\u539f\u7406 \u6838\u5fc3\u77e5\u8bc6\u70b9\uff1a \u6570\u636e\u8868\u793a\u548c\u8fd0\u7b97\u3001\u5b58\u50a8\u7cfb\u7edf\u3001\u6307\u4ee4\u7cfb\u7edf\u3001\u603b\u7ebf\u7cfb\u7edf\u3001\u4e2d\u592e\u5904\u7406\u5668\u3001\u8f93\u5165\u8f93\u51fa\u7cfb\u7edf \u7b49\u3002 2.2\u3001\u5b66\u4e60\u5efa\u8bae \u5bf9\u4e8e C \u8bed\u8a00\u57fa\u7840\u5b66\u4e60 \uff0c\u4e00\u5b9a\u8981\u91cd\u70b9\u719f\u7ec3\u638c\u63e1\uff0c\u6839\u57fa\u7684\u7262\u56fa\u76f4\u63a5\u51b3\u5b9a\u4e86\u6211\u4eec\u7684\u4ee3\u7801\u8d28\u91cf\u3002 \u5bf9\u4e8e \u786c\u4ef6\u57fa\u7840\u5b66\u4e60 \uff0c\u8981\u9002\u5f53\u4e86\u89e3\uff0c\u8981\u80fd\u591f\u770b\u61c2\u4e00\u4e9b\u7b80\u5355\u7684\u7535\u8def\u7ed3\u6784\uff0c\u8ba4\u8bc6\u5e38\u7528\u7684\u7535\u5b50\u5143\u5668\u4ef6\u3002 \u5bf9\u4e8e \u6570\u636e\u7ed3\u6784\u5b66\u4e60 \uff0c\u524d\u4e94\u4e2a\u662f\u5fc5\u5907\u5b66\u4e60\u7684\uff0c\u53ef\u80fd\u5728\u521a\u5f00\u59cb\u5b66\u4e60\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u611f\u89c9\u4e0d\u5230\u4f5c\u7528\u5728\u54ea\u91cc\uff0c\u4f46\u662f\u968f\u7740\u63a5\u89e6\u5230\u5d4c\u5165\u5f0f\u5e95\u5c42\u8bbe\u8ba1\u4ee5\u53ca\u7b97\u6cd5\u8bbe\u8ba1\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u604d\u7136\u5927\u609f\u3002 \u5bf9\u4e8e \u64cd\u4f5c\u7cfb\u7edf\u5b66\u4e60 \uff0c\u91cd\u70b9\u5b66\u4e60\u5176\u601d\u60f3\uff0c\u5bf9\u76f8\u5173\u77e5\u8bc6\u70b9\u6709\u4e00\u4e2a\u5927\u6982\u7684\u4e86\u89e3\uff0c\u540e\u7eed\u63a5\u89e6\u5230\u7ee7\u7eed\u91cd\u70b9\u5b66\u4e60\uff0c\u8fd9\u4e9b\u65e0\u8bba\u662f RTOS\uff0c\u8fd8\u662f Linux\uff0c\u90fd\u6709\u6d89\u53ca\u5230\u7684\u3002 \u5bf9\u4e8e \u8ba1\u7b97\u673a\u539f\u7406\u5b66\u4e60 \uff0c\u53ef\u4ee5\u5c06\u5176\u770b\u4f5c\u662f\u5d4c\u5165\u5f0f\u7cfb\u7edf\u7684\u5404\u4e2a\u6a21\u5757\u7684\u8be6\u89e3\uff0c\u4f1a\u8ba9\u4f60\u5bf9\u5d4c\u5165\u5f0f\u6709\u4e00\u4e2a\u6574\u4f53\u7684\u4e86\u89e3\uff0c\u6bcf\u4e00\u4e2a\u90e8\u5206\u90fd\u503c\u5f97\u6df1\u7a76\u3002 2.3\u3001\u5b66\u4e60\u8d44\u6599 C \u8bed\u8a00\u57fa\u7840 \uff1a\u63a8\u8350\u7ecf\u5178\u4e66\u7c4d\u300aC \u8bed\u8a00\u7a0b\u5e8f\u8bbe\u8ba1\u300b\uff08\u7b2c 2 \u7248\uff09\u8c2d\u6d69\u5f3a\u7248\u672c\u3002 \u786c\u4ef6\u57fa\u7840 \uff1a\u5927\u5b66\u91cc\u9762\u7684\u300a\u6570\u7535\u6a21\u7535\u300b\u4e66\u7c4d\u6240\u6d89\u53ca\u7684\u77e5\u8bc6\u5373\u53ef\u3002 \u6570\u636e\u7ed3\u6784 \uff1a\u63a8\u8350\u7ecf\u5178\u4e66\u7c4d\u300a\u6570\u636e\u7ed3\u6784\u300b\u2014\u2014\u4e25\u851a\u654f\u7248\u3002 \u64cd\u4f5c\u7cfb\u7edf\u3001\u8ba1\u7b97\u673a\u539f\u7406 \uff1a\u6211\u7528\u7684\u662f\u300a\u738b\u9053\u300b\u7684\u7cfb\u5217\u4e1b\u4e66\uff0c\u4e2a\u4eba\u611f\u89c9\u4e0d\u9519\u3002 \u8ba1\u7b97\u673a\u7ec4\u6210\u3001\u6570\u636e\u7ed3\u6784\u3001\u64cd\u4f5c\u7cfb\u7edf\u3001\u6570\u636e\u5e93 \u662f\u5d4c\u5165\u5f0f\u6216\u8005\u8bf4\u8ba1\u7b97\u673a\u7684\u5165\u95e8\u5fc5\u8bfb\u4e66\u7c4d\uff0c\u5e76\u4e14\u4e5f\u88ab\u5217\u5165\u9ad8\u6821\u6559\u6750\u5185\uff0c\u662f\u771f\u6b63\u7684\u57fa\u7840\u77e5\u8bc6\u3002 \u4ee5\u4e0a\uff0c\u4e0d\u4e00\u5b9a\u662f\u5168\u90e8\u770b\u5b8c\u624d\u80fd\u4f53\u9a8c\u7f16\u7a0b\u7684\u4e50\u8da3\uff0c\u8fd9\u4e2a\u57fa\u7840\u662f\u4e00\u4e2a\u5faa\u5e8f\u6e10\u8fdb\u7684\u8fc7\u7a0b\uff0c\u4e5f\u4e0d\u662f\u4e00\u671d\u4e00\u5915\u5c31\u80fd\u5b8c\u6210\u7684\uff0c\u53ef\u4ee5\u5148\u6709\u4e00\u4e2a\u5927\u6982\uff0c\u540e\u7eed\u505a\u9879\u76ee\u65f6\uff0c\u54ea\u91cc\u4e0d\u61c2\u8865\u54ea\u91cc\uff01 \u8fd9\u91cc\u6d89\u53ca\u5230\u4e00\u4e2a\u91cd\u8981\u7684\u5b66\u4e60\u65b9\u6cd5\uff1a \u9879\u76ee\u5bfc\u5411\u7684\u5b66\u4e60\u6cd5\u3002 \u4e09 \u5d4c\u5165\u5f0f\u5165\u95e8\u7bc7\u2014\u201451 \u5355\u7247\u673a 3.1\u3001\u5b66\u4e60\u5185\u5bb9 \u8be5\u90e8\u5206\uff0c\u4e3b\u8981\u5728\u6700\u5c0f\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u5b9e\u73b0\u5404\u79cd\u6709\u8da3\u7684\u5b9e\u9a8c\u3002\u901a\u8fc7 51 \u5355\u7247\u673a\u7684\u5b66\u4e60\uff0c\u6211\u4eec\u8981\u505a\u5230\uff1a \u8f6f\u4ef6\u7c7b \uff1a \u4e3b\u8981\u77e5\u8bc6\u70b9\u6709\uff1a \u8ba4\u8bc6\u5355\u7247\u673a\u3001\u719f\u6089\u903b\u8f91\u8fd0\u7b97\u3001\u70b9\u4eae\u4e00\u9897 LED \u706f\u3001\u6309\u952e\u68c0\u6d4b\u3001\u4e32\u53e3\u901a\u4fe1\u3001\u5b9a\u65f6\u5668\u3001\u4e2d\u65ad \u7b49\u3002 \u786c\u4ef6\u7c7b \uff1a \u4e3b\u8981\u77e5\u8bc6\u70b9\u6709\uff1a \u7535\u963b\u5143\u5668\u4ef6\u4e86\u89e3\uff0c\u57fa\u672c\u6a21\u5757\u7535\u8def\u4e86\u89e3\uff0c\u65f6\u949f\u7535\u8def\uff0c\u5c1d\u8bd5\u7ed8\u5236 51 \u5355\u7247\u673a\u539f\u7406\u56fe\u548c PCB 3.2\u3001\u5b66\u4e60\u5efa\u8bae \u5bf9\u4e8e \u8f6f\u4ef6\u7c7b \uff0c\u6211\u4eec\u4e3b\u8981\u505a\u5230\uff1a\u8ba4\u8bc6\u5355\u7247\u673a\uff0c\u719f\u6089\u5355\u7247\u673a\u7684 GPIO \u7684\u8f93\u5165\u3001\u8f93\u51fa\u64cd\u4f5c\uff0c\u4e32\u53e3\u901a\u4fe1\u534f\u8bae\u638c\u63e1\u7b49\uff0c \u8fd9\u4e9b\u90e8\u5206\u90fd\u662f\u4efb\u4f55\u4e00\u6b3e\u5d4c\u5165\u5f0f\u8bbe\u5907\u7684\u5fc5\u5907\u6280\u80fd\u3002 \u5bf9\u4e8e \u786c\u4ef6\u7c7b \uff1a\u6211\u4eec\u4e3b\u8981\u505a\u5230\uff1a \u80fd\u770b\u61c2\u7535\u8def\u56fe \uff0c \u719f\u6089 \u4e00\u4e9b\u7b80\u5355\u6a21\u5757\u7684 \u8bbe\u8ba1\u7535\u8def \uff0c\u4e86\u89e3 Altium Designer \u7684\u4f7f\u7528\u65b9\u6cd5\u3002 3.3\u3001\u5b66\u4e60\u8d44\u6599 51 \u5355\u7247\u673a\uff1a\u90ed\u5929\u7965\u7684 51 \u5355\u7247\u673a\u6559\u7a0b\uff0c\u7ecf\u5178\u8457\u4f5c\uff0c\u7ecf\u4e45\u4e0d\u8870\uff0c\u5f3a\u70c8\u63a8\u8350\u3002 \u5e84\u5b50\u8bf4\uff1a\u201c\u6c34\u4e4b\u79ef\u4e5f\u4e0d\u539a\uff0c\u5219\u5176\u8d1f\u5927\u821f\u4e5f\u65e0\u529b\u3002\u201c \u8be5\u90e8\u5206\uff0c\u662f\u5d4c\u5165\u5f0f\u9886\u57df\u7684\u57fa\u77f3\uff0c\u53ea\u6709\u5c06\u57fa\u7840\u6253\u7262\uff0c\u624d\u80fd\u8d1f\u5f97\u8d77 Linux \u6cf0\u5766\u53f7\u3002 \u56db STM32 \u8fdb\u9636\u7bc7 STM32 \u662f C51 \u7684\u8fdb\u9636\u7248\uff0c\u62e5\u6709 C51 \u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u5f00\u53d1 STM32 \u4f1a\u5f97\u5fc3\u5e94\u624b\u3002 STM32 \u7684\u7cfb\u7edf\u67b6\u6784\u4ee5\u53ca\u786c\u4ef6\u8bbe\u8ba1\u76f8\u6bd4\u4e8e C51 \u6765\u8bf4\uff0c\u90fd\u662f\u4e0a\u5347\u4e86\u4e00\u4e2a\u7ef4\u5ea6\u7684\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u6211\u63a8\u8350\u5165\u95e8\u5b66\u4e60 C51 \u7684\u539f\u56e0\u3002 \u4ee5 STM32F407 \u5e73\u53f0\u4e3a\u57fa\u7840\uff0c\u53bb\u5b66\u4e60\u76ee\u524d\u5d4c\u5165\u5f0f\u4e3b\u6d41\u7684\u4e00\u4e9b\u6280\u672f\uff0c\u63a2\u5bfb\u5e95\u5c42\u7684\u539f\u7406\uff0c\u505a\u5230\u4e0d\u540c\u5e73\u53f0\uff0c\u90fd\u80fd\u591f\u5f97\u5fc3\u5e94\u624b\u3002 4.1\u3001\u5b66\u4e60\u5185\u5bb9 \u57fa\u7840\u7ec3\u4e60 \u8be5\u90e8\u5206\uff0c\u4e3b\u8981\u7ec3\u4e60\uff1a \u70b9\u4eae LED \u706f\u3001GPIO \u7684\u8f93\u5165\u8f93\u51fa\u64cd\u4f5c\u3001\u4e2d\u65ad\u64cd\u4f5c\u3001UART \u901a\u4fe1\u3001IIC \u901a\u4fe1 \u7b49 \u8fdb\u9636\u7ec3\u4e60 \u8be5\u90e8\u5206\uff0c\u4e3b\u8981\u7ec3\u4e60\uff1a DMA \u901a\u4fe1\u3001SPI \u901a\u4fe1\u3001CAN \u901a\u4fe1\u3001LCD \u663e\u793a\u5c4f\uff0cADC \u7b49 \u9ad8\u9636\u7ec3\u4e60 \u8be5\u90e8\u5206\uff0c\u4e3b\u8981\u5b66\u4e60\uff1a STM32 \u65f6\u949f\u67b6\u6784\u3001\u603b\u7ebf\u67b6\u6784\u3001\u7535\u6e90\u7ba1\u7406\u3001\u4ee3\u7801\u6846\u67b6\u3001SDIO \u901a\u4fe1\u3001USB \u901a\u4fe1 \u7b49\u3002 4.2\u3001\u5b66\u4e60\u5efa\u8bae \u5bf9\u4e8e \u57fa\u7840\u7ec3\u4e60 \uff0c\u4e3b\u8981\u76ee\u7684\u662f\u4e3a\u4e86\u65b9\u4fbf\u8ba9\u6211\u4eec\u4ece C51 \u5230 STM32 \u73af\u5883\u7684\u8fc7\u6e21\u3002 \u5bf9\u4e8e \u8fdb\u9636\u7ec3\u4e60 \uff0c\u4e3b\u8981\u7ec3\u4e60\u4e00\u4e9b\u901a\u4fe1\u7c7b\u76f8\u5173\u7684\u534f\u8bae\uff0c\u53ef\u4ee5\u7ed3\u5408\u4e00\u4e9b\u4f20\u611f\u5668\u8fdb\u884c\u5f00\u53d1\u3002 \u5bf9\u4e8e \u9ad8\u9636\u7ec3\u4e60 \uff0c\u4e3b\u8981\u76ee\u7684\u662f\u4e3a\u4e86\u719f\u6089\u5355\u7247\u673a\u7684\u8bbe\u8ba1\u67b6\u6784\uff0c\u7f16\u7a0b\u7684\u6846\u67b6\uff0c\u4ee5\u53ca\u4e00\u4e9b\u66f4\u590d\u6742\u7684\u901a\u4fe1\u6280\u672f\u3002 \u53e6\u5916\uff0cSTM32 \u4f1a\u6709\u5bc4\u5b58\u5668\u548c\u5e93\u51fd\u6570\u4e24\u4e2a\u7248\u672c\uff0c\u5efa\u8bae\u4ea4\u53c9\u5b66\u4e60\uff0c\u7406\u89e3\u4f1a\u66f4\u52a0\u6df1\u523b\u3002 4.3\u3001\u5b66\u4e60\u8d44\u6599 STM32 \u5355\u7247\u673a \uff1a\u63a8\u8350\u6b63\u70b9\u539f\u5b50\u3001\u91ce\u706b\u7684 STM32F103 \u6216\u8005 STM32F407 \u7cfb\u5217\u3002 \u4e24\u5bb6\u7684\u5b66\u4e60\u8d44\u6599\u90fd\u975e\u5e38\u4e30\u5bcc\uff0c\u65e2\u6709\u8be6\u7ec6\u7684\u6587\u6863\u8bf4\u660e\uff0c\u4e5f\u6709\u5b8c\u6574\u7684\u5b66\u4e60\u89c6\u9891\u6559\u7a0b\uff0c\u975e\u5e38\u9002\u5408\u65b0\u624b\u5165\u95e8\u5b66\u4e60\u3002 \u4fd7\u8bdd\u8bf4\uff1a\u201c\u6709\u9053\u65e0\u672f\uff0c\u672f\u5c1a\u53ef\u6c42\uff0c\u6709\u672f\u65e0\u9053\uff0c\u6b62\u4e8e\u672f\u201d\u3002\u8981\u660e\u767d\u9053\u548c\u672f\u7684\u533a\u522b\uff0c\u4e0d\u8981\u672c\u672b\u5012\u7f6e\u3002 \u4e94 \u5c0f\u800c\u7f8e\u7684 RTOS RTOS \uff0c\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a STM32 \u4e0e Linux \u4e4b\u95f4\u7684\u6865\u6881\uff0c\u7531\u4e8e\u5176\u5b9e\u73b0\u601d\u60f3\u5927\u90fd\u53d6\u4e4b\u4e8e Linux\uff0c\u6240\u4ee5\u4e5f\u79f0\u4e4b\u4e3a \u7cbe\u7b80\u7248\u7684 Linux \u3002 \u6211\u4eec\u5e38\u7528\u7684\u6709\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u6709\uff1a UCOS \uff0c VxWork \uff0c FreeRtos \uff0c\u8fd1\u4e9b\u5e74 RT-Thread \u4e5f\u5f02\u519b\u7a81\u8d77\u3002 \u5b66\u4e60\u8fd9\u4e9b\u7b80\u5355\u7684\u5d4c\u5165\u5f0f\u7cfb\u7edf\uff0c\u4e00\u6765\u80fd\u591f\u5e2e\u52a9\u6211\u4eec\u4e3a\u5b66\u4e60 Linux \u64cd\u4f5c\u7cfb\u7edf\u6253\u4e0b\u57fa\u7840\uff0c\u4e8c\u6765\u4e5f\u80fd\u591f\u6269\u5bbd\u6211\u4eec\u7684\u804c\u4e1a\u9053\u8def\u3002 \u524d\u9762\u4e5f\u8bf4\u8fc7\u4e86\uff0c\u65e0\u8bba\u662f UCOS \u3001 FreeRtos \u3001 Rt-thread \uff0c\u5176\u5185\u90e8\u7684\u8bbe\u8ba1\u601d\u60f3\u5927\u540c\u5c0f\u5f02\uff0c\u4e0b\u9762\u4e3b\u8981\u4ee5 Ucos \u4e3a\u4f8b\u3002 5.1\u3001\u5b66\u4e60\u5185\u5bb9 \u5b9e\u65f6\u7cfb\u7edf\u5b66\u4e60 \u8be5\u90e8\u5206\uff0c\u4e3b\u8981\u5b66\u4e60\uff1a \u79fb\u690d Ucos \u7cfb\u7edf\u3001\u591a\u4efb\u52a1\u7ba1\u7406\u3001\u8c03\u5ea6\u7b97\u6cd5\u3001\u6d88\u606f\u961f\u5217\u3001\u4fe1\u53f7\u91cf\u4e92\u65a5\u91cf\u3001\u4e8b\u4ef6\u3001\u5185\u5b58\u7ba1\u7406 \u7b49\u3002 5.2\u3001\u5b66\u4e60\u5efa\u8bae \u5bf9\u4e8e \u5b9e\u65f6\u7cfb\u7edf\u5b66\u4e60 \uff0c\u9664\u4e86\u4e0a\u8ff0\u7684\u90a3\u4e9b\u6838\u5fc3\u77e5\u8bc6\u70b9\u5916\uff0c\u8fd8\u8981\u7ed3\u5408 2.1 \u57fa\u7840\u5fc5\u5907\u77e5\u8bc6 \u7684 \u64cd\u4f5c\u7cfb\u7edf\u4e66\u7c4d \u52a0\u6df1\u7406\u89e3\u3002 5.3\u3001\u5b66\u4e60\u8d44\u6599 RTOS \u7684\u5b66\u4e60\uff1a\u4f9d\u65e7\u63a8\u8350\u6b63\u70b9\u539f\u5b50\uff0c\u91ce\u706b\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\uff0c\u53ef\u4ee5\u57fa\u4e8e STM32 \u5f00\u53d1\u677f\uff0c\u540c\u65f6\u4e5f\u6709\u975e\u5e38\u8be6\u7ec6\u7684\u6587\u6863\u548c\u89c6\u9891\u6559\u5b66\u3002 \u516d ARM+Linux \u7bc7 \u5b66\u4e60\u5b8c RTOS \u540e\uff0c\u57fa\u672c\u5d4c\u5165\u5f0f\u6240\u6d89\u53ca\u7684\u6280\u672f\u5df2\u7ecf\u638c\u63e1\u4e00\u534a\u4e86\uff0c\u4f60\u4e5f\u53ef\u4ee5\u72ec\u7acb\u5b8c\u6210\u4e00\u4e9b\u5c0f\u7684\u9879\u76ee\uff0c\u4e5f\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a\u4e0d\u9519\u7684\u5de5\u4f5c\uff0c\u4f46\u662f\u4e00\u5b9a\u4e0d\u8981\u81ea\u6211\u6ee1\u8db3\uff0c\u6709\u673a\u4f1a\u4e00\u5b9a\u8981\u63a5\u89e6 Linux\u3002 \u8fd8\u662f\u90a3\u53e5\u8bdd\uff1aARM+Linux\uff0c\u4e5f\u662f\u6700\u4e3a\u590d\u6742\u7684\u4e1c\u897f\uff0c\u5982\u679c\u4f60\u4e0d\u53bb\u63a5\u89e6Linux\uff0c\u4f60\u6c38\u8fdc\u4e0d\u77e5\u9053\u5d4c\u5165\u5f0f\u7684\u9b45\u529b\u3002 Linux \u5f00\u53d1 \u53c8\u5206\u4e3a \u9a71\u52a8\u5f00\u53d1 \uff0c \u5185\u6838\u5f00\u53d1 \uff0c \u5e94\u7528\u5f00\u53d1 \uff0c\u6bcf\u4e00\u4e2a\u65b9\u5411\u90fd\u9700\u8981\u51e0\u5e74\u751a\u81f3\u51e0\u5341\u5e74\u7684\u79ef\u7d2f\u3002 \u4f5c\u4e3a\u521d\u5b66\u8005\uff0c\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u5b8f\u89c2\u4e86\u89e3\uff0c\u6269\u5927\u6211\u4eec\u7684\u77e5\u8bc6\u9762\uff0c\u7136\u540e\u53bb\u9009\u62e9\u81ea\u5df1\u611f\u5174\u8da3\u7684\u65b9\u9762\u3002 6.1\u3001\u5b66\u4e60\u5185\u5bb9 Linux \u57fa\u7840\u7bc7 \u8be5\u90e8\u5206\u4e3b\u8981\u5b66\u4e60\uff1a Linux \u5e38\u7528\u547d\u4ee4\u3001VIM \u5b66\u4e60\u3001Linux \u7684 Shell \u7f16\u7a0b\u3001Gcc \u7f16\u8bd1\u3001Makefile \u7b49\u3002 \u9a71\u52a8\u7bc7 \u8be5\u90e8\u5206\u4e3b\u8981\u5b66\u4e60\uff1a \u5185\u6838\u6a21\u5757\u7f16\u8bd1\u539f\u7406\u3001\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u6846\u67b6\u3001\u5e73\u53f0\u8bbe\u5907\u9a71\u52a8\u3001\u8bbe\u5907\u6811\u3001Pinctrl \u5b50\u7cfb\u7edf\u3001I2C \u5b50\u7cfb\u7edf\u3001\u4e2d\u65ad\u5b50\u7cfb\u7edf\u3001\u5757\u8bbe\u5907\u9a71\u52a8\u6846\u67b6\u3001Bootloader \u7b49 \u5185\u6838\u7bc7 \u8be5\u90e8\u5206\u4e3b\u8981\u5b66\u4e60\uff1a \u7cfb\u7edf\u8c03\u7528\u3001\u5b58\u50a8\u7ba1\u7406\u3001\u8fdb\u7a0b\u7ba1\u7406\u3001\u5185\u5b58\u7ba1\u7406\u3001\u6587\u4ef6\u7ba1\u7406 \u7b49\u3002 \u5e94\u7528\u7bc7 \u8be5\u90e8\u5206\u4e3b\u8981\u5b66\u4e60\uff1a QT \u7f16\u7a0b\u3001TCP/IP \u534f\u8bae\u3001HTTP \u534f\u8bae \u7b49\u3002 6.2\u3001\u5b66\u4e60\u5efa\u8bae \u5bf9\u4e8e \u57fa\u7840\u5b66\u4e60 \uff0c\u521a\u63a5\u89e6\u5230 Linux \uff0c\u4e00\u822c\u6bd4\u8f83\u96be\u4e0a\u624b\uff0c\u4e0e\u4e4b\u524d\u7684\u5355\u7247\u673a\u5b8c\u5168\u4e0d\u540c\uff0c\u9700\u8981\u4e00\u4e2a\u719f\u6089\u73af\u5883\u7684\u8fc7\u7a0b\u3002 \u5bf9\u4e8e \u9a71\u52a8\u5b66\u4e60 \uff0c\u91cd\u8981\u5728\u4e8e\u660e\u767d \u201c\u5982\u4f55\u5728 Linux \u73af\u5883\u4e0b\u7f16\u5199\u9a71\u52a8\u7a0b\u5e8f\u201d \uff0c\u9a71\u52a8\u7684\u5e95\u5c42\u539f\u7406\u8fd8\u662f\u90a3\u6837\uff0c\u52a0\u4e86\u4e00\u5c42\u5c42\u7684\u6846\u67b6\uff0c\u9700\u8981\u6211\u4eec\u53bb\u719f\u6089\u3002 \u5bf9\u4e8e \u5185\u6838\u5b66\u4e60 \uff0c\u4e0a\u8ff0\u4e5f\u662f\u7cfb\u7edf\u7684\u51e0\u5927\u6838\u5fc3\u7279\u8272\uff0c\u91cd\u70b9\u5728\u4e8e \"\u5982\u4f55\u4f7f Linux \u6027\u80fd\u6700\u4f18\" \u5bf9\u4e8e \u5e94\u7528\u5b66\u4e60 \uff0c\u4e0a\u8ff0\u7684\u51e0\u4e2a\u65b9\u9762\u4e5f\u662f\u57fa\u7840\uff0c\u91cd\u70b9\u8fd8\u5728\u4e8e \u5f00\u53d1\u4ec0\u4e48\u5e94\u7528 \uff0c\u53bb\u5b66\u4e60\u54ea\u65b9\u9762\u7684\u77e5\u8bc6\uff0c\u6ca1\u6709\u5b9a\u8bba\u3002 \u5bf9\u4e8e Linux\uff0c\u6709\u53e5\u8001\u8bdd\u201c\u5b66\u4e60 Linux\uff0c3 \u5e74\u624d\u7b97\u5165\u95e8\uff0c5 \u5e74\u624d\u52c9\u5f3a\u7b97 Linux \u5de5\u7a0b\u5e08\uff0c\u5bf9\u4e8e\u4e0d\u592a\u719f\u6089\u7684\u9886\u57df\uff0c\u535a\u4e3b\u4e5f\u4e0d\u6562\u5984\u52a0\u65ad\u8a00\u3002\u201d 6.3\u3001\u5b66\u4e60\u8d44\u6599 \u5bf9\u4e8e \u57fa\u7840\u5b66\u4e60 \uff0c\u63a8\u8350 \u300a\u9e1f\u54e5\u7684 Linux \u79c1\u623f\u83dc\u300b \uff0c \u300aUnix \u73af\u5883\u9ad8\u7ea7\u7f16\u7a0b\u300b \u7b49\u5165\u95e8\u4e66\u7c4d\u3002 \u5bf9\u4e8e \u9a71\u52a8\u5f00\u53d1 \uff0c\u63a8\u8350 \u300aLinux \u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3\u300b \uff0c Linux \u5185\u6838\u6e90\u7801\u8be6\u89e3 \u7b49\u3002 \u5bf9\u4e8e \u5185\u6838\u5b66\u4e60 \uff0c\u63a8\u8350 \u300aLinux Shell \u811a\u672c\u653b\u7565\u300b \u3001 \u300a\u6df1\u5165\u7406\u89e3 Linux \u5185\u6838\u300b \u7b49\u3002 \u5bf9\u4e8e \u5e94\u7528\u5f00\u53d1 \uff0c\u63a8\u8350 \u300a\u5d4c\u5165\u5f0f Linux \u5e94\u7528\u5f00\u53d1\u5b8c\u5168\u624b\u518c\u300b \u3001 \u300aUnix \u7f51\u7edc\u7f16\u7a0b\u300b \u7b49\u3002 \u53e6\u5916\uff0c\u63a8\u8350\u6b63\u70b9\u539f\u5b50\uff0c\u91ce\u706b\uff0c\u97e6\u4e1c\u5c71\u4e09\u4e2a Linux \u5f00\u53d1\u6559\u7a0b\uff0c\u97e6\u8001\u5e08\u7684\u8bfe\u7a0b\u597d\u8bc4\u5c45\u591a\uff0c\u4f46\u8fd8\u662f\u770b\u54ea\u4e2a\u66f4\u9002\u5408\u81ea\u5df1\u3002 \u4e03 \u603b\u7ed3 \u5168\u6587\u6574\u4f53\u7684\u5b66\u4e60\u8def\u7ebf\uff1a \u5d4c\u5165\u5f0f\u57fa\u7840\u5b66\u4e60 -> 51 \u5355\u7247\u673a -> STM32 \u5355\u7247\u673a -> RTOS \u7bc7 -> ARM+Linux \u7eaf\u8f6f\u4ef6, 25 \u5c81\u5dc5\u5cf0, 35 \u5c81\u88ab\u88c1. \u5d4c\u5165\u5f0f, 29 \u5c81\u5dc5\u5cf0, 45 ~ 50 \u5c81\u88ab\u88c1. \u786c\u4ef6\u5de5\u7a0b\u5e08, 35 \u5c81\u5dc5\u5cf0, 60 \u5c81\u4ee5\u540e\u8d70\u4e0b\u5761\u8def. \u56db \u5982\u4f55\u6210\u4e3a\u4e00\u540d\u4f18\u79c0\u5d4c\u5165\u5f0f BSP \u5de5\u7a0b\u5e08 \u5982\u4f55\u6210\u4e3a\u4e00\u540d\u4f18\u79c0\u5d4c\u5165\u5f0f BSP \u5de5\u7a0b\u5e08 BSP \u5de5\u7a0b\u5e08\u62db\u8058\u8981\u6c42 \u4e94 SoC \u542f\u52a8\u6d41\u7a0b SOC (System on a Chip) bring-up \u662f\u4e00\u4e2a\u590d\u6742\u7684\u8fc7\u7a0b \uff0c\u6d89\u53ca\u5230\u786c\u4ef6\u3001\u56fa\u4ef6\u548c\u8f6f\u4ef6\u7684\u96c6\u6210\u548c\u9a8c\u8bc1\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e2a\u57fa\u4e8e BROM\uff0cSPL\uff0cUBOOT \u548c Linux \u7684\u542f\u52a8\u6d41\u7a0b\u7684\u6982\u8ff0\uff1a BROM (Boot Read-Only Memory)\u542f\u52a8\uff1a\u542f\u52a8\u7684\u6700\u521d\u9636\u6bb5\uff0c\u5728\u8fd9\u4e2a\u9636\u6bb5\uff0c\u7cfb\u7edf\u4f1a\u6267\u884c\u82af\u7247 ROM \u91cc\u9762\u7684\u4ee3\u7801\uff0c\u8fd9\u90e8\u5206\u4ee3\u7801\u4e3b\u8981\u7528\u6765\u68c0\u67e5\u542f\u52a8\u6a21\u5f0f\uff0c\u5305\u62ec NOR\u3001Nand\u3001Emmc \u7b49\uff0c\u7136\u540e\u4ece\u5bf9\u5e94\u7684\u5b58\u50a8\u4ecb\u8d28\u4e2d\u52a0\u8f7d SPL(Secondary Program Loader)\u4ee3\u7801\u3002 SPL (Secondary Program Loader)\u542f\u52a8\uff1aSPL \u5c5e\u4e8e Uboot \u7684\u4e00\u90e8\u5206\uff0c\u5b83\u7684\u4e3b\u8981\u4f5c\u7528\u5c31\u662f\uff1a \u521d\u59cb\u5316\u786c\u4ef6\u5e76\u52a0\u8f7d\u5b8c\u6574\u7684 U-boot \uff0c\u4e3b\u8981\u4f53\u73b0\u5728\u521d\u59cb\u5316\u65f6\u949f\u3001\u770b\u95e8\u72d7\u3001DDR\u3001GPIO \u4ee5\u53ca\u5b58\u50a8\u5916\u8bbe\uff0c\u6700\u540e\u5c06 U-boot \u4ee3\u7801\u52a0\u8f7d\u5230 DDR \u4e2d\u6267\u884c\u3002 U-Boot \u542f\u52a8\uff1aU-boot \u7684\u4e3b\u8981\u4f5c\u7528\u662f\uff1a\u5f15\u5bfc\u52a0\u8f7d Kernel \u548c DTS\u3002U-boot \u5728\u542f\u52a8\u4e4b\u540e\uff0c\u540c\u6837\u521d\u59cb\u5316 Soc \u786c\u4ef6\u8d44\u6e90\uff0c\u7136\u540e\u4f1a\u8ba1\u65f6\u7b49\u5f85\uff0c\u5e76\u6267\u884c\u9ed8\u8ba4\u7684\u542f\u52a8\u547d\u4ee4\uff0c\u5c06 Kernel \u548c DTS \u4fe1\u606f\u4ece\u5b58\u50a8\u4ecb\u8d28\u4e2d\u8bfb\u53d6\u51fa\u6765\u5e76\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u6267\u884c\u3002 Kernel \u542f\u52a8\uff1a\u5728 U-Boot \u52a0\u8f7d\u4e86\u5185\u6838\u6620\u50cf\u548c\u8bbe\u5907\u6811\u4e4b\u540e\uff0c\u7cfb\u7edf\u4f1a\u542f\u52a8 Linux\u3002\u5728\u8fd9\u4e2a\u9636\u6bb5\uff0c\u7cfb\u7edf\u4f1a\u521d\u59cb\u5316\u5404\u79cd\u786c\u4ef6\u8bbe\u5907\uff0c\u52a0\u8f7d\u9a71\u52a8\u7a0b\u5e8f\u5e76\u542f\u52a8\u7528\u6237\u7a7a\u95f4\u5e94\u7528\u7a0b\u5e8f\u3002","title":"\u7b2c\u4e8c\u7bc7 \u5d4c\u5165\u5f0f\u5f00\u53d1\u57fa\u7840"},{"location":"chapter_14/2_qianrushidev/#_1","text":"\u672c\u7bc7\u603b\u7ed3\u4e00\u4e9b\u5d4c\u5165\u5f0f Linux \u7cfb\u7edf\u5f00\u53d1\u57fa\u7840","title":"\u6982\u8ff0"},{"location":"chapter_14/2_qianrushidev/#_2","text":"","title":"\u4e00 \u5404\u79cd\u57fa\u7840\u6982\u5ff5"},{"location":"chapter_14/2_qianrushidev/#1","text":"\u7f16\u8bd1\u597d\u4e4b\u540e\u7684 Linux \u5185\u6838\u5206\u4e3a\u5185\u6838\u6587\u4ef6 zImage\u3001\u8bbe\u5907\u6811\u6587\u4ef6\u3001\u5404\u7c7b\u5185\u6838\u6a21\u5757, \u628a\u4ed6\u4eec\u66ff\u6362\u5230\u4e00\u53f0 Linux \u4e3b\u673a\u4e0a\u5c31\u53ef\u4ee5\u66ff\u6362\u6574\u4e2a\u7cfb\u7edf\u5185\u6838","title":"1 \u7f16\u8bd1\u597d\u7684\u5185\u6838\u5206\u4e3a\u54ea\u4e9b\u6a21\u5757"},{"location":"chapter_14/2_qianrushidev/#2","text":"\u6240\u8c13\u4ea4\u53c9\u7f16\u8bd1, \u5176\u4e2d\u4e00\u4e2a\u4f8b\u5b50\u5c31\u662f\u5728 x86 CPU \u7684\u4e3b\u673a\u4e0a\u7f16\u8bd1\u4e00\u4e2a\u53ef\u4ee5\u5728 Arm CPU \u4e0a\u53ef\u4ee5\u8fd0\u884c\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6, \u6709\u76f8\u5e94\u7684\u5de5\u5177\u94fe.","title":"2 \u4ec0\u4e48\u662f\u4ea4\u53c9\u7f16\u8bd1?"},{"location":"chapter_14/2_qianrushidev/#3-emmc","text":"eMMC \u662f embedded MultiMediaCard \u7684\u7b80\u79f0\u3002MultiMediaCard\uff0c\u5373 MMC\uff0c\u662f\u4e00\u79cd\u95ea\u5b58\u5361(Flash Memory Card)\u6807\u51c6\uff0c\u5b83\u5b9a\u4e49\u4e86 MMC \u7684\u67b6\u6784\u4ee5\u53ca\u8bbf\u95ee Flash Memory \u7684\u63a5\u53e3\u548c\u534f\u8bae\u3002\u800c eMMC \u5219\u662f\u5bf9 MMC \u7684\u4e00\u4e2a\u62d3\u5c55\uff0c\u4ee5\u6ee1\u8db3\u66f4\u9ad8\u6807\u51c6\u7684\u6027\u80fd\u3001\u6210\u672c\u3001\u4f53\u79ef\u3001\u7a33\u5b9a\u3001\u6613\u7528\u7b49\u7684\u9700\u6c42\u3002 \u4e2a\u4eba\u7406\u89e3\u4e3a\u5d4c\u5165\u5f0f\u5f00\u53d1\u677f\u4e0a\u81ea\u5e26\u7684\u95ea\u5b58","title":"3 \u4ec0\u4e48\u662f eMMC"},{"location":"chapter_14/2_qianrushidev/#4-soc","text":"\u5355\u7247\u7cfb\u7edf\u6216\u7247\u4e0a\u7cfb\u7edf\uff08\u82f1\u8bed\uff1aSystem on a Chip\uff0c\u7f29\u5199\uff1aSoC\uff09\u662f\u4e00\u4e2a\u5c06\u7535\u8111\u6216\u5176\u4ed6\u7535\u5b50\u7cfb\u7edf\u96c6\u6210\u5230\u5355\u4e00\u82af\u7247\u7684\u96c6\u6210\u7535\u8def.","title":"4 \u4ec0\u4e48\u662f SoC"},{"location":"chapter_14/2_qianrushidev/#41-sfr","text":"\u7279\u6b8a\u529f\u80fd\u5bc4\u5b58\u5668\uff08special function register,SFR\uff09","title":"4.1 \u4ec0\u4e48\u662f SFR"},{"location":"chapter_14/2_qianrushidev/#42","text":"\u8fd9\u7bc7\u6587\u7ae0 \u5f88\u6709\u610f\u601d, \u89e3\u91ca\u4e86\u7269\u7406\u5730\u5740\u548c\u5bf9\u5e94\u5f15\u811a\u7684\u5173\u7cfb. \u5bc4\u5b58\u5668\u662f RAM \u548c ROM \u7684\u7edf\u79f0 . (\u8bf4\u5230\u5e95\u5bc4\u5b58\u5668\u5c31\u662f RAM \u548c ROM, \u6709\u7269\u7406\u5730\u5740, \u6bd4\u5982 0x90. \u800c\u8fd0\u7ef4\u5de5\u7a0b\u5e08\u7531\u4e8e\u5e38\u5e74\u63a5\u89e6\u7ebf\u4e0a\u670d\u52a1\u5668\u603b\u4ee5\u4e3a RAM \u5f88\u5927,\u5c11\u5219 128GB \u591a\u5219 384GB, \u5176\u5b9e\u4e5f\u6709\u5f88\u591a\u5f88\u591a\u5f88\u5c0f\u7684 RAM) \u5c31\u50cf\u732b\u79d1\u52a8\u7269\u662f\u8001\u864e\u4e0e\u72ee\u5b50\u7684\u7edf\u79f0\u4e00\u6837 ROM/RAM \u5bf9\u4e8e\u73a9\u7535\u8111\u7684\u4eba\u5e76\u4e0d\u964c\u751f\uff0c\u4ec0\u4e48\u5185\u5b58 3G\uff08\u5185\u5b58\u5c31\u662f RAM\uff09\uff0c- - \u786c\u76d8 100G\uff08\u786c\u76d8\u5c31\u662f ROM\uff09 \u5355\u7247\u673a\u91cc\u9762\u548c\u7535\u8111\u4e00\u6837\uff0c\u6709 ROM \u548c RAM \u4e4b\u5206 \u4e00\u5f00\u59cb\u5355\u7247\u673a\u6ca1\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u5355\u7247\u673a\u4e0d\u8ba4\u5f97\u4ec0\u4e48\u53eb P1 \u53e3 \u4ed6\u53ea\u77e5\u9053 P1 \u53e3\u7684 8 \u53ea\u5f15\u811a\uff0c\u662f\u8fde\u7740\u5185\u90e8\u5730\u5740 0x90 \u7b80\u6d01\u6765\u8bf4\u5c31\u662f\uff0cP1 \u53e3\u8fd9\u4e9b\u5f15\u811a\u5c31\u662f 0x90 \u5730\u5740\u5ef6\u4f38\u51fa\u6765\u7684\u5f15\u811a\uff0c\u5728\u6ca1\u7a0b\u5e8f\u7684\u60c5\u51b5\u4e0b\uff0c\u5355\u7247\u673a\u662f\u4e0d\u77e5\u9053\u4ec0\u4e48\u53eb P1 \u53e3\u7684\uff0c\u4ed6\u53ea\u77e5\u9053 0x90 \u5730\u5740\u548c\u5916\u90e8\u7684\u5f15\u811a\u5c31\u8fd9\u4e48\u8fde\u7740\uff0c\u4f60\u4e5f\u53ef\u4ee5\u62ff\u7740 0x80\uff0c0x90\uff0c\u8fd9\u4e9b\u5730\u5740\u53bb\u7f16\u5199\u6211\u4eec\u7684\u7a0b\u5e8f\uff0c\u4e00\u4e2a\u4e24\u4e2a\u5012\u662f\u65e0\u6240\u8c13\uff0c\u4f46\u662f\u591a\u51e0\u4e2a\u4f60\u5c31\u4f1a\u89c9\u5f97\u5f88\u70e6\u4e86 \u6240\u4ee5 sfr P1 = 0x90\uff0c\u5c31\u662f\u628a\u5355\u7247\u673a\u7684\u5730\u5740 0x90 \u6539\u540d\u5b57\u4e3a P1\uff0c\u65b9\u4fbf\u6211\u4eec\u4f7f\u7528\uff0c\u660e\u767d\u4e86\u5417\uff1f \u4e00\u4e2a\u5f04\u660e\u767d\u540e\uff0c\u5269\u4e0b\u7684\u4e00\u5806\uff0c\u4f60\u5c31\u61c2\u4e86 sfr P1 = 0x90; sfr P2 = 0xA0; sfr P3 = 0xB0; sfr PSW = 0xD0; sfr ACC = 0xE0; \u7b80\u5355\u6765\u4e86\u5c31\u662f\u4e3a RAM \u91cc\u9762\u7684\u5730\u5740\u6539\u540d\u5b57\u65b9\u4fbf\u6211\u4eec\u7528 \u5176\u5b9e\u8fd9\u4e9b\u4e1c\u897f\u4f60\u4e0d\u7528\u8fc7\u4e8e\u7814\u7a76\u7684\uff0c\u4f60\u4e86\u89e3\u4e00\u4e0b\u5c31\u53ef\u4ee5\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u5199\u7a0b\u5e8f\u4e2d\u80af\u5b9a\u6709\u4e00\u4e2a reg52.h \u7684\u5934\u6587\u4ef6\uff0c\u56e0\u4e3a\u5b9a\u4e49\u540d\u5b57\u8fd9\u4e2a\u4e8b\u60c5\u5c31\u5728\u8fd9\u4e2a\u5934\u6587\u4ef6\u91cc\u9762\u4e86\uff0c\u4f60\u4f1a\u8c03\u7528\u5c31\u884c\uff0c\u4e0d\u7528\u8fc7\u4e8e\u7814\u7a76\u3002 \u603b\u7ed3\u5982\u4e0b : \u5728\u6ca1\u7a0b\u5e8f\u7684\u60c5\u51b5\u4e0b\uff0c\u5355\u7247\u673a\u662f\u4e0d\u77e5\u9053\u4ec0\u4e48\u53eb P1 \u53e3\u7684\uff0c\u4ed6\u53ea\u77e5\u9053 0x90 \u5730\u5740\u548c\u5916\u90e8\u7684\u5f15\u811a\u5c31\u8fd9\u4e48\u8fde\u7740\uff0c\u4f60\u4e5f\u53ef\u4ee5\u62ff\u7740 0x80\uff0c0x90\uff0c\u8fd9\u4e9b\u5730\u5740\u53bb\u7f16\u5199\u6211\u4eec\u7684\u7a0b\u5e8f\uff0c\u4e00\u4e2a\u4e24\u4e2a\u5012\u662f\u65e0\u6240\u8c13\uff0c\u4f46\u662f\u591a\u51e0\u4e2a\u4f60\u5c31\u4f1a\u89c9\u5f97\u5f88\u70e6\u4e86 \u6240\u4ee5 sfr P1 = 0x90\uff0c\u5c31\u662f\u628a\u5355\u7247\u673a\u7684\u5730\u5740 0x90 \u6539\u540d\u5b57\u4e3a P1\uff0c\u65b9\u4fbf\u6211\u4eec\u4f7f\u7528. \u4e5f\u5c31\u662f\u8bf4\u5916\u8bbe\u63a5\u5165\u4e00\u53f0 Linux \u4e3b\u673a\u540e, \u5176\u5b9e\u5b83\u7684\u7269\u7406\u5185\u5b58\u5730\u5740\u662f\u56fa\u5b9a\u7684(\u8fd9\u4e2a\u662f\u786c\u4ef6\u8bbe\u8ba1\u7684\u65f6\u5019\u5c31\u505a\u597d\u7684). \u6211\u4eec\u5199\u9a71\u52a8\u7a0b\u5e8f\u7684\u65f6\u5019, \u6700\u6700\u5e95\u5c42\u5c31\u8bf4\u53bb\u64cd\u4f5c\u8fd9\u4e9b\u7269\u7406\u5185\u5b58\u5730\u5740(\u53d6\u503c\u3001\u8d4b\u503c\u3001\u4fee\u6539)","title":"4.2 \u7269\u7406\u5730\u5740\u548c\u5bf9\u5e94\u5f15\u811a\u7684\u5173\u7cfb"},{"location":"chapter_14/2_qianrushidev/#5-linux-device-tree","text":"","title":"5 Linux \u8bbe\u5907\u6811\uff08Device Tree\uff09\u7b80\u4ecb"},{"location":"chapter_14/2_qianrushidev/#51-dts-device-tree-source","text":".dts \u6587\u4ef6\u662f\u4e00\u79cd ASCII \u6587\u672c\u683c\u5f0f\u7684 Device Tree \u63cf\u8ff0\uff0c\u6b64\u6587\u672c\u683c\u5f0f\u975e\u5e38\u4eba\u6027\u5316\uff0c\u9002\u5408\u4eba\u7c7b\u7684\u9605\u8bfb\u4e60\u60ef\u3002\u57fa\u672c\u4e0a\uff0c\u5728 ARM Linux \u5728\uff0c\u4e00\u4e2a.dts \u6587\u4ef6\u5bf9\u5e94\u4e00\u4e2a ARM \u7684 machine\uff0c\u4e00\u822c\u653e\u7f6e\u5728\u5185\u6838\u7684 arch/arm/boot/dts/\u76ee\u5f55\u3002\u7531\u4e8e\u4e00\u4e2a SoC \u53ef\u80fd\u5bf9\u5e94\u591a\u4e2a machine\uff08\u4e00\u4e2a SoC \u53ef\u4ee5\u5bf9\u5e94\u591a\u4e2a\u4ea7\u54c1\u548c\u7535\u8def\u677f\uff09\uff0c\u52bf\u5fc5\u8fd9\u4e9b.dts \u6587\u4ef6\u9700\u5305\u542b\u8bb8\u591a\u5171\u540c\u7684\u90e8\u5206\uff0cLinux \u5185\u6838\u4e3a\u4e86\u7b80\u5316\uff0c\u628a SoC \u516c\u7528\u7684\u90e8\u5206\u6216\u8005\u591a\u4e2a machine \u5171\u540c\u7684\u90e8\u5206\u4e00\u822c\u63d0\u70bc\u4e3a.dtsi\uff0c\u7c7b\u4f3c\u4e8e C \u8bed\u8a00\u7684\u5934\u6587\u4ef6\u3002\u5176\u4ed6\u7684 machine \u5bf9\u5e94\u7684.dts \u5c31 include \u8fd9\u4e2a.dtsi\u3002","title":"5.1 DTS (device tree source)"},{"location":"chapter_14/2_qianrushidev/#52-dtc-device-tree-compiler","text":"\u5c06.dts \u7f16\u8bd1\u4e3a.dtb \u7684\u5de5\u5177\u3002DTC \u7684\u6e90\u4ee3\u7801\u4f4d\u4e8e\u5185\u6838\u7684 scripts/dtc \u76ee\u5f55\uff0c\u5728 Linux \u5185\u6838\u4f7f\u80fd\u4e86 Device Tree \u7684\u60c5\u51b5\u4e0b\uff0c\u7f16\u8bd1\u5185\u6838\u7684\u65f6\u5019\u4e3b\u673a\u5de5\u5177 dtc \u4f1a\u88ab\u7f16\u8bd1\u51fa\u6765\uff0c\u5bf9\u5e94 scripts/dtc/Makefile \u4e2d\u7684\u201chostprogs-y := dtc\u201d\u8fd9\u4e00 hostprogs \u7f16\u8bd1 target\u3002 \u5728 Linux \u5185\u6838\u7684 arch/arm/boot/dts/Makefile \u4e2d\uff0c\u63cf\u8ff0\u4e86\u5f53\u67d0\u79cd SoC \u88ab\u9009\u4e2d\u540e\uff0c\u54ea\u4e9b.dtb \u6587\u4ef6\u4f1a\u88ab\u7f16\u8bd1\u51fa\u6765\u3002","title":"5.2 DTC (device tree compiler)"},{"location":"chapter_14/2_qianrushidev/#53-device-tree-blob-dtb","text":".dtb \u662f.dts \u88ab DTC \u7f16\u8bd1\u540e\u7684\u4e8c\u8fdb\u5236\u683c\u5f0f\u7684 Device Tree \u63cf\u8ff0\uff0c\u53ef\u7531 Linux \u5185\u6838\u89e3\u6790\u3002\u901a\u5e38\u5728\u6211\u4eec\u4e3a\u7535\u8def\u677f\u5236\u4f5c NAND\u3001SD \u542f\u52a8 image \u65f6\uff0c\u4f1a\u4e3a.dtb \u6587\u4ef6\u5355\u72ec\u7559\u4e0b\u4e00\u4e2a\u5f88\u5c0f\u7684\u533a\u57df\u4ee5\u5b58\u653e\u4e4b\uff0c\u4e4b\u540e bootloader \u5728\u5f15\u5bfc kernel \u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u5148\u8bfb\u53d6\u8be5.dtb \u5230\u5185\u5b58\u3002 \u5c06 dtb \u53cd\u7f16\u8bd1\u6210 dts $ dtc -I dtb -O dts -o .dts .dtb \u6216 $ dtc -I dtb -O dts .dtb > .dts","title":"5.3 Device Tree Blob (.dtb)"},{"location":"chapter_14/2_qianrushidev/#6","text":"\u5177\u4f53\u7684\u6848\u4f8b\u662f: Windows \u4e0a\u4f7f\u7528\u4e13\u95e8\u7684\u5de5\u5177\u8f6f\u4ef6, \u5c06\u7f16\u8bd1\u597d\u7684 Linux \u7cfb\u7edf\u5b8c\u6574\u955c\u50cf\u6587\u4ef6(\u5305\u62ec uboot\u3001zImage\u3001\u8bbe\u5907\u6811\u6587\u4ef6)\u70e7\u5199\u5230\u5f00\u53d1\u677f\u7684 eMMC \u6216\u8005 SD \u5361\u4e0a, \u4ee5\u5b8c\u6210\u6574\u4e2a\u7cfb\u7edf\u66ff\u6362\u7684\u8fc7\u7a0b. \u53ef\u4ee5\u89e3\u51b3\u4eba\u4e3a\u5c06\u5f00\u53d1\u677f\u7cfb\u7edf\u7834\u574f\u5bfc\u81f4\u7cfb\u7edf\u8fd0\u884c\u4e0d\u6b63\u5e38\u7b49\u95ee\u9898. \u70e7\u5199 \u5c31\u662f\u5c06\u5199\u597d\u7684\u7a0b\u5e8f\u7f16\u8bd1\u597d\u5f62\u6210 HEX \u6216 BIN \u6587\u4ef6\u540e\uff0c\u5c06\u8fd9\u4e2a\u7a0b\u5e8f\u5199\u8fdb\u5355\u7247\u673a\u82af\u7247\u7684\u8fc7\u7a0b\u5c31\u53eb\u70e7\u5199\u3002 \u662f\u6cbf\u7528\u6700\u65e9\u7684\u5355\u7247\u673a\u53ea\u80fd\u4e00\u6b21\u6027\u5199\u5165\uff0c\u56e0\u6b64\u5c31\u53eb\u505a\u70e7\u5199\u3002\u540e\u6765\u6709\u4e86\u7d2b\u5916\u7ebf\u53ef\u64e6\u9664\u7684 EEPROM\uff0c\u73b0\u5728\u6709\u4e86\u53ef\u968f\u65f6\u64e6\u9664\u7684 FLASH ROM\uff0c\u4f46\u4f9d\u7136\u6cbf\u7528\u53eb\u70e7\u5199\u4e86\uff0c\u8fd9\u6837\u4e5f\u65b9\u4fbf\u7279\u6307 PC \u5411 MCU \u5199\u5165\u7a0b\u5e8f\u3002\u514d\u5f97\u548c\u5355\u7247\u673a\u5de5\u4f5c\u65f6\u4e32\u53e3\u7684\u4e0a\u4f20\u548c\u4e0b\u6b21\u6570\u636e\u76f8\u6df7\u6dc6\u3002","title":"6 \u4ec0\u4e48\u662f\u70e7\u5199"},{"location":"chapter_14/2_qianrushidev/#7-stm32","text":"STM32 \u662f\u610f\u6cd5\u534a\u5bfc\u4f53 (STMicroelectronics) \u516c\u53f8\u63a8\u51fa\u7684\u65b0\u4e00\u4ee3\u57fa\u4e8e Cortex-M \u5185\u6838\u7684 32 \u4f4d\u5fae\u63a7\u5236\u5668\u7cfb\u5217\u3002STM32 \u4ee5\u5176\u9ad8\u6027\u80fd\u3001\u4f4e\u529f\u8017\u3001\u4e00\u6d41\u7684\u5916\u8bbe\u3001\u7b80\u5355\u6613\u7528\u7b49\u7279\u70b9\u5728\u8fd1\u51e0\u5e74\u8fc5\u901f\u53d1\u5c55\uff0c\u5360\u9886\u4e86\u5f88\u5927\u5e02\u573a\uff0c\u5f97\u5230\u4e86\u5f88\u591a\u5f00\u53d1\u8005\u9752\u7750\u3002 \u53c2\u8003 stm32 \u7684\u7528\u9014\u5f88\u5e7f \uff0c\u6211\u4eec\u8eab\u8fb9\u968f\u5904\u53ef\u89c1\u3002STM32 \u5c5e\u4e8e\u4e00\u4e2a\u5fae\u63a7\u5236\u5668\uff0c\u81ea\u5e26\u4e86\u5404\u79cd\u5e38\u7528\u901a\u4fe1\u63a5\u53e3\uff0c\u6bd4\u5982 USART\u3001 I2C\u3001 SPI \u7b49\uff0c\u53ef\u63a5\u975e\u5e38\u591a\u7684\u4f20\u611f\u5668\uff0c\u53ef\u4ee5\u63a7\u5236\u5f88\u591a\u7684\u8bbe\u5907\u3002\u6bd4\u5982\u667a\u80fd\u624b\u73af\uff0c\u5fae\u578b\u56db\u8f74\u98de\u884c\u5668\uff0c\u5e73\u8861\u8f66\u3001\u79fb\u52a8 POST \u673a\uff0c\u667a\u80fd\u7535\u996d\u9505\uff0c 3D \u6253\u5370\u673a\u7b49\u7b49\u3002\u5c0f\u7c73\u7684\u5f88\u591a\u8bbe\u5907\u91cc\u90fd\u6709\u4f7f\u7528 stm32\u3002 STM32\uff0c\u4ece\u5b57\u9762\u4e0a\u6765\u7406\u89e3\uff0c ST \u662f\u610f\u6cd5\u534a\u5bfc\u4f53\uff0c M \u662f Microelectronics \u7684\u7f29\u5199\uff0c 32 \u8868\u793a 32 \u4f4d\uff0c\u5408\u8d77\u6765\u7406\u89e3\uff0c STM32 \u5c31\u662f\u6307 ST \u516c\u53f8\u5f00\u53d1\u7684 32 \u4f4d\u5fae\u63a7\u5236\u5668\u3002","title":"7 \u4ec0\u4e48\u662f STM32"},{"location":"chapter_14/2_qianrushidev/#8-gpio","text":"","title":"8 \u4ec0\u4e48\u662f GPIO"},{"location":"chapter_14/2_qianrushidev/#a","text":"General Purpose Input Output(\u901a\u7528\u8f93\u5165/\u8f93\u51fa.) GPIO \u662f\u901a\u7528\u8f93\u5165/\u8f93\u51fa\u7aef\u53e3\u7684\u7b80\u79f0\uff0c\u662f STM32 \u53ef\u63a7\u5236\u7684\u5f15\u811a\u3002GPIO \u7684\u5f15\u811a\u4e0e\u5916\u90e8\u786c\u4ef6\u8bbe\u5907\u8fde\u63a5\uff0c\u53ef\u5b9e\u73b0\u4e0e\u5916\u90e8\u901a\u8baf\u3001\u63a7\u5236\u5916\u90e8\u786c\u4ef6\u6216\u8005\u91c7\u96c6\u5916\u90e8\u786c\u4ef6\u6570\u636e\u7684\u529f\u80fd\u3002 \u5176\u5b9e GPIO \u7684\u672c\u8d28\u5c31\u662f\u82af\u7247\u7684\u4e00\u4e2a\u5f15\u811a\uff0c\u901a\u5e38\u5728 ARM \u4e2d\u6240\u6709\u7684 I/O \u90fd\u662f\u901a\u7528\u7684\u3002\u4e0d\u8fc7\u7531\u4e8e\u6bcf\u4e2a\u5f00\u53d1\u677f\u4e0a\u90fd\u4f1a\u8bbe\u8ba1\u4e0d\u540c\u7684\u5916\u56f4\u7535\u8def\uff0c\u8fd9\u5c31\u9020\u6210 GPIO \u7684\u529f\u80fd\u53ef\u80fd\u6709\u6240\u4e0d\u540c.","title":"A \u57fa\u7840\u6982\u5ff5"},{"location":"chapter_14/2_qianrushidev/#b-gpio-8","text":"GPIO \u5171\u6709 8 \u4e2d\u8f93\u5165\u8f93\u51fa\u6a21\u5f0f\uff0c\u5206\u522b\u662f\uff1a \u4e0a\u62c9\u8f93\u5165 \u3001 \u4e0b\u62c9\u8f93\u5165 \u3001 \u6d6e\u7a7a\u8f93\u5165 \u3001 \u6a21\u62df\u8f93\u5165 \u3001 \u5f00\u6f0f\u8f93\u51fa \u3001 \u63a8\u633d\u8f93\u51fa \u3001 \u5f00\u6f0f\u590d\u7528\u8f93\u51fa \u3001 \u63a8\u633d\u590d\u7528\u8f93\u51fa \uff0c\u4e0b\u9762\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4ee5\u4e0b\u4e0a\u9762\u7684\u516b\u79cd\u8f93\u5165\u8f93\u51fa\u6a21\u5f0f\u3002 \u4e0a\u62c9\u8f93\u5165\uff1a GPIO_Mode_IPU \u4e0b\u62c9\u8f93\u5165\uff1a GPIO_Mode_IPD \u6d6e\u7a7a\u8f93\u5165\uff1a GPIO_Mode_IN_FLOATING \u6a21\u62df\u8f93\u5165\uff1a GPIO_Mode_AIN \u5f00\u6f0f\u8f93\u51fa\uff1a GPIO_Mode_Out_OD \u63a8\u633d\u8f93\u51fa\uff1a GPIO_Mode_Out_PP \u5f00\u6f0f\u590d\u7528\uff1a GPIO_Mode_AF_OD \u63a8\u5b8c\u590d\u7528\uff1a GPIO_Mode_AF_PP","title":"B GPIO \u7684 8 \u79cd\u8f93\u5165\u8f93\u51fa\u6a21\u5f0f"},{"location":"chapter_14/2_qianrushidev/#9-fpga","text":"","title":"9 \u4ec0\u4e48\u662f FPGA"},{"location":"chapter_14/2_qianrushidev/#a_1","text":"\u8981\u77e5\u9053 CPU\u3001GPU\u3001FPGA \u4e09\u8005\u80fd\u529b\u76f8\u52a0\u5c31\u662f\u82af\u7247\u7684\u672a\u6765\uff01 FPGA \u95e8\u69db\u4e4b\u9ad8\u5728\u82af\u7247\u884c\u4e1a\u91cc\u65e0\u51fa\u5176\u53f3\u3002 FPGA \u662f\u4e00\u4e2a\u672c\u9886\u7fa4\u96c6\u578b\u7684\u884c\u4e1a\uff0c\u6ca1\u6709\u575a\u5b9e\u7684\u672c\u9886\u529f\u5e95\uff0c\u5f88\u96be\u9020\u6210\u6709\u89d2\u9010\u529b\u7684\u4ea7\u7269\u3002","title":"A \u57fa\u7840\u524d\u63d0"},{"location":"chapter_14/2_qianrushidev/#b","text":"","title":"B \u57fa\u7840\u6982\u5ff5"},{"location":"chapter_14/2_qianrushidev/#1-fpga","text":"FPGA \u662f\u4e00\u79cd\u786c\u4ef6\u53ef\u91cd\u6784\u7684\u4f53\u7cfb\u7ed3\u6784\u3002\u5b83\u7684\u82f1\u6587\u5168\u79f0\u662f Field Programmable Gate Array\uff0c\u4e2d\u6587\u540d\u662f\u73b0\u573a\u53ef\u7f16\u7a0b\u95e8\u9635\u5217\u3002 FPGA \u662f\u4e00\u4e2a\u53ef\u4ee5\u901a\u8fc7\u7f16\u7a0b\u6765\u6539\u53d8\u5185\u90e8\u7ed3\u6784\u7684\u82af\u7247. FPGA \u5e94\u7528\u573a\u666f: 1 \u7528\u4f5c\u4e13\u7528\u82af\u7247\uff08ASIC\uff09\u7684\u5c0f\u6279\u91cf\u66ff\u4ee3\u54c1\uff0c 2 \u540c\u65f6\u4e5f\u5728\u5fae\u8f6f\u3001\u767e\u5ea6\u7b49\u516c\u53f8\u7684\u6570\u636e\u4e2d\u5fc3\u5927\u89c4\u6a21\u90e8\u7f72\uff0c\u4ee5\u540c\u65f6\u63d0\u4f9b\u5f3a\u5927\u7684\u8ba1\u7b97\u80fd\u529b\u548c\u8db3\u591f\u7684\u7075\u6d3b\u6027\u3002","title":"1 FPGA"},{"location":"chapter_14/2_qianrushidev/#2-ip","text":"FPGA \u6709\u4e2a\u6700\u91cd\u8981\u7684\u6982\u5ff5\u5c31\u662f IP \u6838\u3002 IP(Intelligent Property) \u6838\u662f\u5177\u6709\u77e5\u8bc6\u4ea7\u6743\u6838\u7684\u96c6\u6210\u7535\u8def\u82af\u6838\u603b\u79f0\uff0c\u662f\u7ecf\u8fc7\u53cd\u590d\u9a8c\u8bc1\u8fc7\u7684\u3001\u5177\u6709\u7279\u5b9a\u529f\u80fd\u7684\u5b8f\u6a21\u5757\uff0c\u4e0e\u82af\u7247\u5236\u9020\u5de5\u827a\u65e0\u5173\uff0c\u53ef\u4ee5\u79fb\u690d\u5230\u4e0d\u540c\u7684\u534a\u5bfc\u4f53\u5de5\u827a\u4e2d\u3002 \u5982\u679c\u8fd8\u4e0d\u7406\u89e3\uff0c\u4f60\u5c31\u5f53\u4ed6\u662f\u4e00\u4e2a\u8f6f\u4ef6\u6a21\u5757\uff0c\u6216\u8005\u662f\u4e00\u4e2a\u79ef\u6728\u7684\u90e8\u4ef6\u3002 \u6bd4\u5982\u8d5b\u7075\u601d\u5df2\u7ecf\u57fa\u4e8e FPGA \u8bbe\u8ba1\u597d\u4e86 UDP \u6838\u3001PCIE xDMA \u6838\u3001UART \u6838\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628a\u4eba\u5bb6\u7684\u6838\u6dfb\u52a0\u5230\u6211\u4eec\u5de5\u7a0b\u4e2d\uff0c\u90a3\u4e48\u5c31\u76f8\u5f53\u4e8e\u4e0e\u6211\u4eec\u7684\u677f\u5b50\u5df2\u7ecf\u652f\u6301\u4e86\u8fd9\u4e2a\u529f\u80fd\u3002 \u5bf9\u4e8e FPGA \u5f00\u53d1\u8f6f\u4ef6\uff0c \u5176\u63d0\u4f9b\u7684 IP \u6838\u8d8a\u4e30\u5bcc\uff0c\u7528\u6237\u7684\u8bbe\u8ba1\u5c31\u8d8a\u65b9\u4fbf\uff0c\u5176\u5e02\u573a\u5360\u7528\u7387\u5c31\u8d8a\u9ad8\u3002 \u4e00\u53e5\u8bdd\uff1aIP \u6838\u5f88\u503c\u94b1\uff01","title":"2 IP \u6838"},{"location":"chapter_14/2_qianrushidev/#c-fpga-gpu","text":"FPGA \u4e0e GPU \u7684\u533a\u522b\u672c\u8d28\u4e0a\u662f\u4f53\u7cfb\u7ed3\u6784\u7684\u533a\u522b CPU\u3001GPU \u90fd\u5c5e\u4e8e\u51af\u00b7\u8bfa\u4f9d\u66fc\u7ed3\u6784\uff0c\u6307\u4ee4\u8bd1\u7801\u6267\u884c\u3001\u5171\u4eab\u5185\u5b58\u3002 FPGA \u672c\u8d28\u4e0a\u662f\u65e0\u6307\u4ee4\u3001\u65e0\u9700\u5171\u4eab\u5185\u5b58\u7684\u4f53\u7cfb\u7ed3\u6784\u3002","title":"C FPGA \u4e0e GPU \u7684\u533a\u522b"},{"location":"chapter_14/2_qianrushidev/#10-mcu-mpu","text":"","title":"10 MCU \u548c MPU"},{"location":"chapter_14/2_qianrushidev/#101","text":"MCU\uff08Microcontroller Unit\uff09\u548c MPU\uff08Microprocessor Unit\uff09\u662f\u4e24\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u5d4c\u5165\u5f0f\u5904\u7406\u5668 \u4e00\u4e2a\u662f\u5fae\u63a7\u5236\u5668\u3001\u4e00\u4e2a\u5fae\u5904\u7406\u5668","title":"10.1 \u662f\u4ec0\u4e48"},{"location":"chapter_14/2_qianrushidev/#102","text":"1 \u7528\u9014 MCU\uff1aMCU \u901a\u5e38\u7528\u4e8e\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u8fd9\u4e9b\u7cfb\u7edf\u9700\u8981\u6267\u884c\u7279\u5b9a\u7684\u63a7\u5236\u4efb\u52a1\uff0c\u5982\u4f20\u611f\u5668\u6570\u636e\u91c7\u96c6\u3001\u81ea\u52a8\u63a7\u5236\u3001\u5d4c\u5165\u5f0f\u8bbe\u5907\u63a7\u5236\u7b49\u3002\u5b83\u4eec\u4e13\u6ce8\u4e8e\u5b9e\u65f6\u63a7\u5236\u548c\u4f4e\u529f\u8017\u64cd\u4f5c\u3002 MPU\uff1aMPU \u66f4\u7c7b\u4f3c\u4e8e\u901a\u7528\u8ba1\u7b97\u673a\u5904\u7406\u5668\uff0c\u901a\u5e38\u7528\u4e8e\u6267\u884c\u66f4\u590d\u6742\u7684\u901a\u7528\u8ba1\u7b97\u4efb\u52a1\uff0c\u8fd0\u884c\u64cd\u4f5c\u7cfb\u7edf\u4ee5\u53ca\u652f\u6301\u5404\u79cd\u5e94\u7528\u7a0b\u5e8f\uff0c\u5982\u667a\u80fd\u624b\u673a\u3001\u4e2a\u4eba\u7535\u8111\u3001\u670d\u52a1\u5668\u7b49\u3002 2 \u5904\u7406\u5668\u6838\u5fc3 MCU\uff1aMCU \u901a\u5e38\u4f7f\u7528\u8f83\u7b80\u5355\u7684\u5904\u7406\u5668\u6838\u5fc3\uff0c\u5982\u57fa\u4e8e RISC\uff08\u7cbe\u7b80\u6307\u4ee4\u96c6\u8ba1\u7b97\u673a\uff09\u67b6\u6784\u7684\u6838\u5fc3\u3002\u8fd9\u4e9b\u6838\u5fc3\u4e13\u6ce8\u4e8e\u6267\u884c\u5d4c\u5165\u5f0f\u63a7\u5236\u4efb\u52a1\uff0c\u901a\u5e38\u6027\u80fd\u8f83\u4f4e\u3002 MPU\uff1aMPU \u4f7f\u7528\u66f4\u5f3a\u5927\u7684\u901a\u7528\u5904\u7406\u5668\u6838\u5fc3\uff0c\u5177\u6709\u66f4\u9ad8\u7684\u6027\u80fd\u548c\u66f4\u590d\u6742\u7684\u6307\u4ee4\u96c6\uff0c\u9002\u7528\u4e8e\u901a\u7528\u8ba1\u7b97\u4efb\u52a1\u3002 3 \u5185\u5b58\u548c\u5b58\u50a8 MCU\uff1aMCU \u901a\u5e38\u5177\u6709\u8f83\u5c0f\u7684\u5185\u5b58\u548c\u5b58\u50a8\u5bb9\u91cf\uff0c\u8db3\u4ee5\u652f\u6301\u5d4c\u5165\u5f0f\u63a7\u5236\u4efb\u52a1\uff0c\u4f46\u4e0d\u9002\u7528\u4e8e\u8fd0\u884c\u5927\u578b\u5e94\u7528\u7a0b\u5e8f\u6216\u64cd\u4f5c\u7cfb\u7edf\u3002 MPU\uff1aMPU \u901a\u5e38\u5177\u6709\u66f4\u5927\u7684\u5185\u5b58\u548c\u5b58\u50a8\u5bb9\u91cf\uff0c\u4ee5\u652f\u6301\u8fd0\u884c\u590d\u6742\u7684\u5e94\u7528\u7a0b\u5e8f\u548c\u64cd\u4f5c\u7cfb\u7edf\u3002 4 \u5916\u8bbe\u548c\u63a5\u53e3 MCU\uff1aMCU \u901a\u5e38\u96c6\u6210\u4e86\u7279\u5b9a\u4e8e\u5d4c\u5165\u5f0f\u63a7\u5236\u4efb\u52a1\u7684\u5916\u8bbe\u548c\u63a5\u53e3\uff0c\u5982\u6a21\u62df/\u6570\u5b57\u8f6c\u6362\u5668\uff08ADC\uff09\u3001\u4e32\u53e3\u901a\u4fe1\uff08UART\uff09\u3001\u5b9a\u65f6\u5668\u7b49\u3002 MPU\uff1aMPU \u5177\u6709\u66f4\u4e30\u5bcc\u7684\u5916\u8bbe\u548c\u63a5\u53e3\u9009\u9879\uff0c\u5305\u62ec USB\u3001\u4ee5\u592a\u7f51\u3001\u9ad8\u7ea7\u56fe\u5f62\u63a5\u53e3\u7b49\uff0c\u4ee5\u652f\u6301\u591a\u79cd\u5916\u90e8\u8bbe\u5907\u548c\u8fde\u63a5\u3002 5 \u529f\u8017 MCU\uff1aMCU \u901a\u5e38\u5177\u6709\u8f83\u4f4e\u7684\u529f\u8017\uff0c\u56e0\u4e3a\u5b83\u4eec\u7ecf\u5e38\u7528\u4e8e\u7535\u6c60\u4f9b\u7535\u7684\u8bbe\u5907\u548c\u9700\u8981\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u5d4c\u5165\u5f0f\u7cfb\u7edf\u3002 MPU\uff1aMPU \u901a\u5e38\u5177\u6709\u8f83\u9ad8\u7684\u529f\u8017\uff0c\u56e0\u4e3a\u5b83\u4eec\u8bbe\u8ba1\u7528\u4e8e\u9ad8\u6027\u80fd\u8ba1\u7b97\u548c\u591a\u4efb\u52a1\u5904\u7406\u3002 6 \u6210\u672c MCU\uff1aMCU \u901a\u5e38\u4ef7\u683c\u8f83\u4f4e\uff0c\u9002\u7528\u4e8e\u5927\u89c4\u6a21\u751f\u4ea7\u548c\u6210\u672c\u654f\u611f\u7684\u5e94\u7528\u3002 MPU\uff1aMPU \u4ef7\u683c\u901a\u5e38\u8f83\u9ad8\uff0c\u9002\u7528\u4e8e\u66f4\u590d\u6742\u548c\u9ad8\u6027\u80fd\u7684\u5e94\u7528\u3002 \u9009\u62e9 MCU \u6216 MPU \u53d6\u51b3\u4e8e\u60a8\u7684\u9879\u76ee\u9700\u6c42 \uff0c\u5305\u62ec\u6027\u80fd\u3001\u529f\u8017\u3001\u6210\u672c\u548c\u529f\u80fd\u7b49\u56e0\u7d20\u3002\u5982\u679c\u60a8\u9700\u8981\u6267\u884c\u5d4c\u5165\u5f0f\u63a7\u5236\u4efb\u52a1\uff0cMCU \u53ef\u80fd\u662f\u66f4\u5408\u9002\u7684\u9009\u62e9\u3002\u5982\u679c\u60a8\u9700\u8981\u8fd0\u884c\u590d\u6742\u7684\u5e94\u7528\u7a0b\u5e8f\u548c\u64cd\u4f5c\u7cfb\u7edf\uff0cMPU \u53ef\u80fd\u66f4\u9002\u5408\u60a8\u7684\u9700\u6c42\u3002","title":"10.2 \u533a\u522b"},{"location":"chapter_14/2_qianrushidev/#_3","text":"","title":"\u4e8c \u5f85\u89e3\u51b3\u7684\u95ee\u9898"},{"location":"chapter_14/2_qianrushidev/#_4","text":"","title":"\u4e09 \u5d4c\u5165\u5f0f\u5b66\u4e60\u8def\u7ebf"},{"location":"chapter_14/2_qianrushidev/#_5","text":"","title":"\u5176\u4e00"},{"location":"chapter_14/2_qianrushidev/#_6","text":"","title":"\u4e00\u3001\u57fa\u7840"},{"location":"chapter_14/2_qianrushidev/#1-linux","text":"\u9700\u8981\u638c\u63e1\u7684\u77e5\u8bc6\u5982\u4e0b\uff1a 1 \u73af\u5883\u7684\u642d\u5efa\uff1aubuntu\u3001vmware \u5b89\u88c5 2 Linux \u76ee\u5f55\u7ed3\u6784\uff1b 3 \u6587\u4ef6\u7c7b\u578b\uff1b 4 \u57fa\u672c\u76ee\u5f55\u64cd\u4f5c\uff0c\u6587\u4ef6\u64cd\u4f5c\uff0cvim\uff0cifconfig\uff0cping\uff0ccd\uff0ccp\uff0cmv\uff0cmkdir \u7b49\uff0c\u6700\u5173\u952e\u662f gcc \u547d\u4ee4\u8981\u4f1a\u7528\uff1b 5 \u4e00\u4e9b\u7b80\u5355\u7684 shell \u811a\u672c\uff1b 6 Makefile \u7684\u7f16\u5199\u3002 \u4e2a\u4eba\u5efa\u8bae\u53ea\u8981\u4f1a\u4e00\u4e9b\u57fa\u672c\u7684\u64cd\u4f5c\u5c31\u884c\u4e86\uff0c\u4e0d\u9700\u8981\u592a\u6df1\u5165\u7684\u5b66\u4e60\u6bcf\u4e00\u4e2a\u547d\u4ee4\uff0c\u7528\u5230\u7684\u65f6\u5019\u4f1a\u53bb\u641c\u7d22\u5c31\u884c\u4e86\u3002 \u53c2\u8003\u6587\u7ae0\u5982\u4e0b\uff1a \u300aLinux \u5165\u95e8\u7684\u57fa\u7840\u77e5\u8bc6\u70b9\u6c47\u603b\uff0c\u6709\u8fd9\u7bc7\u5c31\u591f\u4e86\u300b \u300alinux \u9a71\u52a8\u3001ARM \u5b66\u4e60\u73af\u5883\u642d\u5efa\u300b \u300aLinux \u5165\u95e8-shell \u7f16\u7a0b-\u9002\u5408\u5c0f\u767d\u300b \u300a\u4e00\u952e\u83b7\u53d6 linux \u5185\u5b58\u3001cpu\u3001\u78c1\u76d8 IO \u7b49\u4fe1\u606f\u811a\u672c\u7f16\u5199\uff0c\u53ca\u5176\u539f\u7406\u8be6\u89e3\u300b","title":"1. linux \u57fa\u672c\u64cd\u4f5c\uff1a"},{"location":"chapter_14/2_qianrushidev/#2-c","text":"\u6240\u8c13\u7f16\u7a0b\u4e0d\u5b66 C \u8bed\u8a00\uff0c\u4fbf\u79f0\u7801\u519c\u4e5f\u6789\u7136\u3002 \u5b66 Linux\uff0c\u4e0d\u5b66\u7f16\u7a0b\uff0c\u5efa\u8bae\u5c31\u4e0d\u8981\u5b66\u4e86\uff0c\u5426\u5219\u804c\u4e1a\u540e\u671f\u5168\u662f\u74f6\u9888\u3002 \u90a3\u4e9b\u548c\u4f60\u8bf4\u5b66 Linux \u4e0d\u9700\u8981\u61c2\u7f16\u7a0b\u7684\u90fd\u662f\u518d\u800d LM\u3002 \u5b66\u4e60 C \u8bed\u8a00\u4e00\u5b9a\u8981\u5b66\u4e60 Linux \u4e0b C \u7f16\u7a0b\uff0cC \u8bed\u8a00\u7f51\u4e0a\u89c6\u9891\u4e5f\u5f88\u591a\uff0c\u77e5\u8bc6\u70b9\u4e0d\u4e00\u4e00\u4ecb\u7ecd\u4e86\u3002 \u4f46\u662f\u6709\u4e00\u70b9\uff0c\u5c31\u662f\u4e00\u5b9a\u8981\u8bb0\u4f4f\uff0c\u4e00\u822c\u7684\u7a0b\u5e8f\u5458\u4ece\u5165\u95e8\u5230\u7edd\u5bf9\u7684\u7cbe\u901a\u5927\u6982\u9700\u8981 2 \u5e74\u65f6\u95f4\uff0c\u8981\u60f3\u968f\u5fc3\u6240\u6b32\u5199\u51fa\u8d85\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801\uff0c\u65f6\u95f4\u56e0\u4eba\u800c\u5f02\uff0c\u8fd8\u8981\u770b\u4e2a\u4eba\u9020\u5316\u3002 \u5b9e\u9645\u4e0a\u5e76\u4e0d\u9700\u8981\u6bcf\u4e2a\u4eba\u90fd\u6210\u4e3a\u5927\u5e08\uff0c\u80fd\u6210\u4e3a\u4e00\u4e2a\u5feb\u5feb\u4e50\u4e50\u7684\u5c0f\u7801\u519c\uff0c\u4e0d\u4e5f\u662f\u89c1\u5f00\u5fc3\u7684\u4e8b\u5417\uff1f","title":"2. c \u8bed\u8a00\uff1a"},{"location":"chapter_14/2_qianrushidev/#3","text":"\u6570\u636e\u7ed3\u6784\u5f88\u91cd\u8981\uff0c\u4f46\u662f\u5728\u8fd9\u4e2a\u4e0a\u9762\u82b1\u592a\u591a\u65f6\u95f4\uff0c\u4e5f\u662f\u6ca1\u5fc5\u8981\u7684\u3002\u60f3\u8fdb\u5927\u5382\u7684\u9664\u5916\uff0c\u81ea\u5df1\u62fc\u547d\u53bb\u5237\u9898\u5427\u3002\u5bf9\u4e8e\u5d4c\u5165\u5f0f\u65b9\u5411\u6765\u8bf4\uff0c\u4e2a\u4eba\u5efa\u8bae\u53ea\u8981\u638c\u63e1\u51e0\u4e2a\u57fa\u672c\u7684\u6392\u5e8f\u548c\u67e5\u627e\u7b97\u6cd5\u5373\u53ef\uff0c\u6ca1\u5fc5\u8981\u628a\u6240\u6709\u7b97\u6cd5\u90fd\u7814\u7a76\u4e00\u904d\u3002 \u300a\u73a9\u8f6c\u5185\u6838\u94fe\u8868 list_head\uff0c\u5982\u4f55\u7ba1\u7406\u4e0d\u540c\u7c7b\u578b\u8282\u70b9\u7684\u5b9e\u73b0\uff08\u4e07\u5b57\u6587\uff09\u53ef\u4ee5\u6536\u85cf\u300b \u300a\u5341\u5927\u7ecf\u5178\u6392\u5e8f\u7b97\u6cd5(\u4ee3\u7801\u5b9e\u73b0)\uff0c\u5efa\u8bae\u6536\u85cf\u300b \u300a20 \u5f20\u56fe\u63ed\u5f00\u300c\u961f\u5217\u300d\u7684\u8ff7\u96fe\u300b \u300a\u4e8c\u53c9\u6811\u8be6\u89e3\uff0c\u975e\u5e38\u5168\uff0c\u8fd8\u5305\u542b C \u4ee3\u7801\u300b \u80fd\u638c\u63e1\u5e38\u89c1\u7684\u7b97\u6cd5\u6bd4\u5982\uff1a\u5192\u6ce1\u6392\u5e8f\u3001\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u3001\u5feb\u901f\u6392\u5e8f\u3001\u4e8c\u53c9\u6811\u7b49\u3002 \u94fe\u8868\uff1a\u53cc\u5411\u94fe\u8868\uff0c\u589e\u5220\u6539\u67e5\u3002","title":"3. \u6570\u636e\u7ed3\u6784\uff1a"},{"location":"chapter_14/2_qianrushidev/#4","text":"\u57fa\u7840\u9636\u6bb5\uff0c\u4e2a\u4eba\u5f3a\u70c8\u5efa\u8bae\u4e00\u5b9a\u8981\u505a\u4e00\u4e2a\u7efc\u5408\u6027\u9879\u76ee\uff0c\u4e00\u5b9a\u8981\u4ece 0 \u5f00\u59cb\u5199\u3002 \u5efa\u8bae\u9879\u76ee \u300a\u7535\u8bdd\u672c\u7ba1\u7406\u8f6f\u4ef6\u300b \u8be5\u9879\u76ee\u5305\u542b\u7684\u77e5\u8bc6\u70b9\u3001\u529f\u80fd\u70b9\uff1a \u5305\u542b\u7b80\u5355\u7684\u83dc\u5355\u529f\u80fd \u94fe\u8868\uff1a\u5305\u62ec\u589e\u3001\u5220\u3001\u6539\u3001\u67e5\u3001\u6392\u5e8f\u7b49\u64cd\u4f5c\u7684\u53cc\u5411\u94fe\u8868\u3002 \u7ed3\u6784\u4f53\u3001\u6570\u7ec4\u3001\u6307\u9488\u3001\u4e8c\u7ea7\u6307\u9488\uff0c\u5b57\u7b26\u4e32\u64cd\u4f5c \u6392\u5e8f \u7528\u6237\u767b\u5f55 \u7528\u6237\u7535\u8bdd\u53f7\u7801\u4fe1\u606f\u7684\u6dfb\u52a0\u3001\u5220\u9664\u3001\u4fee\u6539","title":"4. \u57fa\u7840\u9636\u6bb5\u9879\u76ee"},{"location":"chapter_14/2_qianrushidev/#_7","text":"\u8fdb\u9636\u9636\u6bb5\u77e5\u8bc6\u70b9\u5f88\u91cd\u8981\uff0c\u5b66\u5b8c\u8fd9\u4e2a\u9636\u6bb5\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u5404\u79cd\u5e93\u51fd\u6570+\u7cfb\u7edf\u8c03\u7528\u6765\u81ea\u5df1\u5b9e\u73b0 Linux \u547d\u4ee4\uff1als\u3001cd\u3001stat\u3001pwd\u3001ifconfig\uff0c\u751a\u81f3\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e9b\u7f51\u7edc\u534f\u8bae\uff1atftp\u3001ftp\u3001http\u3002 \u5373\u4f7f\u4ee5\u540e\u4e0d\u505a linux c \u5f00\u53d1\uff0c\u6709\u4e86\u8fd9\u4e9b\u57fa\u7840\uff0c\u4f60\u518d\u53bb\u5b66 java\u3001c++\u4f60\u7684\u89c6\u91ce\u4e00\u5b9a\u4f1a\u4e0d\u4e00\u6837\uff0cLinux \u4e0b\u7cfb\u7edf\u7f16\u7a0b\u662f\u771f\u6b63\u57fa\u4e8e\u4e00\u4e2a\u80f8\u75db\u6765\u7f16\u7a0b\u7684\u3002 \u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u5b66 Linux\uff0c\u5c31\u662f\u56e0\u4e3a\u4ed6\u7684\u5f00\u653e\u6027\uff0c\u6709\u65e0\u6570\u7684\u5927\u725b\u5728\u7ed9 Linux \u6dfb\u7816\u52a0\u74e6\uff0c\u6240\u6709\u4ee3\u7801\u90fd\u53ef\u4ee5\u770b\u5230\uff0c\u800c\u6211\u4eec\u6839\u672c\u4e0d\u7528\u62c5\u5fc3\u7248\u6743\u95ee\u9898\uff01","title":"\u4e8c\u3001\u8fdb\u9636"},{"location":"chapter_14/2_qianrushidev/#1-io","text":"\u638c\u63e1 Linux \u6587\u4ef6 IO \u7684\u4e00\u5957\u7cfb\u7edf\u8c03\u7528 API\uff1aopen\u3001read\u3001write\u3001lseek\uff0cclose \u7b49\u3002 \u719f\u7ec3\u5199\u51fa\u6587\u4ef6\u62f7\u8d1d\u7b49\u529f\u80fd\u6a21\u5757\u3002 \u7406\u89e3 I/O\u3001\u7f13\u51b2\u7684\u6982\u5ff5\u3002 \u5728 Linux \u4e0b\uff0c\u4e00\u5207\u7686\u6587\u4ef6\uff0c\u6211\u4eec\u64cd\u4f5c\u64cd\u4f5c\u8bb8\u8bb8\u591a\u591a\u7684\u5916\u8bbe\uff08\u5b57\u7b26\u8bbe\u5907\u3001\u5957\u63a5\u5b57\u3001\u6587\u4ef6\u7b49\u7b49\uff09\u5c31\u50cf\u64cd\u4f5c\u6587\u4ef6\u4e00\u6837\u3002\u8981\u60f3\u77e5\u9053\u5982\u4f55\u64cd\u4f5c\u6587\u4ef6\u548c\u5916\u8bbe\uff0c\u6211\u4eec\u5c31\u5fc5\u987b\u719f\u7ec3\u638c\u63e1\u6587\u4ef6 IO\uff0c\u8fd9\u662f\u6211\u4eec\u5b66\u4e60 Linux \u4e0b\u9762\u7f16\u7a0b\u6700\u57fa\u672c\u7684\u77e5\u8bc6\u70b9\u3002","title":"1. \u6587\u4ef6 IO"},{"location":"chapter_14/2_qianrushidev/#2_1","text":"\u8fdb\u7a0b\u4e0e\u7ebf\u7a0b\u7684\u6982\u5ff5 \u638c\u63e1\u5e38\u7528\u7684\u51fd\u6570 fork\u3001exec \u65cf\u51fd\u6570\u7b49 api\uff1b \u8fdb\u7a0b\u521b\u5efa\u3001\u56de\u6536\uff0c\u4e00\u4e2a.c \u6e90\u6587\u4ef6\u53d8\u6210\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u8fc7\u7a0b\uff1b \u5e38\u7528\u7684\u8fdb\u7a0b\u76f8\u5173\u547d\u4ee4\uff1aps\u3001top\u3001crontab\u3001at\uff1b \u8fdb\u7a0b\u95f4\u901a\u4fe1\uff1a\u4fe1\u53f7\u91cf\u3001\u6d88\u606f\u961f\u5217\u3001\u5171\u4eab\u5185\u5b58\u3001\u7ba1\u9053\u3001\u4fe1\u53f7\uff1b \u5b88\u62a4\u8fdb\u7a0b\uff1b \u7ebf\u7a0b\u521b\u5efa\u3001\u540c\u6b65\u4e92\u65a5\uff0c\u4e92\u65a5\u9501\uff1b \u5e93\u7684\u6982\u5ff5\uff0c\u4ec0\u4e48\u662f\u52a8\u6001\u5e93\u548c\u9759\u6001\u5e93\uff0c\u5982\u4f55\u81ea\u5df1\u5236\u4f5c\u52a8\u6001\u5e93\u548c\u9759\u6001\u5e93\u3002 \u8fdb\u7a0b\u3001\u7ebf\u7a0b\u662f\u6211\u4eec\u5b66\u4e60 Linux \u4e0b\u7cfb\u7edf\u7f16\u7a0b\u975e\u5e38\u91cd\u8981\u7684\u4e00\u4e2a\u77e5\u8bc6\u70b9\uff0c\u5fc5\u987b\u638c\u63e1\u3002 \u53c2\u8003\u6587\u7ae0\u5982\u4e0b\uff1a \u300a\u591a\u7ebf\u7a0b\u8be6\u89e3\uff0c\u4e00\u7bc7\u6587\u7ae0\u5f7b\u5e95\u641e\u61c2\u591a\u7ebf\u7a0b\u4e2d\u5404\u4e2a\u96be\u70b9\u300b \u300aLinux \u4e2d\u5e38\u89c1\u540c\u6b65\u548c\u4e92\u65a5\u673a\u5236\u8bbe\u8ba1\u539f\u7406 \u300b \u300aLinux \u4fe1\u53f7\u91cf\uff081\uff09-SYSTEM V\u300b \u300aLinux \u4fe1\u53f7\u91cf\uff082\uff09-POSIX \u4fe1\u53f7\u91cf\u300b \u300aLinux \u4e92\u65a5\u9501\uff081\uff09-\u7ebf\u7a0b\u4e92\u65a5\u9501\u300b \u300a\u8fdb\u7a0b\u7ec4\u3001\u4f1a\u8bdd\u3001\u63a7\u5236\u7ec8\u7aef\u5173\u7cfb\uff0c\u5b88\u62a4\u8fdb\u7a0b\u8be6\u89e3\u300b \u300a \u4e00\u4e2a\u591a\u7ebf\u7a0b\u7684\u7b80\u5355\u4f8b\u5b50\u8ba9\u4f60\u770b\u6e05\u7ebf\u7a0b\u8c03\u5ea6\u7684\u968f\u673a\u6027\u7c89\u4e1d\u63d0\u95ee\u300b \u300aLinux \u5e93\u6982\u5ff5\uff0c\u52a8\u6001\u5e93\u548c\u9759\u6001\u5e93\u7684\u5236\u4f5c\uff0c\u5982\u4f55\u79fb\u690d\u7b2c\u4e09\u65b9\u5e93\u300b \u300a \u4e24\u4e2a\u7ebf\u7a0b\uff0c\u4e24\u4e2a\u4e92\u65a5\u9501\uff0c\u600e\u4e48\u5f62\u6210\u4e00\u4e2a\u6b7b\u5faa\u73af\uff1f \u7c89\u4e1d\u63d0\u95ee\u300b \u300a\u7528\u4e86\u8fd9\u4e48\u591a\u5e74 Linux\uff0c\u4f60\u6e05\u695a\u63a7\u5236\u53f0\u3001\u7ec8\u7aef\u4e0e shell \u53ca\u5b83\u4eec\u7684\u5173\u7cfb\u5417\uff1f\u300b \u300a\u591a\u7ebf\u7a0b\u8be6\u89e3\uff0c\u4e00\u7bc7\u6587\u7ae0\u5f7b\u5e95\u641e\u61c2\u591a\u7ebf\u7a0b\u4e2d\u5404\u4e2a\u96be\u70b9\u300b \u300a\u5b50\u8fdb\u7a0b\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u5173\u7cfb\u300b","title":"2. \u8fdb\u7a0b\u7ebf\u7a0b"},{"location":"chapter_14/2_qianrushidev/#3_1","text":"TCP/IP \u534f\u8bae\u5206\u5c42\u4ee5\u53ca\u6bcf\u4e00\u5c42\u7684\u529f\u80fd\uff1b\u4e0d\u8981\u770b OSI\uff0c\u53ea\u8981\u77e5\u9053\u5373\u53ef\uff1b socket api \u7684\u4f7f\u7528\uff0c tcp\u3001udp\uff1bC/S \u67b6\u6784\u5982\u4f55\u521b\u5efa\uff1b \u5957\u63a5\u5b57\u5c5e\u6027\u7684\u8bbe\u7f6e\uff1b C/S \u67b6\u6784\uff1b \u591a\u8fdb\u7a0b\u3001\u591a\u7ebf\u7a0b\u7f51\u7edc\u670d\u52a1\u5668\u6a21\u578b\uff1b \u4efb\u610f\u4e00\u6b3e\u6293\u5305\u5de5\u5177\u4f7f\u7528\uff1b \u5e38\u89c1\u7684\u7f51\u7edc\u534f\u8bae\u5206\u6790\uff1aping\u3001 tftp\u3001 ftp\u3001http\u3001telnet \u7b49\u3002 \u7f51\u7edc\u7684\u91cd\u8981\u6027\u4e0d\u8a00\u800c\u55bb\uff0c\u5e94\u7528\u5b9e\u5728\u592a\u5e7f\u4e86\uff0c\u7f51\u7edc\u7684\u77e5\u8bc6\u4e5f\u975e\u5e38\u7684\u590d\u6742\uff1a\u7f51\u7edc\u7f16\u7a0b\u3001TCP/IP \u534f\u8bae\u6808\u3001\u7f51\u7edc\u62d3\u6251\u3001\u7f51\u5361\u9a71\u52a8\u3001\u5404\u79cd\u65e0\u7ebf\u901a\u4fe1\u534f\u8bae\u3002 \u53ef\u4ee5\u6536\u6bcf\u4e00\u5927\u5757\u77e5\u8bc6\u7684\u5b66\u4e60\uff0c\u90fd\u9700\u8981\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u6765\u5165\u95e8\uff0c\u5e76\u9700\u8981\u4e00\u5b9a\u96be\u5ea6\u7684\u9879\u76ee\u505a\u652f\u6491\uff0c\u624d\u80fd\u771f\u6b63\u4e86\u89e3\u548c\u638c\u63e1\u7f51\u7edc\u3002\u5bf9\u4e8e\u5d4c\u5165\u5f0f\u65b9\u5411\u521d\u5b66\u8005\uff0c\u6211\u4eec\u6700\u597d\u5148\u4e86\u89e3\u4e00\u4e9b\u57fa\u7840\u7684\u7f51\u7edc\u534f\u8bae\u77e5\u8bc6\uff0c\u7136\u540e\u5b66\u4e60\u5957\u63a5\u5b57\u7684\u4f7f\u7528\u3002 \u53c2\u8003\u6587\u7ae0\u5982\u4e0b\uff1a \u300a22 \u5f20\u56fe\u8be6\u89e3\u6d4f\u89c8\u5668\u8bf7\u6c42\u6570\u636e\u5305\u5982\u4f55\u5230\u8fbe web \u670d\u52a1\u5668\uff08\u641e\u61c2\u7f51\u7edc\u53ef\u4ee5\u6bd5\u4e1a\u4e86\uff09\u300b \u300a\u4e00\u4e2a\u7aef\u53e3\u53f7\u53ef\u4ee5\u540c\u65f6\u88ab\u4e24\u4e2a\u8fdb\u7a0b\u7ed1\u5b9a\u5417\uff1f \u300b \u300a\u3010\u7c89\u4e1d\u95ee\u7b54 7\u3011\u5c40\u57df\u7f51\u5185\u7ec8\u7aef\u662f\u5982\u4f55\u8bbf\u95ee\u5916\u7f51\uff1f\u7b54\u6848\u5728\u6700\u540e \u300b \u300a\u4e00\u6587\u5305\u4f60\u5b66\u4f1a\u7f51\u7edc\u6570\u636e\u6293\u5305 \u300b \u300a\u3010\u89c6\u9891\u3011\u6559\u4f60\u5982\u4f55\u6293\u53d6\u7f51\u7edc\u4e2d\u7684\u6570\u636e\u5305\uff01\u9ed1\u5ba2\u5fc5\u5907\u6280\u80fd\u300b \u300a\u7f51\u7edc/\u547d\u4ee4\u884c\u6293\u5305\u5de5\u5177 tcpdump \u8be6\u89e3 \u300b \u300a\u3010\u7c89\u4e1d\u95ee\u7b54 11\u3011\u5982\u4f55\u5728\u5185\u7f51\u642d\u5efa TCP \u670d\u52a1\u5668\u5e76\u80fd\u88ab\u5916\u7f51\u76f4\u63a5\u8bbf\u95ee\u300b","title":"3. \u7f51\u7edc\u7f16\u7a0b"},{"location":"chapter_14/2_qianrushidev/#4_1","text":"\u8be5\u9636\u6bb5\u53ef\u4ee5\u9009\u62e9\u7efc\u5408\u9879\u76ee\u300a\u591a\u7ebf\u7a0b\u804a\u5929\u5ba4\u300b\uff0c\u5b9e\u73b0\u516c\u804a\u3001\u79c1\u804a\u3001\u6ce8\u518c\u767b\u5f55\uff0c\u4e92\u76f8\u53d1\u9001\u6587\u4ef6\u7b49\u529f\u80fd\u3002 \u4e00\u53e3\u541b\u5df2\u7ecf\u628a\u8fd9\u4e2a\u9879\u76ee\u62c6\u89e3\u6210 4 \u7bc7\u6587\u7ae0\uff0c\u5e76\u63d0\u4f9b\u6e90\u7801\uff0c\u65b9\u4fbf\u5927\u5bb6\u5165\u95e8\u3002 \u300a\u4ece 0 \u5b9e\u73b0\u57fa\u4e8e Linux socket \u804a\u5929\u5ba4\u300b","title":"4. \u8fdb\u9636\u9879\u76ee"},{"location":"chapter_14/2_qianrushidev/#_8","text":"\u8be5\u9636\u6bb5\u5b66\u4e60\u9700\u8981\u5f00\u53d1\u677f\u914d\u5408\uff0c\u5efa\u8bae\u65b0\u624b\u5148\u628a\u4e4b\u524d\u5185\u5bb9\u6253\u624e\u5b9e\uff0c\u518d\u8fdb\u5165\u8fd9\u4e2a\u9636\u6bb5\u5b66\u4e60\u3002 \u5f00\u53d1\u677f\u7684\u9009\u62e9\uff0c\u6700\u91cd\u8981\u7684\u662f\u8d44\u6599\uff01\u8d44\u6599\uff01\u8d44\u6599\uff01\u8d44\u6599\uff01\u8d44\u6599\uff01\u8d44\u6599\uff01\u8d44\u6599\uff01\u8d44\u6599\uff01 \u8d44\u6599\u4e0d\u5168\u7684\u677f\u5b50\u4e0d\u8981\u4e70\uff01","title":"\u4e09\u3001\u9ad8\u9636"},{"location":"chapter_14/2_qianrushidev/#1-arm","text":"arm \u67b6\u6784\u3001arm \u7684\u6a21\u5f0f\u3001arm \u6307\u4ee4\uff0c\u5bfb\u5740\uff0c\u5f02\u5e38\uff0c\u4e2d\u65ad\uff0c\u5f02\u5e38\u5411\u91cf\u8868\uff0c \u4f2a\u6307\u4ee4\u3001C \u8bed\u8a00\u548c\u6c47\u7f16\u4ee3\u7801\u7684\u4e92\u76f8\u8c03\u7528\u3001\u5185\u8054\u6c47\u7f16\uff1b \u5b66\u4f1a\u67e5\u770b\u5e38\u89c1\u7535\u8def\u56fe\uff0c\u4e86\u89e3\u6570\u636e\u7ebf\u3001\u4fe1\u53f7\u7ebf\u3001\u5730\u5740\u7ebf\u3001\u4e2d\u65ad\u7ebf\uff0c\u5e38\u89c1\u5916\u8bbe\u7535\u8def\u56fe \u5b66\u4f1a\u67e5\u770b\u5404\u79cd\u82af\u7247\u7684\u7528\u6237\u624b\u518c \u5e38\u89c1\u7684\u5916\u8bbe\u7684\u88f8\u673a\u9a71\u52a8\u5f00\u53d1\uff0cled\u3001key\u3001adc\u3001pwm\u3001rtc\u3001\u770b\u95e8\u72d7\u3001i2c\u3001spi\u3001\u7f51\u5361\u3001flash\u3001USB \u7b49 \u8fd9\u4e2a\u9636\u6bb5\u7684\u5185\u5bb9\uff0c\u5bf9\u4e8e\u4e86\u89e3\u6574\u4e2a\u8ba1\u7b97\u673a\u8f6f\u4ef6\u7684\u5de5\u4f5c\u539f\u7406\u975e\u5e38\u91cd\u8981\uff0cLinux \u5185\u6838\u7684\u5f88\u591a\u673a\u5236\u90fd\u8981\u4f9d\u8d56\u6c47\u7f16\u6307\u4ee4\uff0c\u5c24\u5176 ARM \u5de5\u4f5c\u6a21\u5f0f\u3001\u5bfb\u5740\u3001\u5f02\u5e38\uff0c\u4e2d\u65ad\uff0c\u5f02\u5e38\u5411\u91cf\u8868\u8fd9\u4e9b\u6982\u5ff5\u3002\u53ef\u4ee5\u8bf4\uff0c\u638c\u63e1\u4e86\u8fd9\u4e2a\u9636\u6bb5\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u5355\u7247\u673a\u3001STM32 \u771f\u7684\u5c31\u662f\u624b\u5230\u64d2\u6765\u4e86\uff01 \u5927\u5bb6\u4e5f\u53ef\u4ee5\u53c2\u8003\u6211\u5199\u7684\u300aARM \u7cfb\u5217\u6587\u7ae0\u300b B \u7ad9\u6b63\u5728\u66f4\u65b0\u8fd9\u4e2a\u7cfb\u5217\u7684\u89c6\u9891\u6559\u7a0b\uff0c \u7eaf\u5976\u5988\u5f0f\u6559\u5b66\uff0c\u53ea\u8981\u6709 C \u57fa\u7840\uff0c\u7edd\u5bf9\u5b66\u5f97\u4f1a\uff01 https://space.bilibili.com/661326452","title":"1. ARM"},{"location":"chapter_14/2_qianrushidev/#2_2","text":"uboot \u79fb\u690d\u3001uboot \u53c2\u6570\u8bbe\u7f6e rootfs \u5236\u4f5c\u3001\u5185\u6838\u526a\u88c1\u79fb\u690d\uff0c usb\u3001\u7f51\u5361\u9a71\u52a8\u79fb\u690d\uff0c uboot\u3001linux \u542f\u52a8\u6d41\u7a0b\uff0c \u81ea\u5df1\u6dfb\u52a0 uboot \u547d\u4ee4 \u8fd9\u4e00\u9636\u6bb5\u7684\u5185\u5bb9\u5bf9\u4e8e\u5d4c\u5165\u5f0f\u5de5\u7a0b\u5e08\u6765\u8bf4\uff0c\u5728\u505a\u5b9e\u9645\u9879\u76ee\u7684\u65f6\u5019\uff0c\u4f1a\u7ecf\u5e38\u7528\u5230\uff0c\u5404\u4e2a\u5382\u5bb6\u7684\u79fb\u690d\u6b65\u9aa4\u4f1a\u6709\u6240\u5dee\u5f02\uff0c\u4f46\u539f\u7406\u57fa\u672c\u76f8\u540c\uff0c\u719f\u7ec3\u638c\u63e1\u8fd9\u4e9b\u64cd\u4f5c\uff0c\u975e\u5e38\u5fc5\u8981\u3002 \u8fd9\u90e8\u5206\u5185\u5bb9\u5176\u5b9e\u5f88\u590d\u6742\uff0c\u5bf9\u4e8e\u65b0\u624b\u6765\u8bf4\uff0c\u5efa\u8bae\u4f1a\u64cd\u4f5c\u5373\u53ef\uff0c\u5de5\u4f5c\u540e\u5982\u679c\u5728\u6df1\u5165\u7814\u7a76\uff0c\u518d\u56de\u5934\u7814\u7a76\u8fd9\u4e9b\u7ec6\u8282\u3002 \u53c2\u8003\u6587\u7ae0 \u300a\u3010\u95ee\u7b54 23\u3011\u79fb\u690d Linux\uff1a\u5982\u4f55\u5236\u4f5c rootfs\uff1f\u8be6\u7ec6\u6559\u7a0b\u300b \u300a19. Cortex-A9 uboot \u542f\u52a8\u4ee3\u7801\u8be6\u89e3\u5fc5\u770b\u300b \u300a20.\u4ece 0 \u5b66 ARM-\u4ece 0 \u79fb\u690d uboot \u652f\u6301 exynos4412-\u4eb2\u6d4b\u300b \u300aLinux \u6a21\u5757\u6587\u4ef6\u5982\u4f55\u7f16\u8bd1\u5230\u5185\u6838\u548c\u72ec\u7acb\u7f16\u8bd1\u6210\u6a21\u5757\uff1f\u300b","title":"2. \u7cfb\u7edf\u79fb\u690d"},{"location":"chapter_14/2_qianrushidev/#3-linux","text":"\u5b57\u7b26\u8bbe\u5907\u67b6\u6784\u3001inode\u3001cdev\u3001file_operations\u3001file \u4e4b\u95f4\u5173\u7cfb\uff1b platform \u603b\u7ebf\u3001\u8bbe\u5907\u6811\uff1b \u5185\u5b58\u7ba1\u7406\uff1b \u540c\u6b65\u4e92\u65a5\u673a\u5236\uff0c\u81ea\u65cb\u9501\u3001\u4fe1\u53f7\u91cf\u3001\u4e92\u65a5\u4f53\uff0c\u539f\u5b50\u64cd\u4f5c\uff1b Linux \u8fdb\u7a0b\u7ba1\u7406 \u5757\u8bbe\u5907 \u4e2d\u65ad\u3001\u4e2d\u65ad\u5e95\u534a\u90e8\uff1b \u7b49\u5f85\u961f\u5217\uff0cpoll \u7684\u5b9e\u73b0\uff1b \u5e38\u89c1\u8bbe\u5907\u7684\u9a71\u52a8\u7684\u7f16\u5199\u548c\u4ee3\u7801\u5206\u6790\uff1b \u7f51\u7edc\u8bbe\u5907\uff1a\u7f51\u5361\u9a71\u52a8\u5206\u6790\u3001netfilter \u4f7f\u7528\u3001\u7f51\u7edc\u534f\u8bae\u6808\u67b6\u6784\uff1b USB\u3001TTY\u3001SPI\u3001IIC\u3001PCIE \u7b49\u67b6\u6784\u3002 \u80fd\u591f\u5b66\u5230\u8fd9\u4e2a\u9636\u6bb5\uff0c\u90a3\u4e48\u606d\u559c\u4f60\uff0c\u4f60\u53ef\u4ee5\u79f0\u4e3a\u4e00\u540d\u771f\u6b63\u5408\u683c\u7684\u5d4c\u5165\u5f0f\u5de5\u7a0b\u5e08\u4e86\u3002 Linux \u9a71\u52a8\u6211\u4eec\u5b66\u4e60 Linux \u5185\u6838\u6700\u597d\u7684\u4e00\u4e2a\u5165\u53e3\uff0c \u5728\u8fd9\u5e9e\u5927\u3001\u6d69\u701a\u3001\u9519\u7efc\u590d\u6742\u7684\u5185\u6838\u4ee3\u7801\u4e2d\u627e\u5230\u4e00\u4e2a\u7a81\u7834\u53e3\uff0c \u4ece\u800c\u771f\u6b63\u8d70\u5411\u5927\u795e\u4e4b\u8def\uff01 \u9a71\u52a8\u7684\u5b66\u4e60\uff0c\u4e3b\u8981\u5728\u4e8e\u591a\u634b\u67b6\u6784\uff0c\u591a\u9605\u8bfb\u5927\u725b\u7684\u4ee3\u7801\uff01 \u4ee3\u7801\u8bfb\u767e\u904d\uff0c\u5176\u4e49\u81ea\u89c1\uff01 \u4ee3\u7801\u4e2d\u81ea\u7531\u989c\u5982\u7389\uff0c\u4ee3\u7801\u4e2d\u81ea\u7531\u9ec4\u91d1\u5c4b\uff01 \u6bcf\u5929\u62b1\u7740\u5185\u6838\u770b\uff0c\u50cf\u6ce1\u5973\u4eba\u4e00\u6837\u6ce1\u5979\uff0c\u8fdf\u65e9\u4f60\u4f1a\u6210\u4e3a\u5927\u5e08\u3002 \u9a71\u52a8\u6587\u7ae0\u53ef\u4ee5\u53c2\u8003\u6211\u5199\u7684\u300a\u9a71\u52a8\u96c6\u5408\u300b \u4e5f\u53ef\u4ee5\u8fdb\u5165\u6211\u7684 B \u7ad9\uff0c\u4e00\u53e3\u541b\u5df2\u7ecf\u66f4\u65b0\u4e86\u300a\u4ece 0 \u5b66 Linux \u9a71\u52a8\u7b2c\u4e00\u671f\u300b https://space.bilibili.com/661326452","title":"3. Linux \u9a71\u52a8"},{"location":"chapter_14/2_qianrushidev/#_9","text":"\u6211\u60f3\u5982\u679c\u80fd\u5b66\u5230\u8fd9\u4e2a\u4efd\u4e0a\uff0c\u540e\u9762\u5982\u4f55\u53d1\u5c55\uff0c\u5df2\u7ecf\u4e0d\u9700\u8981\u4e00\u53e3\u541b\u518d\u591a\u8d39\u5507\u820c\u4e86\uff0c\u53ef\u4ee5\u7ee7\u7eed\u5b66\u4e60 \u5b89\u5353\u3001QT\uff0c\u4e5f\u53ef\u4ee5\u6df1\u6316\u7269\u8054\u7f51\u3001\u7b97\u6cd5\uff0cAI\u3001VR\u3001\u5927\u6570\u636e\u6216\u8005\u94bb\u7814 Linux \u5185\u6838\u4f18\u5316\u5185\u6838 \u7b49\uff0c\u6bcf\u4e2a\u9886\u57df\u72ec\u5f53\u4e00\u9762\uff0c\u6536\u5165\u90fd\u4e0d\u4f1a\u4f4e\u3002 \u4e5f\u8877\u5fc3\u795d\u613f\u5404\u4f4d\u8fd8\u80fd\u575a\u6301\u5230\u8fd9\u4e2a\u9636\u6bb5\u7684\uff0c\u5934\u53d1\u4f9d\u7136\u4fdd\u6301\u8302\u5bc6\uff01 \u6700\u540e\u7ed9\u5927\u5bb6\u4e00\u4e2a\u5efa\u8bae\uff0c\u5b66\u4e60\u7f16\u7a0b\u6ca1\u6709\u4efb\u4f55\u6377\u5f84\u53ef\u4ee5\u8d70\uff0c\u9700\u8981\u82b1\u8d39\u51e0\u5e74\u7684\u65f6\u95f4\u624d\u80fd\u6709\u6240\u6210\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u63d0\u65e9 \u505a\u597d\u89c4\u5212\uff0c\u627e\u597d\u5927\u65b9\u5411\uff0c\u5236\u5b9a\u597d\u77ed\u671f\u3001\u957f\u671f\u7684\u8ba1\u5212\uff0c\u7136\u540e\u6309\u7167\u8ba1\u5212\uff0c\u4e00\u70b9\u70b9\u7684\u5b9e\u65bd\u3002","title":"\u56db\u3001\u7ec8\u6781"},{"location":"chapter_14/2_qianrushidev/#_10","text":"","title":"\u5176\u4e8c"},{"location":"chapter_14/2_qianrushidev/#_11","text":"\u6700\u8fd1\u770b\u5230 APP \u4e0a\uff0c\u7ed9\u6211\u63a8\u9001\u4e86\u5f88\u591a\u7c7b\u4f3c\u7684\u56de\u7b54\uff0c\u501f\u6b64\u673a\u4f1a\uff0c\u4e5f\u60f3\u7740\u91cd\u65b0\u5ba1\u89c6\u4e00\u4e0b\u81ea\u5df1\u7684\u5b66\u4e60\u5386\u7a0b\uff0c\u4ee5\u53ca\u7ed3\u5408\u81ea\u8eab\u548c\u5927\u725b\uff0c\u5206\u4eab\u4e00\u4e9b\u5b66\u4e60\u7ecf\u9a8c\uff0c\u5e0c\u671b\u5bf9\u5927\u5bb6\u6709\u6240\u542f\u53d1\u548c\u5e2e\u52a9\u3002 \u672c\u6587\u4e3b\u8981\u76ee\u7684\u662f\u4e3a\u4e86\uff1a \u63d0\u4f9b\u4e00\u5f20\u5d4c\u5165\u5f0f\u5b66\u4e60\u8def\u7ebf\u5730\u56fe \u63d0\u4f9b\u4e0d\u540c\u9636\u6bb5\u7684\u5b66\u4e60\u5efa\u8bae \u63a8\u8350\u4e0d\u540c\u9636\u6bb5\u7684\u5b66\u4e60\u8d44\u6599 3000 \u4f59\u5b57\uff0c\u8017\u65f6 1 \u5468\uff0c\u5efa\u8bae\u6536\u85cf\uff1b\u7801\u5b57\u4e0d\u6613\uff0c\u5982\u6709\u5e2e\u52a9\uff0c\u6177\u6168\u4e09\u8fde \u672c\u6587\u5c06\u5d4c\u5165\u5f0f\u5b66\u4e60\u8def\u7ebf\u5206\u4e3a\u51e0\u4e2a\u65b9\u9762\uff1a \u5d4c\u5165\u5f0f\u57fa\u7840\u5fc5\u5907\u77e5\u8bc6 51 \u5355\u7247\u673a STM32 \u5355\u7247\u673a \u5c0f\u800c\u7f8e\u7684 RTOS ARM+LINUX \u5728\u8fd9\u4e2a\u5feb\u8282\u594f\u7684\u65f6\u4ee3\uff0c\u80fd\u9759\u4e0b\u5fc3\uff0c\u8010\u4f4f\u6027\u5b50\u770b\u770b\u6587\u7ae0\uff0c\u5b9e\u5c5e\u4e0d\u6613\u3002","title":"\u4e00 \u524d\u8a00"},{"location":"chapter_14/2_qianrushidev/#_12","text":"\u8001\u5b50\u66f0\uff1a\u201c\u5408\u62b1\u4e4b\u6728\uff0c\u751f\u4e8e\u6beb\u672b\uff1a\u4e5d\u5c42\u4e4b\u53f0\uff0c\u8d77\u4e8e\u5792\u571f\uff1b\u5343\u91cc\u4e4b\u884c\uff0c\u59cb\u4e8e\u8db3\u4e0b\u201d\uff0c\u6839\u57fa\u7684\u91cd\u8981\u6027\u4e0d\u8a00\u800c\u55bb\u3002 \u90a3\u4e48\u5bf9\u4e8e\u5d4c\u5165\u5f0f\u8fd9\u6761\u8def\u7ebf\u800c\u8a00\uff0c\u5982\u4f55\u5efa\u7acb\u4e00\u4e2a\u7a33\u56fa\u7684\u6839\u57fa\uff1f","title":"\u4e8c \u5d4c\u5165\u5f0f\u57fa\u7840\u5fc5\u5907\u77e5\u8bc6"},{"location":"chapter_14/2_qianrushidev/#21","text":"C \u8bed\u8a00\u57fa\u7840 \u8be5\u90e8\u5206\uff0c\u4e3b\u8981\u5305\u62ec\u51e0\u4e2a\u6838\u5fc3\u77e5\u8bc6\u70b9\uff1a \u4e09\u5927\u8bed\u6cd5\u7ed3\u6784\u3001\u5e38\u7528\u7684\u6570\u636e\u7c7b\u578b\u3001\u51fd\u6570\u3001\u7ed3\u6784\u4f53\u3001\u6307\u9488\u3001\u6587\u4ef6\u64cd\u4f5c \u7b49\u3002 \u786c\u4ef6\u57fa\u7840\u77e5\u8bc6 \u8be5\u90e8\u5206\uff0c\u6838\u5fc3\u77e5\u8bc6\u70b9\u5728\u4e8e\uff1a \u7535\u8def\u57fa\u7840\u77e5\u8bc6\u3001\u6570\u7535\u6a21\u7535\u57fa\u7840\u77e5\u8bc6\u3001\u5e38\u7528\u7684\u7535\u5b50\u5143\u5668\u4ef6 \u7b49\u3002 \u6570\u636e\u7ed3\u6784 \u6838\u5fc3\u77e5\u8bc6\u70b9\uff1a \u6570\u7ec4\u3001\u961f\u5217\u3001\u94fe\u8868\u3001\u5806\u6808\u3001\u6811\u3001\u56fe\u3001\u6563\u5217\u8868 \u7b49\u3002 \u64cd\u4f5c\u7cfb\u7edf \u6838\u5fc3\u77e5\u8bc6\u70b9\uff1a \u8fdb\u7a0b\u7ba1\u7406\u3001\u5185\u5b58\u7ba1\u7406\u3001\u6587\u4ef6\u7ba1\u7406\u3001\u8f93\u5165\u8f93\u51fa\u7ba1\u7406 \u7b49\u3002 \u8ba1\u7b97\u673a\u539f\u7406 \u6838\u5fc3\u77e5\u8bc6\u70b9\uff1a \u6570\u636e\u8868\u793a\u548c\u8fd0\u7b97\u3001\u5b58\u50a8\u7cfb\u7edf\u3001\u6307\u4ee4\u7cfb\u7edf\u3001\u603b\u7ebf\u7cfb\u7edf\u3001\u4e2d\u592e\u5904\u7406\u5668\u3001\u8f93\u5165\u8f93\u51fa\u7cfb\u7edf \u7b49\u3002","title":"2.1\u3001\u5b66\u4e60\u5185\u5bb9"},{"location":"chapter_14/2_qianrushidev/#22","text":"\u5bf9\u4e8e C \u8bed\u8a00\u57fa\u7840\u5b66\u4e60 \uff0c\u4e00\u5b9a\u8981\u91cd\u70b9\u719f\u7ec3\u638c\u63e1\uff0c\u6839\u57fa\u7684\u7262\u56fa\u76f4\u63a5\u51b3\u5b9a\u4e86\u6211\u4eec\u7684\u4ee3\u7801\u8d28\u91cf\u3002 \u5bf9\u4e8e \u786c\u4ef6\u57fa\u7840\u5b66\u4e60 \uff0c\u8981\u9002\u5f53\u4e86\u89e3\uff0c\u8981\u80fd\u591f\u770b\u61c2\u4e00\u4e9b\u7b80\u5355\u7684\u7535\u8def\u7ed3\u6784\uff0c\u8ba4\u8bc6\u5e38\u7528\u7684\u7535\u5b50\u5143\u5668\u4ef6\u3002 \u5bf9\u4e8e \u6570\u636e\u7ed3\u6784\u5b66\u4e60 \uff0c\u524d\u4e94\u4e2a\u662f\u5fc5\u5907\u5b66\u4e60\u7684\uff0c\u53ef\u80fd\u5728\u521a\u5f00\u59cb\u5b66\u4e60\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u611f\u89c9\u4e0d\u5230\u4f5c\u7528\u5728\u54ea\u91cc\uff0c\u4f46\u662f\u968f\u7740\u63a5\u89e6\u5230\u5d4c\u5165\u5f0f\u5e95\u5c42\u8bbe\u8ba1\u4ee5\u53ca\u7b97\u6cd5\u8bbe\u8ba1\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u604d\u7136\u5927\u609f\u3002 \u5bf9\u4e8e \u64cd\u4f5c\u7cfb\u7edf\u5b66\u4e60 \uff0c\u91cd\u70b9\u5b66\u4e60\u5176\u601d\u60f3\uff0c\u5bf9\u76f8\u5173\u77e5\u8bc6\u70b9\u6709\u4e00\u4e2a\u5927\u6982\u7684\u4e86\u89e3\uff0c\u540e\u7eed\u63a5\u89e6\u5230\u7ee7\u7eed\u91cd\u70b9\u5b66\u4e60\uff0c\u8fd9\u4e9b\u65e0\u8bba\u662f RTOS\uff0c\u8fd8\u662f Linux\uff0c\u90fd\u6709\u6d89\u53ca\u5230\u7684\u3002 \u5bf9\u4e8e \u8ba1\u7b97\u673a\u539f\u7406\u5b66\u4e60 \uff0c\u53ef\u4ee5\u5c06\u5176\u770b\u4f5c\u662f\u5d4c\u5165\u5f0f\u7cfb\u7edf\u7684\u5404\u4e2a\u6a21\u5757\u7684\u8be6\u89e3\uff0c\u4f1a\u8ba9\u4f60\u5bf9\u5d4c\u5165\u5f0f\u6709\u4e00\u4e2a\u6574\u4f53\u7684\u4e86\u89e3\uff0c\u6bcf\u4e00\u4e2a\u90e8\u5206\u90fd\u503c\u5f97\u6df1\u7a76\u3002","title":"2.2\u3001\u5b66\u4e60\u5efa\u8bae"},{"location":"chapter_14/2_qianrushidev/#23","text":"C \u8bed\u8a00\u57fa\u7840 \uff1a\u63a8\u8350\u7ecf\u5178\u4e66\u7c4d\u300aC \u8bed\u8a00\u7a0b\u5e8f\u8bbe\u8ba1\u300b\uff08\u7b2c 2 \u7248\uff09\u8c2d\u6d69\u5f3a\u7248\u672c\u3002 \u786c\u4ef6\u57fa\u7840 \uff1a\u5927\u5b66\u91cc\u9762\u7684\u300a\u6570\u7535\u6a21\u7535\u300b\u4e66\u7c4d\u6240\u6d89\u53ca\u7684\u77e5\u8bc6\u5373\u53ef\u3002 \u6570\u636e\u7ed3\u6784 \uff1a\u63a8\u8350\u7ecf\u5178\u4e66\u7c4d\u300a\u6570\u636e\u7ed3\u6784\u300b\u2014\u2014\u4e25\u851a\u654f\u7248\u3002 \u64cd\u4f5c\u7cfb\u7edf\u3001\u8ba1\u7b97\u673a\u539f\u7406 \uff1a\u6211\u7528\u7684\u662f\u300a\u738b\u9053\u300b\u7684\u7cfb\u5217\u4e1b\u4e66\uff0c\u4e2a\u4eba\u611f\u89c9\u4e0d\u9519\u3002 \u8ba1\u7b97\u673a\u7ec4\u6210\u3001\u6570\u636e\u7ed3\u6784\u3001\u64cd\u4f5c\u7cfb\u7edf\u3001\u6570\u636e\u5e93 \u662f\u5d4c\u5165\u5f0f\u6216\u8005\u8bf4\u8ba1\u7b97\u673a\u7684\u5165\u95e8\u5fc5\u8bfb\u4e66\u7c4d\uff0c\u5e76\u4e14\u4e5f\u88ab\u5217\u5165\u9ad8\u6821\u6559\u6750\u5185\uff0c\u662f\u771f\u6b63\u7684\u57fa\u7840\u77e5\u8bc6\u3002 \u4ee5\u4e0a\uff0c\u4e0d\u4e00\u5b9a\u662f\u5168\u90e8\u770b\u5b8c\u624d\u80fd\u4f53\u9a8c\u7f16\u7a0b\u7684\u4e50\u8da3\uff0c\u8fd9\u4e2a\u57fa\u7840\u662f\u4e00\u4e2a\u5faa\u5e8f\u6e10\u8fdb\u7684\u8fc7\u7a0b\uff0c\u4e5f\u4e0d\u662f\u4e00\u671d\u4e00\u5915\u5c31\u80fd\u5b8c\u6210\u7684\uff0c\u53ef\u4ee5\u5148\u6709\u4e00\u4e2a\u5927\u6982\uff0c\u540e\u7eed\u505a\u9879\u76ee\u65f6\uff0c\u54ea\u91cc\u4e0d\u61c2\u8865\u54ea\u91cc\uff01 \u8fd9\u91cc\u6d89\u53ca\u5230\u4e00\u4e2a\u91cd\u8981\u7684\u5b66\u4e60\u65b9\u6cd5\uff1a \u9879\u76ee\u5bfc\u5411\u7684\u5b66\u4e60\u6cd5\u3002","title":"2.3\u3001\u5b66\u4e60\u8d44\u6599"},{"location":"chapter_14/2_qianrushidev/#51","text":"","title":"\u4e09 \u5d4c\u5165\u5f0f\u5165\u95e8\u7bc7\u2014\u201451 \u5355\u7247\u673a"},{"location":"chapter_14/2_qianrushidev/#31","text":"\u8be5\u90e8\u5206\uff0c\u4e3b\u8981\u5728\u6700\u5c0f\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u5b9e\u73b0\u5404\u79cd\u6709\u8da3\u7684\u5b9e\u9a8c\u3002\u901a\u8fc7 51 \u5355\u7247\u673a\u7684\u5b66\u4e60\uff0c\u6211\u4eec\u8981\u505a\u5230\uff1a \u8f6f\u4ef6\u7c7b \uff1a \u4e3b\u8981\u77e5\u8bc6\u70b9\u6709\uff1a \u8ba4\u8bc6\u5355\u7247\u673a\u3001\u719f\u6089\u903b\u8f91\u8fd0\u7b97\u3001\u70b9\u4eae\u4e00\u9897 LED \u706f\u3001\u6309\u952e\u68c0\u6d4b\u3001\u4e32\u53e3\u901a\u4fe1\u3001\u5b9a\u65f6\u5668\u3001\u4e2d\u65ad \u7b49\u3002 \u786c\u4ef6\u7c7b \uff1a \u4e3b\u8981\u77e5\u8bc6\u70b9\u6709\uff1a \u7535\u963b\u5143\u5668\u4ef6\u4e86\u89e3\uff0c\u57fa\u672c\u6a21\u5757\u7535\u8def\u4e86\u89e3\uff0c\u65f6\u949f\u7535\u8def\uff0c\u5c1d\u8bd5\u7ed8\u5236 51 \u5355\u7247\u673a\u539f\u7406\u56fe\u548c PCB","title":"3.1\u3001\u5b66\u4e60\u5185\u5bb9"},{"location":"chapter_14/2_qianrushidev/#32","text":"\u5bf9\u4e8e \u8f6f\u4ef6\u7c7b \uff0c\u6211\u4eec\u4e3b\u8981\u505a\u5230\uff1a\u8ba4\u8bc6\u5355\u7247\u673a\uff0c\u719f\u6089\u5355\u7247\u673a\u7684 GPIO \u7684\u8f93\u5165\u3001\u8f93\u51fa\u64cd\u4f5c\uff0c\u4e32\u53e3\u901a\u4fe1\u534f\u8bae\u638c\u63e1\u7b49\uff0c \u8fd9\u4e9b\u90e8\u5206\u90fd\u662f\u4efb\u4f55\u4e00\u6b3e\u5d4c\u5165\u5f0f\u8bbe\u5907\u7684\u5fc5\u5907\u6280\u80fd\u3002 \u5bf9\u4e8e \u786c\u4ef6\u7c7b \uff1a\u6211\u4eec\u4e3b\u8981\u505a\u5230\uff1a \u80fd\u770b\u61c2\u7535\u8def\u56fe \uff0c \u719f\u6089 \u4e00\u4e9b\u7b80\u5355\u6a21\u5757\u7684 \u8bbe\u8ba1\u7535\u8def \uff0c\u4e86\u89e3 Altium Designer \u7684\u4f7f\u7528\u65b9\u6cd5\u3002","title":"3.2\u3001\u5b66\u4e60\u5efa\u8bae"},{"location":"chapter_14/2_qianrushidev/#33","text":"51 \u5355\u7247\u673a\uff1a\u90ed\u5929\u7965\u7684 51 \u5355\u7247\u673a\u6559\u7a0b\uff0c\u7ecf\u5178\u8457\u4f5c\uff0c\u7ecf\u4e45\u4e0d\u8870\uff0c\u5f3a\u70c8\u63a8\u8350\u3002 \u5e84\u5b50\u8bf4\uff1a\u201c\u6c34\u4e4b\u79ef\u4e5f\u4e0d\u539a\uff0c\u5219\u5176\u8d1f\u5927\u821f\u4e5f\u65e0\u529b\u3002\u201c \u8be5\u90e8\u5206\uff0c\u662f\u5d4c\u5165\u5f0f\u9886\u57df\u7684\u57fa\u77f3\uff0c\u53ea\u6709\u5c06\u57fa\u7840\u6253\u7262\uff0c\u624d\u80fd\u8d1f\u5f97\u8d77 Linux \u6cf0\u5766\u53f7\u3002","title":"3.3\u3001\u5b66\u4e60\u8d44\u6599"},{"location":"chapter_14/2_qianrushidev/#stm32","text":"STM32 \u662f C51 \u7684\u8fdb\u9636\u7248\uff0c\u62e5\u6709 C51 \u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u5f00\u53d1 STM32 \u4f1a\u5f97\u5fc3\u5e94\u624b\u3002 STM32 \u7684\u7cfb\u7edf\u67b6\u6784\u4ee5\u53ca\u786c\u4ef6\u8bbe\u8ba1\u76f8\u6bd4\u4e8e C51 \u6765\u8bf4\uff0c\u90fd\u662f\u4e0a\u5347\u4e86\u4e00\u4e2a\u7ef4\u5ea6\u7684\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u6211\u63a8\u8350\u5165\u95e8\u5b66\u4e60 C51 \u7684\u539f\u56e0\u3002 \u4ee5 STM32F407 \u5e73\u53f0\u4e3a\u57fa\u7840\uff0c\u53bb\u5b66\u4e60\u76ee\u524d\u5d4c\u5165\u5f0f\u4e3b\u6d41\u7684\u4e00\u4e9b\u6280\u672f\uff0c\u63a2\u5bfb\u5e95\u5c42\u7684\u539f\u7406\uff0c\u505a\u5230\u4e0d\u540c\u5e73\u53f0\uff0c\u90fd\u80fd\u591f\u5f97\u5fc3\u5e94\u624b\u3002","title":"\u56db STM32 \u8fdb\u9636\u7bc7"},{"location":"chapter_14/2_qianrushidev/#41","text":"\u57fa\u7840\u7ec3\u4e60 \u8be5\u90e8\u5206\uff0c\u4e3b\u8981\u7ec3\u4e60\uff1a \u70b9\u4eae LED \u706f\u3001GPIO \u7684\u8f93\u5165\u8f93\u51fa\u64cd\u4f5c\u3001\u4e2d\u65ad\u64cd\u4f5c\u3001UART \u901a\u4fe1\u3001IIC \u901a\u4fe1 \u7b49 \u8fdb\u9636\u7ec3\u4e60 \u8be5\u90e8\u5206\uff0c\u4e3b\u8981\u7ec3\u4e60\uff1a DMA \u901a\u4fe1\u3001SPI \u901a\u4fe1\u3001CAN \u901a\u4fe1\u3001LCD \u663e\u793a\u5c4f\uff0cADC \u7b49 \u9ad8\u9636\u7ec3\u4e60 \u8be5\u90e8\u5206\uff0c\u4e3b\u8981\u5b66\u4e60\uff1a STM32 \u65f6\u949f\u67b6\u6784\u3001\u603b\u7ebf\u67b6\u6784\u3001\u7535\u6e90\u7ba1\u7406\u3001\u4ee3\u7801\u6846\u67b6\u3001SDIO \u901a\u4fe1\u3001USB \u901a\u4fe1 \u7b49\u3002","title":"4.1\u3001\u5b66\u4e60\u5185\u5bb9"},{"location":"chapter_14/2_qianrushidev/#42_1","text":"\u5bf9\u4e8e \u57fa\u7840\u7ec3\u4e60 \uff0c\u4e3b\u8981\u76ee\u7684\u662f\u4e3a\u4e86\u65b9\u4fbf\u8ba9\u6211\u4eec\u4ece C51 \u5230 STM32 \u73af\u5883\u7684\u8fc7\u6e21\u3002 \u5bf9\u4e8e \u8fdb\u9636\u7ec3\u4e60 \uff0c\u4e3b\u8981\u7ec3\u4e60\u4e00\u4e9b\u901a\u4fe1\u7c7b\u76f8\u5173\u7684\u534f\u8bae\uff0c\u53ef\u4ee5\u7ed3\u5408\u4e00\u4e9b\u4f20\u611f\u5668\u8fdb\u884c\u5f00\u53d1\u3002 \u5bf9\u4e8e \u9ad8\u9636\u7ec3\u4e60 \uff0c\u4e3b\u8981\u76ee\u7684\u662f\u4e3a\u4e86\u719f\u6089\u5355\u7247\u673a\u7684\u8bbe\u8ba1\u67b6\u6784\uff0c\u7f16\u7a0b\u7684\u6846\u67b6\uff0c\u4ee5\u53ca\u4e00\u4e9b\u66f4\u590d\u6742\u7684\u901a\u4fe1\u6280\u672f\u3002 \u53e6\u5916\uff0cSTM32 \u4f1a\u6709\u5bc4\u5b58\u5668\u548c\u5e93\u51fd\u6570\u4e24\u4e2a\u7248\u672c\uff0c\u5efa\u8bae\u4ea4\u53c9\u5b66\u4e60\uff0c\u7406\u89e3\u4f1a\u66f4\u52a0\u6df1\u523b\u3002","title":"4.2\u3001\u5b66\u4e60\u5efa\u8bae"},{"location":"chapter_14/2_qianrushidev/#43","text":"STM32 \u5355\u7247\u673a \uff1a\u63a8\u8350\u6b63\u70b9\u539f\u5b50\u3001\u91ce\u706b\u7684 STM32F103 \u6216\u8005 STM32F407 \u7cfb\u5217\u3002 \u4e24\u5bb6\u7684\u5b66\u4e60\u8d44\u6599\u90fd\u975e\u5e38\u4e30\u5bcc\uff0c\u65e2\u6709\u8be6\u7ec6\u7684\u6587\u6863\u8bf4\u660e\uff0c\u4e5f\u6709\u5b8c\u6574\u7684\u5b66\u4e60\u89c6\u9891\u6559\u7a0b\uff0c\u975e\u5e38\u9002\u5408\u65b0\u624b\u5165\u95e8\u5b66\u4e60\u3002 \u4fd7\u8bdd\u8bf4\uff1a\u201c\u6709\u9053\u65e0\u672f\uff0c\u672f\u5c1a\u53ef\u6c42\uff0c\u6709\u672f\u65e0\u9053\uff0c\u6b62\u4e8e\u672f\u201d\u3002\u8981\u660e\u767d\u9053\u548c\u672f\u7684\u533a\u522b\uff0c\u4e0d\u8981\u672c\u672b\u5012\u7f6e\u3002","title":"4.3\u3001\u5b66\u4e60\u8d44\u6599"},{"location":"chapter_14/2_qianrushidev/#rtos","text":"RTOS \uff0c\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a STM32 \u4e0e Linux \u4e4b\u95f4\u7684\u6865\u6881\uff0c\u7531\u4e8e\u5176\u5b9e\u73b0\u601d\u60f3\u5927\u90fd\u53d6\u4e4b\u4e8e Linux\uff0c\u6240\u4ee5\u4e5f\u79f0\u4e4b\u4e3a \u7cbe\u7b80\u7248\u7684 Linux \u3002 \u6211\u4eec\u5e38\u7528\u7684\u6709\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u6709\uff1a UCOS \uff0c VxWork \uff0c FreeRtos \uff0c\u8fd1\u4e9b\u5e74 RT-Thread \u4e5f\u5f02\u519b\u7a81\u8d77\u3002 \u5b66\u4e60\u8fd9\u4e9b\u7b80\u5355\u7684\u5d4c\u5165\u5f0f\u7cfb\u7edf\uff0c\u4e00\u6765\u80fd\u591f\u5e2e\u52a9\u6211\u4eec\u4e3a\u5b66\u4e60 Linux \u64cd\u4f5c\u7cfb\u7edf\u6253\u4e0b\u57fa\u7840\uff0c\u4e8c\u6765\u4e5f\u80fd\u591f\u6269\u5bbd\u6211\u4eec\u7684\u804c\u4e1a\u9053\u8def\u3002 \u524d\u9762\u4e5f\u8bf4\u8fc7\u4e86\uff0c\u65e0\u8bba\u662f UCOS \u3001 FreeRtos \u3001 Rt-thread \uff0c\u5176\u5185\u90e8\u7684\u8bbe\u8ba1\u601d\u60f3\u5927\u540c\u5c0f\u5f02\uff0c\u4e0b\u9762\u4e3b\u8981\u4ee5 Ucos \u4e3a\u4f8b\u3002","title":"\u4e94 \u5c0f\u800c\u7f8e\u7684 RTOS"},{"location":"chapter_14/2_qianrushidev/#51_1","text":"\u5b9e\u65f6\u7cfb\u7edf\u5b66\u4e60 \u8be5\u90e8\u5206\uff0c\u4e3b\u8981\u5b66\u4e60\uff1a \u79fb\u690d Ucos \u7cfb\u7edf\u3001\u591a\u4efb\u52a1\u7ba1\u7406\u3001\u8c03\u5ea6\u7b97\u6cd5\u3001\u6d88\u606f\u961f\u5217\u3001\u4fe1\u53f7\u91cf\u4e92\u65a5\u91cf\u3001\u4e8b\u4ef6\u3001\u5185\u5b58\u7ba1\u7406 \u7b49\u3002","title":"5.1\u3001\u5b66\u4e60\u5185\u5bb9"},{"location":"chapter_14/2_qianrushidev/#52","text":"\u5bf9\u4e8e \u5b9e\u65f6\u7cfb\u7edf\u5b66\u4e60 \uff0c\u9664\u4e86\u4e0a\u8ff0\u7684\u90a3\u4e9b\u6838\u5fc3\u77e5\u8bc6\u70b9\u5916\uff0c\u8fd8\u8981\u7ed3\u5408 2.1 \u57fa\u7840\u5fc5\u5907\u77e5\u8bc6 \u7684 \u64cd\u4f5c\u7cfb\u7edf\u4e66\u7c4d \u52a0\u6df1\u7406\u89e3\u3002","title":"5.2\u3001\u5b66\u4e60\u5efa\u8bae"},{"location":"chapter_14/2_qianrushidev/#53","text":"RTOS \u7684\u5b66\u4e60\uff1a\u4f9d\u65e7\u63a8\u8350\u6b63\u70b9\u539f\u5b50\uff0c\u91ce\u706b\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\uff0c\u53ef\u4ee5\u57fa\u4e8e STM32 \u5f00\u53d1\u677f\uff0c\u540c\u65f6\u4e5f\u6709\u975e\u5e38\u8be6\u7ec6\u7684\u6587\u6863\u548c\u89c6\u9891\u6559\u5b66\u3002","title":"5.3\u3001\u5b66\u4e60\u8d44\u6599"},{"location":"chapter_14/2_qianrushidev/#armlinux","text":"\u5b66\u4e60\u5b8c RTOS \u540e\uff0c\u57fa\u672c\u5d4c\u5165\u5f0f\u6240\u6d89\u53ca\u7684\u6280\u672f\u5df2\u7ecf\u638c\u63e1\u4e00\u534a\u4e86\uff0c\u4f60\u4e5f\u53ef\u4ee5\u72ec\u7acb\u5b8c\u6210\u4e00\u4e9b\u5c0f\u7684\u9879\u76ee\uff0c\u4e5f\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a\u4e0d\u9519\u7684\u5de5\u4f5c\uff0c\u4f46\u662f\u4e00\u5b9a\u4e0d\u8981\u81ea\u6211\u6ee1\u8db3\uff0c\u6709\u673a\u4f1a\u4e00\u5b9a\u8981\u63a5\u89e6 Linux\u3002 \u8fd8\u662f\u90a3\u53e5\u8bdd\uff1aARM+Linux\uff0c\u4e5f\u662f\u6700\u4e3a\u590d\u6742\u7684\u4e1c\u897f\uff0c\u5982\u679c\u4f60\u4e0d\u53bb\u63a5\u89e6Linux\uff0c\u4f60\u6c38\u8fdc\u4e0d\u77e5\u9053\u5d4c\u5165\u5f0f\u7684\u9b45\u529b\u3002 Linux \u5f00\u53d1 \u53c8\u5206\u4e3a \u9a71\u52a8\u5f00\u53d1 \uff0c \u5185\u6838\u5f00\u53d1 \uff0c \u5e94\u7528\u5f00\u53d1 \uff0c\u6bcf\u4e00\u4e2a\u65b9\u5411\u90fd\u9700\u8981\u51e0\u5e74\u751a\u81f3\u51e0\u5341\u5e74\u7684\u79ef\u7d2f\u3002 \u4f5c\u4e3a\u521d\u5b66\u8005\uff0c\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u5b8f\u89c2\u4e86\u89e3\uff0c\u6269\u5927\u6211\u4eec\u7684\u77e5\u8bc6\u9762\uff0c\u7136\u540e\u53bb\u9009\u62e9\u81ea\u5df1\u611f\u5174\u8da3\u7684\u65b9\u9762\u3002","title":"\u516d ARM+Linux \u7bc7"},{"location":"chapter_14/2_qianrushidev/#61","text":"Linux \u57fa\u7840\u7bc7 \u8be5\u90e8\u5206\u4e3b\u8981\u5b66\u4e60\uff1a Linux \u5e38\u7528\u547d\u4ee4\u3001VIM \u5b66\u4e60\u3001Linux \u7684 Shell \u7f16\u7a0b\u3001Gcc \u7f16\u8bd1\u3001Makefile \u7b49\u3002 \u9a71\u52a8\u7bc7 \u8be5\u90e8\u5206\u4e3b\u8981\u5b66\u4e60\uff1a \u5185\u6838\u6a21\u5757\u7f16\u8bd1\u539f\u7406\u3001\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u6846\u67b6\u3001\u5e73\u53f0\u8bbe\u5907\u9a71\u52a8\u3001\u8bbe\u5907\u6811\u3001Pinctrl \u5b50\u7cfb\u7edf\u3001I2C \u5b50\u7cfb\u7edf\u3001\u4e2d\u65ad\u5b50\u7cfb\u7edf\u3001\u5757\u8bbe\u5907\u9a71\u52a8\u6846\u67b6\u3001Bootloader \u7b49 \u5185\u6838\u7bc7 \u8be5\u90e8\u5206\u4e3b\u8981\u5b66\u4e60\uff1a \u7cfb\u7edf\u8c03\u7528\u3001\u5b58\u50a8\u7ba1\u7406\u3001\u8fdb\u7a0b\u7ba1\u7406\u3001\u5185\u5b58\u7ba1\u7406\u3001\u6587\u4ef6\u7ba1\u7406 \u7b49\u3002 \u5e94\u7528\u7bc7 \u8be5\u90e8\u5206\u4e3b\u8981\u5b66\u4e60\uff1a QT \u7f16\u7a0b\u3001TCP/IP \u534f\u8bae\u3001HTTP \u534f\u8bae \u7b49\u3002","title":"6.1\u3001\u5b66\u4e60\u5185\u5bb9"},{"location":"chapter_14/2_qianrushidev/#62","text":"\u5bf9\u4e8e \u57fa\u7840\u5b66\u4e60 \uff0c\u521a\u63a5\u89e6\u5230 Linux \uff0c\u4e00\u822c\u6bd4\u8f83\u96be\u4e0a\u624b\uff0c\u4e0e\u4e4b\u524d\u7684\u5355\u7247\u673a\u5b8c\u5168\u4e0d\u540c\uff0c\u9700\u8981\u4e00\u4e2a\u719f\u6089\u73af\u5883\u7684\u8fc7\u7a0b\u3002 \u5bf9\u4e8e \u9a71\u52a8\u5b66\u4e60 \uff0c\u91cd\u8981\u5728\u4e8e\u660e\u767d \u201c\u5982\u4f55\u5728 Linux \u73af\u5883\u4e0b\u7f16\u5199\u9a71\u52a8\u7a0b\u5e8f\u201d \uff0c\u9a71\u52a8\u7684\u5e95\u5c42\u539f\u7406\u8fd8\u662f\u90a3\u6837\uff0c\u52a0\u4e86\u4e00\u5c42\u5c42\u7684\u6846\u67b6\uff0c\u9700\u8981\u6211\u4eec\u53bb\u719f\u6089\u3002 \u5bf9\u4e8e \u5185\u6838\u5b66\u4e60 \uff0c\u4e0a\u8ff0\u4e5f\u662f\u7cfb\u7edf\u7684\u51e0\u5927\u6838\u5fc3\u7279\u8272\uff0c\u91cd\u70b9\u5728\u4e8e \"\u5982\u4f55\u4f7f Linux \u6027\u80fd\u6700\u4f18\" \u5bf9\u4e8e \u5e94\u7528\u5b66\u4e60 \uff0c\u4e0a\u8ff0\u7684\u51e0\u4e2a\u65b9\u9762\u4e5f\u662f\u57fa\u7840\uff0c\u91cd\u70b9\u8fd8\u5728\u4e8e \u5f00\u53d1\u4ec0\u4e48\u5e94\u7528 \uff0c\u53bb\u5b66\u4e60\u54ea\u65b9\u9762\u7684\u77e5\u8bc6\uff0c\u6ca1\u6709\u5b9a\u8bba\u3002 \u5bf9\u4e8e Linux\uff0c\u6709\u53e5\u8001\u8bdd\u201c\u5b66\u4e60 Linux\uff0c3 \u5e74\u624d\u7b97\u5165\u95e8\uff0c5 \u5e74\u624d\u52c9\u5f3a\u7b97 Linux \u5de5\u7a0b\u5e08\uff0c\u5bf9\u4e8e\u4e0d\u592a\u719f\u6089\u7684\u9886\u57df\uff0c\u535a\u4e3b\u4e5f\u4e0d\u6562\u5984\u52a0\u65ad\u8a00\u3002\u201d","title":"6.2\u3001\u5b66\u4e60\u5efa\u8bae"},{"location":"chapter_14/2_qianrushidev/#63","text":"\u5bf9\u4e8e \u57fa\u7840\u5b66\u4e60 \uff0c\u63a8\u8350 \u300a\u9e1f\u54e5\u7684 Linux \u79c1\u623f\u83dc\u300b \uff0c \u300aUnix \u73af\u5883\u9ad8\u7ea7\u7f16\u7a0b\u300b \u7b49\u5165\u95e8\u4e66\u7c4d\u3002 \u5bf9\u4e8e \u9a71\u52a8\u5f00\u53d1 \uff0c\u63a8\u8350 \u300aLinux \u8bbe\u5907\u9a71\u52a8\u5f00\u53d1\u8be6\u89e3\u300b \uff0c Linux \u5185\u6838\u6e90\u7801\u8be6\u89e3 \u7b49\u3002 \u5bf9\u4e8e \u5185\u6838\u5b66\u4e60 \uff0c\u63a8\u8350 \u300aLinux Shell \u811a\u672c\u653b\u7565\u300b \u3001 \u300a\u6df1\u5165\u7406\u89e3 Linux \u5185\u6838\u300b \u7b49\u3002 \u5bf9\u4e8e \u5e94\u7528\u5f00\u53d1 \uff0c\u63a8\u8350 \u300a\u5d4c\u5165\u5f0f Linux \u5e94\u7528\u5f00\u53d1\u5b8c\u5168\u624b\u518c\u300b \u3001 \u300aUnix \u7f51\u7edc\u7f16\u7a0b\u300b \u7b49\u3002 \u53e6\u5916\uff0c\u63a8\u8350\u6b63\u70b9\u539f\u5b50\uff0c\u91ce\u706b\uff0c\u97e6\u4e1c\u5c71\u4e09\u4e2a Linux \u5f00\u53d1\u6559\u7a0b\uff0c\u97e6\u8001\u5e08\u7684\u8bfe\u7a0b\u597d\u8bc4\u5c45\u591a\uff0c\u4f46\u8fd8\u662f\u770b\u54ea\u4e2a\u66f4\u9002\u5408\u81ea\u5df1\u3002","title":"6.3\u3001\u5b66\u4e60\u8d44\u6599"},{"location":"chapter_14/2_qianrushidev/#_13","text":"\u5168\u6587\u6574\u4f53\u7684\u5b66\u4e60\u8def\u7ebf\uff1a \u5d4c\u5165\u5f0f\u57fa\u7840\u5b66\u4e60 -> 51 \u5355\u7247\u673a -> STM32 \u5355\u7247\u673a -> RTOS \u7bc7 -> ARM+Linux \u7eaf\u8f6f\u4ef6, 25 \u5c81\u5dc5\u5cf0, 35 \u5c81\u88ab\u88c1. \u5d4c\u5165\u5f0f, 29 \u5c81\u5dc5\u5cf0, 45 ~ 50 \u5c81\u88ab\u88c1. \u786c\u4ef6\u5de5\u7a0b\u5e08, 35 \u5c81\u5dc5\u5cf0, 60 \u5c81\u4ee5\u540e\u8d70\u4e0b\u5761\u8def.","title":"\u4e03 \u603b\u7ed3"},{"location":"chapter_14/2_qianrushidev/#bsp","text":"\u5982\u4f55\u6210\u4e3a\u4e00\u540d\u4f18\u79c0\u5d4c\u5165\u5f0f BSP \u5de5\u7a0b\u5e08","title":"\u56db \u5982\u4f55\u6210\u4e3a\u4e00\u540d\u4f18\u79c0\u5d4c\u5165\u5f0f BSP \u5de5\u7a0b\u5e08"},{"location":"chapter_14/2_qianrushidev/#bsp_1","text":"","title":"BSP \u5de5\u7a0b\u5e08\u62db\u8058\u8981\u6c42"},{"location":"chapter_14/2_qianrushidev/#soc","text":"SOC (System on a Chip) bring-up \u662f\u4e00\u4e2a\u590d\u6742\u7684\u8fc7\u7a0b \uff0c\u6d89\u53ca\u5230\u786c\u4ef6\u3001\u56fa\u4ef6\u548c\u8f6f\u4ef6\u7684\u96c6\u6210\u548c\u9a8c\u8bc1\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e2a\u57fa\u4e8e BROM\uff0cSPL\uff0cUBOOT \u548c Linux \u7684\u542f\u52a8\u6d41\u7a0b\u7684\u6982\u8ff0\uff1a BROM (Boot Read-Only Memory)\u542f\u52a8\uff1a\u542f\u52a8\u7684\u6700\u521d\u9636\u6bb5\uff0c\u5728\u8fd9\u4e2a\u9636\u6bb5\uff0c\u7cfb\u7edf\u4f1a\u6267\u884c\u82af\u7247 ROM \u91cc\u9762\u7684\u4ee3\u7801\uff0c\u8fd9\u90e8\u5206\u4ee3\u7801\u4e3b\u8981\u7528\u6765\u68c0\u67e5\u542f\u52a8\u6a21\u5f0f\uff0c\u5305\u62ec NOR\u3001Nand\u3001Emmc \u7b49\uff0c\u7136\u540e\u4ece\u5bf9\u5e94\u7684\u5b58\u50a8\u4ecb\u8d28\u4e2d\u52a0\u8f7d SPL(Secondary Program Loader)\u4ee3\u7801\u3002 SPL (Secondary Program Loader)\u542f\u52a8\uff1aSPL \u5c5e\u4e8e Uboot \u7684\u4e00\u90e8\u5206\uff0c\u5b83\u7684\u4e3b\u8981\u4f5c\u7528\u5c31\u662f\uff1a \u521d\u59cb\u5316\u786c\u4ef6\u5e76\u52a0\u8f7d\u5b8c\u6574\u7684 U-boot \uff0c\u4e3b\u8981\u4f53\u73b0\u5728\u521d\u59cb\u5316\u65f6\u949f\u3001\u770b\u95e8\u72d7\u3001DDR\u3001GPIO \u4ee5\u53ca\u5b58\u50a8\u5916\u8bbe\uff0c\u6700\u540e\u5c06 U-boot \u4ee3\u7801\u52a0\u8f7d\u5230 DDR \u4e2d\u6267\u884c\u3002 U-Boot \u542f\u52a8\uff1aU-boot \u7684\u4e3b\u8981\u4f5c\u7528\u662f\uff1a\u5f15\u5bfc\u52a0\u8f7d Kernel \u548c DTS\u3002U-boot \u5728\u542f\u52a8\u4e4b\u540e\uff0c\u540c\u6837\u521d\u59cb\u5316 Soc \u786c\u4ef6\u8d44\u6e90\uff0c\u7136\u540e\u4f1a\u8ba1\u65f6\u7b49\u5f85\uff0c\u5e76\u6267\u884c\u9ed8\u8ba4\u7684\u542f\u52a8\u547d\u4ee4\uff0c\u5c06 Kernel \u548c DTS \u4fe1\u606f\u4ece\u5b58\u50a8\u4ecb\u8d28\u4e2d\u8bfb\u53d6\u51fa\u6765\u5e76\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u6267\u884c\u3002 Kernel \u542f\u52a8\uff1a\u5728 U-Boot \u52a0\u8f7d\u4e86\u5185\u6838\u6620\u50cf\u548c\u8bbe\u5907\u6811\u4e4b\u540e\uff0c\u7cfb\u7edf\u4f1a\u542f\u52a8 Linux\u3002\u5728\u8fd9\u4e2a\u9636\u6bb5\uff0c\u7cfb\u7edf\u4f1a\u521d\u59cb\u5316\u5404\u79cd\u786c\u4ef6\u8bbe\u5907\uff0c\u52a0\u8f7d\u9a71\u52a8\u7a0b\u5e8f\u5e76\u542f\u52a8\u7528\u6237\u7a7a\u95f4\u5e94\u7528\u7a0b\u5e8f\u3002","title":"\u4e94 SoC \u542f\u52a8\u6d41\u7a0b"},{"location":"chapter_14/3_linux_kernel_api_list/","text":"\u6982\u8ff0 \u672c\u7bc7\u68b3\u7406 Linux \u5185\u6838 API \u4e00 \u5404\u79cd\u77e5\u540d API 1 register_chrdev() \u4f5c\u7528: \u51fd\u6570 register_chrdev()\u8c03\u7528\u51fd\u6570 register_chrdev()\u5b9e\u73b0\u5176\u529f\u80fd\uff0c\u51fd\u6570 register_chrdev()\u9996\u5148\u8c03\u7528\u51fd\u6570__register_chrdev_region()\u521b\u5efa\u4e00\u4e2a\u5b57\u7b26\u8bbe\u5907\u533a\uff0c\u6b64\u8bbe\u5907\u533a\u7684\u4e3b\u8bbe\u5907\u53f7\u76f8\u540c\uff0c\u7531\u51fd\u6570 register_chrdev()\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u51b3\u5b9a\uff0c\u6b21\u8bbe\u5907\u53f7\u7684\u53d8\u5316\u8303\u56f4\u662f 0 \uff5e 256\uff0c\u8bbe\u5907\u533a\u7684\u540d\u5b57\u4e3a\u51fd\u6570 register_chrdev()\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u6b64\u51fd\u6570\u5c06\u66f4\u6539/proc/devices \u6587\u4ef6\u7684\u5185\u5bb9\uff1b\u7136\u540e\u52a8\u6001\u7533\u8bf7\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u8bbe\u5907 cdev \u7ed3\u6784\u4f53\u53d8\u91cf\uff0c\u5bf9\u5176\u90e8\u5206\u5b57\u6bb5\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u521d\u59cb\u5316\u5b8c\u6210\u4e4b\u540e\u5c06\u5176\u52a0\u5165 Linux \u5185\u6838\u7cfb\u7edf\u4e2d\uff0c\u5373\u5411 Linux \u5185\u6838\u7cfb\u7edf\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u8bbe\u5907\u3002\u51fd\u6570 register_chrdev()\u8c03\u7528\u51fd\u6570 cdev_alloc()\u52a8\u6001\u7533\u8bf7\u4e00\u4e2a\u5b57\u7b26\u8bbe\u5907\uff0c\u8c03\u7528\u51fd\u6570 cdev_add()\u5c06\u5176\u52a0\u5165 Linux \u5185\u6838\u7cfb\u7edf\u4e2d\u3002 register_chrdev \u51fd\u6570\u5b9a\u4e49 : \u5728\u5185\u6838\u6e90\u7801\u4e2d\u7684\u4f4d\u7f6e\uff1alinux-3.19.3/include/linux/fs.h \u51fd\u6570\u5b9a\u4e49\u683c\u5f0f\uff1a static inline int register_chrdev(unsigned int major, const char *name, const struct file_operations *fops) { return __register_chrdev(major, 0, 256, name, fops); } register_chrdev \u8f93\u5165\u53c2\u6570\u8bf4\u660e \u51fd\u6570 register_chrdev()\u6709\u4e09\u4e2a\u8f93\u5165\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u8f93\u5165\u53c2\u6570\u662f unsigned int \u578b\u7684\u53d8\u91cf\uff0c\u4ee3\u8868\u52a8\u6001\u7533\u8bf7\u5b57\u7b26\u8bbe\u5907\u7684\u4e3b\u8bbe\u5907\u53f7\uff0c\u5bf9\u4e8e\u6b64\u8bbe\u5907\u53f7\u51fd\u6570\u81ea\u52a8\u8d4b\u503c\u4e3a 0\u3002 \u7b2c\u4e8c\u4e2a\u8f93\u5165\u53c2\u6570\u662f char \u578b\u7684\u6307\u9488\uff0c\u4ee3\u8868\u7533\u8bf7\u8bbe\u5907\u7684\u8bbe\u5907\u540d\u3002 \u7b2c\u4e09\u4e2a\u8f93\u5165\u53c2\u6570\u662f struct file_operations \u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u6307\u9488\uff0c\u4ee3\u8868\u7533\u8bf7\u8bbe\u5907\u7684\u64cd\u4f5c\u51fd\u6570\uff0c\u901a\u8fc7\u6b64\u7ed3\u6784\u4f53\u5305\u542b\u7684\u51fd\u6570\u5b8c\u6210\u5bf9\u8bbe\u5907\u7684\u8bbf\u95ee\u53ca\u63a7\u5236\u64cd\u4f5c register_chrdev \u4f7f\u7528\u6848\u4f8b: major = register_chrdev(0, \"hello\", &hello_drv); /* /dev/hello */ 2 \u5185\u6838\u9ad8\u901f\u7f13\u5b58 kmem_cache_create() \u6bd4\u5982 bdev_cachep = kmem_cache_create(\"bdev_cache\", sizeof(struct bdev_inode), 0, (SLAB_HWCACHE_ALIGN|SLAB_RECLAIM_ACCOUNT| SLAB_MEM_SPREAD|SLAB_ACCOUNT|SLAB_PANIC), init_once); 3 \u5173\u95ed\u4e2d\u65ad\u548c\u6253\u5f00\u4e2d\u65ad 3.1 \u5173\u4e2d\u65ad \u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u4e24\u4e2a\u51fd\u6570\u4e2d\u7684\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a \u5173\u95ed\u5f53\u524d\u5904\u7406\u5668\u4e0a\u7684\u6240\u6709\u4e2d\u65ad\u5904\u7406\uff0c \u8fd9\u4e24\u4e2a\u51fd\u6570\u5b9a\u4e49\u5728 <asm/system.h> \u4e2d: void local_irq_save(unsigned long flags); void local_irq_disable(void); local_irq_save \u7684\u8c03\u7528\u628a\u5f53\u524d\u7684\u4e2d\u65ad\u72b6\u6001\uff08\u5f00\u6216\u5173\uff09\u4fdd\u5b58\u5230 flags \u4e2d\uff0c\u7136\u540e\u7981\u7528\u5f53\u524d\u5904\u7406\u5668\u4e0a\u7684\u4e2d\u65ad\u3002 local_irq_disable \u4e0d\u4fdd\u5b58\u72b6\u6001\u800c\u5173\u95ed\u672c\u5730\u5904\u7406\u5668\u4e0a\u7684\u4e2d\u65ad\u53d1\u9001; \u53ea\u6709\u6211\u4eec\u77e5\u9053\u4e2d\u65ad\u5e76\u672a\u5728\u5176\u4ed6\u5730\u65b9\u88ab\u7981\u7528\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u80fd\u4f7f\u7528\u8fd9\u4e2a\u7248\u672c\u3002 3.1 \u5f00\u4e2d\u65ad \u53ef\u901a\u8fc7\u5982\u4e0b\u51fd\u6570\u6253\u5f00\u4e2d\u65ad: void local_irq_restore(unsigned long flags); void local_irq_enable(void); local_irq_restore \u5c06 \u4fdd\u5b58\u7684 flags \u72b6\u6001\u503c\u6062\u590d\uff08\u5373 local_irq_save \u7684\u5165\u53c2 flag \uff09, \u6062\u590d\u4e4b\u524d\u7684\u72b6\u6001\uff08\u5f00\u6216\u5173\uff09\u3002 local_irq_enable \u5219\u65e0\u6761\u4ef6\u6253\u5f00\u4e2d\u65ad\u3002 local_irq_save \u548c local_irq_restore \u4f1a\u66f4\u5b89\u5168\u3002 \u6ca1\u6709\u65b9\u6cd5\u5168\u5c40\u7981\u7528\u6574\u4e2a\u7cfb\u7edf\u7684\u6240\u6709\u4e2d\u65ad\u3002 \u5185\u6838\u5f00\u53d1\u8005\u8ba4\u4e3a\u5173\u95ed\u6240\u6709\u4e2d\u65ad\u7684\u4ee3\u4ef7\u592a\u9ad8\uff0c\u56e0\u6b64\u6ca1\u6709\u5fc5\u8981\u63d0\u4f9b\u8fd9\u4e2a\u80fd\u529b\u3002 4 \u83b7\u53d6\u5355 CPU \u53d8\u91cf struct softnet_data *sd = &__get_cpu_var(softnet_data) __napi_schedule \u51fd\u6570 void __napi_schedule(struct napi_struct *n) { unsigned long flags; local_irq_save(flags); ____napi_schedule(&__get_cpu_var(softnet_data), n); local_irq_restore(flags); } \u4e8c \u5404\u79cd\u77e5\u540d struct 1 \u5185\u6838\u5c42 3 \u79cd\u5b9e\u9645\u8bbe\u5907 \u5b57\u7b26\u8bbe\u5907 struct cdev \u5757\u8bbe\u5907 struct block_device \u7f51\u7edc\u8bbe\u5907 struct net_device \u4ece\u4ee3\u7801\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6574\u4e2a\u8def\u5f84\u5305\u542b\u7684\u8fc7\u7a0b\u57fa\u672c\u53ef\u4ee5\u6982\u62ec\u4e3a: \u865a\u62df\u6587\u4ef6\u7cfb\u7edf-->\u5757\u8bbe\u5907\u5b9e\u9645\u6587\u4ef6\u7cfb\u7edf-->\u901a\u7528\u5757\u5c42-->I/O scheduler-->\u5757\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f \u63cf\u8ff0\u5757\u8bbe\u5907\u7684\u6570\u636e\u7ed3\u6784\u6709\u4e24\u4e2a\uff0c\u4e00\u4e2a\u662f struct block_device ,\u7528\u6765\u63cf\u8ff0\u4e00\u4e2a\u5757\u8bbe\u5907\u6216\u8005\u5757\u8bbe\u5907\u7684\u4e00\u4e2a\u5206\u533a\uff1b \u53e6\u4e00\u4e2a\u662f struct gendisk \uff0c\u7528\u6765\u63cf\u8ff0\u6574\u4e2a\u5757\u8bbe\u5907\u7684\u7279\u6027\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u5305\u542b\u591a\u4e2a\u5206\u533a\u7684\u5757\u8bbe\u5907\uff0cstruct block_device \u7ed3\u6784\u6709\u591a\u4e2a,\u6bcf\u4e2a\u5206\u533a\u4e00\u4e2a block_device, \u6574\u4e2a\u8bbe\u5907\u4e5f\u5bf9\u5e94\u4e00\u4e2a block_device,\u800c struct gendisk \u7ed3\u6784\u6c38\u8fdc\u53ea\u6709\u4e00\u4e2a\u3002 2 \u5176\u4ed6\u865a\u62df\u8bbe\u5907 \u5185\u6838\u9a71\u52a8\u6846\u67b6: \u603b\u7ebf struct bus_type \u3001 \u8bbe\u5907 struct device \u3001 \u9a71\u52a8 struct device_driver \u5f15\u53d1\u51fa\u5404\u79cd\u865a\u62df\u8bbe\u5907 struct platform_device \u3001 struct pci_device \u3001 struct phy_device 2 struct address_space \u548c vm_area_struct \u4e4b\u95f4\u7684\u5173\u7cfb \u4e00\u4e2a\u6587\u4ef6\u53ea\u80fd\u6709 \u4e00\u4e2a address_space \u6570\u636e\u7ed3\u6784, \u8868\u793a Page Cache \u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\uff08\u5047\u8bbe Page Cache \u662f\u6709\u591a\u4e2a\u5b9e\u4f8b\u7ec4\u6210, \u5206\u4e24\u5c42\u770b\uff0c\u4e0a\u5c42\u7684\u5355\u4e2a\u5b9e\u4f8b\u5c31\u662f\u4e00\u4e2a address_space \u5b9e\u4f8b\uff0c\u5e95\u5c42\u7684\u5355\u4e2a\u5b9e\u4f8b\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a struct page) struct address_space \u91cc\u6709\u4e00\u4e2a page_tree \u6210\u5458\uff0c\u662f\u6240\u6709 page \u7ec4\u5408\u6210\u7684\u4e00\u4e2a\u6811, \u5982\u4e0b\u56fe\u53f3\u4e0b\u89d2 \u4e00\u4e2a\u6587\u4ef6\u53ef\u80fd\u6709\u591a\u4e2a vm_area_struct \u4e09 \u5404\u7c7b\u98ce\u683c 1 \u63cf\u8ff0\u7b26 + operations \u98ce\u683c Linux \u5185\u6838\u603b\u662f\u5404\u79cd \u63cf\u8ff0\u7b26 + operations \u98ce\u683c . \u6bd4\u5982\u5185\u6838\u4e2d\u4e0d\u540c\u7684\u534f\u8bae\u662f\u4f7f\u7528 struct proto \u7ed3\u6784\u4f53\u8868\u793a\u7684, \u6bd4\u5982 tcp \u534f\u8bae\u662f\u4f7f\u7528 struct proto tcp_prot \u8868\u793a \u5bf9\u5e94\u534f\u8bae\u7684\u64cd\u4f5c\u80fd\u529b\u662f\u7528\u7ed3\u6784\u4f53 struct proto_ops \u8868\u793a, \u6bd4\u5982 tcp \u534f\u8bae\u7684\u4e00\u4e9b\u64cd\u4f5c\u662f\u7528 struct proto_ops inet_stream_ops \u7ed3\u6784\u4f53\u8868\u793a. \u6bd4\u5982\u7ecf\u5178\u7684 file + file_operations \u6bd4\u5982\u7ecf\u5178\u7684 platform_device + file_operations , net_device + net_device_ops 2 \u6846\u67b6\u98ce\u683c \u65b9\u4fbf\u6269\u5c55\u3001\u5c4f\u853d\u5e95\u5c42\u7ec6\u8282 2.1 \u5c4f\u853d\u5e95\u5c42\u7ec6\u8282 Linux \u5185\u6838\u603b\u662f\u4f7f\u7528\u6c47\u7f16\u8bed\u8a00\u6765\u62bd\u8c61\u4e0d\u540c CPU \u5e73\u53f0\u7ec6\u8282\uff0c\u7136\u540e\u771f\u6b63\u7684 \u4e3b\u903b\u8f91/\u4e3b\u6846\u67b6 \u4f7f\u7528 C \u8bed\u8a00\u5b9e\u73b0\u3002\u7136\u540e\u540e\u7eed\u65b0\u7684\u5e73\u53f0\u51fa\u73b0\u65f6\u5c31\u5fc5\u987b/\u53ea\u8981\u9075\u5b88 C \u8bed\u8a00\u5b9e\u73b0\u7684\u8fd9\u4e2a\u4e3b\u6846\u67b6\uff0c\u5373\u53ef\u52a0\u5165\u5bf9 Linux \u7684\u652f\u6301, \u65b9\u4fbf\u6269\u5c55. \u9a71\u52a8\u7a0b\u5e8f\u4e5f\u662f\u5982\u6b64, \u9996\u5148\u9700\u8981\u5b9e\u73b0\u7279\u5b9a\u4e8e\u786c\u4ef6\u7684\u51fd\u6570, \u7136\u540e\u5d4c\u5165\u5230\u5185\u6838\u4e8b\u5148\u5b9a\u4e49\u597d\u7684\u7ed3\u6784\u4f53\u4e2d. \u6bd4\u5982 struct napi_struct , \u5b9a\u4e49\u5728 include/linux/netdevice.h struct napi_struct { /* The poll_list must only be managed by the entity which * changes the state of the NAPI_STATE_SCHED bit. This means * whoever atomically sets that bit can add this napi_struct * to the per-CPU poll_list, and whoever clears that bit * can remove from the list right before clearing the bit. */ struct list_head poll_list; unsigned long state; int weight; int defer_hard_irqs_count; unsigned long gro_bitmask; int (*poll)(struct napi_struct *, int); #ifdef CONFIG_NETPOLL /* CPU actively polling if netpoll is configured */ int poll_owner; #endif /* CPU on which NAPI has been scheduled for processing */ int list_owner; struct net_device *dev; struct gro_list gro_hash[GRO_HASH_BUCKETS]; struct sk_buff *skb; struct list_head rx_list; /* Pending GRO_NORMAL skbs */ int rx_count; /* length of rx_list */ unsigned int napi_id; struct hrtimer timer; struct task_struct *thread; /* control-path-only fields follow */ struct list_head dev_list; struct hlist_node napi_hash_node; }; \u8fd9\u91cc\u7684 poll \u51fd\u6570\u5c31\u662f\u7279\u5b9a\u4e8e\u7f51\u5361\u786c\u4ef6\u7684. 2.2 \u5143\u7d20\u5916\u5305\u88c5, \u65b9\u4fbf\u6269\u5c55 Linux \u5185\u6838\u4e0d\u540c\u5b50\u7cfb\u7edf\u4e4b\u95f4\u603b\u662f\u7559\u6709\u4e00\u5c42\u6269\u5c55\u6027\uff0c\u6bd4\u5982 wait_queue \u7b49\u5f85\u961f\u5217\u91cc\u7684\u5143\u7d20\u662f wait_queue_t ,\u4ee3\u8868\u7b49\u5f85\u5b9e\u4f53, \u4f46\u5176\u5b9e\u5927\u90e8\u5206\u573a\u666f\u4e0b\u7b49\u5f85\u5b9e\u4f53\u90fd\u662f\u8fdb\u7a0b task_struct . \u6bd4\u5982\u8c03\u5ea6\u5668\u8c03\u5ea6\u7684\u4e5f\u662f\u8c03\u5ea6\u5b9e\u4f53\uff0c\u5176\u5b9e\u5927\u90e8\u5206\u573a\u666f\u8c03\u5ea6\u5b9e\u4f53\u90fd\u662f task_struct . 2.3 \u5185\u6838\u7684\u5b9e\u73b0\u7ecf\u5e38\u662f\u5206\u4e0a\u4e2d\u4e0b 3 \u5c42 \u7136\u540e\u7ed9\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u8ba9\u5b9e\u73b0\u8005\u586b\u5145 4 \u94fe\u8868\u548c\u6570\u7ec4\u7684\u533a\u522b \u94fe\u8868\u4e2d\u6bcf\u4e2a\u5143\u7d20\u53ef\u4ee5\u5206\u6563\u5728\u7269\u7406\u5185\u5b58\u7a7a\u95f4\u4e2d\uff0c\u4e0d\u4e00\u5b9a\u8981\u8fde\u7eed \u6570\u7ec4\u4e2d\u6240\u6709\u7684\u5143\u7d20\u90fd\u8bf4\u7d27\u6328\u7740\u7684\u3001\u8fde\u7eed\u7684\u3002\u5f53\u6570\u7ec4\u5927\u7684\u65f6\u5019\uff0c\u5c31\u4e0d\u4e00\u5b9a\u8981\u90a3\u4e48\u591a\u8fde\u7eed\u7684\u7269\u7406\u5185\u5b58\u3002 5 \u63cf\u8ff0\u7b26\u7eb5\u5411\u4f7f\u7528\u94fe\u8868\u5173\u8054\u6a2a\u5411\u4f7f\u7528\u6307\u9488\u5173\u8054 5.1 mm_struct \u548c vm_area_struct \u6bcf\u4e2a vm_area_struct \u662f\u4e00\u4e2a\u8fde\u7eed\u7684\u865a\u62df\u5730\u5740\u8303\u56f4 \uff0c\u8fd9\u4e9b\u533a\u57df\u4e0d\u4f1a\u4e92\u76f8\u91cd\u53e0\u3002 mm_struct \u91cc\u9762\u6709\u4e00\u4e2a\u5355\u94fe\u8868 mmap \uff0c\u7528\u4e8e\u5c06 \u6240\u6709 vm_area_struct \u4e32\u8054\u8d77\u6765\uff1b \u53e6\u5916\u8fd8\u6709\u4e00\u9897\u7ea2\u9ed1\u6811 mm_rb \uff0cvm_area_struct \u6839\u636e\u8d77\u59cb\u5730\u5740\u6302\u5728\u8fd9\u9897\u6811\u4e0a\u3002 \u4f7f\u7528\u7ea2\u9ed1\u6811\u53ef\u4ee5\u6839\u636e\u5730\u5740\uff0c\u5feb\u901f\u67e5\u627e\u4e00\u4e2a\u5185\u5b58\u533a\u57df\u3002 \u6bd4\u5982 mm_struct \u5173\u8054\u5230 vm_area_struct\uff0cvm_area_struct \u662f\u6709\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u7684\uff0c\u7136\u540e mm_struct \u4e2d \u53ea\u8981\u6709\u4e00\u4e2a\u6307\u9488\u6307\u5411\u94fe\u8868\u5934\u5143\u7d20\u5373\u53ef\u3002 \u5185\u6838\u4e2d\u5176\u5b9e\u662f\u901a\u8fc7\u4e00\u4e2a struct vm_area_struct \u7ed3\u6784\u7684\u53cc\u5411\u94fe\u8868\u5c06\u865a\u62df\u5185\u5b58\u7a7a\u95f4\u4e2d\u7684\u8fd9\u4e9b\u865a\u62df\u5185\u5b58\u533a\u57df VMA \u4e32\u8054\u8d77\u6765\u7684\u3002 vm_area_struct \u7ed3\u6784\u4e2d\u7684 vm_next \uff0cvm_prev \u6307\u9488\u5206\u522b\u6307\u5411 VMA \u8282\u70b9\u6240\u5728\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u540e\u7ee7\u8282\u70b9\u548c\u524d\u9a71\u8282\u70b9\uff0c\u5185\u6838\u4e2d\u7684\u8fd9\u4e2a VMA \u53cc\u5411\u94fe\u8868\u662f\u6709\u987a\u5e8f\u7684\uff0c\u6240\u6709 VMA \u8282\u70b9\u6309\u7167\u4f4e\u5730\u5740\u5230\u9ad8\u5730\u5740\u7684\u589e\u957f\u65b9\u5411\u6392\u5e8f\u3002 \u53cc\u5411\u94fe\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a VMA \u8282\u70b9\u7684 vm_next \u6307\u9488\u6307\u5411 NULL\uff0c\u53cc\u5411\u94fe\u8868\u7684\u5934\u6307\u9488\u5b58\u50a8\u5728\u5185\u5b58\u63cf\u8ff0\u7b26 struct mm_struct \u7ed3\u6784\u4e2d\u7684 mmap \u4e2d\uff0c\u6b63\u662f\u8fd9\u4e2a mmap \u4e32\u8054\u8d77\u4e86\u6574\u4e2a\u865a\u62df\u5185\u5b58\u7a7a\u95f4\u4e2d\u7684\u865a\u62df\u5185\u5b58\u533a\u57df\u3002 struct mm_struct { struct vm_area_struct *mmap; /* list of VMAs, \u53ea\u662f\u6307\u5411\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20 */ } \u5728\u6bcf\u4e2a\u865a\u62df\u5185\u5b58\u533a\u57df VMA \u4e2d\u53c8\u901a\u8fc7 struct vm_area_struct \u4e2d\u7684 vm_mm \u6307\u9488\u6307\u5411\u4e86\u6240\u5c5e\u7684\u865a\u62df\u5185\u5b58\u7a7a\u95f4 mm_struct\u3002 5.2 files_struct \u548c struct file files_struct \u4e2d\u6709\u6307\u9488\u6307\u5411\u4e00\u4e2a file \u6570\u7ec4, \u5982\u4e0b\u56fe\u6240\u793a 5.3 \u6307\u9488\u6307\u5411\u94fe\u8868\u548c\u6570\u7ec4\u65f6\uff0c\u90fd\u53ea\u9700\u8981\u6307\u5411\u5176\u5934\u4e00\u4e2a\u5143\u7d20 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u7ed3\u6784\u4f53\u548c\u7ed3\u6784\u4f53\u4e92\u76f8\u5173\u8054\u7684\u65f6\u5019, \u90fd\u53ea\u9700\u8981\u52a0\u4e00\u4e2a\u6307\u9488\uff0c\u8be5\u6307\u9488\u662f\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u6307\u9488. \u6307\u8fc7\u53bb\u4e4b\u540e\u81ea\u7136\u80fd\u591f\u627e\u5230\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u7ec4\u6210\u7684\u94fe\u8868\u6216\u8005\u6570\u7ec4 \u4e3e\u4f8b\u5b50\u6765\u8bf4, \u4e0a\u9762\u63d0\u5230\u7684\u5185\u5b58\u63cf\u8ff0\u7b26 mm_struct, \u9700\u8981\u627e\u5230\u6240\u6709 vm_area_struct \u94fe\u8868\u65f6\uff0c\u5b83\u7684\u505a\u6cd5\u662f mm_struct \u5185\u6709\u4e00\u4e2a\u6210\u5458\u6307\u5411\u8be5\u94fe\u8868\uff0c\u8fd9\u4e2a\u6210\u5458\u5b9e\u9645\u5b9e\u73b0\u65f6\u662f\u6307\u5411 vm_area_struct \u94fe\u8868\u7684\u5934\u5143\u7d20. \u8fd8\u6709\u5e95\u5c42\u7684\u7269\u7406\u9875\u5e27\u662f\u7528\u6570\u7ec4\u7ba1\u7406\u7684(\u56e0\u4e3a\u5728\u540c\u4e00\u4e2a NUMA Node \u8282\u70b9\u5185\u7684\u6240\u6709\u7269\u7406\u5185\u5b58\u90fd\u662f\u8fde\u7eed\u7684), \u5728\u5185\u6838\u6570\u636e\u7ed3\u6784\u8868\u793a\u65f6 node \u8282\u70b9\u5185\u6709\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5176\u6240\u6709 page \u7ec4\u6210\u7684\u6570\u7ec4, \u5b9e\u9645\u5b9e\u73b0\u65f6\u4e5f\u662f\u6307\u5411\u8be5\u6570\u7ec4\u7684\u5934\u5143\u7d20. \u56db \u5404\u79cd\u6ce8\u518c\u6280\u80fd 1 \u8f6f\u4e2d\u65ad\u6ce8\u518c\u5230\u4e00\u4e2a\u6570\u7ec4 open_softirq \u662f\u6ce8\u518c\u5230 softirq_vec \u6570\u7ec4\u91cc\u7684 \u4f7f\u7528\u65b9\u5f0f open_softirq(NET_TX_SOFTIRQ, net_tx_action); open_softirq(NET_RX_SOFTIRQ, net_rx_action); \u5b9a\u4e49 kernel/softirq.c void open_softirq(int nr, void (*action)(struct softirq_action *)) { softirq_vec[nr].action = action; } 2 \u6587\u4ef6\u7cfb\u7edf type \u662f\u6ce8\u518c\u5230\u94fe\u8868 register_filesystem(&dev_fs_type); //\u6ce8\u518c dev_fs_type \u6587\u4ef6\u7cfb\u7edf\uff0c\u5373\u5c06 dev_fs_type \u6dfb\u52a0\u5230\u5185\u6838\u5168\u5c40\u603b\u94fe\u8868\u4e2d file_systems /** * register_filesystem - register a new filesystem * @fs: the file system structure * * Adds the file system passed to the list of file systems the kernel * is aware of for mount and other syscalls. Returns 0 on success, * or a negative errno code on an error. * * The &struct file_system_type that is passed is linked into the kernel * structures and must not be freed until the file system has been * unregistered. */ int register_filesystem(struct file_system_type * fs) { int res = 0; struct file_system_type ** p; if (fs->parameters && !fs_validate_description(fs->name, fs->parameters)) return -EINVAL; BUG_ON(strchr(fs->name, '.')); if (fs->next) return -EBUSY; write_lock(&file_systems_lock); p = find_filesystem(fs->name, strlen(fs->name)); if (*p) res = -EBUSY; else *p = fs; write_unlock(&file_systems_lock); return res; } 3 \u591a\u4e2a NUMA Node \u4f7f\u7528\u94fe\u8868\u76f8\u8fde \u5728\u5185\u6838\u4e2d\u4f7f\u7528 struct pg_data_t \u8868\u793a\u4e00\u4e2a NUMA Node, \u5bf9\u4e8e UMA \u67b6\u6784 \u5176\u5b9e\u76f8\u5f53\u4e8e\u53ea\u6709\u4e00\u4e2a Node, \u5bf9\u4e8e NUMA \u67b6\u6784\u76f8\u5f53\u4e8e\u6709\u591a\u4e2a Node, \u591a\u4e2a Node \u5f62\u6210\u4e00\u4e2a\u94fe\u8868. \u4e94 \u5404\u79cd\u5e38\u7528\u7684\u5b8f 1 current \u5b8f \u5185\u6838\u4ee3\u7801\u4e2d\uff0ccurrent \u603b\u662f\u6307\u5411\u5f53\u524d\u7684\u8fdb\u7a0b\u7684 task_struct 2 container_of \u5b8f \u662f\u4e00\u4e2a\u5728 Linux \u5185\u6838\u4e2d\u5e38\u7528\u7684\u5b8f\uff0c\u901a\u8fc7\u7ed3\u6784\u4f53\u7684\u67d0\u4e2a \u6210\u5458\u53d8\u91cf\u5730\u5740 \u627e\u5230 \u8be5\u7ed3\u6784\u4f53\u7684\u9996\u5730\u5740 \u4f8b\u5982\u4e0b\u9762\u901a\u8fc7 inode \u7ed3\u6784\u4f53\u83b7\u53d6\u5bf9\u5e94\u7684 cdev \u7ed3\u6784\u4f53, \u7136\u540e\u5c06 file \u7ed3\u6784\u4f53\u7684 private_data \u6210\u5458\u8d4b\u503c\u7ed9\u5b83, \u662f\u4e00\u4e2a\u5178\u578b\u7684 open \u64cd\u4f5c\u7684\u5b9e\u73b0\u65b9\u6cd5. cd = container_of(inode->i_cdev,struct mycdev,cdev); file->private_data = cd; 3 INIT_LIST_HEAD \u7528\u4e8e\u5728\u8fd0\u884c\u65f6\u521d\u59cb\u5316\u4e00\u4e2a\u94fe\u8868 INIT_LIST_HEAD(ptr) \u8fd9\u4e2a\u5b8f\u901a\u5e38\u7528\u4e8e\u5728\u8fd0\u884c\u65f6\u521d\u59cb\u5316\u4e00\u4e2a\u94fe\u8868 4 PFN \u548c\u7269\u7406\u9875\u7ed3\u6784\u4f53 struct page \u4e4b\u95f4\u7684\u76f8\u4e92\u8f6c\u6362\u7684\u5b8f \u5185\u6838\u63d0\u4f9b\u4e86\u4e24\u4e2a\u5b8f\u6765\u5b8c\u6210 PFN \u4e0e \u7269\u7406\u9875\u7ed3\u6784\u4f53 struct page \u4e4b\u95f4\u7684\u76f8\u4e92\u8f6c\u6362\u3002\u5b83\u4eec\u5206\u522b\u662f page_to_pfn \u4e0e pfn_to_page \u516d \u5404\u7c7b\u6709\u610f\u601d\u95ee\u9898 1 \u4e3a\u4ec0\u4e48\u5185\u6838\u4ee3\u7801\u4e2d\u5f88\u591a\u8fd4\u56de\u503c\u90fd\u90fd\u8981\u52a0\u4e2a\u8d1f\u53f7 \u6bd4\u5982 page = __get_free_pages(GFP_KERNEL,3); if (!page){ /*\u6ca1\u6709\u8db3\u591f\u7684\u5185\u5b58\uff1a\u4f60\u5fc5\u987b\u5904\u7406\u8fd9\u79cd\u9519\u8bef\uff01*/ return -ENOMEM; } static int fs_name(unsigned int index, char __user * buf) { struct file_system_type * tmp; int len, res; read_lock(&file_systems_lock); for (tmp = file_systems; tmp; tmp = tmp->next, index--) if (index <= 0 && try_module_get(tmp->owner)) break; read_unlock(&file_systems_lock); if (!tmp) return -EINVAL; /* OK, we got the reference, so we can safely block */ len = strlen(tmp->name) + 1; res = copy_to_user(buf, tmp->name, len) ? -EFAULT : 0; put_filesystem(tmp); return res; } A \u5982\u4f55\u7406\u89e3\u51fd\u6570\u8fd4\u56de\u6307\u9488 \u5185\u6838\u4e2d\u7684\u51fd\u6570\u901a\u5e38\u4ee5\u8fd4\u56de\u6307\u9488\u7684\u5f62\u5f0f\u6765\u4f20\u9012\u8c03\u7528\u51fd\u6570\u540e\u6267\u884c\u7684\u7ed3\u679c\uff0c\u8fd4\u56de\u503c\u6307\u9488\u6709\u4e09\u79cd\u7ed3\u679c\uff1a \uff081\uff09\u8c03\u7528\u6210\u529f\u5219\u8fd4\u56de\u4e00\u4e2a\u6709\u6548\u6307\u9488 \uff082\uff09\u8c03\u7528\u5931\u8d25\u8fd4\u56de NULL\uff0c\u4f8b\u5982 malloc\u3001kmalloc\u3001vmalloc \uff083\uff09\u8c03\u7528\u5931\u8d25\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\u6307\u9488\uff08\u65e0\u6548\u6307\u9488\uff09 \u6211\u4eec\u5c31\u662f\u901a\u8fc7\u8fd9\u4e2a\u9519\u8bef\u6307\u9488\u6765\u4f20\u9012\u6709\u5173\u9519\u8bef\u7684\u4fe1\u606f\u3002","title":"\u7b2c\u4e09\u7bc7 Linux\u5185\u6838API\u6c47\u603b\u548c\u5404\u7c7b\u98ce\u683c\u603b\u7ed3"},{"location":"chapter_14/3_linux_kernel_api_list/#_1","text":"\u672c\u7bc7\u68b3\u7406 Linux \u5185\u6838 API","title":"\u6982\u8ff0"},{"location":"chapter_14/3_linux_kernel_api_list/#api","text":"","title":"\u4e00 \u5404\u79cd\u77e5\u540d API"},{"location":"chapter_14/3_linux_kernel_api_list/#1-register_chrdev","text":"\u4f5c\u7528: \u51fd\u6570 register_chrdev()\u8c03\u7528\u51fd\u6570 register_chrdev()\u5b9e\u73b0\u5176\u529f\u80fd\uff0c\u51fd\u6570 register_chrdev()\u9996\u5148\u8c03\u7528\u51fd\u6570__register_chrdev_region()\u521b\u5efa\u4e00\u4e2a\u5b57\u7b26\u8bbe\u5907\u533a\uff0c\u6b64\u8bbe\u5907\u533a\u7684\u4e3b\u8bbe\u5907\u53f7\u76f8\u540c\uff0c\u7531\u51fd\u6570 register_chrdev()\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u51b3\u5b9a\uff0c\u6b21\u8bbe\u5907\u53f7\u7684\u53d8\u5316\u8303\u56f4\u662f 0 \uff5e 256\uff0c\u8bbe\u5907\u533a\u7684\u540d\u5b57\u4e3a\u51fd\u6570 register_chrdev()\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u6b64\u51fd\u6570\u5c06\u66f4\u6539/proc/devices \u6587\u4ef6\u7684\u5185\u5bb9\uff1b\u7136\u540e\u52a8\u6001\u7533\u8bf7\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u8bbe\u5907 cdev \u7ed3\u6784\u4f53\u53d8\u91cf\uff0c\u5bf9\u5176\u90e8\u5206\u5b57\u6bb5\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u521d\u59cb\u5316\u5b8c\u6210\u4e4b\u540e\u5c06\u5176\u52a0\u5165 Linux \u5185\u6838\u7cfb\u7edf\u4e2d\uff0c\u5373\u5411 Linux \u5185\u6838\u7cfb\u7edf\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u8bbe\u5907\u3002\u51fd\u6570 register_chrdev()\u8c03\u7528\u51fd\u6570 cdev_alloc()\u52a8\u6001\u7533\u8bf7\u4e00\u4e2a\u5b57\u7b26\u8bbe\u5907\uff0c\u8c03\u7528\u51fd\u6570 cdev_add()\u5c06\u5176\u52a0\u5165 Linux \u5185\u6838\u7cfb\u7edf\u4e2d\u3002 register_chrdev \u51fd\u6570\u5b9a\u4e49 : \u5728\u5185\u6838\u6e90\u7801\u4e2d\u7684\u4f4d\u7f6e\uff1alinux-3.19.3/include/linux/fs.h \u51fd\u6570\u5b9a\u4e49\u683c\u5f0f\uff1a static inline int register_chrdev(unsigned int major, const char *name, const struct file_operations *fops) { return __register_chrdev(major, 0, 256, name, fops); } register_chrdev \u8f93\u5165\u53c2\u6570\u8bf4\u660e \u51fd\u6570 register_chrdev()\u6709\u4e09\u4e2a\u8f93\u5165\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u8f93\u5165\u53c2\u6570\u662f unsigned int \u578b\u7684\u53d8\u91cf\uff0c\u4ee3\u8868\u52a8\u6001\u7533\u8bf7\u5b57\u7b26\u8bbe\u5907\u7684\u4e3b\u8bbe\u5907\u53f7\uff0c\u5bf9\u4e8e\u6b64\u8bbe\u5907\u53f7\u51fd\u6570\u81ea\u52a8\u8d4b\u503c\u4e3a 0\u3002 \u7b2c\u4e8c\u4e2a\u8f93\u5165\u53c2\u6570\u662f char \u578b\u7684\u6307\u9488\uff0c\u4ee3\u8868\u7533\u8bf7\u8bbe\u5907\u7684\u8bbe\u5907\u540d\u3002 \u7b2c\u4e09\u4e2a\u8f93\u5165\u53c2\u6570\u662f struct file_operations \u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u6307\u9488\uff0c\u4ee3\u8868\u7533\u8bf7\u8bbe\u5907\u7684\u64cd\u4f5c\u51fd\u6570\uff0c\u901a\u8fc7\u6b64\u7ed3\u6784\u4f53\u5305\u542b\u7684\u51fd\u6570\u5b8c\u6210\u5bf9\u8bbe\u5907\u7684\u8bbf\u95ee\u53ca\u63a7\u5236\u64cd\u4f5c register_chrdev \u4f7f\u7528\u6848\u4f8b: major = register_chrdev(0, \"hello\", &hello_drv); /* /dev/hello */","title":"1 register_chrdev()"},{"location":"chapter_14/3_linux_kernel_api_list/#2","text":"kmem_cache_create() \u6bd4\u5982 bdev_cachep = kmem_cache_create(\"bdev_cache\", sizeof(struct bdev_inode), 0, (SLAB_HWCACHE_ALIGN|SLAB_RECLAIM_ACCOUNT| SLAB_MEM_SPREAD|SLAB_ACCOUNT|SLAB_PANIC), init_once);","title":"2 \u5185\u6838\u9ad8\u901f\u7f13\u5b58"},{"location":"chapter_14/3_linux_kernel_api_list/#3","text":"","title":"3 \u5173\u95ed\u4e2d\u65ad\u548c\u6253\u5f00\u4e2d\u65ad"},{"location":"chapter_14/3_linux_kernel_api_list/#31","text":"\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u4e24\u4e2a\u51fd\u6570\u4e2d\u7684\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a \u5173\u95ed\u5f53\u524d\u5904\u7406\u5668\u4e0a\u7684\u6240\u6709\u4e2d\u65ad\u5904\u7406\uff0c \u8fd9\u4e24\u4e2a\u51fd\u6570\u5b9a\u4e49\u5728 <asm/system.h> \u4e2d: void local_irq_save(unsigned long flags); void local_irq_disable(void); local_irq_save \u7684\u8c03\u7528\u628a\u5f53\u524d\u7684\u4e2d\u65ad\u72b6\u6001\uff08\u5f00\u6216\u5173\uff09\u4fdd\u5b58\u5230 flags \u4e2d\uff0c\u7136\u540e\u7981\u7528\u5f53\u524d\u5904\u7406\u5668\u4e0a\u7684\u4e2d\u65ad\u3002 local_irq_disable \u4e0d\u4fdd\u5b58\u72b6\u6001\u800c\u5173\u95ed\u672c\u5730\u5904\u7406\u5668\u4e0a\u7684\u4e2d\u65ad\u53d1\u9001; \u53ea\u6709\u6211\u4eec\u77e5\u9053\u4e2d\u65ad\u5e76\u672a\u5728\u5176\u4ed6\u5730\u65b9\u88ab\u7981\u7528\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u80fd\u4f7f\u7528\u8fd9\u4e2a\u7248\u672c\u3002","title":"3.1 \u5173\u4e2d\u65ad"},{"location":"chapter_14/3_linux_kernel_api_list/#31_1","text":"\u53ef\u901a\u8fc7\u5982\u4e0b\u51fd\u6570\u6253\u5f00\u4e2d\u65ad: void local_irq_restore(unsigned long flags); void local_irq_enable(void); local_irq_restore \u5c06 \u4fdd\u5b58\u7684 flags \u72b6\u6001\u503c\u6062\u590d\uff08\u5373 local_irq_save \u7684\u5165\u53c2 flag \uff09, \u6062\u590d\u4e4b\u524d\u7684\u72b6\u6001\uff08\u5f00\u6216\u5173\uff09\u3002 local_irq_enable \u5219\u65e0\u6761\u4ef6\u6253\u5f00\u4e2d\u65ad\u3002 local_irq_save \u548c local_irq_restore \u4f1a\u66f4\u5b89\u5168\u3002 \u6ca1\u6709\u65b9\u6cd5\u5168\u5c40\u7981\u7528\u6574\u4e2a\u7cfb\u7edf\u7684\u6240\u6709\u4e2d\u65ad\u3002 \u5185\u6838\u5f00\u53d1\u8005\u8ba4\u4e3a\u5173\u95ed\u6240\u6709\u4e2d\u65ad\u7684\u4ee3\u4ef7\u592a\u9ad8\uff0c\u56e0\u6b64\u6ca1\u6709\u5fc5\u8981\u63d0\u4f9b\u8fd9\u4e2a\u80fd\u529b\u3002","title":"3.1 \u5f00\u4e2d\u65ad"},{"location":"chapter_14/3_linux_kernel_api_list/#4-cpu","text":"struct softnet_data *sd = &__get_cpu_var(softnet_data) __napi_schedule \u51fd\u6570 void __napi_schedule(struct napi_struct *n) { unsigned long flags; local_irq_save(flags); ____napi_schedule(&__get_cpu_var(softnet_data), n); local_irq_restore(flags); }","title":"4 \u83b7\u53d6\u5355 CPU \u53d8\u91cf"},{"location":"chapter_14/3_linux_kernel_api_list/#struct","text":"","title":"\u4e8c \u5404\u79cd\u77e5\u540d struct"},{"location":"chapter_14/3_linux_kernel_api_list/#1-3","text":"\u5b57\u7b26\u8bbe\u5907 struct cdev \u5757\u8bbe\u5907 struct block_device \u7f51\u7edc\u8bbe\u5907 struct net_device \u4ece\u4ee3\u7801\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6574\u4e2a\u8def\u5f84\u5305\u542b\u7684\u8fc7\u7a0b\u57fa\u672c\u53ef\u4ee5\u6982\u62ec\u4e3a: \u865a\u62df\u6587\u4ef6\u7cfb\u7edf-->\u5757\u8bbe\u5907\u5b9e\u9645\u6587\u4ef6\u7cfb\u7edf-->\u901a\u7528\u5757\u5c42-->I/O scheduler-->\u5757\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f \u63cf\u8ff0\u5757\u8bbe\u5907\u7684\u6570\u636e\u7ed3\u6784\u6709\u4e24\u4e2a\uff0c\u4e00\u4e2a\u662f struct block_device ,\u7528\u6765\u63cf\u8ff0\u4e00\u4e2a\u5757\u8bbe\u5907\u6216\u8005\u5757\u8bbe\u5907\u7684\u4e00\u4e2a\u5206\u533a\uff1b \u53e6\u4e00\u4e2a\u662f struct gendisk \uff0c\u7528\u6765\u63cf\u8ff0\u6574\u4e2a\u5757\u8bbe\u5907\u7684\u7279\u6027\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u5305\u542b\u591a\u4e2a\u5206\u533a\u7684\u5757\u8bbe\u5907\uff0cstruct block_device \u7ed3\u6784\u6709\u591a\u4e2a,\u6bcf\u4e2a\u5206\u533a\u4e00\u4e2a block_device, \u6574\u4e2a\u8bbe\u5907\u4e5f\u5bf9\u5e94\u4e00\u4e2a block_device,\u800c struct gendisk \u7ed3\u6784\u6c38\u8fdc\u53ea\u6709\u4e00\u4e2a\u3002","title":"1 \u5185\u6838\u5c42 3 \u79cd\u5b9e\u9645\u8bbe\u5907"},{"location":"chapter_14/3_linux_kernel_api_list/#2_1","text":"\u5185\u6838\u9a71\u52a8\u6846\u67b6: \u603b\u7ebf struct bus_type \u3001 \u8bbe\u5907 struct device \u3001 \u9a71\u52a8 struct device_driver \u5f15\u53d1\u51fa\u5404\u79cd\u865a\u62df\u8bbe\u5907 struct platform_device \u3001 struct pci_device \u3001 struct phy_device","title":"2 \u5176\u4ed6\u865a\u62df\u8bbe\u5907"},{"location":"chapter_14/3_linux_kernel_api_list/#2-struct-address_space-vm_area_struct","text":"\u4e00\u4e2a\u6587\u4ef6\u53ea\u80fd\u6709 \u4e00\u4e2a address_space \u6570\u636e\u7ed3\u6784, \u8868\u793a Page Cache \u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\uff08\u5047\u8bbe Page Cache \u662f\u6709\u591a\u4e2a\u5b9e\u4f8b\u7ec4\u6210, \u5206\u4e24\u5c42\u770b\uff0c\u4e0a\u5c42\u7684\u5355\u4e2a\u5b9e\u4f8b\u5c31\u662f\u4e00\u4e2a address_space \u5b9e\u4f8b\uff0c\u5e95\u5c42\u7684\u5355\u4e2a\u5b9e\u4f8b\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a struct page) struct address_space \u91cc\u6709\u4e00\u4e2a page_tree \u6210\u5458\uff0c\u662f\u6240\u6709 page \u7ec4\u5408\u6210\u7684\u4e00\u4e2a\u6811, \u5982\u4e0b\u56fe\u53f3\u4e0b\u89d2 \u4e00\u4e2a\u6587\u4ef6\u53ef\u80fd\u6709\u591a\u4e2a vm_area_struct","title":"2 struct address_space \u548c vm_area_struct \u4e4b\u95f4\u7684\u5173\u7cfb"},{"location":"chapter_14/3_linux_kernel_api_list/#_2","text":"","title":"\u4e09 \u5404\u7c7b\u98ce\u683c"},{"location":"chapter_14/3_linux_kernel_api_list/#1-operations","text":"Linux \u5185\u6838\u603b\u662f\u5404\u79cd \u63cf\u8ff0\u7b26 + operations \u98ce\u683c . \u6bd4\u5982\u5185\u6838\u4e2d\u4e0d\u540c\u7684\u534f\u8bae\u662f\u4f7f\u7528 struct proto \u7ed3\u6784\u4f53\u8868\u793a\u7684, \u6bd4\u5982 tcp \u534f\u8bae\u662f\u4f7f\u7528 struct proto tcp_prot \u8868\u793a \u5bf9\u5e94\u534f\u8bae\u7684\u64cd\u4f5c\u80fd\u529b\u662f\u7528\u7ed3\u6784\u4f53 struct proto_ops \u8868\u793a, \u6bd4\u5982 tcp \u534f\u8bae\u7684\u4e00\u4e9b\u64cd\u4f5c\u662f\u7528 struct proto_ops inet_stream_ops \u7ed3\u6784\u4f53\u8868\u793a. \u6bd4\u5982\u7ecf\u5178\u7684 file + file_operations \u6bd4\u5982\u7ecf\u5178\u7684 platform_device + file_operations , net_device + net_device_ops","title":"1 \u63cf\u8ff0\u7b26 + operations \u98ce\u683c"},{"location":"chapter_14/3_linux_kernel_api_list/#2_2","text":"","title":"2 \u6846\u67b6\u98ce\u683c \u65b9\u4fbf\u6269\u5c55\u3001\u5c4f\u853d\u5e95\u5c42\u7ec6\u8282"},{"location":"chapter_14/3_linux_kernel_api_list/#21","text":"Linux \u5185\u6838\u603b\u662f\u4f7f\u7528\u6c47\u7f16\u8bed\u8a00\u6765\u62bd\u8c61\u4e0d\u540c CPU \u5e73\u53f0\u7ec6\u8282\uff0c\u7136\u540e\u771f\u6b63\u7684 \u4e3b\u903b\u8f91/\u4e3b\u6846\u67b6 \u4f7f\u7528 C \u8bed\u8a00\u5b9e\u73b0\u3002\u7136\u540e\u540e\u7eed\u65b0\u7684\u5e73\u53f0\u51fa\u73b0\u65f6\u5c31\u5fc5\u987b/\u53ea\u8981\u9075\u5b88 C \u8bed\u8a00\u5b9e\u73b0\u7684\u8fd9\u4e2a\u4e3b\u6846\u67b6\uff0c\u5373\u53ef\u52a0\u5165\u5bf9 Linux \u7684\u652f\u6301, \u65b9\u4fbf\u6269\u5c55. \u9a71\u52a8\u7a0b\u5e8f\u4e5f\u662f\u5982\u6b64, \u9996\u5148\u9700\u8981\u5b9e\u73b0\u7279\u5b9a\u4e8e\u786c\u4ef6\u7684\u51fd\u6570, \u7136\u540e\u5d4c\u5165\u5230\u5185\u6838\u4e8b\u5148\u5b9a\u4e49\u597d\u7684\u7ed3\u6784\u4f53\u4e2d. \u6bd4\u5982 struct napi_struct , \u5b9a\u4e49\u5728 include/linux/netdevice.h struct napi_struct { /* The poll_list must only be managed by the entity which * changes the state of the NAPI_STATE_SCHED bit. This means * whoever atomically sets that bit can add this napi_struct * to the per-CPU poll_list, and whoever clears that bit * can remove from the list right before clearing the bit. */ struct list_head poll_list; unsigned long state; int weight; int defer_hard_irqs_count; unsigned long gro_bitmask; int (*poll)(struct napi_struct *, int); #ifdef CONFIG_NETPOLL /* CPU actively polling if netpoll is configured */ int poll_owner; #endif /* CPU on which NAPI has been scheduled for processing */ int list_owner; struct net_device *dev; struct gro_list gro_hash[GRO_HASH_BUCKETS]; struct sk_buff *skb; struct list_head rx_list; /* Pending GRO_NORMAL skbs */ int rx_count; /* length of rx_list */ unsigned int napi_id; struct hrtimer timer; struct task_struct *thread; /* control-path-only fields follow */ struct list_head dev_list; struct hlist_node napi_hash_node; }; \u8fd9\u91cc\u7684 poll \u51fd\u6570\u5c31\u662f\u7279\u5b9a\u4e8e\u7f51\u5361\u786c\u4ef6\u7684.","title":"2.1 \u5c4f\u853d\u5e95\u5c42\u7ec6\u8282"},{"location":"chapter_14/3_linux_kernel_api_list/#22","text":"Linux \u5185\u6838\u4e0d\u540c\u5b50\u7cfb\u7edf\u4e4b\u95f4\u603b\u662f\u7559\u6709\u4e00\u5c42\u6269\u5c55\u6027\uff0c\u6bd4\u5982 wait_queue \u7b49\u5f85\u961f\u5217\u91cc\u7684\u5143\u7d20\u662f wait_queue_t ,\u4ee3\u8868\u7b49\u5f85\u5b9e\u4f53, \u4f46\u5176\u5b9e\u5927\u90e8\u5206\u573a\u666f\u4e0b\u7b49\u5f85\u5b9e\u4f53\u90fd\u662f\u8fdb\u7a0b task_struct . \u6bd4\u5982\u8c03\u5ea6\u5668\u8c03\u5ea6\u7684\u4e5f\u662f\u8c03\u5ea6\u5b9e\u4f53\uff0c\u5176\u5b9e\u5927\u90e8\u5206\u573a\u666f\u8c03\u5ea6\u5b9e\u4f53\u90fd\u662f task_struct .","title":"2.2 \u5143\u7d20\u5916\u5305\u88c5, \u65b9\u4fbf\u6269\u5c55"},{"location":"chapter_14/3_linux_kernel_api_list/#23-3","text":"\u7136\u540e\u7ed9\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u8ba9\u5b9e\u73b0\u8005\u586b\u5145","title":"2.3 \u5185\u6838\u7684\u5b9e\u73b0\u7ecf\u5e38\u662f\u5206\u4e0a\u4e2d\u4e0b 3 \u5c42"},{"location":"chapter_14/3_linux_kernel_api_list/#4","text":"\u94fe\u8868\u4e2d\u6bcf\u4e2a\u5143\u7d20\u53ef\u4ee5\u5206\u6563\u5728\u7269\u7406\u5185\u5b58\u7a7a\u95f4\u4e2d\uff0c\u4e0d\u4e00\u5b9a\u8981\u8fde\u7eed \u6570\u7ec4\u4e2d\u6240\u6709\u7684\u5143\u7d20\u90fd\u8bf4\u7d27\u6328\u7740\u7684\u3001\u8fde\u7eed\u7684\u3002\u5f53\u6570\u7ec4\u5927\u7684\u65f6\u5019\uff0c\u5c31\u4e0d\u4e00\u5b9a\u8981\u90a3\u4e48\u591a\u8fde\u7eed\u7684\u7269\u7406\u5185\u5b58\u3002","title":"4 \u94fe\u8868\u548c\u6570\u7ec4\u7684\u533a\u522b"},{"location":"chapter_14/3_linux_kernel_api_list/#5","text":"","title":"5 \u63cf\u8ff0\u7b26\u7eb5\u5411\u4f7f\u7528\u94fe\u8868\u5173\u8054\u6a2a\u5411\u4f7f\u7528\u6307\u9488\u5173\u8054"},{"location":"chapter_14/3_linux_kernel_api_list/#51-mm_struct-vm_area_struct","text":"\u6bcf\u4e2a vm_area_struct \u662f\u4e00\u4e2a\u8fde\u7eed\u7684\u865a\u62df\u5730\u5740\u8303\u56f4 \uff0c\u8fd9\u4e9b\u533a\u57df\u4e0d\u4f1a\u4e92\u76f8\u91cd\u53e0\u3002 mm_struct \u91cc\u9762\u6709\u4e00\u4e2a\u5355\u94fe\u8868 mmap \uff0c\u7528\u4e8e\u5c06 \u6240\u6709 vm_area_struct \u4e32\u8054\u8d77\u6765\uff1b \u53e6\u5916\u8fd8\u6709\u4e00\u9897\u7ea2\u9ed1\u6811 mm_rb \uff0cvm_area_struct \u6839\u636e\u8d77\u59cb\u5730\u5740\u6302\u5728\u8fd9\u9897\u6811\u4e0a\u3002 \u4f7f\u7528\u7ea2\u9ed1\u6811\u53ef\u4ee5\u6839\u636e\u5730\u5740\uff0c\u5feb\u901f\u67e5\u627e\u4e00\u4e2a\u5185\u5b58\u533a\u57df\u3002 \u6bd4\u5982 mm_struct \u5173\u8054\u5230 vm_area_struct\uff0cvm_area_struct \u662f\u6709\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u7684\uff0c\u7136\u540e mm_struct \u4e2d \u53ea\u8981\u6709\u4e00\u4e2a\u6307\u9488\u6307\u5411\u94fe\u8868\u5934\u5143\u7d20\u5373\u53ef\u3002 \u5185\u6838\u4e2d\u5176\u5b9e\u662f\u901a\u8fc7\u4e00\u4e2a struct vm_area_struct \u7ed3\u6784\u7684\u53cc\u5411\u94fe\u8868\u5c06\u865a\u62df\u5185\u5b58\u7a7a\u95f4\u4e2d\u7684\u8fd9\u4e9b\u865a\u62df\u5185\u5b58\u533a\u57df VMA \u4e32\u8054\u8d77\u6765\u7684\u3002 vm_area_struct \u7ed3\u6784\u4e2d\u7684 vm_next \uff0cvm_prev \u6307\u9488\u5206\u522b\u6307\u5411 VMA \u8282\u70b9\u6240\u5728\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u540e\u7ee7\u8282\u70b9\u548c\u524d\u9a71\u8282\u70b9\uff0c\u5185\u6838\u4e2d\u7684\u8fd9\u4e2a VMA \u53cc\u5411\u94fe\u8868\u662f\u6709\u987a\u5e8f\u7684\uff0c\u6240\u6709 VMA \u8282\u70b9\u6309\u7167\u4f4e\u5730\u5740\u5230\u9ad8\u5730\u5740\u7684\u589e\u957f\u65b9\u5411\u6392\u5e8f\u3002 \u53cc\u5411\u94fe\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a VMA \u8282\u70b9\u7684 vm_next \u6307\u9488\u6307\u5411 NULL\uff0c\u53cc\u5411\u94fe\u8868\u7684\u5934\u6307\u9488\u5b58\u50a8\u5728\u5185\u5b58\u63cf\u8ff0\u7b26 struct mm_struct \u7ed3\u6784\u4e2d\u7684 mmap \u4e2d\uff0c\u6b63\u662f\u8fd9\u4e2a mmap \u4e32\u8054\u8d77\u4e86\u6574\u4e2a\u865a\u62df\u5185\u5b58\u7a7a\u95f4\u4e2d\u7684\u865a\u62df\u5185\u5b58\u533a\u57df\u3002 struct mm_struct { struct vm_area_struct *mmap; /* list of VMAs, \u53ea\u662f\u6307\u5411\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20 */ } \u5728\u6bcf\u4e2a\u865a\u62df\u5185\u5b58\u533a\u57df VMA \u4e2d\u53c8\u901a\u8fc7 struct vm_area_struct \u4e2d\u7684 vm_mm \u6307\u9488\u6307\u5411\u4e86\u6240\u5c5e\u7684\u865a\u62df\u5185\u5b58\u7a7a\u95f4 mm_struct\u3002","title":"5.1 mm_struct \u548c vm_area_struct"},{"location":"chapter_14/3_linux_kernel_api_list/#52-files_struct-struct-file","text":"files_struct \u4e2d\u6709\u6307\u9488\u6307\u5411\u4e00\u4e2a file \u6570\u7ec4, \u5982\u4e0b\u56fe\u6240\u793a","title":"5.2 files_struct \u548c struct file"},{"location":"chapter_14/3_linux_kernel_api_list/#53","text":"\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u7ed3\u6784\u4f53\u548c\u7ed3\u6784\u4f53\u4e92\u76f8\u5173\u8054\u7684\u65f6\u5019, \u90fd\u53ea\u9700\u8981\u52a0\u4e00\u4e2a\u6307\u9488\uff0c\u8be5\u6307\u9488\u662f\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u6307\u9488. \u6307\u8fc7\u53bb\u4e4b\u540e\u81ea\u7136\u80fd\u591f\u627e\u5230\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u7ec4\u6210\u7684\u94fe\u8868\u6216\u8005\u6570\u7ec4 \u4e3e\u4f8b\u5b50\u6765\u8bf4, \u4e0a\u9762\u63d0\u5230\u7684\u5185\u5b58\u63cf\u8ff0\u7b26 mm_struct, \u9700\u8981\u627e\u5230\u6240\u6709 vm_area_struct \u94fe\u8868\u65f6\uff0c\u5b83\u7684\u505a\u6cd5\u662f mm_struct \u5185\u6709\u4e00\u4e2a\u6210\u5458\u6307\u5411\u8be5\u94fe\u8868\uff0c\u8fd9\u4e2a\u6210\u5458\u5b9e\u9645\u5b9e\u73b0\u65f6\u662f\u6307\u5411 vm_area_struct \u94fe\u8868\u7684\u5934\u5143\u7d20. \u8fd8\u6709\u5e95\u5c42\u7684\u7269\u7406\u9875\u5e27\u662f\u7528\u6570\u7ec4\u7ba1\u7406\u7684(\u56e0\u4e3a\u5728\u540c\u4e00\u4e2a NUMA Node \u8282\u70b9\u5185\u7684\u6240\u6709\u7269\u7406\u5185\u5b58\u90fd\u662f\u8fde\u7eed\u7684), \u5728\u5185\u6838\u6570\u636e\u7ed3\u6784\u8868\u793a\u65f6 node \u8282\u70b9\u5185\u6709\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5176\u6240\u6709 page \u7ec4\u6210\u7684\u6570\u7ec4, \u5b9e\u9645\u5b9e\u73b0\u65f6\u4e5f\u662f\u6307\u5411\u8be5\u6570\u7ec4\u7684\u5934\u5143\u7d20.","title":"5.3 \u6307\u9488\u6307\u5411\u94fe\u8868\u548c\u6570\u7ec4\u65f6\uff0c\u90fd\u53ea\u9700\u8981\u6307\u5411\u5176\u5934\u4e00\u4e2a\u5143\u7d20"},{"location":"chapter_14/3_linux_kernel_api_list/#_3","text":"","title":"\u56db \u5404\u79cd\u6ce8\u518c\u6280\u80fd"},{"location":"chapter_14/3_linux_kernel_api_list/#1","text":"open_softirq \u662f\u6ce8\u518c\u5230 softirq_vec \u6570\u7ec4\u91cc\u7684 \u4f7f\u7528\u65b9\u5f0f open_softirq(NET_TX_SOFTIRQ, net_tx_action); open_softirq(NET_RX_SOFTIRQ, net_rx_action); \u5b9a\u4e49 kernel/softirq.c void open_softirq(int nr, void (*action)(struct softirq_action *)) { softirq_vec[nr].action = action; }","title":"1 \u8f6f\u4e2d\u65ad\u6ce8\u518c\u5230\u4e00\u4e2a\u6570\u7ec4"},{"location":"chapter_14/3_linux_kernel_api_list/#2-type","text":"register_filesystem(&dev_fs_type); //\u6ce8\u518c dev_fs_type \u6587\u4ef6\u7cfb\u7edf\uff0c\u5373\u5c06 dev_fs_type \u6dfb\u52a0\u5230\u5185\u6838\u5168\u5c40\u603b\u94fe\u8868\u4e2d file_systems /** * register_filesystem - register a new filesystem * @fs: the file system structure * * Adds the file system passed to the list of file systems the kernel * is aware of for mount and other syscalls. Returns 0 on success, * or a negative errno code on an error. * * The &struct file_system_type that is passed is linked into the kernel * structures and must not be freed until the file system has been * unregistered. */ int register_filesystem(struct file_system_type * fs) { int res = 0; struct file_system_type ** p; if (fs->parameters && !fs_validate_description(fs->name, fs->parameters)) return -EINVAL; BUG_ON(strchr(fs->name, '.')); if (fs->next) return -EBUSY; write_lock(&file_systems_lock); p = find_filesystem(fs->name, strlen(fs->name)); if (*p) res = -EBUSY; else *p = fs; write_unlock(&file_systems_lock); return res; }","title":"2 \u6587\u4ef6\u7cfb\u7edf type \u662f\u6ce8\u518c\u5230\u94fe\u8868"},{"location":"chapter_14/3_linux_kernel_api_list/#3-numa-node","text":"\u5728\u5185\u6838\u4e2d\u4f7f\u7528 struct pg_data_t \u8868\u793a\u4e00\u4e2a NUMA Node, \u5bf9\u4e8e UMA \u67b6\u6784 \u5176\u5b9e\u76f8\u5f53\u4e8e\u53ea\u6709\u4e00\u4e2a Node, \u5bf9\u4e8e NUMA \u67b6\u6784\u76f8\u5f53\u4e8e\u6709\u591a\u4e2a Node, \u591a\u4e2a Node \u5f62\u6210\u4e00\u4e2a\u94fe\u8868.","title":"3 \u591a\u4e2a NUMA Node \u4f7f\u7528\u94fe\u8868\u76f8\u8fde"},{"location":"chapter_14/3_linux_kernel_api_list/#_4","text":"","title":"\u4e94 \u5404\u79cd\u5e38\u7528\u7684\u5b8f"},{"location":"chapter_14/3_linux_kernel_api_list/#1-current","text":"\u5185\u6838\u4ee3\u7801\u4e2d\uff0ccurrent \u603b\u662f\u6307\u5411\u5f53\u524d\u7684\u8fdb\u7a0b\u7684 task_struct","title":"1 current \u5b8f"},{"location":"chapter_14/3_linux_kernel_api_list/#2-container_of","text":"\u662f\u4e00\u4e2a\u5728 Linux \u5185\u6838\u4e2d\u5e38\u7528\u7684\u5b8f\uff0c\u901a\u8fc7\u7ed3\u6784\u4f53\u7684\u67d0\u4e2a \u6210\u5458\u53d8\u91cf\u5730\u5740 \u627e\u5230 \u8be5\u7ed3\u6784\u4f53\u7684\u9996\u5730\u5740 \u4f8b\u5982\u4e0b\u9762\u901a\u8fc7 inode \u7ed3\u6784\u4f53\u83b7\u53d6\u5bf9\u5e94\u7684 cdev \u7ed3\u6784\u4f53, \u7136\u540e\u5c06 file \u7ed3\u6784\u4f53\u7684 private_data \u6210\u5458\u8d4b\u503c\u7ed9\u5b83, \u662f\u4e00\u4e2a\u5178\u578b\u7684 open \u64cd\u4f5c\u7684\u5b9e\u73b0\u65b9\u6cd5. cd = container_of(inode->i_cdev,struct mycdev,cdev); file->private_data = cd;","title":"2 container_of \u5b8f"},{"location":"chapter_14/3_linux_kernel_api_list/#3-init_list_head","text":"INIT_LIST_HEAD(ptr) \u8fd9\u4e2a\u5b8f\u901a\u5e38\u7528\u4e8e\u5728\u8fd0\u884c\u65f6\u521d\u59cb\u5316\u4e00\u4e2a\u94fe\u8868","title":"3 INIT_LIST_HEAD \u7528\u4e8e\u5728\u8fd0\u884c\u65f6\u521d\u59cb\u5316\u4e00\u4e2a\u94fe\u8868"},{"location":"chapter_14/3_linux_kernel_api_list/#4-pfn-struct-page","text":"\u5185\u6838\u63d0\u4f9b\u4e86\u4e24\u4e2a\u5b8f\u6765\u5b8c\u6210 PFN \u4e0e \u7269\u7406\u9875\u7ed3\u6784\u4f53 struct page \u4e4b\u95f4\u7684\u76f8\u4e92\u8f6c\u6362\u3002\u5b83\u4eec\u5206\u522b\u662f page_to_pfn \u4e0e pfn_to_page","title":"4 PFN \u548c\u7269\u7406\u9875\u7ed3\u6784\u4f53 struct page \u4e4b\u95f4\u7684\u76f8\u4e92\u8f6c\u6362\u7684\u5b8f"},{"location":"chapter_14/3_linux_kernel_api_list/#_5","text":"","title":"\u516d \u5404\u7c7b\u6709\u610f\u601d\u95ee\u9898"},{"location":"chapter_14/3_linux_kernel_api_list/#1_1","text":"\u6bd4\u5982 page = __get_free_pages(GFP_KERNEL,3); if (!page){ /*\u6ca1\u6709\u8db3\u591f\u7684\u5185\u5b58\uff1a\u4f60\u5fc5\u987b\u5904\u7406\u8fd9\u79cd\u9519\u8bef\uff01*/ return -ENOMEM; } static int fs_name(unsigned int index, char __user * buf) { struct file_system_type * tmp; int len, res; read_lock(&file_systems_lock); for (tmp = file_systems; tmp; tmp = tmp->next, index--) if (index <= 0 && try_module_get(tmp->owner)) break; read_unlock(&file_systems_lock); if (!tmp) return -EINVAL; /* OK, we got the reference, so we can safely block */ len = strlen(tmp->name) + 1; res = copy_to_user(buf, tmp->name, len) ? -EFAULT : 0; put_filesystem(tmp); return res; }","title":"1 \u4e3a\u4ec0\u4e48\u5185\u6838\u4ee3\u7801\u4e2d\u5f88\u591a\u8fd4\u56de\u503c\u90fd\u90fd\u8981\u52a0\u4e2a\u8d1f\u53f7"},{"location":"chapter_14/3_linux_kernel_api_list/#a","text":"\u5185\u6838\u4e2d\u7684\u51fd\u6570\u901a\u5e38\u4ee5\u8fd4\u56de\u6307\u9488\u7684\u5f62\u5f0f\u6765\u4f20\u9012\u8c03\u7528\u51fd\u6570\u540e\u6267\u884c\u7684\u7ed3\u679c\uff0c\u8fd4\u56de\u503c\u6307\u9488\u6709\u4e09\u79cd\u7ed3\u679c\uff1a \uff081\uff09\u8c03\u7528\u6210\u529f\u5219\u8fd4\u56de\u4e00\u4e2a\u6709\u6548\u6307\u9488 \uff082\uff09\u8c03\u7528\u5931\u8d25\u8fd4\u56de NULL\uff0c\u4f8b\u5982 malloc\u3001kmalloc\u3001vmalloc \uff083\uff09\u8c03\u7528\u5931\u8d25\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\u6307\u9488\uff08\u65e0\u6548\u6307\u9488\uff09 \u6211\u4eec\u5c31\u662f\u901a\u8fc7\u8fd9\u4e2a\u9519\u8bef\u6307\u9488\u6765\u4f20\u9012\u6709\u5173\u9519\u8bef\u7684\u4fe1\u606f\u3002","title":"A \u5982\u4f55\u7406\u89e3\u51fd\u6570\u8fd4\u56de\u6307\u9488"},{"location":"chapter_14/4_zifushebeiqudongyuanli/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u539f\u7406 \u5982\u679c\u53ea\u60f3\u4e86\u89e3\u539f\u7406, \u53ea\u9700\u770b \u7ed3\u8bba \u90e8\u5206 \u7b80\u5355\u63cf\u8ff0 ioremap \u548c\u4e3a\u4ec0\u4e48\u9700\u8981\u6709 ioremap \u4e00 \u7ed3\u8bba Linux \u7684\u5b57\u7b26\u8bbe\u5907(\u6bd4\u5982 LED \u706f), \u5b83\u4ece\u5382\u5546\u8fd9\u8fb9\u8d2d\u4e70\u56de\u6765, \u63a5\u5165\u4e3b\u673a\u540e, \u5176 \u5bc4\u5b58\u5668\u7269\u7406\u5185\u5b58\u5730\u5740\u662f\u786e\u5b9a\u7684\u5e76\u4e14\u662f\u8fde\u7eed\u7684 . \u9a71\u52a8\u7a0b\u5e8f\u5230\u6700\u540e\u8fdb\u884c\u8bbe\u5907\u64cd\u4f5c\u65f6, \u5176\u5b9e \u5c31\u662f\u4fee\u6539\u8fd9\u4e9b\u7269\u7406\u5185\u5b58\u5730\u5740\u7684\u503c . \u600e\u4e48\u4fee\u6539\u5462? \u5206\u4e3a\u4e24\u6b65: 1 \u5148\u628a\u8bbe\u5907\u7684\u7269\u7406\u5185\u5b58\u5730\u5740\u6620\u5c04\u4e3a\u865a\u62df\u5185\u5b58\u5730\u5740(\u4f7f\u7528\u5185\u6838 API \u51fd\u6570 ioremap ) 2 \u4fee\u6539\u865a\u62df\u5185\u5b58\u5730\u5740, \u6bd4\u5982: \u8bbe\u7f6e\u4e3a 1 \u8868\u793a\u6253\u5f00 LED \u706f, \u8bbe\u7f6e\u4e3a 0 \u8868\u793a\u5173\u95ed LED \u706f. \u9a71\u52a8\u5fc5\u5907\u57fa\u7840\u77e5\u8bc6 \u4e8c \u53c2\u8003 \u4e00\u3001 ioremap() \u51fd\u6570\u57fa\u7840\u6982\u5ff5 \u51e0\u4e4e\u6bcf\u4e00\u79cd\u5916\u8bbe\u90fd\u662f\u901a\u8fc7\u8bfb\u5199\u8bbe\u5907\u4e0a\u7684\u5bc4\u5b58\u5668\u6765\u8fdb\u884c\u7684 \uff0c\u901a\u5e38\u5305\u62ec \u63a7\u5236\u5bc4\u5b58\u5668 \u3001 \u72b6\u6001\u5bc4\u5b58\u5668 \u548c \u6570\u636e\u5bc4\u5b58\u5668 \u4e09\u5927\u7c7b\uff0c\u5916\u8bbe\u7684\u5bc4\u5b58\u5668\u901a\u5e38\u88ab\u8fde\u7eed\u5730\u7f16\u5740\u3002 \u6839\u636e CPU \u4f53\u7cfb\u7ed3\u6784\u7684\u4e0d\u540c\uff0cCPU \u5bf9 IO \u7aef\u53e3\u7684\u7f16\u5740\u65b9\u5f0f\u6709\u4e24\u79cd: a -- I/O \u6620\u5c04\u65b9\u5f0f\uff08I/O-mapped\uff09 \u5178\u578b\u5730\uff0c\u5982 X86 \u5904\u7406\u5668\u4e3a\u5916\u8bbe\u4e13\u95e8\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5355\u72ec\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u79f0\u4e3a\"I/O \u5730\u5740\u7a7a\u95f4\"\u6216\u8005\"I/O \u7aef\u53e3\u7a7a\u95f4\"\uff0cCPU \u901a\u8fc7\u4e13\u95e8\u7684 I/O \u6307\u4ee4\uff08\u5982 X86 \u7684 IN \u548c OUT \u6307\u4ee4\uff09\u6765\u8bbf\u95ee\u8fd9\u4e00\u7a7a\u95f4\u4e2d\u7684\u5730\u5740\u5355\u5143\u3002 b -- \u5185\u5b58\u6620\u5c04\u65b9\u5f0f\uff08Memory-mapped\uff09 RISC \u6307\u4ee4\u7cfb\u7edf\u7684 CPU\uff08\u5982 ARM\u3001PowerPC \u7b49\uff09\u901a\u5e38\u53ea\u5b9e\u73b0\u4e00\u4e2a\u7269\u7406\u5730\u5740\u7a7a\u95f4\uff0c\u5916\u8bbe I/O \u7aef\u53e3\u6210\u4e3a\u5185\u5b58\u7684\u4e00\u90e8\u5206\u3002\u6b64\u65f6\uff0cCPU \u53ef\u4ee5\u8c61\u8bbf\u95ee\u4e00\u4e2a\u5185\u5b58\u5355\u5143\u90a3\u6837\u8bbf\u95ee\u5916\u8bbe I/O \u7aef\u53e3\uff0c\u800c\u4e0d\u9700\u8981\u8bbe\u7acb\u4e13\u95e8\u7684\u5916\u8bbe I/O \u6307\u4ee4\u3002 \u4f46\u662f\uff0c\u8fd9\u4e24\u8005\u5728\u786c\u4ef6\u5b9e\u73b0\u4e0a\u7684\u5dee\u5f02\u5bf9\u4e8e\u8f6f\u4ef6\u6765\u8bf4\u662f\u5b8c\u5168\u900f\u660e\u7684\uff0c\u9a71\u52a8\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u5c06\u5185\u5b58\u6620\u5c04\u65b9\u5f0f\u7684 I/O \u7aef\u53e3\u548c\u5916\u8bbe\u5185\u5b58\u7edf\u4e00\u770b\u4f5c\u662f\"I/O \u5185\u5b58\"\u8d44\u6e90\u3002 \u4e00\u822c\u6765\u8bf4\uff0c \u5728\u7cfb\u7edf\u8fd0\u884c\u65f6\uff0c\u5916\u8bbe\u7684 I/O \u5185\u5b58\u8d44\u6e90\u7684\u7269\u7406\u5730\u5740\u662f\u5df2\u77e5\u7684\uff0c\u7531\u786c\u4ef6\u7684\u8bbe\u8ba1\u51b3\u5b9a\u3002 \u4f46\u662f CPU \u901a\u5e38\u5e76\u6ca1\u6709\u4e3a\u8fd9\u4e9b\u5df2\u77e5\u7684\u5916\u8bbe I/O \u5185\u5b58\u8d44\u6e90\u7684\u7269\u7406\u5730\u5740\u9884\u5b9a\u4e49\u865a\u62df\u5730\u5740\u8303\u56f4\uff0c\u9a71\u52a8\u7a0b\u5e8f\u5e76\u4e0d\u80fd\u76f4\u63a5\u901a\u8fc7\u7269\u7406\u5730\u5740\u8bbf\u95ee I/O \u5185\u5b58\u8d44\u6e90\uff0c\u800c\u5fc5\u987b\u5c06\u5b83\u4eec\u6620\u5c04\u5230\u6838\u5fc3\u865a\u5730\u5740\u7a7a\u95f4\u5185\uff08\u901a\u8fc7\u9875\u8868\uff09\uff0c\u7136\u540e\u624d\u80fd\u6839\u636e\u6620\u5c04\u6240\u5f97\u5230\u7684\u6838\u5fc3\u865a\u5730\u5740\u8303\u56f4\uff0c\u901a\u8fc7\u8bbf\u5185\u6307\u4ee4\u8bbf\u95ee\u8fd9\u4e9b I/O \u5185\u5b58\u8d44\u6e90\u3002 Linux \u5728 io.h \u5934\u6587\u4ef6\u4e2d\u58f0\u660e\u4e86\u51fd\u6570 ioremap\uff08\uff09\uff0c\u7528\u6765\u5c06 I/O \u5185\u5b58\u8d44\u6e90\u7684\u7269\u7406\u5730\u5740\u6620\u5c04\u5230\u6838\u5fc3\u865a\u5730\u5740\u7a7a\u95f4\uff083GB\uff0d4GB\uff09\u4e2d\uff08\u8fd9\u91cc\u662f\u5185\u6838\u7a7a\u95f4\uff09\uff0c\u539f\u578b\u5982\u4e0b\uff1a 1\u3001ioremap \u51fd\u6570 ioremap\u5b8f\u5b9a\u4e49\u5728asm/io.h\u5185\uff1a #define ioremap(cookie,size) __ioremap(cookie,size,0) __ioremap \u51fd\u6570\u539f\u578b\u4e3a(arm/mm/ioremap.c)\uff1a void **iomem \\* **ioremap(unsigned long phys_addr, size_t size, unsigned long flags); \u53c2\u6570\uff1a phys_addr\uff1a\u8981\u6620\u5c04\u7684\u8d77\u59cb\u7684 IO \u5730\u5740 size\uff1a\u8981\u6620\u5c04\u7684\u7a7a\u95f4\u7684\u5927\u5c0f flags\uff1a\u8981\u6620\u5c04\u7684 IO \u7a7a\u95f4\u548c\u6743\u9650\u6709\u5173\u7684\u6807\u5fd7 \u8be5\u51fd\u6570\u8fd4\u56de\u6620\u5c04\u540e\u7684\u5185\u6838\u865a\u62df\u5730\u5740(3G-4G). \u63a5\u7740\u4fbf\u53ef\u4ee5\u901a\u8fc7\u8bfb\u5199\u8be5\u8fd4\u56de\u7684\u5185\u6838\u865a\u62df\u5730\u5740\u53bb\u8bbf\u95ee\u4e4b\u8fd9\u6bb5 I/O \u5185\u5b58\u8d44\u6e90\u3002 2\u3001iounmap \u51fd\u6570 iounmap\u51fd\u6570\u7528\u4e8e\u53d6\u6d88ioremap\uff08\uff09\u6240\u505a\u7684\u6620\u5c04\uff0c\u539f\u578b\u5982\u4e0b\uff1a void iounmap(void * addr); \u4e8c ioremap() \u7684\u5b9e\u73b0\u5185\u5e55 \u5176\u4e00 ioremap() \u7684\u5b9e\u73b0\u5185\u5e55\u4f1a\u6d89\u53ca\u5230\u6bd4\u8f83\u591a\u7684\u5185\u5b58\u7ba1\u7406\u7684\u77e5\u8bc6\uff0c\u8fd9\u91cc\u6211\u4eec\u629b\u5f00\u4ee3\u7801\u7ec6\u8282\u7b80\u5355\u4e86\u89e3\u4e00\u4e0b\u539f\u7406\u5c31\u597d\u3002 ioremap() \u5c06 vmalloc \u533a\u7684\u67d0\u6bb5\u865a\u62df\u5185\u5b58\u5757\u6620\u5c04\u5230 io memory\uff0c\u5176\u5b9e\u73b0\u539f\u7406\u4e0e vmalloc() \u7c7b\u4f3c\uff0c\u90fd\u662f\u901a\u8fc7\u5728 vmalloc \u533a\u5206\u914d\u865a\u62df\u5730\u5740\u5757\uff0c\u7136\u540e\u4fee\u6539\u5185\u6838\u9875\u8868\u7684\u65b9\u5f0f\u5c06\u5176\u6620\u5c04\u5230\u8bbe\u5907\u7684 I/O \u5730\u5740\u7a7a\u95f4\u3002 \u4e0e vmalloc() \u4e0d\u540c\u7684\u662f\uff0cioremap \u5e76\u4e0d\u9700\u8981\u901a\u8fc7\u4f19\u4f34\u7cfb\u7edf\u53bb\u5206\u914d\u7269\u7406\u9875\uff0c\u56e0\u4e3a ioremap \u8981\u6620\u5c04\u7684\u76ee\u6807\u5730\u5740\u662f io memory\uff0c\u4e0d\u662f\u7269\u7406\u5185\u5b58 (RAM)\u3002 ---> \u53ef\u89c1 x86 \u4e0a, \u662f\u6709\u4e24\u4e2a\u7269\u7406\u5185\u5b58\u7a7a\u95f4\u7684. \u5176\u4e8c \u5728\u7f16\u5199 linux \u9a71\u52a8\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u53ef\u907f\u514d\u7684\u4f1a\u6d89\u53ca\u64cd\u4f5c\u5916\u8bbe\uff0c\u800c\u5916\u8bbe\u7684\u5730\u5740\u7a7a\u95f4\u4e0e DDR \u7684\u5730\u5740\u7a7a\u95f4\u4e00\u822c\u4e0d\u8fde\u7eed\uff0c\u5728 linux \u4e0a\u7535\u65f6\uff0c\u5e76\u4e0d\u4f1a\u4e3a\u5916\u8bbe\u5730\u5740\u7a7a\u95f4\u5efa\u7acb\u9875\u8868\uff0c\u53c8\u56e0\u4e3a linux \u8bbf\u95ee\u5185\u5b58\u4f7f\u7528\u7684\u90fd\u662f\u865a\u62df\u5730\u5740\uff0c\u56e0\u6b64\u5982\u679c\u60f3\u8bbf\u95ee\u5916\u8bbe\u7684\u5bc4\u5b58\u5668\uff08\u4e00\u822c\u5305\u62ec \u6570\u636e\u5bc4\u5b58\u5668 \u3001 \u63a7\u5236\u5bc4\u5b58\u5668 \u4e0e \u72b6\u6001\u5bc4\u5b58\u5668 \uff09\uff0c\u9700\u8981\u5728\u9a71\u52a8\u521d\u59cb\u5316\u4e2d\u5c06\u5916\u8bbe\u6240\u5904\u7684\u7269\u7406\u5730\u5740\u6620\u5c04\u4e3a\u865a\u62df\u5730\u5740\uff0clinux \u4e3a\u5e94\u5bf9\u8be5\u95ee\u9898\u63d0\u4f9b\u4e86\u8f83\u591a\u63a5\u53e3\uff0c\u5305\u62ec ioremap/ioremap_wc/devm_ioremap/devm_ioremap_resource \u7b49\uff0c\u4ee5\u5e94\u5bf9\u4e0d\u540c\u7684\u573a\u666f\u9700\u6c42\uff0c\u672c\u6587 \u5373\u9610\u8ff0\u8fd9\u4e9b\u63a5\u53e3\u7684\u4f7f\u7528\uff0c\u4ee5\u53ca\u9700\u8981\u6ce8\u610f\u7684\u533a\u522b\u3002 \u5728\u7cfb\u7edf\u8fd0\u884c\u65f6\uff0c\u5916\u8bbe IO \u8d44\u6e90\u7684\u7269\u7406\u5730\u5740\u662f\u5df2\u77e5\u7684\uff0c\u7531\u786c\u4ef6\u7684\u8bbe\u8ba1\u51b3\u5b9a\uff08\u53c2\u8003 SOC \u7684 datesheet\uff0c\u4e00\u822c\u4f1a\u6709 memorymap\uff09\u3002 \u9a71\u52a8\u7a0b\u5e8f\u4e0d\u80fd\u901a\u8fc7\u7269\u7406\u5730\u5740\u8bbf\u95ee IO \u8d44\u6e90\uff0c\u5fc5\u987b\u5c06\u5176\u6620\u5c04\u5230\u5185\u6838\u6001\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff08\u901a\u8fc7\u9875\u8868\uff09\uff0c\u7136\u540e\u6839\u636e\u6620\u5c04\u6240\u5f97\u5230\u7684\u5185\u6838\u865a\u62df\u5730\u5740\u8303\u56f4\uff0c\u901a\u8fc7\u7ebf\u6027\u504f\u79fb\uff08 virt_addr = virt_base + phy_addr - phy_base \uff09\u8bbf\u95ee\u8fd9\u4e9b IO \u5185\u5b58\u8d44\u6e90\u3002 \u5176\u4e09 Linux \u64cd\u4f5c\u5bc4\u5b58\u5668\u524d\u4e3a\u4ec0\u4e48\u8981 ioremap \u539f\u56e0 \u8fd9\u91cc\u53ea\u8003\u8651\u6709 MMU \u7684\u82af\u7247\uff0cLinux \u4e3a\u4e86\u5b9e\u73b0\u8fdb\u7a0b\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u5728\u542f\u7528 MMU \u540e\uff0c\u5728\u5185\u6838\u4e2d\u64cd\u4f5c\u7684\u90fd\u662f\u865a\u62df\u5730\u5740\uff0c\u5185\u6838\u8bbf\u95ee\u4e0d\u5230\u7269\u7406\u5730\u5740\u3002 \u5982\u679c\u5728\u9a71\u52a8\u91cc\u76f4\u63a5\u8bbf\u95ee\u7269\u7406\u5730\u5740\uff0c\u7b49\u4e8e\u8bbf\u95ee\u4e86\u4e00\u4e2a\u975e\u6cd5\u5730\u5740\uff0c\u4f1a\u5bfc\u81f4\u5185\u6838\u5d29\u6e83\uff0c\u4e0b\u9762\u4f1a\u6709\u4e00\u4e2a\u76f8\u5173\u7684\u5c0f\u5b9e\u9a8c\u3002 \u901a\u8fc7 ioremap \u5c06\u7269\u7406\u5730\u5740\u6620\u5c04\u4e3a\u865a\u62df\u5730\u5740\u540e\uff0c\u5185\u6838\u5c31\u80fd\u901a\u8fc7 ioremap() \u8fd4\u56de\u7684\u865a\u62df\u5730\u5740\uff0c\u4ee5 \u865a\u62df\u5730\u5740->mmu \u9875\u8868\u6620\u5c04-> \u7269\u7406\u5730\u5740 \u7684\u5f62\u5f0f\u6b63\u786e\u5730\u8bbf\u95ee\u5230\u7269\u7406\u5730\u5740\u4e86\u3002 ARM Linux \u5f15\u5165\u8bbe\u5907\u6811\u7279\u6027\u540e\uff0c\u4e00\u4e9b\u652f\u6301\u8bbe\u5907\u6811\u7684\u8bbe\u5907\u9a71\u52a8\u4e0d\u518d\u4f7f\u7528\u76f4\u63a5 ioremap()\uff0c\u6539\u7528 drivers/of/address.c/of_iomap()\uff0cof_iomap() \u7684\u5185\u90e8\u4ecd\u7136\u4f1a\u8c03\u7528 ioremap()\uff0c\u4f8b\u5982\uff1a clk-rk3288.c (drivers\\clk\\rockchip) static void rk3288_clk_init(struct device_node *np) { rk3288_cru_base = of_iomap(np, 0); [...] } \u4e09 \u66f4\u591a\u5173\u4e8e\u7269\u7406\u5185\u5b58\u5730\u5740\u7a7a\u95f4\u548c IO \u7aef\u53e3\u7a7a\u95f4 \u80cc\u666f \u5916\u8bbe\u90fd\u662f\u901a\u8fc7\u8bfb\u5199\u8bbe\u5907\u4e0a\u7684\u5bc4\u5b58\u5668\u6765\u8fdb\u884c\u5de5\u4f5c\u7684\uff0c\u5916\u8bbe\u5bc4\u5b58\u5668\u4e5f\u79f0\u4e3a IO\u7aef\u53e3 \uff0c\u800c IO\u7aef\u53e3 \u7684\u7f16\u5740\u65b9\u5f0f\u6709\u4e24\u79cd\uff0c \u72ec\u7acb\u7f16\u5740 \u548c \u7edf\u4e00\u7f16\u5740 \u3002 \u72ec\u7acb\u7f16\u5740 \u4e3a\u7aef\u53e3\u5730\u5740\u5355\u72ec\u5f00\u8f9f\u4e00\u90e8\u5206\u5730\u5740\u7a7a\u95f4\uff0c\u5176\u8bbf\u95ee\u6307\u4ee4\u4e5f\u9700\u8981\u4f7f\u7528\u5355\u72ec\u7684\u6307\u4ee4\uff08\u4e0d\u540c\u4e8e\u5185\u5b58\u8bbf\u95ee\u6307\u4ee4\uff09\u3002 \u7edf\u4e00\u7f16\u5740 : \u5916\u8bbe\u63a5\u53e3\u4e2d\u7684 IO \u5bc4\u5b58\u5668\uff08\u5373 IO \u7aef\u53e3 \uff09\u4e0e\u4e3b\u5b58\u5355\u5143\u4e00\u6837\u770b\u5f85\uff0c\u6bcf\u4e2a\u7aef\u53e3\u5360\u7528\u4e00\u4e2a\u5b58\u50a8\u5355\u5143\u7684\u5730\u5740\uff0c\u5c06\u4e3b\u5b58\u7684\u4e00\u90e8\u5206\u5212\u51fa\u6765\u7528\u4f5c IO \u5730\u5740\u7a7a\u95f4\u3002 \u7edf\u4e00\u7f16\u5740\u7684\u539f\u7406\u662f\u5c06 IO \u7684\u7aef\u53e3\u5730\u5740\u5b58\u50a8\u5668\u5bfb\u5740\u7684\u5730\u5740\u7a7a\u95f4\u8303\u56f4\u4e4b\u5185\uff0c\u6b64\u65b9\u6cd5\u4e5f\u6210\u4e3a\u5b58\u50a8\u5668\u6620\u50cf\u7f16\u5740\u3002CPU \u8bbf\u95ee\u4e00\u4e2a\u7aef\u53e3\u7684\u64cd\u4f5c\u4e0e\u8bbf\u95ee\u5185\u5b58\u7684\u64cd\u4f5c\u76f8\u540c\uff0c\u4e5f\u4f7f\u7528\u8bbf\u95ee\u5185\u5b58\u7684\u6307\u4ee4\u3002 \u6839\u636e CPU \u4f53\u7cfb\u7ed3\u6784\u7684\u4e0d\u540c\uff0cCPU \u5bf9 IO \u7aef\u53e3\u7684\u7f16\u5740\u65b9\u5f0f\u6709\u4e24\u79cd\uff1a \uff081\uff09I/O \u6620\u5c04\u65b9\u5f0f\uff08I/O-mapped\uff09 \u5178\u578b\u5730\uff0c\u5982 X86 \u5904\u7406\u5668\u4e3a\u5916\u8bbe\u4e13\u95e8\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5355\u72ec\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u79f0\u4e3a\"I/O \u5730\u5740\u7a7a\u95f4\"\u6216\u8005\"I/O \u7aef\u53e3\u7a7a\u95f4\"\uff0cCPU \u901a\u8fc7\u4e13\u95e8\u7684 I/O \u6307\u4ee4\uff08\u5982 X86 \u7684 IN \u548c OUT \u6307\u4ee4\uff09\u6765\u8bbf\u95ee\u8fd9\u4e00\u7a7a\u95f4\u4e2d\u7684\u5730\u5740\u5355\u5143\u3002 \uff082\uff09\u5185\u5b58\u6620\u5c04\u65b9\u5f0f\uff08Memory-mapped\uff09 \u3000\u3000 RISC \u6307\u4ee4\u7cfb\u7edf\u7684 CPU\uff08\u5982 ARM\u3001PowerPC \u7b49\uff09\u901a\u5e38\u53ea\u5b9e\u73b0\u4e00\u4e2a\u7269\u7406\u5730\u5740\u7a7a\u95f4\uff0c\u5916\u8bbe I/O \u7aef\u53e3\u6210\u4e3a\u5185\u5b58\u7684\u4e00\u90e8\u5206\u3002\u6b64\u65f6\uff0cCPU \u53ef\u4ee5\u8c61\u8bbf\u95ee\u4e00\u4e2a\u5185\u5b58\u5355\u5143\u90a3\u6837\u8bbf\u95ee\u5916\u8bbe I/O \u7aef\u53e3\uff0c\u800c\u4e0d\u9700\u8981\u8bbe\u7acb\u4e13\u95e8\u7684\u5916\u8bbe I/O \u6307\u4ee4\u3002 \u4f46\u662f\uff0c \u8fd9\u4e24\u8005\u5728\u786c\u4ef6\u5b9e\u73b0\u4e0a\u7684\u5dee\u5f02\u5bf9\u4e8e\u8f6f\u4ef6\u6765\u8bf4\u662f\u5b8c\u5168\u900f\u660e\u7684\uff0c\u9a71\u52a8\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u5c06\u5185\u5b58\u6620\u5c04\u65b9\u5f0f\u7684 I/O \u7aef\u53e3\u548c\u5916\u8bbe\u5185\u5b58\u7edf\u4e00\u770b\u4f5c\u662f\"I/O \u5185\u5b58\"\u8d44\u6e90\u3002 readX/writeX \u7cfb\u5217\u51fd\u6570 \u5728\u5c06 I/O \u5185\u5b58\u8d44\u6e90\u7684\u7269\u7406\u5730\u5740\u6620\u5c04\u6210\u6838\u5fc3\u865a\u5730\u5740\u540e\uff0c\u7406\u8bba\u4e0a\u8bb2\u6211\u4eec\u5c31\u53ef\u4ee5\u8c61\u8bfb\u5199 RAM \u90a3\u6837\u76f4\u63a5\u8bfb\u5199 I/O \u5185\u5b58\u8d44\u6e90\u4e86\u3002\u4e3a\u4e86\u4fdd\u8bc1\u9a71\u52a8\u7a0b\u5e8f\u7684\u8de8\u5e73\u53f0\u7684\u53ef\u79fb\u690d\u6027\uff0c\u6211\u4eec\u5e94\u8be5\u4f7f\u7528 Linux \u4e2d\u7279\u5b9a\u7684\u51fd\u6570\u6765\u8bbf\u95ee I/O \u5185\u5b58\u8d44\u6e90\uff0c\u800c\u4e0d\u5e94\u8be5\u901a\u8fc7\u6307\u5411\u6838\u5fc3\u865a\u5730\u5740\u7684\u6307\u9488\u6765\u8bbf\u95ee, \u4f7f\u7528\u7279\u5b9a\u51fd\u6570\u7684\u8bdd\u5c31\u7528\u5230 Linux \u5728\u8fd9\u4e00\u5c42\u4e13\u95e8\u5c01\u88c5\u7684\u4e00\u5c42\u5b50\u7cfb\u7edf\u5c4f\u853d\u4e86\u5404\u4e2a CPU \u5e73\u53f0\u7684\u7ec6\u8282(\u4f7f\u7528\u8fd9\u4e9b\u7279\u5b9a\u51fd\u6570, \u4f1a\u5c4f\u853d X86 \u548c Arm \u5e73\u53f0\u7ec6\u8282)\u3002\u8bfb\u5199 I/O \u7684\u51fd\u6570\u5c31\u662f\u8fd9\u91cc\u63d0\u5230\u7684 readX/writeX() \u7cfb\u5217\u51fd\u6570, \u5305\u62ec\u540e\u7eed\u7684 inb \u3001 inw \u3001 inl , outb \u3001 outw \u3001 outl \u7b49\u3002 readX/writeX() are used to access memory mapped devices. On some architectures the memory mapped IO stuff needs to be accessed differently. On the simple architectures, we just read/write the memory location directly. writel() \u5f80\u5185\u5b58\u6620\u5c04\u7684 I/O \u7a7a\u95f4\u4e0a\u5199\u6570\u636e\uff0cwirtel() I/O \u4e0a\u5199\u5165 32 \u4f4d\u6570\u636e (4 \u5b57\u8282)\u3002 \u539f\u578b\uff1a #include void writel (unsigned char data , unsigned short addr ) readl() \u4ece\u5185\u5b58\u6620\u5c04\u7684 I/O \u7a7a\u95f4\u8bfb\u53d6\u6570\u636e,readl \u4ece I/O \u8bfb\u53d6 32 \u4f4d\u6570\u636e ( 4 \u5b57\u8282 )\u3002 \u539f\u578b\uff1a #include unsigned char readl (unsigned int addr ) \u53d8\u91cf addr \u662f I/O \u5730\u5740\u3002 \u8fd4\u56de\u503c \uff1a \u4ece I/O \u7a7a\u95f4\u8bfb\u53d6\u7684\u6570\u503c\u3002 \u66f4\u591a Linux \u8bfb\u5199\u5bc4\u5b58\u5668\u547d\u4ee4 \u5728 Linux \u7cfb\u7edf\u4e2d\uff0c\u8981\u8bfb\u5199\u5bc4\u5b58\u5668\uff0c\u9700\u8981\u4f7f\u7528\u7279\u5b9a\u7684\u547d\u4ee4\u548c\u5de5\u5177\u3002\u4ee5\u4e0b\u662f\u5e38\u7528\u7684\u51e0\u4e2a\u547d\u4ee4\uff1a \u5b9a\u4e49\u5728 kernel/io.c \u4e2d inb \u3001 inw \u3001 inl \uff1a\u7528\u4e8e\u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282\u3001\u4e00\u4e2a\u5b57\u6216\u8005\u4e00\u4e2a\u53cc\u5b57\u7684 I/O \u7aef\u53e3\u3002\u4f8b\u5982\uff0c\u8981\u8bfb\u53d6\u7aef\u53e3\u53f7\u4e3a 0x80 \u7684\u4e00\u4e2a\u5b57\u8282\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a inb 0x80 outb \u3001 outw \u3001 outl \uff1a\u7528\u4e8e\u5411\u4e00\u4e2a I/O \u7aef\u53e3\u5199\u5165\u4e00\u4e2a\u5b57\u8282\u3001\u4e00\u4e2a\u5b57\u6216\u8005\u4e00\u4e2a\u53cc\u5b57\u3002\u4f8b\u5982\uff0c\u8981\u5411\u7aef\u53e3\u53f7\u4e3a 0x80 \u7684\u4e00\u4e2a\u5b57\u8282\u5199\u5165\u6570\u636e 0xAB\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a outb 0xAB, 0x80 mmap \uff1a\u7528\u4e8e\u5c06\u8bbe\u5907\u7684\u5bc4\u5b58\u5668\u6620\u5c04\u5230\u7528\u6237\u7a7a\u95f4\u7684\u5185\u5b58\u5730\u5740\u3002\u8fd9\u6837\uff0c\u5728\u7528\u6237\u7a7a\u95f4\u5c31\u53ef\u4ee5\u76f4\u63a5\u8bfb\u5199\u8bbe\u5907\u7684\u5bc4\u5b58\u5668\uff0c\u800c\u65e0\u9700\u901a\u8fc7\u5185\u6838\u6001\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u3002\u5177\u4f53\u4f7f\u7528\u65b9\u6cd5\u53ef\u4ee5\u53c2\u8003 mmap() \u7cfb\u7edf\u8c03\u7528\u7684\u6587\u6863\u3002 \u7f51\u5361\u786c\u4e2d\u65ad\u7684\u4e00\u4e2a\u4f7f\u7528 inw \u7684\u4f8b\u5b50 /* * The typical workload of the driver: * Handle the network interface interrupts. */ static irqreturn_t net_interrupt(int irq, void *dev_id) // \u6ce8\u610f\u53c2\u6570\u662f\uff1a\u4e2d\u65ad\u53f7\u548c\u8bbe\u5907id { struct net_device *dev = dev_id; struct net_local *np; int ioaddr, status; int handled = 0; ioaddr = dev->base_addr; // \u8bbe\u5907\u7684IO\u5730\u5740 np = netdev_priv(dev); // \u5f97\u5230dev\u79c1\u6709\u6570\u636e status = inw(ioaddr + 0); // \u4ece\u7aef\u53e3\u8bfb\u4e24\u4e2a\u5b57\u8282 if (status == 0) goto out; handled = 1; if (status & RX_INTR) { /* Got a packet(s). */ net_rx(dev); // \u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570net_rx\u6765\u83b7\u53d6\u4e00\u4e2a\u6570\u636e\u5305 -----> receive } // \u8fd9\u4e2a\u51fd\u6570\u4e0b\u9762\u4f1a\u8bf4\u5230 #if TX_RING if (status & TX_INTR) { // \u53d1\u9001\u6570\u636e /* Transmit complete. */ net_tx(dev); // \u53d1\u9001\u6570\u636e\u4f7f\u7528net_tx ------> transmit np->stats.tx_packets++; // \u8ba1\u6570 netif_wake_queue(dev); // \u5904\u7406\u7ed3\u675f\uff0c\u5524\u9192\u4e0b\u4e00\u4e2a\u961f\u5217\u4e2d\u7b49\u5f85\u8005 } #endif if (status & COUNTERS_INTR) { /* Increment the appropriate 'localstats' field. */ np->stats.tx_window_errors++; } out: return IRQ_RETVAL(handled); // \u8fd4\u56de\u4e2d\u65ad } \u53ef\u4ee5\u770b\u5230\u7f51\u5361\u786c\u4e2d\u65ad\u65f6\uff0c\u901a\u8fc7 inw \u51fd\u6570\u83b7\u53d6\u7f51\u5361\u72b6\u6001,\u6765\u5224\u65ad\u662f\u6709\u6570\u636e\u63a5\u6536\u5b8c\u6210\u8fd8\u662f\u6709\u6570\u636e\u53d1\u9001\u5b8c\u6210 \u66f4\u591a\u53c2\u8003","title":"\u7b2c\u56db\u7bc7 \u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u5b9e\u73b0\u539f\u7406\u548c\u7269\u7406\u5185\u5b58\u5730\u5740\u7a7a\u95f4\u548cIO\u7aef\u53e3\u7a7a\u95f4"},{"location":"chapter_14/4_zifushebeiqudongyuanli/#_1","text":"\u672c\u7bc7\u603b\u7ed3\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u539f\u7406 \u5982\u679c\u53ea\u60f3\u4e86\u89e3\u539f\u7406, \u53ea\u9700\u770b \u7ed3\u8bba \u90e8\u5206 \u7b80\u5355\u63cf\u8ff0 ioremap \u548c\u4e3a\u4ec0\u4e48\u9700\u8981\u6709 ioremap","title":"\u6982\u8ff0"},{"location":"chapter_14/4_zifushebeiqudongyuanli/#_2","text":"Linux \u7684\u5b57\u7b26\u8bbe\u5907(\u6bd4\u5982 LED \u706f), \u5b83\u4ece\u5382\u5546\u8fd9\u8fb9\u8d2d\u4e70\u56de\u6765, \u63a5\u5165\u4e3b\u673a\u540e, \u5176 \u5bc4\u5b58\u5668\u7269\u7406\u5185\u5b58\u5730\u5740\u662f\u786e\u5b9a\u7684\u5e76\u4e14\u662f\u8fde\u7eed\u7684 . \u9a71\u52a8\u7a0b\u5e8f\u5230\u6700\u540e\u8fdb\u884c\u8bbe\u5907\u64cd\u4f5c\u65f6, \u5176\u5b9e \u5c31\u662f\u4fee\u6539\u8fd9\u4e9b\u7269\u7406\u5185\u5b58\u5730\u5740\u7684\u503c . \u600e\u4e48\u4fee\u6539\u5462? \u5206\u4e3a\u4e24\u6b65: 1 \u5148\u628a\u8bbe\u5907\u7684\u7269\u7406\u5185\u5b58\u5730\u5740\u6620\u5c04\u4e3a\u865a\u62df\u5185\u5b58\u5730\u5740(\u4f7f\u7528\u5185\u6838 API \u51fd\u6570 ioremap ) 2 \u4fee\u6539\u865a\u62df\u5185\u5b58\u5730\u5740, \u6bd4\u5982: \u8bbe\u7f6e\u4e3a 1 \u8868\u793a\u6253\u5f00 LED \u706f, \u8bbe\u7f6e\u4e3a 0 \u8868\u793a\u5173\u95ed LED \u706f. \u9a71\u52a8\u5fc5\u5907\u57fa\u7840\u77e5\u8bc6","title":"\u4e00 \u7ed3\u8bba"},{"location":"chapter_14/4_zifushebeiqudongyuanli/#_3","text":"","title":"\u4e8c \u53c2\u8003"},{"location":"chapter_14/4_zifushebeiqudongyuanli/#ioremap","text":"\u51e0\u4e4e\u6bcf\u4e00\u79cd\u5916\u8bbe\u90fd\u662f\u901a\u8fc7\u8bfb\u5199\u8bbe\u5907\u4e0a\u7684\u5bc4\u5b58\u5668\u6765\u8fdb\u884c\u7684 \uff0c\u901a\u5e38\u5305\u62ec \u63a7\u5236\u5bc4\u5b58\u5668 \u3001 \u72b6\u6001\u5bc4\u5b58\u5668 \u548c \u6570\u636e\u5bc4\u5b58\u5668 \u4e09\u5927\u7c7b\uff0c\u5916\u8bbe\u7684\u5bc4\u5b58\u5668\u901a\u5e38\u88ab\u8fde\u7eed\u5730\u7f16\u5740\u3002 \u6839\u636e CPU \u4f53\u7cfb\u7ed3\u6784\u7684\u4e0d\u540c\uff0cCPU \u5bf9 IO \u7aef\u53e3\u7684\u7f16\u5740\u65b9\u5f0f\u6709\u4e24\u79cd:","title":"\u4e00\u3001 ioremap() \u51fd\u6570\u57fa\u7840\u6982\u5ff5"},{"location":"chapter_14/4_zifushebeiqudongyuanli/#a-io-io-mapped","text":"\u5178\u578b\u5730\uff0c\u5982 X86 \u5904\u7406\u5668\u4e3a\u5916\u8bbe\u4e13\u95e8\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5355\u72ec\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u79f0\u4e3a\"I/O \u5730\u5740\u7a7a\u95f4\"\u6216\u8005\"I/O \u7aef\u53e3\u7a7a\u95f4\"\uff0cCPU \u901a\u8fc7\u4e13\u95e8\u7684 I/O \u6307\u4ee4\uff08\u5982 X86 \u7684 IN \u548c OUT \u6307\u4ee4\uff09\u6765\u8bbf\u95ee\u8fd9\u4e00\u7a7a\u95f4\u4e2d\u7684\u5730\u5740\u5355\u5143\u3002","title":"a -- I/O \u6620\u5c04\u65b9\u5f0f\uff08I/O-mapped\uff09"},{"location":"chapter_14/4_zifushebeiqudongyuanli/#b-memory-mapped","text":"RISC \u6307\u4ee4\u7cfb\u7edf\u7684 CPU\uff08\u5982 ARM\u3001PowerPC \u7b49\uff09\u901a\u5e38\u53ea\u5b9e\u73b0\u4e00\u4e2a\u7269\u7406\u5730\u5740\u7a7a\u95f4\uff0c\u5916\u8bbe I/O \u7aef\u53e3\u6210\u4e3a\u5185\u5b58\u7684\u4e00\u90e8\u5206\u3002\u6b64\u65f6\uff0cCPU \u53ef\u4ee5\u8c61\u8bbf\u95ee\u4e00\u4e2a\u5185\u5b58\u5355\u5143\u90a3\u6837\u8bbf\u95ee\u5916\u8bbe I/O \u7aef\u53e3\uff0c\u800c\u4e0d\u9700\u8981\u8bbe\u7acb\u4e13\u95e8\u7684\u5916\u8bbe I/O \u6307\u4ee4\u3002 \u4f46\u662f\uff0c\u8fd9\u4e24\u8005\u5728\u786c\u4ef6\u5b9e\u73b0\u4e0a\u7684\u5dee\u5f02\u5bf9\u4e8e\u8f6f\u4ef6\u6765\u8bf4\u662f\u5b8c\u5168\u900f\u660e\u7684\uff0c\u9a71\u52a8\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u5c06\u5185\u5b58\u6620\u5c04\u65b9\u5f0f\u7684 I/O \u7aef\u53e3\u548c\u5916\u8bbe\u5185\u5b58\u7edf\u4e00\u770b\u4f5c\u662f\"I/O \u5185\u5b58\"\u8d44\u6e90\u3002 \u4e00\u822c\u6765\u8bf4\uff0c \u5728\u7cfb\u7edf\u8fd0\u884c\u65f6\uff0c\u5916\u8bbe\u7684 I/O \u5185\u5b58\u8d44\u6e90\u7684\u7269\u7406\u5730\u5740\u662f\u5df2\u77e5\u7684\uff0c\u7531\u786c\u4ef6\u7684\u8bbe\u8ba1\u51b3\u5b9a\u3002 \u4f46\u662f CPU \u901a\u5e38\u5e76\u6ca1\u6709\u4e3a\u8fd9\u4e9b\u5df2\u77e5\u7684\u5916\u8bbe I/O \u5185\u5b58\u8d44\u6e90\u7684\u7269\u7406\u5730\u5740\u9884\u5b9a\u4e49\u865a\u62df\u5730\u5740\u8303\u56f4\uff0c\u9a71\u52a8\u7a0b\u5e8f\u5e76\u4e0d\u80fd\u76f4\u63a5\u901a\u8fc7\u7269\u7406\u5730\u5740\u8bbf\u95ee I/O \u5185\u5b58\u8d44\u6e90\uff0c\u800c\u5fc5\u987b\u5c06\u5b83\u4eec\u6620\u5c04\u5230\u6838\u5fc3\u865a\u5730\u5740\u7a7a\u95f4\u5185\uff08\u901a\u8fc7\u9875\u8868\uff09\uff0c\u7136\u540e\u624d\u80fd\u6839\u636e\u6620\u5c04\u6240\u5f97\u5230\u7684\u6838\u5fc3\u865a\u5730\u5740\u8303\u56f4\uff0c\u901a\u8fc7\u8bbf\u5185\u6307\u4ee4\u8bbf\u95ee\u8fd9\u4e9b I/O \u5185\u5b58\u8d44\u6e90\u3002 Linux \u5728 io.h \u5934\u6587\u4ef6\u4e2d\u58f0\u660e\u4e86\u51fd\u6570 ioremap\uff08\uff09\uff0c\u7528\u6765\u5c06 I/O \u5185\u5b58\u8d44\u6e90\u7684\u7269\u7406\u5730\u5740\u6620\u5c04\u5230\u6838\u5fc3\u865a\u5730\u5740\u7a7a\u95f4\uff083GB\uff0d4GB\uff09\u4e2d\uff08\u8fd9\u91cc\u662f\u5185\u6838\u7a7a\u95f4\uff09\uff0c\u539f\u578b\u5982\u4e0b\uff1a","title":"b -- \u5185\u5b58\u6620\u5c04\u65b9\u5f0f\uff08Memory-mapped\uff09"},{"location":"chapter_14/4_zifushebeiqudongyuanli/#1ioremap","text":"ioremap\u5b8f\u5b9a\u4e49\u5728asm/io.h\u5185\uff1a #define ioremap(cookie,size) __ioremap(cookie,size,0) __ioremap \u51fd\u6570\u539f\u578b\u4e3a(arm/mm/ioremap.c)\uff1a void **iomem \\* **ioremap(unsigned long phys_addr, size_t size, unsigned long flags); \u53c2\u6570\uff1a phys_addr\uff1a\u8981\u6620\u5c04\u7684\u8d77\u59cb\u7684 IO \u5730\u5740 size\uff1a\u8981\u6620\u5c04\u7684\u7a7a\u95f4\u7684\u5927\u5c0f flags\uff1a\u8981\u6620\u5c04\u7684 IO \u7a7a\u95f4\u548c\u6743\u9650\u6709\u5173\u7684\u6807\u5fd7 \u8be5\u51fd\u6570\u8fd4\u56de\u6620\u5c04\u540e\u7684\u5185\u6838\u865a\u62df\u5730\u5740(3G-4G). \u63a5\u7740\u4fbf\u53ef\u4ee5\u901a\u8fc7\u8bfb\u5199\u8be5\u8fd4\u56de\u7684\u5185\u6838\u865a\u62df\u5730\u5740\u53bb\u8bbf\u95ee\u4e4b\u8fd9\u6bb5 I/O \u5185\u5b58\u8d44\u6e90\u3002","title":"1\u3001ioremap \u51fd\u6570"},{"location":"chapter_14/4_zifushebeiqudongyuanli/#2iounmap","text":"iounmap\u51fd\u6570\u7528\u4e8e\u53d6\u6d88ioremap\uff08\uff09\u6240\u505a\u7684\u6620\u5c04\uff0c\u539f\u578b\u5982\u4e0b\uff1a void iounmap(void * addr);","title":"2\u3001iounmap \u51fd\u6570"},{"location":"chapter_14/4_zifushebeiqudongyuanli/#ioremap_1","text":"","title":"\u4e8c ioremap() \u7684\u5b9e\u73b0\u5185\u5e55"},{"location":"chapter_14/4_zifushebeiqudongyuanli/#_4","text":"ioremap() \u7684\u5b9e\u73b0\u5185\u5e55\u4f1a\u6d89\u53ca\u5230\u6bd4\u8f83\u591a\u7684\u5185\u5b58\u7ba1\u7406\u7684\u77e5\u8bc6\uff0c\u8fd9\u91cc\u6211\u4eec\u629b\u5f00\u4ee3\u7801\u7ec6\u8282\u7b80\u5355\u4e86\u89e3\u4e00\u4e0b\u539f\u7406\u5c31\u597d\u3002 ioremap() \u5c06 vmalloc \u533a\u7684\u67d0\u6bb5\u865a\u62df\u5185\u5b58\u5757\u6620\u5c04\u5230 io memory\uff0c\u5176\u5b9e\u73b0\u539f\u7406\u4e0e vmalloc() \u7c7b\u4f3c\uff0c\u90fd\u662f\u901a\u8fc7\u5728 vmalloc \u533a\u5206\u914d\u865a\u62df\u5730\u5740\u5757\uff0c\u7136\u540e\u4fee\u6539\u5185\u6838\u9875\u8868\u7684\u65b9\u5f0f\u5c06\u5176\u6620\u5c04\u5230\u8bbe\u5907\u7684 I/O \u5730\u5740\u7a7a\u95f4\u3002 \u4e0e vmalloc() \u4e0d\u540c\u7684\u662f\uff0cioremap \u5e76\u4e0d\u9700\u8981\u901a\u8fc7\u4f19\u4f34\u7cfb\u7edf\u53bb\u5206\u914d\u7269\u7406\u9875\uff0c\u56e0\u4e3a ioremap \u8981\u6620\u5c04\u7684\u76ee\u6807\u5730\u5740\u662f io memory\uff0c\u4e0d\u662f\u7269\u7406\u5185\u5b58 (RAM)\u3002 ---> \u53ef\u89c1 x86 \u4e0a, \u662f\u6709\u4e24\u4e2a\u7269\u7406\u5185\u5b58\u7a7a\u95f4\u7684.","title":"\u5176\u4e00"},{"location":"chapter_14/4_zifushebeiqudongyuanli/#_5","text":"\u5728\u7f16\u5199 linux \u9a71\u52a8\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u53ef\u907f\u514d\u7684\u4f1a\u6d89\u53ca\u64cd\u4f5c\u5916\u8bbe\uff0c\u800c\u5916\u8bbe\u7684\u5730\u5740\u7a7a\u95f4\u4e0e DDR \u7684\u5730\u5740\u7a7a\u95f4\u4e00\u822c\u4e0d\u8fde\u7eed\uff0c\u5728 linux \u4e0a\u7535\u65f6\uff0c\u5e76\u4e0d\u4f1a\u4e3a\u5916\u8bbe\u5730\u5740\u7a7a\u95f4\u5efa\u7acb\u9875\u8868\uff0c\u53c8\u56e0\u4e3a linux \u8bbf\u95ee\u5185\u5b58\u4f7f\u7528\u7684\u90fd\u662f\u865a\u62df\u5730\u5740\uff0c\u56e0\u6b64\u5982\u679c\u60f3\u8bbf\u95ee\u5916\u8bbe\u7684\u5bc4\u5b58\u5668\uff08\u4e00\u822c\u5305\u62ec \u6570\u636e\u5bc4\u5b58\u5668 \u3001 \u63a7\u5236\u5bc4\u5b58\u5668 \u4e0e \u72b6\u6001\u5bc4\u5b58\u5668 \uff09\uff0c\u9700\u8981\u5728\u9a71\u52a8\u521d\u59cb\u5316\u4e2d\u5c06\u5916\u8bbe\u6240\u5904\u7684\u7269\u7406\u5730\u5740\u6620\u5c04\u4e3a\u865a\u62df\u5730\u5740\uff0clinux \u4e3a\u5e94\u5bf9\u8be5\u95ee\u9898\u63d0\u4f9b\u4e86\u8f83\u591a\u63a5\u53e3\uff0c\u5305\u62ec ioremap/ioremap_wc/devm_ioremap/devm_ioremap_resource \u7b49\uff0c\u4ee5\u5e94\u5bf9\u4e0d\u540c\u7684\u573a\u666f\u9700\u6c42\uff0c\u672c\u6587 \u5373\u9610\u8ff0\u8fd9\u4e9b\u63a5\u53e3\u7684\u4f7f\u7528\uff0c\u4ee5\u53ca\u9700\u8981\u6ce8\u610f\u7684\u533a\u522b\u3002 \u5728\u7cfb\u7edf\u8fd0\u884c\u65f6\uff0c\u5916\u8bbe IO \u8d44\u6e90\u7684\u7269\u7406\u5730\u5740\u662f\u5df2\u77e5\u7684\uff0c\u7531\u786c\u4ef6\u7684\u8bbe\u8ba1\u51b3\u5b9a\uff08\u53c2\u8003 SOC \u7684 datesheet\uff0c\u4e00\u822c\u4f1a\u6709 memorymap\uff09\u3002 \u9a71\u52a8\u7a0b\u5e8f\u4e0d\u80fd\u901a\u8fc7\u7269\u7406\u5730\u5740\u8bbf\u95ee IO \u8d44\u6e90\uff0c\u5fc5\u987b\u5c06\u5176\u6620\u5c04\u5230\u5185\u6838\u6001\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff08\u901a\u8fc7\u9875\u8868\uff09\uff0c\u7136\u540e\u6839\u636e\u6620\u5c04\u6240\u5f97\u5230\u7684\u5185\u6838\u865a\u62df\u5730\u5740\u8303\u56f4\uff0c\u901a\u8fc7\u7ebf\u6027\u504f\u79fb\uff08 virt_addr = virt_base + phy_addr - phy_base \uff09\u8bbf\u95ee\u8fd9\u4e9b IO \u5185\u5b58\u8d44\u6e90\u3002","title":"\u5176\u4e8c"},{"location":"chapter_14/4_zifushebeiqudongyuanli/#linux-ioremap","text":"\u539f\u56e0 \u8fd9\u91cc\u53ea\u8003\u8651\u6709 MMU \u7684\u82af\u7247\uff0cLinux \u4e3a\u4e86\u5b9e\u73b0\u8fdb\u7a0b\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u5728\u542f\u7528 MMU \u540e\uff0c\u5728\u5185\u6838\u4e2d\u64cd\u4f5c\u7684\u90fd\u662f\u865a\u62df\u5730\u5740\uff0c\u5185\u6838\u8bbf\u95ee\u4e0d\u5230\u7269\u7406\u5730\u5740\u3002 \u5982\u679c\u5728\u9a71\u52a8\u91cc\u76f4\u63a5\u8bbf\u95ee\u7269\u7406\u5730\u5740\uff0c\u7b49\u4e8e\u8bbf\u95ee\u4e86\u4e00\u4e2a\u975e\u6cd5\u5730\u5740\uff0c\u4f1a\u5bfc\u81f4\u5185\u6838\u5d29\u6e83\uff0c\u4e0b\u9762\u4f1a\u6709\u4e00\u4e2a\u76f8\u5173\u7684\u5c0f\u5b9e\u9a8c\u3002 \u901a\u8fc7 ioremap \u5c06\u7269\u7406\u5730\u5740\u6620\u5c04\u4e3a\u865a\u62df\u5730\u5740\u540e\uff0c\u5185\u6838\u5c31\u80fd\u901a\u8fc7 ioremap() \u8fd4\u56de\u7684\u865a\u62df\u5730\u5740\uff0c\u4ee5 \u865a\u62df\u5730\u5740->mmu \u9875\u8868\u6620\u5c04-> \u7269\u7406\u5730\u5740 \u7684\u5f62\u5f0f\u6b63\u786e\u5730\u8bbf\u95ee\u5230\u7269\u7406\u5730\u5740\u4e86\u3002 ARM Linux \u5f15\u5165\u8bbe\u5907\u6811\u7279\u6027\u540e\uff0c\u4e00\u4e9b\u652f\u6301\u8bbe\u5907\u6811\u7684\u8bbe\u5907\u9a71\u52a8\u4e0d\u518d\u4f7f\u7528\u76f4\u63a5 ioremap()\uff0c\u6539\u7528 drivers/of/address.c/of_iomap()\uff0cof_iomap() \u7684\u5185\u90e8\u4ecd\u7136\u4f1a\u8c03\u7528 ioremap()\uff0c\u4f8b\u5982\uff1a clk-rk3288.c (drivers\\clk\\rockchip) static void rk3288_clk_init(struct device_node *np) { rk3288_cru_base = of_iomap(np, 0); [...] }","title":"\u5176\u4e09 Linux \u64cd\u4f5c\u5bc4\u5b58\u5668\u524d\u4e3a\u4ec0\u4e48\u8981 ioremap"},{"location":"chapter_14/4_zifushebeiqudongyuanli/#io","text":"","title":"\u4e09 \u66f4\u591a\u5173\u4e8e\u7269\u7406\u5185\u5b58\u5730\u5740\u7a7a\u95f4\u548c IO \u7aef\u53e3\u7a7a\u95f4"},{"location":"chapter_14/4_zifushebeiqudongyuanli/#_6","text":"\u5916\u8bbe\u90fd\u662f\u901a\u8fc7\u8bfb\u5199\u8bbe\u5907\u4e0a\u7684\u5bc4\u5b58\u5668\u6765\u8fdb\u884c\u5de5\u4f5c\u7684\uff0c\u5916\u8bbe\u5bc4\u5b58\u5668\u4e5f\u79f0\u4e3a IO\u7aef\u53e3 \uff0c\u800c IO\u7aef\u53e3 \u7684\u7f16\u5740\u65b9\u5f0f\u6709\u4e24\u79cd\uff0c \u72ec\u7acb\u7f16\u5740 \u548c \u7edf\u4e00\u7f16\u5740 \u3002 \u72ec\u7acb\u7f16\u5740 \u4e3a\u7aef\u53e3\u5730\u5740\u5355\u72ec\u5f00\u8f9f\u4e00\u90e8\u5206\u5730\u5740\u7a7a\u95f4\uff0c\u5176\u8bbf\u95ee\u6307\u4ee4\u4e5f\u9700\u8981\u4f7f\u7528\u5355\u72ec\u7684\u6307\u4ee4\uff08\u4e0d\u540c\u4e8e\u5185\u5b58\u8bbf\u95ee\u6307\u4ee4\uff09\u3002 \u7edf\u4e00\u7f16\u5740 : \u5916\u8bbe\u63a5\u53e3\u4e2d\u7684 IO \u5bc4\u5b58\u5668\uff08\u5373 IO \u7aef\u53e3 \uff09\u4e0e\u4e3b\u5b58\u5355\u5143\u4e00\u6837\u770b\u5f85\uff0c\u6bcf\u4e2a\u7aef\u53e3\u5360\u7528\u4e00\u4e2a\u5b58\u50a8\u5355\u5143\u7684\u5730\u5740\uff0c\u5c06\u4e3b\u5b58\u7684\u4e00\u90e8\u5206\u5212\u51fa\u6765\u7528\u4f5c IO \u5730\u5740\u7a7a\u95f4\u3002 \u7edf\u4e00\u7f16\u5740\u7684\u539f\u7406\u662f\u5c06 IO \u7684\u7aef\u53e3\u5730\u5740\u5b58\u50a8\u5668\u5bfb\u5740\u7684\u5730\u5740\u7a7a\u95f4\u8303\u56f4\u4e4b\u5185\uff0c\u6b64\u65b9\u6cd5\u4e5f\u6210\u4e3a\u5b58\u50a8\u5668\u6620\u50cf\u7f16\u5740\u3002CPU \u8bbf\u95ee\u4e00\u4e2a\u7aef\u53e3\u7684\u64cd\u4f5c\u4e0e\u8bbf\u95ee\u5185\u5b58\u7684\u64cd\u4f5c\u76f8\u540c\uff0c\u4e5f\u4f7f\u7528\u8bbf\u95ee\u5185\u5b58\u7684\u6307\u4ee4\u3002 \u6839\u636e CPU \u4f53\u7cfb\u7ed3\u6784\u7684\u4e0d\u540c\uff0cCPU \u5bf9 IO \u7aef\u53e3\u7684\u7f16\u5740\u65b9\u5f0f\u6709\u4e24\u79cd\uff1a \uff081\uff09I/O \u6620\u5c04\u65b9\u5f0f\uff08I/O-mapped\uff09 \u5178\u578b\u5730\uff0c\u5982 X86 \u5904\u7406\u5668\u4e3a\u5916\u8bbe\u4e13\u95e8\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5355\u72ec\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u79f0\u4e3a\"I/O \u5730\u5740\u7a7a\u95f4\"\u6216\u8005\"I/O \u7aef\u53e3\u7a7a\u95f4\"\uff0cCPU \u901a\u8fc7\u4e13\u95e8\u7684 I/O \u6307\u4ee4\uff08\u5982 X86 \u7684 IN \u548c OUT \u6307\u4ee4\uff09\u6765\u8bbf\u95ee\u8fd9\u4e00\u7a7a\u95f4\u4e2d\u7684\u5730\u5740\u5355\u5143\u3002 \uff082\uff09\u5185\u5b58\u6620\u5c04\u65b9\u5f0f\uff08Memory-mapped\uff09 \u3000\u3000 RISC \u6307\u4ee4\u7cfb\u7edf\u7684 CPU\uff08\u5982 ARM\u3001PowerPC \u7b49\uff09\u901a\u5e38\u53ea\u5b9e\u73b0\u4e00\u4e2a\u7269\u7406\u5730\u5740\u7a7a\u95f4\uff0c\u5916\u8bbe I/O \u7aef\u53e3\u6210\u4e3a\u5185\u5b58\u7684\u4e00\u90e8\u5206\u3002\u6b64\u65f6\uff0cCPU \u53ef\u4ee5\u8c61\u8bbf\u95ee\u4e00\u4e2a\u5185\u5b58\u5355\u5143\u90a3\u6837\u8bbf\u95ee\u5916\u8bbe I/O \u7aef\u53e3\uff0c\u800c\u4e0d\u9700\u8981\u8bbe\u7acb\u4e13\u95e8\u7684\u5916\u8bbe I/O \u6307\u4ee4\u3002 \u4f46\u662f\uff0c \u8fd9\u4e24\u8005\u5728\u786c\u4ef6\u5b9e\u73b0\u4e0a\u7684\u5dee\u5f02\u5bf9\u4e8e\u8f6f\u4ef6\u6765\u8bf4\u662f\u5b8c\u5168\u900f\u660e\u7684\uff0c\u9a71\u52a8\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u5c06\u5185\u5b58\u6620\u5c04\u65b9\u5f0f\u7684 I/O \u7aef\u53e3\u548c\u5916\u8bbe\u5185\u5b58\u7edf\u4e00\u770b\u4f5c\u662f\"I/O \u5185\u5b58\"\u8d44\u6e90\u3002","title":"\u80cc\u666f"},{"location":"chapter_14/4_zifushebeiqudongyuanli/#readxwritex","text":"\u5728\u5c06 I/O \u5185\u5b58\u8d44\u6e90\u7684\u7269\u7406\u5730\u5740\u6620\u5c04\u6210\u6838\u5fc3\u865a\u5730\u5740\u540e\uff0c\u7406\u8bba\u4e0a\u8bb2\u6211\u4eec\u5c31\u53ef\u4ee5\u8c61\u8bfb\u5199 RAM \u90a3\u6837\u76f4\u63a5\u8bfb\u5199 I/O \u5185\u5b58\u8d44\u6e90\u4e86\u3002\u4e3a\u4e86\u4fdd\u8bc1\u9a71\u52a8\u7a0b\u5e8f\u7684\u8de8\u5e73\u53f0\u7684\u53ef\u79fb\u690d\u6027\uff0c\u6211\u4eec\u5e94\u8be5\u4f7f\u7528 Linux \u4e2d\u7279\u5b9a\u7684\u51fd\u6570\u6765\u8bbf\u95ee I/O \u5185\u5b58\u8d44\u6e90\uff0c\u800c\u4e0d\u5e94\u8be5\u901a\u8fc7\u6307\u5411\u6838\u5fc3\u865a\u5730\u5740\u7684\u6307\u9488\u6765\u8bbf\u95ee, \u4f7f\u7528\u7279\u5b9a\u51fd\u6570\u7684\u8bdd\u5c31\u7528\u5230 Linux \u5728\u8fd9\u4e00\u5c42\u4e13\u95e8\u5c01\u88c5\u7684\u4e00\u5c42\u5b50\u7cfb\u7edf\u5c4f\u853d\u4e86\u5404\u4e2a CPU \u5e73\u53f0\u7684\u7ec6\u8282(\u4f7f\u7528\u8fd9\u4e9b\u7279\u5b9a\u51fd\u6570, \u4f1a\u5c4f\u853d X86 \u548c Arm \u5e73\u53f0\u7ec6\u8282)\u3002\u8bfb\u5199 I/O \u7684\u51fd\u6570\u5c31\u662f\u8fd9\u91cc\u63d0\u5230\u7684 readX/writeX() \u7cfb\u5217\u51fd\u6570, \u5305\u62ec\u540e\u7eed\u7684 inb \u3001 inw \u3001 inl , outb \u3001 outw \u3001 outl \u7b49\u3002 readX/writeX() are used to access memory mapped devices. On some architectures the memory mapped IO stuff needs to be accessed differently. On the simple architectures, we just read/write the memory location directly. writel() \u5f80\u5185\u5b58\u6620\u5c04\u7684 I/O \u7a7a\u95f4\u4e0a\u5199\u6570\u636e\uff0cwirtel() I/O \u4e0a\u5199\u5165 32 \u4f4d\u6570\u636e (4 \u5b57\u8282)\u3002 \u539f\u578b\uff1a #include void writel (unsigned char data , unsigned short addr ) readl() \u4ece\u5185\u5b58\u6620\u5c04\u7684 I/O \u7a7a\u95f4\u8bfb\u53d6\u6570\u636e,readl \u4ece I/O \u8bfb\u53d6 32 \u4f4d\u6570\u636e ( 4 \u5b57\u8282 )\u3002 \u539f\u578b\uff1a #include unsigned char readl (unsigned int addr ) \u53d8\u91cf addr \u662f I/O \u5730\u5740\u3002 \u8fd4\u56de\u503c \uff1a \u4ece I/O \u7a7a\u95f4\u8bfb\u53d6\u7684\u6570\u503c\u3002","title":"readX/writeX \u7cfb\u5217\u51fd\u6570"},{"location":"chapter_14/4_zifushebeiqudongyuanli/#linux","text":"\u5728 Linux \u7cfb\u7edf\u4e2d\uff0c\u8981\u8bfb\u5199\u5bc4\u5b58\u5668\uff0c\u9700\u8981\u4f7f\u7528\u7279\u5b9a\u7684\u547d\u4ee4\u548c\u5de5\u5177\u3002\u4ee5\u4e0b\u662f\u5e38\u7528\u7684\u51e0\u4e2a\u547d\u4ee4\uff1a \u5b9a\u4e49\u5728 kernel/io.c \u4e2d inb \u3001 inw \u3001 inl \uff1a\u7528\u4e8e\u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282\u3001\u4e00\u4e2a\u5b57\u6216\u8005\u4e00\u4e2a\u53cc\u5b57\u7684 I/O \u7aef\u53e3\u3002\u4f8b\u5982\uff0c\u8981\u8bfb\u53d6\u7aef\u53e3\u53f7\u4e3a 0x80 \u7684\u4e00\u4e2a\u5b57\u8282\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a inb 0x80 outb \u3001 outw \u3001 outl \uff1a\u7528\u4e8e\u5411\u4e00\u4e2a I/O \u7aef\u53e3\u5199\u5165\u4e00\u4e2a\u5b57\u8282\u3001\u4e00\u4e2a\u5b57\u6216\u8005\u4e00\u4e2a\u53cc\u5b57\u3002\u4f8b\u5982\uff0c\u8981\u5411\u7aef\u53e3\u53f7\u4e3a 0x80 \u7684\u4e00\u4e2a\u5b57\u8282\u5199\u5165\u6570\u636e 0xAB\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a outb 0xAB, 0x80 mmap \uff1a\u7528\u4e8e\u5c06\u8bbe\u5907\u7684\u5bc4\u5b58\u5668\u6620\u5c04\u5230\u7528\u6237\u7a7a\u95f4\u7684\u5185\u5b58\u5730\u5740\u3002\u8fd9\u6837\uff0c\u5728\u7528\u6237\u7a7a\u95f4\u5c31\u53ef\u4ee5\u76f4\u63a5\u8bfb\u5199\u8bbe\u5907\u7684\u5bc4\u5b58\u5668\uff0c\u800c\u65e0\u9700\u901a\u8fc7\u5185\u6838\u6001\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u3002\u5177\u4f53\u4f7f\u7528\u65b9\u6cd5\u53ef\u4ee5\u53c2\u8003 mmap() \u7cfb\u7edf\u8c03\u7528\u7684\u6587\u6863\u3002 \u7f51\u5361\u786c\u4e2d\u65ad\u7684\u4e00\u4e2a\u4f7f\u7528 inw \u7684\u4f8b\u5b50 /* * The typical workload of the driver: * Handle the network interface interrupts. */ static irqreturn_t net_interrupt(int irq, void *dev_id) // \u6ce8\u610f\u53c2\u6570\u662f\uff1a\u4e2d\u65ad\u53f7\u548c\u8bbe\u5907id { struct net_device *dev = dev_id; struct net_local *np; int ioaddr, status; int handled = 0; ioaddr = dev->base_addr; // \u8bbe\u5907\u7684IO\u5730\u5740 np = netdev_priv(dev); // \u5f97\u5230dev\u79c1\u6709\u6570\u636e status = inw(ioaddr + 0); // \u4ece\u7aef\u53e3\u8bfb\u4e24\u4e2a\u5b57\u8282 if (status == 0) goto out; handled = 1; if (status & RX_INTR) { /* Got a packet(s). */ net_rx(dev); // \u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570net_rx\u6765\u83b7\u53d6\u4e00\u4e2a\u6570\u636e\u5305 -----> receive } // \u8fd9\u4e2a\u51fd\u6570\u4e0b\u9762\u4f1a\u8bf4\u5230 #if TX_RING if (status & TX_INTR) { // \u53d1\u9001\u6570\u636e /* Transmit complete. */ net_tx(dev); // \u53d1\u9001\u6570\u636e\u4f7f\u7528net_tx ------> transmit np->stats.tx_packets++; // \u8ba1\u6570 netif_wake_queue(dev); // \u5904\u7406\u7ed3\u675f\uff0c\u5524\u9192\u4e0b\u4e00\u4e2a\u961f\u5217\u4e2d\u7b49\u5f85\u8005 } #endif if (status & COUNTERS_INTR) { /* Increment the appropriate 'localstats' field. */ np->stats.tx_window_errors++; } out: return IRQ_RETVAL(handled); // \u8fd4\u56de\u4e2d\u65ad } \u53ef\u4ee5\u770b\u5230\u7f51\u5361\u786c\u4e2d\u65ad\u65f6\uff0c\u901a\u8fc7 inw \u51fd\u6570\u83b7\u53d6\u7f51\u5361\u72b6\u6001,\u6765\u5224\u65ad\u662f\u6709\u6570\u636e\u63a5\u6536\u5b8c\u6210\u8fd8\u662f\u6709\u6570\u636e\u53d1\u9001\u5b8c\u6210 \u66f4\u591a\u53c2\u8003","title":"\u66f4\u591aLinux \u8bfb\u5199\u5bc4\u5b58\u5668\u547d\u4ee4"},{"location":"chapter_14/5_device_tree/","text":"\u6982\u8ff0 \u603b\u7ebf\u9a71\u52a8\u6a21\u578b \u8bbe\u5907\u6811(\u662f\u4ec0\u4e48, \u6709\u5565\u597d, \u600e\u4e48\u529e) \u9996\u5148\u53ea\u6709 Arm \u67b6\u6784\u9700\u8981\u8bbe\u5907\u6811, x86 \u67b6\u6784\u4e0d\u9700\u8981\u8bbe\u5907\u6811. \u603b\u7ebf\u9a71\u52a8\u6a21\u578b \u4e00 \u662f\u4ec0\u4e48 \u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e2d\u6709\u5f88\u591a\u7684\u7269\u7406\u603b\u7ebf\uff1aI2c\u3001SPI\u3001USB\u3001uart\u3001PCIE\u3001APB\u3001AHB linux \u4ece 2.6 \u8d77\u5c31\u52a0\u5165\u4e86\u4e00\u5957\u65b0\u7684\u9a71\u52a8\u7ba1\u7406\u548c\u6ce8\u518c\u7684\u673a\u5236 platform \u5e73\u53f0\u603b\u7ebf\uff0c\u662f\u4e00\u6761 \u865a\u62df\u7684\u603b\u7ebf ,\u5e76\u4e0d\u662f\u4e00\u4e2a \u7269\u7406\u7684\u603b\u7ebf \u3002 \u76f8\u6bd4 PCI\u3001USB\uff0c\u5b83\u4e3b\u8981\u7528\u4e8e\u63cf\u8ff0 SOC \u4e0a\u7684\u7247\u4e0a\u8d44\u6e90\u3002platform \u6240\u63cf\u8ff0\u7684\u8d44\u6e90\u6709\u4e00\u4e2a\u5171\u540c\u70b9\uff1a\u5728 CPU \u7684\u603b\u7ebf\u4e0a\u76f4\u63a5\u53d6\u5740\u3002 \u53ef\u89c1\u8fd9\u4e2a platform \u673a\u5236\u4e5f\u662f\u7528\u4e8e\u5d4c\u5165\u5f0f\u65b9\u5411. \u6700\u91cd\u8981\u7684\u4e24\u4e2a\u7ed3\u6784\u4f53 struct platform_device platform_device \u7528\u4e8e\u63cf\u8ff0\u8bbe\u5907\u786c\u4ef6\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u62ec\u8be5\u786c\u4ef6\u7684\u6240\u6709 \u8d44\u6e90 \uff08io\uff0cmemory\u3001\u4e2d\u65ad\u3001DMA \u7b49\u7b49\uff09\u3002 struct platform_driver \u5173\u4e8e struct resource \u4e00\u4e2a\u4f8b\u5b50 struct resource { resource_size_t start; //\u8868\u793a\u8d44\u6e90\u7684\u8d77\u59cb\u503c\uff0c resource_size_t end; //\u8868\u793a\u8d44\u6e90\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u5730\u5740\uff0c \u5982\u679c\u662f\u4e2d\u65ad\uff0cend\u548csatrt\u76f8\u540c const char *name; // \u53ef\u4e0d\u5199 unsigned long flags; //\u8d44\u6e90\u7684\u7c7b\u578b, \u6bd4\u5982io\uff0cmemory\u3001\u4e2d\u65ad\u3001DMA\u7b49\u7b49 struct resource *parent, *sibling, *child; }; #define IORESOURCE_MEM 0x00000200 //\u5185\u5b58 #define IORESOURCE_IRQ 0x00000400 //\u4e2d\u65ad struct resource \u662f\u5d4c\u5957\u5728 struct platform_device \u5185\u90e8\u7684\u4e00\u4e2a\u6210\u5458, \u662f\u4e00\u4e2a struct platform_device \u5185\u90e8\u7684\u4e00\u4e2a\u6570\u7ec4\u6210\u5458. \u4e8c \u4e3a\u4ec0\u4e48 \u4e0e\u4f20\u7edf\u7684 bus/device/driver \u673a\u5236\u76f8\u6bd4\uff0cplatform \u7531\u5185\u6838\u8fdb\u884c\u7edf\u4e00\u7ba1\u7406\uff0c\u5728\u9a71\u52a8\u4e2d\u4f7f\u7528 \u8d44\u6e90 resource \uff0c\u63d0\u9ad8\u4e86\u4ee3\u7801\u7684\u5b89\u5168\u6027\u548c \u53ef\u79fb\u690d\u6027 \u3002 \u603b\u4f53\u6765\u8bf4\u8fd9\u5757\u9700\u8981\u770b\u6700\u539f\u59cb\u7684\u9a71\u52a8\u7a0b\u5e8f\u7684\u8fdb\u5316\u8fc7\u7a0b, \u4ee5 LED \u706f\u9a71\u52a8\u7a0b\u5e8f\u4e3a\u4f8b\u5b50. 1 \u539f\u59cb\u7248 \u53c2\u8003\u7b2c\u4e00\u7bc7 \u9a71\u52a8\u7a0b\u5e8f Hello World. 2 \u81ea\u5b9a\u4e49 platform_device \u7248\u672c \u5199\u9a71\u52a8\u7a0b\u5e8f\u8981\u5206\u4e24\u4e2a\u6587\u4ef6: device.ko \u548c driver.ko , \u5e76\u4e14\u5206\u522b\u52a0\u8f7d insmod device.ko , insmod driver.ko \u6b63\u89c4\u6d41\u7a0b\u68b3\u7406 \u5b89\u88c5\u6a21\u5757: insmod device.ko ---> \u76f8\u5f53\u4e8e\u63d2\u5165\u8bbe\u5907 insmod driver.ko ---> \u76f8\u5f53\u4e8e\u542f\u52a8\u9a71\u52a8\u7a0b\u5e8f, \u7136\u540e\u5185\u6838\u4f1a\u81ea\u52a8\u5339\u914d, \u5339\u914d\u5230\u4e86\u4e4b\u540e\u5c31\u4f1a\u81ea\u52a8\u8c03\u7528 probe \u65b9\u6cd5, \u56e0\u6b64 \u539f\u59cb\u7248 \u4e2d\u7684\u521d\u59cb\u5316\u9700\u8981\u5728 probe \u51fd\u6570\u4e2d\u5b9e\u73b0 \u5378\u8f7d\u6a21\u5757: rmmod device.ko ---> \u6a21\u62df\u8bbe\u5907\u62d4\u51fa\u7684\u60c5\u51b5, \u4f1a\u81ea\u52a8\u8c03\u7528 driver.ko \u4e2d\u7684 remove \u65b9\u6cd5, \u8bbe\u5907\u62d4\u51fa\u65f6\u5176\u5b9e\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u5e94\u8be5\u8981\u505a\u4e00\u4e9b\u4e8b\u60c5. rmmod driver.ko ---> \u76f8\u5f53\u4e8e\u5378\u8f7d\u9a71\u52a8\u7a0b\u5e8f 3 \u8bbe\u5907\u6811\u7248\u672c \u8bbe\u5907\u6811\u7248\u672c\u5176\u5b9e\u662f\u628a platform_device \u7684\u5b9a\u4e49\u8fc7\u7a0b\u79fb\u4ea4\u7ed9\u4e86 dts, \u7136\u540e\u7531 bootloader \u544a\u77e5\u5185\u6838 dtb \u6587\u4ef6\u4f4d\u7f6e,\u7531\u5185\u6838\u81ea\u52a8\u89e3\u6790 dtb \u6587\u4ef6\u751f\u6210 platform_device \u5728\u6ca1\u6709\u8bbe\u5907\u6811\u7684 Linux \u5185\u6838\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u5206\u522b\u7f16\u5199\u5e76\u6ce8\u518c platform_device \u548c platform_driver \uff0c\u5206\u522b\u4ee3\u8868 \u8bbe\u5907 \u548c \u9a71\u52a8 \u3002\u5728\u4f7f\u7528\u8bbe\u5907\u6811\u7684\u65f6\u5019\uff0c \u8bbe\u5907 \u7684\u63cf\u8ff0\u88ab\u653e\u5230\u4e86 \u8bbe\u5907\u6811 \u4e2d\uff0c\u56e0\u6b64 platform_device \u5c31\u4e0d\u9700\u8981\u6211\u4eec\u53bb\u7f16\u5199\u4e86\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5b9e\u73b0 platform_driver \u5373\u53ef \u4e09 \u600e\u4e48\u529e \u53c2\u8003 \u8fd9\u7bc7\u6587\u7ae0 1 platfrom_driver \u4e09\u8981\u7d20 \u9a71\u52a8\u5f00\u53d1\u6846\u67b6 \u5f97\u76ca\u4e8e\u8bbe\u5907\u6a21\u578b\uff0cLinux kernel \u5e73\u53f0\u9a71\u52a8\u7684\u5f00\u53d1\u6709\u4e86\u4e00\u5957\u975e\u5e38\u56fa\u5b9a\u7684\u6846\u67b6 1\uff09\u6a21\u5757\u7684\u5165\u53e3\u548c\u51fa\u53e3 \u7528\u4e8e\u6ce8\u518c/\u6ce8\u9500 platform driver\uff0c\u8fd9\u4e00\u90e8\u5206\u7684\u4ee3\u7801\u57fa\u672c\u56fa\u5b9a\uff0c\u5305\u62ec\u51fd\u6570\u548c\u53d8\u91cf\u7684\u547d\u540d\u65b9\u5f0f\u4e5f\u53ef\u56fa\u5b9a\uff0c\u5982\u4e0b\uff1a /* \u9a71\u52a8\u6a21\u5757\u52a0\u8f7d */ static int __init xxxdriver_init(void) { return platform_driver_register(&xxx_driver); } /* \u9a71\u52a8\u6a21\u5757\u5378\u8f7d */ static void __exit xxxdriver_exit(void) { platform_driver_unregister(&xxx_driver); } module_init(xxxdriver_init); module_exit(xxxdriver_exit); MODULE_LICENSE(\"GPL V2\"); MODULE_AUTHOR(\"QianRuShi-ABC\"); 2\uff09platform driver \u57fa\u672c\u7684 platform driver \u5305\u542b\u4e09\u8981\u7d20\uff1a struct platform_driver\u53d8\u91cf \u3001 probe/remove\u51fd\u6570 \u3001 \u7528\u4e8e\u548cdevice tree\u5339\u914d\u7684match table \uff0c\u5982\u4e0b\uff1a /* * platform \u5e73\u53f0\u9a71\u52a8\u7ed3\u6784\u4f53 */ static struct platform_driver xxx_driver = { .driver = { .name = \"xxx\", /*\u5982\u679c\u6ca1\u6709match_table,\u5219\u8fd9\u91cc\u7684name\u4e00\u5b9a\u8981\u548cplatform_device\u4e2d\u7684name\u5bf9\u7684\u8d77\u6765*/ .of_match_table = xxx_of_match, }, .probe = xxx_probe, .remove = xxx_remove, }; /* * platform \u9a71\u52a8\u7684 probe \u51fd\u6570 * \u9a71\u52a8\u4e0e\u8bbe\u5907\u5339\u914d\u6210\u529f\u4ee5\u540e\u6b64\u51fd\u6570\u5c31\u4f1a\u6267\u884c */ static int xxx_probe(struct platform_device *dev) { match = of_match_device(xxx_of_match, &pdev->dev); if (!match) { dev_err(&pdev->dev, \"Error: No device match found\\n\"); return -ENODEV; } return 0; } static int xxx_remove(struct platform_device *dev) { // ...... /* \u51fd\u6570\u5177\u4f53\u5185\u5bb9 */ return 0; } /* \u5339\u914d\u5217\u8868 */ static const struct of_device_id xxx_of_match[] = { { .compatible = \"xxx-xxx\" }, { /* Sentinel */ } }; \u6ce8\u610f\uff0cxxx_of_match \u4e2d\u7684.compatible \u9700\u8981\u548c DTS \u6587\u4ef6\u4e2d\u7684 compatible \u5bf9\u5e94\uff0c\u4e00\u822c\u683c\u5f0f\u662f\u201c\u5382\u5546\u540d\u79f0,\u82af\u7247\u7cfb\u5217-\u6a21\u5757\u540d\u201d\uff0c\u4f8b\u5982\u201cactions,s900-serial\u201d \u8bbe\u5907\u6811 \u4e00 \u662f\u4ec0\u4e48 \u4ec0\u4e48\u662f\u8bbe\u5907\u6811\uff1f \u8bbe\u5907\u6811(Device Tree)\uff0c\u5c06\u8fd9\u4e2a\u8bcd\u5206\u5f00\u5c31\u662f\u201c\u8bbe\u5907\u201d\u548c\u201c\u6811\u201d\uff0c\u63cf\u8ff0\u8bbe\u5907\u6811\u7684\u6587\u4ef6\u53eb\u505a DTS(Device Tree Source)\uff0c\u8fd9\u4e2a DTS \u6587\u4ef6\u91c7\u7528\u6811\u5f62\u7ed3\u6784\u63cf\u8ff0\u677f\u7ea7\u8bbe\u5907\uff0c\u4e5f\u5c31\u662f\u5f00\u53d1\u677f\u4e0a\u7684\u8bbe\u5907\u4fe1\u606f\u3002 \u8bbe\u5907\u6811\u7684\u673a\u5236\u5176\u5b9e\u4e5f\u662f\u603b\u7ebf\u578b\u7684 BUS/Dev/Drv \u6a21\u578b\uff0c\u53ea\u662f\u7f16\u5199 Dev \u7684\u65b9\u5f0f\u53d8\u4e86\u3002\u5373\u7f16\u5199 \u8bbe\u5907\u6811\u6587\u4ef6 .dts\u3002dts \u6587\u4ef6\u4f1a\u88ab\u7f16\u8bd1\u6210 dtb \u6587\u4ef6\u3002dtb \u6587\u4ef6\u4f1a\u4f20\u7ed9\u5185\u6838, \u5185\u6838\u4f1a\u89e3\u6790 dtb \u6587\u4ef6, \u6784\u9020\u51fa\u4e00\u7cfb\u5217\u7684 device_node \u7ed3\u6784\u4f53,device_node \u7ed3\u6784\u4f53\u4f1a\u8f6c\u6362\u4e3a platform_device \u7ed3\u6784\u4f53\u3002 Linux \u5185\u6838\u662f\u4ece V2.6 \u5f00\u59cb\u5f15\u5165\u8bbe\u5907\u6811\u7684\u6982\u5ff5\uff0c\u5176\u8d77\u6e90\u4e8e OF:OpenFirmware\uff0c \u7528\u4e8e\u63cf\u8ff0\u4e00\u4e2a\u786c\u4ef6\u5e73\u53f0\u7684\u786c\u4ef6\u8d44\u6e90\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5305\u62ec\uff1aCPU \u7684\u6570\u91cf\u548c\u7c7b\u522b\u3001\u5185\u5b58\u57fa\u5730\u5740\u548c\u5927\u5c0f\u3001\u603b\u7ebf\u548c\u6865\u3001\u5916\u8bbe\u8fde\u63a5\u3001\u4e2d\u65ad\u63a7\u5236\u5668\u548c\u4e2d\u65ad\u4f7f\u7528\u60c5\u51b5\u3001GPIO \u63a7\u5236\u5668\u548c GPIO \u4f7f\u7528\u60c5\u51b5\u3001Clock \u63a7\u5236\u5668\u548c Clock \u4f7f\u7528\u60c5\u51b5\u7b49\u7b49\u3002 \u5b98\u65b9\u8bf4\u660e The \"Open Firmware Device Tree\", or simply Device Tree (DT), is a data structure and language for describing hardware. \u8bbe\u5907\u6811\u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u548c\u4e00\u79cd\u7528\u4e8e\u63cf\u8ff0\u786c\u4ef6\u4fe1\u606f\u7684\u8bed\u8a00\u3002 dts, dtc, dtb \u5206\u522b\u662f\u4ec0\u4e48\u7684\u7f29\u5199? DTS (device tree source) DTC (device tree compiler) Device Tree Blob (.dtb) \u8bbe\u5907\u6811\u7684\u7279\u70b9\uff1a \u5b9e\u73b0\u9a71\u52a8\u4ee3\u7801\u4e0e\u8bbe\u5907\u786c\u4ef6\u4fe1\u606f\u76f8\u5206\u79bb\u3002 \u901a\u8fc7\u88ab bootloader(uboot)\u4f20\u9012\u5230 Linux \u5185\u6838\uff0c \u5185\u6838\u53ef\u4ee5\u4ece\u8bbe\u5907\u6811\u4e2d\u83b7\u53d6\u5bf9\u5e94\u7684\u786c\u4ef6\u4fe1\u606f\u3002 \u5bf9\u4e8e\u540c\u4e00 SOC \u7684\u4e0d\u540c\u4e3b\u677f\uff0c\u53ea\u9700\u66f4\u6362\u8bbe\u5907\u6811\u6587\u4ef6\u5373\u53ef\u5b9e\u73b0\u4e0d\u540c\u4e3b\u677f\u7684\u65e0\u5dee\u5f02\u652f\u6301\uff0c\u800c\u65e0\u9700\u66f4\u6362\u5185\u6838\u6587\u4ef6\uff0c\u5b9e\u73b0\u4e86\u5185\u6838\u548c\u4e0d\u540c\u677f\u7ea7\u786c\u4ef6\u6570\u636e\u7684\u62c6\u5206\u3002 \u4e8c \u6709\u5565\u597d 1 \u4e3a\u4ec0\u4e48\u8981\u7528\u8bbe\u5907\u6811\uff1f A \u660e\u767d\u4e86\u8bbe\u5907\u6811\u7684\u6982\u5ff5\uff0c\u4e0d\u59a8\u601d\u8003\u4e00\u4e0b\uff1a \u4e3a\u4ec0\u4e48\u8981\u5f15\u5165\u8bbe\u5907\u6811\uff1f \u5728 Linux \u5185\u6838 v2.6 \u7248\u672c\u4ee5\u524d\uff0cARM \u67b6\u6784\u7528\u4e8e\u63cf\u8ff0\u4e0d\u540c\u7684\u786c\u4ef6\u4fe1\u606f\u7684\u6587\u4ef6\u90fd\u5b58\u653e\u5728 arch/arm/plat-xxx \u548c arch/arm/mach-xxx \u6587\u4ef6\u5939\u4e0b\uff0c\u5982\u4e0b\uff1a \u5728\u8fd9\u4e9b\u6587\u4ef6\u5185\uff0c\u90fd\u662f\u901a\u8fc7\u624b\u52a8\u5b9a\u4e49\u4e0d\u540c\u7684\u786c\u4ef6\u8bbe\u5907\uff0c\u6b65\u9aa4\u975e\u5e38\u7e41\u7410 \u8fd9\u6837\u5c31\u5bfc\u81f4\u4e86 Linux \u5185\u6838\u4ee3\u7801\u4e2d\u5145\u65a5\u7740\u5927\u91cf\u7684\u5783\u573e\u4ee3\u7801\uff0c\u56e0\u4e3a\u4e0d\u540c\u7684\u677f\u7ea7\u4ed6\u4eec\u7684\u786c\u4ef6\u4fe1\u606f\u90fd\u4e0d\u76f8\u540c\uff0c\u8fd9\u4e9b\u90fd\u662f\u786c\u4ef6\u7279\u6709\u7684\u4fe1\u606f\uff0c\u5bf9\u5185\u6838\u800c\u8a00\u6ca1\u6709\u4efb\u4f55\u7684\u610f\u4e49\uff0c\u4f46\u662f\u5f80\u5f80\u8fd9\u90e8\u5206\u4ee3\u7801\u7279\u522b\u7684\u591a\uff0c\u9020\u6210\u5185\u6838\u7684\u5197\u4f59\u3002 \u8bbe\u5907\u6811\u7684\u5f15\u5165\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u901a\u8fc7\u5f15\u5165\u8bbe\u5907\u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u5b83\u6765\u4f20\u9012\u7ed9 Linux\uff0c\u800c\u4e0d\u518d\u9700\u8981\u5185\u6838\u4e2d\u5927\u91cf\u7684\u5783\u573e\u4ee3\u7801\u3002 B Device Tree \u6539\u53d8\u4e86\u539f\u6765\u7528 hardcode \u65b9\u5f0f\u5c06 HW \u914d\u7f6e\u4fe1\u606f\u5d4c\u5165\u5230\u5185\u6838\u4ee3\u7801\u7684\u65b9\u6cd5\uff0c\u6539\u7528 bootloader \u4f20\u9012\u4e00\u4e2a DB \u7684\u5f62\u5f0f\u3002 \u5bf9\u4e8e\u57fa\u4e8e ARM CPU \u7684\u5d4c\u5165\u5f0f\u7cfb\u7edf\uff0c\u6211\u4eec\u4e60\u60ef\u4e8e\u9488\u5bf9\u6bcf\u4e00\u4e2a platform \u8fdb\u884c\u5185\u6838\u7684\u7f16\u8bd1\u3002\u4f46\u662f\u968f\u7740 ARM \u5728\u6d88\u8d39\u7c7b\u7535\u5b50\u4e0a\u7684\u5e7f\u6cdb\u5e94\u7528\uff08\u751a\u81f3\u684c\u9762\u7cfb\u7edf\u3001\u670d\u52a1\u5668\u7cfb\u7edf\uff09\uff0c\u6211\u4eec\u671f\u671b ARM \u80fd\u591f\u8c61 X86 \u90a3\u6837\u7528\u4e00\u4e2a kernel image \u6765\u652f\u6301\u591a\u4e2a platform\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u6211\u4eec\u8ba4\u4e3a kernel \u662f\u4e00\u4e2a black box\uff0c\u90a3\u4e48\u5176\u8f93\u5165\u53c2\u6570\u5e94\u8be5\u5305\u62ec\uff1a 1\u3001\u8bc6\u522b platform \u7684\u4fe1\u606f 2\u3001runtime \u7684\u914d\u7f6e\u53c2\u6570 3\u3001\u8bbe\u5907\u7684\u62d3\u6251\u7ed3\u6784\u4ee5\u53ca\u7279\u6027 \u5bf9\u4e8e\u5d4c\u5165\u5f0f\u7cfb\u7edf\uff0c\u5728\u7cfb\u7edf\u542f\u52a8\u9636\u6bb5\uff0cbootloader \u4f1a\u52a0\u8f7d\u5185\u6838\u5e76\u5c06\u63a7\u5236\u6743\u8f6c\u4ea4\u7ed9\u5185\u6838\uff0c\u6b64\u5916\uff0c\u8fd8\u9700\u8981\u628a\u4e0a\u8ff0\u7684\u4e09\u4e2a\u53c2\u6570\u4fe1\u606f\u4f20\u9012\u7ed9 kernel\uff0c\u4ee5\u4fbf kernel \u53ef\u4ee5\u6709\u8f83\u5927\u7684\u7075\u6d3b\u6027\u3002\u5728 linux kernel \u4e2d\uff0cDevice Tree \u7684\u8bbe\u8ba1\u76ee\u6807\u5c31\u662f\u5982\u6b64\u3002 2 \u4e3a\u4ec0\u4e48 x86 \u4e0a\u4e0d\u9700\u8981\u8bbe\u5907\u6811? \u56e0\u4e3a arm \u7edd\u5927\u90e8\u5206\u8bbe\u5907\u65e0\u6cd5\u81ea\u52a8\u63a2\u6d4b\u5230,\u6240\u4ee5\u8981\u6709\u4e2a\u65b9\u5f0f\u8ba9\u7cfb\u7edf\u77e5\u9053\u6709\u54ea\u4e9b\u8bbe\u5907, \u4e00\u5f00\u59cb\u662f\u7a0b\u5e8f\u5199\u6b7b\u7684, \u540e\u6765\u6709\u4e86\u8bbe\u5907\u6811. x86/x64 \u4e0a\u8bb8\u591a\u8bbe\u5907\u662f\u57fa\u4e8e PCI/PCIe \u603b\u7ebf\u7684, \u53ef\u4ee5\u81ea\u52a8\u679a\u4e3e\u5230, \u8fd9\u79cd\u8bbe\u5907\u4e0d\u9700\u8981\u8bbe\u5907\u6811\u6765\u544a\u8bc9\u7cfb\u7edf. \u4f46\u662f Intel \u8fd8\u662f\u641e\u4e86 ACPI, \u4e5f\u80fd\u5c06\u8bbe\u5907\u4fe1\u606f\u544a\u77e5\u7cfb\u7edf. \u6bd4\u5982 x86 \u5e73\u53f0\u5c31\u8bf4\u901a\u8fc7 ACPI \u77e5\u9053 CPU \u6709\u51e0\u4e2a core \u7684. \u8fd9\u5957\u673a\u5236\u548c\u8bbe\u5907\u6811\u673a\u5236\u7c7b\u4f3c. \u4e09 \u600e\u4e48\u529e (\u4e00) \u603b\u4f53\u6d41\u7a0b \u5176\u4e00 \u5185\u6838\u4f1a\u89e3\u6790 dtb \u6587\u4ef6, \u6784\u9020\u51fa\u4e00\u7cfb\u5217\u7684 device_node \u7ed3\u6784\u4f53, device_node \u7ed3\u6784\u4f53\u4f1a\u8f6c\u6362\u4e3a platform_device \u7ed3\u6784\u4f53\u3002 \u603b\u4f53\u6d41\u7a0b: \u89e3\u6790 dtb \u6587\u4ef6 ----> \u6784\u9020 device_node \u7ed3\u6784\u4f53 ---> \u8f6c\u6362\u4e3a platform_device \u7ed3\u6784\u4f53 \u5176\u4e8c \u7cfb\u7edf\u542f\u52a8\u540e\uff0cuboot \u4f1a\u4ece\u7f51\u7edc\u6216\u8005 flash\u3001sd \u5361\u4e2d\u8bfb\u53d6\u8bbe\u5907\u6811\u6587\u4ef6(\u5177\u4f53\u7531 uboot \u547d\u4ee4\u7ed9\u51fa)\uff0c \u5f15\u5bfc linux \u5185\u6838\u542f\u52a8\u540e\uff0c\u4f1a\u628a\u8bbe\u5907\u6811\u955c\u50cf\u4fdd\u5b58\u5230\u7684\u5185\u5b58\u5730\u5740\u4f20\u9012\u7ed9 Linux \u5185\u6838\uff0cLinux \u5185\u6838\u4f1a\u89e3\u6790\u8bbe\u5907\u6811\u955c\u50cf\uff0c\u4ece\u8bbe\u5907\u6811\u4e2d\u63d0\u53d6\u786c\u4ef6\u4fe1\u606f\u5e76\u9010\u4e00\u521d\u59cb\u5316\u3002 \u5176\u4e2d\u8bbe\u5907\u6811\u4fe1\u606f\u4f1a\u88ab\u8f6c\u6362\u6210 struct platform_device \u7c7b\u578b\u53d8\u91cf\u3002 \u800c\u9a71\u52a8\u8981\u89e3\u6790\u8bbe\u5907\u6811\uff0c\u5fc5\u987b\u5b9a\u4e49 struct platform_driver \u7c7b\u578b\u7ed3\u6784\u4f53\u53d8\u91cf\uff0c\u5e76\u901a\u8fc7\u51fd\u6570 platform_driver_register() \u6ce8\u518c\u3002 \u8fd9\u4e24\u8005\u90fd\u4f1a\u6ce8\u518c\u5230 platform\u603b\u7ebf \uff0c\u5f53\u9a71\u52a8\u548c\u8bbe\u5907\u6811\u8282\u70b9\u5339\u914d\u6210\u529f\u540e\uff0c\u5c31\u8c03\u7528 struct platform_driver \u4e2d .probe \u65b9\u6cd5\u3002 \u5176\u4e2d\u8bbe\u5907\u6811\u8282\u70b9\u4f1a\u5c01\u88c5\u5728 struct device_node \u7ed3\u6784\u4f53\u53d8\u91cf\u4e2d \u5404\u4e2a\u5c5e\u6027\u4fe1\u606f\u4f1a\u5c01\u88c5\u5728 struct property \u7ed3\u6784\u4f53\u53d8\u91cf\u4e2d\uff0c \u4ed6\u4eec\u4e0e struct platform_device \u7ed3\u6784\u4f53\u4e4b\u95f4\u5173\u7cfb\u5982\u4e0b\uff1a (\u4e8c) \u8bbe\u5907\u6811\u8bed\u6cd5 dts \u6587\u4ef6\u662f\u4e00\u79cd ASCII \u6587\u672c\u683c\u5f0f\u7684\u8bbe\u5907\u6811\u63cf\u8ff0\uff0c\u5b83\u6709\u4ee5\u4e0b\u51e0\u79cd\u7279\u6027\uff1a \u6bcf\u4e2a\u8bbe\u5907\u6811\u6587\u4ef6\u90fd\u6709\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u6bcf\u4e2a\u8bbe\u5907\u90fd\u662f\u4e00\u4e2a\u8282\u70b9\u3002 \u8282\u70b9\u95f4\u53ef\u4ee5\u5d4c\u5957\uff0c\u5f62\u6210\u7236\u5b50\u5173\u7cfb\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u65b9\u4fbf\u7684\u63cf\u8ff0\u8bbe\u5907\u95f4\u7684\u5173\u7cfb\u3002 \u6bcf\u4e2a\u8bbe\u5907\u7684\u5c5e\u6027\u90fd\u7528\u4e00\u7ec4 key-value \u5bf9(\u952e\u503c\u5bf9)\u6765\u63cf\u8ff0\u3002 \u6bcf\u4e2a\u5c5e\u6027\u7684\u63cf\u8ff0\u7528 ; \u7ed3\u675f \u8bb0\u4f4f\u4e0a\u9762\u7684\u51e0\u4e2a\u6838\u5fc3\u7279\u6027\uff0c\u5f80\u4e0b\u770b\uff01 1 \u6570\u636e\u683c\u5f0f /dts-v1/; / { node1 { a-string-property = \"A string\"; a-string-list-property = \"first string\", \"second string\"; // hex is implied in byte arrays. no '0x' prefix is required a-byte-data-property = [0x01 0x23 0x34 0x56]; child-node1 { first-child-property; second-child-property = <1>; a-string-property = \"Hello, world\"; }; child-node2 { }; }; node2 { an-empty-property; a-cell-property = <1 2 3 4>; /* each number (cell) is a uint32 */ child-node1 { }; }; }; /dts-v1/; \uff1a\u8868\u793a\u8fd9\u662f\u4e00\u4e2a dts \u8bbe\u5907\u6811\u6587\u4ef6 / \uff1a\u8868\u793a\u6839\u8282\u70b9 node1\u3001node2 \uff1a\u8868\u793a\u6839\u8282\u70b9\u4e0b\u7684\u4e24\u4e2a\u5b50\u8282\u70b9 child-node1\u3001child-node2 \uff1a\u8868\u793a\u5b50\u8282\u70b9 node1 \u4e0b\u7684\u4e24\u4e2a\u5b50\u8282\u70b9 a-string-property = \"A string\"; \uff1a\u5b57\u7b26\u4e32\u5c5e\u6027\uff0c\u7528\u53cc\u5f15\u53f7\u8868\u793a cell-property = <0xbeef 123 0xabcd1234>; \uff1a32bit \u7684\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u7528\u5c16\u62ec\u53f7\u8868\u793a binary-property = [0x01 0x23 0x45 0x67]; \uff1a\u4e8c\u8fdb\u5236\u6570\u636e\u7528\u65b9\u62ec\u53f7\u8868\u793a a-string-list-property = \"first string\", \"second string\"; \uff1a\u7528\u9017\u53f7\u8868\u793a\u5b57\u7b26\u4e32\u5217\u8868 2 \u6570\u636e\u7ed3\u6784 DeviceTree \u7684\u7ed3\u6784\u975e\u5e38\u7b80\u5355\uff0c\u7531\u4e24\u79cd\u5143\u7d20\u7ec4\u6210\uff1a Node(\u8282\u70b9) \u548c Property(\u5c5e\u6027) \u3002 [label:] node-name[@unit-address] { [properties definitions] [child nodes] } \u60f3\u8c61\u4e00\u4e0b\uff0c\u4e00\u68f5\u5927\u6811\uff0c\u6bcf\u4e00\u4e2a\u6811\u5e72\u90fd\u8ba4\u4e3a\u662f\u4e00\u4e2a\u8282\u70b9\uff0c\u6bcf\u4e00\u7247\u6811\u53f6\uff0c\u60f3\u4f5c\u4e00\u4e2a\u5c5e\u6027\uff01 label \uff1a\u8282\u70b9\u7684\u4e00\u4e2a\u6807\u7b7e\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u522b\u540d node-name \uff1a\u8282\u70b9\u7684\u540d\u79f0 unit-address \uff1a\u5355\u5143\u5730\u5740\uff0c\u4e5f\u5c31\u662f\u63a7\u5236\u5668\u7684\u5730\u5740 properties \uff1a\u5c5e\u6027\u540d\u79f0 definitions \uff1a\u5c5e\u6027\u7684\u503c 3 \u8be6\u7ec6\u5c5e\u6027\u4ecb\u7ecd \u4ee5\u4e0b\u4ee3\u7801\u6bb5\u4e3a\u4f8b\u5b50 /dts-v1/; / { compatible = \"acme,coyotes-revenge\"; #address-cells = <1>; #size-cells = <0>; cpus { cpu@0 { compatible = \"arm,cortex-a9\"; reg = <0>; }; cpu@1 { compatible = \"arm,cortex-a9\"; reg = <1>; }; }; serial@101f0000 { #address-cells = <1>; #size-cells = <1>; compatible = \"arm,pl011\"; reg = <0x101f0000 0x1000 >; }; }; 3.1 \u57fa\u672c\u5c5e\u6027 \u4e0b\u9762\u51e0\u4e2a\u5c5e\u6027\u662f\u57fa\u672c\u5c5e\u6027 /dts-v1/; \uff1a\u8868\u793a\u4e00\u4e2a dts \u8bbe\u5907\u6811\u6587\u4ef6 / \uff1a\u8868\u793a\u6839\u8282\u70b9 compatible = \"acme,coyotes-revenge\"; compatible \uff1a\u201c\u517c\u5bb9\u6027\u201d \u5c5e\u6027\uff0c\u8fd9\u662f\u975e\u5e38\u91cd\u8981\u7684\u4e00\u4e2a\u5c5e\u6027, \u517c\u5bb9\u5c5e\u6027\uff0c\u7531\u8be5\u5c5e\u6027\u503c\u6765\u5339\u914d\u5bf9\u5e94\u7684\u9a71\u52a8\u4ee3\u7801\u3002 \"acme,coyotes-revenge\" \uff1a\u8be5\u503c\u9075\u5faa \"manufacturer,model\" \u683c\u5f0f manufacturer \u8868\u793a\u82af\u7247\u5382\u5546\uff0c model \u8868\u793a\u9a71\u52a8\u540d\u79f0 compatible \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\u3002\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u6307\u5b9a\u8282\u70b9\u5728\u8868\u5355\u4e2d\u8868\u793a\u7684\u786e\u5207\u8bbe\u5907\" , \"\u3002 \u4f8b\u5982\uff0c\u98de\u601d\u5361\u5c14 MPC8349 \u7247\u4e0a\u7cfb\u7edf (SoC) \u6709\u4e00\u4e2a\u4e32\u884c\u8bbe\u5907\uff0c\u53ef\u5b9e\u73b0 National Semiconductor ns16550 \u5bc4\u5b58\u5668\u63a5\u53e3\u3002\u56e0\u6b64\uff0cMPC8349 \u4e32\u884c\u8bbe\u5907\u7684 compatible \u5c5e\u6027\u5e94\u4e3a\uff1a compatible = \"fsl,mpc8349-uart\", \"ns16550\" . \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cfsl,mpc8349-uart \u6307\u5b9a\u786e\u5207\u7684\u8bbe\u5907\uff0c ns16550 \u58f0\u660e\u5b83\u4e0e National Semiconductor 16550 UART \u7684\u5bc4\u5b58\u5668\u7ea7\u517c\u5bb9\u3002 cpus \uff1a\u8868\u793a\u4e00\u4e2a\u5b50\u8282\u70b9\uff0c\u8be5\u5b50\u8282\u70b9\u4e0b\u53c8\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\uff0c\u5206\u522b\u4e3a cpu0 \u548c cpu1 \u3002 cpu@0 \uff1a\u9075\u5faa <name>[@<unit-address>] \u683c\u5f0f <name> \uff1aascii \u5b57\u7b26\u4e32\uff0c\u8868\u793a\u8282\u70b9\u540d\u79f0 <unit-address> \uff1a\u5355\u5143\u5730\u5740\uff0c\u8bbe\u5907\u7684\u79c1\u6709\u5730\u5740\uff0c\u5728\u8282\u70b9 reg \u5c5e\u6027\u4e2d\u63cf\u8ff0\u3002 3.2 \u5bfb\u5740\u5c5e\u6027 \u4e0b\u9762\u51e0\u4e2a\u5c5e\u6027\u4e0e\u5bfb\u5740\u76f8\u5173\u7684 #address-cells \uff1a\u8868\u793a reg \u5c5e\u6027\u4e2d \u5730\u5740\u5b57\u6bb5\u7684\u5355\u5143\u4e2a\u6570\uff0c\u6bcf\u4e2a\u5355\u5143 32bit \uff0c\u5373\u7528\u591a\u5c11\u4e2a 32bit \u5355\u5143\u8868\u793a\u5730\u5740\u4fe1\u606f\u3002 #size-cells \uff1a\u8868\u793a reg \u5c5e\u6027\u4e2d\u8868\u793a\u957f\u5ea6\u5b57\u6bb5\u7684\u5355\u5143\u4e2a\u6570\uff0c\u6bcf\u4e2a\u5355\u5143 32bit\uff0c\u5373\u7528\u591a\u5c11\u4e2a 32bit \u5355\u5143\u8868\u793a\u957f\u5ea6\u4fe1\u606f\u3002 reg \uff1a\u8be5\u5c5e\u6027\u4e00\u822c\u7528\u4e8e\u63cf\u8ff0\u8bbe\u5907\u5730\u5740\u7a7a\u95f4\u8d44\u6e90\u4fe1\u606f\uff0c\u4e00\u822c\u90fd\u662f\u67d0\u4e2a\u5916\u8bbe\u7684\u5bc4\u5b58\u5668\u5730\u5740\u8303\u56f4\u4fe1\u606f\u3002\u5176\u5f0f\u4e3a reg = <address1 length1 [address2 length2] [address3 length3] ... > \u3002\u6bcf\u4e2a\u5730\u5740\u503c\u90fd\u662f\u4e00\u4e2a\u6216\u591a\u4e2a 32 \u4f4d\u6574\u6570\u7684\u5217\u8868\uff0c\u79f0\u4e3a \u5355\u5143\u683c \u3002\u540c\u6837\uff0c\u957f\u5ea6\u503c\u53ef\u4ee5\u662f\u5355\u5143\u683c\u5217\u8868\uff0c\u4e5f\u53ef\u4ee5\u662f\u7a7a\u7684 3.3 \u4e2d\u65ad\u5c5e\u6027 3.4 \u5176\u4ed6\u5c5e\u6027 (\u4e09) DTS \u548c DTC \u548c DTB \u4f7f\u7528 \u6574\u4e2a\u8bbe\u5907\u6811\u7275\u6d89\u9762\u6bd4\u8f83\u5e7f\uff0c\u5373\u589e\u52a0\u4e86\u65b0\u7684\u7528\u4e8e\u63cf\u8ff0\u8bbe\u5907\u786c\u4ef6\u4fe1\u606f\u7684\u6587\u672c\u683c\u5f0f\uff0c\u53c8\u589e\u52a0\u4e86\u7f16\u8bd1\u8fd9\u4e2a\u6587\u672c\u7684\u5de5\u5177\uff0c\u540c\u65f6\u8fd8\u5f97\u652f\u6301 Bootloader \u89e3\u6790\u8bbe\u5907\u6811\uff0c\u5e76\u5c06\u4fe1\u606f\u4f20\u9012\u7ed9\u5185\u6838\u3002 \u6574\u4e2a\u8bbe\u5907\u6811\u5305\u542b DTC\uff08device tree compiler\uff09\uff0cDTS\uff08device tree source\uff09\u548c DTB\uff08device tree blob\uff09\u3002 (\u56db) \u57fa\u4e8e\u8bbe\u5907\u6811\u7684 LED \u9a71\u52a8\u5b9e\u9a8c \u5f85\u8865\u5145","title":"\u7b2c\u4e94\u7bc7 platform\u603b\u7ebf\u6a21\u578b\u548c\u8bbe\u5907\u6811"},{"location":"chapter_14/5_device_tree/#_1","text":"\u603b\u7ebf\u9a71\u52a8\u6a21\u578b \u8bbe\u5907\u6811(\u662f\u4ec0\u4e48, \u6709\u5565\u597d, \u600e\u4e48\u529e) \u9996\u5148\u53ea\u6709 Arm \u67b6\u6784\u9700\u8981\u8bbe\u5907\u6811, x86 \u67b6\u6784\u4e0d\u9700\u8981\u8bbe\u5907\u6811.","title":"\u6982\u8ff0"},{"location":"chapter_14/5_device_tree/#_2","text":"","title":"\u603b\u7ebf\u9a71\u52a8\u6a21\u578b"},{"location":"chapter_14/5_device_tree/#_3","text":"\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e2d\u6709\u5f88\u591a\u7684\u7269\u7406\u603b\u7ebf\uff1aI2c\u3001SPI\u3001USB\u3001uart\u3001PCIE\u3001APB\u3001AHB linux \u4ece 2.6 \u8d77\u5c31\u52a0\u5165\u4e86\u4e00\u5957\u65b0\u7684\u9a71\u52a8\u7ba1\u7406\u548c\u6ce8\u518c\u7684\u673a\u5236 platform \u5e73\u53f0\u603b\u7ebf\uff0c\u662f\u4e00\u6761 \u865a\u62df\u7684\u603b\u7ebf ,\u5e76\u4e0d\u662f\u4e00\u4e2a \u7269\u7406\u7684\u603b\u7ebf \u3002 \u76f8\u6bd4 PCI\u3001USB\uff0c\u5b83\u4e3b\u8981\u7528\u4e8e\u63cf\u8ff0 SOC \u4e0a\u7684\u7247\u4e0a\u8d44\u6e90\u3002platform \u6240\u63cf\u8ff0\u7684\u8d44\u6e90\u6709\u4e00\u4e2a\u5171\u540c\u70b9\uff1a\u5728 CPU \u7684\u603b\u7ebf\u4e0a\u76f4\u63a5\u53d6\u5740\u3002 \u53ef\u89c1\u8fd9\u4e2a platform \u673a\u5236\u4e5f\u662f\u7528\u4e8e\u5d4c\u5165\u5f0f\u65b9\u5411.","title":"\u4e00 \u662f\u4ec0\u4e48"},{"location":"chapter_14/5_device_tree/#_4","text":"struct platform_device platform_device \u7528\u4e8e\u63cf\u8ff0\u8bbe\u5907\u786c\u4ef6\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\uff0c\u5305\u62ec\u8be5\u786c\u4ef6\u7684\u6240\u6709 \u8d44\u6e90 \uff08io\uff0cmemory\u3001\u4e2d\u65ad\u3001DMA \u7b49\u7b49\uff09\u3002 struct platform_driver","title":"\u6700\u91cd\u8981\u7684\u4e24\u4e2a\u7ed3\u6784\u4f53"},{"location":"chapter_14/5_device_tree/#struct-resource","text":"\u4e00\u4e2a\u4f8b\u5b50 struct resource { resource_size_t start; //\u8868\u793a\u8d44\u6e90\u7684\u8d77\u59cb\u503c\uff0c resource_size_t end; //\u8868\u793a\u8d44\u6e90\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u5730\u5740\uff0c \u5982\u679c\u662f\u4e2d\u65ad\uff0cend\u548csatrt\u76f8\u540c const char *name; // \u53ef\u4e0d\u5199 unsigned long flags; //\u8d44\u6e90\u7684\u7c7b\u578b, \u6bd4\u5982io\uff0cmemory\u3001\u4e2d\u65ad\u3001DMA\u7b49\u7b49 struct resource *parent, *sibling, *child; }; #define IORESOURCE_MEM 0x00000200 //\u5185\u5b58 #define IORESOURCE_IRQ 0x00000400 //\u4e2d\u65ad struct resource \u662f\u5d4c\u5957\u5728 struct platform_device \u5185\u90e8\u7684\u4e00\u4e2a\u6210\u5458, \u662f\u4e00\u4e2a struct platform_device \u5185\u90e8\u7684\u4e00\u4e2a\u6570\u7ec4\u6210\u5458.","title":"\u5173\u4e8estruct resource"},{"location":"chapter_14/5_device_tree/#_5","text":"\u4e0e\u4f20\u7edf\u7684 bus/device/driver \u673a\u5236\u76f8\u6bd4\uff0cplatform \u7531\u5185\u6838\u8fdb\u884c\u7edf\u4e00\u7ba1\u7406\uff0c\u5728\u9a71\u52a8\u4e2d\u4f7f\u7528 \u8d44\u6e90 resource \uff0c\u63d0\u9ad8\u4e86\u4ee3\u7801\u7684\u5b89\u5168\u6027\u548c \u53ef\u79fb\u690d\u6027 \u3002 \u603b\u4f53\u6765\u8bf4\u8fd9\u5757\u9700\u8981\u770b\u6700\u539f\u59cb\u7684\u9a71\u52a8\u7a0b\u5e8f\u7684\u8fdb\u5316\u8fc7\u7a0b, \u4ee5 LED \u706f\u9a71\u52a8\u7a0b\u5e8f\u4e3a\u4f8b\u5b50.","title":"\u4e8c \u4e3a\u4ec0\u4e48"},{"location":"chapter_14/5_device_tree/#1","text":"\u53c2\u8003\u7b2c\u4e00\u7bc7 \u9a71\u52a8\u7a0b\u5e8f Hello World.","title":"1 \u539f\u59cb\u7248"},{"location":"chapter_14/5_device_tree/#2-platform_device","text":"\u5199\u9a71\u52a8\u7a0b\u5e8f\u8981\u5206\u4e24\u4e2a\u6587\u4ef6: device.ko \u548c driver.ko , \u5e76\u4e14\u5206\u522b\u52a0\u8f7d insmod device.ko , insmod driver.ko","title":"2 \u81ea\u5b9a\u4e49 platform_device \u7248\u672c"},{"location":"chapter_14/5_device_tree/#_6","text":"\u5b89\u88c5\u6a21\u5757: insmod device.ko ---> \u76f8\u5f53\u4e8e\u63d2\u5165\u8bbe\u5907 insmod driver.ko ---> \u76f8\u5f53\u4e8e\u542f\u52a8\u9a71\u52a8\u7a0b\u5e8f, \u7136\u540e\u5185\u6838\u4f1a\u81ea\u52a8\u5339\u914d, \u5339\u914d\u5230\u4e86\u4e4b\u540e\u5c31\u4f1a\u81ea\u52a8\u8c03\u7528 probe \u65b9\u6cd5, \u56e0\u6b64 \u539f\u59cb\u7248 \u4e2d\u7684\u521d\u59cb\u5316\u9700\u8981\u5728 probe \u51fd\u6570\u4e2d\u5b9e\u73b0 \u5378\u8f7d\u6a21\u5757: rmmod device.ko ---> \u6a21\u62df\u8bbe\u5907\u62d4\u51fa\u7684\u60c5\u51b5, \u4f1a\u81ea\u52a8\u8c03\u7528 driver.ko \u4e2d\u7684 remove \u65b9\u6cd5, \u8bbe\u5907\u62d4\u51fa\u65f6\u5176\u5b9e\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u5e94\u8be5\u8981\u505a\u4e00\u4e9b\u4e8b\u60c5. rmmod driver.ko ---> \u76f8\u5f53\u4e8e\u5378\u8f7d\u9a71\u52a8\u7a0b\u5e8f","title":"\u6b63\u89c4\u6d41\u7a0b\u68b3\u7406"},{"location":"chapter_14/5_device_tree/#3","text":"\u8bbe\u5907\u6811\u7248\u672c\u5176\u5b9e\u662f\u628a platform_device \u7684\u5b9a\u4e49\u8fc7\u7a0b\u79fb\u4ea4\u7ed9\u4e86 dts, \u7136\u540e\u7531 bootloader \u544a\u77e5\u5185\u6838 dtb \u6587\u4ef6\u4f4d\u7f6e,\u7531\u5185\u6838\u81ea\u52a8\u89e3\u6790 dtb \u6587\u4ef6\u751f\u6210 platform_device \u5728\u6ca1\u6709\u8bbe\u5907\u6811\u7684 Linux \u5185\u6838\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u5206\u522b\u7f16\u5199\u5e76\u6ce8\u518c platform_device \u548c platform_driver \uff0c\u5206\u522b\u4ee3\u8868 \u8bbe\u5907 \u548c \u9a71\u52a8 \u3002\u5728\u4f7f\u7528\u8bbe\u5907\u6811\u7684\u65f6\u5019\uff0c \u8bbe\u5907 \u7684\u63cf\u8ff0\u88ab\u653e\u5230\u4e86 \u8bbe\u5907\u6811 \u4e2d\uff0c\u56e0\u6b64 platform_device \u5c31\u4e0d\u9700\u8981\u6211\u4eec\u53bb\u7f16\u5199\u4e86\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5b9e\u73b0 platform_driver \u5373\u53ef","title":"3 \u8bbe\u5907\u6811\u7248\u672c"},{"location":"chapter_14/5_device_tree/#_7","text":"\u53c2\u8003 \u8fd9\u7bc7\u6587\u7ae0","title":"\u4e09 \u600e\u4e48\u529e"},{"location":"chapter_14/5_device_tree/#1-platfrom_driver","text":"\u9a71\u52a8\u5f00\u53d1\u6846\u67b6 \u5f97\u76ca\u4e8e\u8bbe\u5907\u6a21\u578b\uff0cLinux kernel \u5e73\u53f0\u9a71\u52a8\u7684\u5f00\u53d1\u6709\u4e86\u4e00\u5957\u975e\u5e38\u56fa\u5b9a\u7684\u6846\u67b6","title":"1 platfrom_driver \u4e09\u8981\u7d20"},{"location":"chapter_14/5_device_tree/#1_1","text":"\u7528\u4e8e\u6ce8\u518c/\u6ce8\u9500 platform driver\uff0c\u8fd9\u4e00\u90e8\u5206\u7684\u4ee3\u7801\u57fa\u672c\u56fa\u5b9a\uff0c\u5305\u62ec\u51fd\u6570\u548c\u53d8\u91cf\u7684\u547d\u540d\u65b9\u5f0f\u4e5f\u53ef\u56fa\u5b9a\uff0c\u5982\u4e0b\uff1a /* \u9a71\u52a8\u6a21\u5757\u52a0\u8f7d */ static int __init xxxdriver_init(void) { return platform_driver_register(&xxx_driver); } /* \u9a71\u52a8\u6a21\u5757\u5378\u8f7d */ static void __exit xxxdriver_exit(void) { platform_driver_unregister(&xxx_driver); } module_init(xxxdriver_init); module_exit(xxxdriver_exit); MODULE_LICENSE(\"GPL V2\"); MODULE_AUTHOR(\"QianRuShi-ABC\");","title":"1\uff09\u6a21\u5757\u7684\u5165\u53e3\u548c\u51fa\u53e3"},{"location":"chapter_14/5_device_tree/#2platform-driver","text":"\u57fa\u672c\u7684 platform driver \u5305\u542b\u4e09\u8981\u7d20\uff1a struct platform_driver\u53d8\u91cf \u3001 probe/remove\u51fd\u6570 \u3001 \u7528\u4e8e\u548cdevice tree\u5339\u914d\u7684match table \uff0c\u5982\u4e0b\uff1a /* * platform \u5e73\u53f0\u9a71\u52a8\u7ed3\u6784\u4f53 */ static struct platform_driver xxx_driver = { .driver = { .name = \"xxx\", /*\u5982\u679c\u6ca1\u6709match_table,\u5219\u8fd9\u91cc\u7684name\u4e00\u5b9a\u8981\u548cplatform_device\u4e2d\u7684name\u5bf9\u7684\u8d77\u6765*/ .of_match_table = xxx_of_match, }, .probe = xxx_probe, .remove = xxx_remove, }; /* * platform \u9a71\u52a8\u7684 probe \u51fd\u6570 * \u9a71\u52a8\u4e0e\u8bbe\u5907\u5339\u914d\u6210\u529f\u4ee5\u540e\u6b64\u51fd\u6570\u5c31\u4f1a\u6267\u884c */ static int xxx_probe(struct platform_device *dev) { match = of_match_device(xxx_of_match, &pdev->dev); if (!match) { dev_err(&pdev->dev, \"Error: No device match found\\n\"); return -ENODEV; } return 0; } static int xxx_remove(struct platform_device *dev) { // ...... /* \u51fd\u6570\u5177\u4f53\u5185\u5bb9 */ return 0; } /* \u5339\u914d\u5217\u8868 */ static const struct of_device_id xxx_of_match[] = { { .compatible = \"xxx-xxx\" }, { /* Sentinel */ } }; \u6ce8\u610f\uff0cxxx_of_match \u4e2d\u7684.compatible \u9700\u8981\u548c DTS \u6587\u4ef6\u4e2d\u7684 compatible \u5bf9\u5e94\uff0c\u4e00\u822c\u683c\u5f0f\u662f\u201c\u5382\u5546\u540d\u79f0,\u82af\u7247\u7cfb\u5217-\u6a21\u5757\u540d\u201d\uff0c\u4f8b\u5982\u201cactions,s900-serial\u201d","title":"2\uff09platform driver"},{"location":"chapter_14/5_device_tree/#_8","text":"","title":"\u8bbe\u5907\u6811"},{"location":"chapter_14/5_device_tree/#_9","text":"\u4ec0\u4e48\u662f\u8bbe\u5907\u6811\uff1f \u8bbe\u5907\u6811(Device Tree)\uff0c\u5c06\u8fd9\u4e2a\u8bcd\u5206\u5f00\u5c31\u662f\u201c\u8bbe\u5907\u201d\u548c\u201c\u6811\u201d\uff0c\u63cf\u8ff0\u8bbe\u5907\u6811\u7684\u6587\u4ef6\u53eb\u505a DTS(Device Tree Source)\uff0c\u8fd9\u4e2a DTS \u6587\u4ef6\u91c7\u7528\u6811\u5f62\u7ed3\u6784\u63cf\u8ff0\u677f\u7ea7\u8bbe\u5907\uff0c\u4e5f\u5c31\u662f\u5f00\u53d1\u677f\u4e0a\u7684\u8bbe\u5907\u4fe1\u606f\u3002 \u8bbe\u5907\u6811\u7684\u673a\u5236\u5176\u5b9e\u4e5f\u662f\u603b\u7ebf\u578b\u7684 BUS/Dev/Drv \u6a21\u578b\uff0c\u53ea\u662f\u7f16\u5199 Dev \u7684\u65b9\u5f0f\u53d8\u4e86\u3002\u5373\u7f16\u5199 \u8bbe\u5907\u6811\u6587\u4ef6 .dts\u3002dts \u6587\u4ef6\u4f1a\u88ab\u7f16\u8bd1\u6210 dtb \u6587\u4ef6\u3002dtb \u6587\u4ef6\u4f1a\u4f20\u7ed9\u5185\u6838, \u5185\u6838\u4f1a\u89e3\u6790 dtb \u6587\u4ef6, \u6784\u9020\u51fa\u4e00\u7cfb\u5217\u7684 device_node \u7ed3\u6784\u4f53,device_node \u7ed3\u6784\u4f53\u4f1a\u8f6c\u6362\u4e3a platform_device \u7ed3\u6784\u4f53\u3002 Linux \u5185\u6838\u662f\u4ece V2.6 \u5f00\u59cb\u5f15\u5165\u8bbe\u5907\u6811\u7684\u6982\u5ff5\uff0c\u5176\u8d77\u6e90\u4e8e OF:OpenFirmware\uff0c \u7528\u4e8e\u63cf\u8ff0\u4e00\u4e2a\u786c\u4ef6\u5e73\u53f0\u7684\u786c\u4ef6\u8d44\u6e90\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5305\u62ec\uff1aCPU \u7684\u6570\u91cf\u548c\u7c7b\u522b\u3001\u5185\u5b58\u57fa\u5730\u5740\u548c\u5927\u5c0f\u3001\u603b\u7ebf\u548c\u6865\u3001\u5916\u8bbe\u8fde\u63a5\u3001\u4e2d\u65ad\u63a7\u5236\u5668\u548c\u4e2d\u65ad\u4f7f\u7528\u60c5\u51b5\u3001GPIO \u63a7\u5236\u5668\u548c GPIO \u4f7f\u7528\u60c5\u51b5\u3001Clock \u63a7\u5236\u5668\u548c Clock \u4f7f\u7528\u60c5\u51b5\u7b49\u7b49\u3002 \u5b98\u65b9\u8bf4\u660e The \"Open Firmware Device Tree\", or simply Device Tree (DT), is a data structure and language for describing hardware. \u8bbe\u5907\u6811\u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u548c\u4e00\u79cd\u7528\u4e8e\u63cf\u8ff0\u786c\u4ef6\u4fe1\u606f\u7684\u8bed\u8a00\u3002 dts, dtc, dtb \u5206\u522b\u662f\u4ec0\u4e48\u7684\u7f29\u5199? DTS (device tree source) DTC (device tree compiler) Device Tree Blob (.dtb) \u8bbe\u5907\u6811\u7684\u7279\u70b9\uff1a \u5b9e\u73b0\u9a71\u52a8\u4ee3\u7801\u4e0e\u8bbe\u5907\u786c\u4ef6\u4fe1\u606f\u76f8\u5206\u79bb\u3002 \u901a\u8fc7\u88ab bootloader(uboot)\u4f20\u9012\u5230 Linux \u5185\u6838\uff0c \u5185\u6838\u53ef\u4ee5\u4ece\u8bbe\u5907\u6811\u4e2d\u83b7\u53d6\u5bf9\u5e94\u7684\u786c\u4ef6\u4fe1\u606f\u3002 \u5bf9\u4e8e\u540c\u4e00 SOC \u7684\u4e0d\u540c\u4e3b\u677f\uff0c\u53ea\u9700\u66f4\u6362\u8bbe\u5907\u6811\u6587\u4ef6\u5373\u53ef\u5b9e\u73b0\u4e0d\u540c\u4e3b\u677f\u7684\u65e0\u5dee\u5f02\u652f\u6301\uff0c\u800c\u65e0\u9700\u66f4\u6362\u5185\u6838\u6587\u4ef6\uff0c\u5b9e\u73b0\u4e86\u5185\u6838\u548c\u4e0d\u540c\u677f\u7ea7\u786c\u4ef6\u6570\u636e\u7684\u62c6\u5206\u3002","title":"\u4e00 \u662f\u4ec0\u4e48"},{"location":"chapter_14/5_device_tree/#_10","text":"","title":"\u4e8c \u6709\u5565\u597d"},{"location":"chapter_14/5_device_tree/#1_2","text":"","title":"1 \u4e3a\u4ec0\u4e48\u8981\u7528\u8bbe\u5907\u6811\uff1f"},{"location":"chapter_14/5_device_tree/#a","text":"\u660e\u767d\u4e86\u8bbe\u5907\u6811\u7684\u6982\u5ff5\uff0c\u4e0d\u59a8\u601d\u8003\u4e00\u4e0b\uff1a \u4e3a\u4ec0\u4e48\u8981\u5f15\u5165\u8bbe\u5907\u6811\uff1f \u5728 Linux \u5185\u6838 v2.6 \u7248\u672c\u4ee5\u524d\uff0cARM \u67b6\u6784\u7528\u4e8e\u63cf\u8ff0\u4e0d\u540c\u7684\u786c\u4ef6\u4fe1\u606f\u7684\u6587\u4ef6\u90fd\u5b58\u653e\u5728 arch/arm/plat-xxx \u548c arch/arm/mach-xxx \u6587\u4ef6\u5939\u4e0b\uff0c\u5982\u4e0b\uff1a \u5728\u8fd9\u4e9b\u6587\u4ef6\u5185\uff0c\u90fd\u662f\u901a\u8fc7\u624b\u52a8\u5b9a\u4e49\u4e0d\u540c\u7684\u786c\u4ef6\u8bbe\u5907\uff0c\u6b65\u9aa4\u975e\u5e38\u7e41\u7410 \u8fd9\u6837\u5c31\u5bfc\u81f4\u4e86 Linux \u5185\u6838\u4ee3\u7801\u4e2d\u5145\u65a5\u7740\u5927\u91cf\u7684\u5783\u573e\u4ee3\u7801\uff0c\u56e0\u4e3a\u4e0d\u540c\u7684\u677f\u7ea7\u4ed6\u4eec\u7684\u786c\u4ef6\u4fe1\u606f\u90fd\u4e0d\u76f8\u540c\uff0c\u8fd9\u4e9b\u90fd\u662f\u786c\u4ef6\u7279\u6709\u7684\u4fe1\u606f\uff0c\u5bf9\u5185\u6838\u800c\u8a00\u6ca1\u6709\u4efb\u4f55\u7684\u610f\u4e49\uff0c\u4f46\u662f\u5f80\u5f80\u8fd9\u90e8\u5206\u4ee3\u7801\u7279\u522b\u7684\u591a\uff0c\u9020\u6210\u5185\u6838\u7684\u5197\u4f59\u3002 \u8bbe\u5907\u6811\u7684\u5f15\u5165\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u901a\u8fc7\u5f15\u5165\u8bbe\u5907\u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u5b83\u6765\u4f20\u9012\u7ed9 Linux\uff0c\u800c\u4e0d\u518d\u9700\u8981\u5185\u6838\u4e2d\u5927\u91cf\u7684\u5783\u573e\u4ee3\u7801\u3002","title":"A"},{"location":"chapter_14/5_device_tree/#b","text":"Device Tree \u6539\u53d8\u4e86\u539f\u6765\u7528 hardcode \u65b9\u5f0f\u5c06 HW \u914d\u7f6e\u4fe1\u606f\u5d4c\u5165\u5230\u5185\u6838\u4ee3\u7801\u7684\u65b9\u6cd5\uff0c\u6539\u7528 bootloader \u4f20\u9012\u4e00\u4e2a DB \u7684\u5f62\u5f0f\u3002 \u5bf9\u4e8e\u57fa\u4e8e ARM CPU \u7684\u5d4c\u5165\u5f0f\u7cfb\u7edf\uff0c\u6211\u4eec\u4e60\u60ef\u4e8e\u9488\u5bf9\u6bcf\u4e00\u4e2a platform \u8fdb\u884c\u5185\u6838\u7684\u7f16\u8bd1\u3002\u4f46\u662f\u968f\u7740 ARM \u5728\u6d88\u8d39\u7c7b\u7535\u5b50\u4e0a\u7684\u5e7f\u6cdb\u5e94\u7528\uff08\u751a\u81f3\u684c\u9762\u7cfb\u7edf\u3001\u670d\u52a1\u5668\u7cfb\u7edf\uff09\uff0c\u6211\u4eec\u671f\u671b ARM \u80fd\u591f\u8c61 X86 \u90a3\u6837\u7528\u4e00\u4e2a kernel image \u6765\u652f\u6301\u591a\u4e2a platform\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u6211\u4eec\u8ba4\u4e3a kernel \u662f\u4e00\u4e2a black box\uff0c\u90a3\u4e48\u5176\u8f93\u5165\u53c2\u6570\u5e94\u8be5\u5305\u62ec\uff1a 1\u3001\u8bc6\u522b platform \u7684\u4fe1\u606f 2\u3001runtime \u7684\u914d\u7f6e\u53c2\u6570 3\u3001\u8bbe\u5907\u7684\u62d3\u6251\u7ed3\u6784\u4ee5\u53ca\u7279\u6027 \u5bf9\u4e8e\u5d4c\u5165\u5f0f\u7cfb\u7edf\uff0c\u5728\u7cfb\u7edf\u542f\u52a8\u9636\u6bb5\uff0cbootloader \u4f1a\u52a0\u8f7d\u5185\u6838\u5e76\u5c06\u63a7\u5236\u6743\u8f6c\u4ea4\u7ed9\u5185\u6838\uff0c\u6b64\u5916\uff0c\u8fd8\u9700\u8981\u628a\u4e0a\u8ff0\u7684\u4e09\u4e2a\u53c2\u6570\u4fe1\u606f\u4f20\u9012\u7ed9 kernel\uff0c\u4ee5\u4fbf kernel \u53ef\u4ee5\u6709\u8f83\u5927\u7684\u7075\u6d3b\u6027\u3002\u5728 linux kernel \u4e2d\uff0cDevice Tree \u7684\u8bbe\u8ba1\u76ee\u6807\u5c31\u662f\u5982\u6b64\u3002","title":"B"},{"location":"chapter_14/5_device_tree/#2-x86","text":"\u56e0\u4e3a arm \u7edd\u5927\u90e8\u5206\u8bbe\u5907\u65e0\u6cd5\u81ea\u52a8\u63a2\u6d4b\u5230,\u6240\u4ee5\u8981\u6709\u4e2a\u65b9\u5f0f\u8ba9\u7cfb\u7edf\u77e5\u9053\u6709\u54ea\u4e9b\u8bbe\u5907, \u4e00\u5f00\u59cb\u662f\u7a0b\u5e8f\u5199\u6b7b\u7684, \u540e\u6765\u6709\u4e86\u8bbe\u5907\u6811. x86/x64 \u4e0a\u8bb8\u591a\u8bbe\u5907\u662f\u57fa\u4e8e PCI/PCIe \u603b\u7ebf\u7684, \u53ef\u4ee5\u81ea\u52a8\u679a\u4e3e\u5230, \u8fd9\u79cd\u8bbe\u5907\u4e0d\u9700\u8981\u8bbe\u5907\u6811\u6765\u544a\u8bc9\u7cfb\u7edf. \u4f46\u662f Intel \u8fd8\u662f\u641e\u4e86 ACPI, \u4e5f\u80fd\u5c06\u8bbe\u5907\u4fe1\u606f\u544a\u77e5\u7cfb\u7edf. \u6bd4\u5982 x86 \u5e73\u53f0\u5c31\u8bf4\u901a\u8fc7 ACPI \u77e5\u9053 CPU \u6709\u51e0\u4e2a core \u7684. \u8fd9\u5957\u673a\u5236\u548c\u8bbe\u5907\u6811\u673a\u5236\u7c7b\u4f3c.","title":"2 \u4e3a\u4ec0\u4e48 x86 \u4e0a\u4e0d\u9700\u8981\u8bbe\u5907\u6811?"},{"location":"chapter_14/5_device_tree/#_11","text":"","title":"\u4e09 \u600e\u4e48\u529e"},{"location":"chapter_14/5_device_tree/#_12","text":"","title":"(\u4e00) \u603b\u4f53\u6d41\u7a0b"},{"location":"chapter_14/5_device_tree/#_13","text":"\u5185\u6838\u4f1a\u89e3\u6790 dtb \u6587\u4ef6, \u6784\u9020\u51fa\u4e00\u7cfb\u5217\u7684 device_node \u7ed3\u6784\u4f53, device_node \u7ed3\u6784\u4f53\u4f1a\u8f6c\u6362\u4e3a platform_device \u7ed3\u6784\u4f53\u3002 \u603b\u4f53\u6d41\u7a0b: \u89e3\u6790 dtb \u6587\u4ef6 ----> \u6784\u9020 device_node \u7ed3\u6784\u4f53 ---> \u8f6c\u6362\u4e3a platform_device \u7ed3\u6784\u4f53","title":"\u5176\u4e00"},{"location":"chapter_14/5_device_tree/#_14","text":"\u7cfb\u7edf\u542f\u52a8\u540e\uff0cuboot \u4f1a\u4ece\u7f51\u7edc\u6216\u8005 flash\u3001sd \u5361\u4e2d\u8bfb\u53d6\u8bbe\u5907\u6811\u6587\u4ef6(\u5177\u4f53\u7531 uboot \u547d\u4ee4\u7ed9\u51fa)\uff0c \u5f15\u5bfc linux \u5185\u6838\u542f\u52a8\u540e\uff0c\u4f1a\u628a\u8bbe\u5907\u6811\u955c\u50cf\u4fdd\u5b58\u5230\u7684\u5185\u5b58\u5730\u5740\u4f20\u9012\u7ed9 Linux \u5185\u6838\uff0cLinux \u5185\u6838\u4f1a\u89e3\u6790\u8bbe\u5907\u6811\u955c\u50cf\uff0c\u4ece\u8bbe\u5907\u6811\u4e2d\u63d0\u53d6\u786c\u4ef6\u4fe1\u606f\u5e76\u9010\u4e00\u521d\u59cb\u5316\u3002 \u5176\u4e2d\u8bbe\u5907\u6811\u4fe1\u606f\u4f1a\u88ab\u8f6c\u6362\u6210 struct platform_device \u7c7b\u578b\u53d8\u91cf\u3002 \u800c\u9a71\u52a8\u8981\u89e3\u6790\u8bbe\u5907\u6811\uff0c\u5fc5\u987b\u5b9a\u4e49 struct platform_driver \u7c7b\u578b\u7ed3\u6784\u4f53\u53d8\u91cf\uff0c\u5e76\u901a\u8fc7\u51fd\u6570 platform_driver_register() \u6ce8\u518c\u3002 \u8fd9\u4e24\u8005\u90fd\u4f1a\u6ce8\u518c\u5230 platform\u603b\u7ebf \uff0c\u5f53\u9a71\u52a8\u548c\u8bbe\u5907\u6811\u8282\u70b9\u5339\u914d\u6210\u529f\u540e\uff0c\u5c31\u8c03\u7528 struct platform_driver \u4e2d .probe \u65b9\u6cd5\u3002 \u5176\u4e2d\u8bbe\u5907\u6811\u8282\u70b9\u4f1a\u5c01\u88c5\u5728 struct device_node \u7ed3\u6784\u4f53\u53d8\u91cf\u4e2d \u5404\u4e2a\u5c5e\u6027\u4fe1\u606f\u4f1a\u5c01\u88c5\u5728 struct property \u7ed3\u6784\u4f53\u53d8\u91cf\u4e2d\uff0c \u4ed6\u4eec\u4e0e struct platform_device \u7ed3\u6784\u4f53\u4e4b\u95f4\u5173\u7cfb\u5982\u4e0b\uff1a","title":"\u5176\u4e8c"},{"location":"chapter_14/5_device_tree/#_15","text":"dts \u6587\u4ef6\u662f\u4e00\u79cd ASCII \u6587\u672c\u683c\u5f0f\u7684\u8bbe\u5907\u6811\u63cf\u8ff0\uff0c\u5b83\u6709\u4ee5\u4e0b\u51e0\u79cd\u7279\u6027\uff1a \u6bcf\u4e2a\u8bbe\u5907\u6811\u6587\u4ef6\u90fd\u6709\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u6bcf\u4e2a\u8bbe\u5907\u90fd\u662f\u4e00\u4e2a\u8282\u70b9\u3002 \u8282\u70b9\u95f4\u53ef\u4ee5\u5d4c\u5957\uff0c\u5f62\u6210\u7236\u5b50\u5173\u7cfb\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u65b9\u4fbf\u7684\u63cf\u8ff0\u8bbe\u5907\u95f4\u7684\u5173\u7cfb\u3002 \u6bcf\u4e2a\u8bbe\u5907\u7684\u5c5e\u6027\u90fd\u7528\u4e00\u7ec4 key-value \u5bf9(\u952e\u503c\u5bf9)\u6765\u63cf\u8ff0\u3002 \u6bcf\u4e2a\u5c5e\u6027\u7684\u63cf\u8ff0\u7528 ; \u7ed3\u675f \u8bb0\u4f4f\u4e0a\u9762\u7684\u51e0\u4e2a\u6838\u5fc3\u7279\u6027\uff0c\u5f80\u4e0b\u770b\uff01","title":"(\u4e8c) \u8bbe\u5907\u6811\u8bed\u6cd5"},{"location":"chapter_14/5_device_tree/#1_3","text":"/dts-v1/; / { node1 { a-string-property = \"A string\"; a-string-list-property = \"first string\", \"second string\"; // hex is implied in byte arrays. no '0x' prefix is required a-byte-data-property = [0x01 0x23 0x34 0x56]; child-node1 { first-child-property; second-child-property = <1>; a-string-property = \"Hello, world\"; }; child-node2 { }; }; node2 { an-empty-property; a-cell-property = <1 2 3 4>; /* each number (cell) is a uint32 */ child-node1 { }; }; }; /dts-v1/; \uff1a\u8868\u793a\u8fd9\u662f\u4e00\u4e2a dts \u8bbe\u5907\u6811\u6587\u4ef6 / \uff1a\u8868\u793a\u6839\u8282\u70b9 node1\u3001node2 \uff1a\u8868\u793a\u6839\u8282\u70b9\u4e0b\u7684\u4e24\u4e2a\u5b50\u8282\u70b9 child-node1\u3001child-node2 \uff1a\u8868\u793a\u5b50\u8282\u70b9 node1 \u4e0b\u7684\u4e24\u4e2a\u5b50\u8282\u70b9 a-string-property = \"A string\"; \uff1a\u5b57\u7b26\u4e32\u5c5e\u6027\uff0c\u7528\u53cc\u5f15\u53f7\u8868\u793a cell-property = <0xbeef 123 0xabcd1234>; \uff1a32bit \u7684\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u7528\u5c16\u62ec\u53f7\u8868\u793a binary-property = [0x01 0x23 0x45 0x67]; \uff1a\u4e8c\u8fdb\u5236\u6570\u636e\u7528\u65b9\u62ec\u53f7\u8868\u793a a-string-list-property = \"first string\", \"second string\"; \uff1a\u7528\u9017\u53f7\u8868\u793a\u5b57\u7b26\u4e32\u5217\u8868","title":"1 \u6570\u636e\u683c\u5f0f"},{"location":"chapter_14/5_device_tree/#2","text":"DeviceTree \u7684\u7ed3\u6784\u975e\u5e38\u7b80\u5355\uff0c\u7531\u4e24\u79cd\u5143\u7d20\u7ec4\u6210\uff1a Node(\u8282\u70b9) \u548c Property(\u5c5e\u6027) \u3002 [label:] node-name[@unit-address] { [properties definitions] [child nodes] } \u60f3\u8c61\u4e00\u4e0b\uff0c\u4e00\u68f5\u5927\u6811\uff0c\u6bcf\u4e00\u4e2a\u6811\u5e72\u90fd\u8ba4\u4e3a\u662f\u4e00\u4e2a\u8282\u70b9\uff0c\u6bcf\u4e00\u7247\u6811\u53f6\uff0c\u60f3\u4f5c\u4e00\u4e2a\u5c5e\u6027\uff01 label \uff1a\u8282\u70b9\u7684\u4e00\u4e2a\u6807\u7b7e\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u522b\u540d node-name \uff1a\u8282\u70b9\u7684\u540d\u79f0 unit-address \uff1a\u5355\u5143\u5730\u5740\uff0c\u4e5f\u5c31\u662f\u63a7\u5236\u5668\u7684\u5730\u5740 properties \uff1a\u5c5e\u6027\u540d\u79f0 definitions \uff1a\u5c5e\u6027\u7684\u503c","title":"2 \u6570\u636e\u7ed3\u6784"},{"location":"chapter_14/5_device_tree/#3_1","text":"\u4ee5\u4e0b\u4ee3\u7801\u6bb5\u4e3a\u4f8b\u5b50 /dts-v1/; / { compatible = \"acme,coyotes-revenge\"; #address-cells = <1>; #size-cells = <0>; cpus { cpu@0 { compatible = \"arm,cortex-a9\"; reg = <0>; }; cpu@1 { compatible = \"arm,cortex-a9\"; reg = <1>; }; }; serial@101f0000 { #address-cells = <1>; #size-cells = <1>; compatible = \"arm,pl011\"; reg = <0x101f0000 0x1000 >; }; };","title":"3 \u8be6\u7ec6\u5c5e\u6027\u4ecb\u7ecd"},{"location":"chapter_14/5_device_tree/#31","text":"\u4e0b\u9762\u51e0\u4e2a\u5c5e\u6027\u662f\u57fa\u672c\u5c5e\u6027 /dts-v1/; \uff1a\u8868\u793a\u4e00\u4e2a dts \u8bbe\u5907\u6811\u6587\u4ef6 / \uff1a\u8868\u793a\u6839\u8282\u70b9 compatible = \"acme,coyotes-revenge\"; compatible \uff1a\u201c\u517c\u5bb9\u6027\u201d \u5c5e\u6027\uff0c\u8fd9\u662f\u975e\u5e38\u91cd\u8981\u7684\u4e00\u4e2a\u5c5e\u6027, \u517c\u5bb9\u5c5e\u6027\uff0c\u7531\u8be5\u5c5e\u6027\u503c\u6765\u5339\u914d\u5bf9\u5e94\u7684\u9a71\u52a8\u4ee3\u7801\u3002 \"acme,coyotes-revenge\" \uff1a\u8be5\u503c\u9075\u5faa \"manufacturer,model\" \u683c\u5f0f manufacturer \u8868\u793a\u82af\u7247\u5382\u5546\uff0c model \u8868\u793a\u9a71\u52a8\u540d\u79f0 compatible \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\u3002\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u6307\u5b9a\u8282\u70b9\u5728\u8868\u5355\u4e2d\u8868\u793a\u7684\u786e\u5207\u8bbe\u5907\" , \"\u3002 \u4f8b\u5982\uff0c\u98de\u601d\u5361\u5c14 MPC8349 \u7247\u4e0a\u7cfb\u7edf (SoC) \u6709\u4e00\u4e2a\u4e32\u884c\u8bbe\u5907\uff0c\u53ef\u5b9e\u73b0 National Semiconductor ns16550 \u5bc4\u5b58\u5668\u63a5\u53e3\u3002\u56e0\u6b64\uff0cMPC8349 \u4e32\u884c\u8bbe\u5907\u7684 compatible \u5c5e\u6027\u5e94\u4e3a\uff1a compatible = \"fsl,mpc8349-uart\", \"ns16550\" . \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cfsl,mpc8349-uart \u6307\u5b9a\u786e\u5207\u7684\u8bbe\u5907\uff0c ns16550 \u58f0\u660e\u5b83\u4e0e National Semiconductor 16550 UART \u7684\u5bc4\u5b58\u5668\u7ea7\u517c\u5bb9\u3002 cpus \uff1a\u8868\u793a\u4e00\u4e2a\u5b50\u8282\u70b9\uff0c\u8be5\u5b50\u8282\u70b9\u4e0b\u53c8\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\uff0c\u5206\u522b\u4e3a cpu0 \u548c cpu1 \u3002 cpu@0 \uff1a\u9075\u5faa <name>[@<unit-address>] \u683c\u5f0f <name> \uff1aascii \u5b57\u7b26\u4e32\uff0c\u8868\u793a\u8282\u70b9\u540d\u79f0 <unit-address> \uff1a\u5355\u5143\u5730\u5740\uff0c\u8bbe\u5907\u7684\u79c1\u6709\u5730\u5740\uff0c\u5728\u8282\u70b9 reg \u5c5e\u6027\u4e2d\u63cf\u8ff0\u3002","title":"3.1 \u57fa\u672c\u5c5e\u6027"},{"location":"chapter_14/5_device_tree/#32","text":"\u4e0b\u9762\u51e0\u4e2a\u5c5e\u6027\u4e0e\u5bfb\u5740\u76f8\u5173\u7684 #address-cells \uff1a\u8868\u793a reg \u5c5e\u6027\u4e2d \u5730\u5740\u5b57\u6bb5\u7684\u5355\u5143\u4e2a\u6570\uff0c\u6bcf\u4e2a\u5355\u5143 32bit \uff0c\u5373\u7528\u591a\u5c11\u4e2a 32bit \u5355\u5143\u8868\u793a\u5730\u5740\u4fe1\u606f\u3002 #size-cells \uff1a\u8868\u793a reg \u5c5e\u6027\u4e2d\u8868\u793a\u957f\u5ea6\u5b57\u6bb5\u7684\u5355\u5143\u4e2a\u6570\uff0c\u6bcf\u4e2a\u5355\u5143 32bit\uff0c\u5373\u7528\u591a\u5c11\u4e2a 32bit \u5355\u5143\u8868\u793a\u957f\u5ea6\u4fe1\u606f\u3002 reg \uff1a\u8be5\u5c5e\u6027\u4e00\u822c\u7528\u4e8e\u63cf\u8ff0\u8bbe\u5907\u5730\u5740\u7a7a\u95f4\u8d44\u6e90\u4fe1\u606f\uff0c\u4e00\u822c\u90fd\u662f\u67d0\u4e2a\u5916\u8bbe\u7684\u5bc4\u5b58\u5668\u5730\u5740\u8303\u56f4\u4fe1\u606f\u3002\u5176\u5f0f\u4e3a reg = <address1 length1 [address2 length2] [address3 length3] ... > \u3002\u6bcf\u4e2a\u5730\u5740\u503c\u90fd\u662f\u4e00\u4e2a\u6216\u591a\u4e2a 32 \u4f4d\u6574\u6570\u7684\u5217\u8868\uff0c\u79f0\u4e3a \u5355\u5143\u683c \u3002\u540c\u6837\uff0c\u957f\u5ea6\u503c\u53ef\u4ee5\u662f\u5355\u5143\u683c\u5217\u8868\uff0c\u4e5f\u53ef\u4ee5\u662f\u7a7a\u7684","title":"3.2 \u5bfb\u5740\u5c5e\u6027"},{"location":"chapter_14/5_device_tree/#33","text":"","title":"3.3 \u4e2d\u65ad\u5c5e\u6027"},{"location":"chapter_14/5_device_tree/#34","text":"","title":"3.4 \u5176\u4ed6\u5c5e\u6027"},{"location":"chapter_14/5_device_tree/#dts-dtc-dtb","text":"\u6574\u4e2a\u8bbe\u5907\u6811\u7275\u6d89\u9762\u6bd4\u8f83\u5e7f\uff0c\u5373\u589e\u52a0\u4e86\u65b0\u7684\u7528\u4e8e\u63cf\u8ff0\u8bbe\u5907\u786c\u4ef6\u4fe1\u606f\u7684\u6587\u672c\u683c\u5f0f\uff0c\u53c8\u589e\u52a0\u4e86\u7f16\u8bd1\u8fd9\u4e2a\u6587\u672c\u7684\u5de5\u5177\uff0c\u540c\u65f6\u8fd8\u5f97\u652f\u6301 Bootloader \u89e3\u6790\u8bbe\u5907\u6811\uff0c\u5e76\u5c06\u4fe1\u606f\u4f20\u9012\u7ed9\u5185\u6838\u3002 \u6574\u4e2a\u8bbe\u5907\u6811\u5305\u542b DTC\uff08device tree compiler\uff09\uff0cDTS\uff08device tree source\uff09\u548c DTB\uff08device tree blob\uff09\u3002","title":"(\u4e09) DTS \u548c DTC \u548c DTB \u4f7f\u7528"},{"location":"chapter_14/5_device_tree/#led","text":"\u5f85\u8865\u5145","title":"(\u56db) \u57fa\u4e8e\u8bbe\u5907\u6811\u7684 LED \u9a71\u52a8\u5b9e\u9a8c"},{"location":"chapter_14/6_device_driver_sop/","text":"\u6982\u8ff0 \u57fa\u4e8e I.MX6ULL \u603b\u7ed3 LED \u70b9\u706f\u7a0b\u5e8f, \u4ece\u9605\u8bfb\u786c\u4ef6\u624b\u518c\u5f00\u59cb\u7f16\u5199\u9a71\u52a8\u7a0b\u5e8f. \u672c\u7bc7\u603b\u7ed3\u4e0d\u540c\u573a\u666f\u4e0b\u9a71\u52a8\u7a0b\u5e8f\u7f16\u5199\u7684\u6b65\u9aa4\u3002 Linux \u7cfb\u7edf\u4e0b\u7f16\u5199\u9a71\u52a8\u7a0b\u5e8f\uff0c\u6700\u7ec8\u672c\u8d28\u90fd\u662f\u64cd\u4f5c\u5bc4\u5b58\u5668, \u4f46\u9700\u8981\u5403\u900f\u5176\u9a71\u52a8\u6846\u67b6. \u6709\u70b9\u513f\u7c7b\u4f3c\u4f60\u5199 Web \u670d\u52a1, \u53ef\u4ee5\u4ece 0 \u5f00\u59cb\u5199\u4e00\u4e2a Web \u670d\u52a1, \u4e5f\u53ef\u4ee5\u901a\u8fc7\u6846\u67b6(\u6bd4\u5982 python \u7684 flask \u6846\u67b6)\u5199\u4e00\u4e2a Web \u670d\u52a1. Linux \u5185\u6838\u5c42\u9762\u5b57\u7b26\u8bbe\u5907\u6846\u67b6 1 \u5b57\u7b26\u8bbe\u5907\u67b6\u6784\u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff1f \u5728 Linux \u7684\u4e16\u754c\u91cc\u9762\u4e00\u5207\u7686\u6587\u4ef6\uff0c\u6240\u6709\u7684\u786c\u4ef6\u8bbe\u5907\u64cd\u4f5c\u5230\u5e94\u7528\u5c42\u90fd\u4f1a\u88ab\u62bd\u8c61\u6210\u6587\u4ef6\u7684\u64cd\u4f5c\u3002\u6211\u4eec\u77e5\u9053\u5982\u679c\u5e94\u7528\u5c42\u8981\u8bbf\u95ee\u786c\u4ef6\u8bbe\u5907\uff0c\u5b83\u5fc5\u5b9a\u8981\u8c03\u7528\u5230\u786c\u4ef6\u5bf9\u5e94\u7684\u9a71\u52a8\u7a0b\u5e8f\u3002Linux \u5185\u6838\u4e2d\u6709\u90a3\u4e48\u591a\u9a71\u52a8\u7a0b\u5e8f\uff0c\u5e94\u7528\u5c42\u600e\u4e48\u624d\u80fd\u7cbe\u786e\u7684\u8c03\u7528\u5230\u5e95\u5c42\u7684\u9a71\u52a8\u7a0b\u5e8f\u5462\uff1f \u5728\u8fd9\u91cc\u6211\u4eec\u5b57\u7b26\u8bbe\u5907\u4e3a\u4f8b\uff0c\u6765\u770b\u4e00\u4e0b\u5e94\u7528\u7a0b\u5e8f\u662f\u5982\u4f55\u548c\u5e95\u5c42\u9a71\u52a8\u7a0b\u5e8f\u5173\u8054\u8d77\u6765\u7684\u3002\u5fc5\u987b\u77e5\u9053\u7684\u57fa\u7840\u77e5\u8bc6\uff1a 1.\u5728 Linux \u6587\u4ef6\u7cfb\u7edf\u4e2d\uff0c\u6bcf\u4e2a\u6587\u4ef6\u90fd\u7528\u4e00\u4e2a struct inode \u7ed3\u6784\u4f53\u6765\u63cf\u8ff0\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u91cc\u9762\u8bb0\u5f55\u4e86\u8fd9\u4e2a\u6587\u4ef6\u7684\u6240\u6709\u4fe1\u606f\uff0c\u4f8b\u5982\uff1a\u6587\u4ef6\u7c7b\u578b\uff0c\u8bbf\u95ee\u6743\u9650\u7b49\u3002 2.\u5728 Linux \u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u6bcf\u4e2a\u9a71\u52a8\u7a0b\u5e8f\u5728\u5e94\u7528\u5c42\u7684/dev \u76ee\u5f55\u4e0b\u90fd\u4f1a\u6709\u4e00\u4e2a\u8bbe\u5907\u6587\u4ef6\u548c\u5b83\u5bf9\u5e94\uff0c\u5e76\u4e14\u8be5\u6587\u4ef6\u4f1a\u6709\u5bf9\u5e94\u7684\u4e3b\u8bbe\u5907\u53f7\u548c\u6b21\u8bbe\u5907\u53f7\u3002 3.\u5728 Linux \u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u6bcf\u4e2a\u9a71\u52a8\u7a0b\u5e8f\u90fd\u8981\u5206\u914d\u4e00\u4e2a\u4e3b\u8bbe\u5907\u53f7\uff0c\u5b57\u7b26\u8bbe\u5907\u7684\u8bbe\u5907\u53f7\u4fdd\u5b58\u5728 struct cdev \u7ed3\u6784\u4f53\u4e2d\u3002 struct cdev { struct kobject kobj; struct module *owner; const struct file_operations *ops;//\u63a5\u53e3\u51fd\u6570\u96c6\u5408 struct list_head list;//\u5185\u6838\u94fe\u8868 dev_t dev; //\u8bbe\u5907\u53f7 unsigned int count\uff1b//\u6b21\u8bbe\u5907\u53f7\u4e2a\u6570 }; 4.\u5728 Linux \u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u6bcf\u6253\u5f00\u4e00\u6b21\u6587\u4ef6\uff0cLinux \u64cd\u4f5c\u7cfb\u7edf\u5728 VFS\u5c42 \u90fd\u4f1a\u5206\u914d\u4e00\u4e2a struct file \u7ed3\u6784\u4f53\u6765\u63cf\u8ff0\u6253\u5f00\u7684\u8fd9\u4e2a\u6587\u4ef6\u3002\u8be5\u7ed3\u6784\u4f53\u7528\u4e8e\u7ef4\u62a4\u6587\u4ef6\u6253\u5f00\u6743\u9650\u3001\u6587\u4ef6\u6307\u9488\u504f\u79fb\u503c\u3001\u79c1\u6709\u5185\u5b58\u5730\u5740\u7b49\u4fe1\u606f\u3002 \u6ce8\u610f\uff1a \u5e38\u5e38\u6211\u4eec\u8ba4\u4e3a struct inode \u63cf\u8ff0\u7684\u662f\u6587\u4ef6\u7684\u9759\u6001\u4fe1\u606f\uff0c\u5373\u8fd9\u4e9b\u4fe1\u606f\u5f88\u5c11\u4f1a\u6539\u53d8\u3002\u800c struct file \u63cf\u8ff0\u7684\u662f\u52a8\u6001\u4fe1\u606f\uff0c\u5373\u5728\u5bf9\u6587\u4ef6\u7684\u64cd\u4f5c\u7684\u65f6\u5019\uff0c struct file \u91cc\u9762\u7684\u4fe1\u606f\u7ecf\u5e38\u4f1a\u53d1\u751f\u53d8\u5316\u3002\u5178\u578b\u7684\u662f struct file \u7ed3\u6784\u4f53\u91cc\u9762\u7684 f_pos(\u8bb0\u5f55\u5f53\u524d\u6587\u4ef6\u7684\u4f4d\u79fb\u91cf\uff09 ,\u6bcf\u6b21\u8bfb\u5199\u4e00\u4e2a\u666e\u901a\u6587\u4ef6\u65f6 f_ops \u7684\u503c\u90fd\u4f1a\u53d1\u751f\u6539\u53d8\u3002 \u8fd9\u51e0\u4e2a\u7ed3\u6784\u4f53\u5173\u7cfb\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u901a\u8fc7\u4e0a\u56fe\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u5982\u679c\u60f3\u8bbf\u95ee\u5e95\u5c42\u8bbe\u5907\uff0c\u5c31\u5fc5\u987b\u6253\u5f00\u5bf9\u5e94\u7684\u8bbe\u5907\u6587\u4ef6\u3002\u4e5f\u5c31\u662f\u5728\u8fd9\u4e2a\u6253\u5f00\u7684\u8fc7\u7a0b\u4e2d\uff0cLinux \u5185\u6838\u5c06\u5e94\u7528\u5c42\u548c\u5bf9\u5e94\u7684\u9a71\u52a8\u7a0b\u5e8f\u5173\u8054\u8d77\u6765\u3002 1.\u5f53 open \u51fd\u6570\u6253\u5f00\u8bbe\u5907\u6587\u4ef6\u65f6\uff0c\u53ef\u4ee5\u6839\u636e\u8bbe\u5907\u6587\u4ef6\u5bf9\u5e94\u7684 struct inode \u7ed3\u6784\u4f53\u63cf\u8ff0\u7684\u4fe1\u606f\uff0c\u53ef\u4ee5\u77e5\u9053\u63a5\u4e0b\u6765\u8981\u64cd\u4f5c\u7684\u8bbe\u5907\u7c7b\u578b\uff08\u5b57\u7b26\u8bbe\u5907\u8fd8\u662f\u5757\u8bbe\u5907\uff09\u3002\u8fd8\u4f1a\u5206\u914d\u4e00\u4e2a struct file \u7ed3\u6784\u4f53\u3002 2.\u6839\u636e struct inode \u7ed3\u6784\u4f53\u91cc\u9762\u8bb0\u5f55\u7684\u8bbe\u5907\u53f7\uff0c\u53ef\u4ee5\u627e\u5230\u5bf9\u5e94\u7684\u9a71\u52a8\u7a0b\u5e8f\u3002\u8fd9\u91cc\u4ee5\u5b57\u7b26\u8bbe\u5907\u4e3a\u4f8b\u3002\u5728 Linux \u64cd\u4f5c\u7cfb\u7edf\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u8bbe\u5907\u6709\u4e00\u4e2a struct cdev \u7ed3\u6784\u4f53\u3002\u6b64\u7ed3\u6784\u4f53\u63cf\u8ff0\u4e86\u5b57\u7b26\u8bbe\u5907\u6240\u6709\u7684\u4fe1\u606f\uff0c\u5176\u4e2d\u6700\u91cd\u8981\u4e00\u9879\u7684\u5c31\u662f\u5b57\u7b26\u8bbe\u5907\u7684\u64cd\u4f5c\u51fd\u6570\u63a5\u53e3\u3002 3.\u627e\u5230 struct cdev \u7ed3\u6784\u4f53\u540e\uff0cLinux \u5185\u6838\u5c31\u4f1a\u5c06 struct cdev \u7ed3\u6784\u4f53\u6240\u5728\u7684\u5185\u5b58\u7a7a\u95f4\u9996\u5730\u8bb0\u5f55\u5728 struct inode \u7ed3\u6784\u4f53\u7684 i_cdev \u6210\u5458\u4e2d\u3002\u5c06 struct cdev \u7ed3\u6784\u4f53\u7684\u4e2d\u8bb0\u5f55\u7684\u51fd\u6570\u64cd\u4f5c\u63a5\u53e3\u5730\u5740\u8bb0\u5f55\u5728 struct file \u7ed3\u6784\u4f53\u7684 f_op \u6210\u5458\u4e2d\u3002 4.\u4efb\u52a1\u5b8c\u6210\uff0cVFS \u5c42\u4f1a\u7ed9\u5e94\u7528\u5c42\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff08fd)\u3002\u8fd9\u4e2a fd \u662f\u548c struct file \u7ed3\u6784\u4f53\u5bf9\u5e94\u7684\u3002\u63a5\u4e0b\u6765\u4e0a\u5c42\u7684\u5e94\u7528\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u901a\u8fc7 fd \u6765\u627e\u5230 strut file,\u7136\u540e\u5728\u7531 struct file \u627e\u5230\u64cd\u4f5c\u5b57\u7b26\u8bbe\u5907\u7684\u51fd\u6570\u63a5\u53e3\u4e86\u3002 2 \u5b57\u7b26\u9a71\u52a8\u76f8\u5173\u5185\u6838 API \u6982\u8981\u7248\u672c \u7533\u8bf7\u8bbe\u5907\u53f7: alloc_chrdev_region() \u5360\u7528\u8bbe\u5907\u53f7: `` \u8bbe\u5907\u53f7\u662fdev_t\u7c7b\u578b, \u672c\u8d28\u662f\u4e00\u4e2aint\u7c7b\u578b. \u8be5\u7c7b\u578b\u524d\u51e0\u4f4d\u4ee3\u8868MAJOR\uff0c\u540e\u51e0\u4f4d\u4ee3\u8868MINOR MAJOR() \u548c MINOR() ---> \u8fd9\u4e24\u4e2a\u5b8f\u53ef\u4ee5\u4ecedev_t\u7c7b\u578b\u83b7\u53d6\u4e3b\u8bbe\u5907\u53f7\u548c\u6b21\u8bbe\u5907\u53f7. \u521d\u59cb\u5316cdev: cdev_init() \u6ce8\u518ccdev: cdev_add() class_create() \u5728sysfs\u4e2d\u521b\u5efa\u7c7b device_create() \u5728devfs\u4e2d\u521b\u5efa\u8bbe\u5907 \u5982\u679c\u4f7f\u7528 register_chrdev() API, \u5219\u53ef\u4ee5\u514d\u53bb cdev_init \u548c cdev_add \u8fc7\u7a0b register_chrdev\u5982\u679c\u662f\u5165\u53c2\u4e3a0, \u5219\u4f1a\u52a8\u6001\u6ce8\u518c\u8bbe\u5907\u53f7dev_t. register_chrdev_region\u662f\u9759\u6001\u6ce8\u518c\u8bbe\u5907\u53f7, \u4e5f\u5c31\u662f\u8bf4\u5148\u4eba\u5de5\u5b9a\u4e49\u8bbe\u5907\u53f7\u7136\u540e\u7528register_chrdev_region\u53bb\u6ce8\u518c. \u53ef\u80fd\u51fa\u73b0\u5931\u8d25\u7684\u60c5\u51b5. \u52a0\u4e2a\u5224\u65ad\uff0c\u51fa\u73b0\u5931\u8d25\u7684\u65f6\u5019\u5c31\u8c03\u7528alloc_chrdev_region\u52a8\u6001\u7533\u8bf7\u8bbe\u5907\u53f7. register_chrdev\u5185\u90e8\u4e5f\u4f1a\u521d\u59cb\u5316cdev,\u5e76\u8fdb\u884ccdev_add, \u7136\u540e\u4f1a\u8c03\u7528__register_chrdev_region\u9759\u6001\u6ce8\u518c\u8bbe\u5907\u53f7. \u5e76\u4e14register_chrdev\u662f\u76f8\u5bf9\u6bd4\u8f83\u8001\u7684\u7248\u672c\u7684\u5185\u6838\u7684\u505a\u6cd5, \u7406\u8bba\u4e0a\u73b0\u5728\u66f4\u52a0\u63a8\u8350\u8d70\u7684\u65b0\u7684\u505a\u6cd5. \u8be6\u7ec6 cdev_init() /** * cdev_init() - initialize a cdev structure * @cdev: the structure to initialize * @fops: the file_operations for this device * * Initializes @cdev, remembering @fops, making it ready to add to the * system with cdev_add(). */ void cdev_init(struct cdev *cdev, const struct file_operations *fops) \u529f\u80fd\uff1a \u521d\u59cb\u5316cdev\u7ed3\u6784\u4f53 \u53c2\u6570\uff1a @cdev cdev\u7ed3\u6784\u4f53\u5730\u5740 @fops \u64cd\u4f5c\u5b57\u7b26\u8bbe\u5907\u7684\u51fd\u6570\u63a5\u53e3\u5730\u5740 \u8fd4\u56de\u503c\uff1a \u65e0 register_chrdev_region() /** * register_chrdev_region() - register a range of device numbers * @from: the first in the desired range of device numbers; must include * the major number. * @count: the number of consecutive device numbers required * @name: the name of the device or driver. * * Return value is zero on success, a negative error code on failure. */ int register_chrdev_region(dev_t from, unsigned count, const char *name) \u529f\u80fd\uff1a \u6ce8\u518c\u4e00\u4e2a\u8303\u56f4\uff08)\u7684\u8bbe\u5907\u53f7 \u53c2\u6570\uff1a @from \u8bbe\u5907\u53f7 @count \u6ce8\u518c\u7684\u8bbe\u5907\u4e2a\u6570 @name \u8bbe\u5907\u7684\u540d\u5b57 \u8fd4\u56de\u503c\uff1a \u6210\u529f\u8fd4\u56de0,\u5931\u8d25\u8fd4\u56de\u9519\u8bef\u7801\uff08\u8d1f\u6570\uff09 cdev_add() /** * cdev_add() - add a char device to the system * @p: the cdev structure for the device * @dev: the first device number for which this device is responsible * @count: the number of consecutive minor numbers corresponding to this * device * * cdev_add() adds the device represented by @p to the system, making it * live immediately. A negative error code is returned on failure. */ int cdev_add(struct cdev *p, dev_t dev, unsigned count) \u529f\u80fd\uff1a \u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\u8bbe\u5907\u5230\u64cd\u4f5c\u7cfb\u7edf \u53c2\u6570\uff1a @p cdev\u7ed3\u6784\u4f53\u5730\u5740 @dev \u8bbe\u5907\u53f7 @count \u6b21\u8bbe\u5907\u53f7\u4e2a\u6570 \u8fd4\u56de\u503c\uff1a \u6210\u529f\u8fd4\u56de0,\u5931\u8d25\u8fd4\u56de\u9519\u8bef\u7801\uff08\u8d1f\u6570\uff09 cdev_del() /** * cdev_del() - remove a cdev from the system * @p: the cdev structure to be removed * * cdev_del() removes @p from the system, possibly freeing the structure * itself. */ void cdev_del(struct cdev *p) \u529f\u80fd\uff1a \u4ece\u7cfb\u7edf\u4e2d\u5220\u9664\u4e00\u4e2a\u5b57\u7b26\u8bbe\u5907 \u53c2\u6570\uff1a @p cdev\u7ed3\u6784\u4f53\u5730\u5740 \u8fd4\u56de\u503c\uff1a \u65e0 register_chrdev() static inline int register_chrdev(unsigned int major, const char *name, const struct file_operations *fops) \u529f\u80fd\uff1a \u6ce8\u518c\u6216\u8005\u5206\u914d\u8bbe\u5907\u53f7\uff0c\u5e76\u6ce8\u518cfops\u5230cdev\u7ed3\u6784\u4f53\uff0c \u5982\u679cmajor>0\uff0c\u529f\u80fd\u4e3a\u6ce8\u518c\u8be5\u4e3b\u8bbe\u5907\u53f7\uff0c \u5982\u679cmajor=0\uff0c\u529f\u80fd\u4e3a\u52a8\u6001\u5206\u914d\u4e3b\u8bbe\u5907\u53f7\u3002 \u53c2\u6570\uff1a @major : \u4e3b\u8bbe\u5907\u53f7 @name : \u8bbe\u5907\u540d\u79f0\uff0c\u6267\u884c cat /proc/devices\u663e\u793a\u7684\u540d\u79f0 @fops : \u6587\u4ef6\u7cfb\u7edf\u7684\u63a5\u53e3\u6307\u9488 \u8fd4\u56de\u503c \u5982\u679cmajor>0 \u6210\u529f\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de\u8d1f\u7684\u9519\u8bef\u7801 \u5982\u679cmajor=0 \u6210\u529f\u8fd4\u56de\u4e3b\u8bbe\u5907\u53f7\uff0c\u5931\u8d25\u8fd4\u56de\u8d1f\u7684\u9519\u8bef\u7801 \u8be5\u51fd\u6570\u5b9e\u73b0\u4e86\u5bf9cdev\u7684\u521d\u59cb\u5316\u548c\u6ce8\u518c\u7684\u5c01\u88c5\uff0c\u6240\u4ee5\u8c03\u7528\u8be5\u51fd\u6570\u4e4b\u540e\u5c31\u4e0d\u9700\u8981\u81ea\u5df1\u64cd\u4f5ccdev\u4e86\u3002 \u76f8\u5bf9\u7684\u6ce8\u9500\u51fd\u6570\u4e3a unregister_chrdev() static inline void unregister_chrdev(unsigned int major, const char *name) 3 \u5982\u4f55\u7f16\u5199\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8 \u53c2\u8003\u4e0a\u56fe\uff0c\u7f16\u5199\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u6b65\u9aa4\u5982\u4e0b\uff1a 1. \u5b9e\u73b0\u6a21\u5757\u52a0\u8f7d\u548c\u5378\u8f7d\u5165\u53e3\u51fd\u6570 module_init (hello_init); module_exit (hello_exit); 2. \u7533\u8bf7\u4e3b\u8bbe\u5907\u53f7 \u7533\u8bf7\u4e3b\u8bbe\u5907\u53f7 (\u5185\u6838\u4e2d\u7528\u4e8e\u533a\u5206\u548c\u7ba1\u7406\u4e0d\u540c\u5b57\u7b26\u8bbe\u5907) register_chrdev_region (devno, number_of_devices, \"hello\"); 3. \u521b\u5efa\u8bbe\u5907\u8282\u70b9 \u521b\u5efa\u8bbe\u5907\u8282\u70b9\u6587\u4ef6 (\u4e3a\u7528\u6237\u63d0\u4f9b\u4e00\u4e2a\u53ef\u64cd\u4f5c\u5230\u6587\u4ef6\u63a5\u53e3--open()) \u521b\u5efa\u8bbe\u5907\u8282\u70b9\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a\u624b\u52a8\u65b9\u5f0f\u521b\u5efa\uff0c\u51fd\u6570\u81ea\u52a8\u521b\u5efa\u3002 3.1 \u624b\u52a8\u521b\u5efa\uff1a mknod /dev/hello c 250 0 3.2 \u81ea\u52a8\u521b\u5efa\u8bbe\u5907\u8282\u70b9(udev \u673a\u5236) \u9664\u4e86\u4f7f\u7528 mknod \u547d\u4ee4\u624b\u52a8\u521b\u5efa\u8bbe\u5907\u8282\u70b9\uff0c\u8fd8\u53ef\u4ee5\u5229\u7528 linux \u7684 udev\u3001mdev \u673a\u5236 \uff0c busybox \u4f1a\u521b\u5efa\u4e00\u4e2a udev \u7684\u7b80\u5316\u7248\u672c--mdev \u800c\u6211\u4eec\u7684 ARM \u5f00\u53d1\u677f\u4e0a\u79fb\u690d\u7684 busybox \u6709 mdev \u673a\u5236 \uff0c\u90a3\u4e48\u5c31\u4f7f\u7528 mdev \u673a\u5236\u6765\u81ea\u52a8\u521b\u5efa\u8bbe\u5907\u8282\u70b9\u3002 \u5728 etc/init.d/rcS \u6587\u4ef6\u91cc\u6709\u4e00\u53e5\uff1a echo /sbin/mdev > /proc/sys/kernel/hotplug \u8be5\u547d\u4ee4\u5c31\u662f\u7528\u6765\u81ea\u52a8\u521b\u5efa\u8bbe\u5907\u8282\u70b9\u3002 udev \u662f\u4e00\u4e2a\u5de5\u4f5c\u5728\u7528\u6237\u7a7a\u95f4\u7684\u5de5\u5177\uff0c\u5b83\u80fd\u6839\u636e\u7cfb\u7edf\u4e2d\u786c\u4ef6\u8bbe\u5907\u7684\u72b6\u6001\u52a8\u6001\u7684\u66f4\u65b0\u8bbe\u5907\u6587\u4ef6\uff0c\u5305\u62ec\u8bbe\u5907\u6587\u4ef6\u7684\u521b\u5efa\uff0c\u5220\u9664\uff0c\u6743\u9650\u7b49\u3002\u8fd9\u4e9b\u6587\u4ef6\u901a\u5e38\u90fd\u5b9a\u4e49\u5728/dev \u76ee\u5f55\u4e0b\uff0c\u4f46\u4e5f\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u3002udev \u5fc5\u987b\u6709\u5185\u6838\u4e2d\u7684 sysfs \u548c tmpfs \u652f\u6301\uff0csysfs \u4e3a udev \u63d0\u4f9b\u8bbe\u5907\u5165\u53e3\u548c uevent \u901a\u9053\uff0ctmpfs \u4e3a udev \u8bbe\u5907\u6587\u4ef6\u63d0\u4f9b\u5b58\u653e\u7a7a\u95f4\u3002 udev \u8fd0\u884c\u5728\u7528\u6237\u6a21\u5f0f\uff0c\u800c\u975e\u5185\u6838\u4e2d\u3002udev \u7684\u521d\u59cb\u5316\u811a\u672c\u5728\u7cfb\u7edf\u542f\u52a8\u65f6\u521b\u5efa\u8bbe\u5907\u8282\u70b9\uff0c\u5e76\u4e14\u5f53\u63d2\u5165\u65b0\u8bbe\u5907\u2014\u2014\u52a0\u5165\u9a71\u52a8\u6a21\u5757\u2014\u2014\u5728 sysfs \u4e0a\u6ce8\u518c\u65b0\u7684\u6570\u636e\u540e\uff0cudev \u4f1a\u521b\u65b0\u65b0\u7684\u8bbe\u5907\u8282\u70b9\u3002 \u6ce8\u610f\uff0cudev \u662f\u901a\u8fc7\u5bf9\u5185\u6838\u4ea7\u751f\u7684\u8bbe\u5907\u6587\u4ef6\u4fee\u6539\uff0c\u6216\u589e\u52a0\u522b\u540d\u7684\u65b9\u5f0f\u6765\u8fbe\u5230\u81ea\u5b9a\u4e49\u8bbe\u5907\u6587\u4ef6\u7684\u76ee\u7684\u3002\u4f46\u662f\uff0cudev \u662f\u7528\u6237\u6a21\u5f0f\u7a0b\u5e8f\uff0c\u5176\u4e0d\u4f1a\u66f4\u6539\u5185\u6838\u884c\u4e3a\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5185\u6838\u4ecd\u7136\u4f1a\u521b\u5efa sda\uff0csdb \u7b49\u8bbe\u5907\u6587\u4ef6\uff0c\u800c udev \u53ef\u6839\u636e\u8bbe\u5907\u7684\u552f\u4e00\u4fe1\u606f\u6765\u533a\u5206\u4e0d\u540c\u7684\u8bbe\u5907\uff0c\u5e76\u4ea7\u751f\u65b0\u7684\u8bbe\u5907\u6587\u4ef6\uff08\u6216\u94fe\u63a5\uff09\u3002 3.3 \u5982\u4f55\u5728/sys \u865a\u62df\u6587\u4ef6\u7cfb\u7edf\u4e0b\u521b\u5efa\u8bbe\u5907\u5206\u7c7b \u7b2c\u4e00\u6b65 \uff1a\u901a\u8fc7\u5b8f class_create() \u521b\u5efa\u4e00\u4e2a class \u7c7b\u578b\u7684\u5bf9\u8c61\uff1b /* This is a #define to keep the compiler from merging different * instances of the __key variable */ #define class_create(owner, name) \\ ({ \\ static struct lock_class_key __key; \\ __class_create(owner, name, &__key); \\ }) \u53c2\u6570\uff1a @owner THIS_MODULE @name \u7c7b\u540d\u5b57 \u8fd4\u56de\u503c \u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2astruct class\u7684\u6307\u9488\u53d8\u91cfcls\u63a5\u53d7\u8fd4\u56de\u503c\uff0c\u7136\u540e\u901a\u8fc7IS_ERR(cls)\u5224\u65ad \u662f\u5426\u5931\u8d25\uff0c\u5982\u679c\u6210\u529f\u8fd9\u4e2a\u5b8f\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de\u975e9\u503c\uff08\u53ef\u4ee5\u901a\u8fc7PTR_ERR(cls)\u6765\u83b7\u5f97 \u5931\u8d25\u8fd4\u56de\u7684\u9519\u8bef\u7801\uff09 \u5728 Linux \u5185\u6838\u4e2d\uff0c\u628a\u8bbe\u5907\u8fdb\u884c\u4e86\u5206\u7c7b\uff0c\u540c\u4e00\u7c7b\u8bbe\u5907\u53ef\u4ee5\u653e\u5728\u540c\u4e00\u4e2a\u76ee\u5f55\u4e0b\uff0c\u8be5\u51fd\u6570\u542f\u793a\u5c31\u662f\u521b\u5efa\u4e86\u4e00\u4e2a\u7c7b\uff0c\u4f8b\u5982\uff1a \u7b2c\u4e8c\u6b65\uff1a\u5bfc\u51fa\u6211\u4eec\u7684\u8bbe\u5907\u4fe1\u606f\u5230\u7528\u6237\u7a7a\u95f4 /** * device_create - creates a device and registers it with sysfs * @class: pointer to the struct class that this device should be registered to * @parent: pointer to the parent struct device of this new device, if any * @devt: the dev_t for the char device to be added * @drvdata: the data to be added to the device for callbacks * @fmt: string for the device's name * * This function can be used by char device classes. A struct device * will be created in sysfs, registered to the specified class. * * A \"dev\" file will be created, showing the dev_t for the device, if * the dev_t is not 0,0. * If a pointer to a parent struct device is passed in, the newly created * struct device will be a child of that device in sysfs. * The pointer to the struct device will be returned from the call. * Any further sysfs files that might be required can be created using this * pointer. * * Returns &struct device pointer on success, or ERR_PTR() on error. * * Note: the struct class passed to this function must have previously * been created with a call to class_create(). */ struct device *device_create(struct class *class, struct device *parent, dev_t devt, void *drvdata, const char *fmt, ...) \u81ea\u52a8\u521b\u5efa\u8bbe\u5907\u8282\u70b9\u4f7f\u7528\u5b9e\u4f8b\uff1a static struct class *cls; static struct device *test_device; devno = MKDEV(major,minor); cls = class_create(THIS_MODULE,\"helloclass\"); if(IS_ERR(cls)) { unregister_chrdev(major,\"hello\"); return result; } test_device = device_create(cls,NULL,devno,NULL,\"hellodevice\"); if(IS_ERR(test_device )) { class_destroy(cls); unregister_chrdev(major,\"hello\"); return result; } 4. \u5b9e\u73b0 file_operations static const struct file_operations fifo_operations = { .owner = THIS_MODULE, .open = dev_fifo_open, .read = dev_fifo_read, .write = dev_fifo_write, .unlocked_ioctl = dev_fifo_unlocked_ioctl, }; \u5173\u4e8e ioctl \u7684\u5c55\u5f00 (1)\u4e3a\u4ec0\u4e48\u8981\u5b9e\u73b0 xxx_ioctl ? \u524d\u9762\u6211\u4eec\u5728\u9a71\u52a8\u4e2d\u5df2\u7ecf\u5b9e\u73b0\u4e86\u8bfb\u5199\u63a5\u53e3\uff0c\u901a\u8fc7\u8fd9\u4e9b\u63a5\u53e3\u6211\u4eec\u53ef\u4ee5\u5b8c\u6210\u5bf9\u8bbe\u5907\u7684\u8bfb\u5199\u3002\u4f46\u662f\u5f88\u591a\u65f6\u5019\u6211\u4eec\u7684\u5e94\u7528\u5c42\u5de5\u7a0b\u5e08\u9664\u4e86\u8981\u5bf9\u8bbe\u5907\u8fdb\u884c\u8bfb\u5199\u6570\u636e\u4e4b\u5916\uff0c\u8fd8\u5e0c\u671b\u53ef\u4ee5\u5bf9\u8bbe\u5907\u8fdb\u884c\u63a7\u5236\u3002\u4f8b\u5982:\u9488\u5bf9\u4e32\u53e3\u8bbe\u5907\uff0c\u9a71\u52a8\u5c42\u9664\u4e86\u9700\u8981\u63d0\u4f9b\u5bf9\u4e32\u53e3\u7684\u8bfb\u5199\u4e4b\u5916\uff0c\u8fd8\u9700\u63d0\u4f9b\u5bf9\u4e32\u53e3\u6ce2\u7279\u7387\u3001\u5947\u5076\u6821\u9a8c\u4f4d\u3001\u7ec8\u6b62\u4f4d\u7684\u8bbe\u7f6e\uff0c\u8fd9\u4e9b\u914d\u7f6e\u4fe1\u606f\u9700\u8981\u4ece\u5e94\u7528\u5c42\u4f20\u9012\u4e00\u4e9b\u57fa\u672c\u6570\u636e\uff0c\u4ec5\u4ec5\u662f\u6570\u636e\u7c7b\u578b\u4e0d\u540c\u3002 \u901a\u8fc7 xxx_ioctl \u51fd\u6570\u63a5\u53e3\uff0c\u53ef\u4ee5\u63d0\u4f9b\u5bf9\u8bbe\u5907\u7684\u63a7\u5236\u80fd\u529b,\u589e\u52a0\u9a71\u52a8\u7a0b\u5e8f\u7684\u7075\u6d3b\u6027\u3002 (2)\u5982\u4f55\u5b9e\u73b0 xxx_ioctl \u51fd\u6570\u63a5\u53e3? \u589e\u52a0 xxx_ioctl \u51fd\u6570\u63a5\u53e3\uff0c\u5e94\u7528\u5c42\u53ef\u4ee5\u901a\u8fc7 ioctl \u7cfb\u7edf\u8c03\u7528\uff0c\u6839\u636e\u4e0d\u540c\u7684\u547d\u4ee4\u6765\u64cd\u4f5c dev_fifo\u3002 kernel 2.6.35 \u53ca\u4e4b\u524d\u7684\u7248\u672c\u4e2d struct file_operations \u4e00\u5171\u6709 3 \u4e2a ioctl \uff1aioctl,unlocked_ioctl \u548c compat_ioctl \u73b0\u5728\u53ea\u6709 unlocked_ioctl \u548c compat_ioctl \u4e86 \u5728 kernel 2.6.36 \u4e2d\u5df2\u7ecf\u5b8c\u5168\u5220\u9664\u4e86 struct file_operations \u4e2d\u7684 ioctl \u51fd\u6570\u6307\u9488\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f unlocked_ioctl \u3002 \u00b7 2.6.36 \u4e4b\u524d\u7684\u5185\u6838 long (ioctl) (struct inode node ,struct file* filp, unsigned int cmd,unsigned long arg) \u00b7 2.6.36 \u4e4b\u540e\u7684\u5185\u6838 long (*unlocked_ioctl) (struct file *filp, unsigned int cmd, unsigned long arg) \u53c2\u6570 cmd: \u901a\u8fc7\u5e94\u7528\u51fd\u6570 ioctl \u4f20\u9012\u4e0b\u6765\u7684\u547d\u4ee4 \u5148\u6765\u770b\u770b\u5e94\u7528\u5c42\u7684 ioctl \u548c\u9a71\u52a8\u5c42\u7684 xxx_ioctl \u5bf9\u5e94\u5173\u7cfb: 5. \u6ce8\u518c cdev \u5b9a\u4e49\u597d file_operations \u7ed3\u6784\u4f53\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570 cdev_init() \u3001 cdev_add() \u6ce8\u518c\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u4e86\u3002 \u5b9e\u4f8b\u5982\u4e0b\uff1a static struct cdev cdev; cdev_init(&cdev,&hello_ops); error = cdev_add(&cdev,devno,1); \u6ce8\u610f\u5982\u679c\u4f7f\u7528\u4e86\u51fd\u6570 register_chrdev() ,\u5c31\u4e0d\u7528\u4e86\u6267\u884c\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u56e0\u4e3a\u8be5\u51fd\u6570\u5df2\u7ecf\u5b9e\u73b0\u4e86\u5bf9 cdev \u7684\u5c01\u88c5\u3002 4 \u5982\u4f55\u7f16\u5199\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u6574\u4f53\u89c6\u56fe 5 \u4ee3\u7801\u793a\u4f8b \u597d\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u6765\u5b9e\u73b0\u4e00\u4e2a\u5b8c\u6574\u7684\u5b57\u7b26\u8bbe\u5907\u6846\u67b6\u7684\u5b9e\u4f8b\uff0c\u5305\u62ec\u6253\u5f00\u3001\u5173\u95ed\u3001\u8bfb\u5199\u3001ioctrl\u3001\u81ea\u52a8\u521b\u5efa\u8bbe\u5907\u8282\u70b9\u7b49\u529f\u80fd\u3002 #include <linux/init.h> #include <linux/module.h> #include <linux/cdev.h> #include <linux/fs.h> #include <linux/device.h> #include <linux/slab.h> #include <asm/uaccess.h> #include \"dev_fifo_head.h\" //\u6307\u5b9a\u7684\u4e3b\u8bbe\u5907\u53f7 #define MAJOR_NUM 250 //\u81ea\u5df1\u7684\u5b57\u7b26\u8bbe\u5907 struct mycdev { int len; unsigned char buffer[50]; struct cdev cdev; }; MODULE_LICENSE(\"GPL\"); //\u8bbe\u5907\u53f7 static dev_t dev_num = {0}; //\u5168\u5c40gcd struct mycdev *gcd; //\u8bbe\u5907\u7c7b struct class *cls; //\u83b7\u5f97\u7528\u6237\u4f20\u9012\u7684\u6570\u636e\uff0c\u6839\u636e\u5b83\u6765\u51b3\u5b9a\u6ce8\u518c\u7684\u8bbe\u5907\u4e2a\u6570 static int ndevices = 1; module_param(ndevices, int, 0644); MODULE_PARM_DESC(ndevices, \"The number of devices for register.\\n\"); //\u6253\u5f00\u8bbe\u5907 static int dev_fifo_open(struct inode *inode, struct file *file) { struct mycdev *cd; printk(\"dev_fifo_open success!\\n\"); //\u7528struct file\u7684\u6587\u4ef6\u79c1\u6709\u6570\u636e\u6307\u9488\u4fdd\u5b58struct mycdev\u7ed3\u6784\u4f53\u6307\u9488 cd = container_of(inode->i_cdev,struct mycdev,cdev); file->private_data = cd; return 0; } //\u8bfb\u8bbe\u5907 static ssize_t dev_fifo_read(struct file *file, char __user *ubuf, size_t size, loff_t *ppos) { int n; int ret; char *kbuf; struct mycdev *mycd = file->private_data; printk(\"read *ppos : %lld\\n\",*ppos); if(*ppos == mycd->len) return 0; //\u8bf7\u6c42\u5927\u5927\u5c0f > buffer\u5269\u4f59\u7684\u5b57\u8282\u6570 :\u8bfb\u53d6\u5b9e\u9645\u8bb0\u5f97\u5b57\u8282\u6570 if(size > mycd->len - *ppos) n = mycd->len - *ppos; else n = size; printk(\"n = %d\\n\",n); //\u4ece\u4e0a\u4e00\u6b21\u6587\u4ef6\u4f4d\u7f6e\u6307\u9488\u7684\u4f4d\u7f6e\u5f00\u59cb\u8bfb\u53d6\u6570\u636e kbuf = mycd->buffer + *ppos; //\u62f7\u8d1d\u6570\u636e\u5230\u7528\u6237\u7a7a\u95f4 ret = copy_to_user(ubuf,kbuf, n); if(ret != 0) return -EFAULT; //\u66f4\u65b0\u6587\u4ef6\u4f4d\u7f6e\u6307\u9488\u7684\u503c *ppos += n; printk(\"dev_fifo_read success!\\n\"); return n; } //\u5199\u8bbe\u5907 static ssize_t dev_fifo_write(struct file *file, const char __user *ubuf,size_t size, loff_t *ppos) { int n; int ret; char *kbuf; struct mycdev *mycd = file->private_data; printk(\"write *ppos : %lld\\n\",*ppos); //\u5df2\u7ecf\u5230\u8fbebuffer\u5c3e\u90e8\u4e86 if(*ppos == sizeof(mycd->buffer)) return -1; //\u8bf7\u6c42\u5927\u5927\u5c0f > buffer\u5269\u4f59\u7684\u5b57\u8282\u6570(\u6709\u591a\u5c11\u7a7a\u95f4\u5c31\u5199\u591a\u5c11\u6570\u636e) if(size > sizeof(mycd->buffer) - *ppos) n = sizeof(mycd->buffer) - *ppos; else n = size; //\u4ece\u4e0a\u4e00\u6b21\u6587\u4ef6\u4f4d\u7f6e\u6307\u9488\u7684\u4f4d\u7f6e\u5f00\u59cb\u5199\u5165\u6570\u636e kbuf = mycd->buffer + *ppos; //\u62f7\u8d1d\u6570\u636e\u5230\u5185\u6838\u7a7a\u95f4 ret = copy_from_user(kbuf, ubuf, n); if(ret != 0) return -EFAULT; //\u66f4\u65b0\u6587\u4ef6\u4f4d\u7f6e\u6307\u9488\u7684\u503c *ppos += n; //\u66f4\u65b0dev_fifo.len mycd->len += n; printk(\"dev_fifo_write success!\\n\"); return n; } //linux \u5185\u6838\u57282.6\u4ee5\u540e\uff0c\u5df2\u7ecf\u5e9f\u5f03\u4e86ioctl\u51fd\u6570\u6307\u9488\u7ed3\u6784\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f long dev_fifo_unlocked_ioctl(struct file *file, unsigned int cmd, unsigned long arg) { int ret = 0; struct mycdev *mycd = file->private_data; if(_IOC_TYPE(cmd)!=DEV_FIFO_TYPE){ pr_err(\"cmd %u,bad magic 0x%x/0x%x.\\n\",cmd,_IOC_TYPE(cmd),DEV_FIFO_TYPE); return-ENOTTY; } if(_IOC_DIR(cmd)&_IOC_READ) ret=!access_ok(VERIFY_WRITE,(void __user*)arg,_IOC_SIZE(cmd)); else if( _IOC_DIR(cmd)&_IOC_WRITE ) ret=!access_ok(VERIFY_READ,(void __user*)arg,_IOC_SIZE(cmd)); if(ret){ pr_err(\"bad access %ld.\\n\",ret); return-EFAULT; } switch(cmd) { case DEV_FIFO_CLEAN: printk(\"CMD:CLEAN\\n\"); memset(mycd->buffer, 0, sizeof(mycd->buffer)); break; case DEV_FIFO_SETVALUE: printk(\"CMD:SETVALUE\\n\"); mycd->len = arg; break; case DEV_FIFO_GETVALUE: printk(\"CMD:GETVALUE\\n\"); ret = put_user(mycd->len, (int *)arg); break; default: return -EFAULT; } return ret; } //\u8bbe\u5907\u64cd\u4f5c\u51fd\u6570\u63a5\u53e3 static const struct file_operations fifo_operations = { .owner = THIS_MODULE, .open = dev_fifo_open, .read = dev_fifo_read, .write = dev_fifo_write, .unlocked_ioctl = dev_fifo_unlocked_ioctl, }; //\u6a21\u5757\u5165\u53e3 int __init dev_fifo_init(void) { int i = 0; int n = 0; int ret; struct device *device; gcd = kzalloc(ndevices * sizeof(struct mycdev), GFP_KERNEL); if(!gcd){ return -ENOMEM; } //\u8bbe\u5907\u53f7 : \u4e3b\u8bbe\u5907\u53f7(12bit) | \u6b21\u8bbe\u5907\u53f7(20bit) dev_num = MKDEV(MAJOR_NUM, 0); //\u9759\u6001\u6ce8\u518c\u8bbe\u5907\u53f7 ret = register_chrdev_region(dev_num,ndevices,\"dev_fifo\"); if(ret < 0){ //\u9759\u6001\u6ce8\u518c\u5931\u8d25\uff0c\u8fdb\u884c\u52a8\u6001\u6ce8\u518c\u8bbe\u5907\u53f7 ret =alloc_chrdev_region(&dev_num,0,ndevices,\"dev_fifo\"); if(ret < 0){ printk(\"Fail to register_chrdev_region\\n\"); goto err_register_chrdev_region; } } //\u521b\u5efa\u8bbe\u5907\u7c7b cls = class_create(THIS_MODULE, \"dev_fifo\"); if(IS_ERR(cls)){ ret = PTR_ERR(cls); goto err_class_create; } printk(\"ndevices : %d\\n\",ndevices); for(n = 0;n < ndevices;n ++) { //\u521d\u59cb\u5316\u5b57\u7b26\u8bbe\u5907 cdev_init(&gcd[n].cdev,&fifo_operations); //\u6dfb\u52a0\u8bbe\u5907\u5230\u64cd\u4f5c\u7cfb\u7edf ret = cdev_add(&gcd[n].cdev,dev_num + n,1); if (ret < 0) { goto err_cdev_add; } //\u5bfc\u51fa\u8bbe\u5907\u4fe1\u606f\u5230\u7528\u6237\u7a7a\u95f4(/sys/class/\u7c7b\u540d/\u8bbe\u5907\u540d) device = device_create(cls,NULL,dev_num +n,NULL,\"dev_fifo%d\",n); if(IS_ERR(device)){ ret = PTR_ERR(device); printk(\"Fail to device_create\\n\"); goto err_device_create; } } printk(\"Register dev_fito to system,ok!\\n\"); return 0; err_device_create: //\u5c06\u5df2\u7ecf\u5bfc\u51fa\u7684\u8bbe\u5907\u4fe1\u606f\u9664\u53bb for(i = 0;i < n;i ++) { device_destroy(cls,dev_num + i); } err_cdev_add: //\u5c06\u5df2\u7ecf\u6dfb\u52a0\u7684\u5168\u90e8\u9664\u53bb for(i = 0;i < n;i ++) { cdev_del(&gcd[i].cdev); } err_class_create: unregister_chrdev_region(dev_num, ndevices); err_register_chrdev_region: return ret; } void __exit dev_fifo_exit(void) { int i; //\u5220\u9664sysfs\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u8bbe\u5907 for(i = 0;i < ndevices;i ++) { device_destroy(cls,dev_num + i); } //\u5220\u9664\u7cfb\u7edf\u4e2d\u7684\u8bbe\u5907\u7c7b class_destroy(cls); //\u4ece\u7cfb\u7edf\u4e2d\u5220\u9664\u6dfb\u52a0\u7684\u5b57\u7b26\u8bbe\u5907 for(i = 0;i < ndevices;i ++) { cdev_del(&gcd[i].cdev); } //\u91ca\u653e\u7533\u8bf7\u7684\u8bbe\u5907\u53f7 unregister_chrdev_region(dev_num, ndevices); return; } module_init(dev_fifo_init); module_exit(dev_fifo_exit); \u5934\u6587\u4ef6\u5185\u5bb9: dev_fifo_head.h #ifndef _DEV_FIFO_HEAD_H #define _DEV_FIFO_HEAD_H #define DEV_FIFO_TYPE 'k' #define DEV_FIFO_CLEAN _IO(DEV_FIFO_TYPE,0x10) #define DEV_FIFO_GETVALUE _IOR(DEV_FIFO_TYPE,0x11,int) #define DEV_FIFO_SETVALUE _IOW(DEV_FIFO_TYPE,0x12,int) #endif Makefile : ifeq ($(KERNELRELEASE),) KERNEL_DIR ?=/lib/modules/$(shell uname -r)/build PWD :=$(shell pwd) modules: $(MAKE) -C $(KERNEL_DIR) M=$(PWD) modules .PHONY:modules clean clean: $(MAKE) -C $(KERNEL_DIR) M=$(PWD) clean else obj-m := dev_fifo.o endif \u5e94\u7528\u7a0b\u5e8f: #include <stdio.h> #include <stdlib.h> #include <sys/types.h> #include <string.h> #include <sys/stat.h> #include <fcntl.h> int main(int argc, const char *argv[]) { int fd ; int n; char buf[1024] = \"hello word\"; fd = open(\"/dev/dev_fifo0\",O_RDWR); if(fd < 0){ perror(\"Fail ot open\"); return -1; } printf(\"open successful ,fd = %d\\n\",fd); n = write(fd,buf,strlen(buf)); if(n < 0){ perror(\"Fail to write\"); return -1; } printf(\"write %d bytes!\\n\",n); n = write(fd,buf,strlen(buf)); if(n < 0){ perror(\"Fail to write\"); return -1; } printf(\"write %d bytes!\\n\",n); return 0; } \u6d4b\u8bd5\u6b65\u9aa4\uff1a \uff081\uff09 \u52a0\u8f7d\u6a21\u5757 sudo insmod hello.ko \uff082\uff09 \u521b\u5efa\u8bbe\u5907\u8282\u70b9 sudo mknod /dev/hello c 250 0 \u5982\u679c\u4ee3\u7801\u4e2d\u589e\u52a0\u4e86\u81ea\u52a8\u521b\u5efa\u8bbe\u5907\u8282\u70b9\u7684\u529f\u80fd\uff0c\u8fd9\u4e2a\u6b65\u9aa4\u4e0d\u8981\u6267\u884c\u3002 \uff083\uff09 \u6d4b\u8bd5\u5b57\u7b26\u8bbe\u5907 gcc test.c -o run sudo ./run","title":"\u7b2c\u516d\u7bc7 \u4ece\u9605\u8bfb\u786c\u4ef6\u624b\u518c\u5f00\u59cb\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u7f16\u5199"},{"location":"chapter_14/6_device_driver_sop/#_1","text":"\u57fa\u4e8e I.MX6ULL \u603b\u7ed3 LED \u70b9\u706f\u7a0b\u5e8f, \u4ece\u9605\u8bfb\u786c\u4ef6\u624b\u518c\u5f00\u59cb\u7f16\u5199\u9a71\u52a8\u7a0b\u5e8f. \u672c\u7bc7\u603b\u7ed3\u4e0d\u540c\u573a\u666f\u4e0b\u9a71\u52a8\u7a0b\u5e8f\u7f16\u5199\u7684\u6b65\u9aa4\u3002 Linux \u7cfb\u7edf\u4e0b\u7f16\u5199\u9a71\u52a8\u7a0b\u5e8f\uff0c\u6700\u7ec8\u672c\u8d28\u90fd\u662f\u64cd\u4f5c\u5bc4\u5b58\u5668, \u4f46\u9700\u8981\u5403\u900f\u5176\u9a71\u52a8\u6846\u67b6. \u6709\u70b9\u513f\u7c7b\u4f3c\u4f60\u5199 Web \u670d\u52a1, \u53ef\u4ee5\u4ece 0 \u5f00\u59cb\u5199\u4e00\u4e2a Web \u670d\u52a1, \u4e5f\u53ef\u4ee5\u901a\u8fc7\u6846\u67b6(\u6bd4\u5982 python \u7684 flask \u6846\u67b6)\u5199\u4e00\u4e2a Web \u670d\u52a1.","title":"\u6982\u8ff0"},{"location":"chapter_14/6_device_driver_sop/#linux","text":"","title":"Linux \u5185\u6838\u5c42\u9762\u5b57\u7b26\u8bbe\u5907\u6846\u67b6"},{"location":"chapter_14/6_device_driver_sop/#1","text":"\u5728 Linux \u7684\u4e16\u754c\u91cc\u9762\u4e00\u5207\u7686\u6587\u4ef6\uff0c\u6240\u6709\u7684\u786c\u4ef6\u8bbe\u5907\u64cd\u4f5c\u5230\u5e94\u7528\u5c42\u90fd\u4f1a\u88ab\u62bd\u8c61\u6210\u6587\u4ef6\u7684\u64cd\u4f5c\u3002\u6211\u4eec\u77e5\u9053\u5982\u679c\u5e94\u7528\u5c42\u8981\u8bbf\u95ee\u786c\u4ef6\u8bbe\u5907\uff0c\u5b83\u5fc5\u5b9a\u8981\u8c03\u7528\u5230\u786c\u4ef6\u5bf9\u5e94\u7684\u9a71\u52a8\u7a0b\u5e8f\u3002Linux \u5185\u6838\u4e2d\u6709\u90a3\u4e48\u591a\u9a71\u52a8\u7a0b\u5e8f\uff0c\u5e94\u7528\u5c42\u600e\u4e48\u624d\u80fd\u7cbe\u786e\u7684\u8c03\u7528\u5230\u5e95\u5c42\u7684\u9a71\u52a8\u7a0b\u5e8f\u5462\uff1f \u5728\u8fd9\u91cc\u6211\u4eec\u5b57\u7b26\u8bbe\u5907\u4e3a\u4f8b\uff0c\u6765\u770b\u4e00\u4e0b\u5e94\u7528\u7a0b\u5e8f\u662f\u5982\u4f55\u548c\u5e95\u5c42\u9a71\u52a8\u7a0b\u5e8f\u5173\u8054\u8d77\u6765\u7684\u3002\u5fc5\u987b\u77e5\u9053\u7684\u57fa\u7840\u77e5\u8bc6\uff1a 1.\u5728 Linux \u6587\u4ef6\u7cfb\u7edf\u4e2d\uff0c\u6bcf\u4e2a\u6587\u4ef6\u90fd\u7528\u4e00\u4e2a struct inode \u7ed3\u6784\u4f53\u6765\u63cf\u8ff0\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u91cc\u9762\u8bb0\u5f55\u4e86\u8fd9\u4e2a\u6587\u4ef6\u7684\u6240\u6709\u4fe1\u606f\uff0c\u4f8b\u5982\uff1a\u6587\u4ef6\u7c7b\u578b\uff0c\u8bbf\u95ee\u6743\u9650\u7b49\u3002 2.\u5728 Linux \u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u6bcf\u4e2a\u9a71\u52a8\u7a0b\u5e8f\u5728\u5e94\u7528\u5c42\u7684/dev \u76ee\u5f55\u4e0b\u90fd\u4f1a\u6709\u4e00\u4e2a\u8bbe\u5907\u6587\u4ef6\u548c\u5b83\u5bf9\u5e94\uff0c\u5e76\u4e14\u8be5\u6587\u4ef6\u4f1a\u6709\u5bf9\u5e94\u7684\u4e3b\u8bbe\u5907\u53f7\u548c\u6b21\u8bbe\u5907\u53f7\u3002 3.\u5728 Linux \u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u6bcf\u4e2a\u9a71\u52a8\u7a0b\u5e8f\u90fd\u8981\u5206\u914d\u4e00\u4e2a\u4e3b\u8bbe\u5907\u53f7\uff0c\u5b57\u7b26\u8bbe\u5907\u7684\u8bbe\u5907\u53f7\u4fdd\u5b58\u5728 struct cdev \u7ed3\u6784\u4f53\u4e2d\u3002 struct cdev { struct kobject kobj; struct module *owner; const struct file_operations *ops;//\u63a5\u53e3\u51fd\u6570\u96c6\u5408 struct list_head list;//\u5185\u6838\u94fe\u8868 dev_t dev; //\u8bbe\u5907\u53f7 unsigned int count\uff1b//\u6b21\u8bbe\u5907\u53f7\u4e2a\u6570 }; 4.\u5728 Linux \u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u6bcf\u6253\u5f00\u4e00\u6b21\u6587\u4ef6\uff0cLinux \u64cd\u4f5c\u7cfb\u7edf\u5728 VFS\u5c42 \u90fd\u4f1a\u5206\u914d\u4e00\u4e2a struct file \u7ed3\u6784\u4f53\u6765\u63cf\u8ff0\u6253\u5f00\u7684\u8fd9\u4e2a\u6587\u4ef6\u3002\u8be5\u7ed3\u6784\u4f53\u7528\u4e8e\u7ef4\u62a4\u6587\u4ef6\u6253\u5f00\u6743\u9650\u3001\u6587\u4ef6\u6307\u9488\u504f\u79fb\u503c\u3001\u79c1\u6709\u5185\u5b58\u5730\u5740\u7b49\u4fe1\u606f\u3002 \u6ce8\u610f\uff1a \u5e38\u5e38\u6211\u4eec\u8ba4\u4e3a struct inode \u63cf\u8ff0\u7684\u662f\u6587\u4ef6\u7684\u9759\u6001\u4fe1\u606f\uff0c\u5373\u8fd9\u4e9b\u4fe1\u606f\u5f88\u5c11\u4f1a\u6539\u53d8\u3002\u800c struct file \u63cf\u8ff0\u7684\u662f\u52a8\u6001\u4fe1\u606f\uff0c\u5373\u5728\u5bf9\u6587\u4ef6\u7684\u64cd\u4f5c\u7684\u65f6\u5019\uff0c struct file \u91cc\u9762\u7684\u4fe1\u606f\u7ecf\u5e38\u4f1a\u53d1\u751f\u53d8\u5316\u3002\u5178\u578b\u7684\u662f struct file \u7ed3\u6784\u4f53\u91cc\u9762\u7684 f_pos(\u8bb0\u5f55\u5f53\u524d\u6587\u4ef6\u7684\u4f4d\u79fb\u91cf\uff09 ,\u6bcf\u6b21\u8bfb\u5199\u4e00\u4e2a\u666e\u901a\u6587\u4ef6\u65f6 f_ops \u7684\u503c\u90fd\u4f1a\u53d1\u751f\u6539\u53d8\u3002 \u8fd9\u51e0\u4e2a\u7ed3\u6784\u4f53\u5173\u7cfb\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u901a\u8fc7\u4e0a\u56fe\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u5982\u679c\u60f3\u8bbf\u95ee\u5e95\u5c42\u8bbe\u5907\uff0c\u5c31\u5fc5\u987b\u6253\u5f00\u5bf9\u5e94\u7684\u8bbe\u5907\u6587\u4ef6\u3002\u4e5f\u5c31\u662f\u5728\u8fd9\u4e2a\u6253\u5f00\u7684\u8fc7\u7a0b\u4e2d\uff0cLinux \u5185\u6838\u5c06\u5e94\u7528\u5c42\u548c\u5bf9\u5e94\u7684\u9a71\u52a8\u7a0b\u5e8f\u5173\u8054\u8d77\u6765\u3002 1.\u5f53 open \u51fd\u6570\u6253\u5f00\u8bbe\u5907\u6587\u4ef6\u65f6\uff0c\u53ef\u4ee5\u6839\u636e\u8bbe\u5907\u6587\u4ef6\u5bf9\u5e94\u7684 struct inode \u7ed3\u6784\u4f53\u63cf\u8ff0\u7684\u4fe1\u606f\uff0c\u53ef\u4ee5\u77e5\u9053\u63a5\u4e0b\u6765\u8981\u64cd\u4f5c\u7684\u8bbe\u5907\u7c7b\u578b\uff08\u5b57\u7b26\u8bbe\u5907\u8fd8\u662f\u5757\u8bbe\u5907\uff09\u3002\u8fd8\u4f1a\u5206\u914d\u4e00\u4e2a struct file \u7ed3\u6784\u4f53\u3002 2.\u6839\u636e struct inode \u7ed3\u6784\u4f53\u91cc\u9762\u8bb0\u5f55\u7684\u8bbe\u5907\u53f7\uff0c\u53ef\u4ee5\u627e\u5230\u5bf9\u5e94\u7684\u9a71\u52a8\u7a0b\u5e8f\u3002\u8fd9\u91cc\u4ee5\u5b57\u7b26\u8bbe\u5907\u4e3a\u4f8b\u3002\u5728 Linux \u64cd\u4f5c\u7cfb\u7edf\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u8bbe\u5907\u6709\u4e00\u4e2a struct cdev \u7ed3\u6784\u4f53\u3002\u6b64\u7ed3\u6784\u4f53\u63cf\u8ff0\u4e86\u5b57\u7b26\u8bbe\u5907\u6240\u6709\u7684\u4fe1\u606f\uff0c\u5176\u4e2d\u6700\u91cd\u8981\u4e00\u9879\u7684\u5c31\u662f\u5b57\u7b26\u8bbe\u5907\u7684\u64cd\u4f5c\u51fd\u6570\u63a5\u53e3\u3002 3.\u627e\u5230 struct cdev \u7ed3\u6784\u4f53\u540e\uff0cLinux \u5185\u6838\u5c31\u4f1a\u5c06 struct cdev \u7ed3\u6784\u4f53\u6240\u5728\u7684\u5185\u5b58\u7a7a\u95f4\u9996\u5730\u8bb0\u5f55\u5728 struct inode \u7ed3\u6784\u4f53\u7684 i_cdev \u6210\u5458\u4e2d\u3002\u5c06 struct cdev \u7ed3\u6784\u4f53\u7684\u4e2d\u8bb0\u5f55\u7684\u51fd\u6570\u64cd\u4f5c\u63a5\u53e3\u5730\u5740\u8bb0\u5f55\u5728 struct file \u7ed3\u6784\u4f53\u7684 f_op \u6210\u5458\u4e2d\u3002 4.\u4efb\u52a1\u5b8c\u6210\uff0cVFS \u5c42\u4f1a\u7ed9\u5e94\u7528\u5c42\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff08fd)\u3002\u8fd9\u4e2a fd \u662f\u548c struct file \u7ed3\u6784\u4f53\u5bf9\u5e94\u7684\u3002\u63a5\u4e0b\u6765\u4e0a\u5c42\u7684\u5e94\u7528\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u901a\u8fc7 fd \u6765\u627e\u5230 strut file,\u7136\u540e\u5728\u7531 struct file \u627e\u5230\u64cd\u4f5c\u5b57\u7b26\u8bbe\u5907\u7684\u51fd\u6570\u63a5\u53e3\u4e86\u3002","title":"1 \u5b57\u7b26\u8bbe\u5907\u67b6\u6784\u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff1f"},{"location":"chapter_14/6_device_driver_sop/#2-api","text":"","title":"2 \u5b57\u7b26\u9a71\u52a8\u76f8\u5173\u5185\u6838 API"},{"location":"chapter_14/6_device_driver_sop/#_2","text":"\u7533\u8bf7\u8bbe\u5907\u53f7: alloc_chrdev_region() \u5360\u7528\u8bbe\u5907\u53f7: `` \u8bbe\u5907\u53f7\u662fdev_t\u7c7b\u578b, \u672c\u8d28\u662f\u4e00\u4e2aint\u7c7b\u578b. \u8be5\u7c7b\u578b\u524d\u51e0\u4f4d\u4ee3\u8868MAJOR\uff0c\u540e\u51e0\u4f4d\u4ee3\u8868MINOR MAJOR() \u548c MINOR() ---> \u8fd9\u4e24\u4e2a\u5b8f\u53ef\u4ee5\u4ecedev_t\u7c7b\u578b\u83b7\u53d6\u4e3b\u8bbe\u5907\u53f7\u548c\u6b21\u8bbe\u5907\u53f7. \u521d\u59cb\u5316cdev: cdev_init() \u6ce8\u518ccdev: cdev_add() class_create() \u5728sysfs\u4e2d\u521b\u5efa\u7c7b device_create() \u5728devfs\u4e2d\u521b\u5efa\u8bbe\u5907 \u5982\u679c\u4f7f\u7528 register_chrdev() API, \u5219\u53ef\u4ee5\u514d\u53bb cdev_init \u548c cdev_add \u8fc7\u7a0b register_chrdev\u5982\u679c\u662f\u5165\u53c2\u4e3a0, \u5219\u4f1a\u52a8\u6001\u6ce8\u518c\u8bbe\u5907\u53f7dev_t. register_chrdev_region\u662f\u9759\u6001\u6ce8\u518c\u8bbe\u5907\u53f7, \u4e5f\u5c31\u662f\u8bf4\u5148\u4eba\u5de5\u5b9a\u4e49\u8bbe\u5907\u53f7\u7136\u540e\u7528register_chrdev_region\u53bb\u6ce8\u518c. \u53ef\u80fd\u51fa\u73b0\u5931\u8d25\u7684\u60c5\u51b5. \u52a0\u4e2a\u5224\u65ad\uff0c\u51fa\u73b0\u5931\u8d25\u7684\u65f6\u5019\u5c31\u8c03\u7528alloc_chrdev_region\u52a8\u6001\u7533\u8bf7\u8bbe\u5907\u53f7. register_chrdev\u5185\u90e8\u4e5f\u4f1a\u521d\u59cb\u5316cdev,\u5e76\u8fdb\u884ccdev_add, \u7136\u540e\u4f1a\u8c03\u7528__register_chrdev_region\u9759\u6001\u6ce8\u518c\u8bbe\u5907\u53f7. \u5e76\u4e14register_chrdev\u662f\u76f8\u5bf9\u6bd4\u8f83\u8001\u7684\u7248\u672c\u7684\u5185\u6838\u7684\u505a\u6cd5, \u7406\u8bba\u4e0a\u73b0\u5728\u66f4\u52a0\u63a8\u8350\u8d70\u7684\u65b0\u7684\u505a\u6cd5.","title":"\u6982\u8981\u7248\u672c"},{"location":"chapter_14/6_device_driver_sop/#_3","text":"cdev_init() /** * cdev_init() - initialize a cdev structure * @cdev: the structure to initialize * @fops: the file_operations for this device * * Initializes @cdev, remembering @fops, making it ready to add to the * system with cdev_add(). */ void cdev_init(struct cdev *cdev, const struct file_operations *fops) \u529f\u80fd\uff1a \u521d\u59cb\u5316cdev\u7ed3\u6784\u4f53 \u53c2\u6570\uff1a @cdev cdev\u7ed3\u6784\u4f53\u5730\u5740 @fops \u64cd\u4f5c\u5b57\u7b26\u8bbe\u5907\u7684\u51fd\u6570\u63a5\u53e3\u5730\u5740 \u8fd4\u56de\u503c\uff1a \u65e0 register_chrdev_region() /** * register_chrdev_region() - register a range of device numbers * @from: the first in the desired range of device numbers; must include * the major number. * @count: the number of consecutive device numbers required * @name: the name of the device or driver. * * Return value is zero on success, a negative error code on failure. */ int register_chrdev_region(dev_t from, unsigned count, const char *name) \u529f\u80fd\uff1a \u6ce8\u518c\u4e00\u4e2a\u8303\u56f4\uff08)\u7684\u8bbe\u5907\u53f7 \u53c2\u6570\uff1a @from \u8bbe\u5907\u53f7 @count \u6ce8\u518c\u7684\u8bbe\u5907\u4e2a\u6570 @name \u8bbe\u5907\u7684\u540d\u5b57 \u8fd4\u56de\u503c\uff1a \u6210\u529f\u8fd4\u56de0,\u5931\u8d25\u8fd4\u56de\u9519\u8bef\u7801\uff08\u8d1f\u6570\uff09 cdev_add() /** * cdev_add() - add a char device to the system * @p: the cdev structure for the device * @dev: the first device number for which this device is responsible * @count: the number of consecutive minor numbers corresponding to this * device * * cdev_add() adds the device represented by @p to the system, making it * live immediately. A negative error code is returned on failure. */ int cdev_add(struct cdev *p, dev_t dev, unsigned count) \u529f\u80fd\uff1a \u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\u8bbe\u5907\u5230\u64cd\u4f5c\u7cfb\u7edf \u53c2\u6570\uff1a @p cdev\u7ed3\u6784\u4f53\u5730\u5740 @dev \u8bbe\u5907\u53f7 @count \u6b21\u8bbe\u5907\u53f7\u4e2a\u6570 \u8fd4\u56de\u503c\uff1a \u6210\u529f\u8fd4\u56de0,\u5931\u8d25\u8fd4\u56de\u9519\u8bef\u7801\uff08\u8d1f\u6570\uff09 cdev_del() /** * cdev_del() - remove a cdev from the system * @p: the cdev structure to be removed * * cdev_del() removes @p from the system, possibly freeing the structure * itself. */ void cdev_del(struct cdev *p) \u529f\u80fd\uff1a \u4ece\u7cfb\u7edf\u4e2d\u5220\u9664\u4e00\u4e2a\u5b57\u7b26\u8bbe\u5907 \u53c2\u6570\uff1a @p cdev\u7ed3\u6784\u4f53\u5730\u5740 \u8fd4\u56de\u503c\uff1a \u65e0 register_chrdev() static inline int register_chrdev(unsigned int major, const char *name, const struct file_operations *fops) \u529f\u80fd\uff1a \u6ce8\u518c\u6216\u8005\u5206\u914d\u8bbe\u5907\u53f7\uff0c\u5e76\u6ce8\u518cfops\u5230cdev\u7ed3\u6784\u4f53\uff0c \u5982\u679cmajor>0\uff0c\u529f\u80fd\u4e3a\u6ce8\u518c\u8be5\u4e3b\u8bbe\u5907\u53f7\uff0c \u5982\u679cmajor=0\uff0c\u529f\u80fd\u4e3a\u52a8\u6001\u5206\u914d\u4e3b\u8bbe\u5907\u53f7\u3002 \u53c2\u6570\uff1a @major : \u4e3b\u8bbe\u5907\u53f7 @name : \u8bbe\u5907\u540d\u79f0\uff0c\u6267\u884c cat /proc/devices\u663e\u793a\u7684\u540d\u79f0 @fops : \u6587\u4ef6\u7cfb\u7edf\u7684\u63a5\u53e3\u6307\u9488 \u8fd4\u56de\u503c \u5982\u679cmajor>0 \u6210\u529f\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de\u8d1f\u7684\u9519\u8bef\u7801 \u5982\u679cmajor=0 \u6210\u529f\u8fd4\u56de\u4e3b\u8bbe\u5907\u53f7\uff0c\u5931\u8d25\u8fd4\u56de\u8d1f\u7684\u9519\u8bef\u7801 \u8be5\u51fd\u6570\u5b9e\u73b0\u4e86\u5bf9cdev\u7684\u521d\u59cb\u5316\u548c\u6ce8\u518c\u7684\u5c01\u88c5\uff0c\u6240\u4ee5\u8c03\u7528\u8be5\u51fd\u6570\u4e4b\u540e\u5c31\u4e0d\u9700\u8981\u81ea\u5df1\u64cd\u4f5ccdev\u4e86\u3002 \u76f8\u5bf9\u7684\u6ce8\u9500\u51fd\u6570\u4e3a unregister_chrdev() static inline void unregister_chrdev(unsigned int major, const char *name)","title":"\u8be6\u7ec6"},{"location":"chapter_14/6_device_driver_sop/#3","text":"\u53c2\u8003\u4e0a\u56fe\uff0c\u7f16\u5199\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u6b65\u9aa4\u5982\u4e0b\uff1a","title":"3 \u5982\u4f55\u7f16\u5199\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8"},{"location":"chapter_14/6_device_driver_sop/#1_1","text":"module_init (hello_init); module_exit (hello_exit);","title":"1. \u5b9e\u73b0\u6a21\u5757\u52a0\u8f7d\u548c\u5378\u8f7d\u5165\u53e3\u51fd\u6570"},{"location":"chapter_14/6_device_driver_sop/#2","text":"\u7533\u8bf7\u4e3b\u8bbe\u5907\u53f7 (\u5185\u6838\u4e2d\u7528\u4e8e\u533a\u5206\u548c\u7ba1\u7406\u4e0d\u540c\u5b57\u7b26\u8bbe\u5907) register_chrdev_region (devno, number_of_devices, \"hello\");","title":"2. \u7533\u8bf7\u4e3b\u8bbe\u5907\u53f7"},{"location":"chapter_14/6_device_driver_sop/#3_1","text":"\u521b\u5efa\u8bbe\u5907\u8282\u70b9\u6587\u4ef6 (\u4e3a\u7528\u6237\u63d0\u4f9b\u4e00\u4e2a\u53ef\u64cd\u4f5c\u5230\u6587\u4ef6\u63a5\u53e3--open()) \u521b\u5efa\u8bbe\u5907\u8282\u70b9\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a\u624b\u52a8\u65b9\u5f0f\u521b\u5efa\uff0c\u51fd\u6570\u81ea\u52a8\u521b\u5efa\u3002","title":"3. \u521b\u5efa\u8bbe\u5907\u8282\u70b9"},{"location":"chapter_14/6_device_driver_sop/#31","text":"mknod /dev/hello c 250 0","title":"3.1 \u624b\u52a8\u521b\u5efa\uff1a"},{"location":"chapter_14/6_device_driver_sop/#32-udev","text":"\u9664\u4e86\u4f7f\u7528 mknod \u547d\u4ee4\u624b\u52a8\u521b\u5efa\u8bbe\u5907\u8282\u70b9\uff0c\u8fd8\u53ef\u4ee5\u5229\u7528 linux \u7684 udev\u3001mdev \u673a\u5236 \uff0c busybox \u4f1a\u521b\u5efa\u4e00\u4e2a udev \u7684\u7b80\u5316\u7248\u672c--mdev \u800c\u6211\u4eec\u7684 ARM \u5f00\u53d1\u677f\u4e0a\u79fb\u690d\u7684 busybox \u6709 mdev \u673a\u5236 \uff0c\u90a3\u4e48\u5c31\u4f7f\u7528 mdev \u673a\u5236\u6765\u81ea\u52a8\u521b\u5efa\u8bbe\u5907\u8282\u70b9\u3002 \u5728 etc/init.d/rcS \u6587\u4ef6\u91cc\u6709\u4e00\u53e5\uff1a echo /sbin/mdev > /proc/sys/kernel/hotplug \u8be5\u547d\u4ee4\u5c31\u662f\u7528\u6765\u81ea\u52a8\u521b\u5efa\u8bbe\u5907\u8282\u70b9\u3002 udev \u662f\u4e00\u4e2a\u5de5\u4f5c\u5728\u7528\u6237\u7a7a\u95f4\u7684\u5de5\u5177\uff0c\u5b83\u80fd\u6839\u636e\u7cfb\u7edf\u4e2d\u786c\u4ef6\u8bbe\u5907\u7684\u72b6\u6001\u52a8\u6001\u7684\u66f4\u65b0\u8bbe\u5907\u6587\u4ef6\uff0c\u5305\u62ec\u8bbe\u5907\u6587\u4ef6\u7684\u521b\u5efa\uff0c\u5220\u9664\uff0c\u6743\u9650\u7b49\u3002\u8fd9\u4e9b\u6587\u4ef6\u901a\u5e38\u90fd\u5b9a\u4e49\u5728/dev \u76ee\u5f55\u4e0b\uff0c\u4f46\u4e5f\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u3002udev \u5fc5\u987b\u6709\u5185\u6838\u4e2d\u7684 sysfs \u548c tmpfs \u652f\u6301\uff0csysfs \u4e3a udev \u63d0\u4f9b\u8bbe\u5907\u5165\u53e3\u548c uevent \u901a\u9053\uff0ctmpfs \u4e3a udev \u8bbe\u5907\u6587\u4ef6\u63d0\u4f9b\u5b58\u653e\u7a7a\u95f4\u3002 udev \u8fd0\u884c\u5728\u7528\u6237\u6a21\u5f0f\uff0c\u800c\u975e\u5185\u6838\u4e2d\u3002udev \u7684\u521d\u59cb\u5316\u811a\u672c\u5728\u7cfb\u7edf\u542f\u52a8\u65f6\u521b\u5efa\u8bbe\u5907\u8282\u70b9\uff0c\u5e76\u4e14\u5f53\u63d2\u5165\u65b0\u8bbe\u5907\u2014\u2014\u52a0\u5165\u9a71\u52a8\u6a21\u5757\u2014\u2014\u5728 sysfs \u4e0a\u6ce8\u518c\u65b0\u7684\u6570\u636e\u540e\uff0cudev \u4f1a\u521b\u65b0\u65b0\u7684\u8bbe\u5907\u8282\u70b9\u3002 \u6ce8\u610f\uff0cudev \u662f\u901a\u8fc7\u5bf9\u5185\u6838\u4ea7\u751f\u7684\u8bbe\u5907\u6587\u4ef6\u4fee\u6539\uff0c\u6216\u589e\u52a0\u522b\u540d\u7684\u65b9\u5f0f\u6765\u8fbe\u5230\u81ea\u5b9a\u4e49\u8bbe\u5907\u6587\u4ef6\u7684\u76ee\u7684\u3002\u4f46\u662f\uff0cudev \u662f\u7528\u6237\u6a21\u5f0f\u7a0b\u5e8f\uff0c\u5176\u4e0d\u4f1a\u66f4\u6539\u5185\u6838\u884c\u4e3a\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5185\u6838\u4ecd\u7136\u4f1a\u521b\u5efa sda\uff0csdb \u7b49\u8bbe\u5907\u6587\u4ef6\uff0c\u800c udev \u53ef\u6839\u636e\u8bbe\u5907\u7684\u552f\u4e00\u4fe1\u606f\u6765\u533a\u5206\u4e0d\u540c\u7684\u8bbe\u5907\uff0c\u5e76\u4ea7\u751f\u65b0\u7684\u8bbe\u5907\u6587\u4ef6\uff08\u6216\u94fe\u63a5\uff09\u3002","title":"3.2 \u81ea\u52a8\u521b\u5efa\u8bbe\u5907\u8282\u70b9(udev \u673a\u5236)"},{"location":"chapter_14/6_device_driver_sop/#33-sys","text":"\u7b2c\u4e00\u6b65 \uff1a\u901a\u8fc7\u5b8f class_create() \u521b\u5efa\u4e00\u4e2a class \u7c7b\u578b\u7684\u5bf9\u8c61\uff1b /* This is a #define to keep the compiler from merging different * instances of the __key variable */ #define class_create(owner, name) \\ ({ \\ static struct lock_class_key __key; \\ __class_create(owner, name, &__key); \\ }) \u53c2\u6570\uff1a @owner THIS_MODULE @name \u7c7b\u540d\u5b57 \u8fd4\u56de\u503c \u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2astruct class\u7684\u6307\u9488\u53d8\u91cfcls\u63a5\u53d7\u8fd4\u56de\u503c\uff0c\u7136\u540e\u901a\u8fc7IS_ERR(cls)\u5224\u65ad \u662f\u5426\u5931\u8d25\uff0c\u5982\u679c\u6210\u529f\u8fd9\u4e2a\u5b8f\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de\u975e9\u503c\uff08\u53ef\u4ee5\u901a\u8fc7PTR_ERR(cls)\u6765\u83b7\u5f97 \u5931\u8d25\u8fd4\u56de\u7684\u9519\u8bef\u7801\uff09 \u5728 Linux \u5185\u6838\u4e2d\uff0c\u628a\u8bbe\u5907\u8fdb\u884c\u4e86\u5206\u7c7b\uff0c\u540c\u4e00\u7c7b\u8bbe\u5907\u53ef\u4ee5\u653e\u5728\u540c\u4e00\u4e2a\u76ee\u5f55\u4e0b\uff0c\u8be5\u51fd\u6570\u542f\u793a\u5c31\u662f\u521b\u5efa\u4e86\u4e00\u4e2a\u7c7b\uff0c\u4f8b\u5982\uff1a \u7b2c\u4e8c\u6b65\uff1a\u5bfc\u51fa\u6211\u4eec\u7684\u8bbe\u5907\u4fe1\u606f\u5230\u7528\u6237\u7a7a\u95f4 /** * device_create - creates a device and registers it with sysfs * @class: pointer to the struct class that this device should be registered to * @parent: pointer to the parent struct device of this new device, if any * @devt: the dev_t for the char device to be added * @drvdata: the data to be added to the device for callbacks * @fmt: string for the device's name * * This function can be used by char device classes. A struct device * will be created in sysfs, registered to the specified class. * * A \"dev\" file will be created, showing the dev_t for the device, if * the dev_t is not 0,0. * If a pointer to a parent struct device is passed in, the newly created * struct device will be a child of that device in sysfs. * The pointer to the struct device will be returned from the call. * Any further sysfs files that might be required can be created using this * pointer. * * Returns &struct device pointer on success, or ERR_PTR() on error. * * Note: the struct class passed to this function must have previously * been created with a call to class_create(). */ struct device *device_create(struct class *class, struct device *parent, dev_t devt, void *drvdata, const char *fmt, ...) \u81ea\u52a8\u521b\u5efa\u8bbe\u5907\u8282\u70b9\u4f7f\u7528\u5b9e\u4f8b\uff1a static struct class *cls; static struct device *test_device; devno = MKDEV(major,minor); cls = class_create(THIS_MODULE,\"helloclass\"); if(IS_ERR(cls)) { unregister_chrdev(major,\"hello\"); return result; } test_device = device_create(cls,NULL,devno,NULL,\"hellodevice\"); if(IS_ERR(test_device )) { class_destroy(cls); unregister_chrdev(major,\"hello\"); return result; }","title":"3.3 \u5982\u4f55\u5728/sys \u865a\u62df\u6587\u4ef6\u7cfb\u7edf\u4e0b\u521b\u5efa\u8bbe\u5907\u5206\u7c7b"},{"location":"chapter_14/6_device_driver_sop/#4-file_operations","text":"static const struct file_operations fifo_operations = { .owner = THIS_MODULE, .open = dev_fifo_open, .read = dev_fifo_read, .write = dev_fifo_write, .unlocked_ioctl = dev_fifo_unlocked_ioctl, };","title":"4. \u5b9e\u73b0 file_operations"},{"location":"chapter_14/6_device_driver_sop/#ioctl","text":"","title":"\u5173\u4e8e ioctl \u7684\u5c55\u5f00"},{"location":"chapter_14/6_device_driver_sop/#1-xxx_ioctl","text":"\u524d\u9762\u6211\u4eec\u5728\u9a71\u52a8\u4e2d\u5df2\u7ecf\u5b9e\u73b0\u4e86\u8bfb\u5199\u63a5\u53e3\uff0c\u901a\u8fc7\u8fd9\u4e9b\u63a5\u53e3\u6211\u4eec\u53ef\u4ee5\u5b8c\u6210\u5bf9\u8bbe\u5907\u7684\u8bfb\u5199\u3002\u4f46\u662f\u5f88\u591a\u65f6\u5019\u6211\u4eec\u7684\u5e94\u7528\u5c42\u5de5\u7a0b\u5e08\u9664\u4e86\u8981\u5bf9\u8bbe\u5907\u8fdb\u884c\u8bfb\u5199\u6570\u636e\u4e4b\u5916\uff0c\u8fd8\u5e0c\u671b\u53ef\u4ee5\u5bf9\u8bbe\u5907\u8fdb\u884c\u63a7\u5236\u3002\u4f8b\u5982:\u9488\u5bf9\u4e32\u53e3\u8bbe\u5907\uff0c\u9a71\u52a8\u5c42\u9664\u4e86\u9700\u8981\u63d0\u4f9b\u5bf9\u4e32\u53e3\u7684\u8bfb\u5199\u4e4b\u5916\uff0c\u8fd8\u9700\u63d0\u4f9b\u5bf9\u4e32\u53e3\u6ce2\u7279\u7387\u3001\u5947\u5076\u6821\u9a8c\u4f4d\u3001\u7ec8\u6b62\u4f4d\u7684\u8bbe\u7f6e\uff0c\u8fd9\u4e9b\u914d\u7f6e\u4fe1\u606f\u9700\u8981\u4ece\u5e94\u7528\u5c42\u4f20\u9012\u4e00\u4e9b\u57fa\u672c\u6570\u636e\uff0c\u4ec5\u4ec5\u662f\u6570\u636e\u7c7b\u578b\u4e0d\u540c\u3002 \u901a\u8fc7 xxx_ioctl \u51fd\u6570\u63a5\u53e3\uff0c\u53ef\u4ee5\u63d0\u4f9b\u5bf9\u8bbe\u5907\u7684\u63a7\u5236\u80fd\u529b,\u589e\u52a0\u9a71\u52a8\u7a0b\u5e8f\u7684\u7075\u6d3b\u6027\u3002","title":"(1)\u4e3a\u4ec0\u4e48\u8981\u5b9e\u73b0 xxx_ioctl ?"},{"location":"chapter_14/6_device_driver_sop/#2-xxx_ioctl","text":"\u589e\u52a0 xxx_ioctl \u51fd\u6570\u63a5\u53e3\uff0c\u5e94\u7528\u5c42\u53ef\u4ee5\u901a\u8fc7 ioctl \u7cfb\u7edf\u8c03\u7528\uff0c\u6839\u636e\u4e0d\u540c\u7684\u547d\u4ee4\u6765\u64cd\u4f5c dev_fifo\u3002 kernel 2.6.35 \u53ca\u4e4b\u524d\u7684\u7248\u672c\u4e2d struct file_operations \u4e00\u5171\u6709 3 \u4e2a ioctl \uff1aioctl,unlocked_ioctl \u548c compat_ioctl \u73b0\u5728\u53ea\u6709 unlocked_ioctl \u548c compat_ioctl \u4e86 \u5728 kernel 2.6.36 \u4e2d\u5df2\u7ecf\u5b8c\u5168\u5220\u9664\u4e86 struct file_operations \u4e2d\u7684 ioctl \u51fd\u6570\u6307\u9488\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f unlocked_ioctl \u3002 \u00b7 2.6.36 \u4e4b\u524d\u7684\u5185\u6838 long (ioctl) (struct inode node ,struct file* filp, unsigned int cmd,unsigned long arg) \u00b7 2.6.36 \u4e4b\u540e\u7684\u5185\u6838 long (*unlocked_ioctl) (struct file *filp, unsigned int cmd, unsigned long arg) \u53c2\u6570 cmd: \u901a\u8fc7\u5e94\u7528\u51fd\u6570 ioctl \u4f20\u9012\u4e0b\u6765\u7684\u547d\u4ee4 \u5148\u6765\u770b\u770b\u5e94\u7528\u5c42\u7684 ioctl \u548c\u9a71\u52a8\u5c42\u7684 xxx_ioctl \u5bf9\u5e94\u5173\u7cfb:","title":"(2)\u5982\u4f55\u5b9e\u73b0 xxx_ioctl \u51fd\u6570\u63a5\u53e3?"},{"location":"chapter_14/6_device_driver_sop/#5-cdev","text":"\u5b9a\u4e49\u597d file_operations \u7ed3\u6784\u4f53\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570 cdev_init() \u3001 cdev_add() \u6ce8\u518c\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u4e86\u3002 \u5b9e\u4f8b\u5982\u4e0b\uff1a static struct cdev cdev; cdev_init(&cdev,&hello_ops); error = cdev_add(&cdev,devno,1); \u6ce8\u610f\u5982\u679c\u4f7f\u7528\u4e86\u51fd\u6570 register_chrdev() ,\u5c31\u4e0d\u7528\u4e86\u6267\u884c\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u56e0\u4e3a\u8be5\u51fd\u6570\u5df2\u7ecf\u5b9e\u73b0\u4e86\u5bf9 cdev \u7684\u5c01\u88c5\u3002","title":"5. \u6ce8\u518c cdev"},{"location":"chapter_14/6_device_driver_sop/#4","text":"","title":"4 \u5982\u4f55\u7f16\u5199\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u6574\u4f53\u89c6\u56fe"},{"location":"chapter_14/6_device_driver_sop/#5","text":"\u597d\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u6765\u5b9e\u73b0\u4e00\u4e2a\u5b8c\u6574\u7684\u5b57\u7b26\u8bbe\u5907\u6846\u67b6\u7684\u5b9e\u4f8b\uff0c\u5305\u62ec\u6253\u5f00\u3001\u5173\u95ed\u3001\u8bfb\u5199\u3001ioctrl\u3001\u81ea\u52a8\u521b\u5efa\u8bbe\u5907\u8282\u70b9\u7b49\u529f\u80fd\u3002 #include <linux/init.h> #include <linux/module.h> #include <linux/cdev.h> #include <linux/fs.h> #include <linux/device.h> #include <linux/slab.h> #include <asm/uaccess.h> #include \"dev_fifo_head.h\" //\u6307\u5b9a\u7684\u4e3b\u8bbe\u5907\u53f7 #define MAJOR_NUM 250 //\u81ea\u5df1\u7684\u5b57\u7b26\u8bbe\u5907 struct mycdev { int len; unsigned char buffer[50]; struct cdev cdev; }; MODULE_LICENSE(\"GPL\"); //\u8bbe\u5907\u53f7 static dev_t dev_num = {0}; //\u5168\u5c40gcd struct mycdev *gcd; //\u8bbe\u5907\u7c7b struct class *cls; //\u83b7\u5f97\u7528\u6237\u4f20\u9012\u7684\u6570\u636e\uff0c\u6839\u636e\u5b83\u6765\u51b3\u5b9a\u6ce8\u518c\u7684\u8bbe\u5907\u4e2a\u6570 static int ndevices = 1; module_param(ndevices, int, 0644); MODULE_PARM_DESC(ndevices, \"The number of devices for register.\\n\"); //\u6253\u5f00\u8bbe\u5907 static int dev_fifo_open(struct inode *inode, struct file *file) { struct mycdev *cd; printk(\"dev_fifo_open success!\\n\"); //\u7528struct file\u7684\u6587\u4ef6\u79c1\u6709\u6570\u636e\u6307\u9488\u4fdd\u5b58struct mycdev\u7ed3\u6784\u4f53\u6307\u9488 cd = container_of(inode->i_cdev,struct mycdev,cdev); file->private_data = cd; return 0; } //\u8bfb\u8bbe\u5907 static ssize_t dev_fifo_read(struct file *file, char __user *ubuf, size_t size, loff_t *ppos) { int n; int ret; char *kbuf; struct mycdev *mycd = file->private_data; printk(\"read *ppos : %lld\\n\",*ppos); if(*ppos == mycd->len) return 0; //\u8bf7\u6c42\u5927\u5927\u5c0f > buffer\u5269\u4f59\u7684\u5b57\u8282\u6570 :\u8bfb\u53d6\u5b9e\u9645\u8bb0\u5f97\u5b57\u8282\u6570 if(size > mycd->len - *ppos) n = mycd->len - *ppos; else n = size; printk(\"n = %d\\n\",n); //\u4ece\u4e0a\u4e00\u6b21\u6587\u4ef6\u4f4d\u7f6e\u6307\u9488\u7684\u4f4d\u7f6e\u5f00\u59cb\u8bfb\u53d6\u6570\u636e kbuf = mycd->buffer + *ppos; //\u62f7\u8d1d\u6570\u636e\u5230\u7528\u6237\u7a7a\u95f4 ret = copy_to_user(ubuf,kbuf, n); if(ret != 0) return -EFAULT; //\u66f4\u65b0\u6587\u4ef6\u4f4d\u7f6e\u6307\u9488\u7684\u503c *ppos += n; printk(\"dev_fifo_read success!\\n\"); return n; } //\u5199\u8bbe\u5907 static ssize_t dev_fifo_write(struct file *file, const char __user *ubuf,size_t size, loff_t *ppos) { int n; int ret; char *kbuf; struct mycdev *mycd = file->private_data; printk(\"write *ppos : %lld\\n\",*ppos); //\u5df2\u7ecf\u5230\u8fbebuffer\u5c3e\u90e8\u4e86 if(*ppos == sizeof(mycd->buffer)) return -1; //\u8bf7\u6c42\u5927\u5927\u5c0f > buffer\u5269\u4f59\u7684\u5b57\u8282\u6570(\u6709\u591a\u5c11\u7a7a\u95f4\u5c31\u5199\u591a\u5c11\u6570\u636e) if(size > sizeof(mycd->buffer) - *ppos) n = sizeof(mycd->buffer) - *ppos; else n = size; //\u4ece\u4e0a\u4e00\u6b21\u6587\u4ef6\u4f4d\u7f6e\u6307\u9488\u7684\u4f4d\u7f6e\u5f00\u59cb\u5199\u5165\u6570\u636e kbuf = mycd->buffer + *ppos; //\u62f7\u8d1d\u6570\u636e\u5230\u5185\u6838\u7a7a\u95f4 ret = copy_from_user(kbuf, ubuf, n); if(ret != 0) return -EFAULT; //\u66f4\u65b0\u6587\u4ef6\u4f4d\u7f6e\u6307\u9488\u7684\u503c *ppos += n; //\u66f4\u65b0dev_fifo.len mycd->len += n; printk(\"dev_fifo_write success!\\n\"); return n; } //linux \u5185\u6838\u57282.6\u4ee5\u540e\uff0c\u5df2\u7ecf\u5e9f\u5f03\u4e86ioctl\u51fd\u6570\u6307\u9488\u7ed3\u6784\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f long dev_fifo_unlocked_ioctl(struct file *file, unsigned int cmd, unsigned long arg) { int ret = 0; struct mycdev *mycd = file->private_data; if(_IOC_TYPE(cmd)!=DEV_FIFO_TYPE){ pr_err(\"cmd %u,bad magic 0x%x/0x%x.\\n\",cmd,_IOC_TYPE(cmd),DEV_FIFO_TYPE); return-ENOTTY; } if(_IOC_DIR(cmd)&_IOC_READ) ret=!access_ok(VERIFY_WRITE,(void __user*)arg,_IOC_SIZE(cmd)); else if( _IOC_DIR(cmd)&_IOC_WRITE ) ret=!access_ok(VERIFY_READ,(void __user*)arg,_IOC_SIZE(cmd)); if(ret){ pr_err(\"bad access %ld.\\n\",ret); return-EFAULT; } switch(cmd) { case DEV_FIFO_CLEAN: printk(\"CMD:CLEAN\\n\"); memset(mycd->buffer, 0, sizeof(mycd->buffer)); break; case DEV_FIFO_SETVALUE: printk(\"CMD:SETVALUE\\n\"); mycd->len = arg; break; case DEV_FIFO_GETVALUE: printk(\"CMD:GETVALUE\\n\"); ret = put_user(mycd->len, (int *)arg); break; default: return -EFAULT; } return ret; } //\u8bbe\u5907\u64cd\u4f5c\u51fd\u6570\u63a5\u53e3 static const struct file_operations fifo_operations = { .owner = THIS_MODULE, .open = dev_fifo_open, .read = dev_fifo_read, .write = dev_fifo_write, .unlocked_ioctl = dev_fifo_unlocked_ioctl, }; //\u6a21\u5757\u5165\u53e3 int __init dev_fifo_init(void) { int i = 0; int n = 0; int ret; struct device *device; gcd = kzalloc(ndevices * sizeof(struct mycdev), GFP_KERNEL); if(!gcd){ return -ENOMEM; } //\u8bbe\u5907\u53f7 : \u4e3b\u8bbe\u5907\u53f7(12bit) | \u6b21\u8bbe\u5907\u53f7(20bit) dev_num = MKDEV(MAJOR_NUM, 0); //\u9759\u6001\u6ce8\u518c\u8bbe\u5907\u53f7 ret = register_chrdev_region(dev_num,ndevices,\"dev_fifo\"); if(ret < 0){ //\u9759\u6001\u6ce8\u518c\u5931\u8d25\uff0c\u8fdb\u884c\u52a8\u6001\u6ce8\u518c\u8bbe\u5907\u53f7 ret =alloc_chrdev_region(&dev_num,0,ndevices,\"dev_fifo\"); if(ret < 0){ printk(\"Fail to register_chrdev_region\\n\"); goto err_register_chrdev_region; } } //\u521b\u5efa\u8bbe\u5907\u7c7b cls = class_create(THIS_MODULE, \"dev_fifo\"); if(IS_ERR(cls)){ ret = PTR_ERR(cls); goto err_class_create; } printk(\"ndevices : %d\\n\",ndevices); for(n = 0;n < ndevices;n ++) { //\u521d\u59cb\u5316\u5b57\u7b26\u8bbe\u5907 cdev_init(&gcd[n].cdev,&fifo_operations); //\u6dfb\u52a0\u8bbe\u5907\u5230\u64cd\u4f5c\u7cfb\u7edf ret = cdev_add(&gcd[n].cdev,dev_num + n,1); if (ret < 0) { goto err_cdev_add; } //\u5bfc\u51fa\u8bbe\u5907\u4fe1\u606f\u5230\u7528\u6237\u7a7a\u95f4(/sys/class/\u7c7b\u540d/\u8bbe\u5907\u540d) device = device_create(cls,NULL,dev_num +n,NULL,\"dev_fifo%d\",n); if(IS_ERR(device)){ ret = PTR_ERR(device); printk(\"Fail to device_create\\n\"); goto err_device_create; } } printk(\"Register dev_fito to system,ok!\\n\"); return 0; err_device_create: //\u5c06\u5df2\u7ecf\u5bfc\u51fa\u7684\u8bbe\u5907\u4fe1\u606f\u9664\u53bb for(i = 0;i < n;i ++) { device_destroy(cls,dev_num + i); } err_cdev_add: //\u5c06\u5df2\u7ecf\u6dfb\u52a0\u7684\u5168\u90e8\u9664\u53bb for(i = 0;i < n;i ++) { cdev_del(&gcd[i].cdev); } err_class_create: unregister_chrdev_region(dev_num, ndevices); err_register_chrdev_region: return ret; } void __exit dev_fifo_exit(void) { int i; //\u5220\u9664sysfs\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u8bbe\u5907 for(i = 0;i < ndevices;i ++) { device_destroy(cls,dev_num + i); } //\u5220\u9664\u7cfb\u7edf\u4e2d\u7684\u8bbe\u5907\u7c7b class_destroy(cls); //\u4ece\u7cfb\u7edf\u4e2d\u5220\u9664\u6dfb\u52a0\u7684\u5b57\u7b26\u8bbe\u5907 for(i = 0;i < ndevices;i ++) { cdev_del(&gcd[i].cdev); } //\u91ca\u653e\u7533\u8bf7\u7684\u8bbe\u5907\u53f7 unregister_chrdev_region(dev_num, ndevices); return; } module_init(dev_fifo_init); module_exit(dev_fifo_exit); \u5934\u6587\u4ef6\u5185\u5bb9: dev_fifo_head.h #ifndef _DEV_FIFO_HEAD_H #define _DEV_FIFO_HEAD_H #define DEV_FIFO_TYPE 'k' #define DEV_FIFO_CLEAN _IO(DEV_FIFO_TYPE,0x10) #define DEV_FIFO_GETVALUE _IOR(DEV_FIFO_TYPE,0x11,int) #define DEV_FIFO_SETVALUE _IOW(DEV_FIFO_TYPE,0x12,int) #endif Makefile : ifeq ($(KERNELRELEASE),) KERNEL_DIR ?=/lib/modules/$(shell uname -r)/build PWD :=$(shell pwd) modules: $(MAKE) -C $(KERNEL_DIR) M=$(PWD) modules .PHONY:modules clean clean: $(MAKE) -C $(KERNEL_DIR) M=$(PWD) clean else obj-m := dev_fifo.o endif \u5e94\u7528\u7a0b\u5e8f: #include <stdio.h> #include <stdlib.h> #include <sys/types.h> #include <string.h> #include <sys/stat.h> #include <fcntl.h> int main(int argc, const char *argv[]) { int fd ; int n; char buf[1024] = \"hello word\"; fd = open(\"/dev/dev_fifo0\",O_RDWR); if(fd < 0){ perror(\"Fail ot open\"); return -1; } printf(\"open successful ,fd = %d\\n\",fd); n = write(fd,buf,strlen(buf)); if(n < 0){ perror(\"Fail to write\"); return -1; } printf(\"write %d bytes!\\n\",n); n = write(fd,buf,strlen(buf)); if(n < 0){ perror(\"Fail to write\"); return -1; } printf(\"write %d bytes!\\n\",n); return 0; } \u6d4b\u8bd5\u6b65\u9aa4\uff1a \uff081\uff09 \u52a0\u8f7d\u6a21\u5757 sudo insmod hello.ko \uff082\uff09 \u521b\u5efa\u8bbe\u5907\u8282\u70b9 sudo mknod /dev/hello c 250 0 \u5982\u679c\u4ee3\u7801\u4e2d\u589e\u52a0\u4e86\u81ea\u52a8\u521b\u5efa\u8bbe\u5907\u8282\u70b9\u7684\u529f\u80fd\uff0c\u8fd9\u4e2a\u6b65\u9aa4\u4e0d\u8981\u6267\u884c\u3002 \uff083\uff09 \u6d4b\u8bd5\u5b57\u7b26\u8bbe\u5907 gcc test.c -o run sudo ./run","title":"5 \u4ee3\u7801\u793a\u4f8b"},{"location":"chapter_14/7_linux_kernel_clipping/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3 Linux \u5185\u6838\u79fb\u690d\u76f8\u5173 \u5d4c\u5165\u5f0f Linux \u79fb\u690d\u4e09\u5de8\u5934: uboot\u3001Linux kernel\u3001rootfs(\u6839\u6587\u4ef6\u7cfb\u7edf) \u3002 \u4e00 rootfs \u4e09\u95ee(\u662f\u4ec0\u4e48 \u6709\u5565\u597d \u600e\u4e48\u529e) \u662f\u4ec0\u4e48 rootfs \u662f\u57fa\u4e8e\u5185\u5b58\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u6240\u6709\u64cd\u4f5c\u90fd\u5728\u5185\u5b58\u4e2d\u5b8c\u6210\uff1b\u4e5f\u6ca1\u6709\u5b9e\u9645\u7684\u5b58\u50a8\u8bbe\u5907\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u7684\u53c2\u4e0e\u3002 \u57fa\u4e8e\u4ee5\u4e0a\u539f\u56e0\uff0clinux \u5728\u542f\u52a8\u9636\u6bb5\u4f7f\u7528 rootfs \u6587\u4ef6\u7cfb\u7edf\uff0c\u5f53\u78c1\u76d8\u9a71\u52a8\u7a0b\u5e8f\u548c\u78c1\u76d8\u6587\u4ef6\u7cfb\u7edf\u6210\u529f\u52a0\u8f7d\u540e\uff0clinux \u7cfb\u7edf\u4f1a\u5c06\u7cfb\u7edf\u6839\u76ee\u5f55\u4ece rootfs \u5207\u6362\u5230\u78c1\u76d8\u6587\u4ef6\u7cfb\u7edf\u3002 \u6587\u4ef6\u7cfb\u7edf\u7684\u91cd\u8981\u6027 \u6587\u4ef6\u7cfb\u7edf\u7684\u91cd\u8981\u6027\uff0c\u6211\u60f3\u5927\u5bb6\u90fd\u5f88\u6e05\u695a\uff0c\u4e0d\u7528\u591a\u8bf4\u4e86\u3002\u8fd9\u91cc\u6709\u4e00\u53e5\u8bdd\uff0c\u6211\u89c9\u5f97\u975e\u5e38\u7cbe\u8f9f\u800c\u4e14\u5230\u4f4d\u7684\u70b9\u51fa\u4e86\u6587\u4ef6\u7cfb\u7edf\u5728 linux \u4e2d\u7684\u91cd\u8981\u6027\uff1a \u5c3d\u7ba1\u5185\u6838\u662f linux \u7684\u6838\u5fc3\uff0c\u4f46 \u6587\u4ef6\u5374\u662f\u7528\u6237\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u4ea4\u4e92\u6240\u91c7\u7528\u7684\u4e3b\u8981\u5de5\u5177 \u3002\u8fd9\u5bf9 linux \u6765\u8bf4\u5c24\u5176\u5982\u6b64\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728 UNIX \u4f20\u7edf\u4e2d\uff0c\u5b83\u4f7f\u7528\u6587\u4ef6 I/O \u673a\u5236\u7ba1\u7406\u786c\u4ef6\u8bbe\u5907\u548c\u6570\u636e\u6587\u4ef6\u3002 \u4e3a\u4ec0\u4e48 \u4e3a\u4ec0\u4e48\u9700\u8981 initramfs \u5728 Linux \u5185\u6838\u88ab\u52a0\u8f7d\u5230\u5185\u5b58\u5e76\u8fd0\u884c\u540e\uff0c \u5185\u6838\u8fdb\u7a0b\u6700\u7ec8\u9700\u8981\u5207\u6362\u5230\u7528\u6237\u7684\u8fdb\u7a0b\u6765\u4f7f\u7528\u8ba1\u7b97\u673a \uff0c\u800c\u7528\u6237\u8fdb\u7a0b\u53c8\u5b58\u5728\u4e8e\u5916\u5b58\u50a8\u8bbe\u5907\u4e0a\uff0c\u6bd4\u5982 systemd \u8fdb\u7a0b\uff0c\u901a\u5e38 systemd \u8fdb\u7a0b\u6240\u5728\u7684\u5b58\u50a8\u8bbe\u5907\u4e5f\u662f Linux \u771f\u6b63\u7684\u6839\u6587\u4ef6\u7cfb\u7edf\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u6211\u4eec\u77e5\u9053 \u5185\u6838\u6e90\u7801\u662f\u6ca1\u6709\u5305\u542b\u9a71\u52a8\u7a0b\u5e8f\u7684 \uff0c\u9a71\u52a8\u7a0b\u5e8f\u5728\u5916\u5b58\u50a8\u8bbe\u5907\u4e0a\uff0c\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u8981\u5207\u6362\u5230 systemd \u8fdb\u7a0b\uff08system deamon\uff09\uff0c\u5c31\u9700\u8981\u5916\u5b58\u50a8\u7684\u9a71\u52a8\uff0c\u4f46\u662f\u6ca1\u6709\u9a71\u52a8\u53c8\u6ca1\u529e\u6cd5\u8bbf\u95ee\u5916\u5b58\u50a8\uff0c\u8fd9\u5c31\u8fdb\u5165\u5148\u6709\u9e21\u8fd8\u662f\u5148\u6709\u86cb\u7684\u95ee\u9898\u4e86\uff08\u90a3\u5230\u5e95\u662f\u5148\u6709\u9e21\u8fd8\u662f\u5148\u6709\u86cb\u5462\uff1a\uff09\uff09\uff0c\u8fd9\u4e2a\u65f6\u5019 initramfs \u5c31\u95ea\u4eae\u767b\u573a\u4e86\u3002 \u6ce8\u610f\u8fd9\u91cc\u7684 initramfs \u7b49\u540c\u4e8e\u5d4c\u5165\u5f0f Linux \u65b9\u5411\u7684 rootfs \u4e3a\u4ec0\u4e48\u4e0d\u628a\u9a71\u52a8\u7a0b\u5e8f\u5168\u90e8\u653e\u5165\u5185\u6838\uff0c\u800c\u5355\u72ec\u641e initramfs \u7b2c\u4e00\uff0c\u9664\u975e\u662f\u4e00\u4e2a\u4e13\u7528\u7cfb\u7edf\uff0c\u76ee\u6807\u7cfb\u7edf\u7684\u786c\u4ef6\u5e73\u53f0\u662f\u56fa\u5b9a\u4e0d\u53d8\u7684\uff0c\u5426\u5219\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u901a\u7528\u64cd\u4f5c\u7cfb\u7edf\uff0c\u6bd4\u5982 Linux \u7684\u684c\u9762\u53d1\u884c\u7248\uff0c\u5c06\u8fd0\u884c\u5728\u5404\u79cd\u4e0d\u540c\u7684\u786c\u4ef6\u5e73\u53f0\u4e0a\u3002 \u56e0\u6b64\uff0c\u6839\u6587\u4ef6\u7cfb\u7edf\u53ef\u80fd\u5b58\u50a8\u5728\u5404\u79cd\u5404\u6837\u7684\u4ecb\u8d28\u4e0a\uff0c\u6bd4\u5982 IDE \u786c\u76d8\u3001SATA \u786c\u76d8\u3001SCSI \u786c\u76d8\u3001Flash \u5b58\u50a8\u5668\uff0c\u4ee5\u53ca\u968f\u7740\u6280\u672f\u7684\u53d1\u5c55\uff0c\u4e0d\u65ad\u51fa\u73b0\u7684\u65b0\u7684\u5b58\u50a8\u8bbe\u5907\u3002\u4e3a\u4e86\u80fd\u591f\u517c\u5bb9\u66f4\u591a\u7684\u786c\u4ef6\u5e73\u53f0\uff0c\u663e\u7136\u7cfb\u7edf\u9700\u8981\u652f\u6301\u5c3d\u53ef\u80fd\u591a\u7684\u5b58\u50a8\u8bbe\u5907\u3002\u4f46\u662f\u5982\u679c\u5c06\u6240\u6709\u8fd9\u4e9b\u8bbe\u5907\u7684\u9a71\u52a8\u5168\u90e8\u7f16\u8bd1\u8fdb\u5185\u6838\uff0c\u663e\u7136\u4e0d\u662f\u4e00\u4e2a\u597d\u529e\u6cd5\u3002\u56e0\u4e3a\u5bf9\u4e8e\u67d0\u4e2a\u7279\u5b9a\u7684\u786c\u4ef6\u5e73\u53f0\uff0c\u53ef\u80fd\u53ea\u9700\u8981\u4e00\u4e2a\u9a71\u52a8\u5373\u53ef\uff0c\u5185\u6838\u4e2d\u7684\u5176\u4ed6\u9a71\u52a8\u6839\u672c\u7528\u4e0d\u4e0a\uff0c\u5c06\u5b83\u4eec\u7f16\u8bd1\u8fdb\u5185\u6838\u53ea\u4f1a\u5f92\u589e\u5185\u6838\u7684\u5c3a\u5bf8\u3001\u5360\u7528\u5185\u5b58\u7a7a\u95f4\uff0c\u5c24\u5176\u5bf9\u4e8e\u4e00\u4e9b\u5185\u5b58\u6216\u8005\u5b58\u50a8\u4ecb\u8d28\u7a7a\u95f4\u6709\u9650\u7684\u8bbe\u5907\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c24\u4e3a\u660e\u663e\u3002\u4e8e\u662f \u5c06\u8fd9\u4e9b\u9a71\u52a8\u7f16\u8bd1\u4e3a\u6a21\u5757\uff0c\u5b58\u50a8\u5728\u6839\u6587\u4ef6\u7cfb\u7edf\u4e2d\uff0c\u6309\u9700\u8f7d\u5165\u5185\u5b58\u662f\u4e00\u4e2a\u89e3\u51b3\u95ee\u9898\u7684\u529e\u6cd5\u3002 \u5185\u6838\u542f\u52a8\u9636\u6bb5\u7528\u5230\u7684\u9a71\u52a8\u7a0b\u5e8f\u5176\u5b9e\u9700\u8981\u6309\u9700\u4ece initramfs \u52a0\u8f7d, \u800c\u4e0d\u662f\u4e00\u80a1\u8111\u5168\u90e8\u5728\u5185\u6838\u91cc\u5f92\u589e\u5185\u6838\u5c3a\u5bf8. \u7b2c\u4e8c, \u771f\u6b63\u7684/sbin/init \u53ef\u80fd\u4e0d\u4f4d\u4e8e\u7b80\u5355\u7684\u786c\u76d8\u4e0a,\u53ef\u80fd\u5728 NFS \u4e0a\u751a\u81f3\u9700\u8981\u6743\u9650\u8ba4\u8bc1\u7b49\u590d\u6742\u8fc7\u7a0b \u9700\u8981\u5c06\u590d\u6742\u8fc7\u7a0b\u8f6c\u79fb\u5230\u7528\u6237\u7a7a\u95f4\uff0c\u800c\u975e\u5728\u5185\u6838\u7a7a\u95f4\u5b9e\u73b0.\u9075\u5b88\u5185\u6838\u63d0\u4f9b\u673a\u5236\u3001\u7528\u6237\u7a7a\u95f4\u63d0\u4f9b\u7b56\u7565\u7684\u539f\u5219. initramfs \u662f\u4e00\u4e2a\u4e34\u65f6\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u5fc5\u8981\u7684\u8bbe\u5907\u5982\u786c\u76d8\u3001\u7f51\u5361\u3001\u6587\u4ef6\u7cfb\u7edf\u7b49\u7684\u9a71\u52a8\u4ee5\u53ca\u52a0\u8f7d\u9a71\u52a8\u7684\u5de5\u5177\u53ca\u5176\u8fd0\u884c\u73af\u5883\uff0c\u6bd4\u5982\u57fa\u672c\u7684 C \u5e93\uff0c\u52a8\u6001\u5e93\u7684\u94fe\u63a5\u52a0\u8f7d\u5668\u7b49\u7b49\u3002\u540c\u65f6\uff0c\u90a3\u4e9b\u5904\u7406\u6839\u6587\u4ef6\u7cfb\u7edf\u5728 RAID\u3001\u7f51\u7edc\u8bbe\u5907\u4e0a\u7684\u7a0b\u5e8f\u4e5f\u5b58\u653e\u5728 initramfs \u4e2d\u3002\u7531\u7b2c\u4e09\u65b9\u7a0b\u5e8f\uff08\u5982 Bootloader\uff09\u8d1f\u8d23\u5c06 initramfs \u4ece\u786c\u76d8\u88c5\u8f7d\u8fdb\u5185\u5b58\u3002 \u4ee5\u9a71\u52a8\u786c\u76d8\u4e3a\u4f8b\uff0c\u5185\u6838\u5c31\u4e0d\u5fc5\u518d\u4ece\u786c\u76d8\uff0c\u800c\u662f\u4ece\u5df2\u7ecf\u52a0\u8f7d\u5230\u5185\u5b58\u7684 initramfs \u4e2d\u83b7\u53d6\u786c\u76d8\u63a7\u5236\u5668\u7b49\u76f8\u5173\u9a71\u52a8\u4e86\uff0c\u7ee7\u800c\u53ef\u4ee5\u9a71\u52a8\u786c\u76d8\uff0c\u8bbf\u95ee\u786c\u76d8\u4e0a\u7684\u6839\u6587\u4ef6\u7cfb\u7edf\uff0c\u4ece\u800c\u89e3\u51b3\u4e86\u524d\u9762\u63d0\u5230\u7684\u9e21\u548c\u86cb\u7684\u77db\u76fe\u3002 \u5728\u521d\u59cb\u5316\u7684\u6700\u540e\uff0c\u5185\u6838\u8fd0\u884c initramfs \u4e2d\u7684 init \u7a0b\u5e8f\uff0c\u8be5\u7a0b\u5e8f\u5c06\u63a2\u6d4b\u786c\u4ef6\u8bbe\u5907\u3001\u52a0\u8f7d\u9a71\u52a8\uff0c\u6302\u8f7d\u771f\u6b63\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u6267\u884c\u6587\u4ef6\u7cfb\u7edf\u4e0a\u7684/sbin/init\uff0c\u8fdb\u800c\u5207\u6362\u5230\u771f\u6b63\u7684\u7528\u6237\u7a7a\u95f4. \u600e\u4e48\u529e Q:\u5982\u4f55\u5236\u4f5c\u6839\u6587\u4ef6\u7cfb\u7edf\uff1f \u7528 busybox\u3002 Q:\u6709\u6ca1\u6709\u6bd4\u5b83\u66f4\u597d\u7528\u7684\u5de5\u5177\uff1f \u6ca1\u6709\uff0c\u90fd\u662f\u7528\u5b83\u3002 Q:\u5982\u4f55\u4f7f\u7528 busybox\uff1f \uff081\uff09\u5148\u4e0b\u8f7d busybox \u6e90\u7801\u5230\u672c\u5730\u3002 https://busybox.net/ \u6216 git clone git://busybox.net/busybox.git \uff082\uff09\u8fdb\u884c\u914d\u7f6e\u548c\u4ea4\u53c9\u7f16\u8bd1 \u4f7f\u7528\u9ed8\u8ba4\u914d\u7f6e\u5373\u53ef\uff1a make defconfig \uff083\uff09\u7f16\u8bd1\u751f\u6210\u6307\u5b9a\u5e73\u53f0\u7684\u53ef\u6267\u884c\u6587\u4ef6 busybox : make ARCH=arm CROSS_COMPILE=arm-none-linux-gnueabihf- \u6267\u884c\u6210\u529f\u540e\u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u751f\u6210\u4e00\u4e2a\u540d\u53eb busybox \u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u3002\u522b\u770b\u5b83\u5c0f\u5c0f\u7684\uff0c\u5b83\u91cc\u9762\u53ef\u5305\u542b\u4e86\u4e0a\u767e\u4e2a\u5de5\u5177\uff0c\u4f8b\u5982\uff1als\u3001pwd\u3001find\u3001grep \u7b49\u7b49\u3002\u4e5f\u5c31\u662f\u8bf4\u4f60\u5728 Linux \u4e0b\u6267\u884c\u7684\u5de5\u5177\u547d\u4ee4\u90fd\u662f\u5b83\u63d0\u4f9b\u7ed9\u4f60\u7684\uff0c\u6240\u4ee5\u8bf4 linux \u53ea\u662f\u4e00\u4e2a\u5185\u6838\uff0c\u5b83\u79bb\u4e0d\u5f00 GNU \u4e0b\u4f17\u591a\u5144\u5f1f\u7684\u5e2e\u52a9\u3002 4\uff09\u6267\u884c\u5236\u4f5c\u64cd\u4f5c\uff1a make install \u9ed8\u8ba4\u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u751f\u6210\u4e00\u4e2a_install \u76ee\u5f55\uff0c\u8fd9\u4e2a\u76ee\u5f55\u5c31\u662f\u4ea7\u751f\u7684\u6839\u6587\u4ef6\u7cfb\u7edf\u4e86\u3002\u5b83\u91cc\u9762\u751f\u6210\u4e86\u51e0\u4e2a\u7cfb\u7edf\u5f15\u5bfc\u65f6\u5019\u5fc5\u987b\u7684\u51e0\u4e2a\u6587\u4ef6\u76ee\u5f55\uff1a/bin /sbin /usr\uff0c\u5176\u5b83\u7684\u76ee\u5f55\u4f1a\u5728\u7cfb\u7edf\u542f\u52a8\u65f6\u5019\u521b\u5efa\u3002\u8fd9\u4e9b\u6587\u4ef6\u5939\u91cc\u9762\u7684\u547d\u4ee4\u5176\u5b9e\u90fd\u662f\u4e00\u4e2a\u8f6f\u94fe\u63a5\uff0c\u8fde\u63a5\u5230 busybox \u8fd9\u4e00\u4e2a\u5b9e\u5b9e\u5728\u5728\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u3002linuxrc \u662f kernel \u542f\u52a8\u8fc7\u7a0b\u4e2d\u5f88\u5173\u952e\u7684\u4e00\u6b65\uff0c\u53ef\u5728\u8be6\u7ec6\u4e86\u89e3 Linux \u542f\u52a8\u6d41\u7a0b\u4e2d\u9047\u5230\u3002 \u53c2\u8003 1 \u53c2\u8003 2 \u4e8c \u5d4c\u5165\u5f0f Linux \u7cfb\u7edf\u79fb\u690d\u56db\u5927\u90e8\u5206 \u4e00\u3001\u642d\u5efa\u4ea4\u53c9\u5f00\u53d1\u73af\u5883 \u4e8c\u3001bootloader \u7684\u9009\u62e9\u548c\u79fb\u690d \u4e09\u3001kernel \u7684\u914d\u7f6e\u3001\u7f16\u8bd1\u3001\u548c\u79fb\u690d \u56db\u3001\u6839\u6587\u4ef6\u7cfb\u7edf\u7684\u5236\u4f5c \u53c2\u8003 3 \u53c2\u8003 4","title":"\u7b2c\u4e03\u7bc7 Linux\u79fb\u690d"},{"location":"chapter_14/7_linux_kernel_clipping/#_1","text":"\u672c\u7bc7\u603b\u7ed3 Linux \u5185\u6838\u79fb\u690d\u76f8\u5173 \u5d4c\u5165\u5f0f Linux \u79fb\u690d\u4e09\u5de8\u5934: uboot\u3001Linux kernel\u3001rootfs(\u6839\u6587\u4ef6\u7cfb\u7edf) \u3002","title":"\u6982\u8ff0"},{"location":"chapter_14/7_linux_kernel_clipping/#rootfs","text":"","title":"\u4e00 rootfs \u4e09\u95ee(\u662f\u4ec0\u4e48 \u6709\u5565\u597d \u600e\u4e48\u529e)"},{"location":"chapter_14/7_linux_kernel_clipping/#_2","text":"rootfs \u662f\u57fa\u4e8e\u5185\u5b58\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u6240\u6709\u64cd\u4f5c\u90fd\u5728\u5185\u5b58\u4e2d\u5b8c\u6210\uff1b\u4e5f\u6ca1\u6709\u5b9e\u9645\u7684\u5b58\u50a8\u8bbe\u5907\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u7684\u53c2\u4e0e\u3002 \u57fa\u4e8e\u4ee5\u4e0a\u539f\u56e0\uff0clinux \u5728\u542f\u52a8\u9636\u6bb5\u4f7f\u7528 rootfs \u6587\u4ef6\u7cfb\u7edf\uff0c\u5f53\u78c1\u76d8\u9a71\u52a8\u7a0b\u5e8f\u548c\u78c1\u76d8\u6587\u4ef6\u7cfb\u7edf\u6210\u529f\u52a0\u8f7d\u540e\uff0clinux \u7cfb\u7edf\u4f1a\u5c06\u7cfb\u7edf\u6839\u76ee\u5f55\u4ece rootfs \u5207\u6362\u5230\u78c1\u76d8\u6587\u4ef6\u7cfb\u7edf\u3002","title":"\u662f\u4ec0\u4e48"},{"location":"chapter_14/7_linux_kernel_clipping/#_3","text":"\u6587\u4ef6\u7cfb\u7edf\u7684\u91cd\u8981\u6027\uff0c\u6211\u60f3\u5927\u5bb6\u90fd\u5f88\u6e05\u695a\uff0c\u4e0d\u7528\u591a\u8bf4\u4e86\u3002\u8fd9\u91cc\u6709\u4e00\u53e5\u8bdd\uff0c\u6211\u89c9\u5f97\u975e\u5e38\u7cbe\u8f9f\u800c\u4e14\u5230\u4f4d\u7684\u70b9\u51fa\u4e86\u6587\u4ef6\u7cfb\u7edf\u5728 linux \u4e2d\u7684\u91cd\u8981\u6027\uff1a \u5c3d\u7ba1\u5185\u6838\u662f linux \u7684\u6838\u5fc3\uff0c\u4f46 \u6587\u4ef6\u5374\u662f\u7528\u6237\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u4ea4\u4e92\u6240\u91c7\u7528\u7684\u4e3b\u8981\u5de5\u5177 \u3002\u8fd9\u5bf9 linux \u6765\u8bf4\u5c24\u5176\u5982\u6b64\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728 UNIX \u4f20\u7edf\u4e2d\uff0c\u5b83\u4f7f\u7528\u6587\u4ef6 I/O \u673a\u5236\u7ba1\u7406\u786c\u4ef6\u8bbe\u5907\u548c\u6570\u636e\u6587\u4ef6\u3002","title":"\u6587\u4ef6\u7cfb\u7edf\u7684\u91cd\u8981\u6027"},{"location":"chapter_14/7_linux_kernel_clipping/#_4","text":"","title":"\u4e3a\u4ec0\u4e48"},{"location":"chapter_14/7_linux_kernel_clipping/#initramfs","text":"\u5728 Linux \u5185\u6838\u88ab\u52a0\u8f7d\u5230\u5185\u5b58\u5e76\u8fd0\u884c\u540e\uff0c \u5185\u6838\u8fdb\u7a0b\u6700\u7ec8\u9700\u8981\u5207\u6362\u5230\u7528\u6237\u7684\u8fdb\u7a0b\u6765\u4f7f\u7528\u8ba1\u7b97\u673a \uff0c\u800c\u7528\u6237\u8fdb\u7a0b\u53c8\u5b58\u5728\u4e8e\u5916\u5b58\u50a8\u8bbe\u5907\u4e0a\uff0c\u6bd4\u5982 systemd \u8fdb\u7a0b\uff0c\u901a\u5e38 systemd \u8fdb\u7a0b\u6240\u5728\u7684\u5b58\u50a8\u8bbe\u5907\u4e5f\u662f Linux \u771f\u6b63\u7684\u6839\u6587\u4ef6\u7cfb\u7edf\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u6211\u4eec\u77e5\u9053 \u5185\u6838\u6e90\u7801\u662f\u6ca1\u6709\u5305\u542b\u9a71\u52a8\u7a0b\u5e8f\u7684 \uff0c\u9a71\u52a8\u7a0b\u5e8f\u5728\u5916\u5b58\u50a8\u8bbe\u5907\u4e0a\uff0c\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u8981\u5207\u6362\u5230 systemd \u8fdb\u7a0b\uff08system deamon\uff09\uff0c\u5c31\u9700\u8981\u5916\u5b58\u50a8\u7684\u9a71\u52a8\uff0c\u4f46\u662f\u6ca1\u6709\u9a71\u52a8\u53c8\u6ca1\u529e\u6cd5\u8bbf\u95ee\u5916\u5b58\u50a8\uff0c\u8fd9\u5c31\u8fdb\u5165\u5148\u6709\u9e21\u8fd8\u662f\u5148\u6709\u86cb\u7684\u95ee\u9898\u4e86\uff08\u90a3\u5230\u5e95\u662f\u5148\u6709\u9e21\u8fd8\u662f\u5148\u6709\u86cb\u5462\uff1a\uff09\uff09\uff0c\u8fd9\u4e2a\u65f6\u5019 initramfs \u5c31\u95ea\u4eae\u767b\u573a\u4e86\u3002 \u6ce8\u610f\u8fd9\u91cc\u7684 initramfs \u7b49\u540c\u4e8e\u5d4c\u5165\u5f0f Linux \u65b9\u5411\u7684 rootfs","title":"\u4e3a\u4ec0\u4e48\u9700\u8981 initramfs"},{"location":"chapter_14/7_linux_kernel_clipping/#initramfs_1","text":"\u7b2c\u4e00\uff0c\u9664\u975e\u662f\u4e00\u4e2a\u4e13\u7528\u7cfb\u7edf\uff0c\u76ee\u6807\u7cfb\u7edf\u7684\u786c\u4ef6\u5e73\u53f0\u662f\u56fa\u5b9a\u4e0d\u53d8\u7684\uff0c\u5426\u5219\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u901a\u7528\u64cd\u4f5c\u7cfb\u7edf\uff0c\u6bd4\u5982 Linux \u7684\u684c\u9762\u53d1\u884c\u7248\uff0c\u5c06\u8fd0\u884c\u5728\u5404\u79cd\u4e0d\u540c\u7684\u786c\u4ef6\u5e73\u53f0\u4e0a\u3002 \u56e0\u6b64\uff0c\u6839\u6587\u4ef6\u7cfb\u7edf\u53ef\u80fd\u5b58\u50a8\u5728\u5404\u79cd\u5404\u6837\u7684\u4ecb\u8d28\u4e0a\uff0c\u6bd4\u5982 IDE \u786c\u76d8\u3001SATA \u786c\u76d8\u3001SCSI \u786c\u76d8\u3001Flash \u5b58\u50a8\u5668\uff0c\u4ee5\u53ca\u968f\u7740\u6280\u672f\u7684\u53d1\u5c55\uff0c\u4e0d\u65ad\u51fa\u73b0\u7684\u65b0\u7684\u5b58\u50a8\u8bbe\u5907\u3002\u4e3a\u4e86\u80fd\u591f\u517c\u5bb9\u66f4\u591a\u7684\u786c\u4ef6\u5e73\u53f0\uff0c\u663e\u7136\u7cfb\u7edf\u9700\u8981\u652f\u6301\u5c3d\u53ef\u80fd\u591a\u7684\u5b58\u50a8\u8bbe\u5907\u3002\u4f46\u662f\u5982\u679c\u5c06\u6240\u6709\u8fd9\u4e9b\u8bbe\u5907\u7684\u9a71\u52a8\u5168\u90e8\u7f16\u8bd1\u8fdb\u5185\u6838\uff0c\u663e\u7136\u4e0d\u662f\u4e00\u4e2a\u597d\u529e\u6cd5\u3002\u56e0\u4e3a\u5bf9\u4e8e\u67d0\u4e2a\u7279\u5b9a\u7684\u786c\u4ef6\u5e73\u53f0\uff0c\u53ef\u80fd\u53ea\u9700\u8981\u4e00\u4e2a\u9a71\u52a8\u5373\u53ef\uff0c\u5185\u6838\u4e2d\u7684\u5176\u4ed6\u9a71\u52a8\u6839\u672c\u7528\u4e0d\u4e0a\uff0c\u5c06\u5b83\u4eec\u7f16\u8bd1\u8fdb\u5185\u6838\u53ea\u4f1a\u5f92\u589e\u5185\u6838\u7684\u5c3a\u5bf8\u3001\u5360\u7528\u5185\u5b58\u7a7a\u95f4\uff0c\u5c24\u5176\u5bf9\u4e8e\u4e00\u4e9b\u5185\u5b58\u6216\u8005\u5b58\u50a8\u4ecb\u8d28\u7a7a\u95f4\u6709\u9650\u7684\u8bbe\u5907\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c24\u4e3a\u660e\u663e\u3002\u4e8e\u662f \u5c06\u8fd9\u4e9b\u9a71\u52a8\u7f16\u8bd1\u4e3a\u6a21\u5757\uff0c\u5b58\u50a8\u5728\u6839\u6587\u4ef6\u7cfb\u7edf\u4e2d\uff0c\u6309\u9700\u8f7d\u5165\u5185\u5b58\u662f\u4e00\u4e2a\u89e3\u51b3\u95ee\u9898\u7684\u529e\u6cd5\u3002 \u5185\u6838\u542f\u52a8\u9636\u6bb5\u7528\u5230\u7684\u9a71\u52a8\u7a0b\u5e8f\u5176\u5b9e\u9700\u8981\u6309\u9700\u4ece initramfs \u52a0\u8f7d, \u800c\u4e0d\u662f\u4e00\u80a1\u8111\u5168\u90e8\u5728\u5185\u6838\u91cc\u5f92\u589e\u5185\u6838\u5c3a\u5bf8. \u7b2c\u4e8c, \u771f\u6b63\u7684/sbin/init \u53ef\u80fd\u4e0d\u4f4d\u4e8e\u7b80\u5355\u7684\u786c\u76d8\u4e0a,\u53ef\u80fd\u5728 NFS \u4e0a\u751a\u81f3\u9700\u8981\u6743\u9650\u8ba4\u8bc1\u7b49\u590d\u6742\u8fc7\u7a0b \u9700\u8981\u5c06\u590d\u6742\u8fc7\u7a0b\u8f6c\u79fb\u5230\u7528\u6237\u7a7a\u95f4\uff0c\u800c\u975e\u5728\u5185\u6838\u7a7a\u95f4\u5b9e\u73b0.\u9075\u5b88\u5185\u6838\u63d0\u4f9b\u673a\u5236\u3001\u7528\u6237\u7a7a\u95f4\u63d0\u4f9b\u7b56\u7565\u7684\u539f\u5219. initramfs \u662f\u4e00\u4e2a\u4e34\u65f6\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u5fc5\u8981\u7684\u8bbe\u5907\u5982\u786c\u76d8\u3001\u7f51\u5361\u3001\u6587\u4ef6\u7cfb\u7edf\u7b49\u7684\u9a71\u52a8\u4ee5\u53ca\u52a0\u8f7d\u9a71\u52a8\u7684\u5de5\u5177\u53ca\u5176\u8fd0\u884c\u73af\u5883\uff0c\u6bd4\u5982\u57fa\u672c\u7684 C \u5e93\uff0c\u52a8\u6001\u5e93\u7684\u94fe\u63a5\u52a0\u8f7d\u5668\u7b49\u7b49\u3002\u540c\u65f6\uff0c\u90a3\u4e9b\u5904\u7406\u6839\u6587\u4ef6\u7cfb\u7edf\u5728 RAID\u3001\u7f51\u7edc\u8bbe\u5907\u4e0a\u7684\u7a0b\u5e8f\u4e5f\u5b58\u653e\u5728 initramfs \u4e2d\u3002\u7531\u7b2c\u4e09\u65b9\u7a0b\u5e8f\uff08\u5982 Bootloader\uff09\u8d1f\u8d23\u5c06 initramfs \u4ece\u786c\u76d8\u88c5\u8f7d\u8fdb\u5185\u5b58\u3002 \u4ee5\u9a71\u52a8\u786c\u76d8\u4e3a\u4f8b\uff0c\u5185\u6838\u5c31\u4e0d\u5fc5\u518d\u4ece\u786c\u76d8\uff0c\u800c\u662f\u4ece\u5df2\u7ecf\u52a0\u8f7d\u5230\u5185\u5b58\u7684 initramfs \u4e2d\u83b7\u53d6\u786c\u76d8\u63a7\u5236\u5668\u7b49\u76f8\u5173\u9a71\u52a8\u4e86\uff0c\u7ee7\u800c\u53ef\u4ee5\u9a71\u52a8\u786c\u76d8\uff0c\u8bbf\u95ee\u786c\u76d8\u4e0a\u7684\u6839\u6587\u4ef6\u7cfb\u7edf\uff0c\u4ece\u800c\u89e3\u51b3\u4e86\u524d\u9762\u63d0\u5230\u7684\u9e21\u548c\u86cb\u7684\u77db\u76fe\u3002 \u5728\u521d\u59cb\u5316\u7684\u6700\u540e\uff0c\u5185\u6838\u8fd0\u884c initramfs \u4e2d\u7684 init \u7a0b\u5e8f\uff0c\u8be5\u7a0b\u5e8f\u5c06\u63a2\u6d4b\u786c\u4ef6\u8bbe\u5907\u3001\u52a0\u8f7d\u9a71\u52a8\uff0c\u6302\u8f7d\u771f\u6b63\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u6267\u884c\u6587\u4ef6\u7cfb\u7edf\u4e0a\u7684/sbin/init\uff0c\u8fdb\u800c\u5207\u6362\u5230\u771f\u6b63\u7684\u7528\u6237\u7a7a\u95f4.","title":"\u4e3a\u4ec0\u4e48\u4e0d\u628a\u9a71\u52a8\u7a0b\u5e8f\u5168\u90e8\u653e\u5165\u5185\u6838\uff0c\u800c\u5355\u72ec\u641e initramfs"},{"location":"chapter_14/7_linux_kernel_clipping/#_5","text":"","title":"\u600e\u4e48\u529e"},{"location":"chapter_14/7_linux_kernel_clipping/#q","text":"\u7528 busybox\u3002","title":"Q:\u5982\u4f55\u5236\u4f5c\u6839\u6587\u4ef6\u7cfb\u7edf\uff1f"},{"location":"chapter_14/7_linux_kernel_clipping/#q_1","text":"\u6ca1\u6709\uff0c\u90fd\u662f\u7528\u5b83\u3002","title":"Q:\u6709\u6ca1\u6709\u6bd4\u5b83\u66f4\u597d\u7528\u7684\u5de5\u5177\uff1f"},{"location":"chapter_14/7_linux_kernel_clipping/#q-busybox","text":"\uff081\uff09\u5148\u4e0b\u8f7d busybox \u6e90\u7801\u5230\u672c\u5730\u3002 https://busybox.net/ \u6216 git clone git://busybox.net/busybox.git \uff082\uff09\u8fdb\u884c\u914d\u7f6e\u548c\u4ea4\u53c9\u7f16\u8bd1 \u4f7f\u7528\u9ed8\u8ba4\u914d\u7f6e\u5373\u53ef\uff1a make defconfig \uff083\uff09\u7f16\u8bd1\u751f\u6210\u6307\u5b9a\u5e73\u53f0\u7684\u53ef\u6267\u884c\u6587\u4ef6 busybox : make ARCH=arm CROSS_COMPILE=arm-none-linux-gnueabihf- \u6267\u884c\u6210\u529f\u540e\u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u751f\u6210\u4e00\u4e2a\u540d\u53eb busybox \u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u3002\u522b\u770b\u5b83\u5c0f\u5c0f\u7684\uff0c\u5b83\u91cc\u9762\u53ef\u5305\u542b\u4e86\u4e0a\u767e\u4e2a\u5de5\u5177\uff0c\u4f8b\u5982\uff1als\u3001pwd\u3001find\u3001grep \u7b49\u7b49\u3002\u4e5f\u5c31\u662f\u8bf4\u4f60\u5728 Linux \u4e0b\u6267\u884c\u7684\u5de5\u5177\u547d\u4ee4\u90fd\u662f\u5b83\u63d0\u4f9b\u7ed9\u4f60\u7684\uff0c\u6240\u4ee5\u8bf4 linux \u53ea\u662f\u4e00\u4e2a\u5185\u6838\uff0c\u5b83\u79bb\u4e0d\u5f00 GNU \u4e0b\u4f17\u591a\u5144\u5f1f\u7684\u5e2e\u52a9\u3002 4\uff09\u6267\u884c\u5236\u4f5c\u64cd\u4f5c\uff1a make install \u9ed8\u8ba4\u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u751f\u6210\u4e00\u4e2a_install \u76ee\u5f55\uff0c\u8fd9\u4e2a\u76ee\u5f55\u5c31\u662f\u4ea7\u751f\u7684\u6839\u6587\u4ef6\u7cfb\u7edf\u4e86\u3002\u5b83\u91cc\u9762\u751f\u6210\u4e86\u51e0\u4e2a\u7cfb\u7edf\u5f15\u5bfc\u65f6\u5019\u5fc5\u987b\u7684\u51e0\u4e2a\u6587\u4ef6\u76ee\u5f55\uff1a/bin /sbin /usr\uff0c\u5176\u5b83\u7684\u76ee\u5f55\u4f1a\u5728\u7cfb\u7edf\u542f\u52a8\u65f6\u5019\u521b\u5efa\u3002\u8fd9\u4e9b\u6587\u4ef6\u5939\u91cc\u9762\u7684\u547d\u4ee4\u5176\u5b9e\u90fd\u662f\u4e00\u4e2a\u8f6f\u94fe\u63a5\uff0c\u8fde\u63a5\u5230 busybox \u8fd9\u4e00\u4e2a\u5b9e\u5b9e\u5728\u5728\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u3002linuxrc \u662f kernel \u542f\u52a8\u8fc7\u7a0b\u4e2d\u5f88\u5173\u952e\u7684\u4e00\u6b65\uff0c\u53ef\u5728\u8be6\u7ec6\u4e86\u89e3 Linux \u542f\u52a8\u6d41\u7a0b\u4e2d\u9047\u5230\u3002 \u53c2\u8003 1 \u53c2\u8003 2","title":"Q:\u5982\u4f55\u4f7f\u7528 busybox\uff1f"},{"location":"chapter_14/7_linux_kernel_clipping/#linux","text":"\u4e00\u3001\u642d\u5efa\u4ea4\u53c9\u5f00\u53d1\u73af\u5883 \u4e8c\u3001bootloader \u7684\u9009\u62e9\u548c\u79fb\u690d \u4e09\u3001kernel \u7684\u914d\u7f6e\u3001\u7f16\u8bd1\u3001\u548c\u79fb\u690d \u56db\u3001\u6839\u6587\u4ef6\u7cfb\u7edf\u7684\u5236\u4f5c \u53c2\u8003 3 \u53c2\u8003 4","title":"\u4e8c \u5d4c\u5165\u5f0f Linux \u7cfb\u7edf\u79fb\u690d\u56db\u5927\u90e8\u5206"},{"location":"chapter_14/8_linux_driver_framework/","text":"\u6982\u8ff0 Linux \u7cfb\u7edf\u7684\u9a71\u52a8\u6846\u67b6\u4e3b\u8981\u5c31\u662f\u4e09\u4e2a\u4e3b\u8981\u90e8\u5206\u7ec4\u6210\uff0c \u9a71\u52a8 \u3001 \u603b\u7ebf \u3001 \u8bbe\u5907 \u3002 \u968f\u7740\u7535\u5b50\u884c\u4e1a\u7684\u53d1\u5c55\uff0c\u63a7\u5236\u5668\u8d8a\u6765\u8d8a\u5f3a\u5927\uff0cSOC\uff08\u7247\u4e0a\u7cfb\u7edf\uff09\u51fa\u73b0\u4e86\uff1a\u5728\u7247\u5185\u7684 CPU \u5916\u56f4\u96c6\u6210\u5f88\u591a\u5916\u8bbe\u7535\u8def\uff0c\u8fd9\u4e9b\u5916\u8bbe\u90fd\u6302\u63a5\u5728 SOC \u5185\u90e8\u7684\u603b\u7ebf\u4e0a\u3002 \u4e0d\u540c\u4e8e IIC\u3001SPI \u548c USB \u7b49\u8fd9\u4e00\u7c7b\u5b9e\u9645\u5b58\u5728\u5916\u90e8 PCB \u8d70\u7ebf\u603b\u7ebf\uff0c\u7247\u5185\u5916\u8bbe\u4ece Chip \u4e4b\u5916\u662f\u770b\u4e0d\u5230\u7684\u3002 \u4e3a\u4e86\u7edf\u4e00\u9a71\u52a8\u67b6\u6784\u62bd\u8c61\uff0c\u6240\u4ee5 Linux \u4ece 2.6 \u7248\u672c\u5f00\u59cb\u5f15\u5165\u4e86 platform bus \u8fd9\u4e2a\u865a\u62df\u7684\u603b\u7ebf\u6a21\u578b\u3002 \u4e00 \u521d\u8bc6 \u5185\u6838\u9a71\u52a8\u6846\u67b6 1.\u6570\u636e\u7ed3\u6784 \u8fd9\u4e2a\u6846\u67b6\u6d89\u53ca\u5230 3 \u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u6570\u636e\u7ed3\u6784\uff1a struct bus_type \u7528\u6765\u63cf\u8ff0\u603b\u7ebf struct device \u7528\u6765\u63cf\u8ff0\u8bbe\u5907 struct device_driver \u7528\u6765\u63cf\u8ff0\u8bbe\u5907\u9a71\u52a8 \u6709\u5982\u4e0b\u62d3\u6251\u56fe \u5185\u6838\u4e2d\u53ef\u4ee5\u6709\u5f88\u591a\u7684\u603b\u7ebf bus_type \u603b\u7ebf bus_type \u4e0a\u53ef\u4ee5\u6709\u5f88\u591a\u7684\u8bbe\u5907 device \u6bcf\u4e2a\u8bbe\u5907 device \u90fd\u6709\u5b83\u6240\u5bf9\u5e94\u7684\u9a71\u52a8 device_driver struct bus_type { //\u2026..\u7701\u7565\u4e00\u4e9b\u6210\u5458 const char * name; struct kset drivers; struct kset devices; int (*match)(struct device * dev, struct device_driver * drv); int (*uevent)(struct device *dev, struct kobj_uevent_env *env); int (*probe)(struct device * dev); int (*remove)(struct device * dev); void (*shutdown)(struct device * dev); int (*suspend)(struct device * dev, pm_message_t state); int (*suspend_late)(struct device * dev, pm_message_t state); int (*resume_early)(struct device * dev); int (*resume)(struct device * dev); unsigned int drivers_autoprobe:1; }; struct device { //\u2026..\u7701\u7565\u4e00\u4e9b\u6210\u5458 struct klist klist_children; struct klist_node knode_parent; /* node in sibling list */ struct klist_node knode_driver; struct klist_node knode_bus; struct device *parent; char bus_id[BUS_ID_SIZE; /* position on parent bus */ struct bus_type * bus; /* type of bus device is on */ struct device_driver *driver; /* which driver has allocated this device */ void *driver_data; /* data private to the driver */ void *platform_data; /* Platform specific data, device core doesn't touch it */ }; struct device_driver { //\u2026..\u7701\u7565\u4e00\u4e9b\u6210\u5458 const char * name; struct bus_type * bus; int (*probe) (struct device * dev); int (*remove) (struct device * dev); void(*shutdown) (struct device * dev); int (*suspend) (struct device * dev, pm_message_t state); int (*resume) (struct device * dev); }; \u6309\u7167\u9762\u5411\u5bf9\u8c61\u7684\u601d\u60f3\uff0c bus_type \u865a\u57fa\u7c7b\uff0c\u5b50\u7c7b\u5305\u62ec platform_bus_type,mdio_bus_type,I2C_bus_type,pci_bus_type \u7b49 device \u662f\u865a\u57fa\u7c7b\uff0c\u5b50\u7c7b\u5305\u62ec platform_device, phy_device, i2c_CLIent, pci_device \u7b49 device_driver \u865a\u57fa\u7c7b\uff0c\u5b50\u7c7b\u6709 platform_driver, phy_driver,i2c_driver, pci_driver \u7b49 2.API \u6846\u67b6\u6709\u51e0\u4e2a\u5173\u952e API\uff1a bus_register (stuct bus_type* bus) \u7528\u6765\u6ce8\u518c\u4e00\u6761\u603b\u7ebf bus device_register (struct device *dev) \u628a dev \u52a0\u5230 bus \u7684\u8bbe\u5907\u5217\u8868\u4e2d\u53bb driver_register (stuct device_driver *drv) 1 \u904d\u5386 bus \u4e0a\u6240\u6709\u7684 dev\uff0c\u8c03\u7528 bus->match(dev,drv) \u5bf9 drv \u4e0e dev \u8fdb\u884c\u6bd4\u5bf9, \u672c\u8d28\u4e0a\u662f\u6bd4\u5bf9 drv.name \u548c dev.name \u662f\u5426\u4e00\u81f4 2 \u6bd4\u5bf9\u6210\u529f\u540e\u8c03\u7528 drv->probe(dev) , \u6bd4\u5982 igb \u7f51\u5361\u7684 igb_probe \u51fd\u6570\u6267\u884c\u65f6,\u4f1a\u8bbe\u7f6e\u597d\u5bf9\u5e94\u7684 netdevice_ops \u7ed3\u6784\u4f53,\u91cc\u9762\u5305\u542b open,read,write \u7b49\u901a\u7528\u64cd\u4f5c\uff0c\u8fd9\u4e9b\u901a\u7528\u64cd\u4f5c\u90fd\u662f\u6307\u9488\uff0c\u6307\u5411\u5177\u4f53\u9a71\u52a8\u7684\u51fd\u6570\u6bd4\u5982 open \u6307\u9488\u6307\u5411 igb_open \u51fd\u6570. 3 \u628a\u9a71\u52a8 drv \u52a0\u5165\u5230 bus \u7684\u9a71\u52a8\u5217\u8868\u4e2d\u53bb 4 \u7ed1\u5b9a drv \u548c dev \u4e3a\u4e86\u4fbf\u4e8e\u4f7f\u7528\uff0c\u5185\u6838\u9488\u5bf9\u4e0d\u540c\u603b\u7ebf\uff0c\u5bf9\u4e0a\u8ff0 API \u8fdb\u884c\u4e86\u5305\u88c5\uff0c\u884d\u751f\u51fa\u4e86\u53e6\u5916\u4e00\u6279 API\uff1a platform_driver_register platform_device_register phy_driver_register mdiobus_register \u4e8c platform_device \u548c platform_driver \u67b6\u6784\u56fe platform \u5e73\u53f0\u8bbe\u5907\u9a71\u52a8\u662f\u57fa\u4e8e\u8bbe\u5907\u603b\u7ebf\u9a71\u52a8\u6a21\u578b\u7684\uff0c\u673a\u5236\u672c\u8eab\u5e76\u4e0d\u590d\u6742\uff0c\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a platform_device \u548c platfrom_driver platform_device \uff1a\u57fa\u4e8e device \u7684\u5c01\u88c5 platform_driver \uff1a\u57fa\u4e8e device_driver \u7684\u5c01\u88c5 \u4e09 \u57fa\u7840\u5c42: Linux \u8bbe\u5907\u9a71\u52a8\u6a21\u578b\u548c sysfs \u6587\u4ef6\u7cfb\u7edf Linux \u5185\u6838\u5728 2.6 \u7248\u672c\u4e2d\u5f15\u5165\u8bbe\u5907\u9a71\u52a8\u6a21\u578b\uff0c\u7b80\u5316\u4e86\u9a71\u52a8\u7a0b\u5e8f\u7684\u7f16\u5199\u3002Linux \u8bbe\u5907\u9a71\u52a8\u6a21\u578b\u5305\u542b \u8bbe\u5907(device) \u3001 \u603b\u7ebf(bus) \u3001 \u7c7b(class) \u548c \u9a71\u52a8(driver) \uff0c\u5b83\u4eec\u4e4b\u95f4\u76f8\u4e92\u5173\u8054\u3002\u5176\u4e2d \u8bbe\u5907(device) \u548c \u9a71\u52a8(driver) \u901a\u8fc7 \u603b\u7ebf(bus) \u7ed1\u5b9a\u5728\u4e00\u8d77\u3002 Linux \u5185\u6838\u4e2d\uff0c\u5206\u522b\u7528 bus_type \u3001 device_driver \u548c device \u7ed3\u6784\u6765\u63cf\u8ff0 \u603b\u7ebf \u3001 \u9a71\u52a8 \u548c \u8bbe\u5907 \uff0c\u7ed3\u6784\u4f53\u5b9a\u4e49\u8be6\u89c1 include/linux/device.h \u3002\u8bbe\u5907\u548c\u5bf9\u5e94\u7684\u9a71\u52a8\u5fc5\u987b\u4f9d\u9644\u4e8e\u540c\u4e00\u79cd\u603b\u7ebf\uff0c\u56e0\u6b64 device_driver \u548c device \u7ed3\u6784\u4e2d\u90fd\u5305\u542b struct bus_type \u6307\u9488\u3002 Linux sysfs \u662f\u4e00\u4e2a\u865a\u62df\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u5b83\u628a\u8fde\u63a5\u5728\u7cfb\u7edf\u4e0a\u7684\u8bbe\u5907\u548c\u603b\u7ebf\u7ec4\u7ec7\u6210\u4e3a\u4e00\u4e2a\u5206\u7ea7\u7684\u6587\u4ef6\uff0c\u53ef\u4ee5\u7531\u7528\u6237\u7a7a\u95f4\u5b58\u53d6\uff0c\u5411\u7528\u6237\u7a7a\u95f4\u5bfc\u51fa\u5185\u6838\u6570\u636e\u7ed3\u6784\u4ee5\u53ca\u5b83\u4eec\u7684\u5c5e\u6027\u3002 sysfs \u5c55\u793a\u51fa\u8bbe\u5907\u9a71\u52a8\u6a21\u578b\u4e2d\u5404\u4e2a\u7ec4\u4ef6\u7684\u5c42\u6b21\u5173\u7cfb\uff0c\u67d0\u4e2a\u7cfb\u7edf\u4e0a\u7684 sysfs \u9876\u5c42\u76ee\u5f55\u5c55\u793a\u5982\u4e0b\uff1a /sys$ ll total 0 drwxr-xr-x 2 root root 0 Aug 20 15:27 block/ drwxr-xr-x 29 root root 0 Aug 20 15:27 bus/ drwxr-xr-x 61 root root 0 Aug 20 15:27 class/ drwxr-xr-x 4 root root 0 Aug 20 15:27 dev/ drwxr-xr-x 14 root root 0 Aug 20 15:27 devices/ drwxr-xr-x 4 root root 0 Aug 20 15:27 firmware/ drwxr-xr-x 8 root root 0 Aug 20 15:27 fs/ drwxr-xr-x 2 root root 0 Sep 2 17:08 hypervisor/ drwxr-xr-x 8 root root 0 Aug 20 15:27 kernel/ drwxr-xr-x 147 root root 0 Aug 20 15:27 module/ drwxr-xr-x 2 root root 0 Aug 20 15:27 power/ \u91cd\u8981\u5b50\u76ee\u5f55\u4ecb\u7ecd\uff1a block : \u5305\u542b\u6240\u6709\u7684\u5757\u8bbe\u5907\uff0c\u5982 ram \uff0c sda \u7b49 bus : \u5305\u542b\u7cfb\u7edf\u4e2d\u6240\u6709\u7684\u603b\u7ebf\u7c7b\u578b\uff0c\u5982 pci \uff0c usb \uff0c i2c \u7b49 class : \u5305\u542b\u7cfb\u7edf\u4e2d\u7684\u8bbe\u5907\u7c7b\u578b\uff0c\u5982 input \uff0c pci_bus \uff0c mmc_host \u7b49 dev : \u5305\u542b\u4e24\u4e2a\u5b50\u76ee\u5f55\uff1a char \u548c block \uff0c\u5206\u522b\u5b58\u653e\u5b57\u7b26\u8bbe\u5907\u548c\u5757\u8bbe\u5907\u7684\u4e3b\u6b21\u8bbe\u5907\u53f7 (major:minor) \uff0c\u6307\u5411 /sys/devices \u76ee\u5f55\u4e0b\u7684\u8bbe\u5907 devices :\u5305\u542b\u7cfb\u7edf\u6240\u6709\u7684\u8bbe\u5907 sysfs \u4e2d\u663e\u793a\u7684\u6bcf\u4e00\u4e2a\u5bf9\u8c61\u90fd\u5bf9\u5e94\u4e00\u4e2a kobject \u7ed3\u6784 \uff08\u5b8c\u6574\u5b9a\u4e49\u4f4d\u4e8e include/linux/kobject.h \uff0c\u7ed3\u6784\u5185\u90e8\u5305\u542b\u4e00\u4e2a parent \u6307\u9488\uff09\uff0c\u800c\u53e6\u4e00\u4e2a\u76f8\u8054\u7cfb\u7684\u7ed3\u6784\u4e3a kset \u3002 kset \u662f\u5d4c\u5165\u76f8\u540c\u7c7b\u578b\u7ed3\u6784\u7684 kobject \u5bf9\u8c61\u7684\u96c6\u5408\u3002 \u5185\u6838\u7528 kobject \u3001 kset \u548c parent \u4e4b\u95f4\u7684\u5173\u7cfb\u5c06\u5404\u4e2a\u5bf9\u8c61\u8fde\u63a5\u8d77\u6765\u7ec4\u6210\u4e00\u4e2a\u5206\u5c42\u7684\u7ed3\u6784\u4f53\u7cfb\uff0c\u4ece\u800c\u4e0e\u6a21\u578b\u5316\u7684\u5b50\u7cfb\u7edf\u76f8\u5339\u914d\u3002 sysfs \u4e2d\u80fd\u6e05\u6670\u5730\u770b\u51fa device \u3001 driver \u548c bus \u7684\u76f8\u4e92\u8054\u7cfb\uff0c\u4ee5\u67d0\u7cfb\u7edf\u4e0a pci \u603b\u7ebf\u4e0a\u7684 igb \u9a71\u52a8\u4e3a\u4f8b\u3002 \u7701\u7565 \u5bf9\u4e8e\u65e9\u671f\u7684 Linux \u5185\u6838\uff082.6 \u7248\u672c\u4ee5\u524d\uff09\u6765\u8bf4\uff0c\u901a\u5e38\u5728\u9a71\u52a8\u4ee3\u7801\u4e2d xxx_driver \u6ce8\u518c\u8fc7\u7a0b\u4e2d\u8c03\u7528 probe()\u51fd\u6570\u6765\u5bf9\u8bbe\u5907\u8fdb\u884c\u521d\u59cb\u5316\u3002 \u5f15\u5165 Linux \u8bbe\u5907\u9a71\u52a8\u6a21\u578b\u4e0b\uff0c \u8bbe\u5907\u548c\u9a71\u52a8\u53ef\u4ee5\u5206\u5f00\u6ce8\u518c (\u6bd4\u5982\u5206\u4e24\u4e2a\u5185\u6838\u6a21\u5757, XXXX_device.ko \u6587\u4ef6\u548c XXXX_driver.ko \u6587\u4ef6), \u4f9d\u8d56\u603b\u7ebf\u5b8c\u6210\u76f8\u4e92\u7ed1\u5b9a\u3002\u7cfb\u7edf\u6bcf\u6ce8\u518c\u4e00\u4e2a\u8bbe\u5907\u7684\u65f6\u5019\uff0c\u4f1a\u5bfb\u627e\u4e0e\u4e4b\u5339\u914d\u7684\u9a71\u52a8\uff1b\u76f8\u53cd\uff0c\u7cfb\u7edf\u6bcf\u6ce8\u518c\u4e00\u4e2a\u9a71\u52a8\u7684\u65f6\u5019\uff0c\u4f1a\u5bfb\u627e\u4e0e\u4e4b\u5339\u914d\u7684\u8bbe\u5907\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u8bbe\u5907\u548c\u9a71\u52a8\u7684\u5339\u914d\u5de5\u4f5c\u7531\u603b\u7ebf\u5b8c\u6210\u3002 \u4e0b\u6587\u4e2d\u5c06\u4f1a\u7528\u5173\u952e\u7684\u5185\u6838\u6e90\u7801\uff08\u57fa\u4e8e linux 5.2.14 Kernel\uff09\u8bf4\u660e\u9a71\u52a8\u548c\u8bbe\u5907\u95f4\u5339\u914d\u673a\u5236\u7684\u5b9e\u73b0\uff0c\u5206\u6790\u7684\u8fc7\u7a0b\u4e2d\u4ee5 platform\u603b\u7ebf \u4e3a\u4f8b\u3002 platform\u603b\u7ebf \u662f\u4e00\u79cd\u865a\u62df\u7684\u603b\u7ebf\uff0c\u4e0e\u4e4b\u76f8\u5bf9\u5e94\u7684\u662f PCI \u3001 I2C \u3001 SPI \u7b49\u5b9e\u4f53\u603b\u7ebf\u3002\u5f15\u5165 \u865a\u62dfplatform\u603b\u7ebf \u662f\u4e3a\u4e86\u89e3\u51b3\u67d0\u4e9b\u8bbe\u5907\u65e0\u6cd5\u76f4\u63a5\u4f9d\u9644\u5728\u73b0\u6709\u5b9e\u4f53\u603b\u7ebf\u4e0a\u7684\u95ee\u9898\uff0c\u4f8b\u5982 SoC \u7cfb\u7edf\u4e2d\u96c6\u6210\u7684\u72ec\u7acb\u5916\u8bbe\u63a7\u5236\u5668\uff0c\u6302\u63a5\u5728 SoC \u5185\u5b58\u7a7a\u95f4\u7684\u5916\u8bbe\u7b49\u7b49\u3002 platform \u603b\u7ebf\u7684\u6ce8\u518c platform\u603b\u7ebf \u4f5c\u4e3a Linux \u7684\u57fa\u7840\u603b\u7ebf\uff0c\u5728\u5185\u6838\u542f\u52a8\u9636\u6bb5\u4fbf\u5b8c\u6210\u4e86\u6ce8\u518c\uff0c\u6ce8\u518c\u7684\u5165\u53e3\u51fd\u6570\u4e3a platform_bus_init() \u3002\u5185\u6838\u542f\u52a8\u9636\u6bb5\u8c03\u7528\u8be5\u51fd\u6570\u7684\u8def\u5f84\u4e3a\uff1a start_kernel() --> arch_call_rest_init()[last step in start_kernel] --> rest_init() --> kernel_init() --> kernel_init_freeable() --> do_basic_setup() --> driver_init() --> platform_bus_init() \u4ee3\u7801\u5b9a\u4e49 include/linux/device.h struct platform_device struct platform_device { const char *name; u32 id; struct device dev; u32 num_resources; struct resource *resource; }; struct platform_driver struct platform_driver { int (*probe)(struct platform_device *); int (*remove)(struct platform_device *); void (*shutdown)(struct platform_device *); int (*suspend)(struct platform_device *, pm_message_t state); int (*suspend_late)(struct platform_device *, pm_message_t state); int (*resume_early)(struct platform_device *); int (*resume)(struct platform_device *); struct device_driver driver; }; struct device struct device { struct device *parent; struct device_private *p; struct kobject kobj; const char *init_name; /* initial name of the device */ const struct device_type *type; struct mutex mutex; /* mutex to synchronize calls to * its driver. */ struct bus_type *bus; /* type of bus device is on */ struct device_driver *driver; /* which driver has allocated this device */ void *platform_data; /* Platform specific data, device core doesn't touch it */ void *driver_data; /* Driver data, set and get with dev_set/get_drvdata */ struct dev_links_info links; struct dev_pm_info power; struct dev_pm_domain *pm_domain; #ifdef CONFIG_GENERIC_MSI_IRQ_DOMAIN struct irq_domain *msi_domain; #endif #ifdef CONFIG_PINCTRL struct dev_pin_info *pins; #endif #ifdef CONFIG_GENERIC_MSI_IRQ struct list_head msi_list; #endif #ifdef CONFIG_NUMA int numa_node; /* NUMA node this device is close to */ #endif const struct dma_map_ops *dma_ops; u64 *dma_mask; /* dma mask (if dma'able device) */ u64 coherent_dma_mask;/* Like dma_mask, but for alloc_coherent mappings as not all hardware supports 64 bit addresses for consistent allocations such descriptors. */ u64 bus_dma_mask; /* upstream dma_mask constraint */ unsigned long dma_pfn_offset; struct device_dma_parameters *dma_parms; struct list_head dma_pools; /* dma pools (if dma'ble) */ struct dma_coherent_mem *dma_mem; /* internal for coherent mem override */ #ifdef CONFIG_DMA_CMA struct cma *cma_area; /* contiguous memory area for dma allocations */ #endif /* arch specific additions */ struct dev_archdata archdata; struct device_node *of_node; /* associated device tree node */ struct fwnode_handle *fwnode; /* firmware device node */ dev_t devt; /* dev_t, creates the sysfs \"dev\" */ u32 id; /* device instance */ spinlock_t devres_lock; struct list_head devres_head; struct klist_node knode_class; struct class *class; const struct attribute_group **groups; /* optional groups */ void (*release)(struct device *dev); struct iommu_group *iommu_group; struct iommu_fwspec *iommu_fwspec; bool offline_disabled:1; bool offline:1; bool of_node_reused:1; }; struct device_driver struct device_driver { const char *name; struct bus_type *bus; struct module *owner; const char *mod_name; /* used for built-in modules */ bool suppress_bind_attrs; /* disables bind/unbind via sysfs */ enum probe_type probe_type; const struct of_device_id *of_match_table; const struct acpi_device_id *acpi_match_table; int (*probe) (struct device *dev); int (*remove) (struct device *dev); void (*shutdown) (struct device *dev); int (*suspend) (struct device *dev, pm_message_t state); int (*resume) (struct device *dev); const struct attribute_group **groups; const struct dev_pm_ops *pm; void (*coredump) (struct device *dev); struct driver_private *p; }; \u5173\u7cfb\u56fe: \u53c2\u8003 1 \u53c2\u8003 2 \u95ee\u9898\u603b\u7ed3 \u4e3a\u4ec0\u4e48\u5f15\u5165 platform\u865a\u62df\u603b\u7ebf ? \u968f\u7740\u7535\u5b50\u884c\u4e1a\u7684\u53d1\u5c55\uff0c\u63a7\u5236\u5668\u8d8a\u6765\u8d8a\u5f3a\u5927\uff0cSOC\uff08\u7247\u4e0a\u7cfb\u7edf\uff09\u51fa\u73b0\u4e86\uff1a\u5728\u7247\u5185\u7684 CPU \u5916\u56f4\u96c6\u6210\u5f88\u591a\u5916\u8bbe\u7535\u8def\uff0c\u8fd9\u4e9b\u5916\u8bbe\u90fd\u6302\u63a5\u5728 SOC \u5185\u90e8\u7684\u603b\u7ebf\u4e0a\u3002 \u5f15\u5165\u865a\u62df platform \u603b\u7ebf\u662f\u4e3a\u4e86\u89e3\u51b3\u67d0\u4e9b\u8bbe\u5907\u65e0\u6cd5\u76f4\u63a5\u4f9d\u9644\u5728\u73b0\u6709\u5b9e\u4f53\u603b\u7ebf\u4e0a\u7684\u95ee\u9898\uff0c\u4f8b\u5982 SoC \u7cfb\u7edf\u4e2d\u96c6\u6210\u7684\u72ec\u7acb\u5916\u8bbe\u63a7\u5236\u5668\uff0c\u6302\u63a5\u5728 SoC \u5185\u5b58\u7a7a\u95f4\u7684\u5916\u8bbe\u7b49\u7b49\u3002 \u76f8\u6bd4 PCI\u3001USB \u7b49\u5b9e\u4f53\u603b\u7ebf\uff0c\u5b83\u4e3b\u8981\u7528\u4e8e\u63cf\u8ff0 SOC \u4e0a\u7684\u7247\u4e0a\u8d44\u6e90\u3002platform \u6240\u63cf\u8ff0\u7684\u8d44\u6e90\u6709\u4e00\u4e2a\u5171\u540c\u70b9\uff1a \u5728 CPU \u7684\u603b\u7ebf\u4e0a\u76f4\u63a5\u53d6\u5740\u3002 \u4ec0\u4e48\u662f platform_device\uff08\u5e73\u53f0\u8bbe\u5907\uff09\uff1f CPU \u80fd\u591f\u76f4\u63a5\u5bfb\u5740\u7684 SOC \u4e0a\u7684\u5916\u8bbe\uff0c\u5c31\u662f\u5e73\u53f0\u8bbe\u5907. \u4e3a\u4ec0\u4e48\u5f15\u5165 \u8bbe\u5907\u6811 ? \u5728 Linux \u5185\u6838 v2.6 \u7248\u672c\u4ee5\u524d\uff0cARM \u67b6\u6784\u7528\u4e8e\u63cf\u8ff0\u4e0d\u540c\u7684\u786c\u4ef6\u4fe1\u606f\u7684\u6587\u4ef6\u90fd\u5b58\u653e\u5728 arch/arm/plat-xxx \u548c arch/arm/mach-xxx \u6587\u4ef6\u5939\u4e0b \u6bd4\u5982 s3c2410 \u5904\u7406\u5668,\u5728\u6587\u4ef6 linux-2.6.29.4/arch/arm/plat-s3c24xx/devs.c \u4e2d\u5b9a\u4e49\u4e86\u5904\u7406\u5668\u7684 \u770b\u95e8\u72d7\u5e73\u53f0\u8bbe\u5907 , \u4ee3\u7801\u5982\u4e0b: struct platform_device s3c_device_wdt = { .name = \"s3c2410-wdt\", .id = -1, .num_resources = ARRAY_SIZE(s3c_wdt_resource), .resource = s3c_wdt_resource, }; \u6709\u592a\u591a\u7684\u786c\u4ef6\u8bbe\u5907\u4fe1\u606f\u5b58\u653e\u5728\u5185\u6838\u4ee3\u7801\u76ee\u5f55\u4e0b, \u5bfc\u81f4\u5185\u6838\u4ee3\u7801\u865a\u80d6. Device Tree \u6539\u53d8\u4e86\u539f\u6765\u7528 hardcode \u65b9\u5f0f\u5c06 HW \u914d\u7f6e\u4fe1\u606f\u5d4c\u5165\u5230\u5185\u6838\u4ee3\u7801\u7684\u65b9\u6cd5\uff0c\u6539\u7528 bootloader \u4f20\u9012\u4e00\u4e2a DB \u7684\u5f62\u5f0f. \u89e3\u51b3\u4e86\u5185\u6838\u4ee3\u7801\u865a\u80d6\u95ee\u9898. \u5173\u4e8e\u603b\u7ebf\u7684\u62d3\u5c55\u77e5\u8bc6\u70b9 \u5185\u6838 \u603b\u7ebf \u76f8\u5173\u7ed3\u6784\u4f53\u53d8\u91cf \u5185\u6838\u7ef4\u62a4\u7684\u6240\u6709\u7684 \u603b\u7ebf \u90fd\u9700\u8981\u7528\u4ee5\u4e0b\u7ed3\u6784\u4f53\u6ce8\u518c\u4e00\u4e2a\u53d8\u91cf\u3002 struct bus_type { const char *name; const char *dev_name; struct device *dev_root; struct device_attribute *dev_attrs; /* use dev_groups instead */ const struct attribute_group **bus_groups; const struct attribute_group **dev_groups; const struct attribute_group **drv_groups; int (*match)(struct device *dev, struct device_driver *drv); int (*uevent)(struct device *dev, struct kobj_uevent_env *env); int (*probe)(struct device *dev); int (*remove)(struct device *dev); void (*shutdown)(struct device *dev); int (*online)(struct device *dev); int (*offline)(struct device *dev); int (*suspend)(struct device *dev, pm_message_t state); int (*resume)(struct device *dev); const struct dev_pm_ops *pm; struct iommu_ops *iommu_ops; struct subsys_private *p; struct lock_class_key lock_key; }; platform \u603b\u7ebf\u53d8\u91cf\u7684\u5b9a\u4e49 struct bus_type platform_bus_type \u5b9a\u4e49\u5982\u4e0b\uff1a struct bus_type platform_bus_type = { .name = \"platform\", .dev_groups = platform_dev_groups, .match = platform_match, .uevent = platform_uevent, .pm = &platform_dev_pm_ops, }; \u5176\u4e2d\u6700\u91cd\u8981\u7684\u6210\u5458\u662f .match \u3002 \u5f53\u6709\u8bbe\u5907\u7684\u786c\u4ef6\u4fe1\u606f\u6ce8\u518c\u5230 platform_bus_type \u603b\u7ebf \u7684\u65f6\u5019\uff0c\u4f1a\u904d\u5386\u6240\u6709 platform \u603b\u7ebf\u7ef4\u62a4\u7684\u9a71\u52a8\uff0c \u901a\u8fc7\u540d\u5b57\u6765\u5339\u914d\uff0c\u5982\u679c\u76f8\u540c\uff0c\u5c31\u8bf4\u660e\u786c\u4ef6\u4fe1\u606f\u548c\u9a71\u52a8\u5339\u914d\uff0c\u5c31\u4f1a\u8c03\u7528\u9a71\u52a8\u7684 platform_driver ->probe\u51fd\u6570 ,\u521d\u59cb\u5316\u9a71\u52a8\u7684\u6240\u6709\u8d44\u6e90\uff0c\u8ba9\u8be5\u9a71\u52a8\u751f\u6548\u3002 \u4e5f\u5c31\u662f\u5185\u6838\u7ef4\u62a4\u4e86\u8bb8\u591a bus_type \u5b9e\u4f8b, \u6709\u4e00\u4e9b bus_type \u662f\u5bf9\u5e94\u771f\u5b9e\u7269\u7406\u603b\u7ebf\u7684, \u6bd4\u5982 I2c\u3001SPI\u3001USB\u3001uart\u3001PCIE\u3001APB\u3001AHB \u540c\u65f6\u5185\u6838\u4e5f\u7ef4\u62a4\u4e86\u4e00\u6761\u865a\u62df\u603b\u7ebf\u5c31\u662f\u540d\u4e3a platform \u7684 platform_bus_type \u603b\u7ebf","title":"\u7b2c\u516b\u7bc7 Linux\u9a71\u52a8\u6846\u67b6\u548cSoC\u9a71\u52a8\u6846\u67b6"},{"location":"chapter_14/8_linux_driver_framework/#_1","text":"Linux \u7cfb\u7edf\u7684\u9a71\u52a8\u6846\u67b6\u4e3b\u8981\u5c31\u662f\u4e09\u4e2a\u4e3b\u8981\u90e8\u5206\u7ec4\u6210\uff0c \u9a71\u52a8 \u3001 \u603b\u7ebf \u3001 \u8bbe\u5907 \u3002 \u968f\u7740\u7535\u5b50\u884c\u4e1a\u7684\u53d1\u5c55\uff0c\u63a7\u5236\u5668\u8d8a\u6765\u8d8a\u5f3a\u5927\uff0cSOC\uff08\u7247\u4e0a\u7cfb\u7edf\uff09\u51fa\u73b0\u4e86\uff1a\u5728\u7247\u5185\u7684 CPU \u5916\u56f4\u96c6\u6210\u5f88\u591a\u5916\u8bbe\u7535\u8def\uff0c\u8fd9\u4e9b\u5916\u8bbe\u90fd\u6302\u63a5\u5728 SOC \u5185\u90e8\u7684\u603b\u7ebf\u4e0a\u3002 \u4e0d\u540c\u4e8e IIC\u3001SPI \u548c USB \u7b49\u8fd9\u4e00\u7c7b\u5b9e\u9645\u5b58\u5728\u5916\u90e8 PCB \u8d70\u7ebf\u603b\u7ebf\uff0c\u7247\u5185\u5916\u8bbe\u4ece Chip \u4e4b\u5916\u662f\u770b\u4e0d\u5230\u7684\u3002 \u4e3a\u4e86\u7edf\u4e00\u9a71\u52a8\u67b6\u6784\u62bd\u8c61\uff0c\u6240\u4ee5 Linux \u4ece 2.6 \u7248\u672c\u5f00\u59cb\u5f15\u5165\u4e86 platform bus \u8fd9\u4e2a\u865a\u62df\u7684\u603b\u7ebf\u6a21\u578b\u3002","title":"\u6982\u8ff0"},{"location":"chapter_14/8_linux_driver_framework/#_2","text":"","title":"\u4e00 \u521d\u8bc6\u5185\u6838\u9a71\u52a8\u6846\u67b6"},{"location":"chapter_14/8_linux_driver_framework/#1","text":"\u8fd9\u4e2a\u6846\u67b6\u6d89\u53ca\u5230 3 \u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u6570\u636e\u7ed3\u6784\uff1a struct bus_type \u7528\u6765\u63cf\u8ff0\u603b\u7ebf struct device \u7528\u6765\u63cf\u8ff0\u8bbe\u5907 struct device_driver \u7528\u6765\u63cf\u8ff0\u8bbe\u5907\u9a71\u52a8 \u6709\u5982\u4e0b\u62d3\u6251\u56fe \u5185\u6838\u4e2d\u53ef\u4ee5\u6709\u5f88\u591a\u7684\u603b\u7ebf bus_type \u603b\u7ebf bus_type \u4e0a\u53ef\u4ee5\u6709\u5f88\u591a\u7684\u8bbe\u5907 device \u6bcf\u4e2a\u8bbe\u5907 device \u90fd\u6709\u5b83\u6240\u5bf9\u5e94\u7684\u9a71\u52a8 device_driver struct bus_type { //\u2026..\u7701\u7565\u4e00\u4e9b\u6210\u5458 const char * name; struct kset drivers; struct kset devices; int (*match)(struct device * dev, struct device_driver * drv); int (*uevent)(struct device *dev, struct kobj_uevent_env *env); int (*probe)(struct device * dev); int (*remove)(struct device * dev); void (*shutdown)(struct device * dev); int (*suspend)(struct device * dev, pm_message_t state); int (*suspend_late)(struct device * dev, pm_message_t state); int (*resume_early)(struct device * dev); int (*resume)(struct device * dev); unsigned int drivers_autoprobe:1; }; struct device { //\u2026..\u7701\u7565\u4e00\u4e9b\u6210\u5458 struct klist klist_children; struct klist_node knode_parent; /* node in sibling list */ struct klist_node knode_driver; struct klist_node knode_bus; struct device *parent; char bus_id[BUS_ID_SIZE; /* position on parent bus */ struct bus_type * bus; /* type of bus device is on */ struct device_driver *driver; /* which driver has allocated this device */ void *driver_data; /* data private to the driver */ void *platform_data; /* Platform specific data, device core doesn't touch it */ }; struct device_driver { //\u2026..\u7701\u7565\u4e00\u4e9b\u6210\u5458 const char * name; struct bus_type * bus; int (*probe) (struct device * dev); int (*remove) (struct device * dev); void(*shutdown) (struct device * dev); int (*suspend) (struct device * dev, pm_message_t state); int (*resume) (struct device * dev); }; \u6309\u7167\u9762\u5411\u5bf9\u8c61\u7684\u601d\u60f3\uff0c bus_type \u865a\u57fa\u7c7b\uff0c\u5b50\u7c7b\u5305\u62ec platform_bus_type,mdio_bus_type,I2C_bus_type,pci_bus_type \u7b49 device \u662f\u865a\u57fa\u7c7b\uff0c\u5b50\u7c7b\u5305\u62ec platform_device, phy_device, i2c_CLIent, pci_device \u7b49 device_driver \u865a\u57fa\u7c7b\uff0c\u5b50\u7c7b\u6709 platform_driver, phy_driver,i2c_driver, pci_driver \u7b49","title":"1.\u6570\u636e\u7ed3\u6784"},{"location":"chapter_14/8_linux_driver_framework/#2api","text":"\u6846\u67b6\u6709\u51e0\u4e2a\u5173\u952e API\uff1a bus_register (stuct bus_type* bus) \u7528\u6765\u6ce8\u518c\u4e00\u6761\u603b\u7ebf bus device_register (struct device *dev) \u628a dev \u52a0\u5230 bus \u7684\u8bbe\u5907\u5217\u8868\u4e2d\u53bb driver_register (stuct device_driver *drv) 1 \u904d\u5386 bus \u4e0a\u6240\u6709\u7684 dev\uff0c\u8c03\u7528 bus->match(dev,drv) \u5bf9 drv \u4e0e dev \u8fdb\u884c\u6bd4\u5bf9, \u672c\u8d28\u4e0a\u662f\u6bd4\u5bf9 drv.name \u548c dev.name \u662f\u5426\u4e00\u81f4 2 \u6bd4\u5bf9\u6210\u529f\u540e\u8c03\u7528 drv->probe(dev) , \u6bd4\u5982 igb \u7f51\u5361\u7684 igb_probe \u51fd\u6570\u6267\u884c\u65f6,\u4f1a\u8bbe\u7f6e\u597d\u5bf9\u5e94\u7684 netdevice_ops \u7ed3\u6784\u4f53,\u91cc\u9762\u5305\u542b open,read,write \u7b49\u901a\u7528\u64cd\u4f5c\uff0c\u8fd9\u4e9b\u901a\u7528\u64cd\u4f5c\u90fd\u662f\u6307\u9488\uff0c\u6307\u5411\u5177\u4f53\u9a71\u52a8\u7684\u51fd\u6570\u6bd4\u5982 open \u6307\u9488\u6307\u5411 igb_open \u51fd\u6570. 3 \u628a\u9a71\u52a8 drv \u52a0\u5165\u5230 bus \u7684\u9a71\u52a8\u5217\u8868\u4e2d\u53bb 4 \u7ed1\u5b9a drv \u548c dev \u4e3a\u4e86\u4fbf\u4e8e\u4f7f\u7528\uff0c\u5185\u6838\u9488\u5bf9\u4e0d\u540c\u603b\u7ebf\uff0c\u5bf9\u4e0a\u8ff0 API \u8fdb\u884c\u4e86\u5305\u88c5\uff0c\u884d\u751f\u51fa\u4e86\u53e6\u5916\u4e00\u6279 API\uff1a platform_driver_register platform_device_register phy_driver_register mdiobus_register","title":"2.API"},{"location":"chapter_14/8_linux_driver_framework/#platform_device-platform_driver","text":"platform \u5e73\u53f0\u8bbe\u5907\u9a71\u52a8\u662f\u57fa\u4e8e\u8bbe\u5907\u603b\u7ebf\u9a71\u52a8\u6a21\u578b\u7684\uff0c\u673a\u5236\u672c\u8eab\u5e76\u4e0d\u590d\u6742\uff0c\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a platform_device \u548c platfrom_driver platform_device \uff1a\u57fa\u4e8e device \u7684\u5c01\u88c5 platform_driver \uff1a\u57fa\u4e8e device_driver \u7684\u5c01\u88c5","title":"\u4e8c platform_device \u548c platform_driver \u67b6\u6784\u56fe"},{"location":"chapter_14/8_linux_driver_framework/#linux-sysfs","text":"Linux \u5185\u6838\u5728 2.6 \u7248\u672c\u4e2d\u5f15\u5165\u8bbe\u5907\u9a71\u52a8\u6a21\u578b\uff0c\u7b80\u5316\u4e86\u9a71\u52a8\u7a0b\u5e8f\u7684\u7f16\u5199\u3002Linux \u8bbe\u5907\u9a71\u52a8\u6a21\u578b\u5305\u542b \u8bbe\u5907(device) \u3001 \u603b\u7ebf(bus) \u3001 \u7c7b(class) \u548c \u9a71\u52a8(driver) \uff0c\u5b83\u4eec\u4e4b\u95f4\u76f8\u4e92\u5173\u8054\u3002\u5176\u4e2d \u8bbe\u5907(device) \u548c \u9a71\u52a8(driver) \u901a\u8fc7 \u603b\u7ebf(bus) \u7ed1\u5b9a\u5728\u4e00\u8d77\u3002 Linux \u5185\u6838\u4e2d\uff0c\u5206\u522b\u7528 bus_type \u3001 device_driver \u548c device \u7ed3\u6784\u6765\u63cf\u8ff0 \u603b\u7ebf \u3001 \u9a71\u52a8 \u548c \u8bbe\u5907 \uff0c\u7ed3\u6784\u4f53\u5b9a\u4e49\u8be6\u89c1 include/linux/device.h \u3002\u8bbe\u5907\u548c\u5bf9\u5e94\u7684\u9a71\u52a8\u5fc5\u987b\u4f9d\u9644\u4e8e\u540c\u4e00\u79cd\u603b\u7ebf\uff0c\u56e0\u6b64 device_driver \u548c device \u7ed3\u6784\u4e2d\u90fd\u5305\u542b struct bus_type \u6307\u9488\u3002 Linux sysfs \u662f\u4e00\u4e2a\u865a\u62df\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u5b83\u628a\u8fde\u63a5\u5728\u7cfb\u7edf\u4e0a\u7684\u8bbe\u5907\u548c\u603b\u7ebf\u7ec4\u7ec7\u6210\u4e3a\u4e00\u4e2a\u5206\u7ea7\u7684\u6587\u4ef6\uff0c\u53ef\u4ee5\u7531\u7528\u6237\u7a7a\u95f4\u5b58\u53d6\uff0c\u5411\u7528\u6237\u7a7a\u95f4\u5bfc\u51fa\u5185\u6838\u6570\u636e\u7ed3\u6784\u4ee5\u53ca\u5b83\u4eec\u7684\u5c5e\u6027\u3002 sysfs \u5c55\u793a\u51fa\u8bbe\u5907\u9a71\u52a8\u6a21\u578b\u4e2d\u5404\u4e2a\u7ec4\u4ef6\u7684\u5c42\u6b21\u5173\u7cfb\uff0c\u67d0\u4e2a\u7cfb\u7edf\u4e0a\u7684 sysfs \u9876\u5c42\u76ee\u5f55\u5c55\u793a\u5982\u4e0b\uff1a /sys$ ll total 0 drwxr-xr-x 2 root root 0 Aug 20 15:27 block/ drwxr-xr-x 29 root root 0 Aug 20 15:27 bus/ drwxr-xr-x 61 root root 0 Aug 20 15:27 class/ drwxr-xr-x 4 root root 0 Aug 20 15:27 dev/ drwxr-xr-x 14 root root 0 Aug 20 15:27 devices/ drwxr-xr-x 4 root root 0 Aug 20 15:27 firmware/ drwxr-xr-x 8 root root 0 Aug 20 15:27 fs/ drwxr-xr-x 2 root root 0 Sep 2 17:08 hypervisor/ drwxr-xr-x 8 root root 0 Aug 20 15:27 kernel/ drwxr-xr-x 147 root root 0 Aug 20 15:27 module/ drwxr-xr-x 2 root root 0 Aug 20 15:27 power/ \u91cd\u8981\u5b50\u76ee\u5f55\u4ecb\u7ecd\uff1a block : \u5305\u542b\u6240\u6709\u7684\u5757\u8bbe\u5907\uff0c\u5982 ram \uff0c sda \u7b49 bus : \u5305\u542b\u7cfb\u7edf\u4e2d\u6240\u6709\u7684\u603b\u7ebf\u7c7b\u578b\uff0c\u5982 pci \uff0c usb \uff0c i2c \u7b49 class : \u5305\u542b\u7cfb\u7edf\u4e2d\u7684\u8bbe\u5907\u7c7b\u578b\uff0c\u5982 input \uff0c pci_bus \uff0c mmc_host \u7b49 dev : \u5305\u542b\u4e24\u4e2a\u5b50\u76ee\u5f55\uff1a char \u548c block \uff0c\u5206\u522b\u5b58\u653e\u5b57\u7b26\u8bbe\u5907\u548c\u5757\u8bbe\u5907\u7684\u4e3b\u6b21\u8bbe\u5907\u53f7 (major:minor) \uff0c\u6307\u5411 /sys/devices \u76ee\u5f55\u4e0b\u7684\u8bbe\u5907 devices :\u5305\u542b\u7cfb\u7edf\u6240\u6709\u7684\u8bbe\u5907 sysfs \u4e2d\u663e\u793a\u7684\u6bcf\u4e00\u4e2a\u5bf9\u8c61\u90fd\u5bf9\u5e94\u4e00\u4e2a kobject \u7ed3\u6784 \uff08\u5b8c\u6574\u5b9a\u4e49\u4f4d\u4e8e include/linux/kobject.h \uff0c\u7ed3\u6784\u5185\u90e8\u5305\u542b\u4e00\u4e2a parent \u6307\u9488\uff09\uff0c\u800c\u53e6\u4e00\u4e2a\u76f8\u8054\u7cfb\u7684\u7ed3\u6784\u4e3a kset \u3002 kset \u662f\u5d4c\u5165\u76f8\u540c\u7c7b\u578b\u7ed3\u6784\u7684 kobject \u5bf9\u8c61\u7684\u96c6\u5408\u3002 \u5185\u6838\u7528 kobject \u3001 kset \u548c parent \u4e4b\u95f4\u7684\u5173\u7cfb\u5c06\u5404\u4e2a\u5bf9\u8c61\u8fde\u63a5\u8d77\u6765\u7ec4\u6210\u4e00\u4e2a\u5206\u5c42\u7684\u7ed3\u6784\u4f53\u7cfb\uff0c\u4ece\u800c\u4e0e\u6a21\u578b\u5316\u7684\u5b50\u7cfb\u7edf\u76f8\u5339\u914d\u3002 sysfs \u4e2d\u80fd\u6e05\u6670\u5730\u770b\u51fa device \u3001 driver \u548c bus \u7684\u76f8\u4e92\u8054\u7cfb\uff0c\u4ee5\u67d0\u7cfb\u7edf\u4e0a pci \u603b\u7ebf\u4e0a\u7684 igb \u9a71\u52a8\u4e3a\u4f8b\u3002 \u7701\u7565 \u5bf9\u4e8e\u65e9\u671f\u7684 Linux \u5185\u6838\uff082.6 \u7248\u672c\u4ee5\u524d\uff09\u6765\u8bf4\uff0c\u901a\u5e38\u5728\u9a71\u52a8\u4ee3\u7801\u4e2d xxx_driver \u6ce8\u518c\u8fc7\u7a0b\u4e2d\u8c03\u7528 probe()\u51fd\u6570\u6765\u5bf9\u8bbe\u5907\u8fdb\u884c\u521d\u59cb\u5316\u3002 \u5f15\u5165 Linux \u8bbe\u5907\u9a71\u52a8\u6a21\u578b\u4e0b\uff0c \u8bbe\u5907\u548c\u9a71\u52a8\u53ef\u4ee5\u5206\u5f00\u6ce8\u518c (\u6bd4\u5982\u5206\u4e24\u4e2a\u5185\u6838\u6a21\u5757, XXXX_device.ko \u6587\u4ef6\u548c XXXX_driver.ko \u6587\u4ef6), \u4f9d\u8d56\u603b\u7ebf\u5b8c\u6210\u76f8\u4e92\u7ed1\u5b9a\u3002\u7cfb\u7edf\u6bcf\u6ce8\u518c\u4e00\u4e2a\u8bbe\u5907\u7684\u65f6\u5019\uff0c\u4f1a\u5bfb\u627e\u4e0e\u4e4b\u5339\u914d\u7684\u9a71\u52a8\uff1b\u76f8\u53cd\uff0c\u7cfb\u7edf\u6bcf\u6ce8\u518c\u4e00\u4e2a\u9a71\u52a8\u7684\u65f6\u5019\uff0c\u4f1a\u5bfb\u627e\u4e0e\u4e4b\u5339\u914d\u7684\u8bbe\u5907\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u8bbe\u5907\u548c\u9a71\u52a8\u7684\u5339\u914d\u5de5\u4f5c\u7531\u603b\u7ebf\u5b8c\u6210\u3002 \u4e0b\u6587\u4e2d\u5c06\u4f1a\u7528\u5173\u952e\u7684\u5185\u6838\u6e90\u7801\uff08\u57fa\u4e8e linux 5.2.14 Kernel\uff09\u8bf4\u660e\u9a71\u52a8\u548c\u8bbe\u5907\u95f4\u5339\u914d\u673a\u5236\u7684\u5b9e\u73b0\uff0c\u5206\u6790\u7684\u8fc7\u7a0b\u4e2d\u4ee5 platform\u603b\u7ebf \u4e3a\u4f8b\u3002 platform\u603b\u7ebf \u662f\u4e00\u79cd\u865a\u62df\u7684\u603b\u7ebf\uff0c\u4e0e\u4e4b\u76f8\u5bf9\u5e94\u7684\u662f PCI \u3001 I2C \u3001 SPI \u7b49\u5b9e\u4f53\u603b\u7ebf\u3002\u5f15\u5165 \u865a\u62dfplatform\u603b\u7ebf \u662f\u4e3a\u4e86\u89e3\u51b3\u67d0\u4e9b\u8bbe\u5907\u65e0\u6cd5\u76f4\u63a5\u4f9d\u9644\u5728\u73b0\u6709\u5b9e\u4f53\u603b\u7ebf\u4e0a\u7684\u95ee\u9898\uff0c\u4f8b\u5982 SoC \u7cfb\u7edf\u4e2d\u96c6\u6210\u7684\u72ec\u7acb\u5916\u8bbe\u63a7\u5236\u5668\uff0c\u6302\u63a5\u5728 SoC \u5185\u5b58\u7a7a\u95f4\u7684\u5916\u8bbe\u7b49\u7b49\u3002","title":"\u4e09 \u57fa\u7840\u5c42: Linux \u8bbe\u5907\u9a71\u52a8\u6a21\u578b\u548c sysfs \u6587\u4ef6\u7cfb\u7edf"},{"location":"chapter_14/8_linux_driver_framework/#platform","text":"platform\u603b\u7ebf \u4f5c\u4e3a Linux \u7684\u57fa\u7840\u603b\u7ebf\uff0c\u5728\u5185\u6838\u542f\u52a8\u9636\u6bb5\u4fbf\u5b8c\u6210\u4e86\u6ce8\u518c\uff0c\u6ce8\u518c\u7684\u5165\u53e3\u51fd\u6570\u4e3a platform_bus_init() \u3002\u5185\u6838\u542f\u52a8\u9636\u6bb5\u8c03\u7528\u8be5\u51fd\u6570\u7684\u8def\u5f84\u4e3a\uff1a start_kernel() --> arch_call_rest_init()[last step in start_kernel] --> rest_init() --> kernel_init() --> kernel_init_freeable() --> do_basic_setup() --> driver_init() --> platform_bus_init()","title":"platform \u603b\u7ebf\u7684\u6ce8\u518c"},{"location":"chapter_14/8_linux_driver_framework/#_3","text":"include/linux/device.h struct platform_device struct platform_device { const char *name; u32 id; struct device dev; u32 num_resources; struct resource *resource; }; struct platform_driver struct platform_driver { int (*probe)(struct platform_device *); int (*remove)(struct platform_device *); void (*shutdown)(struct platform_device *); int (*suspend)(struct platform_device *, pm_message_t state); int (*suspend_late)(struct platform_device *, pm_message_t state); int (*resume_early)(struct platform_device *); int (*resume)(struct platform_device *); struct device_driver driver; }; struct device struct device { struct device *parent; struct device_private *p; struct kobject kobj; const char *init_name; /* initial name of the device */ const struct device_type *type; struct mutex mutex; /* mutex to synchronize calls to * its driver. */ struct bus_type *bus; /* type of bus device is on */ struct device_driver *driver; /* which driver has allocated this device */ void *platform_data; /* Platform specific data, device core doesn't touch it */ void *driver_data; /* Driver data, set and get with dev_set/get_drvdata */ struct dev_links_info links; struct dev_pm_info power; struct dev_pm_domain *pm_domain; #ifdef CONFIG_GENERIC_MSI_IRQ_DOMAIN struct irq_domain *msi_domain; #endif #ifdef CONFIG_PINCTRL struct dev_pin_info *pins; #endif #ifdef CONFIG_GENERIC_MSI_IRQ struct list_head msi_list; #endif #ifdef CONFIG_NUMA int numa_node; /* NUMA node this device is close to */ #endif const struct dma_map_ops *dma_ops; u64 *dma_mask; /* dma mask (if dma'able device) */ u64 coherent_dma_mask;/* Like dma_mask, but for alloc_coherent mappings as not all hardware supports 64 bit addresses for consistent allocations such descriptors. */ u64 bus_dma_mask; /* upstream dma_mask constraint */ unsigned long dma_pfn_offset; struct device_dma_parameters *dma_parms; struct list_head dma_pools; /* dma pools (if dma'ble) */ struct dma_coherent_mem *dma_mem; /* internal for coherent mem override */ #ifdef CONFIG_DMA_CMA struct cma *cma_area; /* contiguous memory area for dma allocations */ #endif /* arch specific additions */ struct dev_archdata archdata; struct device_node *of_node; /* associated device tree node */ struct fwnode_handle *fwnode; /* firmware device node */ dev_t devt; /* dev_t, creates the sysfs \"dev\" */ u32 id; /* device instance */ spinlock_t devres_lock; struct list_head devres_head; struct klist_node knode_class; struct class *class; const struct attribute_group **groups; /* optional groups */ void (*release)(struct device *dev); struct iommu_group *iommu_group; struct iommu_fwspec *iommu_fwspec; bool offline_disabled:1; bool offline:1; bool of_node_reused:1; }; struct device_driver struct device_driver { const char *name; struct bus_type *bus; struct module *owner; const char *mod_name; /* used for built-in modules */ bool suppress_bind_attrs; /* disables bind/unbind via sysfs */ enum probe_type probe_type; const struct of_device_id *of_match_table; const struct acpi_device_id *acpi_match_table; int (*probe) (struct device *dev); int (*remove) (struct device *dev); void (*shutdown) (struct device *dev); int (*suspend) (struct device *dev, pm_message_t state); int (*resume) (struct device *dev); const struct attribute_group **groups; const struct dev_pm_ops *pm; void (*coredump) (struct device *dev); struct driver_private *p; }; \u5173\u7cfb\u56fe: \u53c2\u8003 1 \u53c2\u8003 2","title":"\u4ee3\u7801\u5b9a\u4e49"},{"location":"chapter_14/8_linux_driver_framework/#_4","text":"\u4e3a\u4ec0\u4e48\u5f15\u5165 platform\u865a\u62df\u603b\u7ebf ? \u968f\u7740\u7535\u5b50\u884c\u4e1a\u7684\u53d1\u5c55\uff0c\u63a7\u5236\u5668\u8d8a\u6765\u8d8a\u5f3a\u5927\uff0cSOC\uff08\u7247\u4e0a\u7cfb\u7edf\uff09\u51fa\u73b0\u4e86\uff1a\u5728\u7247\u5185\u7684 CPU \u5916\u56f4\u96c6\u6210\u5f88\u591a\u5916\u8bbe\u7535\u8def\uff0c\u8fd9\u4e9b\u5916\u8bbe\u90fd\u6302\u63a5\u5728 SOC \u5185\u90e8\u7684\u603b\u7ebf\u4e0a\u3002 \u5f15\u5165\u865a\u62df platform \u603b\u7ebf\u662f\u4e3a\u4e86\u89e3\u51b3\u67d0\u4e9b\u8bbe\u5907\u65e0\u6cd5\u76f4\u63a5\u4f9d\u9644\u5728\u73b0\u6709\u5b9e\u4f53\u603b\u7ebf\u4e0a\u7684\u95ee\u9898\uff0c\u4f8b\u5982 SoC \u7cfb\u7edf\u4e2d\u96c6\u6210\u7684\u72ec\u7acb\u5916\u8bbe\u63a7\u5236\u5668\uff0c\u6302\u63a5\u5728 SoC \u5185\u5b58\u7a7a\u95f4\u7684\u5916\u8bbe\u7b49\u7b49\u3002 \u76f8\u6bd4 PCI\u3001USB \u7b49\u5b9e\u4f53\u603b\u7ebf\uff0c\u5b83\u4e3b\u8981\u7528\u4e8e\u63cf\u8ff0 SOC \u4e0a\u7684\u7247\u4e0a\u8d44\u6e90\u3002platform \u6240\u63cf\u8ff0\u7684\u8d44\u6e90\u6709\u4e00\u4e2a\u5171\u540c\u70b9\uff1a \u5728 CPU \u7684\u603b\u7ebf\u4e0a\u76f4\u63a5\u53d6\u5740\u3002 \u4ec0\u4e48\u662f platform_device\uff08\u5e73\u53f0\u8bbe\u5907\uff09\uff1f CPU \u80fd\u591f\u76f4\u63a5\u5bfb\u5740\u7684 SOC \u4e0a\u7684\u5916\u8bbe\uff0c\u5c31\u662f\u5e73\u53f0\u8bbe\u5907. \u4e3a\u4ec0\u4e48\u5f15\u5165 \u8bbe\u5907\u6811 ? \u5728 Linux \u5185\u6838 v2.6 \u7248\u672c\u4ee5\u524d\uff0cARM \u67b6\u6784\u7528\u4e8e\u63cf\u8ff0\u4e0d\u540c\u7684\u786c\u4ef6\u4fe1\u606f\u7684\u6587\u4ef6\u90fd\u5b58\u653e\u5728 arch/arm/plat-xxx \u548c arch/arm/mach-xxx \u6587\u4ef6\u5939\u4e0b \u6bd4\u5982 s3c2410 \u5904\u7406\u5668,\u5728\u6587\u4ef6 linux-2.6.29.4/arch/arm/plat-s3c24xx/devs.c \u4e2d\u5b9a\u4e49\u4e86\u5904\u7406\u5668\u7684 \u770b\u95e8\u72d7\u5e73\u53f0\u8bbe\u5907 , \u4ee3\u7801\u5982\u4e0b: struct platform_device s3c_device_wdt = { .name = \"s3c2410-wdt\", .id = -1, .num_resources = ARRAY_SIZE(s3c_wdt_resource), .resource = s3c_wdt_resource, }; \u6709\u592a\u591a\u7684\u786c\u4ef6\u8bbe\u5907\u4fe1\u606f\u5b58\u653e\u5728\u5185\u6838\u4ee3\u7801\u76ee\u5f55\u4e0b, \u5bfc\u81f4\u5185\u6838\u4ee3\u7801\u865a\u80d6. Device Tree \u6539\u53d8\u4e86\u539f\u6765\u7528 hardcode \u65b9\u5f0f\u5c06 HW \u914d\u7f6e\u4fe1\u606f\u5d4c\u5165\u5230\u5185\u6838\u4ee3\u7801\u7684\u65b9\u6cd5\uff0c\u6539\u7528 bootloader \u4f20\u9012\u4e00\u4e2a DB \u7684\u5f62\u5f0f. \u89e3\u51b3\u4e86\u5185\u6838\u4ee3\u7801\u865a\u80d6\u95ee\u9898.","title":"\u95ee\u9898\u603b\u7ed3"},{"location":"chapter_14/8_linux_driver_framework/#_5","text":"","title":"\u5173\u4e8e\u603b\u7ebf\u7684\u62d3\u5c55\u77e5\u8bc6\u70b9"},{"location":"chapter_14/8_linux_driver_framework/#_6","text":"\u5185\u6838\u7ef4\u62a4\u7684\u6240\u6709\u7684 \u603b\u7ebf \u90fd\u9700\u8981\u7528\u4ee5\u4e0b\u7ed3\u6784\u4f53\u6ce8\u518c\u4e00\u4e2a\u53d8\u91cf\u3002 struct bus_type { const char *name; const char *dev_name; struct device *dev_root; struct device_attribute *dev_attrs; /* use dev_groups instead */ const struct attribute_group **bus_groups; const struct attribute_group **dev_groups; const struct attribute_group **drv_groups; int (*match)(struct device *dev, struct device_driver *drv); int (*uevent)(struct device *dev, struct kobj_uevent_env *env); int (*probe)(struct device *dev); int (*remove)(struct device *dev); void (*shutdown)(struct device *dev); int (*online)(struct device *dev); int (*offline)(struct device *dev); int (*suspend)(struct device *dev, pm_message_t state); int (*resume)(struct device *dev); const struct dev_pm_ops *pm; struct iommu_ops *iommu_ops; struct subsys_private *p; struct lock_class_key lock_key; }; platform \u603b\u7ebf\u53d8\u91cf\u7684\u5b9a\u4e49 struct bus_type platform_bus_type \u5b9a\u4e49\u5982\u4e0b\uff1a struct bus_type platform_bus_type = { .name = \"platform\", .dev_groups = platform_dev_groups, .match = platform_match, .uevent = platform_uevent, .pm = &platform_dev_pm_ops, }; \u5176\u4e2d\u6700\u91cd\u8981\u7684\u6210\u5458\u662f .match \u3002 \u5f53\u6709\u8bbe\u5907\u7684\u786c\u4ef6\u4fe1\u606f\u6ce8\u518c\u5230 platform_bus_type \u603b\u7ebf \u7684\u65f6\u5019\uff0c\u4f1a\u904d\u5386\u6240\u6709 platform \u603b\u7ebf\u7ef4\u62a4\u7684\u9a71\u52a8\uff0c \u901a\u8fc7\u540d\u5b57\u6765\u5339\u914d\uff0c\u5982\u679c\u76f8\u540c\uff0c\u5c31\u8bf4\u660e\u786c\u4ef6\u4fe1\u606f\u548c\u9a71\u52a8\u5339\u914d\uff0c\u5c31\u4f1a\u8c03\u7528\u9a71\u52a8\u7684 platform_driver ->probe\u51fd\u6570 ,\u521d\u59cb\u5316\u9a71\u52a8\u7684\u6240\u6709\u8d44\u6e90\uff0c\u8ba9\u8be5\u9a71\u52a8\u751f\u6548\u3002 \u4e5f\u5c31\u662f\u5185\u6838\u7ef4\u62a4\u4e86\u8bb8\u591a bus_type \u5b9e\u4f8b, \u6709\u4e00\u4e9b bus_type \u662f\u5bf9\u5e94\u771f\u5b9e\u7269\u7406\u603b\u7ebf\u7684, \u6bd4\u5982 I2c\u3001SPI\u3001USB\u3001uart\u3001PCIE\u3001APB\u3001AHB \u540c\u65f6\u5185\u6838\u4e5f\u7ef4\u62a4\u4e86\u4e00\u6761\u865a\u62df\u603b\u7ebf\u5c31\u662f\u540d\u4e3a platform \u7684 platform_bus_type \u603b\u7ebf","title":"\u5185\u6838\u603b\u7ebf\u76f8\u5173\u7ed3\u6784\u4f53\u53d8\u91cf"},{"location":"chapter_14/9_linux_device_class/","text":"\u6982\u8ff0 \u7b80\u8ff0\u8bbe\u5907\u5206\u7c7b \u4e00\u3001Linux \u8bbe\u5907\u5206\u7c7b Linux \u7cfb\u7edf\u4e3a\u4e86\u7ba1\u7406\u65b9\u4fbf\uff0c\u5c06\u8bbe\u5907\u5206\u6210\u4e09\u79cd\u57fa\u672c\u7c7b\u578b\uff1a \u5b57\u7b26\u8bbe\u5907 \u5757\u8bbe\u5907 \u7f51\u7edc\u8bbe\u5907 \u5b57\u7b26\u8bbe\u5907\uff1a \u5b57\u7b26\uff08char\uff09\u8bbe\u5907\u662f\u4e2a\u80fd\u591f\u50cf\u5b57\u8282\u6d41\uff08\u7c7b\u4f3c\u6587\u4ef6\uff09\u4e00\u6837\u88ab\u8bbf\u95ee\u7684\u8bbe\u5907\uff0c\u7531\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u6765\u5b9e\u73b0\u8fd9\u79cd\u7279\u6027\u3002\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u901a\u5e38\u81f3\u5c11\u8981\u5b9e\u73b0 open\u3001close\u3001read \u548c write \u7684\u7cfb\u7edf\u8c03\u7528\u3002 \u5b57\u7b26\u7ec8\u7aef\uff08/dev/console\uff09\u548c\u4e32\u53e3\uff08/dev/ttyS0 \u4ee5\u53ca\u7c7b\u4f3c\u8bbe\u5907\uff09\u5c31\u662f\u4e24\u4e2a\u5b57\u7b26\u8bbe\u5907\uff0c\u5b83\u4eec\u80fd\u5f88\u597d\u7684\u8bf4\u660e\u201c\u6d41\u201d\u8fd9\u79cd\u62bd\u8c61\u6982\u5ff5\u3002 \u5b57\u7b26\u8bbe\u5907\u53ef\u4ee5\u901a\u8fc7\u6587\u4ef6\u8282\u70b9\u6765\u8bbf\u95ee\uff0c\u6bd4\u5982/dev/tty1 \u548c/dev/lp0 \u7b49\u3002\u8fd9\u4e9b\u8bbe\u5907\u6587\u4ef6\u548c\u666e\u901a\u6587\u4ef6\u4e4b\u95f4\u7684\u552f\u4e00\u5dee\u522b\u5728\u4e8e\u5bf9\u666e\u901a\u6587\u4ef6\u7684\u8bbf\u95ee\u53ef\u4ee5\u524d\u540e\u79fb\u52a8\u8bbf\u95ee\u4f4d\u7f6e\uff0c\u800c\u5927\u591a\u6570\u5b57\u7b26\u8bbe\u5907\u662f\u4e00\u4e2a\u53ea\u80fd\u987a\u5e8f\u8bbf\u95ee\u7684\u6570\u636e\u901a\u9053\u3002\u7136\u800c\uff0c\u4e5f\u5b58\u5728\u5177\u6709\u6570\u636e\u533a\u7279\u6027\u7684\u5b57\u7b26\u8bbe\u5907\uff0c\u8bbf\u95ee\u5b83\u4eec\u65f6\u53ef\u524d\u540e\u79fb\u52a8\u8bbf\u95ee\u4f4d\u7f6e\u3002\u4f8b\u5982 framebuffer \u5c31\u662f\u8fd9\u6837\u7684\u4e00\u4e2a\u8bbe\u5907\uff0capp \u53ef\u4ee5\u7528 mmap \u6216 lseek \u8bbf\u95ee\u6293\u53d6\u7684\u6574\u4e2a\u56fe\u50cf\u3002 \u5728/dev \u4e0b\u6267\u884c ls -l ,\u53ef\u4ee5\u770b\u5230\u5f88\u591a\u521b\u5efa\u597d\u7684\u8bbe\u5907\u8282\u70b9\uff1a \u5b57\u7b26\u8bbe\u5907\u6587\u4ef6\uff08\u7c7b\u578b\u4e3a c\uff09\uff0c\u8bbe\u5907\u6587\u4ef6\u662f\u6ca1\u6709\u6587\u4ef6\u5927\u5c0f\u7684\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u4e24\u4e2a\u53f7\u7801\uff1a\u4e3b\u8bbe\u5907\u53f7 5 +\u6b21\u8bbe\u5907\u53f7 1 \u3002 \u5757\u8bbe\u5907\uff1a \u548c\u5b57\u7b26\u8bbe\u5907\u7c7b\u4f3c\uff0c\u5757\u8bbe\u5907\u4e5f\u662f\u901a\u8fc7/dev \u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u7cfb\u7edf\u8282\u70b9\u6765\u8bbf\u95ee\u3002\u5757\u8bbe\u5907\uff08\u4f8b\u5982\u78c1\u76d8\uff09\u4e0a\u80fd\u591f\u5bb9\u7eb3 filesystem\u3002\u5728\u5927\u591a\u6570\u7684 Unix \u7cfb\u7edf\u4e2d\uff0c\u8fdb\u884c I/O \u64cd\u4f5c\u65f6\u5757\u8bbe\u5907\u6bcf\u6b21\u53ea\u80fd\u4f20\u8f93\u4e00\u4e2a\u6216\u591a\u4e2a\u5b8c\u6574\u7684\u5757\uff0c\u800c\u6bcf\u5757\u5305\u542b 512 \u5b57\u8282\uff08\u6216 2 \u7684\u66f4\u9ad8\u6b21\u5e42\u5b57\u8282\u7684\u6570\u636e\uff09\u3002 Linux \u53ef\u4ee5\u8ba9 app \u50cf\u5b57\u7b26\u8bbe\u5907\u4e00\u6837\u5730\u8bfb\u5199\u5757\u8bbe\u5907\uff0c\u5141\u8bb8\u4e00\u6b21\u4f20\u9012\u4efb\u610f\u591a\u5b57\u8282\u7684\u6570\u636e\u3002\u56e0\u6b64\uff0c\u5757\u8bbe\u5907\u548c\u5b57\u7b26\u8bbe\u5907\u7684\u533a\u522b\u4ec5\u4ec5\u5728\u4e8e\u5185\u6838\u5185\u90e8\u7ba1\u7406\u6570\u636e\u7684\u65b9\u5f0f\uff0c\u4e5f\u5c31\u662f\u5185\u6838\u53ca\u9a71\u52a8\u7a0b\u5e8f\u4e4b\u95f4\u7684\u8f6f\u4ef6\u63a5\u53e3\uff0c\u800c\u8fd9\u4e9b\u4e0d\u540c\u5bf9\u7528\u6237\u6765\u8bb2\u662f\u900f\u660e\u7684\u3002\u5728\u5185\u6838\u4e2d\uff0c\u548c\u5b57\u7b26\u9a71\u52a8\u7a0b\u5e8f\u76f8\u6bd4\uff0c\u5757\u9a71\u52a8\u7a0b\u5e8f\u5177\u6709\u5b8c\u5168\u4e0d\u540c\u7684\u63a5\u53e3\u3002 \u5757\u8bbe\u5907\u6587\u4ef6\uff08\u7c7b\u578b\u4e3a b\uff09\uff1a \u7f51\u7edc\u8bbe\u5907\uff1a \u4efb\u4f55\u7f51\u7edc\u4e8b\u7269\u90fd\u9700\u8981\u7ecf\u8fc7\u4e00\u4e2a\u7f51\u7edc\u63a5\u53e3\u5f62\u6210\uff0c\u7f51\u7edc\u63a5\u53e3\u662f\u4e00\u4e2a\u80fd\u591f\u548c\u5176\u4ed6\u4e3b\u673a\u4ea4\u6362\u6570\u636e\u7684\u8bbe\u5907\u3002\u63a5\u53e3\u901a\u5e38\u662f\u4e00\u4e2a\u786c\u4ef6\u8bbe\u5907\uff0c\u4f46\u4e5f\u53ef\u80fd\u662f\u4e2a\u7eaf\u8f6f\u4ef6\u8bbe\u5907\uff0c\u6bd4\u5982\u56de\u73af\uff08loopback\uff09\u63a5\u53e3\u3002 \u7f51\u7edc\u63a5\u53e3\u7531\u5185\u6838\u4e2d\u7684\u7f51\u7edc\u5b50\u7cfb\u7edf\u9a71\u52a8\uff0c\u8d1f\u8d23\u53d1\u9001\u548c\u63a5\u6536\u6570\u636e\u5305\u3002\u8bb8\u591a\u7f51\u7edc\u8fde\u63a5\uff08\u5c24\u5176\u662f\u4f7f\u7528 TCP \u534f\u8bae\u7684\u8fde\u63a5\uff09\u662f\u9762\u5411\u6d41\u7684\uff0c\u4f46\u7f51\u7edc\u8bbe\u5907\u5374\u56f4\u7ed5\u6570\u636e\u5305\u7684\u4f20\u9001\u548c\u63a5\u6536\u800c\u8bbe\u8ba1\u3002\u7f51\u7edc\u9a71\u52a8\u7a0b\u5e8f\u4e0d\u9700\u8981\u77e5\u9053\u5404\u4e2a\u8fde\u63a5\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u5b83\u53ea\u8981\u5904\u7406\u6570\u636e\u5305\u5373\u53ef\u3002 \u7531\u4e8e\u4e0d\u662f\u9762\u5411\u6d41\u7684\u8bbe\u5907\uff0c\u56e0\u6b64\u5c06\u7f51\u7edc\u63a5\u53e3\u6620\u5c04\u5230 filesystem \u4e2d\u7684\u8282\u70b9\uff08\u6bd4\u5982/dev/tty1\uff09\u6bd4\u8f83\u56f0\u96be\u3002 Unix \u8bbf\u95ee\u7f51\u7edc\u63a5\u53e3\u7684\u65b9\u6cd5\u4ecd\u7136\u662f\u7ed9\u5b83\u4eec\u5206\u914d\u4e00\u4e2a\u552f\u4e00\u7684\u540d\u5b57\uff08\u6bd4\u5982 eth0\uff09\uff0c\u4f46\u8fd9\u4e2a\u540d\u5b57\u5728 filesystem \u4e2d\u4e0d\u5b58\u5728\u5bf9\u5e94\u7684\u8282\u70b9\u3002\u5185\u6838\u548c\u7f51\u7edc\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u95f4\u7684\u901a\u4fe1\uff0c\u5b8c\u5168\u4e0d\u540c\u4e8e\u5185\u6838\u548c\u5b57\u7b26\u4ee5\u53ca\u5757\u9a71\u52a8\u7a0b\u5e8f\u4e4b\u95f4\u7684\u901a\u4fe1\uff0c\u5185\u6838\u8c03\u7528\u4e00\u5957\u548c\u6570\u636e\u5305\u76f8\u5173\u7684\u51fd\u6570 socket\uff0c\u4e5f\u53eb\u5957\u63a5\u5b57\u3002 \u67e5\u770b\u7f51\u7edc\u8bbe\u5907\u4f7f\u7528\u547d\u4ee4 ifconfig\uff1a \u4e3b\u8981\u7ed3\u6784\u4f53 \u5b57\u7b26\u8bbe\u5907 struct cdev \u5757\u8bbe\u5907 struct block_device , struct gendisk \u7f51\u7edc\u8bbe\u5907 struct net_device \u5757\u8bbe\u5907\u7ed3\u6784\u4f53\u5173\u8054","title":"\u7b2c\u4e5d\u7bc7 Linux\u8bbe\u5907\u5206\u7c7b"},{"location":"chapter_14/9_linux_device_class/#_1","text":"\u7b80\u8ff0\u8bbe\u5907\u5206\u7c7b","title":"\u6982\u8ff0"},{"location":"chapter_14/9_linux_device_class/#linux","text":"Linux \u7cfb\u7edf\u4e3a\u4e86\u7ba1\u7406\u65b9\u4fbf\uff0c\u5c06\u8bbe\u5907\u5206\u6210\u4e09\u79cd\u57fa\u672c\u7c7b\u578b\uff1a \u5b57\u7b26\u8bbe\u5907 \u5757\u8bbe\u5907 \u7f51\u7edc\u8bbe\u5907","title":"\u4e00\u3001Linux \u8bbe\u5907\u5206\u7c7b"},{"location":"chapter_14/9_linux_device_class/#_2","text":"\u5b57\u7b26\uff08char\uff09\u8bbe\u5907\u662f\u4e2a\u80fd\u591f\u50cf\u5b57\u8282\u6d41\uff08\u7c7b\u4f3c\u6587\u4ef6\uff09\u4e00\u6837\u88ab\u8bbf\u95ee\u7684\u8bbe\u5907\uff0c\u7531\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u6765\u5b9e\u73b0\u8fd9\u79cd\u7279\u6027\u3002\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u901a\u5e38\u81f3\u5c11\u8981\u5b9e\u73b0 open\u3001close\u3001read \u548c write \u7684\u7cfb\u7edf\u8c03\u7528\u3002 \u5b57\u7b26\u7ec8\u7aef\uff08/dev/console\uff09\u548c\u4e32\u53e3\uff08/dev/ttyS0 \u4ee5\u53ca\u7c7b\u4f3c\u8bbe\u5907\uff09\u5c31\u662f\u4e24\u4e2a\u5b57\u7b26\u8bbe\u5907\uff0c\u5b83\u4eec\u80fd\u5f88\u597d\u7684\u8bf4\u660e\u201c\u6d41\u201d\u8fd9\u79cd\u62bd\u8c61\u6982\u5ff5\u3002 \u5b57\u7b26\u8bbe\u5907\u53ef\u4ee5\u901a\u8fc7\u6587\u4ef6\u8282\u70b9\u6765\u8bbf\u95ee\uff0c\u6bd4\u5982/dev/tty1 \u548c/dev/lp0 \u7b49\u3002\u8fd9\u4e9b\u8bbe\u5907\u6587\u4ef6\u548c\u666e\u901a\u6587\u4ef6\u4e4b\u95f4\u7684\u552f\u4e00\u5dee\u522b\u5728\u4e8e\u5bf9\u666e\u901a\u6587\u4ef6\u7684\u8bbf\u95ee\u53ef\u4ee5\u524d\u540e\u79fb\u52a8\u8bbf\u95ee\u4f4d\u7f6e\uff0c\u800c\u5927\u591a\u6570\u5b57\u7b26\u8bbe\u5907\u662f\u4e00\u4e2a\u53ea\u80fd\u987a\u5e8f\u8bbf\u95ee\u7684\u6570\u636e\u901a\u9053\u3002\u7136\u800c\uff0c\u4e5f\u5b58\u5728\u5177\u6709\u6570\u636e\u533a\u7279\u6027\u7684\u5b57\u7b26\u8bbe\u5907\uff0c\u8bbf\u95ee\u5b83\u4eec\u65f6\u53ef\u524d\u540e\u79fb\u52a8\u8bbf\u95ee\u4f4d\u7f6e\u3002\u4f8b\u5982 framebuffer \u5c31\u662f\u8fd9\u6837\u7684\u4e00\u4e2a\u8bbe\u5907\uff0capp \u53ef\u4ee5\u7528 mmap \u6216 lseek \u8bbf\u95ee\u6293\u53d6\u7684\u6574\u4e2a\u56fe\u50cf\u3002 \u5728/dev \u4e0b\u6267\u884c ls -l ,\u53ef\u4ee5\u770b\u5230\u5f88\u591a\u521b\u5efa\u597d\u7684\u8bbe\u5907\u8282\u70b9\uff1a \u5b57\u7b26\u8bbe\u5907\u6587\u4ef6\uff08\u7c7b\u578b\u4e3a c\uff09\uff0c\u8bbe\u5907\u6587\u4ef6\u662f\u6ca1\u6709\u6587\u4ef6\u5927\u5c0f\u7684\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u4e24\u4e2a\u53f7\u7801\uff1a\u4e3b\u8bbe\u5907\u53f7 5 +\u6b21\u8bbe\u5907\u53f7 1 \u3002","title":"\u5b57\u7b26\u8bbe\u5907\uff1a"},{"location":"chapter_14/9_linux_device_class/#_3","text":"\u548c\u5b57\u7b26\u8bbe\u5907\u7c7b\u4f3c\uff0c\u5757\u8bbe\u5907\u4e5f\u662f\u901a\u8fc7/dev \u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u7cfb\u7edf\u8282\u70b9\u6765\u8bbf\u95ee\u3002\u5757\u8bbe\u5907\uff08\u4f8b\u5982\u78c1\u76d8\uff09\u4e0a\u80fd\u591f\u5bb9\u7eb3 filesystem\u3002\u5728\u5927\u591a\u6570\u7684 Unix \u7cfb\u7edf\u4e2d\uff0c\u8fdb\u884c I/O \u64cd\u4f5c\u65f6\u5757\u8bbe\u5907\u6bcf\u6b21\u53ea\u80fd\u4f20\u8f93\u4e00\u4e2a\u6216\u591a\u4e2a\u5b8c\u6574\u7684\u5757\uff0c\u800c\u6bcf\u5757\u5305\u542b 512 \u5b57\u8282\uff08\u6216 2 \u7684\u66f4\u9ad8\u6b21\u5e42\u5b57\u8282\u7684\u6570\u636e\uff09\u3002 Linux \u53ef\u4ee5\u8ba9 app \u50cf\u5b57\u7b26\u8bbe\u5907\u4e00\u6837\u5730\u8bfb\u5199\u5757\u8bbe\u5907\uff0c\u5141\u8bb8\u4e00\u6b21\u4f20\u9012\u4efb\u610f\u591a\u5b57\u8282\u7684\u6570\u636e\u3002\u56e0\u6b64\uff0c\u5757\u8bbe\u5907\u548c\u5b57\u7b26\u8bbe\u5907\u7684\u533a\u522b\u4ec5\u4ec5\u5728\u4e8e\u5185\u6838\u5185\u90e8\u7ba1\u7406\u6570\u636e\u7684\u65b9\u5f0f\uff0c\u4e5f\u5c31\u662f\u5185\u6838\u53ca\u9a71\u52a8\u7a0b\u5e8f\u4e4b\u95f4\u7684\u8f6f\u4ef6\u63a5\u53e3\uff0c\u800c\u8fd9\u4e9b\u4e0d\u540c\u5bf9\u7528\u6237\u6765\u8bb2\u662f\u900f\u660e\u7684\u3002\u5728\u5185\u6838\u4e2d\uff0c\u548c\u5b57\u7b26\u9a71\u52a8\u7a0b\u5e8f\u76f8\u6bd4\uff0c\u5757\u9a71\u52a8\u7a0b\u5e8f\u5177\u6709\u5b8c\u5168\u4e0d\u540c\u7684\u63a5\u53e3\u3002 \u5757\u8bbe\u5907\u6587\u4ef6\uff08\u7c7b\u578b\u4e3a b\uff09\uff1a","title":"\u5757\u8bbe\u5907\uff1a"},{"location":"chapter_14/9_linux_device_class/#_4","text":"\u4efb\u4f55\u7f51\u7edc\u4e8b\u7269\u90fd\u9700\u8981\u7ecf\u8fc7\u4e00\u4e2a\u7f51\u7edc\u63a5\u53e3\u5f62\u6210\uff0c\u7f51\u7edc\u63a5\u53e3\u662f\u4e00\u4e2a\u80fd\u591f\u548c\u5176\u4ed6\u4e3b\u673a\u4ea4\u6362\u6570\u636e\u7684\u8bbe\u5907\u3002\u63a5\u53e3\u901a\u5e38\u662f\u4e00\u4e2a\u786c\u4ef6\u8bbe\u5907\uff0c\u4f46\u4e5f\u53ef\u80fd\u662f\u4e2a\u7eaf\u8f6f\u4ef6\u8bbe\u5907\uff0c\u6bd4\u5982\u56de\u73af\uff08loopback\uff09\u63a5\u53e3\u3002 \u7f51\u7edc\u63a5\u53e3\u7531\u5185\u6838\u4e2d\u7684\u7f51\u7edc\u5b50\u7cfb\u7edf\u9a71\u52a8\uff0c\u8d1f\u8d23\u53d1\u9001\u548c\u63a5\u6536\u6570\u636e\u5305\u3002\u8bb8\u591a\u7f51\u7edc\u8fde\u63a5\uff08\u5c24\u5176\u662f\u4f7f\u7528 TCP \u534f\u8bae\u7684\u8fde\u63a5\uff09\u662f\u9762\u5411\u6d41\u7684\uff0c\u4f46\u7f51\u7edc\u8bbe\u5907\u5374\u56f4\u7ed5\u6570\u636e\u5305\u7684\u4f20\u9001\u548c\u63a5\u6536\u800c\u8bbe\u8ba1\u3002\u7f51\u7edc\u9a71\u52a8\u7a0b\u5e8f\u4e0d\u9700\u8981\u77e5\u9053\u5404\u4e2a\u8fde\u63a5\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u5b83\u53ea\u8981\u5904\u7406\u6570\u636e\u5305\u5373\u53ef\u3002 \u7531\u4e8e\u4e0d\u662f\u9762\u5411\u6d41\u7684\u8bbe\u5907\uff0c\u56e0\u6b64\u5c06\u7f51\u7edc\u63a5\u53e3\u6620\u5c04\u5230 filesystem \u4e2d\u7684\u8282\u70b9\uff08\u6bd4\u5982/dev/tty1\uff09\u6bd4\u8f83\u56f0\u96be\u3002 Unix \u8bbf\u95ee\u7f51\u7edc\u63a5\u53e3\u7684\u65b9\u6cd5\u4ecd\u7136\u662f\u7ed9\u5b83\u4eec\u5206\u914d\u4e00\u4e2a\u552f\u4e00\u7684\u540d\u5b57\uff08\u6bd4\u5982 eth0\uff09\uff0c\u4f46\u8fd9\u4e2a\u540d\u5b57\u5728 filesystem \u4e2d\u4e0d\u5b58\u5728\u5bf9\u5e94\u7684\u8282\u70b9\u3002\u5185\u6838\u548c\u7f51\u7edc\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u95f4\u7684\u901a\u4fe1\uff0c\u5b8c\u5168\u4e0d\u540c\u4e8e\u5185\u6838\u548c\u5b57\u7b26\u4ee5\u53ca\u5757\u9a71\u52a8\u7a0b\u5e8f\u4e4b\u95f4\u7684\u901a\u4fe1\uff0c\u5185\u6838\u8c03\u7528\u4e00\u5957\u548c\u6570\u636e\u5305\u76f8\u5173\u7684\u51fd\u6570 socket\uff0c\u4e5f\u53eb\u5957\u63a5\u5b57\u3002 \u67e5\u770b\u7f51\u7edc\u8bbe\u5907\u4f7f\u7528\u547d\u4ee4 ifconfig\uff1a","title":"\u7f51\u7edc\u8bbe\u5907\uff1a"},{"location":"chapter_14/9_linux_device_class/#_5","text":"\u5b57\u7b26\u8bbe\u5907 struct cdev \u5757\u8bbe\u5907 struct block_device , struct gendisk \u7f51\u7edc\u8bbe\u5907 struct net_device \u5757\u8bbe\u5907\u7ed3\u6784\u4f53\u5173\u8054","title":"\u4e3b\u8981\u7ed3\u6784\u4f53"},{"location":"chapter_15/1_demo_of_ai/","text":"\u53c2\u8003\u6587\u6863 \u96f6\u57fa\u7840 AI \u5165\u95e8\u6307\u5357 \u5d4c\u5165\u5f0f AI \u5e94\u7528\u5f00\u53d1\u5b9e\u6218\u6307\u5357 \u7b2c\u4e00\u4e2aAI\u7a0b\u5e8f MNIST\uff08Modified National Institute of Stands and Technology\uff09\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u6570\u636e\u96c6","title":"\u7b2c\u4e00\u7bc7 AI\u7a0b\u5e8f Hello World"},{"location":"chapter_15/1_demo_of_ai/#_1","text":"\u96f6\u57fa\u7840 AI \u5165\u95e8\u6307\u5357 \u5d4c\u5165\u5f0f AI \u5e94\u7528\u5f00\u53d1\u5b9e\u6218\u6307\u5357","title":"\u53c2\u8003\u6587\u6863"},{"location":"chapter_15/1_demo_of_ai/#ai","text":"","title":"\u7b2c\u4e00\u4e2aAI\u7a0b\u5e8f"},{"location":"chapter_15/1_demo_of_ai/#mnistmodified-national-institute-of-stands-and-technology","text":"","title":"MNIST\uff08Modified National Institute of Stands and Technology\uff09\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u6570\u636e\u96c6"},{"location":"chapter_2/12_monitor_and_alert/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3\u76d1\u63a7\u62a5\u8b66\u7684\u6700\u4f73\u5b9e\u8df5 1 \u76d1\u63a7\u8986\u76d6\u7684\u8303\u56f4 \u4ee5\u4e0b\u4e3b\u8981\u662f\u670d\u52a1\u7aef\u76d1\u63a7\u8986\u76d6\u7684\u8303\u56f4 \u7ea7\u522b \u76d1\u63a7\u8303\u56f4 \u6ce8\u610f\u70b9 \u57fa\u7840\u8bbe\u65bd\u3001\u7f51\u7edc \u673a\u623f\u786c\u4ef6,\u7f51\u7edc\u534f\u8bae\uff1ahttp\u3001dns\u3001tcp\u3001icmp\uff1b\u7f51\u7edc\u786c\u4ef6\uff1a\u8def\u7531\u5668\uff0c\u4ea4\u6362\u673a\u7b49 \u4e3b\u673a \u64cd\u4f5c\u7cfb\u7edf\u5404\u7c7b\u6307\u6807(cpu\u3001mem\u3001io\u3001net) \u5bb9\u5668 \u5bb9\u5668\u5404\u7c7b\u6307\u6807(cpu\u3001mem\u3001io\u3001net) \u5e94\u7528/\u670d\u52a1 \u5ef6\u8fdf\uff0c\u9519\u8bef\uff0cQPS\uff0c\u5185\u90e8\u72b6\u6001\u7b49 \u4e2d\u95f4\u4ef6\u548cDB(\u6d88\u606f\u961f\u5217\u3001MySQL\u3001Redis\u3001ELK\u7b49\u7b49) \u5404\u7c7b\u7ec4\u4ef6\u7684\u6700\u4f73\u76d1\u63a7\u5b9e\u8df5 \u7f16\u6392\u5de5\u5177(Kubernetes) \u96c6\u7fa4\u8d44\u6e90\u7528\u91cf\uff0c\u8c03\u5ea6\u7b49 \u4e1a\u52a1\u6570\u636e \u540c\u65f6\u5728\u7ebf\u4eba\u6570\u3001\u8ba2\u5355\u91cf\u7b49 \u4ee5\u4e0b\u662f\u7528\u6237\u4f53\u9a8c(\u5ba2\u6237\u7aef)\u7684\u76d1\u63a7\u65b9\u6cd5\u8bba \u7528\u6237\u4f53\u9a8c\u5dee ==> \u5f02\u5e38\u4e0a\u4f20&\u62a5\u8b66 ==> \u5f02\u5e38\u5b9a\u4f4d ==> \u89e3\u51b3\u5f02\u5e38 ==> \u5404\u7c7b\u4f18\u5316 ==> \u63d0\u9ad8\u7528\u6237\u4f53\u9a8c 1.1 4\u4e2a\u9ec4\u91d1\u6307\u6807 Four Golden Signals\u662fGoogle\u9488\u5bf9\u5927\u91cf\u5206\u5e03\u5f0f\u76d1\u63a7\u7684\u7ecf\u9a8c\u603b\u7ed3\uff0c4\u4e2a\u9ec4\u91d1\u6307\u6807\u53ef\u4ee5\u5728 \u670d\u52a1\u7ea7\u522b (\u4e5f\u5c31\u662f \u5e94\u7528\u7ea7\u522b )\u5e2e\u52a9\u8861\u91cf\u7ec8\u7aef\u7528\u6237\u4f53\u9a8c\u3001\u670d\u52a1\u4e2d\u65ad\u3001\u4e1a\u52a1\u5f71\u54cd\u7b49\u5c42\u9762\u7684\u95ee\u9898\u3002\u4e3b\u8981\u5173\u6ce8\u4e0e\u4ee5\u4e0b\u56db\u79cd\u7c7b\u578b\u7684\u6307\u6807\uff1a \u5ef6\u8fdf \uff0c \u901a\u8baf\u91cf \uff0c \u9519\u8bef \u4ee5\u53ca \u9971\u548c\u5ea6 \uff1a \u5ef6\u8fdf\uff1a\u670d\u52a1\u8bf7\u6c42\u6240\u9700\u65f6\u95f4\u3002 \u8bb0\u5f55\u7528\u6237\u6240\u6709\u8bf7\u6c42\u6240\u9700\u7684\u65f6\u95f4\uff0c\u91cd\u70b9\u662f\u8981\u533a\u5206\u6210\u529f\u8bf7\u6c42\u7684\u5ef6\u8fdf\u65f6\u95f4\u548c\u5931\u8d25\u8bf7\u6c42\u7684\u5ef6\u8fdf\u65f6\u95f4\u3002 \u4f8b\u5982\u5728\u6570\u636e\u5e93\u6216\u8005\u5176\u4ed6\u5173\u952e\u7978\u7aef\u670d\u52a1\u5f02\u5e38\u89e6\u53d1HTTP 500\u7684\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u4e5f\u53ef\u80fd\u4f1a\u5f88\u5feb\u5f97\u5230\u8bf7\u6c42\u5931\u8d25\u7684\u54cd\u5e94\u5185\u5bb9\uff0c\u5982\u679c\u4e0d\u52a0\u533a\u5206\u8ba1\u7b97\u8fd9\u4e9b\u8bf7\u6c42\u7684\u5ef6\u8fdf\uff0c\u53ef\u80fd\u5bfc\u81f4\u8ba1\u7b97\u7ed3\u679c\u4e0e\u5b9e\u9645\u7ed3\u679c\u4ea7\u751f\u5de8\u5927\u7684\u5dee\u5f02\u3002\u9664\u6b64\u4ee5\u5916\uff0c\u5728\u5fae\u670d\u52a1\u4e2d\u901a\u5e38\u63d0\u5021\u201c\u5feb\u901f\u5931\u8d25\u201d\uff0c\u5f00\u53d1\u4eba\u5458\u9700\u8981\u7279\u522b\u6ce8\u610f\u8fd9\u4e9b\u5ef6\u8fdf\u8f83\u5927\u7684\u9519\u8bef\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u7f13\u6162\u7684\u9519\u8bef\u4f1a\u660e\u663e\u5f71\u54cd\u7cfb\u7edf\u7684\u6027\u80fd\uff0c\u56e0\u6b64\u8ffd\u8e2a\u8fd9\u4e9b\u9519\u8bef\u7684\u5ef6\u8fdf\u4e5f\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002 \u901a\u8baf\u91cf\uff1a\u76d1\u63a7\u5f53\u524d\u7cfb\u7edf\u7684\u6d41\u91cf\uff0c\u7528\u4e8e\u8861\u91cf\u670d\u52a1\u7684\u5bb9\u91cf\u9700\u6c42\u3002 \u6d41\u91cf\u5bf9\u4e8e\u4e0d\u540c\u7c7b\u578b\u7684\u7cfb\u7edf\u800c\u8a00\u53ef\u80fd\u4ee3\u8868\u4e0d\u540c\u7684\u542b\u4e49\u3002\u4f8b\u5982\uff0c\u5728HTTP REST API\u4e2d, \u6d41\u91cf\u901a\u5e38\u662f\u6bcf\u79d2HTTP\u8bf7\u6c42\u6570\uff1b \u9519\u8bef\uff1a\u76d1\u63a7\u5f53\u524d\u7cfb\u7edf\u6240\u6709\u53d1\u751f\u7684\u9519\u8bef\u8bf7\u6c42\uff0c\u8861\u91cf\u5f53\u524d\u7cfb\u7edf\u9519\u8bef\u53d1\u751f\u7684\u901f\u7387\u3002 \u5bf9\u4e8e\u5931\u8d25\u800c\u8a00\u6709\u4e9b\u662f\u663e\u5f0f\u7684(\u6bd4\u5982, HTTP 500\u9519\u8bef)\uff0c\u800c\u6709\u4e9b\u662f\u9690\u5f0f(\u6bd4\u5982\uff0cHTTP\u54cd\u5e94200\uff0c\u4f46\u5b9e\u9645\u4e1a\u52a1\u6d41\u7a0b\u4f9d\u7136\u662f\u5931\u8d25\u7684)\u3002 \u5bf9\u4e8e\u4e00\u4e9b\u663e\u5f0f\u7684\u9519\u8bef\u5982HTTP 500\u53ef\u4ee5\u901a\u8fc7\u5728\u8d1f\u8f7d\u5747\u8861\u5668(\u5982Nginx)\u4e0a\u8fdb\u884c\u6355\u83b7\uff0c\u800c\u5bf9\u4e8e\u4e00\u4e9b\u7cfb\u7edf\u5185\u90e8\u7684\u5f02\u5e38\uff0c\u5219\u53ef\u80fd\u9700\u8981\u76f4\u63a5\u4ece\u670d\u52a1\u4e2d\u6dfb\u52a0\u94a9\u5b50\u7edf\u8ba1\u5e76\u8fdb\u884c\u83b7\u53d6\u3002 \u9971\u548c\u5ea6\uff1a\u8861\u91cf\u5f53\u524d\u670d\u52a1\u7684\u9971\u548c\u5ea6\u3002 \u4e3b\u8981\u5f3a\u8c03\u6700\u80fd\u5f71\u54cd\u670d\u52a1\u72b6\u6001\u7684\u53d7\u9650\u5236\u7684\u8d44\u6e90\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u7cfb\u7edf\u4e3b\u8981\u53d7\u5185\u5b58\u5f71\u54cd\uff0c\u90a3\u5c31\u4e3b\u8981\u5173\u6ce8\u7cfb\u7edf\u7684\u5185\u5b58\u72b6\u6001\uff0c\u5982\u679c\u7cfb\u7edf\u4e3b\u8981\u53d7\u9650\u4e0e\u78c1\u76d8I/O\uff0c\u90a3\u5c31\u4e3b\u8981\u89c2\u6d4b\u78c1\u76d8I/O\u7684\u72b6\u6001\u3002\u56e0\u4e3a\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5f53\u8fd9\u4e9b\u8d44\u6e90\u8fbe\u5230\u9971\u548c\u540e\uff0c\u670d\u52a1\u7684\u6027\u80fd\u4f1a\u660e\u663e\u4e0b\u964d\u3002\u540c\u65f6\u8fd8\u53ef\u4ee5\u5229\u7528\u9971\u548c\u5ea6\u5bf9\u7cfb\u7edf\u505a\u51fa\u9884\u6d4b\uff0c\u6bd4\u5982\uff0c\u201c\u78c1\u76d8\u662f\u5426\u53ef\u80fd\u57284\u4e2a\u5c0f\u65f6\u5019\u5c31\u6ee1\u4e86\u201d\u3002 1.2 RED\u65b9\u6cd5(\u8861\u91cf\u7528\u6237\u4f53\u9a8c\u5ea6) RED\u65b9\u6cd5\u662fWeave Cloud\u5728\u57fa\u4e8eGoogle\u7684\u201c4\u4e2a\u9ec4\u91d1\u6307\u6807\u201d\u7684\u539f\u5219\u4e0b\u7ed3\u5408Prometheus\u4ee5\u53caKubernetes\u5bb9\u5668\u5b9e\u8df5\uff0c\u7ec6\u5316\u548c\u603b\u7ed3\u7684\u65b9\u6cd5\u8bba\uff0c\u7279\u522b\u9002\u5408\u4e8e\u4e91\u539f\u751f\u5e94\u7528\u4ee5\u53ca\u5fae\u670d\u52a1\u67b6\u6784\u5e94\u7528\u7684\u76d1\u63a7\u548c\u5ea6\u91cf\u3002\u4e3b\u8981\u5173\u6ce8\u4ee5\u4e0b\u4e09\u79cd\u5173\u952e\u6307\u6807\uff1a (\u8bf7\u6c42)\u901f\u7387\uff1a\u670d\u52a1\u6bcf\u79d2\u63a5\u6536\u7684\u8bf7\u6c42\u6570\u3002 (\u8bf7\u6c42)\u9519\u8bef\uff1a\u6bcf\u79d2\u5931\u8d25\u7684\u8bf7\u6c42\u6570\u3002 (\u8bf7\u6c42)\u8017\u65f6\uff1a\u6bcf\u4e2a\u8bf7\u6c42\u7684\u8017\u65f6\u3002 \u5728\u201c4\u5927\u9ec4\u91d1\u4fe1\u53f7\u201d\u7684\u539f\u5219\u4e0b\uff0cRED\u65b9\u6cd5\u53ef\u4ee5\u6709\u6548\u7684\u5e2e\u52a9\u7528\u6237\u8861\u91cf\u4e91\u539f\u751f\u4ee5\u53ca\u5fae\u670d\u52a1\u5e94\u7528\u4e0b\u7684\u7528\u6237\u4f53\u9a8c\u95ee\u9898\u3002 1.3 USE\u65b9\u6cd5(\u5206\u6790\u7cfb\u7edf\u6027\u80fd\u95ee\u9898) USE\u65b9\u6cd5\u5168\u79f0\"Utilization Saturation and Errors Method\"\uff0c\u4e3b\u8981\u7528\u4e8e\u5206\u6790\u7cfb\u7edf\u6027\u80fd\u95ee\u9898\uff0c\u53ef\u4ee5\u6307\u5bfc\u7528\u6237\u5feb\u901f\u8bc6\u522b\u8d44\u6e90\u74f6\u9888\u4ee5\u53ca\u9519\u8bef\u7684\u65b9\u6cd5\u3002\u6b63\u5982USE\u65b9\u6cd5\u7684\u540d\u5b57\u6240\u8868\u793a\u7684\u542b\u4e49\uff0cUSE\u65b9\u6cd5\u4e3b\u8981\u5173\u6ce8\u4e0e\u8d44\u6e90\u7684\uff1a\u4f7f\u7528\u7387(Utilization)\u3001\u9971\u548c\u5ea6(Saturation)\u4ee5\u53ca\u9519\u8bef(Errors)\u3002 \u4f7f\u7528\u7387\uff1a\u5173\u6ce8\u7cfb\u7edf\u8d44\u6e90\u7684\u4f7f\u7528\u60c5\u51b5\u3002 \u8fd9\u91cc\u7684\u8d44\u6e90\u4e3b\u8981\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1aCPU\uff0c\u5185\u5b58\uff0c\u7f51\u7edc\uff0c\u78c1\u76d8\u7b49\u7b49\u3002100%\u7684\u4f7f\u7528\u7387\u901a\u5e38\u662f\u7cfb\u7edf\u6027\u80fd\u74f6\u9888\u7684\u6807\u5fd7\u3002 \u9971\u548c\u5ea6\uff1a\u4f8b\u5982CPU\u7684\u5e73\u5747\u8fd0\u884c\u6392\u961f\u957f\u5ea6\uff0c\u8fd9\u91cc\u4e3b\u8981\u662f\u9488\u5bf9\u8d44\u6e90\u7684\u9971\u548c\u5ea6(\u6ce8\u610f\uff0c\u4e0d\u540c\u4e8e4\u5927\u9ec4\u91d1\u4fe1\u53f7)\u3002\u4efb\u4f55\u8d44\u6e90\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u7684\u9971\u548c\u90fd\u53ef\u80fd\u5bfc\u81f4\u7cfb\u7edf\u6027\u80fd\u7684\u4e0b\u964d\u3002 \u9519\u8bef\uff1a\u9519\u8bef\u8ba1\u6570\u3002\u4f8b\u5982\uff1a\u201c\u7f51\u5361\u5728\u6570\u636e\u5305\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u68c0\u6d4b\u5230\u7684\u4ee5\u592a\u7f51\u7f51\u7edc\u51b2\u7a81\u4e8614\u6b21\u201d\u3002 2 \u62a5\u8b66\u914d\u7f6e\u6700\u4f73\u5b9e\u8df5 \u76ee\u6807: \u5176\u5b9e\u662f\u4e3a\u4e86\u6545\u969c\u6cbb\u7406: 1\u30015\u300110(1\u5206\u949f\u53d1\u73b0\u95ee\u9898\uff0c5\u5206\u949f\u5b9a\u4f4d\u95ee\u9898\uff0c10\u5206\u949f\u89e3\u51b3\u95ee\u9898\uff09 2.1 \u600e\u4e48\u505a\u52301\u5206\u949f\u53d1\u73b0\u95ee\u9898? \u5176\u5b9e\u62a5\u8b66\u89c4\u5219\u914d\u7f6e\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u533a\u5206 \u9884\u8b66 \u548c \u62a5\u8b66 , \u9884\u8b66\u662f\u6307\u670d\u52a1\u8fd8\u6ca1\u6709\u771f\u6b63\u5f02\u5e38\u3001\u6ca1\u6709\u5f71\u54cd\u5230\u7528\u6237\uff0c\u6bd4\u5982cpu\u4f7f\u7528\u738760%\u9884\u8b66\uff0c\u53d1\u4e00\u4e2a\u6d88\u606f\u7ed9\u5230\u76f8\u5e94\u503c\u73ed\u4eba\u5458\u5173\u6ce8. \u7b49cpu\u7528\u523090%\u7684\u65f6\u5019\u771f\u6b63\u662f\u62a5\u8b66\uff0c\u6b64\u65f6\u5fc5\u987b\u4ecb\u5165\u5904\u7406\u4e86(\u6bd4\u5982\u6269\u5bb9\u3001\u6bd4\u5982\u6392\u67e5\u539f\u56e0). 3 Prometheus pull\u6a21\u5f0f\u548c\u4f20\u7edf\u76d1\u63a7\u5de5\u5177\u7684push\u6a21\u5f0f\u603b\u7ed3 3.1 \u4f18\u70b9 1 pull\u6a21\u5f0f\u8ba9server\u7aef\u53d8\u6210\u65e0\u72b6\u6001,\u53ef\u4ee5\u65b9\u4fbf\u7684\u6a2a\u5411\u6269\u5bb9\u3001\u5728\u591a\u4e2a\u5730\u65b9(\u6bd4\u5982\u4f60\u672c\u5730)\u90e8\u7f72server\u7aef. 2 pull\u6a21\u5f0f\u66f4\u52a0\u9002\u914d\u4e91\u539f\u751f\u73af\u5883\uff0c\u56e0\u4e3a\u88ab\u76d1\u63a7\u7684\u4e3b\u673a\u3001\u5bb9\u5668\u90fd\u662f\u6309\u9700\u4f7f\u7528\u3001\u52a8\u6001\u6269\u7f29\u5bb9\u7684, \u5982\u679c\u6ca1\u6709 3.2 \u7f3a\u70b9 1 \u88ab\u76d1\u63a7\u7684\u4e3b\u673a\u3001\u5bb9\u5668\u90fd\u9700\u8981\u63d0\u4f9bExporter 2 \u5b9e\u65f6\u6027\u4e0d\u5982push\u6a21\u5f0f\u597d","title":"\u7b2c\u5341\u4e8c\u7bc7 \u76d1\u63a7\u62a5\u8b66\u6700\u4f73\u5b9e\u8df5"},{"location":"chapter_2/12_monitor_and_alert/#_1","text":"\u672c\u7bc7\u603b\u7ed3\u76d1\u63a7\u62a5\u8b66\u7684\u6700\u4f73\u5b9e\u8df5","title":"\u6982\u8ff0"},{"location":"chapter_2/12_monitor_and_alert/#1","text":"\u4ee5\u4e0b\u4e3b\u8981\u662f\u670d\u52a1\u7aef\u76d1\u63a7\u8986\u76d6\u7684\u8303\u56f4 \u7ea7\u522b \u76d1\u63a7\u8303\u56f4 \u6ce8\u610f\u70b9 \u57fa\u7840\u8bbe\u65bd\u3001\u7f51\u7edc \u673a\u623f\u786c\u4ef6,\u7f51\u7edc\u534f\u8bae\uff1ahttp\u3001dns\u3001tcp\u3001icmp\uff1b\u7f51\u7edc\u786c\u4ef6\uff1a\u8def\u7531\u5668\uff0c\u4ea4\u6362\u673a\u7b49 \u4e3b\u673a \u64cd\u4f5c\u7cfb\u7edf\u5404\u7c7b\u6307\u6807(cpu\u3001mem\u3001io\u3001net) \u5bb9\u5668 \u5bb9\u5668\u5404\u7c7b\u6307\u6807(cpu\u3001mem\u3001io\u3001net) \u5e94\u7528/\u670d\u52a1 \u5ef6\u8fdf\uff0c\u9519\u8bef\uff0cQPS\uff0c\u5185\u90e8\u72b6\u6001\u7b49 \u4e2d\u95f4\u4ef6\u548cDB(\u6d88\u606f\u961f\u5217\u3001MySQL\u3001Redis\u3001ELK\u7b49\u7b49) \u5404\u7c7b\u7ec4\u4ef6\u7684\u6700\u4f73\u76d1\u63a7\u5b9e\u8df5 \u7f16\u6392\u5de5\u5177(Kubernetes) \u96c6\u7fa4\u8d44\u6e90\u7528\u91cf\uff0c\u8c03\u5ea6\u7b49 \u4e1a\u52a1\u6570\u636e \u540c\u65f6\u5728\u7ebf\u4eba\u6570\u3001\u8ba2\u5355\u91cf\u7b49 \u4ee5\u4e0b\u662f\u7528\u6237\u4f53\u9a8c(\u5ba2\u6237\u7aef)\u7684\u76d1\u63a7\u65b9\u6cd5\u8bba \u7528\u6237\u4f53\u9a8c\u5dee ==> \u5f02\u5e38\u4e0a\u4f20&\u62a5\u8b66 ==> \u5f02\u5e38\u5b9a\u4f4d ==> \u89e3\u51b3\u5f02\u5e38 ==> \u5404\u7c7b\u4f18\u5316 ==> \u63d0\u9ad8\u7528\u6237\u4f53\u9a8c","title":"1  \u76d1\u63a7\u8986\u76d6\u7684\u8303\u56f4"},{"location":"chapter_2/12_monitor_and_alert/#11-4","text":"Four Golden Signals\u662fGoogle\u9488\u5bf9\u5927\u91cf\u5206\u5e03\u5f0f\u76d1\u63a7\u7684\u7ecf\u9a8c\u603b\u7ed3\uff0c4\u4e2a\u9ec4\u91d1\u6307\u6807\u53ef\u4ee5\u5728 \u670d\u52a1\u7ea7\u522b (\u4e5f\u5c31\u662f \u5e94\u7528\u7ea7\u522b )\u5e2e\u52a9\u8861\u91cf\u7ec8\u7aef\u7528\u6237\u4f53\u9a8c\u3001\u670d\u52a1\u4e2d\u65ad\u3001\u4e1a\u52a1\u5f71\u54cd\u7b49\u5c42\u9762\u7684\u95ee\u9898\u3002\u4e3b\u8981\u5173\u6ce8\u4e0e\u4ee5\u4e0b\u56db\u79cd\u7c7b\u578b\u7684\u6307\u6807\uff1a \u5ef6\u8fdf \uff0c \u901a\u8baf\u91cf \uff0c \u9519\u8bef \u4ee5\u53ca \u9971\u548c\u5ea6 \uff1a \u5ef6\u8fdf\uff1a\u670d\u52a1\u8bf7\u6c42\u6240\u9700\u65f6\u95f4\u3002 \u8bb0\u5f55\u7528\u6237\u6240\u6709\u8bf7\u6c42\u6240\u9700\u7684\u65f6\u95f4\uff0c\u91cd\u70b9\u662f\u8981\u533a\u5206\u6210\u529f\u8bf7\u6c42\u7684\u5ef6\u8fdf\u65f6\u95f4\u548c\u5931\u8d25\u8bf7\u6c42\u7684\u5ef6\u8fdf\u65f6\u95f4\u3002 \u4f8b\u5982\u5728\u6570\u636e\u5e93\u6216\u8005\u5176\u4ed6\u5173\u952e\u7978\u7aef\u670d\u52a1\u5f02\u5e38\u89e6\u53d1HTTP 500\u7684\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u4e5f\u53ef\u80fd\u4f1a\u5f88\u5feb\u5f97\u5230\u8bf7\u6c42\u5931\u8d25\u7684\u54cd\u5e94\u5185\u5bb9\uff0c\u5982\u679c\u4e0d\u52a0\u533a\u5206\u8ba1\u7b97\u8fd9\u4e9b\u8bf7\u6c42\u7684\u5ef6\u8fdf\uff0c\u53ef\u80fd\u5bfc\u81f4\u8ba1\u7b97\u7ed3\u679c\u4e0e\u5b9e\u9645\u7ed3\u679c\u4ea7\u751f\u5de8\u5927\u7684\u5dee\u5f02\u3002\u9664\u6b64\u4ee5\u5916\uff0c\u5728\u5fae\u670d\u52a1\u4e2d\u901a\u5e38\u63d0\u5021\u201c\u5feb\u901f\u5931\u8d25\u201d\uff0c\u5f00\u53d1\u4eba\u5458\u9700\u8981\u7279\u522b\u6ce8\u610f\u8fd9\u4e9b\u5ef6\u8fdf\u8f83\u5927\u7684\u9519\u8bef\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u7f13\u6162\u7684\u9519\u8bef\u4f1a\u660e\u663e\u5f71\u54cd\u7cfb\u7edf\u7684\u6027\u80fd\uff0c\u56e0\u6b64\u8ffd\u8e2a\u8fd9\u4e9b\u9519\u8bef\u7684\u5ef6\u8fdf\u4e5f\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002 \u901a\u8baf\u91cf\uff1a\u76d1\u63a7\u5f53\u524d\u7cfb\u7edf\u7684\u6d41\u91cf\uff0c\u7528\u4e8e\u8861\u91cf\u670d\u52a1\u7684\u5bb9\u91cf\u9700\u6c42\u3002 \u6d41\u91cf\u5bf9\u4e8e\u4e0d\u540c\u7c7b\u578b\u7684\u7cfb\u7edf\u800c\u8a00\u53ef\u80fd\u4ee3\u8868\u4e0d\u540c\u7684\u542b\u4e49\u3002\u4f8b\u5982\uff0c\u5728HTTP REST API\u4e2d, \u6d41\u91cf\u901a\u5e38\u662f\u6bcf\u79d2HTTP\u8bf7\u6c42\u6570\uff1b \u9519\u8bef\uff1a\u76d1\u63a7\u5f53\u524d\u7cfb\u7edf\u6240\u6709\u53d1\u751f\u7684\u9519\u8bef\u8bf7\u6c42\uff0c\u8861\u91cf\u5f53\u524d\u7cfb\u7edf\u9519\u8bef\u53d1\u751f\u7684\u901f\u7387\u3002 \u5bf9\u4e8e\u5931\u8d25\u800c\u8a00\u6709\u4e9b\u662f\u663e\u5f0f\u7684(\u6bd4\u5982, HTTP 500\u9519\u8bef)\uff0c\u800c\u6709\u4e9b\u662f\u9690\u5f0f(\u6bd4\u5982\uff0cHTTP\u54cd\u5e94200\uff0c\u4f46\u5b9e\u9645\u4e1a\u52a1\u6d41\u7a0b\u4f9d\u7136\u662f\u5931\u8d25\u7684)\u3002 \u5bf9\u4e8e\u4e00\u4e9b\u663e\u5f0f\u7684\u9519\u8bef\u5982HTTP 500\u53ef\u4ee5\u901a\u8fc7\u5728\u8d1f\u8f7d\u5747\u8861\u5668(\u5982Nginx)\u4e0a\u8fdb\u884c\u6355\u83b7\uff0c\u800c\u5bf9\u4e8e\u4e00\u4e9b\u7cfb\u7edf\u5185\u90e8\u7684\u5f02\u5e38\uff0c\u5219\u53ef\u80fd\u9700\u8981\u76f4\u63a5\u4ece\u670d\u52a1\u4e2d\u6dfb\u52a0\u94a9\u5b50\u7edf\u8ba1\u5e76\u8fdb\u884c\u83b7\u53d6\u3002 \u9971\u548c\u5ea6\uff1a\u8861\u91cf\u5f53\u524d\u670d\u52a1\u7684\u9971\u548c\u5ea6\u3002 \u4e3b\u8981\u5f3a\u8c03\u6700\u80fd\u5f71\u54cd\u670d\u52a1\u72b6\u6001\u7684\u53d7\u9650\u5236\u7684\u8d44\u6e90\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u7cfb\u7edf\u4e3b\u8981\u53d7\u5185\u5b58\u5f71\u54cd\uff0c\u90a3\u5c31\u4e3b\u8981\u5173\u6ce8\u7cfb\u7edf\u7684\u5185\u5b58\u72b6\u6001\uff0c\u5982\u679c\u7cfb\u7edf\u4e3b\u8981\u53d7\u9650\u4e0e\u78c1\u76d8I/O\uff0c\u90a3\u5c31\u4e3b\u8981\u89c2\u6d4b\u78c1\u76d8I/O\u7684\u72b6\u6001\u3002\u56e0\u4e3a\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5f53\u8fd9\u4e9b\u8d44\u6e90\u8fbe\u5230\u9971\u548c\u540e\uff0c\u670d\u52a1\u7684\u6027\u80fd\u4f1a\u660e\u663e\u4e0b\u964d\u3002\u540c\u65f6\u8fd8\u53ef\u4ee5\u5229\u7528\u9971\u548c\u5ea6\u5bf9\u7cfb\u7edf\u505a\u51fa\u9884\u6d4b\uff0c\u6bd4\u5982\uff0c\u201c\u78c1\u76d8\u662f\u5426\u53ef\u80fd\u57284\u4e2a\u5c0f\u65f6\u5019\u5c31\u6ee1\u4e86\u201d\u3002","title":"1.1 4\u4e2a\u9ec4\u91d1\u6307\u6807"},{"location":"chapter_2/12_monitor_and_alert/#12-red","text":"RED\u65b9\u6cd5\u662fWeave Cloud\u5728\u57fa\u4e8eGoogle\u7684\u201c4\u4e2a\u9ec4\u91d1\u6307\u6807\u201d\u7684\u539f\u5219\u4e0b\u7ed3\u5408Prometheus\u4ee5\u53caKubernetes\u5bb9\u5668\u5b9e\u8df5\uff0c\u7ec6\u5316\u548c\u603b\u7ed3\u7684\u65b9\u6cd5\u8bba\uff0c\u7279\u522b\u9002\u5408\u4e8e\u4e91\u539f\u751f\u5e94\u7528\u4ee5\u53ca\u5fae\u670d\u52a1\u67b6\u6784\u5e94\u7528\u7684\u76d1\u63a7\u548c\u5ea6\u91cf\u3002\u4e3b\u8981\u5173\u6ce8\u4ee5\u4e0b\u4e09\u79cd\u5173\u952e\u6307\u6807\uff1a (\u8bf7\u6c42)\u901f\u7387\uff1a\u670d\u52a1\u6bcf\u79d2\u63a5\u6536\u7684\u8bf7\u6c42\u6570\u3002 (\u8bf7\u6c42)\u9519\u8bef\uff1a\u6bcf\u79d2\u5931\u8d25\u7684\u8bf7\u6c42\u6570\u3002 (\u8bf7\u6c42)\u8017\u65f6\uff1a\u6bcf\u4e2a\u8bf7\u6c42\u7684\u8017\u65f6\u3002 \u5728\u201c4\u5927\u9ec4\u91d1\u4fe1\u53f7\u201d\u7684\u539f\u5219\u4e0b\uff0cRED\u65b9\u6cd5\u53ef\u4ee5\u6709\u6548\u7684\u5e2e\u52a9\u7528\u6237\u8861\u91cf\u4e91\u539f\u751f\u4ee5\u53ca\u5fae\u670d\u52a1\u5e94\u7528\u4e0b\u7684\u7528\u6237\u4f53\u9a8c\u95ee\u9898\u3002","title":"1.2 RED\u65b9\u6cd5(\u8861\u91cf\u7528\u6237\u4f53\u9a8c\u5ea6)"},{"location":"chapter_2/12_monitor_and_alert/#13-use","text":"USE\u65b9\u6cd5\u5168\u79f0\"Utilization Saturation and Errors Method\"\uff0c\u4e3b\u8981\u7528\u4e8e\u5206\u6790\u7cfb\u7edf\u6027\u80fd\u95ee\u9898\uff0c\u53ef\u4ee5\u6307\u5bfc\u7528\u6237\u5feb\u901f\u8bc6\u522b\u8d44\u6e90\u74f6\u9888\u4ee5\u53ca\u9519\u8bef\u7684\u65b9\u6cd5\u3002\u6b63\u5982USE\u65b9\u6cd5\u7684\u540d\u5b57\u6240\u8868\u793a\u7684\u542b\u4e49\uff0cUSE\u65b9\u6cd5\u4e3b\u8981\u5173\u6ce8\u4e0e\u8d44\u6e90\u7684\uff1a\u4f7f\u7528\u7387(Utilization)\u3001\u9971\u548c\u5ea6(Saturation)\u4ee5\u53ca\u9519\u8bef(Errors)\u3002 \u4f7f\u7528\u7387\uff1a\u5173\u6ce8\u7cfb\u7edf\u8d44\u6e90\u7684\u4f7f\u7528\u60c5\u51b5\u3002 \u8fd9\u91cc\u7684\u8d44\u6e90\u4e3b\u8981\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1aCPU\uff0c\u5185\u5b58\uff0c\u7f51\u7edc\uff0c\u78c1\u76d8\u7b49\u7b49\u3002100%\u7684\u4f7f\u7528\u7387\u901a\u5e38\u662f\u7cfb\u7edf\u6027\u80fd\u74f6\u9888\u7684\u6807\u5fd7\u3002 \u9971\u548c\u5ea6\uff1a\u4f8b\u5982CPU\u7684\u5e73\u5747\u8fd0\u884c\u6392\u961f\u957f\u5ea6\uff0c\u8fd9\u91cc\u4e3b\u8981\u662f\u9488\u5bf9\u8d44\u6e90\u7684\u9971\u548c\u5ea6(\u6ce8\u610f\uff0c\u4e0d\u540c\u4e8e4\u5927\u9ec4\u91d1\u4fe1\u53f7)\u3002\u4efb\u4f55\u8d44\u6e90\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u7684\u9971\u548c\u90fd\u53ef\u80fd\u5bfc\u81f4\u7cfb\u7edf\u6027\u80fd\u7684\u4e0b\u964d\u3002 \u9519\u8bef\uff1a\u9519\u8bef\u8ba1\u6570\u3002\u4f8b\u5982\uff1a\u201c\u7f51\u5361\u5728\u6570\u636e\u5305\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u68c0\u6d4b\u5230\u7684\u4ee5\u592a\u7f51\u7f51\u7edc\u51b2\u7a81\u4e8614\u6b21\u201d\u3002","title":"1.3 USE\u65b9\u6cd5(\u5206\u6790\u7cfb\u7edf\u6027\u80fd\u95ee\u9898)"},{"location":"chapter_2/12_monitor_and_alert/#2","text":"\u76ee\u6807: \u5176\u5b9e\u662f\u4e3a\u4e86\u6545\u969c\u6cbb\u7406: 1\u30015\u300110(1\u5206\u949f\u53d1\u73b0\u95ee\u9898\uff0c5\u5206\u949f\u5b9a\u4f4d\u95ee\u9898\uff0c10\u5206\u949f\u89e3\u51b3\u95ee\u9898\uff09","title":"2 \u62a5\u8b66\u914d\u7f6e\u6700\u4f73\u5b9e\u8df5"},{"location":"chapter_2/12_monitor_and_alert/#21-1","text":"\u5176\u5b9e\u62a5\u8b66\u89c4\u5219\u914d\u7f6e\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u533a\u5206 \u9884\u8b66 \u548c \u62a5\u8b66 , \u9884\u8b66\u662f\u6307\u670d\u52a1\u8fd8\u6ca1\u6709\u771f\u6b63\u5f02\u5e38\u3001\u6ca1\u6709\u5f71\u54cd\u5230\u7528\u6237\uff0c\u6bd4\u5982cpu\u4f7f\u7528\u738760%\u9884\u8b66\uff0c\u53d1\u4e00\u4e2a\u6d88\u606f\u7ed9\u5230\u76f8\u5e94\u503c\u73ed\u4eba\u5458\u5173\u6ce8. \u7b49cpu\u7528\u523090%\u7684\u65f6\u5019\u771f\u6b63\u662f\u62a5\u8b66\uff0c\u6b64\u65f6\u5fc5\u987b\u4ecb\u5165\u5904\u7406\u4e86(\u6bd4\u5982\u6269\u5bb9\u3001\u6bd4\u5982\u6392\u67e5\u539f\u56e0).","title":"2.1 \u600e\u4e48\u505a\u52301\u5206\u949f\u53d1\u73b0\u95ee\u9898?"},{"location":"chapter_2/12_monitor_and_alert/#3-prometheus-pullpush","text":"","title":"3 Prometheus pull\u6a21\u5f0f\u548c\u4f20\u7edf\u76d1\u63a7\u5de5\u5177\u7684push\u6a21\u5f0f\u603b\u7ed3"},{"location":"chapter_2/12_monitor_and_alert/#31","text":"1 pull\u6a21\u5f0f\u8ba9server\u7aef\u53d8\u6210\u65e0\u72b6\u6001,\u53ef\u4ee5\u65b9\u4fbf\u7684\u6a2a\u5411\u6269\u5bb9\u3001\u5728\u591a\u4e2a\u5730\u65b9(\u6bd4\u5982\u4f60\u672c\u5730)\u90e8\u7f72server\u7aef. 2 pull\u6a21\u5f0f\u66f4\u52a0\u9002\u914d\u4e91\u539f\u751f\u73af\u5883\uff0c\u56e0\u4e3a\u88ab\u76d1\u63a7\u7684\u4e3b\u673a\u3001\u5bb9\u5668\u90fd\u662f\u6309\u9700\u4f7f\u7528\u3001\u52a8\u6001\u6269\u7f29\u5bb9\u7684, \u5982\u679c\u6ca1\u6709","title":"3.1 \u4f18\u70b9"},{"location":"chapter_2/12_monitor_and_alert/#32","text":"1 \u88ab\u76d1\u63a7\u7684\u4e3b\u673a\u3001\u5bb9\u5668\u90fd\u9700\u8981\u63d0\u4f9bExporter 2 \u5b9e\u65f6\u6027\u4e0d\u5982push\u6a21\u5f0f\u597d","title":"3.2 \u7f3a\u70b9"},{"location":"chapter_2/13_classic_thinkings/","text":"","title":"\u7b2c\u5341\u4e09\u7bc7 \u7ecf\u5178\u601d\u7ef4"},{"location":"chapter_2/14_performance_optimization_topic/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3\u6027\u80fd\u4f18\u5316\u65b9\u5411\u7684\u6848\u4f8b\u548c\u7ecf\u9a8c \u7cfb\u7edf\u7ea7\u6027\u80fd\u4f18\u5316 \u7cfb\u7edf\u7ea7\u6027\u80fd\u4f18\u5316\u662f\u6307\u4e3a\u4e86\u63d0\u9ad8\u5e94\u7528\u7a0b\u5e8f\u5bf9\u64cd\u4f5c\u7cfb\u7edf\u8d44\u6e90\u4e0e\u786c\u4ef6\u8d44\u6e90\u7684\u4f7f\u7528\u6548\u7387\uff0c\u6216\u8005\u4e3a\u4e86\u63d0\u9ad8\u64cd\u4f5c\u7cfb\u7edf\u5bf9\u786c\u4ef6\u8d44\u6e90\u7684\u4f7f\u7528\u6548\u7387\u800c\u8fdb\u884c\u7684\u4ee3\u7801\u4f18\u5316\u3002 \u901a\u8fc7\u63d0\u9ad8\u5bf9\u64cd\u4f5c\u7cfb\u7edf\u8d44\u6e90\u4e0e\u786c\u4ef6\u8d44\u6e90\u7684\u5229\u7528\u7387\uff0c\u4f7f\u5f97\u5e94\u7528\u7a0b\u5e8f\u4e0e\u57fa\u7840\u8f6f\u786c\u4ef6\u5e73\u53f0\u5177\u6709\u66f4\u597d\u7684\u4ea4\u4e92\u6027\uff0c\u5f80\u5f80\u53ef\u4ee5\u663e\u8457\u63d0\u5347\u5e94\u7528\u7a0b\u5e8f\u7684\u6267\u884c\u901f\u5ea6\u548c\u7a33\u5b9a\u6027\u3002 \u7cfb\u7edf\u7ea7\u6027\u80fd\u4f18\u5316 \u901a\u5e38\u5305\u62ec 2 \u4e2a\u9636\u6bb5\uff0c\u5206\u522b\u662f \u6027\u80fd\u5256\u6790(performance profiling) \u548c \u4ee3\u7801\u4f18\u5316 \u3002 \u6027\u80fd\u5256\u6790\u9636\u6bb5 \u7684\u76ee\u6807\u662f\u5bfb\u627e\u6027\u80fd\u74f6\u9888\uff0c\u67e5\u627e\u5f15\u53d1\u6027\u80fd\u95ee\u9898\u7684\u539f\u56e0\u53ca\u70ed\u70b9\u4ee3\u7801\u3002 \u4ee3\u7801\u4f18\u5316\u9636\u6bb5 \u7684\u76ee\u6807\u662f\u9488\u5bf9\u5177\u4f53\u7684\u6027\u80fd\u95ee\u9898\u800c\u4f18\u5316\u4ee3\u7801\u4e0e\u7f16\u8bd1\u9009\u9879\uff0c\u4ee5\u6539\u5584\u8f6f\u4ef6\u6027\u80fd\u3002","title":"\u7b2c\u5341\u56db\u7bc7 \u6027\u80fd\u4f18\u5316\u4e13\u9898"},{"location":"chapter_2/14_performance_optimization_topic/#_1","text":"\u672c\u7bc7\u603b\u7ed3\u6027\u80fd\u4f18\u5316\u65b9\u5411\u7684\u6848\u4f8b\u548c\u7ecf\u9a8c","title":"\u6982\u8ff0"},{"location":"chapter_2/14_performance_optimization_topic/#_2","text":"\u7cfb\u7edf\u7ea7\u6027\u80fd\u4f18\u5316\u662f\u6307\u4e3a\u4e86\u63d0\u9ad8\u5e94\u7528\u7a0b\u5e8f\u5bf9\u64cd\u4f5c\u7cfb\u7edf\u8d44\u6e90\u4e0e\u786c\u4ef6\u8d44\u6e90\u7684\u4f7f\u7528\u6548\u7387\uff0c\u6216\u8005\u4e3a\u4e86\u63d0\u9ad8\u64cd\u4f5c\u7cfb\u7edf\u5bf9\u786c\u4ef6\u8d44\u6e90\u7684\u4f7f\u7528\u6548\u7387\u800c\u8fdb\u884c\u7684\u4ee3\u7801\u4f18\u5316\u3002 \u901a\u8fc7\u63d0\u9ad8\u5bf9\u64cd\u4f5c\u7cfb\u7edf\u8d44\u6e90\u4e0e\u786c\u4ef6\u8d44\u6e90\u7684\u5229\u7528\u7387\uff0c\u4f7f\u5f97\u5e94\u7528\u7a0b\u5e8f\u4e0e\u57fa\u7840\u8f6f\u786c\u4ef6\u5e73\u53f0\u5177\u6709\u66f4\u597d\u7684\u4ea4\u4e92\u6027\uff0c\u5f80\u5f80\u53ef\u4ee5\u663e\u8457\u63d0\u5347\u5e94\u7528\u7a0b\u5e8f\u7684\u6267\u884c\u901f\u5ea6\u548c\u7a33\u5b9a\u6027\u3002 \u7cfb\u7edf\u7ea7\u6027\u80fd\u4f18\u5316 \u901a\u5e38\u5305\u62ec 2 \u4e2a\u9636\u6bb5\uff0c\u5206\u522b\u662f \u6027\u80fd\u5256\u6790(performance profiling) \u548c \u4ee3\u7801\u4f18\u5316 \u3002 \u6027\u80fd\u5256\u6790\u9636\u6bb5 \u7684\u76ee\u6807\u662f\u5bfb\u627e\u6027\u80fd\u74f6\u9888\uff0c\u67e5\u627e\u5f15\u53d1\u6027\u80fd\u95ee\u9898\u7684\u539f\u56e0\u53ca\u70ed\u70b9\u4ee3\u7801\u3002 \u4ee3\u7801\u4f18\u5316\u9636\u6bb5 \u7684\u76ee\u6807\u662f\u9488\u5bf9\u5177\u4f53\u7684\u6027\u80fd\u95ee\u9898\u800c\u4f18\u5316\u4ee3\u7801\u4e0e\u7f16\u8bd1\u9009\u9879\uff0c\u4ee5\u6539\u5584\u8f6f\u4ef6\u6027\u80fd\u3002","title":"\u7cfb\u7edf\u7ea7\u6027\u80fd\u4f18\u5316"},{"location":"chapter_2/9_changkanchangxin/","text":"\u6982\u8ff0 \u672c\u7bc7\u641c\u96c6\u4e00\u4e9b\u5e38\u770b\u5e38\u65b0\u7684\u6587\u7ae0 \u4e00 \u597d\u6587\u5217\u8868 \u5982\u4f55\u505a\u597d\u4e00\u540d\u7a33\u5b9a\u6027 SRE \u6ca1\u6709 SLO \u5c31\u6ca1\u6709 SRE\uff1f\u6765\u770b\u770b B \u7ad9 SRE \u5bf9 SLO \u7684\u5b9e\u8df5\u603b\u7ed3 \u8fd9\u662f\u963f\u91cc\u6280\u672f\u4e13\u5bb6\u5bf9 SRE \u548c\u7a33\u5b9a\u6027\u4fdd\u969c\u7684\u7406\u89e3 SRE \u5b9e\u8df5 SRE \u4f53\u7cfb\u53ca\u7a33\u5b9a\u6027\u5efa\u8bbe \u4e00\u4e2a\u8fd0\u7ef4\u8001\u5c06\u7684\u81ea\u6211\u4fee\u517b \u8fd0\u7ef4\u7684\u4ef7\u503c\u548c\u76ee\u6807\u62c6\u89e3 SRE \u7cfb\u5217\u6559\u7a0b | \u5b59\u5b87\u806a\uff1a\u6765\u81ea Google \u7684 DevOps \u7406\u5ff5\u53ca\u5b9e\u8df5 \u6d45\u8c08\u8fd0\u7ef4\u5e73\u53f0\u7684\u7406\u5ff5 \u7a33\u5b9a\u6027\u4e4b\u6545\u969c\u5e94\u6025\u5904\u7406\u6d41\u7a0b \u8fd0\u7ef4\u81ea\u52a8\u5316\u95ed\u73af\uff0c\u4ece\u817e\u8baf\u8d70\u51fa\u6765\u7684\u5b9e\u8df5 \u8c08\u8c08\u6280\u672f\u80fd\u529b \u6211\u5728\u7f8e\u56e2\u7684\u516b\u5e74 \u4e8c \u5de5\u5177\u7c7b\u597d\u6587 \u5982\u4f55\u753b\u4e00\u624b\u597d\u67b6\u6784\u56fe","title":"\u7b2c\u4e5d\u7bc7 \u5e38\u770b\u5e38\u65b0"},{"location":"chapter_2/9_changkanchangxin/#_1","text":"\u672c\u7bc7\u641c\u96c6\u4e00\u4e9b\u5e38\u770b\u5e38\u65b0\u7684\u6587\u7ae0","title":"\u6982\u8ff0"},{"location":"chapter_2/9_changkanchangxin/#_2","text":"\u5982\u4f55\u505a\u597d\u4e00\u540d\u7a33\u5b9a\u6027 SRE \u6ca1\u6709 SLO \u5c31\u6ca1\u6709 SRE\uff1f\u6765\u770b\u770b B \u7ad9 SRE \u5bf9 SLO \u7684\u5b9e\u8df5\u603b\u7ed3 \u8fd9\u662f\u963f\u91cc\u6280\u672f\u4e13\u5bb6\u5bf9 SRE \u548c\u7a33\u5b9a\u6027\u4fdd\u969c\u7684\u7406\u89e3 SRE \u5b9e\u8df5 SRE \u4f53\u7cfb\u53ca\u7a33\u5b9a\u6027\u5efa\u8bbe \u4e00\u4e2a\u8fd0\u7ef4\u8001\u5c06\u7684\u81ea\u6211\u4fee\u517b \u8fd0\u7ef4\u7684\u4ef7\u503c\u548c\u76ee\u6807\u62c6\u89e3 SRE \u7cfb\u5217\u6559\u7a0b | \u5b59\u5b87\u806a\uff1a\u6765\u81ea Google \u7684 DevOps \u7406\u5ff5\u53ca\u5b9e\u8df5 \u6d45\u8c08\u8fd0\u7ef4\u5e73\u53f0\u7684\u7406\u5ff5 \u7a33\u5b9a\u6027\u4e4b\u6545\u969c\u5e94\u6025\u5904\u7406\u6d41\u7a0b \u8fd0\u7ef4\u81ea\u52a8\u5316\u95ed\u73af\uff0c\u4ece\u817e\u8baf\u8d70\u51fa\u6765\u7684\u5b9e\u8df5 \u8c08\u8c08\u6280\u672f\u80fd\u529b \u6211\u5728\u7f8e\u56e2\u7684\u516b\u5e74","title":"\u4e00 \u597d\u6587\u5217\u8868"},{"location":"chapter_2/9_changkanchangxin/#_3","text":"\u5982\u4f55\u753b\u4e00\u624b\u597d\u67b6\u6784\u56fe","title":"\u4e8c \u5de5\u5177\u7c7b\u597d\u6587"},{"location":"chapter_2/biangengguanli/","text":"\u6982\u8ff0 \u53d8\u66f4\u7ba1\u7406\u7684\u76ee\u6807: \u8ba9\u4efb\u4f55\u4e00\u4e2a\u53d8\u66f4\u90fd\u53ef\u4ee5\u5b89\u5168\u7684\u843d\u5730\u5230\u751f\u4ea7\u73af\u5883\u4e2d. \u53d8\u66f4\u7ba1\u7406\u603b\u7ed3 \u53d8\u66f4\u6d41\u7a0b\u6846\u67b6 \u53d8\u66f4\u5355review\u7684\u603b\u7ed3 \u786e\u8ba4\u53d8\u66f4\u6b65\u9aa4\u6d41\u7a0b\u662f\u5426\u5408\u7406(\u54ea\u4e9b\u53ef\u4ee5\u63d0\u524d\u505a\u3001\u54ea\u4e9b\u53ef\u4ee5\u5e76\u884c\u505a) \u53d8\u66f4\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u7684\u5de5\u5177\uff08curl\u3001websocat\u3001dig\u3001polysh\u7b49\uff09\u662f\u5426\u5408\u7406 \u786e\u8ba4\u6bcf\u4e2a\u53d8\u66f4\u6b65\u9aa4\u4fe1\u606f\u662f\u5426\u9f50\u5168 \u5173\u952e\u64cd\u4f5c \u524d\u540e\u662f\u5426\u6709 \u68c0\u67e5\u6821\u9a8c \uff1a\u6821\u9a8c\u53d8\u66f4\u524d\u540e\u670d\u52a1\u662f\u5426\u6b63\u5e38\u3001\u53d8\u66f4\u662f\u5426\u6210\u529f \u56de\u6eda\u65b9\u6848\u662f\u5426\u53ef\u884c\uff0c\u56de\u6eda\u65b9\u6848\u9884\u8ba1\u8017\u65f6\u591a\u4e45\uff0c\u662f\u5426\u4f1a\u5b58\u5728\u56de\u6eda\u5931\u8d25\u60c5\u51b5","title":"\u7b2c\u4e94\u7bc7 \u53d8\u66f4\u7ba1\u7406\u6982\u8ff0"},{"location":"chapter_2/biangengguanli/#_1","text":"\u53d8\u66f4\u7ba1\u7406\u7684\u76ee\u6807: \u8ba9\u4efb\u4f55\u4e00\u4e2a\u53d8\u66f4\u90fd\u53ef\u4ee5\u5b89\u5168\u7684\u843d\u5730\u5230\u751f\u4ea7\u73af\u5883\u4e2d.","title":"\u6982\u8ff0"},{"location":"chapter_2/biangengguanli/#_2","text":"","title":"\u53d8\u66f4\u7ba1\u7406\u603b\u7ed3"},{"location":"chapter_2/biangengguanli/#_3","text":"","title":"\u53d8\u66f4\u6d41\u7a0b\u6846\u67b6"},{"location":"chapter_2/biangengguanli/#review","text":"\u786e\u8ba4\u53d8\u66f4\u6b65\u9aa4\u6d41\u7a0b\u662f\u5426\u5408\u7406(\u54ea\u4e9b\u53ef\u4ee5\u63d0\u524d\u505a\u3001\u54ea\u4e9b\u53ef\u4ee5\u5e76\u884c\u505a) \u53d8\u66f4\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u7684\u5de5\u5177\uff08curl\u3001websocat\u3001dig\u3001polysh\u7b49\uff09\u662f\u5426\u5408\u7406 \u786e\u8ba4\u6bcf\u4e2a\u53d8\u66f4\u6b65\u9aa4\u4fe1\u606f\u662f\u5426\u9f50\u5168 \u5173\u952e\u64cd\u4f5c \u524d\u540e\u662f\u5426\u6709 \u68c0\u67e5\u6821\u9a8c \uff1a\u6821\u9a8c\u53d8\u66f4\u524d\u540e\u670d\u52a1\u662f\u5426\u6b63\u5e38\u3001\u53d8\u66f4\u662f\u5426\u6210\u529f \u56de\u6eda\u65b9\u6848\u662f\u5426\u53ef\u884c\uff0c\u56de\u6eda\u65b9\u6848\u9884\u8ba1\u8017\u65f6\u591a\u4e45\uff0c\u662f\u5426\u4f1a\u5b58\u5728\u56de\u6eda\u5931\u8d25\u60c5\u51b5","title":"\u53d8\u66f4\u5355review\u7684\u603b\u7ed3"},{"location":"chapter_2/cicd/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3\u4f20\u7edf\u6a21\u5f0f\u4e0b\u548c\u4e91\u539f\u751f\u6a21\u5f0f\u7684\u4e0bCICD\u6d41\u7a0b 1 \u4f20\u7edf\u6a21\u5f0f\u4e0b\u7684CICD\u6d41\u7a0b 2 \u4e91\u539f\u751f\u6a21\u5f0f\u4e0b\u7684CICD\u6d41\u7a0b 3 \u4e3a\u4ec0\u4e48\u8981\u4ece\u4f20\u7edf\u6a21\u5f0f\u8fc1\u79fb\u5230\u4e91\u539f\u751f\u6a21\u5f0f Docker\u89e3\u51b3\u4e86\u8de8\u8d8a \u5f00\u53d1\u73af\u5883 \u3001 \u6d4b\u8bd5\u73af\u5883 \u3001 \u751f\u4ea7\u73af\u5883 \u7684\u73af\u5883\u4e00\u81f4\u6027\u95ee\u9898. Kubernetes\u63d0\u4f9b\u4e86\u4e1a\u754c\u7edf\u4e00\u7684(\u800c\u4e0d\u662f\u6bcf\u5bb6\u516c\u53f8\u81ea\u7814)\u7684Pod\u5065\u5eb7\u72b6\u6001\u76d1\u63a7\u3001\u5f02\u5e38\u72b6\u6001\u81ea\u52a8\u5904\u7406\u3001\u59cb\u7ec8\u4fdd\u6301\u7b26\u5408\u9884\u671f\u7684Pod\u6570\u91cf\u8fd0\u884c. Kubernetes\u63d0\u4f9b\u4e86\u4e1a\u754c\u7edf\u4e00\u7684(\u800c\u4e0d\u662f\u6bcf\u5bb6\u516c\u53f8\u81ea\u7814)\u7684HPA(\u6c34\u5e73\u81ea\u52a8\u4f38\u7f29).","title":"\u7b2c\u516b\u7bc7 CICD\u6d41\u7a0b\u6982\u8ff0"},{"location":"chapter_2/cicd/#_1","text":"\u672c\u7bc7\u603b\u7ed3\u4f20\u7edf\u6a21\u5f0f\u4e0b\u548c\u4e91\u539f\u751f\u6a21\u5f0f\u7684\u4e0bCICD\u6d41\u7a0b","title":"\u6982\u8ff0"},{"location":"chapter_2/cicd/#1-cicd","text":"","title":"1 \u4f20\u7edf\u6a21\u5f0f\u4e0b\u7684CICD\u6d41\u7a0b"},{"location":"chapter_2/cicd/#2-cicd","text":"","title":"2 \u4e91\u539f\u751f\u6a21\u5f0f\u4e0b\u7684CICD\u6d41\u7a0b"},{"location":"chapter_2/cicd/#3","text":"Docker\u89e3\u51b3\u4e86\u8de8\u8d8a \u5f00\u53d1\u73af\u5883 \u3001 \u6d4b\u8bd5\u73af\u5883 \u3001 \u751f\u4ea7\u73af\u5883 \u7684\u73af\u5883\u4e00\u81f4\u6027\u95ee\u9898. Kubernetes\u63d0\u4f9b\u4e86\u4e1a\u754c\u7edf\u4e00\u7684(\u800c\u4e0d\u662f\u6bcf\u5bb6\u516c\u53f8\u81ea\u7814)\u7684Pod\u5065\u5eb7\u72b6\u6001\u76d1\u63a7\u3001\u5f02\u5e38\u72b6\u6001\u81ea\u52a8\u5904\u7406\u3001\u59cb\u7ec8\u4fdd\u6301\u7b26\u5408\u9884\u671f\u7684Pod\u6570\u91cf\u8fd0\u884c. Kubernetes\u63d0\u4f9b\u4e86\u4e1a\u754c\u7edf\u4e00\u7684(\u800c\u4e0d\u662f\u6bcf\u5bb6\u516c\u53f8\u81ea\u7814)\u7684HPA(\u6c34\u5e73\u81ea\u52a8\u4f38\u7f29).","title":"3 \u4e3a\u4ec0\u4e48\u8981\u4ece\u4f20\u7edf\u6a21\u5f0f\u8fc1\u79fb\u5230\u4e91\u539f\u751f\u6a21\u5f0f"},{"location":"chapter_2/guzhangguanli/","text":"\u6982\u8ff0 \u672c\u6587\u65e8\u5728\u603b\u7ed3\u591a\u5e74\u8fd0\u7ef4\u5de5\u4f5c\u4e2d\uff0c\u79ef\u7d2f\u548c\u6c89\u6dc0\u4e0b\u6765\u7684\u4e00\u4e9b\u6545\u969c\u7ba1\u7406\u7ecf\u9a8c. \u4e0a\u7ebf\u4e4b\u524d \u65b0\u7684\u9879\u76ee\u4e0a\u7ebf\u4e4b\u524d\uff0c\u6309\u7167\u73b0\u6709 \u4e0a\u7ebf\u68c0\u67e5 \u5de5\u5177\uff0c\u68c0\u67e5\u6240\u6709\u522b\u7684\u9879\u76ee\u8e29\u8fc7\u7684\u5751\uff0c\u907f\u514d\u6389\u5165\u540c\u7c7b\u5751. \u6309\u7167\u6545\u969c\u6f14\u7ec3\u7cfb\u7edf\u51fa\u5177\u7684\u6545\u969c\u6f14\u7ec3\u6e05\u5355, \u7ed3\u5408\u4e1a\u52a1\u81ea\u8eab\u60c5\u51b5\uff0c\u5bf9\u9ad8\u9891\u7387\u6545\u969c\u8fdb\u884c\u6f14\u7ec3. \u4f8b\u5982 \u6570\u636e\u5e93\u4e3b\u4ece\u5207\u6362 \u3001 \u5355\u673a\u6302\u6389 \u3001 \u5355\u8fdb\u7a0b\u6302\u6389 \u3001 \u88abDDOS\u653b\u51fb , \u5f62\u6210\u9879\u76ee\u7684\u6545\u969c\u5904\u7406\u9884\u6848. \u4e0a\u7ebf\u4e4b\u540e \u5e73\u65f6 \u914d\u5408\u5168\u94fe\u8def\u76d1\u63a7\u7cfb\u7edf\uff0c\u505a\u597d\u7aef\u5230\u7aef\u76d1\u63a7\uff0c\u5728\u6545\u969c\u53d1\u751f\u65f6\u80fd\u591f\u505a\u52301\u30015\u300110\uff081\u5206\u949f\u53d1\u73b0\u95ee\u9898\uff0c5\u5206\u949f\u5b9a\u4f4d\u95ee\u9898\uff0c10\u5206\u949f\u89e3\u51b3\u95ee\u9898\uff09 \u5b9a\u671f\u8fdb\u884c\u6545\u969c\u6f14\u7ec3. \u6545\u969c\u53d1\u751f\u65f6 \u53d1\u751f\u6545\u969c\u65f6, \u7b2c\u4e00\u65f6\u95f4\u901a\u8fc7\u6545\u969c\u9884\u6848,\u6267\u884c \u6545\u969c\u5feb\u6062 ,\u4f7f\u5f97\u4e1a\u52a1\u5feb\u901f\u6062\u590d\u6b63\u5e38, \u800c\u4e0d\u662f\u53bb\u6392\u67e5\u6545\u969c\u6839\u56e0. \u66f4\u591a\u7ec6\u8282 \u6545\u969c\u53d1\u751f\u540e \u4e8b\u540e\u8fdb\u884c\u590d\u76d8\uff0c\u627e\u51fa\u6839\u56e0\uff0c\u7531\u4e13\u95e8\u7684\u6545\u969c\u6a2a\u5411\u5c0f\u7ec4\u8ddf\u8fdbAction\u843d\u5730\uff0c\u9664\u4e86 \u672c\u4ea7\u54c1/\u672c\u4e1a\u52a1\u7ebf \u6539\u8fdb, \u8fd8\u8981\u5305\u62ec: \u540c\u7c7b\u95ee\u9898 \u5168\u4e1a\u52a1\u7ebf \u5f7b\u67e5\uff0c\u907f\u514d\u540c\u7c7b\u95ee\u9898\u518d\u6b21\u53d1\u751f. \u6301\u7eed\u8fed\u4ee3 \u4e0a\u7ebf\u68c0\u67e5 \u5de5\u5177. \u6545\u969c\u5956\u60e9\u5236\u5ea6(\u7ea2\u9ed1\u699c)\uff0c\u5b9a\u671f(\u6bd4\u5982\u6bcf\u534a\u5e74)\u7edf\u8ba1\u6545\u969c\u6b21\u6570\u6700\u591a(\u6bd4\u5982Top3)\u7684\u4e1a\u52a1\u7ebf\u3001\u8d23\u4efb\u4eba, \u5168\u516c\u53f8\u901a\u62a5\u6279\u8bc4\uff0c\u548c\u7ee9\u6548\u6302\u94a9. \u5b9a\u671f(\u6bd4\u5982\u6bcf\u534a\u5e74)\u7edf\u8ba1\u6545\u969c\u6b21\u6570\u6700\u5c11(\u901a\u5e38\u662f0\u6b21)\u7684\u4e1a\u52a1\u7ebf\u3001SRE\u5c0f\u7ec4,\u5168\u516c\u53f8\u8868\u626c\u5956\u52b1. \u7a33\u5b9a\u6027\u5efa\u8bbe\u5168\u666f\u56fe \u4ec0\u4e48\u662f MTTR ? MTTR \u5c31\u662f Mean Time To Repair \u7684\u7f29\u5199\uff0c\u540d\u4e3a \u5e73\u5747\u4fee\u590d\u65f6\u95f4\uff0c\u5b83\u662f\u6307\u4fee\u590d\u7cfb\u7edf\u5e76\u5c06\u5176\u6062\u590d\u5230\u5b8c\u6574\u529f\u80fd\u6240\u9700\u7684\u65f6\u95f4\u91cf\u3002 \u4fee\u590d\u5f00\u59cb\u65f6\uff0cMTTR\u65f6\u949f\u5f00\u59cb\u6ef4\u7b54\u4f5c\u54cd\uff0c\u76f4\u5230\u6062\u590d\u64cd\u4f5c\u4e3a\u6b62\u3002\u8fd9\u5305\u62ec\u4fee\u590d\u65f6\u95f4\u3001\u6d4b\u8bd5\u65f6\u95f4\u548c\u6062\u590d\u6b63\u5e38\u5de5\u4f5c\u72b6\u6001\u6240\u9700\u8981\u7684\u65f6\u95f4\u5468\u671f\u3002 1 \u5982\u4f55\u8ba1\u7b97 MTTR ? \u8981\u8ba1\u7b97MTTR\uff0c\u5c31\u662f\u5c06\u603b\u7ef4\u62a4\u65f6\u95f4\u9664\u4ee5\u7ed9\u5b9a\u65f6\u95f4\u6bb5\u5185\u7ef4\u62a4\u64cd\u4f5c\u7684\u603b\u6570\u3002 \u60f3\u8c61\u4e00\u4e0b\uff0c\u4e00\u4e2a\u6c34\u6cf5\u5728\u4e00\u4e2a\u5de5\u4f5c\u65e5\u5185\u51fa\u73b0\u4e09\u6b21\u6545\u969c\u3002\u4fee\u590d\u6bcf\u4e00\u4e2a\u6545\u969c\u6240\u82b1\u7684\u65f6\u95f4\u603b\u5171\u662f\u4e00\u4e2a\u5c0f\u65f6\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cMTTR \u5c06\u4e3a 1\u5c0f\u65f6/3 = 20\u5206\u949f\u3002 \u9700\u8981\u6ce8\u610f\u7684\u51e0\u70b9\uff1a \u901a\u5e38\uff0c\u6bcf\u4e2a\u5931\u8d25\u5b9e\u4f8b\u7684\u4e25\u91cd\u6027\u90fd\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u56e0\u6b64\uff0c\u867d\u7136\u6709\u4e9b\u4e8b\u6545\u9700\u8981\u51e0\u5929\u65f6\u95f4\u624d\u80fd\u4fee\u590d\uff0c\u4f46\u5176\u4ed6\u4e8b\u6545\u53ef\u80fd\u53ea\u9700\u8981\u51e0\u5206\u949f\u5c31\u80fd\u4fee\u590d\u3002\u56e0\u6b64\uff0cMTTR\u7ed9\u51fa\u4e86\u671f\u671b\u503c\u7684\u5e73\u5747\u503c\u3002 \u4e3a\u4e86\u83b7\u5f97\u53ef\u9760\u7684\u7ed3\u679c\uff0c\u6bcf\u6b21\u7ef4\u4fee\u90fd\u5fc5\u987b\u7531\u7ecf\u8fc7\u57f9\u8bad\u7684\u5408\u683c\u4eba\u5458\u8fdb\u884c\uff0c\u8fd9\u4e9b\u4eba\u5458\u5fc5\u987b\u9075\u5faa\u660e\u786e\u7684\u7a0b\u5e8f\u3002 \u6bcf\u4e00\u4e2a\u9ad8\u6548\u7684\u7ef4\u62a4\u7cfb\u7edf\u90fd\u9700\u8981\u7814\u7a76\u5982\u4f55\u5c3d\u53ef\u80fd\u5730\u964d\u4f4eMTTR\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u51e0\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u3002 \u4e00\u79cd\u65b9\u6cd5\u662f\u901a\u8fc7\u8ddf\u8e2a\u5907\u4ef6\u548c\u5e93\u5b58\u6c34\u5e73\uff08\u4ece\u800c\u5728\u91c7\u8d2d\u96f6\u4ef6\u65f6\u8282\u7701\u505c\u673a\u65f6\u95f4\uff09\u3002 \u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u5b9e\u65bd\u524d\u77bb\u6027\u7ef4\u62a4\u7b56\u7565\uff0c\u5982\u9884\u6d4b\u6027\u7ef4\u62a4\u3002\u9884\u6d4b\u6027\u7ef4\u62a4\uff08PdM\uff09\u5c06\u4f7f\u60a8\u80fd\u591f\u66f4\u597d\u5730\u76d1\u6d4b\u5728\u5f79\u8bbe\u5907\u7684\u72b6\u51b5\uff0c\u5e76\u901a\u8fc7\u4f7f\u7528\u76f4\u63a5\u5b89\u88c5\u5728\u5bb9\u6613\u53d1\u751f\u6545\u969c\u7684\u90e8\u4ef6\u4e0a\u7684\u72b6\u6001\u76d1\u6d4b\u4f20\u611f\u5668\u66f4\u51c6\u786e\u5730\u9884\u6d4b\u6f5c\u5728\u6545\u969c\u3002 \u8fd9\u4e9b\u4f20\u611f\u5668\u53ef\u4ee5\u63d0\u524d\u63d0\u9192\u4ed6\u4eec\u4ec0\u4e48\u65f6\u5019\u4f1a\u53d1\u751f\u6545\u969c\u3002\u6b64\u65f6\uff0c\u4fee\u590d\u4e0d\u518d\u662f\u88ab\u52a8\u7684\uff0c\u800c\u662f\u9884\u6d4b\u6027\u7684\uff0c\u56e0\u4e3a\u7ecf\u7406\u6709\u8db3\u591f\u7684\u65f6\u95f4\u5b89\u6392\u6267\u884c\u4f5c\u4e1a\u6240\u9700\u7684\u6240\u6709\u8d44\u6e90\u3002 2 \u4e3a\u4ec0\u4e48 MTTR \u6709\u7528\uff1f \u82b1\u8d39\u592a\u957f\u65f6\u95f4\u6765\u4fee\u590d\u7cfb\u7edf\u6216\u8bbe\u5907\u662f\u4e0d\u53ef\u53d6\u7684\uff0c\u56e0\u4e3a\u5b83\u4f1a\u5bf9\u4e1a\u52a1\u7ed3\u679c\u4ea7\u751f\u975e\u5e38\u4e0d\u6109\u5feb\u7684\u5f71\u54cd\u3002\u5bf9\u4e8e\u90a3\u4e9b\u5bf9\u5931\u8d25\u7279\u522b\u654f\u611f\u7684\u670d\u52a1\u6765\u8bf4\uff0c\u60c5\u51b5\u5c24\u5176\u5982\u6b64\u3002\u5b83\u5e38\u5e38\u5bfc\u81f4\u751f\u4ea7\u73af\u5883\u505c\u5de5\u3001\u6536\u5165\u635f\u5931\u7b49\u7b49\u3002 \u4e86\u89e3 MTTR \u5bf9\u4e8e\u4efb\u4f55\u7ec4\u7ec7\u6765\u8bf4\u90fd\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u5de5\u5177\uff0c\u56e0\u4e3a\u5b83\u544a\u8bc9\u4f60\u5982\u4f55\u6709\u6548\u5730\u54cd\u5e94\u548c\u4fee\u590d\u751f\u4ea7\u4e2d\u7684\u95ee\u9898\u3002\u5927\u591a\u6570\u7ec4\u7ec7\u90fd\u5e0c\u671b\u901a\u8fc7\u5185\u90e8\u7ef4\u62a4\u56e2\u961f\uff08\u7531\u5fc5\u8981\u7684\u8d44\u6e90\u3001\u5de5\u5177\u53ca\u8f6f\u4ef6\u652f\u6301\uff09\u6765\u964d\u4f4e MTTR\u3002","title":"\u7b2c\u56db\u7bc7 \u6545\u969c\u7ba1\u7406\u6982\u8ff0"},{"location":"chapter_2/guzhangguanli/#_1","text":"\u672c\u6587\u65e8\u5728\u603b\u7ed3\u591a\u5e74\u8fd0\u7ef4\u5de5\u4f5c\u4e2d\uff0c\u79ef\u7d2f\u548c\u6c89\u6dc0\u4e0b\u6765\u7684\u4e00\u4e9b\u6545\u969c\u7ba1\u7406\u7ecf\u9a8c.","title":"\u6982\u8ff0"},{"location":"chapter_2/guzhangguanli/#_2","text":"\u65b0\u7684\u9879\u76ee\u4e0a\u7ebf\u4e4b\u524d\uff0c\u6309\u7167\u73b0\u6709 \u4e0a\u7ebf\u68c0\u67e5 \u5de5\u5177\uff0c\u68c0\u67e5\u6240\u6709\u522b\u7684\u9879\u76ee\u8e29\u8fc7\u7684\u5751\uff0c\u907f\u514d\u6389\u5165\u540c\u7c7b\u5751. \u6309\u7167\u6545\u969c\u6f14\u7ec3\u7cfb\u7edf\u51fa\u5177\u7684\u6545\u969c\u6f14\u7ec3\u6e05\u5355, \u7ed3\u5408\u4e1a\u52a1\u81ea\u8eab\u60c5\u51b5\uff0c\u5bf9\u9ad8\u9891\u7387\u6545\u969c\u8fdb\u884c\u6f14\u7ec3. \u4f8b\u5982 \u6570\u636e\u5e93\u4e3b\u4ece\u5207\u6362 \u3001 \u5355\u673a\u6302\u6389 \u3001 \u5355\u8fdb\u7a0b\u6302\u6389 \u3001 \u88abDDOS\u653b\u51fb , \u5f62\u6210\u9879\u76ee\u7684\u6545\u969c\u5904\u7406\u9884\u6848.","title":"\u4e0a\u7ebf\u4e4b\u524d"},{"location":"chapter_2/guzhangguanli/#_3","text":"","title":"\u4e0a\u7ebf\u4e4b\u540e"},{"location":"chapter_2/guzhangguanli/#_4","text":"\u914d\u5408\u5168\u94fe\u8def\u76d1\u63a7\u7cfb\u7edf\uff0c\u505a\u597d\u7aef\u5230\u7aef\u76d1\u63a7\uff0c\u5728\u6545\u969c\u53d1\u751f\u65f6\u80fd\u591f\u505a\u52301\u30015\u300110\uff081\u5206\u949f\u53d1\u73b0\u95ee\u9898\uff0c5\u5206\u949f\u5b9a\u4f4d\u95ee\u9898\uff0c10\u5206\u949f\u89e3\u51b3\u95ee\u9898\uff09 \u5b9a\u671f\u8fdb\u884c\u6545\u969c\u6f14\u7ec3.","title":"\u5e73\u65f6"},{"location":"chapter_2/guzhangguanli/#_5","text":"\u53d1\u751f\u6545\u969c\u65f6, \u7b2c\u4e00\u65f6\u95f4\u901a\u8fc7\u6545\u969c\u9884\u6848,\u6267\u884c \u6545\u969c\u5feb\u6062 ,\u4f7f\u5f97\u4e1a\u52a1\u5feb\u901f\u6062\u590d\u6b63\u5e38, \u800c\u4e0d\u662f\u53bb\u6392\u67e5\u6545\u969c\u6839\u56e0. \u66f4\u591a\u7ec6\u8282","title":"\u6545\u969c\u53d1\u751f\u65f6"},{"location":"chapter_2/guzhangguanli/#_6","text":"\u4e8b\u540e\u8fdb\u884c\u590d\u76d8\uff0c\u627e\u51fa\u6839\u56e0\uff0c\u7531\u4e13\u95e8\u7684\u6545\u969c\u6a2a\u5411\u5c0f\u7ec4\u8ddf\u8fdbAction\u843d\u5730\uff0c\u9664\u4e86 \u672c\u4ea7\u54c1/\u672c\u4e1a\u52a1\u7ebf \u6539\u8fdb, \u8fd8\u8981\u5305\u62ec: \u540c\u7c7b\u95ee\u9898 \u5168\u4e1a\u52a1\u7ebf \u5f7b\u67e5\uff0c\u907f\u514d\u540c\u7c7b\u95ee\u9898\u518d\u6b21\u53d1\u751f. \u6301\u7eed\u8fed\u4ee3 \u4e0a\u7ebf\u68c0\u67e5 \u5de5\u5177. \u6545\u969c\u5956\u60e9\u5236\u5ea6(\u7ea2\u9ed1\u699c)\uff0c\u5b9a\u671f(\u6bd4\u5982\u6bcf\u534a\u5e74)\u7edf\u8ba1\u6545\u969c\u6b21\u6570\u6700\u591a(\u6bd4\u5982Top3)\u7684\u4e1a\u52a1\u7ebf\u3001\u8d23\u4efb\u4eba, \u5168\u516c\u53f8\u901a\u62a5\u6279\u8bc4\uff0c\u548c\u7ee9\u6548\u6302\u94a9. \u5b9a\u671f(\u6bd4\u5982\u6bcf\u534a\u5e74)\u7edf\u8ba1\u6545\u969c\u6b21\u6570\u6700\u5c11(\u901a\u5e38\u662f0\u6b21)\u7684\u4e1a\u52a1\u7ebf\u3001SRE\u5c0f\u7ec4,\u5168\u516c\u53f8\u8868\u626c\u5956\u52b1.","title":"\u6545\u969c\u53d1\u751f\u540e"},{"location":"chapter_2/guzhangguanli/#_7","text":"","title":"\u7a33\u5b9a\u6027\u5efa\u8bbe\u5168\u666f\u56fe"},{"location":"chapter_2/guzhangguanli/#mttr","text":"MTTR \u5c31\u662f Mean Time To Repair \u7684\u7f29\u5199\uff0c\u540d\u4e3a \u5e73\u5747\u4fee\u590d\u65f6\u95f4\uff0c\u5b83\u662f\u6307\u4fee\u590d\u7cfb\u7edf\u5e76\u5c06\u5176\u6062\u590d\u5230\u5b8c\u6574\u529f\u80fd\u6240\u9700\u7684\u65f6\u95f4\u91cf\u3002 \u4fee\u590d\u5f00\u59cb\u65f6\uff0cMTTR\u65f6\u949f\u5f00\u59cb\u6ef4\u7b54\u4f5c\u54cd\uff0c\u76f4\u5230\u6062\u590d\u64cd\u4f5c\u4e3a\u6b62\u3002\u8fd9\u5305\u62ec\u4fee\u590d\u65f6\u95f4\u3001\u6d4b\u8bd5\u65f6\u95f4\u548c\u6062\u590d\u6b63\u5e38\u5de5\u4f5c\u72b6\u6001\u6240\u9700\u8981\u7684\u65f6\u95f4\u5468\u671f\u3002","title":"\u4ec0\u4e48\u662f MTTR ?"},{"location":"chapter_2/guzhangguanli/#1-mttr","text":"\u8981\u8ba1\u7b97MTTR\uff0c\u5c31\u662f\u5c06\u603b\u7ef4\u62a4\u65f6\u95f4\u9664\u4ee5\u7ed9\u5b9a\u65f6\u95f4\u6bb5\u5185\u7ef4\u62a4\u64cd\u4f5c\u7684\u603b\u6570\u3002 \u60f3\u8c61\u4e00\u4e0b\uff0c\u4e00\u4e2a\u6c34\u6cf5\u5728\u4e00\u4e2a\u5de5\u4f5c\u65e5\u5185\u51fa\u73b0\u4e09\u6b21\u6545\u969c\u3002\u4fee\u590d\u6bcf\u4e00\u4e2a\u6545\u969c\u6240\u82b1\u7684\u65f6\u95f4\u603b\u5171\u662f\u4e00\u4e2a\u5c0f\u65f6\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cMTTR \u5c06\u4e3a 1\u5c0f\u65f6/3 = 20\u5206\u949f\u3002 \u9700\u8981\u6ce8\u610f\u7684\u51e0\u70b9\uff1a \u901a\u5e38\uff0c\u6bcf\u4e2a\u5931\u8d25\u5b9e\u4f8b\u7684\u4e25\u91cd\u6027\u90fd\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u56e0\u6b64\uff0c\u867d\u7136\u6709\u4e9b\u4e8b\u6545\u9700\u8981\u51e0\u5929\u65f6\u95f4\u624d\u80fd\u4fee\u590d\uff0c\u4f46\u5176\u4ed6\u4e8b\u6545\u53ef\u80fd\u53ea\u9700\u8981\u51e0\u5206\u949f\u5c31\u80fd\u4fee\u590d\u3002\u56e0\u6b64\uff0cMTTR\u7ed9\u51fa\u4e86\u671f\u671b\u503c\u7684\u5e73\u5747\u503c\u3002 \u4e3a\u4e86\u83b7\u5f97\u53ef\u9760\u7684\u7ed3\u679c\uff0c\u6bcf\u6b21\u7ef4\u4fee\u90fd\u5fc5\u987b\u7531\u7ecf\u8fc7\u57f9\u8bad\u7684\u5408\u683c\u4eba\u5458\u8fdb\u884c\uff0c\u8fd9\u4e9b\u4eba\u5458\u5fc5\u987b\u9075\u5faa\u660e\u786e\u7684\u7a0b\u5e8f\u3002 \u6bcf\u4e00\u4e2a\u9ad8\u6548\u7684\u7ef4\u62a4\u7cfb\u7edf\u90fd\u9700\u8981\u7814\u7a76\u5982\u4f55\u5c3d\u53ef\u80fd\u5730\u964d\u4f4eMTTR\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u51e0\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u3002 \u4e00\u79cd\u65b9\u6cd5\u662f\u901a\u8fc7\u8ddf\u8e2a\u5907\u4ef6\u548c\u5e93\u5b58\u6c34\u5e73\uff08\u4ece\u800c\u5728\u91c7\u8d2d\u96f6\u4ef6\u65f6\u8282\u7701\u505c\u673a\u65f6\u95f4\uff09\u3002 \u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u5b9e\u65bd\u524d\u77bb\u6027\u7ef4\u62a4\u7b56\u7565\uff0c\u5982\u9884\u6d4b\u6027\u7ef4\u62a4\u3002\u9884\u6d4b\u6027\u7ef4\u62a4\uff08PdM\uff09\u5c06\u4f7f\u60a8\u80fd\u591f\u66f4\u597d\u5730\u76d1\u6d4b\u5728\u5f79\u8bbe\u5907\u7684\u72b6\u51b5\uff0c\u5e76\u901a\u8fc7\u4f7f\u7528\u76f4\u63a5\u5b89\u88c5\u5728\u5bb9\u6613\u53d1\u751f\u6545\u969c\u7684\u90e8\u4ef6\u4e0a\u7684\u72b6\u6001\u76d1\u6d4b\u4f20\u611f\u5668\u66f4\u51c6\u786e\u5730\u9884\u6d4b\u6f5c\u5728\u6545\u969c\u3002 \u8fd9\u4e9b\u4f20\u611f\u5668\u53ef\u4ee5\u63d0\u524d\u63d0\u9192\u4ed6\u4eec\u4ec0\u4e48\u65f6\u5019\u4f1a\u53d1\u751f\u6545\u969c\u3002\u6b64\u65f6\uff0c\u4fee\u590d\u4e0d\u518d\u662f\u88ab\u52a8\u7684\uff0c\u800c\u662f\u9884\u6d4b\u6027\u7684\uff0c\u56e0\u4e3a\u7ecf\u7406\u6709\u8db3\u591f\u7684\u65f6\u95f4\u5b89\u6392\u6267\u884c\u4f5c\u4e1a\u6240\u9700\u7684\u6240\u6709\u8d44\u6e90\u3002","title":"1 \u5982\u4f55\u8ba1\u7b97 MTTR ?"},{"location":"chapter_2/guzhangguanli/#2-mttr","text":"\u82b1\u8d39\u592a\u957f\u65f6\u95f4\u6765\u4fee\u590d\u7cfb\u7edf\u6216\u8bbe\u5907\u662f\u4e0d\u53ef\u53d6\u7684\uff0c\u56e0\u4e3a\u5b83\u4f1a\u5bf9\u4e1a\u52a1\u7ed3\u679c\u4ea7\u751f\u975e\u5e38\u4e0d\u6109\u5feb\u7684\u5f71\u54cd\u3002\u5bf9\u4e8e\u90a3\u4e9b\u5bf9\u5931\u8d25\u7279\u522b\u654f\u611f\u7684\u670d\u52a1\u6765\u8bf4\uff0c\u60c5\u51b5\u5c24\u5176\u5982\u6b64\u3002\u5b83\u5e38\u5e38\u5bfc\u81f4\u751f\u4ea7\u73af\u5883\u505c\u5de5\u3001\u6536\u5165\u635f\u5931\u7b49\u7b49\u3002 \u4e86\u89e3 MTTR \u5bf9\u4e8e\u4efb\u4f55\u7ec4\u7ec7\u6765\u8bf4\u90fd\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u5de5\u5177\uff0c\u56e0\u4e3a\u5b83\u544a\u8bc9\u4f60\u5982\u4f55\u6709\u6548\u5730\u54cd\u5e94\u548c\u4fee\u590d\u751f\u4ea7\u4e2d\u7684\u95ee\u9898\u3002\u5927\u591a\u6570\u7ec4\u7ec7\u90fd\u5e0c\u671b\u901a\u8fc7\u5185\u90e8\u7ef4\u62a4\u56e2\u961f\uff08\u7531\u5fc5\u8981\u7684\u8d44\u6e90\u3001\u5de5\u5177\u53ca\u8f6f\u4ef6\u652f\u6301\uff09\u6765\u964d\u4f4e MTTR\u3002","title":"2 \u4e3a\u4ec0\u4e48 MTTR \u6709\u7528\uff1f"},{"location":"chapter_2/jiagoushisiweihetezhi/","text":"\u6982\u8ff0 \u8fd9\u7bc7\u6587\u7ae0\u7684\u76ee\u6807 \u603b\u7ed3\u67b6\u6784\u5e08\u5fc5\u5907\u7684\u7279\u8d28 \u68b3\u7406\u5e38\u89c1\u7684\u67b6\u6784\u601d\u7ef4 \u68b3\u7406\u5e38\u89c1\u7684\u4e2d\u95f4\u4ef6\u6280\u672f \u67b6\u6784\u5e08\u5fc5\u5907\u7684\u7279\u8d28 \u4e00\u540d\u4f18\u79c0\u7684\u67b6\u6784\u5e08\uff0c\u5728\u8bbe\u8ba1\u7cfb\u7edf\u65f6\u9700\u8981\u6709\u4ee5\u4e0b\u8fd9 \u56db\u9879\u5173\u952e\u80fd\u529b \uff1a\u300c\u5e73\u8861\u53d6\u820d\u3001\u9884\u5224\u672a\u6765\u3001\u62bd\u8c61\u601d\u7ef4\u3001\u5bb9\u9519\u673a\u5236\u300d \u4f5c\u4e3a\u4e00\u540d\u4f18\u79c0\u7684SRE, \u5728\u8bbe\u8ba1\u6280\u672f\u65b9\u6848\u65f6\uff0c\u4e5f\u9700\u8981\u63d0\u5347\u8fd9\u56db\u9879\u5173\u952e\u80fd\u529b. \u5e73\u8861\u53d6\u820d \u4e00\u4e2a\u67b6\u6784\u672c\u8d28\u4e0a\u603b\u4f1a\u6709\u4f18\u6709\u52a3\uff0c\u5b83\u4e0d\u53ef\u80fd\u662f\u5b8c\u7f8e\u7684\u3001\u666e\u9002\u7684\uff0c\u4e5f\u4e0d\u5b58\u5728\u4e00\u4e2a\u67b6\u6784\u5728 A \u573a\u666f\u80fd\u7528\uff0c\u5728 B \u573a\u666f\u4e5f\u6700\u9002\u7528\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u5c31\u9700\u8981\u6211\u4eec\u51c6\u786e\u5224\u65ad\uff0c\u4f5c\u51fa\u53d6\u820d\u3002 \u6211\u4eec\u53ef\u4ee5\u6839\u636e\u5177\u4f53\u7684\u4e1a\u52a1\u9700\u6c42\u6765\u8c03\u6574\u67b6\u6784\uff0c\u4e5f\u5c31\u662f\u4ee5\u5f53\u524d\u7684\u4e1a\u52a1\u9700\u6c42\uff0c\u9009\u51fa\u6700\u5339\u914d\u7684\u67b6\u6784\u3002\u53e6\u5916\uff0c\u67b6\u6784\u5e08\u8fd8\u9700\u8981\u6839\u636e\u73b0\u72b6\u8861\u91cf\u597d\u9700\u6c42\u548c\u8d44\u6e90\u3001\u6548\u7387\u548c\u5b89\u5168\u3001\u65f6\u5ef6\u548c\u541e\u5410\u7b49\u7b49\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u505a\u51fa\u5224\u65ad\u3002 \u6bd4\u5982\u5bf9\u4e8e\u5728\u7ebf\u4ea4\u6613\u7cfb\u7edf\uff0c\u53ef\u80fd\u66f4\u91cd\u8981\u7684\u662f\u4fdd\u8bc1\u5b83\u7684\u4f4e\u65f6\u5ef6\uff0c\u56e0\u6b64\u5c31\u53ef\u4ee5\u727a\u7272\u4e00\u5b9a\u7684\u541e\u5410\u91cf\uff0c\u800c\u5bf9\u4e8e\u79bb\u7ebf\u7cfb\u7edf\uff0c\u541e\u5410\u91cf\u5219\u66f4\u91cd\u8981\u4e00\u4e9b\u3002 \u6ee1\u8db3\u4e1a\u52a1\u9700\u6c42\u7684\u524d\u63d0\u4e0b\uff0c\u6700\u5927\u5316ROI. \u9884\u5224\u672a\u6765 \u67b6\u6784\u5e08\u9700\u8981\u5177\u5907\u4e00\u5b9a\u7684\u672a\u6765\u7684\u9884\u5224\u80fd\u529b\uff0c\u56e0\u4e3a\u67b6\u6784\u7684\u8c03\u6574\u5468\u671f\u901a\u5e38\u6bd4\u8f83\u957f\u3002\u8fd9\u4e5f\u662f\u7a0b\u5e8f\u5458\u548c\u67b6\u6784\u5e08\u4e4b\u95f4\u4e00\u4e2a\u5f88\u5927\u7684\u533a\u522b\u6240\u5728\u3002 \u7a0b\u5e8f\u5458\u8d1f\u8d23\u4e00\u4e2a\u9879\u76ee\uff0c\u5728\u5f53\u524d\u7684\u4e92\u8054\u7f51\u5927\u80cc\u666f\u4e0b\uff0c\u9879\u76ee\u7684\u8fed\u4ee3\u5468\u671f\u975e\u5e38\u5feb\uff0c\u57fa\u672c\u4ee5\u5929\u6216\u5468\u4e3a\u5355\u4f4d\uff0c\u6700\u591a\u4e00\u4e2a\u6708\u3002\u5982\u679c\u53d1\u73b0\u4e0d\u5408\u9002\u7684\u4ee3\u7801\uff0c\u9700\u8981\u91cd\u6784\uff0c\u7a0b\u5e8f\u5458\u57fa\u672c\u4e5f\u80fd\u5728\u51e0\u5929\u6216\u51e0\u5468\u5185\u5c31\u80fd\u5b8c\u6210\u91cd\u6784\u3002 \u800c\u67b6\u6784\u7684\u8c03\u6574\u662f\u76f8\u5bf9\u6f2b\u957f\u7684\u8fc7\u7a0b\uff0c\u53ef\u80fd\u9700\u8981\u6570\u6708\uff0c\u751a\u81f3\u8981\u51e0\u5e74\u3002\u56e0\u6b64\uff0c\u5728\u8bbe\u8ba1\u67b6\u6784\u65f6\u5c31\u9700\u8981\u67b6\u6784\u5e08\u5177\u5907\u9884\u5224\u610f\u8bc6\uff0c\u5bf9\u5f88\u591a\u4e0d\u786e\u5b9a\u7684\u4e8b\u60c5\u505a\u51fa\u9884\u5224\u548c\u9009\u62e9\uff0c\u8bf8\u5982\u672a\u6765\u8bbf\u95ee\u91cf\u4f1a\u589e\u957f\u5230\u4ec0\u4e48\u91cf\u7ea7\uff0c\u4f1a\u4e0d\u4f1a\u4ea7\u751f\u65b0\u7684\u4e1a\u52a1\uff0c\u8fd9\u4e9b\u4f1a\u5bf9\u7cfb\u7edf\u4ea7\u751f\u4ec0\u4e48\u6837\u65b0\u7684\u8981\u6c42\u7b49\u7b49\u3002 \u5177\u5907\u6280\u672f\u654f\u611f\u5ea6,\u9884\u5224\u4e1a\u52a1\u672a\u6765\u8d70\u5411. \u62bd\u8c61\u601d\u7ef4 \u9664\u4e86\u61c2\u5f97\u53d6\u820d\u548c\u62e5\u6709\u9884\u5224\u610f\u8bc6\uff0c\u67b6\u6784\u5e08\u5728\u8bbe\u8ba1\u67b6\u6784\u65f6\u8fd8\u8981\u638c\u63e1\u62bd\u8c61\u7684\u65b9\u6cd5\uff0c\u4e0d\u80fd\u80e1\u5b50\u7709\u6bdb\u4e00\u628a\u6293\uff0c\u8981\u505a\u597d\u5206\u5c42\u548c\u533a\u9694\u3002 \u56e0\u4e3a\u67b6\u6784\u5e08\u9762\u5bf9\u7684\u662f\u4e00\u4e2a\u5f88\u5e9e\u5927\u7684\u7cfb\u7edf\uff0c\u4e3a\u4e86\u907f\u514d\u8fc7\u65e9\u9677\u5165\u7ec6\u8282\uff0c\u4e0d\u8981\u53bb\u770b\u5404\u4e2a\u7ec4\u4ef6\u7684\u7ec6\u8282\uff0c\u800c\u662f\u628a\u5b83\u4eec\u7684\u89d2\u8272\u5b9a\u4e49\u4e0b\u6765\u4e4b\u540e\uff0c\u518d\u5206\u5757\u6765\u601d\u8003\u3002\u800c\u5728\u770b\u6bcf\u4e2a\u5206\u5757\u65f6\uff0c\u5176\u4ed6\u5206\u5757\u90fd\u53ef\u4ee5\u89c6\u4e3a\u4e00\u4e2a\u62bd\u8c61\u7684\u6982\u5ff5\uff0c\u53e6\u5916\uff0c\u4e5f\u9700\u8981\u8003\u8651\u590d\u7528\u7684\u95ee\u9898\u3002 \u8fd9\u91cc\u5f88\u91cd\u8981\u7684\u4e00\u70b9\u5c31\u662f\u60f3\u6e05\u695a\u76ee\u6807\uff0c\u7136\u540e\u8fdb\u884c\u5206\u5c42\uff0c\u8bbe\u8ba1\u597d\u6bcf\u4e00\u5c42\u4f5c\u7528\u3001\u4e0a\u4e0b\u5c42\u4e4b\u95f4\u7684\u63a5\u53e3. \u5bb9\u9519\u673a\u5236 \u76f8\u6bd4\u7a0b\u5e8f\u5458\uff0c\u67b6\u6784\u5e08\u9762\u5bf9\u7684\u73af\u5883\u8981\u6076\u52a3\u7684\u591a\uff0c\u56e0\u4e3a\u7cfb\u7edf\u66f4\u590d\u6742\u4e86\uff0c\u51fa\u9519\u7684\u6982\u7387\u4e5f\u589e\u52a0\u4e86\uff0c\u6bcf\u4e2a\u8282\u70b9\u3001\u6bcf\u4e2a\u529f\u80fd\u90fd\u6709\u53ef\u80fd\u51fa\u9519\uff0c\u6240\u4ee5\u8fd9\u5c31\u9700\u8981\u67b6\u6784\u5e08\u4e3a\u9519\u8bef\u800c\u8bbe\u8ba1\uff08Design For Failure\uff09\uff0c\u4e8b\u5148\u63d0\u524d\u505a\u597d\u89e3\u51b3\u65b9\u6848\u3002 \u9664\u4e86\u5e94\u7528\u51fa\u9519\uff0c\u8fd8\u6709\u53ef\u80fd\u4ea7\u751f\u6570\u636e\u4e22\u5931\u7684\u60c5\u51b5\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u5907\u4efd\u6765\u9884\u9632\u3002 \u53e6\u5916\uff0c\u5982\u679c\u51fa\u73b0\u6545\u969c\uff0c\u8be5\u600e\u6837\u505a\u5230\u5feb\u901f\u6062\u590d\u5462\uff1f\u6211\u4eec\u73b0\u5728\u666e\u904d\u7684\u505a\u6cd5\u662f\u4e0d\u4fee\u53ea\u6362\uff0c\u56e0\u4e3a\u5982\u679c\u8981\u4fee\u590d\u4e00\u4e2a\u5f02\u5e38\u72b6\u6001\uff0c\u53ef\u80fd\u4fee\u590d\u540e\u8fd8\u4f1a\u51fa\u73b0\u8fde\u5e26\u95ee\u9898\uff0c\u800c\u5982\u679c\u80fd\u901a\u8fc7\u6280\u672f\u624b\u6bb5\uff0c\u5220\u9664\u5df2\u51fa\u73b0\u7684\u6545\u969c\uff0c\u6362\u4e00\u4e2a\u5168\u65b0\u7684\u7cfb\u7edf\uff0c\u5c31\u80fd\u591f\u4fdd\u8bc1\u5b83\u8fc5\u901f\u6062\u590d\u5230\u6b63\u5e38\u72b6\u6001\u3002 Design For Failure \u6545\u969c\u9884\u6848 \u4e00\u4e9b\u4f18\u79c0\u7684\u67b6\u6784\u601d\u60f3 \u4ee5\u4e0b\u662f\u4e00\u4e9b\u505a\u67b6\u6784\u8bbe\u8ba1\u65f6\u7684\u597d\u7684\u65b9\u6cd5\u8bba \u5173\u6ce8\u7aef\u5230\u7aef\u7684\u4ef7\u503c\u4ea4\u4ed8\uff0c\u6280\u672f\u56e2\u961f\u8981\u6301\u7eed\u5730\u987a\u7545\u4ea4\u4ed8\u6709\u6548\u4ef7\u503c\u7ed9\u4e1a\u52a1 \u6218\u7565\u4e0a\u85d0\u89c6\u6280\u672f\uff0c\u6218\u672f\u4e0a\u91cd\u89c6\u6280\u672f \u8bbe\u8ba1\u6280\u672f\u65b9\u6848\u65f6\uff0c\u4e00\u4e9b\u597d\u7684Idea \u4ee5\u7a7a\u95f4\u6362\u65f6\u95f4\uff0c\u727a\u7272\u5199\u6027\u80fd\u6362\u53d6\u8bfb\u6027\u80fd \u6280\u672f\u65b9\u6848\u6ce8\u91cd\u51b7\u70ed\u5206\u79bb\u7684\u601d\u8003 \u6280\u672f\u65b9\u6848\u6ce8\u91cd \u63a8\u6a21\u578b\u3001\u62c9\u6a21\u578b\u3001\u63a8\u62c9\u7ed3\u5408 \u7684\u601d\u8003 \u6545\u969c\u5904\u7406\u65f6 \u53ea\u6362\u4e0d\u4fee \u7684\u601d\u7ef4, \u76f4\u63a5\u7ed9\u7528\u6237\u6362\u4e00\u4e2a\u65b0\u7cfb\u7edf \u5e38\u7528\u7684\u4e2d\u95f4\u4ef6\u6280\u672f\u603b\u7ed3 \u4ee5\u4e0b\u662f\u67b6\u6784\u5e08\u5e38\u7528\u5230\u7684\u4e2d\u95f4\u4ef6\u6280\u672f \u5305\u62ec\u5982\u4e0b: LB\u6280\u672f \u7f13\u5b58\u6280\u672f \u7ebf\u7a0b\u6c60\u6280\u672f MQ\u6280\u672f \u6570\u636e\u5e93\u6280\u672f \u670d\u52a1\u6ce8\u518c\u548c\u53d1\u73b0\u6280\u672f \u5fae\u670d\u52a1\u548c\u670d\u52a1\u7f51\u683c\u6280\u672f \u5ba2\u6237\u7aef\u7f51\u7edc\u8d28\u91cf\u6539\u5584\u6280\u672f \u5ba2\u6237\u7aef\u7a33\u5b9a\u6027\u63d0\u5347\u6280\u672f \u5ba2\u6237\u7aef\u57cb\u70b9\u6700\u4f73\u5b9e\u8df5 LB\u6280\u672f LB\u6280\u672f\u5c5e\u4e8e\u5e38\u7528\u7684\u4e00\u9879\u4e2d\u95f4\u4ef6\u6280\u672f\uff0c\u7ecf\u5e38\u7528\u6765\u505a\u4ea7\u54c1\u7684\u6d41\u91cf\u5165\u53e3\u6216\u8005\u5185\u90e8\u670d\u52a1\u4e4b\u95f4\u4e92\u76f8\u8c03\u7528\u7684\u4e2d\u95f4\u4ef6. \u6ce8\u610f\u533a\u52064\u5c42\u53cd\u5411\u4ee3\u7406\uff0c\u8fd8\u662f7\u5c42\u53cd\u5411\u4ee3\u7406. LB\u7684\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\uff0c\u53ef\u4ee5\u53c2\u8003\u524d\u9762\u603b\u7ed3\u7684\"Nginx\u7684\u5747\u8861\u7b56\u7565\", \u5176\u4ed6\u7684\u8d1f\u8f7d\u5747\u8861\u5668\u5177\u5907\u7684\u80fd\u529b\u90fd\u975e\u5e38\u76f8\u4f3c. \u7f13\u5b58\u6280\u672f \u5de5\u7a0b\u4e0a\uff0c\u7f13\u5b58\u4e00\u822c\u6709\u51e0\u79cd\u4f7f\u7528\u65b9\u5f0f\uff1f \uff081\uff09\u8fdb\u7a0b\u5185\u7f13\u5b58\uff1b \uff082\uff09\u8fdb\u7a0b\u5916\u7f13\u5b58\uff0c\u4e5f\u5c31\u662f\u7f13\u5b58\u670d\u52a1\uff1b \u5982\u679c\u6709\u591a\u4e2a\u670d\u52a1\u4f7f\u7528\u8fdb\u7a0b\u5185\u7f13\u5b58\uff0c\u5982\u4f55\u4fdd\u8bc1\u4e00\u81f4\u6027\uff1f \u5e38\u89c1\u7684\u6709\u4e09\u79cd\u65b9\u6cd5\uff1a \u670d\u52a1\u8282\u70b9\u540c\u6b65\u901a\u77e5\uff1b MQ\u5f02\u6b65\u901a\u77e5\uff1b \u727a\u7272\u5c11\u91cf\u4e00\u81f4\u6027\uff0c\u5b9a\u671f\u540e\u7aef\u66f4\u65b0\uff1b \u7edd\u5927\u90e8\u5206\u60c5\u51b5\uff0c\u8fd8\u662f\u5e94\u8be5\u4f7f\u7528\u7f13\u5b58\u670d\u52a1(\u4f8b\u5982Redis). \u7f13\u5b58\u670d\u52a1\u7684\u4f7f\u7528\uff0c\u6709\u4ec0\u4e48\u6ce8\u610f\u70b9\uff1f \u4ee5\u4e0b\u51e0\u70b9\uff0c\u5e94\u8be5\u8981\u6ce8\u610f\uff1a \u670d\u52a1\u4e0e\u670d\u52a1\u4e4b\u95f4\u4e0d\u8981\u901a\u8fc7\u7f13\u5b58\u4f20\u9012\u6570\u636e\uff1b \u5982\u679c\u7f13\u5b58\u6302\u6389\uff0c\u53ef\u80fd\u5bfc\u81f4\u96ea\u5d29\uff0c\u6b64\u65f6\u8981\u505a\u9ad8\u53ef\u7528\u7f13\u5b58\uff0c\u6216\u8005\u6c34\u5e73\u5207\u5206\uff1b \u8c03\u7528\u65b9\u4e0d\u5b9c\u518d\u5355\u72ec\u4f7f\u7528\u7f13\u5b58\u5b58\u50a8\u670d\u52a1\u5e95\u5c42\u7684\u6570\u636e\uff0c\u5bb9\u6613\u51fa\u73b0\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u4ee5\u53ca\u53cd\u5411\u4f9d\u8d56\uff1b \u4e0d\u540c\u670d\u52a1\uff0c\u7f13\u5b58\u5b9e\u4f8b\u8981\u505a\u5782\u76f4\u62c6\u5206\uff0c\u4e0d\u5b9c\u5171\u7528\u7f13\u5b58\uff1b \u7f13\u5b58\u670d\u52a1\u7684\u6700\u4f73\u5b9e\u8df5 \u8bfb\u7f13\u5b58\u6700\u4f73\u5b9e\u8df5 \u5148\u8bfb\u7f13\u5b58\uff0c\u547d\u4e2d\u5219\u8fd4\u56de\uff1b\u672a\u547d\u4e2d\u5219\u8bfb\u6570\u636e\u5e93\uff0c\u7136\u540e\u8bbe\u7f6e\u7f13\u5b58\u3002 \u5199\u7f13\u5b58\u6700\u4f73\u5b9e\u8df5 \u6dd8\u6c70\u7f13\u5b58\uff0c\u800c\u4e0d\u662f\u4fee\u6539\u7f13\u5b58\uff1b \u5148\u64cd\u4f5c\u6570\u636e\u5e93\uff0c\u518d\u64cd\u4f5c\u7f13\u5b58\uff1b \u9ad8\u5e76\u53d1\u4e0b\u5148\u64cd\u4f5c\u6570\u636e\u5e93, \u8fd8\u662f\u5148\u64cd\u4f5c\u7f13\u5b58? \u7f13\u5b58\u7684\u672c\u8d28\u662f\u4ec0\u4e48 \u7f13\u5b58\u7684\u672c\u8d28\u662f\u201c\u5197\u4f59\u4e86\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u201d\u3002 \u53ef\u80fd\u5b58\u5728\u4ec0\u4e48\u95ee\u9898\uff1f\u7f13\u5b58\u4e0e\u6570\u636e\u5e93\u6570\u636e\u4e0d\u4e00\u81f4\u3002 \u51fa\u73b0\u4e0d\u4e00\u81f4\u65f6\uff0c\u4f18\u5316\u601d\u8def\u662f\u4ec0\u4e48\uff1f\u53ca\u65f6\u628a\u7f13\u5b58\u4e2d\u7684\u810f\u6570\u636e\u6dd8\u6c70\u6389\u3002 \u4ec0\u4e48\u65f6\u5019\u9009\u62e9\u4f18\u5148\u4f7f\u7528Redis\uff1f \uff081\uff09\u9700\u8981\u652f\u6301\u590d\u6742\u6570\u636e\u7ed3\u6784\uff1b \uff082\uff09\u9700\u8981\u652f\u6301\u6301\u4e45\u5316\uff1b \uff083\uff09\u9700\u8981\u5929\u7136\u9ad8\u53ef\u7528\uff1b \uff084\uff09value\u5b58\u50a8\u5185\u5bb9\u6bd4\u8f83\u5927\uff1b \u7ebf\u7a0b\u6c60\u6280\u672f \u8fd9\u91cc\u533a\u5206 \u8fde\u63a5\u6c60 \u548c \u7ebf\u7a0b\u6c60 , \u5176\u5b9e\u672c\u8d28\u4e0a\u90fd\u662f\u4fdd\u5b58 worker \u7684\u6c60\u5b50 \u8fde\u63a5\u6c60 \u8fde\u63a5\u6c60\u7684\u6838\u5fc3\u662f\u4ec0\u4e48\uff1f\u4e24\u4e2a\u6838\u5fc3\u6570\u636e\u7ed3\u6784\uff1a\u8fde\u63a5\u6570\u7ec4\uff0c\u9501\u6570\u636e\uff1b\u4e09\u4e2a\u6838\u5fc3\u63a5\u53e3\uff1a\u521d\u59cb\u5316\uff0c\u62ff\u51fa\u8fde\u63a5\uff0c\u653e\u56de\u8fde\u63a5\uff1b \u7ebf\u7a0b\u6c60 \u7ebf\u7a0b\u6c60\u6280\u672f \u89e3\u51b3\u7684\u95ee\u9898\u662f\uff1a \u4fdd\u6301\u4e00\u5b9a\u91cf\u7684worker\u7ebf\u7a0b\uff0c\u628a\u63d0\u4ea4\u4efb\u52a1\u548c\u6267\u884c\u4efb\u52a1\u8fdb\u884c\u89e3\u8026. \u5f53\u4efb\u52a1\u5230\u8fbe\u65f6\uff0c\u4efb\u52a1\u53ef\u4ee5\u4e0d\u9700\u8981\u7b49\u5230\u7ebf\u7a0b\u521b\u5efa\u5c31\u80fd\u7acb\u5373\u6267\u884c. \u7ebf\u7a0b\u6c60\u67097\u4e2a\u6838\u5fc3\u53c2\u6570 \u8fd9\u4e9b\u53c2\u6570\u5206\u522b\u662f int corePoolSize \uff1a\u6838\u5fc3\u7ebf\u7a0b\u6570 int maximumPoolSize \uff1a\u6700\u5927\u7ebf\u7a0b\u6570 long keepAliveTime \uff1a\u975e\u6838\u5fc3\u7ebf\u7a0b\u7684\u7a7a\u95f2\u65f6\u95f4 TimeUnit unit \uff1a\u7a7a\u95f2\u65f6\u95f4\u7684\u5355\u4f4d BlockingQueue<Runnable> workQueue \uff1a\u4efb\u52a1\u961f\u5217\uff08\u7ebf\u7a0b\u5b89\u5168\u7684\u963b\u585e\u961f\u5217\uff09 ThreadFactory threadFactory \uff1a\u7ebf\u7a0b\u5de5\u5382 RejectedExecutionHandler handler \uff1a\u62d2\u7edd\u7b56\u7565 corePoolSize : \u4e00\u5f00\u59cb\u4efb\u52a1\u6570\u5c11\u7684\u65f6\u5019\uff0c \u7ebf\u7a0b\u6570\u91cf\u4e0d\u4f1a\u4e00\u4e0b\u5b50\u5168\u5f00\u597d\uff0c\u800c\u662f\u6bcf\u5f53\u6709\u4e00\u4e2a\u65b0\u4efb\u52a1\u8fdb\u6765\uff0c\u540c\u65f6\u6ca1\u6709\u7a7a\u95f2\u7ebf\u7a0b\u65f6\uff0c\u5c31\u4f1a\u65b0\u5f00\u4e00\u4e2a\u7ebf\u7a0b, \u5982\u4f55\u521b\u5efa\u7ebf\u7a0b\u5462\uff0c\u7531 theadFactory \u65b9\u6cd5\u6307\u5b9a\u3002\u76f4\u5230\u8fbe\u5230 corePoolSize \u8fd9\u4e2a\u6570\u91cf \u5f53\u8fbe\u5230 corePoolSize \u65f6\uff0c\u5982\u679c\u8fd8\u6709\u4efb\u52a1\u4e0d\u65ad\u88ab\u63d0\u4ea4\u8fdb\u6765\uff0c\u540c\u65f6\u6ca1\u6709\u7a7a\u95f2\u7ebf\u7a0b\u53bb\u505a\u8fd9\u4e9b\u4efb\u52a1\uff0c\u90a3\u4e48\u4f1a\u88ab\u52a0\u5165\u4e00\u4e2a\u961f\u5217\uff0c workQueue \u76f4\u5230\u6709\u90a3\u4e48\u4e00\u4e2a\u65f6\u523b\uff0c workQueue \u6ee1\u4e86\uff0c\uff08\u4e3b\u8981\u662f\u79d2\u6740\u7c7b\u7684\u9ad8QPS\u4e1a\u52a1\u573a\u666f\uff09\u90a3\u4e48\u7ebf\u7a0b\u6c60\u53c8\u4f1a\u7ee7\u7eed\u52a0\u7ebf\u7a0b\u6570\u91cf\uff0c\u76f4\u5230\u52a0\u6ee1 maximumPoolSize \u5982\u679c\u52a0\u6ee1 maximumPoolSize \u8fd8\u4e0d\u591f\uff0c\u90a3\u4e48\u65b0\u6765\u7684\u4efb\u52a1\u4f1a\u88ab\u62d2\u7edd\uff0c\u62d2\u7edd\u7684\u5904\u7406\u8005\u5c31\u662f\u90a3\u4e2a handler \u5b9a\u4e49\u7684\u65b9\u6cd5. \u5982\u679c\u52a0\u6ee1\uff08\u6216\u8005\u5927\u4e8e corePoolSize \u4f46\u662f\u5c0f\u4e8e maximumPoolSize \uff09 maximumPoolSize \u8db3\u591f\u5904\u7406\u65b0\u4efb\u52a1, \u90a3\u4e48\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u4f1a\u6709\u7a7a\u95f2\u7684\u7ebf\u7a0b\u51fa\u6765\u3002 \u8fd9\u4e9b\u7ebf\u7a0b\u5c31\u79f0\u4e3a \u975e\u6838\u5fc3\u7ebf\u7a0b \uff0c \u975e\u6838\u5fc3\u7ebf\u7a0b \u7a7a\u95f2\u4e00\u6bb5\u65f6\u95f4\u540e \uff0c\uff08\u8fd9\u6bb5\u65f6\u95f4\u7531 keepAliveTime * unit \u51b3\u5b9a\uff09\uff0c\u5c31\u4f1a\u88ab\u9500\u6bc1\uff0c\u51cf\u5c11\u7cfb\u7edf\u8d44\u6e90\u6d88\u8017. \u4efb\u52a1\u63d0\u4ea4\u5230\u7ebf\u7a0b\u6c60\u7684\u6574\u4f53\u6d41\u7a0b MQ\u6280\u672f 3\u4e2a\u6838\u5fc3\u6a21\u578b \u6d88\u606f(Message) \u53d1\u5e03\u8005: (Producer) \u6d88\u8d39\u8005(\u5904\u7406\u8005): Consumer(worker) 3\u4e2a\u6838\u5fc3\u5e94\u7528\u573a\u666f \u89e3\u8026 \u4e0a\u4e0b\u6e38\u670d\u52a1\u8fdb\u884c\u9694\u79bb\uff0c\u6574\u4f53\u67b6\u6784\u66f4\u52a0\u6e05\u6670\u3001\u6574\u6d01. \u524a\u5cf0 \u5bf9\u4e8e\u77ed\u65f6\u95f4\u5185\u6781\u7aef\u6d41\u91cf\uff0c\u5bf9\u540e\u7aef\u670d\u52a1\u53ef\u4ee5\u542f\u5230\u4fdd\u62a4\u4f5c\u7528. \u5f02\u6b65 \u9488\u5bf9\u957f\u65f6\u95f4\u7684\u4efb\u52a1, \u524d\u7aef\u53ef\u4ee5\u5feb\u901f\u7ed9\u7528\u6237\u53cd\u9988\uff0c\u540e\u7aef\u53ef\u4ee5\u6162\u6162\u5904\u7406. \u6570\u636e\u5e93\u6280\u672f \u8fd9\u91cc\u4e3b\u8981\u63a2\u8ba8\u6570\u636e\u5e93\u8bbe\u8ba1\u4e0a\u4e00\u4e9b\u601d\u8003\u70b9 \u5de5\u7a0b\u4e0a\uff0c\u6570\u636e\u5e93\u8981\u8bbe\u8ba1\u4e00\u4e9b\u4ec0\u4e48\uff1f \u6839\u636e\u201c\u4e1a\u52a1\u6a21\u5f0f\u201d\u8bbe\u8ba1\u8868\u7ed3\u6784\uff1b \u6839\u636e\u201c\u8bbf\u95ee\u6a21\u5f0f\u201d\u8bbe\u8ba1\u7d22\u5f15\u7ed3\u6784\uff1b \u67b6\u6784\u4e0a\uff0c\u6570\u636e\u5e93\u8fd8\u5fc5\u987b\u8003\u8651\u4ec0\u4e48\uff1f \u8bfb\u6027\u80fd\u63d0\u5347\uff1b \u9ad8\u53ef\u7528\uff1b \u4e00\u81f4\u6027\u4fdd\u969c\uff1b \u6269\u5c55\u6027\uff1b \u5782\u76f4\u62c6\u5206\uff1b \u63d0\u5347\u7cfb\u7edf\u8bfb\u53d6\u901f\u5ea6\uff0c\u6709\u54ea\u51e0\u79cd\u5e38\u89c1\u65b9\u6cd5\uff1f \u5efa\u7acb\u7d22\u5f15\uff1b \u589e\u52a0\u4ece\u5e93\uff1b \u589e\u52a0\u7f13\u5b58 \u5982\u4f55\u4fdd\u8bc1\u6570\u636e\u5e93\u7684\u9ad8\u53ef\u7528\uff1f \u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5197\u4f59+\u6545\u969c\u81ea\u52a8\u8f6c\u79fb. \u5199\u5e93\u9ad8\u53ef\u7528\uff0c\u5197\u4f59\u5199\u5e93\uff1b \u8bfb\u5e93\u9ad8\u53ef\u7528\uff0c\u5197\u4f59\u8bfb\u5e93\uff1b \u4e3b\u4ece\u5ef6\u65f6\uff0c\u6709\u4ec0\u4e48\u4f18\u5316\u65b9\u6848\uff1f \u4e1a\u52a1\u5bb9\u5fcd\uff1b \u5f3a\u5236\u8bfb\u4e3b\uff1b \u5728\u4ece\u5e93\u6709\u53ef\u80fd\u8bfb\u5230\u65e7\u6570\u636e\u65f6\uff0c\u9009\u62e9\u6027\u8bfb\u4e3b \u670d\u52a1\u53d1\u73b0\uff08Service Discovery\uff09\u4e2d\u95f4\u4ef6 \u670d\u52a1\u53d1\u73b0\u8981\u89e3\u51b3\u7684\u662f\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u6700\u5e38\u89c1\u7684\u95ee\u9898\u4e4b\u4e00\uff0c\u5373\u5728\u540c\u4e00\u4e2a\u5206\u5e03\u5f0f\u96c6\u7fa4\u4e2d\u7684\u8fdb\u7a0b\u6216\u670d\u52a1\uff0c\u8981\u5982\u4f55\u624d\u80fd\u627e\u5230\u5bf9\u65b9\u5e76\u5efa\u7acb\u8fde\u63a5\u3002\u672c\u8d28\u4e0a\u6765\u8bf4\uff0c\u670d\u52a1\u53d1\u73b0\u5c31\u662f\u60f3\u8981\u4e86\u89e3\u96c6\u7fa4\u4e2d\u662f\u5426\u6709\u8fdb\u7a0b\u5728\u76d1\u542c udp \u6216 tcp \u7aef\u53e3\uff0c\u5e76\u4e14\u901a\u8fc7\u540d\u5b57\u5c31\u53ef\u4ee5\u67e5\u627e\u548c\u8fde\u63a5\u3002 \u89e3\u51b3\u670d\u52a1\u53d1\u73b0\u76843\u5927\u652f\u67f1 \u8981\u89e3\u51b3\u670d\u52a1\u53d1\u73b0\u7684\u95ee\u9898\uff0c\u9700\u8981\u6709\u4e0b\u9762\u4e09\u5927\u652f\u67f1\uff0c\u7f3a\u4e00\u4e0d\u53ef: \u4e00\u4e2a\u5f3a\u4e00\u81f4\u6027\u3001\u9ad8\u53ef\u7528\u7684\u670d\u52a1\u5b58\u50a8\u76ee\u5f55. \u57fa\u4e8e Raft \u7b97\u6cd5\u7684 etcd \u5929\u751f\u5c31\u662f\u8fd9\u6837\u4e00\u4e2a\u5f3a\u4e00\u81f4\u6027\u9ad8\u53ef\u7528\u7684\u670d\u52a1\u5b58\u50a8\u76ee\u5f55\u3002 \u4e00\u81f4\u6027k/v\u5b58\u50a8. \u4e00\u79cd\u6ce8\u518c\u670d\u52a1\u548c\u76d1\u63a7\u670d\u52a1\u5065\u5eb7\u72b6\u6001\u7684\u673a\u5236\u3002 \u7528\u6237\u53ef\u4ee5\u5728 etcd \u4e2d\u6ce8\u518c\u670d\u52a1\uff0c\u5e76\u4e14\u5bf9\u6ce8\u518c\u7684\u670d\u52a1\u8bbe\u7f6e key TTL\uff0c\u7136\u540e\u5b9a\u65f6\u4fdd\u6301\u670d\u52a1\u7684\u5fc3\u8df3\u4ee5\u8fbe\u5230\u76d1\u63a7\u5065\u5eb7\u72b6\u6001\u7684\u6548\u679c\u3002 \u4e00\u79cd\u67e5\u627e\u548c\u8fde\u63a5\u670d\u52a1\u7684\u673a\u5236\u3002 \u901a\u8fc7\u5728 etcd \u6307\u5b9a\u7684\u4e3b\u9898\u4e0b\u6ce8\u518c\u7684\u670d\u52a1\u4e5f\u80fd\u5728\u5bf9\u5e94\u7684\u4e3b\u9898\u4e0b\u67e5\u627e\u5230\u3002\u4e3a\u4e86\u786e\u4fdd\u8fde\u63a5\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u4e2a\u670d\u52a1\u673a\u5668\u4e0a\u90fd\u90e8\u7f72\u4e00\u4e2a Proxy \u6a21\u5f0f\u7684 etcd\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u786e\u4fdd\u80fd\u8bbf\u95ee etcd \u96c6\u7fa4\u7684\u670d\u52a1\u90fd\u80fd\u4e92\u76f8\u8fde\u63a5\u3002 \u5173\u4e8e\u81ea\u52a8\u670d\u52a1\u53d1\u73b0 \u662f\u4e0d\u9700\u8981\u4fee\u6539\u914d\u7f6e\uff0c\u5c31\u53d1\u73b0\u4e86\u670d\u52a1\uff0c\u8c03\u7528\u4e86\u670d\u52a1 \u6709\u4e00\u4e2a\u5730\u65b9\u52a8\u6001\u7684\u8bfb\u53d6\u914d\u7f6e\uff0c\u4ece\u800c\u80fd\u81ea\u52a8\u53bb\u8c03\u7528\u670d\u52a1\u3002 \u4e3e\u4e2a\u4f8b\u5b50, \u6bd4\u5982Prometheus\u8fdb\u7a0b\u6bcf5\u5206\u949f\u5468\u671f\u6027\u8bfb\u53d6\u4e00\u4e0b\u914d\u7f6e\u6587\u4ef6( /etc/prometheus/prometheus-file-sd.yml ), \u56e0\u6b64\u76f8\u5e94\u7684\u76d1\u63a7Job\u4fee\u6539\u4e4b\u540e\u65e0\u9700\u91cd\u542fPrometheus\u8fdb\u7a0b\u81ea\u52a8\u4f1a\u88ab\u53d1\u73b0. \u670d\u52a1\u4e2d\u5fc3 \u5728\u670d\u52a1\u4e2d\u5fc3\u4e2d\uff0c\u5206\u4e3a\u4e24\u79cd\uff1a \u4e00\u79cd\u662f\u540d\u79f0\u603b\u7ebf\u7cfb\u7edf\uff0c\u4e5f\u5c31\u662fA\u7cfb\u7edf\u9700\u8981\u8c03\u7528\u67d0\u4e2a\u670d\u52a1\u7684\u65f6\u5019\uff0c\u53ea\u8981\u8bf7\u6c42\u670d\u52a1\u4e2d\u5fc3\u5373\u53ef\uff0c\u670d\u52a1\u4e2d\u5fc3\u4f1a\u81ea\u5df1\u53bb\u8c03\u7528\u8fdc\u7a0b\u7684\u670d\u52a1\u7136\u540e\u5f97\u5230\u54cd\u5e94\uff0c\u6700\u540e\u7531\u670d\u52a1\u4e2d\u5fc3\u54cd\u5e94\u7ed9A\u7cfb\u7edf\u3002\uff08ESB\u4f01\u4e1a\u670d\u52a1\u603b\u7ebf\uff09 \u4e00\u79cd\u662f\u540d\u79f0\u670d\u52a1\u7cfb\u7edf\uff0c\u4e5f\u5c31\u662fA\u7cfb\u7edf\u9700\u8981\u8c03\u7528\u67d0\u4e2a\u670d\u52a1\u7684\u65f6\u5019\uff0c\u53bb\u670d\u52a1\u4e2d\u5fc3\u83b7\u53d6\u5230\u8fdc\u7a0b\u7684\u670d\u52a1ip+port\uff0c\u7136\u540eA\u7cfb\u7edf\u81ea\u5df1\u53d1\u9001\u8bf7\u6c42\u83b7\u5f97\u54cd\u5e94\uff08\u548cDNS\u7c7b\u4f3c\uff0c\u53ea\u662f\u4e3a\u4e86\u89e3\u6790\u51faIP\u548c\u7aef\u53e3) Consul\u67b6\u6784\u56fe Consul\u7684\u4f5c\u7528\u4e3b\u8981\u662f\u7ba1\u7406\u8fd9\u4e9b\u96c6\u7fa4\u670d\u52a1\u7684\u914d\u7f6e\uff0c\u6574\u4f53\u6d41\u7a0b\u662f\u8fd9\u6837\u5b50\u7684\uff1a\u670d\u52a1\uff08\u8fdb\u7a0b\uff09\u542f\u52a8\u7684\u65f6\u5019\u628a\u670d\u52a1\u540d\u548c\u81ea\u5df1\u7684IP\u3001\u7aef\u53e3\u901a\u8fc7HTTP\u544a\u8bc9\u6211\uff0c\u6211\u5c06\u8fd9\u4e9b\u4fe1\u606f\u8bb0\u5230\u81ea\u5df1\u7684\u5185\u5b58\u8868\u683c\u4e2d\uff0c\u5ba2\u6237\u7aef\u8c03\u7528\u65f6\u5e26\u4e0a\u8981\u67e5\u8be2\u7684\u670d\u52a1\u540d\u901a\u8fc7HTTP\u53d1\u9001\u7ed9\u6211\uff0c\u6211\u518d\u81ea\u5df1\u7684\u5185\u5b58\u8868\u4e2d\u627e\u5230\u53eb\u8fd9\u670d\u52a1\u540d\u7684\u6240\u6709\u914d\u7f6e\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u3002 \u5e73\u65f6\u6211\u8fd8\u8981\u505a\u4e00\u4e9b\u670d\u52a1\u5065\u5eb7\u68c0\u67e5\u7684\u4e8b\u513f\uff0c\u5728\u4e0a\u9762\u670d\u52a1\u542f\u52a8\u7684\u65f6\u5019\uff0c\u670d\u52a1\u8fd8\u8981\u7ed9\u6211\u914d\u7f6e\u4e00\u4e2a\u68c0\u67e5\u63a5\u53e3\u548c\u68c0\u67e5\u9891\u7387\u7b49\u4e00\u4e9b\u53c2\u6570\uff0c\u6211\u4f1a\u6309\u8fd9\u4e9b\u53c2\u6570\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\uff0c\u6bd4\u598210\u79d2\u949f\u53bb\u8bf7\u6c42\u4e00\u4e0b\u8fd9\u4e2a\u63a5\u53e3\uff0c\u5982\u679c\u4e0d\u901a\uff0c\u6211\u5c31\u96945\u79d2\u518d\u91cd\u8bd5\u4e0b\uff0c\u5982\u679c\u91cd\u8bd53\u6b21\u8fd8\u4e0d\u901a\uff0c\u6211\u5c31\u8ba4\u5b9a\u8fd9\u4e2a\u670d\u52a1\u6302\u6389\u4e86\uff0c\u5c31\u4ece\u5185\u5b58\u8868\u683c\u4e2d\u5220\u6389\u8fd9\u4e2a\u670d\u52a1\u914d\u7f6e\uff0c\u4e0d\u7136\u5ba2\u6237\u7aef\u8981\u8bf7\u6c42\u5230\u8fd9\u4e2a\u4e0d\u901a\u670d\u52a1\uff0c\u6211\u5c31\u7f6a\u8fc7\u4e86\u3002 Consul \u66f4\u50cf\u662f\u4e00\u4e2a full stack \u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5b83\u4e0d\u4ec5\u63d0\u4f9b\u4e86\u4e00\u81f4\u6027 k/v \u5b58\u50a8\uff0c\u8fd8\u5c01\u88c5\u4e86\u670d\u52a1\u53d1\u73b0\uff0c\u5065\u5eb7\u68c0\u67e5\uff0c\u5185\u7f6e\u4e86 DNS server \u7b49\u7b49. \u5fae\u670d\u52a1\u67b6\u6784\u548c\u670d\u52a1\u7f51\u683c\uff08Service Mesh\uff09 \u5e38\u89c1\u7684\u670d\u52a1\u7aef\u67b6\u6784 \u5fae\u670d\u52a1\u67b6\u6784\u8981\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898? \u7528\u6237\u6d41\u91cf\u8fdb\u5165\u670d\u52a1\u7aef\u4e4b\u540e, \u670d\u52a1\u7aef(\u6307\u4e0a\u56fe\u4e2d\u7684 Web\u670d\u52a1 \u548c Worker\u96c6\u7fa4 )\u591a\u79cd \u5e94\u7528 \u53ef\u4ee5\u548c \u64cd\u4f5c\u7cfb\u7edf\u7684\u8fdb\u7a0b \u5f62\u6210 \u591a\u5bf9\u591a\u7684\u6a21\u5f0f , \u6bcf\u79cd \u5e94\u7528 \u6709\u5982\u4e0b\u7279\u6027 \u987a\u7545\u3001\u4f4e\u6210\u672c\u7684\u4e92\u76f8\u8c03\u7528\u522b\u7684 \u5e94\u7528 \u9ad8\u53ef\u7528 \u65e0\u9650\u6027\u80fd\u6269\u5c55(\u81ea\u52a8\u5316\u6269\u7f29\u5bb9) \u8d1f\u8f7d\u5747\u8861 \u5fae\u670d\u52a1\u90e8\u7f72\u7684\u6700\u4f73\u5b9e\u8df5\u662f\u4ec0\u4e48? Kubernetes\u96c6\u7fa4 Service Mesh\u7684\u7531\u6765 \u8d1f\u8f7d\u5747\u8861\u3001\u6570\u636e\u6536\u96c6\u3001\u670d\u52a1\u53d1\u73b0\u3001\u8c03\u7528\u94fe\u8ddf\u8e2a\u3002\u8fd9\u4e9b\u975e\u4e1a\u52a1\u7684\u529f\u80fd\uff0c\u4e00\u822c\u662f\u8c01\u5b9e\u73b0\u7684\u5462\uff1f \u4e92\u8054\u7f51\u516c\u53f8\u4e00\u822c\u4f1a\u6709\u4e00\u4e2a\u201c\u67b6\u6784\u90e8\u201d\uff0c\u7814\u53d1\u6846\u67b6\u3001\u7ec4\u4ef6\u3001\u5de5\u5177\u4e0e\u6280\u672f\u5e73\u53f0\uff1b \u4e1a\u52a1\u7814\u53d1\u90e8\u95e8\u76f4\u63a5\u4f7f\u7528\u76f8\u5173\u6846\u67b6\u3001\u7ec4\u4ef6\u3001\u5de5\u5177\u4e0e\u6280\u672f\u5e73\u53f0\uff0c\u4eab\u53d7\u5404\u79cd\u201c\u9ed1\u79d1\u6280\u201d\u5e26\u6765\u7684\u4fbf\u5229\uff1b \u5bf9\u4e8e\u4e0a\u8ff0\u201c\u9ed1\u79d1\u6280\u201d\u7684\u4f7f\u7528\u4e0e\u63a8\u5e7f\uff0c\u5b58\u5728\u4ec0\u4e48\u95ee\u9898\uff1f\u6846\u67b6\u3001\u7ec4\u4ef6\u3001\u5de5\u5177\u4e0e\u6280\u672f\u5e73\u53f0\u7684\u4f7f\u7528\u4e0e\u63a8\u5e7f\uff0c\u5f80\u5f80\u4f1a\u9047\u5230\u4ee5\u4e0b\u4e00\u4e9b\u95ee\u9898\uff1a \u4e1a\u52a1\u7814\u53d1\u56e2\u961f\uff0c\u9700\u8981\u82b1\u5927\u91cf\u65f6\u95f4\u53bb\u5b66\u4e60\u3001\u4f7f\u7528\u57fa\u7840\u6846\u67b6\u4e0e\u5404\u7c7b\u5de5\u5177\uff1b \u67b6\u6784\u90e8\uff0c\u5bf9\u4e8e\u201c\u9ed1\u79d1\u6280\u201d\u4e0d\u540c\u8bed\u8a00\u5ba2\u6237\u7aef\u7684\u652f\u6301\uff0c\u5f80\u5f80\u8981\u5f00\u53d1C-client\uff0cPython-client\uff0cgo-client\uff0cJava-client\u591a\u8bed\u8a00\u7248\u672c\uff1b \u67b6\u6784\u90e8\uff0c\u201c\u9ed1\u79d1\u6280\u201d client\u8981\u7ef4\u62a4m\u4e2a\u7248\u672c\uff0c server\u8981\u7ef4\u62a4n\u4e2a\u7248\u672c\uff0c\u517c\u5bb9\u6027\u8981\u6d4b\u8bd5m*n\u4e2a\u7248\u672c\uff1b \u6bcf\u6b21\u201c\u9ed1\u79d1\u6280\u201d\u7684\u5347\u7ea7\uff0c\u90fd\u9700\u8981\u63a8\u52a8\u4e0a\u4e0b\u6e38\u8fdb\u884c\u5347\u7ea7\uff0c\u8fd9\u4e2a\u5468\u671f\u5f80\u5f80\u662f\u4ee5\u5b63\u5ea6\u3001\u534a\u5e74\u3001\u53c8\u751a\u81f3\u66f4\u4e45\uff0c\u6574\u4f53\u6548\u7387\u6781\u4f4e\uff1b \u89e3\u51b3\u601d\u8def\u662f: \u89e3\u8026\uff0c\u5c06\u4e1a\u52a1\u670d\u52a1\u62c6\u5206\u6210\u4e24\u4e2a\u8fdb\u7a0b \uff1a \u4e00\u4e2a\u8fdb\u7a0b\u5b9e\u73b0\u4e1a\u52a1\u903b\u8f91\uff08\u4e0d\u7ba1\u662f\u8c03\u7528\u65b9\uff0c\u8fd8\u662f\u670d\u52a1\u63d0\u4f9b\u65b9\uff09\uff0c biz \uff0c\u5373\u4e0a\u56fe\u767d\u8272\u65b9\u5757\uff1b \u4e00\u4e2a\u8fdb\u7a0b\u5b9e\u73b0\u5e95\u5c42\u6280\u672f\u4f53\u7cfb\uff0c proxy \uff0c\u5373\u4e0a\u56fe\u84dd\u8272\u65b9\u5757\uff1b(\u8d1f\u8f7d\u5747\u8861\u3001\u76d1\u63a7\u544a\u8b66\u3001\u670d\u52a1\u53d1\u73b0\u4e0e\u6cbb\u7406\u3001\u8c03\u7528\u94fe\u2026\u7b49\u8bf8\u591a\u57fa\u7840\u8bbe\u65bd\uff0c\u90fd\u653e\u5230\u8fd9\u4e00\u5c42\u5b9e\u73b0\u3002) \u4ed6\u4eec\u4e4b\u95f4\u6709\u8fd9\u6837\u4e00\u4e9b\u7279\u70b9\uff1a 1. biz\u548cproxy\u5171\u540c\u8bde\u751f\uff0c\u5171\u540c\u6d88\u4ea1\uff0c\u4e92\u4e3a\u672c\u5730\u90e8\u7f72\uff0c\u5373\u4e0a\u56fe\u865a\u7ebf\u65b9\u6846\uff1b 2. biz\u548cproxy\u4e4b\u95f4\uff0c\u4e3a\u672c\u5730\u901a\u8baf\uff0c\u5373\u4e0a\u56fe\u9ed1\u8272\u7bad\u5934\uff1b 3.\u6240\u6709biz\u4e4b\u95f4\u7684\u901a\u8baf\uff0c\u90fd\u901a\u8fc7proxy\u4e4b\u95f4\u5b8c\u6210\uff0cproxy\u4e4b\u95f4\u624d\u5b58\u5728\u8fdc\u7aef\u8fde\u63a5\uff0c\u5373\u4e0a\u56fe\u7ea2\u8272\u7bad\u5934\uff1b \u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86 \u4e1a\u52a1\u7684\u5f52\u4e1a\u52a1\uff0c\u6280\u672f\u7684\u5f52\u6280\u672f \uff0c\u5b9e\u73b0\u4e86\u5145\u5206\u89e3\u8026\uff0c\u5982\u679c\u6240\u6709\u8282\u70b9\u90fd\u5b9e\u73b0\u4e86\u89e3\u8026\uff0c\u6574\u4e2a\u67b6\u6784\u4f1a\u6f14\u53d8\u4e3a\uff1a \u7eff\u8272\u4e3a biz \uff1b \u84dd\u8272\u4e3a proxy \uff1b \u6574\u4e2a\u670d\u52a1\u96c6\u7fa4\u53d8\u6210\u4e86\u7f51\u683c\u72b6\uff0c\u8fd9\u5c31\u662f Service Mesh\u670d\u52a1\u7f51\u683c \u7684\u7531\u6765\u3002 Service Mesh\u7684\u884c\u4e1a\u5f00\u6e90\u6700\u4f73\u5b9e\u8df5\u662f\u4ec0\u4e48\uff1f Istio Istio\u7684\u67b6\u6784\u6838\u5fc3\u662f\u4ec0\u4e48\uff1f Istio\u67b6\u6784\u5206\u4e3a\u4e24\u5c42\uff1a \u6570\u636e\u5e73\u9762(data plane)\uff1b \u63a7\u5236\u5e73\u9762(control plane)\uff1b Istio\u7684\u4f18\u52bf\u8bb2\u89e3 \u53c2\u8003 1. \u4e00\u5f00\u59cb, Kubernetes\u96c6\u7fa4\u5185\u90e8\uff0c\u901a\u8fc7Service\u7684ClusterIP\u8fdb\u884c\u4e92\u76f8\u8c03\u7528\u7684\u60c5\u51b5 \u4e0a\u56fe\u7684 Kubernetes \u96c6\u7fa4\u4e2d\u4e00\u5171\u6709\u4e24\u4e2a\u8282\u70b9\u548c 4 \u4e2a Pod \uff0c\u6bcf\u4e2a Pod \u90fd\u6709\u4e00\u4e2a\u5bb9\u5668\u3002\u670d\u52a1 service-nginx \u6307\u5411 nginx pods \uff0c\u670d\u52a1 service-python \u6307\u5411 python pods \u3002\u7ea2\u7ebf\u663e\u793a\u4e86\u4ece pod1-nginx \u4e2d\u7684 nginx \u5bb9\u5668\u5411 service-python \u670d\u52a1\u53d1\u51fa\u7684\u8bf7\u6c42\uff0c\u8be5\u670d\u52a1\u5c06\u8bf7\u6c42\u91cd\u5b9a\u5411\u5230 pod2-python \u3002 \u901a\u8fc7\u670d\u52a1\u7684 ClusterIP \u5411\u540e\u7aef Pod \u8fdb\u884c\u7b80\u5355\u7684\u968f\u673a\u6216\u8f6e\u8be2\u8f6c\u53d1\u8bf7\u6c42\uff0c Kubernetes \u4e2d\u7684 Services \u5e76\u4e0d\u5b58\u5728\u4e8e\u7279\u5b9a\u7684\u8282\u70b9\u4e0a\uff0c\u800c\u662f\u5b58\u5728\u4e8e\u6574\u4e2a\u96c6\u7fa4\u4e2d\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u4e0b\u56fe \u4e2d\u770b\u5230\u66f4\u591a\u7ec6\u8282: \u4e0a\u56fe\u8981\u66f4\u8be6\u7ec6\u70b9\uff0cKubernetes \u4e2d\u7684\u670d\u52a1\u662f\u7531\u8fd0\u884c\u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7684 kube-proxy \u7ec4\u4ef6\u5b9e\u73b0\u7684\uff0c\u8be5\u7ec4\u4ef6\u521b\u5efa iptables \u89c4\u5219\uff0c\u5e76\u5c06\u8bf7\u6c42\u91cd\u5b9a\u5411\u5230 Pod\u3002\u56e0\u6b64\uff0c\u670d\u52a1\u5c31\u662f iptables \u89c4\u5219\u3002(\u8fd8\u6709\u5176\u4ed6\u4e0d\u4f7f\u7528 iptables \u7684\u4ee3\u7406\u6a21\u5f0f\uff0c\u4f46\u8fc7\u7a0b\u662f\u76f8\u540c\u7684\u3002) 2. \u6709\u4e86Istio\u4e4b\u540e, Control Plane \u548c Data Plane\u4e4b\u95f4\u901a\u8baf\u7684\u793a\u610f\u56fe Istio \u6700\u5e38\u89c1\u7684\u4ee3\u7406\u662f Envoy \uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u4ee3\u7406\uff08\u5982 Nginx \uff09\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u4ee3\u7406\u79f0\u4e3a istio-proxy \u3002 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e0d\u518d\u663e\u793a kube-proxy \u7ec4\u4ef6\uff0c\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u4fdd\u6301\u56fe\u50cf\u7684\u6574\u6d01\uff0c\u8fd9\u4e9b\u7ec4\u4ef6\u4ecd\u7136\u5b58\u5728\uff0c\u4f46\u662f\u62e5\u6709 istio-proxy \u7684 Pods \u5c06\u4e0d\u518d\u4f7f\u7528 kube-proxy \u7ec4\u4ef6\u4e86\u3002 \u6bcf\u5f53\u914d\u7f6e\u6216\u670d\u52a1\u53d1\u751f\u53d8\u5316\u65f6\uff0c Istio \u63a7\u5236\u5e73\u9762 \u5c31\u4f1a\u5bf9\u6240\u6709 istio-proxy sidecars \u8fdb\u884c\u5904\u7406\uff0c\u7c7b\u4f3c\u4e8e\u56fe 2 \u4e2d Kubernetes API \u5904\u7406\u6240\u6709 kube-proxy \u7ec4\u4ef6\u7684\u65b9\u5f0f\u3002 Istio \u63a7\u5236\u5e73\u9762 \u4f7f\u7528\u73b0\u6709\u7684 Kubernetes \u670d\u52a1\u6765\u63a5\u6536\u6bcf\u4e2a\u670d\u52a1\u70b9\u6240\u6307\u5411\u7684\u6240\u6709 pods \uff0c\u901a\u8fc7\u4f7f\u7528 pod IP \u5730\u5740\uff0cIstio \u5b9e\u73b0\u4e86\u81ea\u5df1\u7684\u8def\u7531\u3002 3 \u5728 Istio \u63a7\u5236\u5e73\u9762\u5bf9\u6240\u6709 istio-proxy sidecars \u5904\u7406\u4e4b\u540e\uff0c\u5b83\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684 \u5728\u56fe 4 \u4e2d\uff0c\u6211\u4eec\u770b\u5230 Istio \u63a7\u5236\u5e73\u9762\u5982\u4f55\u5c06\u5f53\u524d\u914d\u7f6e\u5e94\u7528\u5230\u96c6\u7fa4\u4e2d\u7684\u6240\u6709 istio-proxy \u5bb9\u5668\uff0cIstio \u5c06\u628a Kubernetes \u670d\u52a1\u58f0\u660e\u8f6c\u6362\u6210\u5b83\u81ea\u5df1\u7684\u8def\u7531\u58f0\u660e\u3002 4 \u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528 Istio \u53d1\u51fa\u8bf7\u6c42: \u5728\u4e0a\u56fe\u4e2d\uff0c\u6240\u6709\u7684 istio-proxy \u5bb9\u5668\u5df2\u7ecf\u88ab Istio \u63a7\u5236\u5e73\u9762 \u6240\u7ba1\u63a7\uff0c\u5e76\u5305\u542b\u6240\u6709\u5fc5\u8981\u7684\u8def\u7531\u4fe1\u606f\uff0c\u5982\u56fe 3/4 \u6240\u793a\uff0c\u6765\u81ea pod1-nginx \u7684 nginx \u5bb9\u5668 \u5411 service-python \u53d1\u51fa\u8bf7\u6c42\u3002 \u8bf7\u6c42\u88ab pod1-nginx \u7684 istio-proxy \u5bb9\u5668\u62e6\u622a\uff0c\u5e76\u88ab\u91cd\u5b9a\u5411\u5230\u4e00\u4e2a python pod \u7684 istio-proxy \u5bb9\u5668\uff0c\u8be5\u5bb9\u5668\u968f\u540e\u5c06\u8bf7\u6c42\u91cd\u5b9a\u5411\u5230 python \u5bb9\u5668\u3002 Istio\u7684\u4f18\u52bf\u603b\u7ed3 \u73b0\u5728\u6240\u6709\u6d41\u91cf\u90fd\u901a\u8fc7\u6bcf\u4e2a Pod \u4e2d\u7684 istio-proxy \u5bb9\u5668\u8fdb\u884c\u8def\u7531\uff0c\u6bcf\u5f53 istio-proxy \u63a5\u6536\u5e76\u91cd\u5b9a\u5411\u4e00\u4e2a\u8bf7\u6c42\u65f6\uff0c\u5b83\u8fd8\u4f1a\u5c06\u6709\u5173\u8be5\u8bf7\u6c42\u7684\u4fe1\u606f\u63d0\u4ea4\u7ed9 Istio \u63a7\u5236\u5e73\u9762 \u3002\u56e0\u6b64 Istio \u63a7\u5236\u5e73\u9762 \u53ef\u4ee5\u51c6\u786e\u5730\u77e5\u9053\u8be5\u8bf7\u6c42\u6765\u81ea\u54ea\u4e2aPod\u3001\u5b58\u5728\u54ea\u4e9b HTTP \u5934\u3001\u4ece\u4e00\u4e2a istio-proxy \u5230\u53e6\u4e00\u4e2a istio-proxy \u7684\u8bf7\u6c42\u9700\u8981\u591a\u957f\u65f6\u95f4\u7b49\u7b49\u3002\u5728\u5177\u6709\u5f7c\u6b64\u901a\u4fe1\u7684\u670d\u52a1\u7684\u96c6\u7fa4\u4e2d\uff0c\u8fd9\u53ef\u4ee5\u63d0\u9ad8\u53ef\u89c2\u5bdf\u6027\u5e76\u66f4\u597d\u5730\u63a7\u5236\u6240\u6709\u6d41\u91cf \u5148\u8fdb\u7684\u8def\u7531 \uff0c Kubernetes \u5185\u90e8 Services \u53ea\u80fd\u5bf9 Pods \u6267\u884c\u8f6e\u8be2\u6216\u968f\u673a\u5206\u53d1\u8bf7\u6c42\uff0c\u4f7f\u7528 Istio \u53ef\u4ee5\u5b9e\u73b0\u66f4\u590d\u6742\u7684\u65b9\u5f0f\u3002\u6bd4\u5982\uff0c\u5982\u679c\u53d1\u751f\u9519\u8bef\uff0c\u6839\u636e\u8bf7\u6c42\u5934\u8fdb\u884c\u91cd\u5b9a\u5411\uff0c\u6216\u8005\u91cd\u5b9a\u5411\u5230\u6700\u5c11\u4f7f\u7528\u7684\u670d\u52a1\u3002 \u90e8\u7f72 \uff0c\u5b83\u5141\u8bb8\u5c06\u4e00\u5b9a\u6bd4\u4f8b\u7684\u6d41\u91cf\u8def\u7531\u5230\u7279\u5b9a\u7684\u670d\u52a1\u7248\u672c\uff0c\u56e0\u6b64\u5141\u8bb8\u7eff\u8272/\u84dd\u8272\u548c\u91d1\u4e1d\u96c0\u90e8\u7f72\u3002 \u52a0\u5bc6 \uff0c\u53ef\u4ee5\u5bf9 Pods \u4e4b\u95f4\u4ece istio-proxy \u5230 istio-proxy \u7684\u96c6\u7fa4\u5185\u90e8\u901a\u4fe1\u8fdb\u884c\u52a0\u5bc6\u3002 \u76d1\u63a7/\u56fe\u5f62 \uff0c Istio \u53ef\u4ee5\u8fde\u63a5\u5230 Prometheus \u7b49\u76d1\u63a7\u5de5\u5177\uff0c\u4e5f\u53ef\u4ee5\u4e0e Kiali \u4e00\u8d77\u5c55\u793a\u6240\u6709\u7684\u670d\u52a1\u548c\u4ed6\u4eec\u7684\u6d41\u91cf\u3002 \u8ffd\u8e2a \uff0c\u56e0\u4e3a Istio \u63a7\u5236\u5e73\u9762 \u62e5\u6709\u5927\u91cf\u5173\u4e8e\u8bf7\u6c42\u7684\u6570\u636e\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528 Jaeger \u7b49\u5de5\u5177\u8ddf\u8e2a\u548c\u68c0\u67e5\u8fd9\u4e9b\u6570\u636e\u3002 \u5ba2\u6237\u7aef\u7f51\u7edc\u8d28\u91cf\u6539\u5584\u6280\u672f \u672c\u8d28\u4e0a\u90fd\u662f\u5229\u7528\u8fb9\u7f18\u8282\u70b9(\u4ee3\u7406\u8282\u70b9)\u4ee5\u53ca\u4f18\u5316\u7684\u9aa8\u5e72\u7f51\u7edc\u6765\u964d\u4f4e\u7528\u6237\u8bbf\u95ee\u670d\u52a1\u7aef\u7684\u5ef6\u8fdf\uff0c\u63d0\u5347\u7528\u6237\u4f53\u9a8c. \u4ee3\u7406\u8282\u70b9 CDN\u7684\u8fb9\u7f18\u8282\u70b9 \u516c\u53f8\u81ea\u7814\u7684\u4ee3\u7406\u8282\u70b9 \u4f18\u5316\u7684\u9aa8\u5e72\u7f51\u7edc \u5229\u7528\u516c\u6709\u4e91\u7684\u9aa8\u5e72\u7f51\u7edc \u62c9\u4e13\u7ebf \u5ba2\u6237\u7aef\u7a33\u5b9a\u6027\u63d0\u5347 \u4ee5\u4e0b\u662f\u4e0d\u540c\u4e1a\u52a1\u5ba2\u6237\u7aef\u90fd\u4f1a\u9700\u8981\u7684\u4e00\u4e9b\u901a\u7528\u529f\u80fd \u5ba2\u6237\u7aef\u7f51\u7edc\u63a2\u6d4b\u5668, \u63a2\u6d4b\u6700\u5feb\u5230\u8fbe\u670d\u52a1\u7aef\u7684\u8def\u5f84\u5229\u5668, \u5ba2\u6237\u7aef\u9009\u62e9\u8def\u5f84\u6709\u65f6\u5019\u5e76\u4e0d\u662f\u76f4\u8fde\u670d\u52a1\u7aef\u6700\u5feb\uff0c\u800c\u662f\u5148\u8fde\u63a5\u5230\u52a0\u901f\u8282\u70b9, \u518d\u7531\u52a0\u901f\u8282\u70b9\u4ee3\u7406\u56de\u5230\u670d\u52a1\u7aef\u5feb. \u56e0\u6b64\u4e0d\u540c\u5ba2\u6237\u7aef\u76f4\u63a5\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u901a\u7528\u7684SDK. \u5ba2\u6237\u7aefDump\u7cfb\u7edf, \u641c\u96c6\u4e0d\u540c\u5ba2\u6237\u7aef\u5954\u6e83\u7387\u5e76\u4e0a\u62a5. \u5ba2\u6237\u7aef\u901a\u7528\u4e0b\u8f7d\u5668, \u4e1a\u52a1\u7a0b\u5e8f\u65e0\u9700\u5b9e\u73b0\u4e0b\u8f7d\u903b\u8f91, \u76f4\u63a5\u8c03\u7528\u76f8\u5173SDK HTTPDNS SDK, \u9632\u52ab\u6301 LBS SDK, \u5ba2\u6237\u7aef\u83b7\u53d6\u5730\u7406\u4f4d\u7f6e\u3001\u9644\u8fd1\u7684\u4eba\u7b49 \u901a\u7528\u95ee\u9898\u63a2\u6d4b(Detect)\u548c\u4e0a\u62a5\u76f8\u5173SDK, \u4e0d\u540c\u5ba2\u6237\u7aef\u53ef\u4ee5\u76f4\u63a5\u96c6\u6210\u8be5SDK, \u5728\u7528\u6237\u4f7f\u7528\u5ba2\u6237\u7aef\u7684\u4efb\u610f\u9636\u6bb5\u6709\u95ee\u9898\u90fd\u53ef\u4ee5\u4e0a\u62a5 \u5ba2\u6237\u7aef\u57cb\u70b9\u6700\u4f73\u5b9e\u8df5 \u5f85\u8865\u5145","title":"\u7b2c\u4e03\u7bc7 \u67b6\u6784\u5e08\u601d\u7ef4\u548c\u7279\u8d28\u4ee5\u53ca\u4e2d\u95f4\u4ef6\u6280\u672f\u68b3\u7406"},{"location":"chapter_2/jiagoushisiweihetezhi/#_1","text":"\u8fd9\u7bc7\u6587\u7ae0\u7684\u76ee\u6807 \u603b\u7ed3\u67b6\u6784\u5e08\u5fc5\u5907\u7684\u7279\u8d28 \u68b3\u7406\u5e38\u89c1\u7684\u67b6\u6784\u601d\u7ef4 \u68b3\u7406\u5e38\u89c1\u7684\u4e2d\u95f4\u4ef6\u6280\u672f","title":"\u6982\u8ff0"},{"location":"chapter_2/jiagoushisiweihetezhi/#_2","text":"\u4e00\u540d\u4f18\u79c0\u7684\u67b6\u6784\u5e08\uff0c\u5728\u8bbe\u8ba1\u7cfb\u7edf\u65f6\u9700\u8981\u6709\u4ee5\u4e0b\u8fd9 \u56db\u9879\u5173\u952e\u80fd\u529b \uff1a\u300c\u5e73\u8861\u53d6\u820d\u3001\u9884\u5224\u672a\u6765\u3001\u62bd\u8c61\u601d\u7ef4\u3001\u5bb9\u9519\u673a\u5236\u300d \u4f5c\u4e3a\u4e00\u540d\u4f18\u79c0\u7684SRE, \u5728\u8bbe\u8ba1\u6280\u672f\u65b9\u6848\u65f6\uff0c\u4e5f\u9700\u8981\u63d0\u5347\u8fd9\u56db\u9879\u5173\u952e\u80fd\u529b.","title":"\u67b6\u6784\u5e08\u5fc5\u5907\u7684\u7279\u8d28"},{"location":"chapter_2/jiagoushisiweihetezhi/#_3","text":"\u4e00\u4e2a\u67b6\u6784\u672c\u8d28\u4e0a\u603b\u4f1a\u6709\u4f18\u6709\u52a3\uff0c\u5b83\u4e0d\u53ef\u80fd\u662f\u5b8c\u7f8e\u7684\u3001\u666e\u9002\u7684\uff0c\u4e5f\u4e0d\u5b58\u5728\u4e00\u4e2a\u67b6\u6784\u5728 A \u573a\u666f\u80fd\u7528\uff0c\u5728 B \u573a\u666f\u4e5f\u6700\u9002\u7528\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u5c31\u9700\u8981\u6211\u4eec\u51c6\u786e\u5224\u65ad\uff0c\u4f5c\u51fa\u53d6\u820d\u3002 \u6211\u4eec\u53ef\u4ee5\u6839\u636e\u5177\u4f53\u7684\u4e1a\u52a1\u9700\u6c42\u6765\u8c03\u6574\u67b6\u6784\uff0c\u4e5f\u5c31\u662f\u4ee5\u5f53\u524d\u7684\u4e1a\u52a1\u9700\u6c42\uff0c\u9009\u51fa\u6700\u5339\u914d\u7684\u67b6\u6784\u3002\u53e6\u5916\uff0c\u67b6\u6784\u5e08\u8fd8\u9700\u8981\u6839\u636e\u73b0\u72b6\u8861\u91cf\u597d\u9700\u6c42\u548c\u8d44\u6e90\u3001\u6548\u7387\u548c\u5b89\u5168\u3001\u65f6\u5ef6\u548c\u541e\u5410\u7b49\u7b49\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u505a\u51fa\u5224\u65ad\u3002 \u6bd4\u5982\u5bf9\u4e8e\u5728\u7ebf\u4ea4\u6613\u7cfb\u7edf\uff0c\u53ef\u80fd\u66f4\u91cd\u8981\u7684\u662f\u4fdd\u8bc1\u5b83\u7684\u4f4e\u65f6\u5ef6\uff0c\u56e0\u6b64\u5c31\u53ef\u4ee5\u727a\u7272\u4e00\u5b9a\u7684\u541e\u5410\u91cf\uff0c\u800c\u5bf9\u4e8e\u79bb\u7ebf\u7cfb\u7edf\uff0c\u541e\u5410\u91cf\u5219\u66f4\u91cd\u8981\u4e00\u4e9b\u3002 \u6ee1\u8db3\u4e1a\u52a1\u9700\u6c42\u7684\u524d\u63d0\u4e0b\uff0c\u6700\u5927\u5316ROI.","title":"\u5e73\u8861\u53d6\u820d"},{"location":"chapter_2/jiagoushisiweihetezhi/#_4","text":"\u67b6\u6784\u5e08\u9700\u8981\u5177\u5907\u4e00\u5b9a\u7684\u672a\u6765\u7684\u9884\u5224\u80fd\u529b\uff0c\u56e0\u4e3a\u67b6\u6784\u7684\u8c03\u6574\u5468\u671f\u901a\u5e38\u6bd4\u8f83\u957f\u3002\u8fd9\u4e5f\u662f\u7a0b\u5e8f\u5458\u548c\u67b6\u6784\u5e08\u4e4b\u95f4\u4e00\u4e2a\u5f88\u5927\u7684\u533a\u522b\u6240\u5728\u3002 \u7a0b\u5e8f\u5458\u8d1f\u8d23\u4e00\u4e2a\u9879\u76ee\uff0c\u5728\u5f53\u524d\u7684\u4e92\u8054\u7f51\u5927\u80cc\u666f\u4e0b\uff0c\u9879\u76ee\u7684\u8fed\u4ee3\u5468\u671f\u975e\u5e38\u5feb\uff0c\u57fa\u672c\u4ee5\u5929\u6216\u5468\u4e3a\u5355\u4f4d\uff0c\u6700\u591a\u4e00\u4e2a\u6708\u3002\u5982\u679c\u53d1\u73b0\u4e0d\u5408\u9002\u7684\u4ee3\u7801\uff0c\u9700\u8981\u91cd\u6784\uff0c\u7a0b\u5e8f\u5458\u57fa\u672c\u4e5f\u80fd\u5728\u51e0\u5929\u6216\u51e0\u5468\u5185\u5c31\u80fd\u5b8c\u6210\u91cd\u6784\u3002 \u800c\u67b6\u6784\u7684\u8c03\u6574\u662f\u76f8\u5bf9\u6f2b\u957f\u7684\u8fc7\u7a0b\uff0c\u53ef\u80fd\u9700\u8981\u6570\u6708\uff0c\u751a\u81f3\u8981\u51e0\u5e74\u3002\u56e0\u6b64\uff0c\u5728\u8bbe\u8ba1\u67b6\u6784\u65f6\u5c31\u9700\u8981\u67b6\u6784\u5e08\u5177\u5907\u9884\u5224\u610f\u8bc6\uff0c\u5bf9\u5f88\u591a\u4e0d\u786e\u5b9a\u7684\u4e8b\u60c5\u505a\u51fa\u9884\u5224\u548c\u9009\u62e9\uff0c\u8bf8\u5982\u672a\u6765\u8bbf\u95ee\u91cf\u4f1a\u589e\u957f\u5230\u4ec0\u4e48\u91cf\u7ea7\uff0c\u4f1a\u4e0d\u4f1a\u4ea7\u751f\u65b0\u7684\u4e1a\u52a1\uff0c\u8fd9\u4e9b\u4f1a\u5bf9\u7cfb\u7edf\u4ea7\u751f\u4ec0\u4e48\u6837\u65b0\u7684\u8981\u6c42\u7b49\u7b49\u3002 \u5177\u5907\u6280\u672f\u654f\u611f\u5ea6,\u9884\u5224\u4e1a\u52a1\u672a\u6765\u8d70\u5411.","title":"\u9884\u5224\u672a\u6765"},{"location":"chapter_2/jiagoushisiweihetezhi/#_5","text":"\u9664\u4e86\u61c2\u5f97\u53d6\u820d\u548c\u62e5\u6709\u9884\u5224\u610f\u8bc6\uff0c\u67b6\u6784\u5e08\u5728\u8bbe\u8ba1\u67b6\u6784\u65f6\u8fd8\u8981\u638c\u63e1\u62bd\u8c61\u7684\u65b9\u6cd5\uff0c\u4e0d\u80fd\u80e1\u5b50\u7709\u6bdb\u4e00\u628a\u6293\uff0c\u8981\u505a\u597d\u5206\u5c42\u548c\u533a\u9694\u3002 \u56e0\u4e3a\u67b6\u6784\u5e08\u9762\u5bf9\u7684\u662f\u4e00\u4e2a\u5f88\u5e9e\u5927\u7684\u7cfb\u7edf\uff0c\u4e3a\u4e86\u907f\u514d\u8fc7\u65e9\u9677\u5165\u7ec6\u8282\uff0c\u4e0d\u8981\u53bb\u770b\u5404\u4e2a\u7ec4\u4ef6\u7684\u7ec6\u8282\uff0c\u800c\u662f\u628a\u5b83\u4eec\u7684\u89d2\u8272\u5b9a\u4e49\u4e0b\u6765\u4e4b\u540e\uff0c\u518d\u5206\u5757\u6765\u601d\u8003\u3002\u800c\u5728\u770b\u6bcf\u4e2a\u5206\u5757\u65f6\uff0c\u5176\u4ed6\u5206\u5757\u90fd\u53ef\u4ee5\u89c6\u4e3a\u4e00\u4e2a\u62bd\u8c61\u7684\u6982\u5ff5\uff0c\u53e6\u5916\uff0c\u4e5f\u9700\u8981\u8003\u8651\u590d\u7528\u7684\u95ee\u9898\u3002 \u8fd9\u91cc\u5f88\u91cd\u8981\u7684\u4e00\u70b9\u5c31\u662f\u60f3\u6e05\u695a\u76ee\u6807\uff0c\u7136\u540e\u8fdb\u884c\u5206\u5c42\uff0c\u8bbe\u8ba1\u597d\u6bcf\u4e00\u5c42\u4f5c\u7528\u3001\u4e0a\u4e0b\u5c42\u4e4b\u95f4\u7684\u63a5\u53e3.","title":"\u62bd\u8c61\u601d\u7ef4"},{"location":"chapter_2/jiagoushisiweihetezhi/#_6","text":"\u76f8\u6bd4\u7a0b\u5e8f\u5458\uff0c\u67b6\u6784\u5e08\u9762\u5bf9\u7684\u73af\u5883\u8981\u6076\u52a3\u7684\u591a\uff0c\u56e0\u4e3a\u7cfb\u7edf\u66f4\u590d\u6742\u4e86\uff0c\u51fa\u9519\u7684\u6982\u7387\u4e5f\u589e\u52a0\u4e86\uff0c\u6bcf\u4e2a\u8282\u70b9\u3001\u6bcf\u4e2a\u529f\u80fd\u90fd\u6709\u53ef\u80fd\u51fa\u9519\uff0c\u6240\u4ee5\u8fd9\u5c31\u9700\u8981\u67b6\u6784\u5e08\u4e3a\u9519\u8bef\u800c\u8bbe\u8ba1\uff08Design For Failure\uff09\uff0c\u4e8b\u5148\u63d0\u524d\u505a\u597d\u89e3\u51b3\u65b9\u6848\u3002 \u9664\u4e86\u5e94\u7528\u51fa\u9519\uff0c\u8fd8\u6709\u53ef\u80fd\u4ea7\u751f\u6570\u636e\u4e22\u5931\u7684\u60c5\u51b5\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u5907\u4efd\u6765\u9884\u9632\u3002 \u53e6\u5916\uff0c\u5982\u679c\u51fa\u73b0\u6545\u969c\uff0c\u8be5\u600e\u6837\u505a\u5230\u5feb\u901f\u6062\u590d\u5462\uff1f\u6211\u4eec\u73b0\u5728\u666e\u904d\u7684\u505a\u6cd5\u662f\u4e0d\u4fee\u53ea\u6362\uff0c\u56e0\u4e3a\u5982\u679c\u8981\u4fee\u590d\u4e00\u4e2a\u5f02\u5e38\u72b6\u6001\uff0c\u53ef\u80fd\u4fee\u590d\u540e\u8fd8\u4f1a\u51fa\u73b0\u8fde\u5e26\u95ee\u9898\uff0c\u800c\u5982\u679c\u80fd\u901a\u8fc7\u6280\u672f\u624b\u6bb5\uff0c\u5220\u9664\u5df2\u51fa\u73b0\u7684\u6545\u969c\uff0c\u6362\u4e00\u4e2a\u5168\u65b0\u7684\u7cfb\u7edf\uff0c\u5c31\u80fd\u591f\u4fdd\u8bc1\u5b83\u8fc5\u901f\u6062\u590d\u5230\u6b63\u5e38\u72b6\u6001\u3002 Design For Failure \u6545\u969c\u9884\u6848","title":"\u5bb9\u9519\u673a\u5236"},{"location":"chapter_2/jiagoushisiweihetezhi/#_7","text":"\u4ee5\u4e0b\u662f\u4e00\u4e9b\u505a\u67b6\u6784\u8bbe\u8ba1\u65f6\u7684\u597d\u7684\u65b9\u6cd5\u8bba \u5173\u6ce8\u7aef\u5230\u7aef\u7684\u4ef7\u503c\u4ea4\u4ed8\uff0c\u6280\u672f\u56e2\u961f\u8981\u6301\u7eed\u5730\u987a\u7545\u4ea4\u4ed8\u6709\u6548\u4ef7\u503c\u7ed9\u4e1a\u52a1 \u6218\u7565\u4e0a\u85d0\u89c6\u6280\u672f\uff0c\u6218\u672f\u4e0a\u91cd\u89c6\u6280\u672f \u8bbe\u8ba1\u6280\u672f\u65b9\u6848\u65f6\uff0c\u4e00\u4e9b\u597d\u7684Idea \u4ee5\u7a7a\u95f4\u6362\u65f6\u95f4\uff0c\u727a\u7272\u5199\u6027\u80fd\u6362\u53d6\u8bfb\u6027\u80fd \u6280\u672f\u65b9\u6848\u6ce8\u91cd\u51b7\u70ed\u5206\u79bb\u7684\u601d\u8003 \u6280\u672f\u65b9\u6848\u6ce8\u91cd \u63a8\u6a21\u578b\u3001\u62c9\u6a21\u578b\u3001\u63a8\u62c9\u7ed3\u5408 \u7684\u601d\u8003 \u6545\u969c\u5904\u7406\u65f6 \u53ea\u6362\u4e0d\u4fee \u7684\u601d\u7ef4, \u76f4\u63a5\u7ed9\u7528\u6237\u6362\u4e00\u4e2a\u65b0\u7cfb\u7edf","title":"\u4e00\u4e9b\u4f18\u79c0\u7684\u67b6\u6784\u601d\u60f3"},{"location":"chapter_2/jiagoushisiweihetezhi/#_8","text":"\u4ee5\u4e0b\u662f\u67b6\u6784\u5e08\u5e38\u7528\u5230\u7684\u4e2d\u95f4\u4ef6\u6280\u672f \u5305\u62ec\u5982\u4e0b: LB\u6280\u672f \u7f13\u5b58\u6280\u672f \u7ebf\u7a0b\u6c60\u6280\u672f MQ\u6280\u672f \u6570\u636e\u5e93\u6280\u672f \u670d\u52a1\u6ce8\u518c\u548c\u53d1\u73b0\u6280\u672f \u5fae\u670d\u52a1\u548c\u670d\u52a1\u7f51\u683c\u6280\u672f \u5ba2\u6237\u7aef\u7f51\u7edc\u8d28\u91cf\u6539\u5584\u6280\u672f \u5ba2\u6237\u7aef\u7a33\u5b9a\u6027\u63d0\u5347\u6280\u672f \u5ba2\u6237\u7aef\u57cb\u70b9\u6700\u4f73\u5b9e\u8df5","title":"\u5e38\u7528\u7684\u4e2d\u95f4\u4ef6\u6280\u672f\u603b\u7ed3"},{"location":"chapter_2/jiagoushisiweihetezhi/#lb","text":"LB\u6280\u672f\u5c5e\u4e8e\u5e38\u7528\u7684\u4e00\u9879\u4e2d\u95f4\u4ef6\u6280\u672f\uff0c\u7ecf\u5e38\u7528\u6765\u505a\u4ea7\u54c1\u7684\u6d41\u91cf\u5165\u53e3\u6216\u8005\u5185\u90e8\u670d\u52a1\u4e4b\u95f4\u4e92\u76f8\u8c03\u7528\u7684\u4e2d\u95f4\u4ef6. \u6ce8\u610f\u533a\u52064\u5c42\u53cd\u5411\u4ee3\u7406\uff0c\u8fd8\u662f7\u5c42\u53cd\u5411\u4ee3\u7406. LB\u7684\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\uff0c\u53ef\u4ee5\u53c2\u8003\u524d\u9762\u603b\u7ed3\u7684\"Nginx\u7684\u5747\u8861\u7b56\u7565\", \u5176\u4ed6\u7684\u8d1f\u8f7d\u5747\u8861\u5668\u5177\u5907\u7684\u80fd\u529b\u90fd\u975e\u5e38\u76f8\u4f3c.","title":"LB\u6280\u672f"},{"location":"chapter_2/jiagoushisiweihetezhi/#_9","text":"","title":"\u7f13\u5b58\u6280\u672f"},{"location":"chapter_2/jiagoushisiweihetezhi/#_10","text":"","title":"\u5de5\u7a0b\u4e0a\uff0c\u7f13\u5b58\u4e00\u822c\u6709\u51e0\u79cd\u4f7f\u7528\u65b9\u5f0f\uff1f"},{"location":"chapter_2/jiagoushisiweihetezhi/#1","text":"","title":"\uff081\uff09\u8fdb\u7a0b\u5185\u7f13\u5b58\uff1b"},{"location":"chapter_2/jiagoushisiweihetezhi/#2","text":"","title":"\uff082\uff09\u8fdb\u7a0b\u5916\u7f13\u5b58\uff0c\u4e5f\u5c31\u662f\u7f13\u5b58\u670d\u52a1\uff1b"},{"location":"chapter_2/jiagoushisiweihetezhi/#_11","text":"\u5e38\u89c1\u7684\u6709\u4e09\u79cd\u65b9\u6cd5\uff1a \u670d\u52a1\u8282\u70b9\u540c\u6b65\u901a\u77e5\uff1b MQ\u5f02\u6b65\u901a\u77e5\uff1b \u727a\u7272\u5c11\u91cf\u4e00\u81f4\u6027\uff0c\u5b9a\u671f\u540e\u7aef\u66f4\u65b0\uff1b","title":"\u5982\u679c\u6709\u591a\u4e2a\u670d\u52a1\u4f7f\u7528\u8fdb\u7a0b\u5185\u7f13\u5b58\uff0c\u5982\u4f55\u4fdd\u8bc1\u4e00\u81f4\u6027\uff1f"},{"location":"chapter_2/jiagoushisiweihetezhi/#redis","text":"\u4ee5\u4e0b\u51e0\u70b9\uff0c\u5e94\u8be5\u8981\u6ce8\u610f\uff1a \u670d\u52a1\u4e0e\u670d\u52a1\u4e4b\u95f4\u4e0d\u8981\u901a\u8fc7\u7f13\u5b58\u4f20\u9012\u6570\u636e\uff1b \u5982\u679c\u7f13\u5b58\u6302\u6389\uff0c\u53ef\u80fd\u5bfc\u81f4\u96ea\u5d29\uff0c\u6b64\u65f6\u8981\u505a\u9ad8\u53ef\u7528\u7f13\u5b58\uff0c\u6216\u8005\u6c34\u5e73\u5207\u5206\uff1b \u8c03\u7528\u65b9\u4e0d\u5b9c\u518d\u5355\u72ec\u4f7f\u7528\u7f13\u5b58\u5b58\u50a8\u670d\u52a1\u5e95\u5c42\u7684\u6570\u636e\uff0c\u5bb9\u6613\u51fa\u73b0\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u4ee5\u53ca\u53cd\u5411\u4f9d\u8d56\uff1b \u4e0d\u540c\u670d\u52a1\uff0c\u7f13\u5b58\u5b9e\u4f8b\u8981\u505a\u5782\u76f4\u62c6\u5206\uff0c\u4e0d\u5b9c\u5171\u7528\u7f13\u5b58\uff1b","title":"\u7edd\u5927\u90e8\u5206\u60c5\u51b5\uff0c\u8fd8\u662f\u5e94\u8be5\u4f7f\u7528\u7f13\u5b58\u670d\u52a1(\u4f8b\u5982Redis). \u7f13\u5b58\u670d\u52a1\u7684\u4f7f\u7528\uff0c\u6709\u4ec0\u4e48\u6ce8\u610f\u70b9\uff1f"},{"location":"chapter_2/jiagoushisiweihetezhi/#_12","text":"","title":"\u7f13\u5b58\u670d\u52a1\u7684\u6700\u4f73\u5b9e\u8df5"},{"location":"chapter_2/jiagoushisiweihetezhi/#_13","text":"\u5148\u8bfb\u7f13\u5b58\uff0c\u547d\u4e2d\u5219\u8fd4\u56de\uff1b\u672a\u547d\u4e2d\u5219\u8bfb\u6570\u636e\u5e93\uff0c\u7136\u540e\u8bbe\u7f6e\u7f13\u5b58\u3002","title":"\u8bfb\u7f13\u5b58\u6700\u4f73\u5b9e\u8df5"},{"location":"chapter_2/jiagoushisiweihetezhi/#_14","text":"\u6dd8\u6c70\u7f13\u5b58\uff0c\u800c\u4e0d\u662f\u4fee\u6539\u7f13\u5b58\uff1b \u5148\u64cd\u4f5c\u6570\u636e\u5e93\uff0c\u518d\u64cd\u4f5c\u7f13\u5b58\uff1b \u9ad8\u5e76\u53d1\u4e0b\u5148\u64cd\u4f5c\u6570\u636e\u5e93, \u8fd8\u662f\u5148\u64cd\u4f5c\u7f13\u5b58?","title":"\u5199\u7f13\u5b58\u6700\u4f73\u5b9e\u8df5"},{"location":"chapter_2/jiagoushisiweihetezhi/#_15","text":"\u7f13\u5b58\u7684\u672c\u8d28\u662f\u201c\u5197\u4f59\u4e86\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u201d\u3002 \u53ef\u80fd\u5b58\u5728\u4ec0\u4e48\u95ee\u9898\uff1f\u7f13\u5b58\u4e0e\u6570\u636e\u5e93\u6570\u636e\u4e0d\u4e00\u81f4\u3002 \u51fa\u73b0\u4e0d\u4e00\u81f4\u65f6\uff0c\u4f18\u5316\u601d\u8def\u662f\u4ec0\u4e48\uff1f\u53ca\u65f6\u628a\u7f13\u5b58\u4e2d\u7684\u810f\u6570\u636e\u6dd8\u6c70\u6389\u3002","title":"\u7f13\u5b58\u7684\u672c\u8d28\u662f\u4ec0\u4e48"},{"location":"chapter_2/jiagoushisiweihetezhi/#redis_1","text":"","title":"\u4ec0\u4e48\u65f6\u5019\u9009\u62e9\u4f18\u5148\u4f7f\u7528Redis\uff1f"},{"location":"chapter_2/jiagoushisiweihetezhi/#1_1","text":"","title":"\uff081\uff09\u9700\u8981\u652f\u6301\u590d\u6742\u6570\u636e\u7ed3\u6784\uff1b"},{"location":"chapter_2/jiagoushisiweihetezhi/#2_1","text":"","title":"\uff082\uff09\u9700\u8981\u652f\u6301\u6301\u4e45\u5316\uff1b"},{"location":"chapter_2/jiagoushisiweihetezhi/#3","text":"","title":"\uff083\uff09\u9700\u8981\u5929\u7136\u9ad8\u53ef\u7528\uff1b"},{"location":"chapter_2/jiagoushisiweihetezhi/#4value","text":"","title":"\uff084\uff09value\u5b58\u50a8\u5185\u5bb9\u6bd4\u8f83\u5927\uff1b"},{"location":"chapter_2/jiagoushisiweihetezhi/#_16","text":"\u8fd9\u91cc\u533a\u5206 \u8fde\u63a5\u6c60 \u548c \u7ebf\u7a0b\u6c60 , \u5176\u5b9e\u672c\u8d28\u4e0a\u90fd\u662f\u4fdd\u5b58 worker \u7684\u6c60\u5b50","title":"\u7ebf\u7a0b\u6c60\u6280\u672f"},{"location":"chapter_2/jiagoushisiweihetezhi/#_17","text":"\u8fde\u63a5\u6c60\u7684\u6838\u5fc3\u662f\u4ec0\u4e48\uff1f\u4e24\u4e2a\u6838\u5fc3\u6570\u636e\u7ed3\u6784\uff1a\u8fde\u63a5\u6570\u7ec4\uff0c\u9501\u6570\u636e\uff1b\u4e09\u4e2a\u6838\u5fc3\u63a5\u53e3\uff1a\u521d\u59cb\u5316\uff0c\u62ff\u51fa\u8fde\u63a5\uff0c\u653e\u56de\u8fde\u63a5\uff1b","title":"\u8fde\u63a5\u6c60"},{"location":"chapter_2/jiagoushisiweihetezhi/#_18","text":"","title":"\u7ebf\u7a0b\u6c60"},{"location":"chapter_2/jiagoushisiweihetezhi/#worker","text":"\u5f53\u4efb\u52a1\u5230\u8fbe\u65f6\uff0c\u4efb\u52a1\u53ef\u4ee5\u4e0d\u9700\u8981\u7b49\u5230\u7ebf\u7a0b\u521b\u5efa\u5c31\u80fd\u7acb\u5373\u6267\u884c.","title":"\u7ebf\u7a0b\u6c60\u6280\u672f\u89e3\u51b3\u7684\u95ee\u9898\u662f\uff1a \u4fdd\u6301\u4e00\u5b9a\u91cf\u7684worker\u7ebf\u7a0b\uff0c\u628a\u63d0\u4ea4\u4efb\u52a1\u548c\u6267\u884c\u4efb\u52a1\u8fdb\u884c\u89e3\u8026."},{"location":"chapter_2/jiagoushisiweihetezhi/#7","text":"\u8fd9\u4e9b\u53c2\u6570\u5206\u522b\u662f int corePoolSize \uff1a\u6838\u5fc3\u7ebf\u7a0b\u6570 int maximumPoolSize \uff1a\u6700\u5927\u7ebf\u7a0b\u6570 long keepAliveTime \uff1a\u975e\u6838\u5fc3\u7ebf\u7a0b\u7684\u7a7a\u95f2\u65f6\u95f4 TimeUnit unit \uff1a\u7a7a\u95f2\u65f6\u95f4\u7684\u5355\u4f4d BlockingQueue<Runnable> workQueue \uff1a\u4efb\u52a1\u961f\u5217\uff08\u7ebf\u7a0b\u5b89\u5168\u7684\u963b\u585e\u961f\u5217\uff09 ThreadFactory threadFactory \uff1a\u7ebf\u7a0b\u5de5\u5382 RejectedExecutionHandler handler \uff1a\u62d2\u7edd\u7b56\u7565 corePoolSize : \u4e00\u5f00\u59cb\u4efb\u52a1\u6570\u5c11\u7684\u65f6\u5019\uff0c \u7ebf\u7a0b\u6570\u91cf\u4e0d\u4f1a\u4e00\u4e0b\u5b50\u5168\u5f00\u597d\uff0c\u800c\u662f\u6bcf\u5f53\u6709\u4e00\u4e2a\u65b0\u4efb\u52a1\u8fdb\u6765\uff0c\u540c\u65f6\u6ca1\u6709\u7a7a\u95f2\u7ebf\u7a0b\u65f6\uff0c\u5c31\u4f1a\u65b0\u5f00\u4e00\u4e2a\u7ebf\u7a0b, \u5982\u4f55\u521b\u5efa\u7ebf\u7a0b\u5462\uff0c\u7531 theadFactory \u65b9\u6cd5\u6307\u5b9a\u3002\u76f4\u5230\u8fbe\u5230 corePoolSize \u8fd9\u4e2a\u6570\u91cf \u5f53\u8fbe\u5230 corePoolSize \u65f6\uff0c\u5982\u679c\u8fd8\u6709\u4efb\u52a1\u4e0d\u65ad\u88ab\u63d0\u4ea4\u8fdb\u6765\uff0c\u540c\u65f6\u6ca1\u6709\u7a7a\u95f2\u7ebf\u7a0b\u53bb\u505a\u8fd9\u4e9b\u4efb\u52a1\uff0c\u90a3\u4e48\u4f1a\u88ab\u52a0\u5165\u4e00\u4e2a\u961f\u5217\uff0c workQueue \u76f4\u5230\u6709\u90a3\u4e48\u4e00\u4e2a\u65f6\u523b\uff0c workQueue \u6ee1\u4e86\uff0c\uff08\u4e3b\u8981\u662f\u79d2\u6740\u7c7b\u7684\u9ad8QPS\u4e1a\u52a1\u573a\u666f\uff09\u90a3\u4e48\u7ebf\u7a0b\u6c60\u53c8\u4f1a\u7ee7\u7eed\u52a0\u7ebf\u7a0b\u6570\u91cf\uff0c\u76f4\u5230\u52a0\u6ee1 maximumPoolSize \u5982\u679c\u52a0\u6ee1 maximumPoolSize \u8fd8\u4e0d\u591f\uff0c\u90a3\u4e48\u65b0\u6765\u7684\u4efb\u52a1\u4f1a\u88ab\u62d2\u7edd\uff0c\u62d2\u7edd\u7684\u5904\u7406\u8005\u5c31\u662f\u90a3\u4e2a handler \u5b9a\u4e49\u7684\u65b9\u6cd5. \u5982\u679c\u52a0\u6ee1\uff08\u6216\u8005\u5927\u4e8e corePoolSize \u4f46\u662f\u5c0f\u4e8e maximumPoolSize \uff09 maximumPoolSize \u8db3\u591f\u5904\u7406\u65b0\u4efb\u52a1, \u90a3\u4e48\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u4f1a\u6709\u7a7a\u95f2\u7684\u7ebf\u7a0b\u51fa\u6765\u3002 \u8fd9\u4e9b\u7ebf\u7a0b\u5c31\u79f0\u4e3a \u975e\u6838\u5fc3\u7ebf\u7a0b \uff0c \u975e\u6838\u5fc3\u7ebf\u7a0b \u7a7a\u95f2\u4e00\u6bb5\u65f6\u95f4\u540e \uff0c\uff08\u8fd9\u6bb5\u65f6\u95f4\u7531 keepAliveTime * unit \u51b3\u5b9a\uff09\uff0c\u5c31\u4f1a\u88ab\u9500\u6bc1\uff0c\u51cf\u5c11\u7cfb\u7edf\u8d44\u6e90\u6d88\u8017.","title":"\u7ebf\u7a0b\u6c60\u67097\u4e2a\u6838\u5fc3\u53c2\u6570"},{"location":"chapter_2/jiagoushisiweihetezhi/#_19","text":"","title":"\u4efb\u52a1\u63d0\u4ea4\u5230\u7ebf\u7a0b\u6c60\u7684\u6574\u4f53\u6d41\u7a0b"},{"location":"chapter_2/jiagoushisiweihetezhi/#mq","text":"","title":"MQ\u6280\u672f"},{"location":"chapter_2/jiagoushisiweihetezhi/#3_1","text":"\u6d88\u606f(Message) \u53d1\u5e03\u8005: (Producer) \u6d88\u8d39\u8005(\u5904\u7406\u8005): Consumer(worker)","title":"3\u4e2a\u6838\u5fc3\u6a21\u578b"},{"location":"chapter_2/jiagoushisiweihetezhi/#3_2","text":"\u89e3\u8026 \u4e0a\u4e0b\u6e38\u670d\u52a1\u8fdb\u884c\u9694\u79bb\uff0c\u6574\u4f53\u67b6\u6784\u66f4\u52a0\u6e05\u6670\u3001\u6574\u6d01. \u524a\u5cf0 \u5bf9\u4e8e\u77ed\u65f6\u95f4\u5185\u6781\u7aef\u6d41\u91cf\uff0c\u5bf9\u540e\u7aef\u670d\u52a1\u53ef\u4ee5\u542f\u5230\u4fdd\u62a4\u4f5c\u7528. \u5f02\u6b65 \u9488\u5bf9\u957f\u65f6\u95f4\u7684\u4efb\u52a1, \u524d\u7aef\u53ef\u4ee5\u5feb\u901f\u7ed9\u7528\u6237\u53cd\u9988\uff0c\u540e\u7aef\u53ef\u4ee5\u6162\u6162\u5904\u7406.","title":"3\u4e2a\u6838\u5fc3\u5e94\u7528\u573a\u666f"},{"location":"chapter_2/jiagoushisiweihetezhi/#_20","text":"\u8fd9\u91cc\u4e3b\u8981\u63a2\u8ba8\u6570\u636e\u5e93\u8bbe\u8ba1\u4e0a\u4e00\u4e9b\u601d\u8003\u70b9","title":"\u6570\u636e\u5e93\u6280\u672f"},{"location":"chapter_2/jiagoushisiweihetezhi/#_21","text":"\u6839\u636e\u201c\u4e1a\u52a1\u6a21\u5f0f\u201d\u8bbe\u8ba1\u8868\u7ed3\u6784\uff1b \u6839\u636e\u201c\u8bbf\u95ee\u6a21\u5f0f\u201d\u8bbe\u8ba1\u7d22\u5f15\u7ed3\u6784\uff1b","title":"\u5de5\u7a0b\u4e0a\uff0c\u6570\u636e\u5e93\u8981\u8bbe\u8ba1\u4e00\u4e9b\u4ec0\u4e48\uff1f"},{"location":"chapter_2/jiagoushisiweihetezhi/#_22","text":"\u8bfb\u6027\u80fd\u63d0\u5347\uff1b \u9ad8\u53ef\u7528\uff1b \u4e00\u81f4\u6027\u4fdd\u969c\uff1b \u6269\u5c55\u6027\uff1b \u5782\u76f4\u62c6\u5206\uff1b","title":"\u67b6\u6784\u4e0a\uff0c\u6570\u636e\u5e93\u8fd8\u5fc5\u987b\u8003\u8651\u4ec0\u4e48\uff1f"},{"location":"chapter_2/jiagoushisiweihetezhi/#_23","text":"\u5efa\u7acb\u7d22\u5f15\uff1b \u589e\u52a0\u4ece\u5e93\uff1b \u589e\u52a0\u7f13\u5b58","title":"\u63d0\u5347\u7cfb\u7edf\u8bfb\u53d6\u901f\u5ea6\uff0c\u6709\u54ea\u51e0\u79cd\u5e38\u89c1\u65b9\u6cd5\uff1f"},{"location":"chapter_2/jiagoushisiweihetezhi/#_24","text":"\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5197\u4f59+\u6545\u969c\u81ea\u52a8\u8f6c\u79fb. \u5199\u5e93\u9ad8\u53ef\u7528\uff0c\u5197\u4f59\u5199\u5e93\uff1b \u8bfb\u5e93\u9ad8\u53ef\u7528\uff0c\u5197\u4f59\u8bfb\u5e93\uff1b","title":"\u5982\u4f55\u4fdd\u8bc1\u6570\u636e\u5e93\u7684\u9ad8\u53ef\u7528\uff1f"},{"location":"chapter_2/jiagoushisiweihetezhi/#_25","text":"\u4e1a\u52a1\u5bb9\u5fcd\uff1b \u5f3a\u5236\u8bfb\u4e3b\uff1b \u5728\u4ece\u5e93\u6709\u53ef\u80fd\u8bfb\u5230\u65e7\u6570\u636e\u65f6\uff0c\u9009\u62e9\u6027\u8bfb\u4e3b","title":"\u4e3b\u4ece\u5ef6\u65f6\uff0c\u6709\u4ec0\u4e48\u4f18\u5316\u65b9\u6848\uff1f"},{"location":"chapter_2/jiagoushisiweihetezhi/#service-discovery","text":"\u670d\u52a1\u53d1\u73b0\u8981\u89e3\u51b3\u7684\u662f\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u6700\u5e38\u89c1\u7684\u95ee\u9898\u4e4b\u4e00\uff0c\u5373\u5728\u540c\u4e00\u4e2a\u5206\u5e03\u5f0f\u96c6\u7fa4\u4e2d\u7684\u8fdb\u7a0b\u6216\u670d\u52a1\uff0c\u8981\u5982\u4f55\u624d\u80fd\u627e\u5230\u5bf9\u65b9\u5e76\u5efa\u7acb\u8fde\u63a5\u3002\u672c\u8d28\u4e0a\u6765\u8bf4\uff0c\u670d\u52a1\u53d1\u73b0\u5c31\u662f\u60f3\u8981\u4e86\u89e3\u96c6\u7fa4\u4e2d\u662f\u5426\u6709\u8fdb\u7a0b\u5728\u76d1\u542c udp \u6216 tcp \u7aef\u53e3\uff0c\u5e76\u4e14\u901a\u8fc7\u540d\u5b57\u5c31\u53ef\u4ee5\u67e5\u627e\u548c\u8fde\u63a5\u3002","title":"\u670d\u52a1\u53d1\u73b0\uff08Service Discovery\uff09\u4e2d\u95f4\u4ef6"},{"location":"chapter_2/jiagoushisiweihetezhi/#3_3","text":"\u8981\u89e3\u51b3\u670d\u52a1\u53d1\u73b0\u7684\u95ee\u9898\uff0c\u9700\u8981\u6709\u4e0b\u9762\u4e09\u5927\u652f\u67f1\uff0c\u7f3a\u4e00\u4e0d\u53ef: \u4e00\u4e2a\u5f3a\u4e00\u81f4\u6027\u3001\u9ad8\u53ef\u7528\u7684\u670d\u52a1\u5b58\u50a8\u76ee\u5f55. \u57fa\u4e8e Raft \u7b97\u6cd5\u7684 etcd \u5929\u751f\u5c31\u662f\u8fd9\u6837\u4e00\u4e2a\u5f3a\u4e00\u81f4\u6027\u9ad8\u53ef\u7528\u7684\u670d\u52a1\u5b58\u50a8\u76ee\u5f55\u3002 \u4e00\u81f4\u6027k/v\u5b58\u50a8. \u4e00\u79cd\u6ce8\u518c\u670d\u52a1\u548c\u76d1\u63a7\u670d\u52a1\u5065\u5eb7\u72b6\u6001\u7684\u673a\u5236\u3002 \u7528\u6237\u53ef\u4ee5\u5728 etcd \u4e2d\u6ce8\u518c\u670d\u52a1\uff0c\u5e76\u4e14\u5bf9\u6ce8\u518c\u7684\u670d\u52a1\u8bbe\u7f6e key TTL\uff0c\u7136\u540e\u5b9a\u65f6\u4fdd\u6301\u670d\u52a1\u7684\u5fc3\u8df3\u4ee5\u8fbe\u5230\u76d1\u63a7\u5065\u5eb7\u72b6\u6001\u7684\u6548\u679c\u3002 \u4e00\u79cd\u67e5\u627e\u548c\u8fde\u63a5\u670d\u52a1\u7684\u673a\u5236\u3002 \u901a\u8fc7\u5728 etcd \u6307\u5b9a\u7684\u4e3b\u9898\u4e0b\u6ce8\u518c\u7684\u670d\u52a1\u4e5f\u80fd\u5728\u5bf9\u5e94\u7684\u4e3b\u9898\u4e0b\u67e5\u627e\u5230\u3002\u4e3a\u4e86\u786e\u4fdd\u8fde\u63a5\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u4e2a\u670d\u52a1\u673a\u5668\u4e0a\u90fd\u90e8\u7f72\u4e00\u4e2a Proxy \u6a21\u5f0f\u7684 etcd\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u786e\u4fdd\u80fd\u8bbf\u95ee etcd \u96c6\u7fa4\u7684\u670d\u52a1\u90fd\u80fd\u4e92\u76f8\u8fde\u63a5\u3002","title":"\u89e3\u51b3\u670d\u52a1\u53d1\u73b0\u76843\u5927\u652f\u67f1"},{"location":"chapter_2/jiagoushisiweihetezhi/#_26","text":"\u662f\u4e0d\u9700\u8981\u4fee\u6539\u914d\u7f6e\uff0c\u5c31\u53d1\u73b0\u4e86\u670d\u52a1\uff0c\u8c03\u7528\u4e86\u670d\u52a1 \u6709\u4e00\u4e2a\u5730\u65b9\u52a8\u6001\u7684\u8bfb\u53d6\u914d\u7f6e\uff0c\u4ece\u800c\u80fd\u81ea\u52a8\u53bb\u8c03\u7528\u670d\u52a1\u3002 \u4e3e\u4e2a\u4f8b\u5b50, \u6bd4\u5982Prometheus\u8fdb\u7a0b\u6bcf5\u5206\u949f\u5468\u671f\u6027\u8bfb\u53d6\u4e00\u4e0b\u914d\u7f6e\u6587\u4ef6( /etc/prometheus/prometheus-file-sd.yml ), \u56e0\u6b64\u76f8\u5e94\u7684\u76d1\u63a7Job\u4fee\u6539\u4e4b\u540e\u65e0\u9700\u91cd\u542fPrometheus\u8fdb\u7a0b\u81ea\u52a8\u4f1a\u88ab\u53d1\u73b0.","title":"\u5173\u4e8e\u81ea\u52a8\u670d\u52a1\u53d1\u73b0"},{"location":"chapter_2/jiagoushisiweihetezhi/#_27","text":"\u5728\u670d\u52a1\u4e2d\u5fc3\u4e2d\uff0c\u5206\u4e3a\u4e24\u79cd\uff1a \u4e00\u79cd\u662f\u540d\u79f0\u603b\u7ebf\u7cfb\u7edf\uff0c\u4e5f\u5c31\u662fA\u7cfb\u7edf\u9700\u8981\u8c03\u7528\u67d0\u4e2a\u670d\u52a1\u7684\u65f6\u5019\uff0c\u53ea\u8981\u8bf7\u6c42\u670d\u52a1\u4e2d\u5fc3\u5373\u53ef\uff0c\u670d\u52a1\u4e2d\u5fc3\u4f1a\u81ea\u5df1\u53bb\u8c03\u7528\u8fdc\u7a0b\u7684\u670d\u52a1\u7136\u540e\u5f97\u5230\u54cd\u5e94\uff0c\u6700\u540e\u7531\u670d\u52a1\u4e2d\u5fc3\u54cd\u5e94\u7ed9A\u7cfb\u7edf\u3002\uff08ESB\u4f01\u4e1a\u670d\u52a1\u603b\u7ebf\uff09 \u4e00\u79cd\u662f\u540d\u79f0\u670d\u52a1\u7cfb\u7edf\uff0c\u4e5f\u5c31\u662fA\u7cfb\u7edf\u9700\u8981\u8c03\u7528\u67d0\u4e2a\u670d\u52a1\u7684\u65f6\u5019\uff0c\u53bb\u670d\u52a1\u4e2d\u5fc3\u83b7\u53d6\u5230\u8fdc\u7a0b\u7684\u670d\u52a1ip+port\uff0c\u7136\u540eA\u7cfb\u7edf\u81ea\u5df1\u53d1\u9001\u8bf7\u6c42\u83b7\u5f97\u54cd\u5e94\uff08\u548cDNS\u7c7b\u4f3c\uff0c\u53ea\u662f\u4e3a\u4e86\u89e3\u6790\u51faIP\u548c\u7aef\u53e3)","title":"\u670d\u52a1\u4e2d\u5fc3"},{"location":"chapter_2/jiagoushisiweihetezhi/#consul","text":"Consul\u7684\u4f5c\u7528\u4e3b\u8981\u662f\u7ba1\u7406\u8fd9\u4e9b\u96c6\u7fa4\u670d\u52a1\u7684\u914d\u7f6e\uff0c\u6574\u4f53\u6d41\u7a0b\u662f\u8fd9\u6837\u5b50\u7684\uff1a\u670d\u52a1\uff08\u8fdb\u7a0b\uff09\u542f\u52a8\u7684\u65f6\u5019\u628a\u670d\u52a1\u540d\u548c\u81ea\u5df1\u7684IP\u3001\u7aef\u53e3\u901a\u8fc7HTTP\u544a\u8bc9\u6211\uff0c\u6211\u5c06\u8fd9\u4e9b\u4fe1\u606f\u8bb0\u5230\u81ea\u5df1\u7684\u5185\u5b58\u8868\u683c\u4e2d\uff0c\u5ba2\u6237\u7aef\u8c03\u7528\u65f6\u5e26\u4e0a\u8981\u67e5\u8be2\u7684\u670d\u52a1\u540d\u901a\u8fc7HTTP\u53d1\u9001\u7ed9\u6211\uff0c\u6211\u518d\u81ea\u5df1\u7684\u5185\u5b58\u8868\u4e2d\u627e\u5230\u53eb\u8fd9\u670d\u52a1\u540d\u7684\u6240\u6709\u914d\u7f6e\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u3002 \u5e73\u65f6\u6211\u8fd8\u8981\u505a\u4e00\u4e9b\u670d\u52a1\u5065\u5eb7\u68c0\u67e5\u7684\u4e8b\u513f\uff0c\u5728\u4e0a\u9762\u670d\u52a1\u542f\u52a8\u7684\u65f6\u5019\uff0c\u670d\u52a1\u8fd8\u8981\u7ed9\u6211\u914d\u7f6e\u4e00\u4e2a\u68c0\u67e5\u63a5\u53e3\u548c\u68c0\u67e5\u9891\u7387\u7b49\u4e00\u4e9b\u53c2\u6570\uff0c\u6211\u4f1a\u6309\u8fd9\u4e9b\u53c2\u6570\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\uff0c\u6bd4\u598210\u79d2\u949f\u53bb\u8bf7\u6c42\u4e00\u4e0b\u8fd9\u4e2a\u63a5\u53e3\uff0c\u5982\u679c\u4e0d\u901a\uff0c\u6211\u5c31\u96945\u79d2\u518d\u91cd\u8bd5\u4e0b\uff0c\u5982\u679c\u91cd\u8bd53\u6b21\u8fd8\u4e0d\u901a\uff0c\u6211\u5c31\u8ba4\u5b9a\u8fd9\u4e2a\u670d\u52a1\u6302\u6389\u4e86\uff0c\u5c31\u4ece\u5185\u5b58\u8868\u683c\u4e2d\u5220\u6389\u8fd9\u4e2a\u670d\u52a1\u914d\u7f6e\uff0c\u4e0d\u7136\u5ba2\u6237\u7aef\u8981\u8bf7\u6c42\u5230\u8fd9\u4e2a\u4e0d\u901a\u670d\u52a1\uff0c\u6211\u5c31\u7f6a\u8fc7\u4e86\u3002 Consul \u66f4\u50cf\u662f\u4e00\u4e2a full stack \u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5b83\u4e0d\u4ec5\u63d0\u4f9b\u4e86\u4e00\u81f4\u6027 k/v \u5b58\u50a8\uff0c\u8fd8\u5c01\u88c5\u4e86\u670d\u52a1\u53d1\u73b0\uff0c\u5065\u5eb7\u68c0\u67e5\uff0c\u5185\u7f6e\u4e86 DNS server \u7b49\u7b49.","title":"Consul\u67b6\u6784\u56fe"},{"location":"chapter_2/jiagoushisiweihetezhi/#service-mesh","text":"","title":"\u5fae\u670d\u52a1\u67b6\u6784\u548c\u670d\u52a1\u7f51\u683c\uff08Service Mesh\uff09"},{"location":"chapter_2/jiagoushisiweihetezhi/#_28","text":"","title":"\u5e38\u89c1\u7684\u670d\u52a1\u7aef\u67b6\u6784"},{"location":"chapter_2/jiagoushisiweihetezhi/#_29","text":"\u7528\u6237\u6d41\u91cf\u8fdb\u5165\u670d\u52a1\u7aef\u4e4b\u540e, \u670d\u52a1\u7aef(\u6307\u4e0a\u56fe\u4e2d\u7684 Web\u670d\u52a1 \u548c Worker\u96c6\u7fa4 )\u591a\u79cd \u5e94\u7528 \u53ef\u4ee5\u548c \u64cd\u4f5c\u7cfb\u7edf\u7684\u8fdb\u7a0b \u5f62\u6210 \u591a\u5bf9\u591a\u7684\u6a21\u5f0f , \u6bcf\u79cd \u5e94\u7528 \u6709\u5982\u4e0b\u7279\u6027 \u987a\u7545\u3001\u4f4e\u6210\u672c\u7684\u4e92\u76f8\u8c03\u7528\u522b\u7684 \u5e94\u7528 \u9ad8\u53ef\u7528 \u65e0\u9650\u6027\u80fd\u6269\u5c55(\u81ea\u52a8\u5316\u6269\u7f29\u5bb9) \u8d1f\u8f7d\u5747\u8861 \u5fae\u670d\u52a1\u90e8\u7f72\u7684\u6700\u4f73\u5b9e\u8df5\u662f\u4ec0\u4e48? Kubernetes\u96c6\u7fa4","title":"\u5fae\u670d\u52a1\u67b6\u6784\u8981\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898?"},{"location":"chapter_2/jiagoushisiweihetezhi/#service-mesh_1","text":"","title":"Service Mesh\u7684\u7531\u6765"},{"location":"chapter_2/jiagoushisiweihetezhi/#_30","text":"\u4e92\u8054\u7f51\u516c\u53f8\u4e00\u822c\u4f1a\u6709\u4e00\u4e2a\u201c\u67b6\u6784\u90e8\u201d\uff0c\u7814\u53d1\u6846\u67b6\u3001\u7ec4\u4ef6\u3001\u5de5\u5177\u4e0e\u6280\u672f\u5e73\u53f0\uff1b \u4e1a\u52a1\u7814\u53d1\u90e8\u95e8\u76f4\u63a5\u4f7f\u7528\u76f8\u5173\u6846\u67b6\u3001\u7ec4\u4ef6\u3001\u5de5\u5177\u4e0e\u6280\u672f\u5e73\u53f0\uff0c\u4eab\u53d7\u5404\u79cd\u201c\u9ed1\u79d1\u6280\u201d\u5e26\u6765\u7684\u4fbf\u5229\uff1b \u5bf9\u4e8e\u4e0a\u8ff0\u201c\u9ed1\u79d1\u6280\u201d\u7684\u4f7f\u7528\u4e0e\u63a8\u5e7f\uff0c\u5b58\u5728\u4ec0\u4e48\u95ee\u9898\uff1f\u6846\u67b6\u3001\u7ec4\u4ef6\u3001\u5de5\u5177\u4e0e\u6280\u672f\u5e73\u53f0\u7684\u4f7f\u7528\u4e0e\u63a8\u5e7f\uff0c\u5f80\u5f80\u4f1a\u9047\u5230\u4ee5\u4e0b\u4e00\u4e9b\u95ee\u9898\uff1a \u4e1a\u52a1\u7814\u53d1\u56e2\u961f\uff0c\u9700\u8981\u82b1\u5927\u91cf\u65f6\u95f4\u53bb\u5b66\u4e60\u3001\u4f7f\u7528\u57fa\u7840\u6846\u67b6\u4e0e\u5404\u7c7b\u5de5\u5177\uff1b \u67b6\u6784\u90e8\uff0c\u5bf9\u4e8e\u201c\u9ed1\u79d1\u6280\u201d\u4e0d\u540c\u8bed\u8a00\u5ba2\u6237\u7aef\u7684\u652f\u6301\uff0c\u5f80\u5f80\u8981\u5f00\u53d1C-client\uff0cPython-client\uff0cgo-client\uff0cJava-client\u591a\u8bed\u8a00\u7248\u672c\uff1b \u67b6\u6784\u90e8\uff0c\u201c\u9ed1\u79d1\u6280\u201d client\u8981\u7ef4\u62a4m\u4e2a\u7248\u672c\uff0c server\u8981\u7ef4\u62a4n\u4e2a\u7248\u672c\uff0c\u517c\u5bb9\u6027\u8981\u6d4b\u8bd5m*n\u4e2a\u7248\u672c\uff1b \u6bcf\u6b21\u201c\u9ed1\u79d1\u6280\u201d\u7684\u5347\u7ea7\uff0c\u90fd\u9700\u8981\u63a8\u52a8\u4e0a\u4e0b\u6e38\u8fdb\u884c\u5347\u7ea7\uff0c\u8fd9\u4e2a\u5468\u671f\u5f80\u5f80\u662f\u4ee5\u5b63\u5ea6\u3001\u534a\u5e74\u3001\u53c8\u751a\u81f3\u66f4\u4e45\uff0c\u6574\u4f53\u6548\u7387\u6781\u4f4e\uff1b \u89e3\u51b3\u601d\u8def\u662f: \u89e3\u8026\uff0c\u5c06\u4e1a\u52a1\u670d\u52a1\u62c6\u5206\u6210\u4e24\u4e2a\u8fdb\u7a0b \uff1a \u4e00\u4e2a\u8fdb\u7a0b\u5b9e\u73b0\u4e1a\u52a1\u903b\u8f91\uff08\u4e0d\u7ba1\u662f\u8c03\u7528\u65b9\uff0c\u8fd8\u662f\u670d\u52a1\u63d0\u4f9b\u65b9\uff09\uff0c biz \uff0c\u5373\u4e0a\u56fe\u767d\u8272\u65b9\u5757\uff1b \u4e00\u4e2a\u8fdb\u7a0b\u5b9e\u73b0\u5e95\u5c42\u6280\u672f\u4f53\u7cfb\uff0c proxy \uff0c\u5373\u4e0a\u56fe\u84dd\u8272\u65b9\u5757\uff1b(\u8d1f\u8f7d\u5747\u8861\u3001\u76d1\u63a7\u544a\u8b66\u3001\u670d\u52a1\u53d1\u73b0\u4e0e\u6cbb\u7406\u3001\u8c03\u7528\u94fe\u2026\u7b49\u8bf8\u591a\u57fa\u7840\u8bbe\u65bd\uff0c\u90fd\u653e\u5230\u8fd9\u4e00\u5c42\u5b9e\u73b0\u3002) \u4ed6\u4eec\u4e4b\u95f4\u6709\u8fd9\u6837\u4e00\u4e9b\u7279\u70b9\uff1a 1. biz\u548cproxy\u5171\u540c\u8bde\u751f\uff0c\u5171\u540c\u6d88\u4ea1\uff0c\u4e92\u4e3a\u672c\u5730\u90e8\u7f72\uff0c\u5373\u4e0a\u56fe\u865a\u7ebf\u65b9\u6846\uff1b 2. biz\u548cproxy\u4e4b\u95f4\uff0c\u4e3a\u672c\u5730\u901a\u8baf\uff0c\u5373\u4e0a\u56fe\u9ed1\u8272\u7bad\u5934\uff1b 3.\u6240\u6709biz\u4e4b\u95f4\u7684\u901a\u8baf\uff0c\u90fd\u901a\u8fc7proxy\u4e4b\u95f4\u5b8c\u6210\uff0cproxy\u4e4b\u95f4\u624d\u5b58\u5728\u8fdc\u7aef\u8fde\u63a5\uff0c\u5373\u4e0a\u56fe\u7ea2\u8272\u7bad\u5934\uff1b \u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86 \u4e1a\u52a1\u7684\u5f52\u4e1a\u52a1\uff0c\u6280\u672f\u7684\u5f52\u6280\u672f \uff0c\u5b9e\u73b0\u4e86\u5145\u5206\u89e3\u8026\uff0c\u5982\u679c\u6240\u6709\u8282\u70b9\u90fd\u5b9e\u73b0\u4e86\u89e3\u8026\uff0c\u6574\u4e2a\u67b6\u6784\u4f1a\u6f14\u53d8\u4e3a\uff1a \u7eff\u8272\u4e3a biz \uff1b \u84dd\u8272\u4e3a proxy \uff1b \u6574\u4e2a\u670d\u52a1\u96c6\u7fa4\u53d8\u6210\u4e86\u7f51\u683c\u72b6\uff0c\u8fd9\u5c31\u662f Service Mesh\u670d\u52a1\u7f51\u683c \u7684\u7531\u6765\u3002","title":"\u8d1f\u8f7d\u5747\u8861\u3001\u6570\u636e\u6536\u96c6\u3001\u670d\u52a1\u53d1\u73b0\u3001\u8c03\u7528\u94fe\u8ddf\u8e2a\u3002\u8fd9\u4e9b\u975e\u4e1a\u52a1\u7684\u529f\u80fd\uff0c\u4e00\u822c\u662f\u8c01\u5b9e\u73b0\u7684\u5462\uff1f"},{"location":"chapter_2/jiagoushisiweihetezhi/#service-mesh_2","text":"Istio","title":"Service Mesh\u7684\u884c\u4e1a\u5f00\u6e90\u6700\u4f73\u5b9e\u8df5\u662f\u4ec0\u4e48\uff1f"},{"location":"chapter_2/jiagoushisiweihetezhi/#istio","text":"Istio\u67b6\u6784\u5206\u4e3a\u4e24\u5c42\uff1a \u6570\u636e\u5e73\u9762(data plane)\uff1b \u63a7\u5236\u5e73\u9762(control plane)\uff1b","title":"Istio\u7684\u67b6\u6784\u6838\u5fc3\u662f\u4ec0\u4e48\uff1f"},{"location":"chapter_2/jiagoushisiweihetezhi/#istio_1","text":"\u53c2\u8003","title":"Istio\u7684\u4f18\u52bf\u8bb2\u89e3"},{"location":"chapter_2/jiagoushisiweihetezhi/#1-kubernetesserviceclusterip","text":"\u4e0a\u56fe\u7684 Kubernetes \u96c6\u7fa4\u4e2d\u4e00\u5171\u6709\u4e24\u4e2a\u8282\u70b9\u548c 4 \u4e2a Pod \uff0c\u6bcf\u4e2a Pod \u90fd\u6709\u4e00\u4e2a\u5bb9\u5668\u3002\u670d\u52a1 service-nginx \u6307\u5411 nginx pods \uff0c\u670d\u52a1 service-python \u6307\u5411 python pods \u3002\u7ea2\u7ebf\u663e\u793a\u4e86\u4ece pod1-nginx \u4e2d\u7684 nginx \u5bb9\u5668\u5411 service-python \u670d\u52a1\u53d1\u51fa\u7684\u8bf7\u6c42\uff0c\u8be5\u670d\u52a1\u5c06\u8bf7\u6c42\u91cd\u5b9a\u5411\u5230 pod2-python \u3002 \u901a\u8fc7\u670d\u52a1\u7684 ClusterIP \u5411\u540e\u7aef Pod \u8fdb\u884c\u7b80\u5355\u7684\u968f\u673a\u6216\u8f6e\u8be2\u8f6c\u53d1\u8bf7\u6c42\uff0c Kubernetes \u4e2d\u7684 Services \u5e76\u4e0d\u5b58\u5728\u4e8e\u7279\u5b9a\u7684\u8282\u70b9\u4e0a\uff0c\u800c\u662f\u5b58\u5728\u4e8e\u6574\u4e2a\u96c6\u7fa4\u4e2d\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u4e0b\u56fe \u4e2d\u770b\u5230\u66f4\u591a\u7ec6\u8282: \u4e0a\u56fe\u8981\u66f4\u8be6\u7ec6\u70b9\uff0cKubernetes \u4e2d\u7684\u670d\u52a1\u662f\u7531\u8fd0\u884c\u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7684 kube-proxy \u7ec4\u4ef6\u5b9e\u73b0\u7684\uff0c\u8be5\u7ec4\u4ef6\u521b\u5efa iptables \u89c4\u5219\uff0c\u5e76\u5c06\u8bf7\u6c42\u91cd\u5b9a\u5411\u5230 Pod\u3002\u56e0\u6b64\uff0c\u670d\u52a1\u5c31\u662f iptables \u89c4\u5219\u3002(\u8fd8\u6709\u5176\u4ed6\u4e0d\u4f7f\u7528 iptables \u7684\u4ee3\u7406\u6a21\u5f0f\uff0c\u4f46\u8fc7\u7a0b\u662f\u76f8\u540c\u7684\u3002)","title":"1. \u4e00\u5f00\u59cb,  Kubernetes\u96c6\u7fa4\u5185\u90e8\uff0c\u901a\u8fc7Service\u7684ClusterIP\u8fdb\u884c\u4e92\u76f8\u8c03\u7528\u7684\u60c5\u51b5"},{"location":"chapter_2/jiagoushisiweihetezhi/#2-istio-control-plane-data-plane","text":"Istio \u6700\u5e38\u89c1\u7684\u4ee3\u7406\u662f Envoy \uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u4ee3\u7406\uff08\u5982 Nginx \uff09\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u4ee3\u7406\u79f0\u4e3a istio-proxy \u3002 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e0d\u518d\u663e\u793a kube-proxy \u7ec4\u4ef6\uff0c\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u4fdd\u6301\u56fe\u50cf\u7684\u6574\u6d01\uff0c\u8fd9\u4e9b\u7ec4\u4ef6\u4ecd\u7136\u5b58\u5728\uff0c\u4f46\u662f\u62e5\u6709 istio-proxy \u7684 Pods \u5c06\u4e0d\u518d\u4f7f\u7528 kube-proxy \u7ec4\u4ef6\u4e86\u3002 \u6bcf\u5f53\u914d\u7f6e\u6216\u670d\u52a1\u53d1\u751f\u53d8\u5316\u65f6\uff0c Istio \u63a7\u5236\u5e73\u9762 \u5c31\u4f1a\u5bf9\u6240\u6709 istio-proxy sidecars \u8fdb\u884c\u5904\u7406\uff0c\u7c7b\u4f3c\u4e8e\u56fe 2 \u4e2d Kubernetes API \u5904\u7406\u6240\u6709 kube-proxy \u7ec4\u4ef6\u7684\u65b9\u5f0f\u3002 Istio \u63a7\u5236\u5e73\u9762 \u4f7f\u7528\u73b0\u6709\u7684 Kubernetes \u670d\u52a1\u6765\u63a5\u6536\u6bcf\u4e2a\u670d\u52a1\u70b9\u6240\u6307\u5411\u7684\u6240\u6709 pods \uff0c\u901a\u8fc7\u4f7f\u7528 pod IP \u5730\u5740\uff0cIstio \u5b9e\u73b0\u4e86\u81ea\u5df1\u7684\u8def\u7531\u3002","title":"2. \u6709\u4e86Istio\u4e4b\u540e, Control Plane \u548c  Data Plane\u4e4b\u95f4\u901a\u8baf\u7684\u793a\u610f\u56fe"},{"location":"chapter_2/jiagoushisiweihetezhi/#3-istio-istio-proxy-sidecars","text":"\u5728\u56fe 4 \u4e2d\uff0c\u6211\u4eec\u770b\u5230 Istio \u63a7\u5236\u5e73\u9762\u5982\u4f55\u5c06\u5f53\u524d\u914d\u7f6e\u5e94\u7528\u5230\u96c6\u7fa4\u4e2d\u7684\u6240\u6709 istio-proxy \u5bb9\u5668\uff0cIstio \u5c06\u628a Kubernetes \u670d\u52a1\u58f0\u660e\u8f6c\u6362\u6210\u5b83\u81ea\u5df1\u7684\u8def\u7531\u58f0\u660e\u3002","title":"3 \u5728 Istio \u63a7\u5236\u5e73\u9762\u5bf9\u6240\u6709 istio-proxy sidecars \u5904\u7406\u4e4b\u540e\uff0c\u5b83\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684"},{"location":"chapter_2/jiagoushisiweihetezhi/#4-istio","text":"\u5728\u4e0a\u56fe\u4e2d\uff0c\u6240\u6709\u7684 istio-proxy \u5bb9\u5668\u5df2\u7ecf\u88ab Istio \u63a7\u5236\u5e73\u9762 \u6240\u7ba1\u63a7\uff0c\u5e76\u5305\u542b\u6240\u6709\u5fc5\u8981\u7684\u8def\u7531\u4fe1\u606f\uff0c\u5982\u56fe 3/4 \u6240\u793a\uff0c\u6765\u81ea pod1-nginx \u7684 nginx \u5bb9\u5668 \u5411 service-python \u53d1\u51fa\u8bf7\u6c42\u3002 \u8bf7\u6c42\u88ab pod1-nginx \u7684 istio-proxy \u5bb9\u5668\u62e6\u622a\uff0c\u5e76\u88ab\u91cd\u5b9a\u5411\u5230\u4e00\u4e2a python pod \u7684 istio-proxy \u5bb9\u5668\uff0c\u8be5\u5bb9\u5668\u968f\u540e\u5c06\u8bf7\u6c42\u91cd\u5b9a\u5411\u5230 python \u5bb9\u5668\u3002","title":"4 \u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528 Istio \u53d1\u51fa\u8bf7\u6c42:"},{"location":"chapter_2/jiagoushisiweihetezhi/#istio_2","text":"\u73b0\u5728\u6240\u6709\u6d41\u91cf\u90fd\u901a\u8fc7\u6bcf\u4e2a Pod \u4e2d\u7684 istio-proxy \u5bb9\u5668\u8fdb\u884c\u8def\u7531\uff0c\u6bcf\u5f53 istio-proxy \u63a5\u6536\u5e76\u91cd\u5b9a\u5411\u4e00\u4e2a\u8bf7\u6c42\u65f6\uff0c\u5b83\u8fd8\u4f1a\u5c06\u6709\u5173\u8be5\u8bf7\u6c42\u7684\u4fe1\u606f\u63d0\u4ea4\u7ed9 Istio \u63a7\u5236\u5e73\u9762 \u3002\u56e0\u6b64 Istio \u63a7\u5236\u5e73\u9762 \u53ef\u4ee5\u51c6\u786e\u5730\u77e5\u9053\u8be5\u8bf7\u6c42\u6765\u81ea\u54ea\u4e2aPod\u3001\u5b58\u5728\u54ea\u4e9b HTTP \u5934\u3001\u4ece\u4e00\u4e2a istio-proxy \u5230\u53e6\u4e00\u4e2a istio-proxy \u7684\u8bf7\u6c42\u9700\u8981\u591a\u957f\u65f6\u95f4\u7b49\u7b49\u3002\u5728\u5177\u6709\u5f7c\u6b64\u901a\u4fe1\u7684\u670d\u52a1\u7684\u96c6\u7fa4\u4e2d\uff0c\u8fd9\u53ef\u4ee5\u63d0\u9ad8\u53ef\u89c2\u5bdf\u6027\u5e76\u66f4\u597d\u5730\u63a7\u5236\u6240\u6709\u6d41\u91cf \u5148\u8fdb\u7684\u8def\u7531 \uff0c Kubernetes \u5185\u90e8 Services \u53ea\u80fd\u5bf9 Pods \u6267\u884c\u8f6e\u8be2\u6216\u968f\u673a\u5206\u53d1\u8bf7\u6c42\uff0c\u4f7f\u7528 Istio \u53ef\u4ee5\u5b9e\u73b0\u66f4\u590d\u6742\u7684\u65b9\u5f0f\u3002\u6bd4\u5982\uff0c\u5982\u679c\u53d1\u751f\u9519\u8bef\uff0c\u6839\u636e\u8bf7\u6c42\u5934\u8fdb\u884c\u91cd\u5b9a\u5411\uff0c\u6216\u8005\u91cd\u5b9a\u5411\u5230\u6700\u5c11\u4f7f\u7528\u7684\u670d\u52a1\u3002 \u90e8\u7f72 \uff0c\u5b83\u5141\u8bb8\u5c06\u4e00\u5b9a\u6bd4\u4f8b\u7684\u6d41\u91cf\u8def\u7531\u5230\u7279\u5b9a\u7684\u670d\u52a1\u7248\u672c\uff0c\u56e0\u6b64\u5141\u8bb8\u7eff\u8272/\u84dd\u8272\u548c\u91d1\u4e1d\u96c0\u90e8\u7f72\u3002 \u52a0\u5bc6 \uff0c\u53ef\u4ee5\u5bf9 Pods \u4e4b\u95f4\u4ece istio-proxy \u5230 istio-proxy \u7684\u96c6\u7fa4\u5185\u90e8\u901a\u4fe1\u8fdb\u884c\u52a0\u5bc6\u3002 \u76d1\u63a7/\u56fe\u5f62 \uff0c Istio \u53ef\u4ee5\u8fde\u63a5\u5230 Prometheus \u7b49\u76d1\u63a7\u5de5\u5177\uff0c\u4e5f\u53ef\u4ee5\u4e0e Kiali \u4e00\u8d77\u5c55\u793a\u6240\u6709\u7684\u670d\u52a1\u548c\u4ed6\u4eec\u7684\u6d41\u91cf\u3002 \u8ffd\u8e2a \uff0c\u56e0\u4e3a Istio \u63a7\u5236\u5e73\u9762 \u62e5\u6709\u5927\u91cf\u5173\u4e8e\u8bf7\u6c42\u7684\u6570\u636e\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528 Jaeger \u7b49\u5de5\u5177\u8ddf\u8e2a\u548c\u68c0\u67e5\u8fd9\u4e9b\u6570\u636e\u3002","title":"Istio\u7684\u4f18\u52bf\u603b\u7ed3"},{"location":"chapter_2/jiagoushisiweihetezhi/#_31","text":"","title":"\u5ba2\u6237\u7aef\u7f51\u7edc\u8d28\u91cf\u6539\u5584\u6280\u672f"},{"location":"chapter_2/jiagoushisiweihetezhi/#_32","text":"\u4ee3\u7406\u8282\u70b9 CDN\u7684\u8fb9\u7f18\u8282\u70b9 \u516c\u53f8\u81ea\u7814\u7684\u4ee3\u7406\u8282\u70b9 \u4f18\u5316\u7684\u9aa8\u5e72\u7f51\u7edc \u5229\u7528\u516c\u6709\u4e91\u7684\u9aa8\u5e72\u7f51\u7edc \u62c9\u4e13\u7ebf","title":"\u672c\u8d28\u4e0a\u90fd\u662f\u5229\u7528\u8fb9\u7f18\u8282\u70b9(\u4ee3\u7406\u8282\u70b9)\u4ee5\u53ca\u4f18\u5316\u7684\u9aa8\u5e72\u7f51\u7edc\u6765\u964d\u4f4e\u7528\u6237\u8bbf\u95ee\u670d\u52a1\u7aef\u7684\u5ef6\u8fdf\uff0c\u63d0\u5347\u7528\u6237\u4f53\u9a8c."},{"location":"chapter_2/jiagoushisiweihetezhi/#_33","text":"\u4ee5\u4e0b\u662f\u4e0d\u540c\u4e1a\u52a1\u5ba2\u6237\u7aef\u90fd\u4f1a\u9700\u8981\u7684\u4e00\u4e9b\u901a\u7528\u529f\u80fd \u5ba2\u6237\u7aef\u7f51\u7edc\u63a2\u6d4b\u5668, \u63a2\u6d4b\u6700\u5feb\u5230\u8fbe\u670d\u52a1\u7aef\u7684\u8def\u5f84\u5229\u5668, \u5ba2\u6237\u7aef\u9009\u62e9\u8def\u5f84\u6709\u65f6\u5019\u5e76\u4e0d\u662f\u76f4\u8fde\u670d\u52a1\u7aef\u6700\u5feb\uff0c\u800c\u662f\u5148\u8fde\u63a5\u5230\u52a0\u901f\u8282\u70b9, \u518d\u7531\u52a0\u901f\u8282\u70b9\u4ee3\u7406\u56de\u5230\u670d\u52a1\u7aef\u5feb. \u56e0\u6b64\u4e0d\u540c\u5ba2\u6237\u7aef\u76f4\u63a5\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u901a\u7528\u7684SDK. \u5ba2\u6237\u7aefDump\u7cfb\u7edf, \u641c\u96c6\u4e0d\u540c\u5ba2\u6237\u7aef\u5954\u6e83\u7387\u5e76\u4e0a\u62a5. \u5ba2\u6237\u7aef\u901a\u7528\u4e0b\u8f7d\u5668, \u4e1a\u52a1\u7a0b\u5e8f\u65e0\u9700\u5b9e\u73b0\u4e0b\u8f7d\u903b\u8f91, \u76f4\u63a5\u8c03\u7528\u76f8\u5173SDK HTTPDNS SDK, \u9632\u52ab\u6301 LBS SDK, \u5ba2\u6237\u7aef\u83b7\u53d6\u5730\u7406\u4f4d\u7f6e\u3001\u9644\u8fd1\u7684\u4eba\u7b49 \u901a\u7528\u95ee\u9898\u63a2\u6d4b(Detect)\u548c\u4e0a\u62a5\u76f8\u5173SDK, \u4e0d\u540c\u5ba2\u6237\u7aef\u53ef\u4ee5\u76f4\u63a5\u96c6\u6210\u8be5SDK, \u5728\u7528\u6237\u4f7f\u7528\u5ba2\u6237\u7aef\u7684\u4efb\u610f\u9636\u6bb5\u6709\u95ee\u9898\u90fd\u53ef\u4ee5\u4e0a\u62a5","title":"\u5ba2\u6237\u7aef\u7a33\u5b9a\u6027\u63d0\u5347"},{"location":"chapter_2/jiagoushisiweihetezhi/#_34","text":"\u5f85\u8865\u5145","title":"\u5ba2\u6237\u7aef\u57cb\u70b9\u6700\u4f73\u5b9e\u8df5"},{"location":"chapter_2/rongliangguanli/","text":"\u6982\u8ff0 \u5bb9\u91cf\u7ba1\u7406\u7684\u76ee\u6807: \u4ee5\u5408\u7406\u7684\u5e95\u5c42\u8d44\u6e90\u6210\u672c\u6ee1\u8db3\u4e1a\u52a1\u9700\u6c42. \u5e95\u5c42\u8d44\u6e90\u5305\u62ec \u670d\u52a1\u5668 , \u6570\u636e\u5e93 , CDN \u7b49\u7b49. \u5bb9\u91cf\u7ba1\u7406\u7279\u6027 \u5bb9\u91cf\u7ba1\u7406\u662f\u4e00\u4e2a\u6301\u7eed\u7684\u8fc7\u7a0b. \u5bb9\u91cf\u7ba1\u7406\u7684\u65b9\u6cd5","title":"\u7b2c\u516d\u7bc7 \u5bb9\u91cf\u7ba1\u7406\u6982\u8ff0"},{"location":"chapter_2/rongliangguanli/#_1","text":"\u5bb9\u91cf\u7ba1\u7406\u7684\u76ee\u6807: \u4ee5\u5408\u7406\u7684\u5e95\u5c42\u8d44\u6e90\u6210\u672c\u6ee1\u8db3\u4e1a\u52a1\u9700\u6c42. \u5e95\u5c42\u8d44\u6e90\u5305\u62ec \u670d\u52a1\u5668 , \u6570\u636e\u5e93 , CDN \u7b49\u7b49.","title":"\u6982\u8ff0"},{"location":"chapter_2/rongliangguanli/#_2","text":"\u5bb9\u91cf\u7ba1\u7406\u662f\u4e00\u4e2a\u6301\u7eed\u7684\u8fc7\u7a0b.","title":"\u5bb9\u91cf\u7ba1\u7406\u7279\u6027"},{"location":"chapter_2/rongliangguanli/#_3","text":"","title":"\u5bb9\u91cf\u7ba1\u7406\u7684\u65b9\u6cd5"},{"location":"chapter_2/yunweijiazhi/","text":"\u6982\u8ff0 \u4e00 \u7528\u4e00\u53e5\u8bdd\u6765\u6982\u62ec\u8fd0\u7ef4\u7684\u4ef7\u503c \u8fd9\u91cc\u5206\u4e09\u6b21\u6982\u62ec, \u5176\u5b9e\u662f\u4e00\u4e2a\u610f\u601d \u4e3a\u4ea7\u54c1\u63d0\u4f9b\u53ef\u63a7\u6210\u672c\u4e0b\u9ad8\u8d28\u3001\u9ad8\u6548\u7684\u8fd0\u7ef4\u670d\u52a1 \u82b1\u66f4\u5c11\u7684\u94b1\uff0c\u8ba9\u4ea7\u54c1\u66f4\u5feb\u8fed\u4ee3\uff0c\u66f4\u7a33\u5b9a\u8fd0\u884c \u80fd\u591f\u505a\u5230\u65e0\u7f1d\u3001\u5b89\u5168\u3001\u4e0d\u505c\u7684\u53d8\u66f4\u7ba1\u7406\uff0c\u662f\u8fd0\u7ef4\u90e8\u95e8\u80fd\u7ed9\u516c\u53f8\u505a\u7684\u6700\u5927\u8d21\u732e \u6709\u4e9b\u8fd0\u7ef4\u540c\u4ec1\u6982\u51b5\u4e86\u8fd0\u7ef4\u4e5d\u5b57\u771f\u8a00\u201c\u5b89\u5168\u7a33\u5b9a\u9ad8\u6548\u4f4e\u6210\u672c\u201d\uff0c\u8bf4\u7684\u975e\u5e38\u5230\u4f4d\u3002 \u5927\u90e8\u5206\u516c\u53f8,\u8fd0\u7ef4\u90e8\u95e8\u5e94\u8be5\u4f1a\u6709\u4ee5\u4e0b 4 \u4e2a\u56e2\u961f: \u4e1a\u52a1\u8fd0\u7ef4 \uff08\u8d1f\u8d23\u548c\u5177\u4f53\u7684\u4e1a\u52a1\u90e8\u95e8\u5bf9\u63a5,\u5229\u7528\u73b0\u6709\u7684\u5de5\u5177\u548c\u5f00\u6e90\u6280\u672f\uff0c\u89e3\u51b3\u4e1a\u52a1\u90e8\u95e8\u7684\u5404\u7c7b\u8fd0\u7ef4\u9700\u6c42\uff09 \u8fd0\u7ef4\u5f00\u53d1 (\u8d1f\u8d23\u6574\u4e2a\u8fd0\u7ef4\u56e2\u961f\u7684\u5de5\u5177\u5efa\u8bbe\uff0c\u5f62\u6210\u4e00\u5957\u8fd0\u7ef4\u5de5\u5177\u5e73\u53f0) \u7cfb\u7edf\u8fd0\u7ef4 \uff08\u8d1f\u8d23\u6574\u4e2a\u57fa\u7840\u8bbe\u65bd\u7684\u7a33\u5b9a\u3001\u5305\u62ec\u64cd\u4f5c\u7cfb\u7edf\u5b9a\u5236\u3001\u865a\u62df\u5316\u3001\u673a\u623f\u7f51\u7edc\u7ba1\u7406\u7b49\uff09 \u76d1\u63a7\u8fd0\u7ef4 (7*24 \u5c0f\u65f6\u5012\u73ed,\u6709\u95ee\u9898\u76f4\u63a5 call \u76f8\u5e94\u7684\u8fd0\u7ef4\u548c\u7814\u53d1\u4eba\u5458\u8fdb\u884c\u89e3\u51b3) \u5f53\u7136,\u53ef\u80fd\u8fd8\u4f1a\u6709\u5355\u72ec\u7684\"\u5b89\u5168\u8fd0\u7ef4\"\u5c0f\u7ec4\uff0c\u4ee5\u53ca\u548c\u8fd0\u7ef4\u90e8\u5e76\u7acb\u7684\"DBA\"\u56e2\u961f. \u6211\u8ba4\u4e3a\u65e0\u8bba\u5728\u54ea\u4e2a\u56e2\u961f\uff0c\u8fd0\u7ef4\u5de5\u7a0b\u5e08\u4eec\u90fd\u5e94\u8be5\u628a\u201c\u5b89\u5168\u7a33\u5b9a\u9ad8\u6548\u4f4e\u6210\u672c\u201d\u8fd9\u4e2a\u4e5d\u5b57\u771f\u8a00\u7262\u8bb0\u5fc3\u5934,\u5bf9\u81ea\u5df1\u505a\u7684\u5de5\u4f5c\u4ece\u4e5d\u5b57\u771f\u8a00\u7684\u89d2\u5ea6\u53bb\u5c55\u5f00\u601d\u8003\u548c\u8fdb\u884c\u6548\u679c\u8861\u91cf. \u4e8c \u601d\u7ef4\u5bfc\u56fe (\u4e00) \u601d\u7ef4\u5bfc\u56fe \u5b89\u5168\u3001\u7a33\u5b9a\u3001\u9ad8\u6548\u3001\u4f4e\u6210\u672c\uff0c\u600e\u4e48\u624d\u80fd\u628a\u8fd9\u56db\u5927\u76ee\u6807\u505a\u597d\uff1f\u5e94\u8be5\u505a\u54ea\u4e9b\u4e8b\u60c5\u6765\u8fbe\u6210\u76ee\u6807\uff1f\u7528\u4e00\u5f20\u8111\u56fe\u6765\u68b3\u7406\u4e00\u4e0b\uff1a \uff08\u4e8c) \u53c2\u8003\u6587\u7ae0 \u8fd9\u7bc7\u6587\u7ae0\u662f\u5728 \u5fae\u4fe1\u516c\u4f17\u53f7\u770b\u5230\u5e76\u6536\u85cf\u7684 . \u611f\u8c22\u539f\u6587\u4f5c\u8005---\u79e6\u6653\u8f89\u3002 \u5173\u4e8e\u79e6\u6653\u8f89\u5927\u795e\uff0c\u6211\u6240\u8bb0\u5f97\u7684 2 \u4ef6\u4e8b\u60c5: \u662f\u5c0f\u7c73\u5f00\u6e90\u76d1\u63a7\u7cfb\u7edf open-falcon \u7684\u4e3b\u7a0b \u6bcf\u5929 6 \u70b9\u5230\u516c\u53f8\uff0c\u4e00\u5929\u53ef\u4ee5\u6bd4\u522b\u4eba\u591a\u505a\u5f88\u591a\u4e8b\u60c5 \u4e09 \u5173\u4e8e DevOps \u548c SRE DevOps\uff0c\u5f88\u591a\u4eba\u7406\u89e3\u4e3a\u5c31\u662f\u8ba9\u7814\u53d1\u90e8\u95e8\u505a\u8fd0\u7ef4\u7684\u4e8b\uff0c\u6216\u8005\u8fd0\u7ef4\u90e8\u95e8\u505a\u7814\u53d1\u7684\u4e8b\u60c5\uff0c\u4f46\u5b9e\u9645\u4e0a DevOps \u5728\u56fd\u5916\u7684\u5b9a\u4e49\u66f4\u5bbd\u6cdb\u4e00\u70b9\u3002DevOps \u7684\u601d\u60f3\u66f4\u591a\u7684\u662f\u8bf4\u628a\u6574\u4e2a\u5f00\u53d1\u6d41\u7a0b\u7684\u754c\u9650\u6253\u901a\uff0c\u4ea7\u54c1\u6709\u7684\u65f6\u5019\u4e5f\u8981\u5e72\u4e00\u4e9b\u7814\u53d1\u7684\u4e8b\uff0c\u7814\u53d1\u6709\u65f6\u5019\u628a\u8fd9\u4e2a\u4fe1\u606f\u8981\u5f88\u5feb\u7684\u53cd\u9988\u7ed9\u8fd9\u4e2a\u4ea7\u54c1\uff0c\u5f00\u53d1\u548c\u8fd0\u7ef4\u6216\u8005 QA \u548c\u8fd0\u7ef4\u4e4b\u95f4\u7684\u754c\u9650\u4e5f\u6253\u901a\u3002 SRE \u5c31\u662f DevOps \u7684\u601d\u60f3\u5728\u5f00\u53d1\u548c\u8fd0\u7ef4\u4e4b\u95f4\u7684\u4e00\u4e2a\u5e73\u8861 . (\u4e00) SRE \u5de5\u4f5c\u804c\u8d23 \u8fd9\u4e2a\u56fe\u662f\u6211\u53d1\u660e\u7684\uff0c\u4e66\u4e2d\u6ca1\u6709\u63d0\u5230\u3002\u4e66\u91cc\u5927\u6982\u6709\u4e8c\u5341\u591a\u7ae0\u7684\u5185\u5bb9\u662f\u5728\u8bb2 SRE \u7684\u5404\u79cd\u65e5\u5e38\u5de5\u4f5c(In general, an SRE team is responsible for the availability, latency, performance, efficiency, change management, monitoring, emergency response, and capacity planning of their services)\uff0c\u7b80\u5355\u63d0\u4e86\u4e00\u4e0b\u5b83\u7684\u91d1\u5b57\u5854\u6a21\u578b\uff0c\u4e8e\u662f\u6211\u5f52\u7eb3\u603b\u7ed3\u4e86\u4e00\u4e0b\u3002\u8fd9\u91cc\u662f\u7531\u4e0b\u81f3\u4e0a\uff0c\u4e0b\u9762\u7684\u4e8b\u4efd\u989d\u6bd4\u8f83\u5927\u4e00\u70b9\uff0c\u4e0a\u9762\u7684\u4e8b\u4efd\u989d\u6bd4\u8f83\u5c0f\u4e00\u70b9\uff0c\u5206\u4e86\u4e09\u7c7b\u3002\u7b2c\u4e00\u7c7b\uff0c\u8fd0\u7ef4\u90e8\u95e8\u6700\u91cd\u8981\u7684\u662f\u5e94\u6025\u54cd\u5e94\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u4e1a\u52a1\u8d8a\u6765\u8d8a\u5927\uff0c\u4e0e\u8fd0\u8425\u7684\u7ed3\u5408\u8d8a\u6765\u8d8a\u7d27\u5bc6\uff0c\u5f88\u591a\u65f6\u5019\u8981\u5904\u7406\u7684\u4e8b\u60c5\u66f4\u591a\u7684\u662f\u5546\u4e1a\u548c\u8fd0\u8425\u4e0a\u7684\u4e8b\uff0c\u4e5f\u5305\u62ec\u8f6f\u4ef6\u4e0a\u7684\u95ee\u9898\uff0c\u8fd9\u4e2a\u90e8\u95e8\u6700\u7279\u6b8a\u6216\u8005\u6700\u552f\u4e00\u7684\u804c\u8d23\u5c31\u662f\u5e94\u6025\u54cd\u5e94\u3002\u4e4b\u4e0a\u662f\u65e5\u5e38\u8fd0\u7ef4\uff0c\u4fdd\u8bc1\u673a\u5668\u80fd\u591f\u6b63\u5e38\u66f4\u65b0\u3001\u5feb\u901f\u8fed\u4ee3\u3002\u518d\u5f80\u4e0a\u662f\u8f93\u51fa\u4e00\u4e9b\u5de5\u7a0b\u7814\u53d1\uff0c\u65e0\u8bba\u662f\u505a\u5de5\u5177\uff0c\u8fd8\u662f\u505a\u9ad8\u53ef\u7528\u67b6\u6784\u3001\u63d0\u9ad8\u53ef\u9760\u6027\uff0c\u8fd9\u4e9b\u90fd\u662f\u6700\u4e0a\u5c42\u7684\u4e1c\u897f\uff0c\u53ea\u6709\u628a\u5e95\u4e0b\u5168\u90e8\u505a\u597d\u4e86\u624d\u80fd\u8bf4\u5230\u4e0a\u9762\u3002 1 \u5e94\u6025\u54cd\u5e94 \u5e94\u6025\u54cd\u5e94\u662f\u8fd0\u7ef4\u90e8\u95e8\u5728\u516c\u53f8\u6700\u72ec\u7279\u7684\u4e00\u70b9\uff0c\u8868\u73b0\u4e3a\u5f53\u516c\u53f8\u51fa\u73b0\u95ee\u9898\u65f6\uff0c\u5e94\u8be5\u627e\u8c01\u6216\u8005\u6d41\u7a0b\u5e94\u8be5\u662f\u600e\u6837\u7684\u3002\u6211\u56de\u56fd\u4e4b\u540e\u89c1\u4e86\u4e0d\u5c11\u521d\u521b\u4f01\u4e1a\uff0c\u4ed6\u4eec\u7f51\u7ad9\u51fa\u95ee\u9898\u4e86\uff0c\u5f80\u5f80\u662f CEO \u5148\u53d1\u73b0\uff0cCEO \u6253\u7535\u8bdd\u201c\u54ce\uff0c\u8fd9\u4e2a\u5230\u5e95\u662f\u600e\u4e48\u56de\u4e8b\u554a\u201d\uff0c\u7136\u540e\u6bcf\u4e00\u4e2a\u4eba\u90fd\u8bf4\u201c\u4e0d\u77e5\u9053\u554a\uff0c\u4e0d\u662f\u6211\u8d1f\u8d23\u5440\uff0c\u6211\u5f97\u627e\u8c01\u8c01\u201d\u3002\u4e0d\u7ba1\u591a\u5927\u4e00\u4ef6\u4e8b\u90fd\u5f97\u4f20\u904d\u6574\u4e2a\u516c\u53f8\uff0c\u6574\u4e2a\u6548\u7387\u975e\u5e38\u6df7\u4e71\u3002 \u6211\u5728 Google \u5f85\u4e86\u516b\u5e74\u65f6\u95f4\uff0c\u8fd9\u6837\u7684\u6d41\u7a0b\u4e5f\u7ecf\u5386\u8fc7\uff0c\u4f46\u662f\u6700\u8fd1\u8fd9\u51e0\u5e74 Google \u975e\u5e38\u91cd\u89c6\u8fd9\u4e00\u70b9\uff0c\u5efa\u7acb\u4e86\u4e00\u6574\u5957\u5e94\u6025\u4e8b\u4ef6\u5904\u7406\u65b9\u5f0f\u3002\u9996\u5148\u8981\u6709\u5168\u9762\u76d1\u63a7\uff0c\u76d1\u63a7\u8fd9\u4ef6\u4e8b\u60c5\u662f\u6301\u4e45\u4e0d\u65ad\u7684\uff0c\u91cd\u4e2d\u4e4b\u91cd\u3002SRE \u6240\u6709\u4eba\u90fd\u8981\u975e\u5e38\u4e86\u89e3\u6574\u4e2a\u76d1\u63a7\u7cfb\u7edf\u5728\u6240\u6709\u4e1a\u52a1\u4e2d\u7684\u90e8\u7f72\u5b9e\u65bd\uff0c\u5176\u5b9e\u8fd9\u662f\u6211\u4eec\u5e73\u65f6\u82b1\u7cbe\u529b\u6700\u591a\u7684\u5730\u65b9\u3002\u76d1\u63a7\u7cfb\u7edf\u91cc\u9762\u5bf9\u6574\u4e2a\u7cfb\u7edf\u6240\u6709\u65b9\u9762\u90fd\u6709\u76d1\u63a7\uff0c\u4e0d\u5149\u5305\u62ec\u4e1a\u52a1\u6307\u6807\uff0c\u4e5f\u5305\u62ec\u6027\u80fd\u6307\u6807\u3001\u6548\u7387\u6307\u6807\u3002\u76d1\u63a7\u5e94\u8be5\u5e73\u53f0\u5316\u3001\u7cfb\u7edf\u5316\uff0c\u4e0d\u505c\u7684\u5f80\u4e0a\u79ef\u7d2f\uff0c\u591a\u505a\u4e00\u4e9b\u6a21\u677f\uff0c\u540c\u8d28\u5316\u7684\u7cfb\u7edf\u5c31\u53ef\u4ee5\u7528\u540c\u6837\u7684\u65b9\u6cd5\u53bb\u505a\u76d1\u63a7\u3002 \u7b2c\u4e8c\u70b9\u662f\u5e94\u6025\u4e8b\u52a1\u5904\u7406\uff0c\u5e94\u6025\u4e8b\u52a1\u5904\u7406\u5206\u4e24\u90e8\u5206\uff0c\u7b2c\u4e00\u90e8\u5206\u662f\u6f14\u4e60\uff0c\u53e6\u5916\u4e00\u90e8\u5206\u662f\u771f\u6b63\u7684\u5904\u7406\u6d41\u7a0b\u3002\u5982\u4f55\u628a\u5b83\u505a\u597d\uff1f\u5b9e\u9645\u4e0a\u5c31\u662f\u8981\u4e0d\u505c\u7684\u53bb\u6f14\u4e60\u3001\u53bb\u505a\u8fd9\u4e2a\u4e8b\u60c5\u3002\u50cf\u521a\u624d\u4e3e\u7684\u4f8b\u5b50\uff0c\u7f51\u7ad9\u6302\u4e86\uff0c\u9996\u5148\u4e0d\u5e94\u8be5 CEO \u5148\u53d1\u73b0\uff0c\u800c\u5e94\u8be5\u662f\u76d1\u63a7\u7cfb\u7edf\u6216\u8005\u62a5\u8b66\u7cfb\u7edf\u5148\u544a\u8b66\uff0c\u5728\u53d1\u73b0\u4e4b\u524d\u5c31\u5f88\u5e94\u8be5\u660e\u786e\u8fd9\u4e2a\u4e1c\u897f\u5e94\u8be5\u8c01\u6392\u67e5\uff0c\u8c01\u5904\u7406\uff0c\u8fd9\u4e2a\u4fe1\u606f\u5e94\u8be5\u65e9\u5c31\u53d1\u7ed9\u5408\u9002\u7684\u4eba\u53bb\u5904\u7406\uff0c\u751a\u81f3\u4ed6\u5e94\u8be5\u65e9\u5c31\u5728\u505a\u4e86\u3002\u5982\u679c\u53d1\u751f\u7279\u522b\u5927\u7684\uff0c\u9700\u8981\u8de8\u90e8\u95e8\u4e4b\u95f4\u534f\u4f5c\u7684\u95ee\u9898\uff0c\u90a3\u4e0d\u5e94\u8be5\u53ea\u662f\u9886\u5bfc\u73b0\u573a\u8c03\u914d\uff0c\u800c\u662f\u6574\u4e2a\u7ec4\u7ec7\u6bcf\u4e2a\u4eba\u90fd\u660e\u767d\u8fd9\u4e2a\u6d41\u7a0b\u5e94\u8be5\u662f\u600e\u4e48\u6837\u7684\uff0c\u76f4\u63a5\u5c31\u505a\u3002Google \u751a\u81f3\u53ef\u4ee5\u505a\u5230\u5728\u4e00\u6b21\u4e8b\u6545\u4e2d\u95f4\u4e24\u5730\u4ea4\u73ed\uff0c\u67d0\u4e2a\u56e2\u961f\u5904\u7406\u4e00\u534a\uff0c\u7136\u540e\u6211\u4ea4\u63a5\u7ed9\u53e6\u5916\u4e00\u8fb9\u56e2\u961f\uff0c\u5c31\u4e0b\u73ed\u56de\u5bb6\u4e86\uff0c\u6301\u7eed\u4e0d\u505c\u7684\u6709\u4eba\u7ee7\u7eed\u8ddf\u8e2a\u5904\u7406\u8fd9\u4ef6\u4e8b\u60c5\uff0c\u800c\u4e0d\u4f1a\u51fa\u73b0\u95ee\u9898\u3002\u8fd9\u6837\u4e00\u4e2a\u6a21\u5f0f\u662f\u6211\u89c9\u5f97\u975e\u5e38\u503c\u5f97\u6211\u4eec\u601d\u8003\u7684\u3002 \u5904\u7406\u5b8c\u95ee\u9898\u4e4b\u540e\uff0c\u8981\u603b\u7ed3\u3002\u4e4b\u524d\u542c\u8fc7\u7684\u4e00\u4e2a\u6545\u4e8b\u662f\uff0c\u67d0\u516c\u53f8\u4e1a\u52a1\u51fa\u73b0\u4e86\u4e00\u4e2a\u4e8b\u6545\uff0c\u5927\u5bb6\u52a0\u73ed\u52a0\u70b9\uff0c\u5341\u51e0\u4e2a\u5c0f\u65f6\u6ca1\u7761\u89c9\u628a\u8fd9\u4e8b\u641e\u5b9a\uff0c\u7136\u540e\u9886\u5bfc\u8fc7\u6765\u5c31\u8bf4\u4e86\u4e00\u53e5\u201c\u5927\u5bb6\u8f9b\u82e6\u4e86\uff0c\u56de\u5bb6\u7761\u89c9\u5427\u201d\u3002\u4f46\u662f\uff0c\u5176\u5b9e\u5728\u8fd9\u4e2a\u65f6\u5019\u6211\u8981\u8bf4\uff0c\u9886\u5bfc\u5149\u8bf4\u8fd9\u4e2a\u5176\u5b9e\u6070\u6070\u662f\u4e0d\u591f\u7684\u3002\u9886\u5bfc\u5728\u8fd9\u91cc\u5e94\u8be5\u95ee\uff1a\u4e3a\u4ec0\u4e48\u52a0\u73ed\u554a\uff1f\u8fd9\u4e2a\u4e8b\u60c5\u4e3a\u4ec0\u4e48\u4f1a\u53d1\u751f\u554a\uff0c\u4e0b\u6b21\u80fd\u4e0d\u80fd\u4e0d\u53d1\u751f\uff0c\u5927\u5bb6\u80fd\u4e0d\u80fd\u4e0d\u52a0\u73ed\uff0c\u80fd\u4e0d\u80fd\u4e0d\u71ac\u591c\uff1f\u8fd9\u6837\u624d\u5bf9, \u80fd\u505a\u5230\u4e8b\u540e\u603b\u7ed3\u8fd9\u4e2a\u4e8b\u60c5\u5f88\u96be\uff0c\u4f46\u53ea\u6709\u628a\u8fd9\u4e2a\u505a\u597d\u4e86\uff0c\u624d\u80fd\u964d\u4f4e\u4ee5\u540e\u95ee\u9898\u53d1\u751f\u7684\u51e0\u7387\u3002 2 \u65e5\u5e38\u8fd0\u7ef4 \u65e5\u5e38\u8fd0\u7ef4\u505a\u5f97\u6700\u591a\u7684\u53ef\u80fd\u662f\u53d8\u66f4\u7ba1\u7406\u3002\u4e1a\u52a1\u73b0\u5728\u53d1\u5c55\u975e\u5e38\u5feb\uff0c\u8fed\u4ee3\u901f\u5ea6\u3001\u8fed\u4ee3\u5468\u671f\u975e\u5e38\u5feb\u3002\u5176\u5b9e\u8fd9\u4ef6\u4e8b\u60c5\u80fd\u505a\u597d\uff0c \u80fd\u591f\u505a\u5230\u65e0\u7f1d\u3001\u5b89\u5168\u3001\u4e0d\u505c\u7684\u53d8\u66f4\u7ba1\u7406\uff0c\u662f\u8fd0\u7ef4\u90e8\u95e8\u80fd\u7ed9\u516c\u53f8\u505a\u7684\u6700\u5927\u8d21\u732e \u3002 \u7b2c\u4e8c\u4e2a\uff0c\u5bb9\u91cf\u89c4\u5212\uff0c\u5f53\u89c4\u6a21\u5927\u5230\u4e00\u5b9a\u7a0b\u5ea6\u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u6709\u4eba\u6765\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\u2014\u2014\u5230\u5e95\u8981\u4e70\u591a\u5c11\u65b0\u673a\u5668\uff0c\u80fd\u5426\u4fdd\u8bc1\u660e\u5e74\u7684\u6027\u80fd\u3001\u6548\u7387\uff0c\u90a3\u8c01\u6765\u8d1f\u8d23\u8fd9\u4ef6\u4e8b\u5462\uff1fSRE \u90e8\u95e8\u63d0\u51fa\u8fd9\u4e9b\u65b9\u6848\uff0c\u7136\u540e\u8981\u786e\u4fdd\u8fd9\u4e9b\u6307\u6807\u3001\u8fd9\u4e9b\u4e1c\u897f\u662f\u6709\u6570\u636e\u652f\u6491\u7684\uff0c\u786e\u5b9e\u80fd\u89e3\u51b3\u95ee\u9898\u7684\u3002 3 \u5de5\u7a0b\u7814\u53d1 \u5de5\u7a0b\u7814\u53d1\u867d\u7136\u505a\u5f97\u5c11\uff0c\u4f46\u662f\u5de5\u4f5c\u5f88\u5173\u952e\u3002SRE \u5728\u5de5\u7a0b\u7814\u53d1\u4e0a\u4e3b\u8981\u7684\u5de5\u4f5c\uff0c\u9996\u5148\u662f\u5e2e\u4ea7\u54c1\u90e8\u95e8\u786e\u5b9a\u4e00\u4e2a SLO\u3002SLO \u662f\u4e00\u4e2a\u670d\u52a1\u6307\u6807\uff0c\u6bcf\u4e00\u4e2a\u4ea7\u54c1\u90fd\u6709\u4e00\u4e2a\u670d\u52a1\u6307\u6807\u3002\u4efb\u4f55\u7cfb\u7edf\u90fd\u4e0d\u53ef\u80fd\u662f\u767e\u5206\u4e4b\u767e\u53ef\u9760\u7684\uff0c\u4e5f\u6ca1\u6709\u5fc5\u8981\u505a\u5230\u767e\u5206\u4e4b\u767e\u53ef\u9760\u3002\u8fd9\u91cc\u5f97\u6709\u4e00\u4e2a\u76ee\u6807\uff0c\u6bd4\u5982\u8bf4\u53ef\u4ee5\u6bcf\u4e2a\u6708\u4e2d\u65ad\u51e0\u5206\u949f\u3002\u8fd9\u4ef6\u4e8b\u60c5\u662f\u8981\u4ea7\u54c1\u90e8\u95e8\u8003\u8651\u6e05\u695a\u7684\u3002\u6bd4\u5982\u6211\u4e4b\u524d\u5728 YouTube \u505a\u89c6\u9891\u5b58\u50a8\u3001\u89c6\u9891\u70b9\u64ad\u7684\u65f6\u5019\uff0c\u8981\u8003\u8651\u6bcf\u4e2a\u89c6\u9891\u5230\u5e95\u662f\u5b58\u4e00\u4efd\u8fd8\u662f\u5b58\u4e24\u4efd\u7684\u95ee\u9898\uff0c\u5c06\u8fd9\u79cd\u95ee\u9898\u653e\u5230\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u90e8\u7f72\u89c4\u6a21\u91cc\u9762\u7684\u65f6\u5019\uff0c\u53ea\u6709\u4ea7\u54c1\u90e8\u95e8\u80fd\u591f\u62cd\u677f\u3002\u8bf4\u5230\u5e95\u662f\u8981\u4e0d\u8981\u82b1\u8fd9\u4e2a\u9884\u7b97\uff0c\u8981\u4e0d\u8981\u82b1\u8fd9\u4e48\u591a\u94b1\u53bb\u63d0\u9ad8 0.1%\u7684\u53ef\u9760\u6027\u6216\u8005 0.01%\u7684\u53ef\u9760\u6027\u3002 \u53e6\u5916\u4e00\u70b9\u662f\u65e0\u4eba\u5316\u8fd0\u7ef4\u3002\u5927\u5bb6\u90fd\u770b\u8fc7\u300a\u9ed1\u5ba2\u5e1d\u56fd\u300b\u5427\uff1f\u4e00\u9192\u6765\u53d1\u73b0\u5927\u5bb6\u90fd\u662f\u7535\u6c60\uff0c\u90fd\u662f\u4e3a\u673a\u5668\u670d\u52a1\u7684\u3002\u5176\u5b9e\u628a\u8fd9\u4e2a\u6bd4\u55bb\u653e\u5728\u8fd0\u7ef4\u90e8\u95e8\u975e\u5e38\u5408\u9002\u3002\u56e0\u4e3a\u5982\u679c\u4e0d\u505c\u7684\u5f00\u53d1\u51fa\u9700\u8981\u4eba\u6765\u64cd\u4f5c\u8fd0\u7ef4\u7684\u7cfb\u7edf\uff0c\u7ed3\u679c\u5927\u5bb6\u6700\u540e\u90fd\u662f\u7535\u6c60\uff0c\u660e\u663e\u662f\u4e0d\u53ef\u6301\u7eed\u7684\u3002\u5982\u679c\u4e0d\u505c\u7684\u4ea7\u751f\u8fd9\u79cd\u9700\u8981\u4eba\u6765\u64cd\u4f5c\u7684\u4e1c\u897f\uff0c\u4e0d\u505c\u7684\u62db\u4eba\uff0c\u6700\u540e\u5c31\u53d8\u6210\u4e0d\u505c\u7684\u8fd0\u7ef4\u8fd9\u4e2a\u4e1c\u897f\u3002\u628a\u6574\u4e2a\u6d41\u7a0b\u81ea\u52a8\u5316\uff0c\u5efa\u7acb\u4e00\u4e2a\u80fd\u591f\u5e94\u5bf9\u590d\u6742\u4e1a\u52a1\u7684\u5e73\u53f0\uff0c\u8fd9\u5c31\u662f\u5de5\u7a0b\u7814\u53d1\u4e0a\u6700\u9700\u8981\u7684\u4e1c\u897f\u3002 (\u4e8c) SRE \u6a21\u578b\u6210\u529f\u7684\u5173\u952e\u8981\u7d20 SRE \u5728 Google \u6709\u5341\u51e0\u5e74\u7684\u5386\u53f2\u4e86\u3002\u8fd9\u4e2a\u6a21\u578b\u662f\u5982\u4f55\u6210\u529f\u7684\uff1f\u6211\u603b\u7ed3\u5982\u4e0b\u51e0\u70b9\uff1a 1 \u804c\u4e1a\u5316 \u8fd0\u7ef4\u884c\u4e1a\u4ece\u6765\u90fd\u8bf4\u4e0d\u6e05\u695a\u81ea\u5df1\u662f\u5e72\u561b\u7684\uff0c\u8fd9\u662f\u4e0d\u5bf9\u7684\u3002\u5f88\u591a\u4eba\u8ba4\u4e3a\u4f1a\u64cd\u4f5c Linux\uff0c\u6216\u8005\u662f DBA\u3001\u4f1a\u914d\u7f51\u7edc\uff0c\u5c31\u7b97\u8fd0\u7ef4\u4e86\u3002\u5b9e\u9645\u4e0a\u8fd0\u7ef4\u7684\u8303\u56f4\u8981\u6bd4\u8fd9\u4e2a\u5927\u5f97\u591a\u3002\u8fd0\u7ef4\u5e94\u8be5\u662f\u8d1f\u8d23\u516c\u53f8\u4e1a\u52a1\u6b63\u5e38\u8fd0\u8f6c\u7684\u89d2\u8272\uff0c\u8fd9\u624d\u662f\u771f\u6b63\u7684\u8fd0\u7ef4\u3002\u5728\u51fa\u95ee\u9898\u7684\u65f6\u5019\u80fd\u89e3\u51b3\u95ee\u9898\uff0c\u4fdd\u969c\u4e1a\u52a1\u8fde\u7eed\u6027\uff0c\u751a\u81f3\u907f\u514d\u95ee\u9898\u53d1\u751f\uff0c\u8fd9\u624d\u662f\u8fd0\u7ef4\u804c\u4e1a\u7684\u5b9a\u4e49\u3002 \u5177\u4f53\u5982\u4f55\u505a\u5462\uff1f\u63a8\u6f14\u548c\u6f14\u4e60\u3002 \u63a8\u6f14\u662f\u7ed9\u4f60\u4e00\u5957\u7cfb\u7edf\uff0c\u4f60\u8981\u5206\u6790\u51fa\u6765\u5b83\u4f1a\u6709\u4ec0\u4e48\u6837\u7684\u5931\u8d25\u6a21\u5f0f\u3002\u6211\u4eec\u5f53\u65f6\u7ecf\u5e38\u5728\u9ed1\u677f\u4e0a\u753b\u7cfb\u7edf\u56fe\uff0c\u5927\u5bb6\u4e00\u8d77\u8ba8\u8bba\u5982\u679c\u8fd9\u4e2a\u7ec4\u4ef6\u51fa\u95ee\u9898\u4e86\u4f1a\u53d1\u751f\u4ec0\u4e48\u60c5\u51b5\uff0c\u7528\u6237\u5230\u5e95\u8fd8\u80fd\u4e0d\u80fd\u770b\u89c6\u9891\u4e86\uff0c\u7528\u6237\u8d2d\u4e70\u6d41\u7a0b\u8fd8\u80fd\u4e0d\u80fd\u8d70\u901a\u3002\u5b9e\u9645\u4e0a\u8fd9\u4e9b\u8fc7\u7a0b\u5f88\u591a\u65f6\u5019\u8f6f\u4ef6\u5f00\u53d1\u662f\u4e0d\u8003\u8651\u7684\uff0c\u4f46\u662f\u5982\u4f55\u62c6\u5206\u3001\u5982\u4f55\u53bb\u4fdd\u8bc1\u6bcf\u4e2a\u73af\u8282\u7684\u53ef\u9760\uff0c\u8fd9\u624d\u662f\u8fd0\u7ef4\u8fd9\u4e2a\u884c\u4e1a\u6700\u5173\u952e\u7684\u4e00\u70b9\uff0c\u6240\u4ee5\u4e00\u5b9a\u8981\u505a\u8fd9\u79cd\u63a8\u6f14\u3002\u53ea\u6709\u8fd9\u79cd\u63a8\u6f14\u624d\u80fd\u8f93\u51fa\u6539\u53d8\uff0c\u8ba9\u7cfb\u7edf\u66f4\u53ef\u9760\u3002 \u7b2c\u4e8c\u70b9\u662f\u6f14\u4e60\u3002\u6211\u4eec\u5f53\u65f6\u6bcf\u5468\u90fd\u4f1a\u8fdb\u884c\u4e00\u6b21\u5c0f\u578b\u707e\u96be\u6f14\u4e60\uff0c\u4f8b\u5982\u628a\u4ee5\u524d\u51fa\u73b0\u7684\u95ee\u9898\u62ff\u51fa\u6765\u4e00\u4e2a\uff0c\u8ba9\u65b0\u52a0\u5165\u56e2\u961f\u7684\u4eba\u53bb\u6f14\u4e60\uff0c\u6240\u6709\u5176\u4ed6\u7684\u4eba\u4e5f\u90fd\u8981\u53bb\u53c2\u52a0\u3002\u8fd9\u91cc\u4e3b\u8981\u662f\u89c2\u5bdf\u65b0\u4eba\u5230\u5e95\u662f\u600e\u4e48\u601d\u8003\u8fd9\u4e2a\u7cfb\u7edf\u7684\uff0c\u65b0\u4eba\u505a\u51fa\u7684\u51b3\u5b9a\u5230\u5e95\u662f\u4e0d\u662f\u6b63\u786e\u7684\u3002\u56e0\u4e3a\u4e00\u4e2a\u4eba\u505a\u51fa\u7684\u51b3\u5b9a\u662f\u4e0d\u662f\u6b63\u786e\u7684\u5b9e\u9645\u4e0a\u53d6\u51b3\u4e8e\u7cfb\u7edf\u7ed9\u7684\u53cd\u9988\u5230\u5e95\u662f\u4e0d\u662f\u5bf9\u7684\u3002Google \u8ba4\u4e3a\u8fd0\u7ef4\u590d\u6742\u7cfb\u7edf\u4e0d\u662f\u4e00\u4e2a\u9760\u667a\u5546\u548c\u8bb0\u5fc6\u529b\u5c31\u80fd\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u4e0d\u80fd\u4f9d\u8d56\u4eba\u4e00\u5b9a\u8981\u77e5\u9053\u8fd9\u6bb5\u8bdd\u6216\u8fd9\u4e2a\u77e5\u8bc6\u70b9\uff0c\u800c\u662f\u8981\u77e5\u9053\u4e00\u79cd\u65b9\u6cd5\uff0c\u77e5\u9053\u5982\u4f55\u53bb\u6392\u9664\u95ee\u9898\u6216\u6392\u67e5\u95ee\u9898\u3002\u8fd0\u7ef4\u7cfb\u7edf\u5e94\u8be5\u63d0\u4f9b\u8db3\u591f\u7684\u4fe1\u606f\uff0c\u8ba9\u8f6e\u503c\u7684\u4eba\u80fd\u591f\u7528\u6b63\u786e\u7684\u65b9\u6cd5\u53bb\u5904\u7406\u95ee\u9898\u3002\u8fd9\u5f88\u50cf\u662f\u80cc\u82f1\u8bed\u8f9e\u5178\u548c\u4f1a\u7528\u82f1\u8bed\u804a\u5929\u7684\u533a\u522b\uff0c\u4f60\u518d\u600e\u4e48\u80cc\u8f9e\u5178\u5173\u952e\u65f6\u523b\u4e5f\u662f\u8981\u67e5\u8f9e\u5178\u7684\uff0c\u4f46\u662f\u771f\u6b63\u80fd\u8fd0\u7528\u8fd9\u4e9b\u4fe1\u606f\u89e3\u51b3\u95ee\u9898\uff0c\u662f\u6bd4\u8f83\u96be\u7684\u3002 \u6b64\u5916\uff0c\u8981\u533a\u5206\u8d23\u4efb\u548c\u6307\u8d23\u3002\u8d23\u4efb\u548c\u6307\u8d23\u662f\u4e24\u4e2a\u4e8b\u60c5\uff0c\u4f46\u662f\u5f88\u591a\u516c\u53f8\u7684\u8fd0\u7ef4\u7ecf\u5e38\u5206\u4e0d\u6e05\u695a\u3002\u4ec0\u4e48\u53eb\u8d23\u4efb\uff0c\u5c31\u662f\u8fd9\u4e2a\u4e8b\u5230\u5e95\u8c01\u8d1f\u8d23\u3002\u4f46\u662f\u6307\u8d23\u662f\u53e6\u5916\u4e00\u56de\u4e8b\u3002\u4f8b\u5982\u4e00\u4e2a\u5458\u5de5\u6572\u9519\u4e86\u4e00\u4e2a\u547d\u4ee4\uff0c\u5927\u5bb6\u8bf4 \u201c\u90fd\u662f\u56e0\u4e3a\u4ed6\u7684\u9519\uff0c\u7ed9\u4ed6\u6263\u5de5\u8d44\u3001\u6263\u5956\u91d1\uff0c\u8ba9\u4ed6\u4e09\u5929\u4e0d\u5403\u996d\u201d\uff0c\u4f46\u8fd9\u5176\u5b9e\u5e76\u4e0d\u771f\u6b63\u89e3\u51b3\u95ee\u9898\u3002\u518d\u4f8b\u5982\uff0c\u6bd4\u5982\u8bf4\u4e00\u4e2a\u7cfb\u7edf\u8bbe\u8ba1\u7535\u6e90\u63d2\u5ea7\uff0c\u6ca1\u6709\u4ed4\u7ec6\u8003\u8651\uff0c\u5f88\u5bb9\u6613\u88ab\u4eba\u8e22\u5230\uff0c\u7ed3\u679c\u6709\u4eba\u771f\u8e22\u5230\u4e86\uff0c\u6574\u4e2a\u673a\u623f\u65ad\u7535\u4e86\u51fa\u4e86\u5f88\u5927\u7684\u4e8b\u6545\u3002\u90a3\u4e48\u4ece Google \u7684\u7406\u5ff5\u6765\u8bf4\u8fd9\u91cc\u4e0d\u662f\u4eba\u7684\u95ee\u9898\uff0c\u800c\u662f\u7cfb\u7edf\u8bbe\u8ba1\u7684\u95ee\u9898\u3002\u8fd9\u91cc\u662f\u4e0d\u662f\u5e94\u8be5\u6709\u4e24\u5957\u7535\u6e90\uff0c\u662f\u4e0d\u662f\u5e94\u8be5\u6709\u4fdd\u62a4\uff1f\u53ea\u6709\u4ece\u7cfb\u7edf\u8bbe\u8ba1\u95ee\u9898\u7684\u89d2\u5ea6\u51fa\u53d1\u624d\u80fd\u771f\u6b63\u89e3\u51b3\u95ee\u9898\uff0c\u800c\u6307\u8d23\u8fd9\u4e2a\u8e22\u5230\u63d2\u5ea7\u7684\u4eba\uff0c\u8ba9\u4ed6\u4e00\u4e2a\u6708\u4e0d\u4e0a\u73ed\uff0c\u751a\u81f3\u5f53\u65f6\u5f00\u9664\u4e5f\u5e76\u4e0d\u80fd\u89e3\u51b3\u7cfb\u7edf\u7684\u8bbe\u8ba1\u95ee\u9898\uff0c\u4e0b\u56de\u603b\u4f1a\u8fd8\u6709\u4eba\u8e22\u5230\u3002 \u200b \u8bf4\u4e00\u4e2a\u6545\u4e8b\uff0c\u6545\u4e8b\u7684\u5185\u5bb9\u662f\u4e00\u4e2a\u4e8b\u6545\u3002\u67d0\u4e2a\u6570\u636e\u4e2d\u5fc3\u6709\u4e00\u6392\u673a\u5668\u8981\u65ad\u7535\uff0c\u6570\u636e\u4e2d\u5fc3\u7684\u4eba\u53d1\u4e86\u4e00\u4e2a\u5de5\u5355\u544a\u8bc9\u64cd\u4f5c\u5458\u8981\u628a\u8fd9\u4e2a\u5f00\u5173\u7ed9\u5173\u4e86\u3002\u7136\u540e\u8fd9\u4e2a\u64cd\u4f5c\u5458\u53bb\u5173\uff0c\u4ed6\u5173\u6389\u4e86\u5f00\u5173\uff0c\u4f46\u662f\u53d1\u73b0\u8fd9\u4e00\u6392\u673a\u5668\u7684\u706f\u6ca1\u706d\uff0c\u53e6\u5916\u4e00\u6392\u7684\u706f\u5374\u706d\u4e86\u2014\u2014\u6309\u9519\u5f00\u5173\u4e86\u3002\u4ed6\u68c0\u67e5\u4e00\u4e0b\u53d1\u73b0\u6309\u9519\u4e86\uff0c\u201c\u556a\u201d\u628a\u53e6\u5916\u4e00\u4e2a\u5f00\u5173\u4e5f\u5173\u4e86\uff0c\u7136\u540e\u518d\u628a\u8fd9\u4e00\u6392\u673a\u5668\u7ed9\u542f\u52a8\uff0c\u7ed3\u679c\u7531\u4e8e\u542f\u52a8\u65f6\u5019\u8fc7\u8f7d\u5bfc\u81f4\u6574\u4e2a\u6570\u636e\u4e2d\u5fc3\u90fd\u65ad\u7535\u4e86\uff0c\u6269\u5927\u4e86\u95ee\u9898\u3002\u5982\u679c\u5355\u7eaf\u53ea\u662f\u6307\u8d23\uff0c\u8fd9\u4e2a\u4eba\u80af\u5b9a\u5b8c\u4e86\uff0c\u8d77\u7801\u5956\u91d1\u6ca1\u6709\u4e86\uff0c\u80fd\u4e0d\u80fd\u4fdd\u4f4f\u5de5\u4f5c\u90fd\u4e0d\u77e5\u9053\u3002\u4f46\u662f Google \u66f4\u5173\u6ce8\u7684\u662f\u8fd9\u4e2a\u4e1c\u897f\u4e3a\u4ec0\u4e48\u4f1a\u5bb9\u6613\u51fa\u9519\uff0c\u8981\u4e48\u662f\u5f00\u5173\u989c\u8272\u4e0d\u5bf9\uff0c\u8981\u4e48\u662f\u76f8\u540c\u673a\u5668\u7684\u64cd\u4f5c\u65b9\u5f0f\u9760\u5f97\u592a\u8fd1\u4e86\uff0c\u4f1a\u8ba9\u4eba\u4ea7\u751f\u8fd9\u79cd\u9519\u8bef\u7684\u5224\u65ad\u3002\u6240\u4ee5\u4f60\u770b Google \u7684\u673a\u623f\u91cc\u90fd\u662f\u4e94\u989c\u516d\u8272\u7684\uff0c\u56e0\u4e3a\u8fd9\u6837\u786e\u5b9e\u6709\u7528\uff0c\u6bd4\u5982\u70ed\u6c34\u7ba1\u662f\u7ea2\u8272\u7684\uff0c\u5236\u51b7\u7ba1\u662f\u84dd\u8272\u7684\uff0c\u6240\u4ee5\u67e5\u8d77\u6765\u5f88\u5bb9\u6613\uff0c\u533a\u5206\u8d77\u6765\u5f88\u5bb9\u6613\uff0c\u5c3d\u91cf\u51cf\u5c11\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\u8fd9\u4e2a\u8bbe\u8ba1\u7684\u601d\u60f3\u5728 SRE \u65e5\u5e38\u5de5\u4f5c\u91cc\u8d2f\u5f7b\u5f97\u975e\u5e38\u6df1\uff0c\u6bcf\u4eba\u5728\u6d41\u7a0b\u6216\u5de5\u4f5c\u7684\u65f6\u5019\u90fd\u8981\u8003\u8651\u5230\u6709\u6ca1\u6709\u88ab\u8bef\u7528\u7684\u53ef\u80fd\uff0c\u7136\u540e\u5982\u4f55\u907f\u514d\u8bef\u7528\u3002 2 \u4e13\u4e1a\u5316 \u4e13\u4e1a\u5316\u4f53\u73b0\u5728\u4ec0\u4e48\u7a0b\u5ea6\u5462\uff1f\u8981\u771f\u6b63\u7684\u53bb\u5199\u4ee3\u7801\uff0c\u8981\u80fd\u7ed9\u4e1a\u52a1\u7cfb\u7edf\u6216\u8005\u7ed9\u7814\u53d1\u5199\u7684\u4e1c\u897f\u6311\u51fa\u95ee\u9898\uff0c\u63d0\u9ad8\u53ef\u9760\u6027\u3002 \u7b2c\u4e00\uff0c\u51cf\u5c11\u7410\u4e8b\u3002\u8fd0\u7ef4\u4e2d\u6709\u5f88\u591a\u865a\u5047\u7684\u5de5\u4f5c\u3002\u6bcf\u5929\u5f88\u5fd9\uff0c\u7136\u800c\u53c8\u4e0d\u89e3\u51b3\u95ee\u9898\uff0c\u505a\u4e86\u5f88\u591a\u5047\u7684\u5de5\u4f5c\u3002\u5927\u5bb6\u770b\u8d77\u6765\u597d\u50cf\u5f88\u5fd9\uff0c\u4e00\u4e2a\u5c4f\u5e55\u4e0a\u5341\u51e0\u4e2a\u7a97\u53e3\uff0c\u5404\u79cd\u5237\u5c4f\uff0c\u4f46\u5b8c\u5168\u4e0d\u89e3\u51b3\u95ee\u9898\u3002\u66f4\u597d\u7684\u65b9\u5f0f\u662f\u7528\u81ea\u52a8\u5316\u3001\u7cfb\u7edf\u5316\u3001\u5de5\u5177\u5316\u7684\u65b9\u5f0f\u53bb\u6d88\u9664\u8fd9\u79cd\u7410\u4e8b\u7684\u5b58\u5728\u3002\u5982\u679c\u6c38\u8fdc\u9760\u4eba\u5de5\uff0c\u90a3\u6c38\u8fdc\u90fd\u95f2\u4e0d\u4e0b\u6765\u3002 \u7b2c\u4e8c\uff0c\u56de\u5230 SRE\uff0cSRE \u5236\u5ea6\u91cc\u6709\u4e00\u6761\u7ea2\u7ebf\uff0c\u8fd0\u7ef4\u7684\u4eba\u53ea\u80fd\u628a\u4e00\u534a\u7684\u65f6\u95f4\u82b1\u5728\u8fd0\u7ef4\u4e0a\uff0c\u53e6\u5916\u4e00\u534a\u7684\u65f6\u95f4\u5fc5\u987b\u641e\u5de5\u7a0b\u4e0a\u3001\u7814\u53d1\u4e0a\u7684\u4e1c\u897f\u3002\u7814\u53d1\u53ef\u4ee5\u662f\u5199\u5de5\u5177\uff0c\u53ef\u4ee5\u662f\u53c2\u4e0e\u7cfb\u7edf\u8bbe\u8ba1\uff0c\u53c2\u4e0e\u53ef\u9760\u6027\u7684\u63d0\u9ad8\uff0c\u4f46\u662f\u8981\u4fdd\u8bc1\u8fd0\u7ef4\u4e0d\u80fd\u53ea\u5e72\u8fd0\u7ef4\u3002 \u7b2c\u4e09\u70b9\uff0c\u6211\u8ba4\u4e3a\u4e5f\u662f\u6bd4\u8f83\u7f3a\u5c11\u7684\uff0c\u8fd0\u7ef4\u90e8\u95e8\u5149\u6709\u8d23\u4efb\u6ca1\u6709\u51b3\u7b56\u6743\uff0c\u6240\u4ee5\u5927\u5bb6\u90fd\u8bf4\u4e00\u51fa\u4e8b\u6545\uff0c\u8fd0\u7ef4\u5c31\u80cc\u9ed1\u9505\u3002\u600e\u4e48\u4e0d\u80cc\u9ed1\u9505\u5462\uff1f\u8bf4\u6539\u8fd9\u513f\u3001\u6539\u90a3\u513f\uff0c\u7136\u540e\u53d1\u73b0\u6ca1\u6709\u4eba\u6279\u51c6\u6539\u52a8\uff0c\u8fd9\u662f\u6700\u5927\u7684\u95ee\u9898\u3002SRE \u505a\u7684\u6700\u597d\u7684\u4e00\u70b9\u662f\u7ba1\u7406\u5c42\u5bf9 SRE \u7684\u5de5\u4f5c\u65b9\u5f0f\u975e\u5e38\u8ba4\u53ef\u3001\u975e\u5e38\u652f\u6301\uff0c\u4ed6\u4eec\u8ba4\u4e3a\u670d\u52a1\u8d28\u91cf\u662f\u670d\u52a1\u7684\u4e00\u4e2a\u91cd\u8981\u6307\u6807\u3002\u4e00\u65e6\u4e0a\u5347\u5230\u8fd9\u4e2a\u9ad8\u5ea6\uff0cSRE \u90e8\u95e8\u63d0\u51fa\u4e00\u4e9b\u8981\u6c42\u5c31\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\uff0c\u5f97\u5230\u652f\u6301\uff0c\u56e0\u4e3a\u4ed6\u4eec\u662f\u6709\u4e8b\u5b9e\u6839\u636e\u7684\u3002\u5f53 Google SRE \u53d1\u73b0\u751f\u4ea7\u51fa\u73b0\u95ee\u9898\u7684\u65f6\u5019\uff0c\u6807\u51c6\u7684\u89e3\u51b3\u529e\u6cd5\u5c31\u662f\u6682\u505c\u6240\u6709\u66f4\u65b0\uff0c\u786e\u4fdd\u4e1a\u52a1\u7a33\u5b9a\u3002\u4e3e\u4e2a\u6bd4\u8f83\u6781\u7aef\u7684\u4f8b\u5b50\uff0c\u50cf\u521a\u624d\u8bf4\u7684\u5982\u679c\u53d1\u73b0\u7ebf\u4e0a\u7cfb\u7edf\u6709\u95ee\u9898\u7684\u60c5\u51b5\u4e0b\uff0cSRE \u662f\u6709\u6743\u5229\u62d2\u7edd\u63a5\u53d7\u4e1a\u52a1\u66f4\u65b0\u7684\uff0c\u53ea\u5141\u8bb8\u7814\u53d1\u90e8\u95e8\u4fee bug\uff0c\u4e0d\u5141\u8bb8\u52a0\u65b0\u529f\u80fd\u3002\u8fd9\u4e2a\u4e89\u8bae\u6211\u5728\u8fc7\u53bb\u516b\u5e74\u89c1\u8fc7\u4e3a\u6570\u4e0d\u591a\u7684\u51e0\u6b21\uff0c\u5f00\u53d1\u53ef\u4ee5\u4e00\u76f4\u95f9\u5230 VP\uff0cSVP \u8fd9\u4e2a\u7ea7\u522b\u3002\u6bcf\u4e00\u6b21\u90fd\u662f\u542c SRE \u7684\u3002 3 \u6253\u901a\u4e0e\u4ea7\u54c1\u56e2\u961f\u7684\u53cd\u9988\u56de\u8def \u6240\u6709\u4e1c\u897f\u4e0d\u90fd\u662f\u767e\u5206\u4e4b\u767e\u7a33\u5b9a\u7684\uff0c\u7a33\u5b9a\u6027\u7684\u63d0\u9ad8\u8981\u6d88\u8017\u6210\u672c\uff0c\u8981\u589e\u52a0\u66f4\u591a\u7684\u5197\u4f59\uff0c\u66f4\u591a\u7684\u5bb9\u91cf\uff0c\u751a\u81f3\u53ea\u80fd\u82b1\u94b1\u89e3\u51b3\u3002\u8fd0\u7ef4\u90e8\u95e8\u7684\u4efb\u52a1\u5c31\u662f\u63d0\u4f9b\u8fd9\u4e9b\u6570\u636e\u548c\u65b9\u6848\u3002\u6bd4\u5982\u641e\u4e09\u4e2a 9\u3001\u56db\u4e2a 9\uff0c\u8981\u5982\u4f55\u8fbe\u5230\uff0c\u8fd9\u5728\u6295\u5165\u548c\u7cfb\u7edf\u8bbe\u8ba1\u4e0a\u6709\u5f88\u5927\u533a\u522b\u3002\u8fd9\u4e2a\u90e8\u5206\u516c\u53f8\u91cc\u6ca1\u6709\u5176\u4ed6\u4eba\u53ef\u4ee5\u63d0\u51fa\uff0c\u5fc5\u987b\u8981\u7531\u8fd0\u7ef4\u90e8\u95e8\u63d0\u51fa\u3002\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u53cd\u9988\u56de\u8def\u7684\u8bdd\uff0c\u4f60\u4f1a\u53d1\u73b0\u5927\u5bb6\u90fd\u5f88\u75db\u82e6\uff0c\u5f88\u591a\u65f6\u5019\u505a\u51fa\u7684\u51b3\u5b9a\u90fd\u662f\u8fdd\u80cc\u81ea\u7136\u89c4\u5f8b\u7684\u3002\u6211\u770b\u8fc7\u5f88\u591a\u8fd9\u6837\u7684\u6848\u4f8b\uff0c\u4e0a\u9762\u62cd\u8111\u95e8\u51b3\u5b9a\u67d0\u4e2a\u4e1a\u52a1\u8981 100%\u7a33\u5b9a\uff0c\u5b8c\u5168\u4e0d\u7ba1\u4e0b\u9762\u600e\u4e48\u641e\uff0c\u7531\u4e8e\u53cd\u9988\u56de\u8def\u4e0d\u5b58\u5728\u6216\u8005\u8fd9\u4e2a\u53cd\u9988\u56de\u8def\u7684\u4fe1\u606f\u6d41\u52a8\u4e0d\u591f\u987a\u7545\uff0c\u5bfc\u81f4\u4e86\u8fd9\u4e2a\u4e1c\u897f\u6700\u7ec8\u5b9e\u9645\u505a\u4e0d\u597d\uff0c\u8fd9\u662f SRE \u6a21\u578b\u76f8\u5f53\u5173\u952e\u7684\u4e00\u4e2a\u5730\u65b9\u3002 \u53c2\u8003 1 \u53c2\u8003 2 \u4e94 SLO \u6700\u4f73\u5b9e\u8df5 (\u4e00) \u524d\u8a00 SLA \uff08service level agreement\uff09:\u670d\u52a1\u7b49\u7ea7\u534f\u8bae \u6307\u7684\u662f\u6574\u4e2a\u534f\u8bae\uff0c\u534f\u8bae\u7684\u5185\u5bb9\u5305\u542b\u4e86 SLI\uff0cSLO \u4ee5\u53ca\u6062\u590d\u7684\u65b9\u5f0f\u548c\u65f6\u95f4\u7b49\u7b49\u4e00\u7cfb\u5217\u6240\u6784\u6210\u7684\u534f\u8bae SLI\uff08service level indicator\uff09:\u670d\u52a1\u7b49\u7ea7\u5bf9\u8c61 \u6307\u7684\u662f\u5bf9\u8c61\uff0c\u4f8b\u5982\uff1aqps\uff0c\u54cd\u5e94\u65f6\u95f4\uff0c\u51c6\u786e\u6027\u7b49 SLO\uff08service level objective\uff09:\u670d\u52a1\u7b49\u7ea7\u76ee\u6807 \u6307\u7684\u662f\u76ee\u6807\uff0c\u4f8b\u5982\uff1aqps 99.99% \uff0c\u54cd\u5e94\u65f6\u95f4 10ms \u7b49 \u4ec0\u4e48\u662f\u670d\u52a1\uff1f\u5c31\u662f\u63d0\u4f9b\u7ed9\u5ba2\u6237\u7684\u6240\u6709\u529f\u80fd\u7684\u96c6\u5408\u3002\u6e38\u620f\u4e1a\u52a1\u6765\u770b\uff0c\u6211\u4eec SRE \u7ed9\u73a9\u5bb6\u3001\u4ea7\u54c1\u65b9\u63d0\u4f9b\u7684\u6240\u6709\u670d\u52a1\u3001\u529f\u80fd\u7b49\uff0c\u90fd\u5c5e\u4e8e\u670d\u52a1\u8303\u7574\u3002 \u90a3\u4e48\u6211\u4eec\u63d0\u4f9b\u7684\u670d\u52a1\u8d28\u91cf\u5982\u4f55\uff1f\u600e\u4e48\u8861\u91cf\u548c\u8bc4\u4ef7\u8fd9\u4e9b\u670d\u52a1\u7684\u8d28\u91cf\uff1f\u662f\u5426\u8fbe\u5230\u4e86\u5927\u5bb6\u4e00\u81f4\u7684\u671f\u671b\uff1f\u8fd9\u4e9b\u6b63\u662f SLO \u6240\u63cf\u8ff0\u5e76\u8981\u89e3\u51b3\u7684\u95ee\u9898\u3002 \u672c\u6587\u5c06\u4ee5\u67d0\u4e2a\u6e38\u620f\u9879\u76ee\u4e3a\u4f8b\u5b50\uff0c\u9610\u8ff0\u5728\u6e38\u620f\u4e1a\u52a1\u65b9\u9762\u5b9e\u8df5 SLO \u7684\u4e00\u4e9b\u7ecf\u9a8c\uff0c\u5e0c\u671b\u80fd\u629b\u7816\u5f15\u7389\u3001\u6709\u66f4\u591a\u7684\u5b9e\u8df5\u6848\u4f8b\u540e\u7eed\u80fd\u5206\u4eab\u51fa\u6765\uff0c\u5f15\u8d77\u66f4\u591a\u7684\u601d\u8003\u548c\u8ba8\u8bba\u3002 \uff08\u4e8c\uff09\u4e3a\u4ec0\u4e48\u9700\u8981 SLO \u6211\u4eec SRE \u5e38\u4f1a\u9047\u5230\u8fd9\u4e9b\u60c5\u51b5\uff1a \u67d0\u5929\uff0c\u8fd0\u8425\u540c\u5b66\u544a\u77e5\uff0cxx \u670d\u52a1\u5668\u6709\u7528\u6237\u53cd\u9988\u6389\u7ebf\u3001\u6216\u8005\u5361\u673a\u3002\u8fd9\u65f6\u5019 SRE \u7ecf\u8fc7\u4e00\u8f6e\u5bf9\u670d\u52a1\u5668\u7684\u57fa\u672c\u68c0\u67e5\uff0cCPU\u3001\u5185\u5b58\u3001\u7f51\u7edc\u3001\u65e5\u5fd7\u7b49\u90fd\u6ca1\u4ec0\u4e48\u5f02\u5e38\uff0c\u7136\u540e\u5c31\u6ca1\u6709\u7136\u540e\u4e86\u3002 \u67d0\u5929\uff0cQA \u53cd\u9988\u4eca\u5e74\u4e0a\u534a\u5e74 xx \u4ea7\u54c1\u7684\u7a33\u5b9a\u6027\u5f88\u5dee\uff0cSRE \u89c9\u5f97\u5e76\u6ca1\u6709\uff0c\u56e0\u4e3a\u6545\u969c\u6b21\u6570\u6bd4\u53bb\u5e74\u8fd8\u4f4e\u3002QA \u540c\u5b66\u5374\u8bf4\u4ea7\u54c1\u5f88\u4e0d\u6ee1\u610f\u67d0\u4e00\u6b21\u6545\u969c\u6062\u590d\u7528\u4e86 2 \u4e2a\u5c0f\u65f6\u2026\u2026 \u4ee5\u4e0a\u7684\u4f8b\u5b50\uff0c\u5176\u5b9e\u66b4\u9732\u4e86\u4e00\u4e9b\u95ee\u9898\u70b9\uff1a \u6211\u4eec\u5e38\u89c4\u7684\u7cfb\u7edf\u6307\u6807\u90fd\u80fd\u53cd\u9988\u73a9\u5bb6\u7528\u6237\u53d1\u8069\u7684\u6389\u7ebf\u3001\u5361\u673a\u95ee\u9898\u5417\uff1f SRE \u548c\u4ea7\u54c1\u5bf9\u5982\u4f55\u8bc4\u4ef7\u6e38\u620f\u8d28\u91cf\u7684\u6807\u51c6\uff0c\u6709\u5171\u8bc6\u5417\uff1f \u4e3a\u4e86\u8ba9\u4ea7\u54c1\u548c\u670d\u52a1\u7684\u7528\u6237\u4f53\u9a8c\u548c\u53ef\u9760\u6027\u6709\u5ba2\u89c2\u7684\u5ea6\u91cf\uff0c\u4e3a\u8fd0\u7ef4\u51b3\u7b56\u63d0\u4f9b\u6570\u636e\u7684\u652f\u6491\uff0c\u4e3a\u4ea7\u54c1\u4e0d\u540c\u89d2\u8272\u6c9f\u901a\u63d0\u4f9b\u7126\u70b9\uff0c\u6211\u4eec\u9700\u8981\u548c\u4ea7\u54c1\u4e0d\u540c\u7684\u89d2\u8272\u4e00\u8d77\uff0c\u5236\u5b9a\u51fa\u5927\u5bb6\u90fd\u8ba4\u53ef\u7684 SLO\uff0c\u5e76\u4ee5\u6b64\u4f5c\u4e3a\u4fc3\u8fdb\u6211\u4eec\u89c2\u5bdf\u3001\u8861\u91cf\u3001\u6539\u8fdb\u4e1a\u52a1\u7684\u53c2\u8003\u548c\u76ee\u6807\u3002 \u300aSRE WORKBOOK\u300b\u91cc\u63d0\u5230\uff0c \u201cSRE \u7684\u6838\u5fc3\u804c\u8d23\uff0c\u4e0d\u4ec5\u4ec5\u662f\u5c06\u6240\u6709\u4e8b\u60c5\u81ea\u52a8\u5316\u800c\u968f\u65f6\u5f85\u547d\u5904\u7406\u6545\u969c\uff0cSRE \u7684\u65e5\u5e38\u5de5\u4f5c\u90fd\u5c06\u6309\u7167 SLO \u6765\u5f00\u5c55\uff0c\u786e\u4fdd SLO \u5728\u77ed\u671f\u5185\u662f\u5408\u7406\u7684\uff0c\u5e76\u53ef\u4ee5\u6839\u636e SLI \u53d8\u5316\u7684\u60c5\u51b5\u9002\u65f6\u5bf9 SLO \u505a\u51fa\u8c03\u6574\u201d\u3002 \u53e6\u5916\u4e5f\u63d0\u5230\uff0c \u201c\u8c37\u6b4c\u8ba4\u4e3a\u4e00\u4e2a\u6df1\u601d\u719f\u8651\u7684 SLO \u662f\u505a\u51fa\u51b3\u7b56\u7684\u5173\u952e\uff0c\u8fd9\u4e9b\u51b3\u7b56\u5305\u62ec\u4e86\u53ef\u9760\u6027\u76f8\u5173\u5de5\u4f5c\uff0c\u548c\u786e\u5b9a\u5de5\u4f5c\u4f18\u5148\u7ea7\u6392\u5e8f\u7b49\u5185\u5bb9\u3002SLO \u66f4\u50cf\u4e00\u79cd\u5de5\u5177\uff0c\u53ef\u4ee5\u5e2e\u52a9 SRE \u786e\u5b9a\u54ea\u4e2a\u5de5\u4f5c\u4f18\u5148\u7ea7\u66f4\u9ad8\u201d\u3002 \u8fd9\u6837 SRE \u7684\u5de5\u4f5c\uff0c\u5728\u65f6\u95f4\u3001\u7cbe\u529b\u6709\u9650\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5c3d\u91cf\u805a\u7126\u5230 SLO \u53cd\u9988\u7684\u8d28\u91cf\u6216\u6307\u6807\u4e0a\u9762\u6765\u3002 (\u4e09) SLO \u7684\u7279\u70b9 \u90a3\u4e48 SLO \u7684\u7279\u70b9\u662f\u5565\uff1f\u4e00\u4e2a\u597d\u7684 SLO \u6709\u4ec0\u4e48\u7279\u70b9\uff1f \u9996\u5148\uff0c SLO \u662f\u4e00\u4e2a\u53ef\u4ee5\u5ea6\u91cf\u3001\u5ba2\u89c2\u5b58\u5728\u7684\u3001\u53ef\u4ee5\u660e\u786e\u7684\u6307\u6807\u3002 SLO \u662f\u7531\u5ba2\u89c2\u7684\u6570\u636e\u7edf\u8ba1\u5f97\u6765\uff0c\u662f\u5927\u5bb6\u8ba4\u540c\u7684\u3001\u6ca1\u6709\u63ba\u6742\u4e3b\u89c2\u7684\u770b\u6cd5\u3002\u5b83\u7684\u6570\u636e\u6765\u6e90\u3001\u6536\u96c6\u65b9\u6cd5\u3001\u8ba1\u7b97\u7edf\u8ba1\u65b9\u6cd5\uff0c\u4e5f\u662f\u5fc5\u987b\u660e\u786e\u7684\u3002\u6700\u540e SLO \u4e0d\u662f\u4ec5\u4ec5\u4e00\u6b21\u8bbe\u5b9a\u5c31\u6c38\u4e0d\u53d8\u7684\uff0c\u5b83\u662f\u6301\u7eed\u8fed\u4ee3\u7684\uff0c\u4f1a\u968f\u7740\u4e1a\u52a1\u7684\u7279\u70b9\u3001\u8ba1\u7b97\u65b9\u6cd5\u7684\u6539\u53d8\u7b49\u7684\u6539\u53d8\u800c\u6301\u7eed\u6539\u53d8\u3002 \u90a3\u4ec0\u4e48\u6837\u7684 SLO \u624d\u7b97\u662f\u597d\u7684 SLO\uff1f \u6709\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u7279\u70b9\u5c31\u662f\uff1a\u540c\u7406\u5fc3\u3002 \u597d\u7684 SLO \u9700\u8981\u6709\u540c\u7406\u5fc3\uff0c\u80fd\u8d34\u5207\u53cd\u6620\u7528\u6237\u4f7f\u7528\u670d\u52a1\u7684\u5b9e\u9645\u611f\u53d7\u3002\u6211\u4eec\u5c1d\u8bd5\u4ee5\u7528\u6237\u7684\u89d2\u5ea6\u6765\u89c2\u5bdf\u4e00\u4e2a\u670d\u52a1\uff0c\u4ece\u4f7f\u7528\u670d\u52a1\u5f00\u59cb\u7684\u6bcf\u4e00\u4e2a\u6b65\u9aa4\u3001\u7ec6\u8282\u91cc\uff0c\u627e\u51fa\u6211\u4eec\u6700\u5173\u6ce8\u7684\u4e1c\u897f\uff0c\u8fd9\u6837\u4e1c\u897f\u5c31\u6709\u53ef\u80fd\u88ab\u63d0\u70bc\u6210 SLO\u3002\u8bf4\u5230\u5e95\uff0cSLO \u7684\u8bbe\u8ba1\u9700\u8981\u56f4\u7ed5\u7528\u6237\u4f53\u9a8c\u6765\u8bbe\u8ba1\uff0c\u670d\u52a1\u4e8e\u4ea7\u54c1\u3002 \u4f8b\u5982\uff0c\u6c42\u804c\u7f51\u7ad9\uff0c\u7528\u6237\u5173\u6ce8\u7684\u70b9\u5e94\u8be5\u662f\uff1a \u5feb\u901f\u7684\u9875\u9762\u52a0\u8f7d \u80fd\u591f\u83b7\u53d6\u6240\u6709\u7684\u804c\u4f4d \u804c\u4f4d\u4e1a\u52a1\u4fe1\u606f\u52a0\u8f7d\u8db3\u591f\u5feb \u770b\u5230\u5c3d\u53ef\u80fd\u591a\u7684\u804c\u4f4d\uff0c\u5373\u4f7f\u4e0d\u4e00\u5b9a\u76f8\u5173 \u800c\u4ed6\u4eec\u4e0d\u600e\u4e48\u5173\u6ce8\u7684\u70b9\u662f\uff1a \u6240\u6709\u7684\u7f51\u7ad9\u529f\u80fd\u90fd\u53ef\u7528 \u5185\u5bb9\u975e\u5e38\u51c6\u786e \u907f\u514d\u663e\u793a\u4e0d\u76f8\u5173\u7684\u804c\u4f4d \u7528\u6e38\u620f\u4e1a\u52a1\u4f5c\u4e3a\u4f8b\u5b50\uff0c\u4f8b\u5982\u4e00\u6b3e\u56de\u5408\u5236\u7684 MMORPG \u7684\u6e38\u620f\uff0c\u73a9\u5bb6\u5173\u6ce8\u7684\u70b9\u7406\u5e94\u662f\uff1a \u53ef\u7528\u6027\u3002\u5373\u4f7f\u662f\u51cc\u6668\uff0c\u5982\u679c\u6e38\u620f\u4e0d\u53ef\u73a9\uff0c\u4e5f\u4f1a\u5f71\u54cd\u73a9\u5bb6\u7684\u6446\u644a\u6536\u76ca \u90a3\u4ed6\u4eec\u4e0d\u600e\u4e48\u5173\u6ce8\u7684\u70b9\u662f\uff1a \u7f51\u7edc\u5ef6\u8fdf\u3002\u5927\u591a\u573a\u666f\u4e0b\uff0c\u73a9\u5bb6\u5bf9\u5b9e\u65f6\u6027\u7684\u8981\u6c42\u5e76\u4e0d\u591a\u3002 \u540c\u6837\uff0c\u6362\u6210\u4e00\u6b3e\u5373\u65f6\u7ade\u6280\u7c7b\u7684\u6e38\u620f\uff0c\u5f71\u54cd\u73a9\u5bb6\u4f53\u9a8c\u7684\u70b9\u4f1a\u548c MMORPG \u6709\u5f88\u5927\u5dee\u522b\uff0c\u4ed6\u4eec\u66f4\u5173\u6ce8\uff1a \u5ef6\u8fdf\u6216\u6d41\u7545\u5ea6\u3002\u5ef6\u8fdf\u76f4\u63a5\u5f71\u54cd\u5230\u6574\u4e2a\u6e38\u620f\u6838\u5fc3\u7684\u4f53\u9a8c\u3002\u5f00\u6253\u4e4b\u540e\u5982\u679c\u5b58\u5728\u5361\u987f\uff0c\u4f1a\u7ed9\u73a9\u5bb6\u9020\u6210\u975e\u5e38\u5927\u7684\u8d1f\u9762\u611f\u53d7\u3002 \u53cd\u800c\u4e0d\u600e\u4e48\u5173\u6ce8\uff1a \u53ef\u7528\u6027\u3002 \u53ef\u89c1\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684 SLO \u90fd\u6709\u666e\u904d\u9002\u7528\u6027\u3002\u4e00\u4e2a\u597d\u7684 SLO \u5fc5\u987b\u4f9d\u9644\u4e00\u4e2a\u80fd\u53cd\u9988\u7528\u6237\u4f53\u9a8c\u7684\u573a\u666f\uff0c\u5e76\u80fd\u91cf\u5316\u6210\u4e00\u4e9b\u6570\u636e\u6307\u6807\uff0c\u6765\u5ba2\u89c2\u53cd\u9988\u51fa\u7528\u6237\u7684\u4e3b\u89c2\u4f53\u9a8c\u3002 (\u56db) \u5982\u4f55\u5236\u5b9a SLO \u4ece 0 \u5230 1 \u5236\u5b9a SLO \u5927\u81f4\u7684\u6d41\u7a0b\u662f\uff1a \u5176\u4e2d\u201c\u8bbe\u7f6e SLO\u201d\u8fd9\u4e00\u6b65\uff0c\u5e76\u4e0d\u662f\u4e00\u8e74\u800c\u5c31\u3002\u5176\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u6b65\u9aa4\u662f\u6536\u96c6 SLI\u3002SLO \u7684\u5236\u5b9a\u79bb\u4e0d\u5f00 SLI\u3002 SLI \u670d\u52a1\u7b49\u7ea7\u6307\u6807\uff0c\u5373\u4e00\u4e9b\u9488\u5bf9\u670d\u52a1\u7684\u76d1\u63a7\u9879\uff0c\u4f8b\u5982\u201ckcp \u9000\u5316\u7387\u201d\u3001\u201c\u8bbf\u95ee\u5ef6\u8fdf\u5e73\u5747\u503c\u201d\u3001\u201c\u767b\u5f55\u6e38\u620f\u6210\u529f\u7387\u201d\u7b49\u3002SLI \u53ef\u4ee5\u6839\u636e\u4e1a\u52a1\u7684\u7279\u70b9\uff0c\u4ece\u53ef\u7528\u6027\u3001\u5ef6\u8fdf\u3001\u6570\u91cf\u3001\u8d28\u91cf\u3001\u7ed3\u679c\u6b63\u786e\u6027\u7b49\u7b49\u591a\u65b9\u9762\u8986\u76d6\u3002SLI \u662f\u5177\u4f53\u660e\u786e\u7684\u5e76\u53ef\u4ee5\u6d4b\u91cf\u7684\uff0c\u4e0d\u540c\u7684\u7cfb\u7edf\u6709\u4e0d\u4e00\u6837\u7684\u6d4b\u91cf\u5bf9\u8c61\u548c\u65b9\u6cd5\u3002 \u6211\u4eec\u901a\u8fc7\u5c06 SLI \u6216\u8005\u51e0\u4e2a SLI \u7684\u7ec4\u5408\u8fdb\u884c\u4e00\u6bb5\u65f6\u95f4\u7684\u6570\u636e\u6536\u96c6\u548c\u89c2\u5bdf\uff0c\u5c31\u53ef\u4ee5\u5230\u4e00\u4e2a\u8d77\u59cb\u7684 SLO\uff0c\u4f8b\u5982\uff1a90%\u7684\u5339\u914d\u65f6\u957f<120s\u3002 (\u4e94) FPS \u6e38\u620f\u7684 SLO \u5b9e\u8df5 \u901a\u5e38\u4e00\u6b3e\u5927\u4e16\u754c\u67b6\u6784\u3001\u5b9e\u65f6\u5c04\u51fb\u7ade\u6280\u7c7b\u6e38\u620f\uff0c\u4f1a\u5206\u522b\u6709\u7f8e\u670d\u3001\u4e9a\u670d\u3001\u6b27\u670d\u7b49\u51e0\u4e2a\u5927\u533a\uff0c\u73a9\u5bb6\u6839\u636e\u81ea\u5df1\u7684\u5b9e\u9645\u767b\u5f55\u5230\u4e0d\u540c\u7684\u533a\u57df\uff0c\u5339\u914d\u5176\u4ed6\u73a9\u5bb6\u540e\u8fdb\u884c\u6e38\u620f\u3002 1 \u5982\u4f55\u9009\u62e9 SLI \u9996\u5148\u660e\u786e\u7684\u662f\uff0c\u6e38\u620f\u76f8\u5173\u7684\u6307\u6807\u5b9e\u5728\u592a\u591a\uff0c\u6211\u4eec\u9700\u8981\u805a\u7126\u3002 \u5229\u7528\u540c\u7406\u5fc3\uff0c\u4ece\u7528\u6237\u89d2\u5ea6\u51fa\u53d1 \uff0c\u6211\u4eec\u9009\u4e86\u4e24\u4e2a\u51fa\u53d1\u70b9\uff1a\u767b\u5f55\u548c\u6218\u6597\u3002 \u6211\u4eec\u5c1d\u8bd5\u4ece\u73a9\u5bb6\u884c\u4e3a\u6765\u53d1\u6398\uff1a \u4e0b\u8f7d\u6e38\u620f\u5ba2\u6237\u7aef \u6253\u5f00\u6e38\u620f\uff0c\u66f4\u65b0 patch \u767b\u5f55\u8d26\u53f7\uff0c\u9009\u62e9\u5927\u533a \u8fdb\u5165\u5927\u5385\uff0c\u7b49\u5f85\u5339\u914d \u8fdb\u5165\u6218\u6597 \u6218\u6597\u7ed3\u675f\uff0c\u56de\u5230\u5927\u5385\uff0c\u7ee7\u7eed\u7b49\u5f85\u5339\u914d\u4e0b\u4e00\u573a\u6218\u6597 \u8fd9\u4e9b\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u5dee\u8bc4\u7684\u4f1a\u6709\u54ea\u4e9b\u573a\u666f\u5462\uff1f\u6211\u4eec\u6309\u7167\u767b\u5f55\u548c\u6218\u6597\u8fd9\u4e24\u5927\u573a\u666f\u603b\u7ed3\u4e86\u4e00\u4e9b\u5982\u4e0b\uff1a \u767b\u5f55 \u4e0b\u8f7d patch \u5931\u8d25\u3001\u8fc7\u6162 \u767b\u5f55\u8d26\u53f7\u5931\u8d25 \u8fde\u63a5\u670d\u52a1\u5668\u5931\u8d25 \u6218\u6597 \u5339\u914d\u65f6\u957f\u8fc7\u957f \u6218\u6597\u5ef6\u8fdf\u5f88\u9ad8 \u5361\u987f \u7f51\u7edc\u4e22\u5305\u6216\u5ef6\u65f6\u9ad8 \u670d\u52a1\u5668\u5904\u7406\u6162 \u7ecf\u5e38\u65ad\u7ebf\u91cd\u8fde \u4ee5\u4e0a\u8bf4\u7684\u8fd9\u4e9b\uff0c\u90fd\u4f1a\u7ed9\u73a9\u5bb6\u9020\u6210\u7cdf\u7cd5\u7684\u4f53\u9a8c\u3002\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u548c\u4ea7\u54c1\u7814\u53d1\u4e00\u8d77\u5bf9\u8fd9\u4e9b\u573a\u666f\u63d0\u70bc\u51fa\u4e00\u4e9b\u53ef\u89c2\u5bdf\u7684\u3001\u53ef\u91cf\u5316\u7684\u6307\u6807\u51fa\u6765\u3002 \u5728\u6574\u7406 SLI \u7684\u65f6\u5019\uff0c\u6709\u4e00\u4e2a\u5bb9\u6613\u5ffd\u7565\u7684\u70b9\uff0c\u5c31\u662f\u6536\u96c6\u6570\u636e\u7684\u8303\u56f4\u662f\u5426\u6709\u7f3a\u6f0f\u3002\u4f8b\u5982\u8981\u6536\u96c6\u6570\u636e\u8ba1\u7b97\u73a9\u5bb6\u7684\u767b\u5f55\u6210\u529f\u7387\uff0c\u5982\u679c\u53ea\u662f\u4ece\u670d\u52a1\u7aef\u7684\u65e5\u5fd7\u6570\u636e\u6536\u96c6\uff0c\u8fd9\u4e2a\u6210\u529f\u7387\u5c31\u4f1a\u5b58\u5728\u504f\u9ad8\u7684\u53ef\u80fd\uff0c\u56e0\u4e3a\u73a9\u5bb6\u53ef\u80fd\u56e0\u4e3a\u7f51\u7edc\u3001\u4e3b\u52a8\u5173\u95ed\u7b49\u60c5\u51b5\uff0c\u8fd8\u6ca1\u767b\u5f55\u5230\u670d\u52a1\u5668\u5c31\u5df2\u7ecf\u6d41\u5931\u6389\u4e86\u3002\u6240\u4ee5\u6570\u636e\u7684\u6536\u96c6\u7684\u8303\u56f4\u5c3d\u91cf\u8003\u8651\u5168\u9762\u3002 \u4e8e\u662f\uff0c\u6211\u4eec\u548c\u4ea7\u54c1\u7814\u53d1\u4e00\u8d77\u603b\u7ed3\u4e86\u4ee5\u4e0b SLI\uff1a 90%\u73a9\u5bb6\u7684\u5339\u914d\u65f6\u957f 90%\u73a9\u5bb6\u7684\u7f51\u7edc\u5ef6\u65f6 \u8fdb\u5165\u6218\u6597\u6210\u529f\u7387 \u6218\u6597\u91cd\u8fde\u7387\uff08\u6218\u6597\u4e2d\u65ad\u7ebf\u91cd\u8fde\u7684\u6bd4\u4f8b\uff09 \u91cd\u65b0\u767b\u5f55\u7387\uff08\u91cd\u65b0\u767b\u5f55\u6e38\u620f\u7684\u6bd4\u4f8b\uff09 \u767b\u5f55\u8f6c\u6362\u7387\uff08\u4ece\u73a9\u5bb6\u6253\u5f00\u6e38\u620f\u5ba2\u6237\u7aef\u5f00\u59cb\u5230\u6700\u540e\u8fdb\u5165\u6e38\u620f\u7684\u6bd4\u4f8b\uff09 \u7136\u540e\u548c\u4ea7\u54c1\u7814\u53d1\u660e\u786e\u4e86\u6570\u636e\u6536\u96c6\u7684\u8303\u56f4\u3001\u8ba1\u7b97\u65b9\u5f0f\uff1a \u65e5\u5fd7\u6536\u96c6\u65b9\u5f0f\uff1a \u670d\u52a1\u5668\u65e5\u5fd7\uff0c\u901a\u8fc7 \u65e5\u5fd7\u4e2d\u5fc3 \u6536\u96c6\uff0c\u5e76\u5206\u6d41\u5230 ELK\u96c6\u7fa4 \u8fdb\u884c\u6570\u636e\u5206\u6790\u548c\u7edf\u8ba1 \u7528\u6237\u7aef\u4f53\u9a8c\u7cfb\u7edf\uff0c\u76f4\u63a5\u5229\u7528\u8be5\u7cfb\u7edf\u63d0\u4f9b\u7684\u7edf\u8ba1\u529f\u80fd\u3002\u8fd9\u91cc\u4e3b\u8981\u662f\u7528\u6765\u6536\u96c6\u767b\u5f55\u8f6c\u6362\u7387\u8fd9\u4e2a\u6307\u6807 \u8ba1\u7b97\u65b9\u6cd5\uff1a\u6bcf\u4e2a\u6307\u6807\u7684\u8ba1\u7b97\u65b9\u6cd5\u90fd\u4e0d\u4e00\u6837\uff0c\u8fd9\u91cc\u4e0d\u4e00\u4e00\u8be6\u8ff0\u4e86\uff0c\u8ba1\u7b97\u65b9\u6cd5\u4e00\u822c\u4f7f\u7528 xx \u6bd4\u4f8b\u3001\u6216\u8005\u7edf\u8ba1 90 \u5206\u4f4d\u7684\u6570\u636e 2 \u6574\u7406 SLI \u6700\u4f73\u5b9e\u8df5 1 \u5229\u7528\u540c\u7406\u5fc3\uff0c\u4ece\u7528\u6237\u89d2\u5ea6\u51fa\u53d1 2 \u4ece\u7528\u6237\u6700\u5173\u5fc3\u7684\u65b9\u9762\u51fa\u53d1, \u800c\u4e0d\u662f\u73b0\u5728\u76d1\u63a7\u7cfb\u7edf\u6709\u4ec0\u4e48. 3 \u6ce8\u610f\u6570\u636e\u8303\u56f4\u662f\u5426\u6709\u7f3a\u6f0f. 3 SLO \u7684\u5236\u5b9a \u6700\u540e\uff0c\u6211\u4eec\u7f16\u5199\u76d1\u63a7\u63d2\u4ef6\uff0c\u4ece ELK \u91cc\u9762\u91c7\u96c6\u6570\u636e\u5e76\u8ba1\u7b97\u7ed3\u679c\uff0c\u89c2\u5bdf\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u5f97\u51fa\u4e86\u521d\u59cb\u7684 SLO\uff1a \u6307\u6807 SLO \u8fdb\u5165\u6218\u6597\u6210\u529f\u7387 \u5f00\u59cb\u6218\u6597\u65f6\uff0c\u4e0d\u4f4e\u4e8e XXX %\u73a9\u5bb6\u6210\u529f\u8fdb\u5165\u6218\u6597 \u5339\u914d\u65f6\u957f XXX %\u73a9\u5bb6\u5339\u914d\u65f6\u957f\u4e0d\u957f\u4e8e XXX s \u6218\u6597\u670d\u91cd\u8fde\u7387 \u6218\u6597\u4e2d\u4e0d\u8d85\u8fc7 XXX %\u73a9\u5bb6\u9700\u8981\u91cd\u8fde\u6218\u6597 \u5ef6\u65f6 XXX %\u7684\u73a9\u5bb6\u5ef6\u65f6\u4e0d\u8d85\u8fc7 XXX ms \u540c\u65f6\u5728\u76d1\u63a7\u7cfb\u7edf\u4e0a\u521b\u5efa\u4e86\u4e00\u4e2a dashboard\uff0c\u5e76\u6309\u7167\u4ee5\u4e0a\u7684\u9608\u503c\u8bbe\u7f6e\u7684\u62a5\u8b66\u3002 4 SLO \u8fed\u4ee3\u4e0e\u603b\u7ed3 SLO \u4ece\u5236\u5b9a\u5f00\u59cb\uff0c\u4e0d\u662f\u4e00\u6210\u4e0d\u53d8\u7684\uff0c\u9700\u8981\u7ed3\u5408\u5b9e\u9645\u60c5\u51b5\u6765\u4e0d\u65ad\u8fed\u4ee3\u3002\u6211\u4eec\u9700\u8981\u6536\u96c6\u5404\u65b9\u9762\u7684\u4fe1\u606f\u6765\u8f85\u52a9\u6211\u4eec\u8bc4\u4f30 SLO \u7684\u5236\u5b9a\uff1a \u8206\u60c5\u76d1\u63a7\uff1a\u8bba\u575b\u3001\u8d34\u5427\u3001\u5ba2\u670d\u53cd\u9988\u7b49 \u4ea7\u54c1\u7814\u53d1\u7684\u5176\u4ed6\u8f85\u52a9\u6570\u636e\u6216\u65e5\u5fd7 \u6bcf\u6b21\u62a5\u8b66\u8c03\u67e5 \u6211\u4eec\u9700\u8981\u5bf9 SLO \u8fdb\u884c\u5468\u671f\u6027\u7684 review\uff0c\u63d0\u9ad8\u6307\u6807\u7684\u5ea6\u91cf\u7cbe\u5ea6\u3001\u63d0\u9ad8\u8986\u76d6\u8303\u56f4\u3001\u8c03\u589e\u9608\u503c\u3001\u6216\u8005\u6316\u6398\u66f4\u591a\u53cd\u9988\u4e1a\u52a1\u8d28\u91cf\u7684\u5176\u4ed6 SLO \u7b49\u7b49\u3002\u901a\u8fc7\u6301\u7eed\u5730\u8fed\u4ee3\uff0c\u4f7f\u5f97 SLO \u66f4\u52a0\u80fd\u5168\u9762\u5730\u3001\u51c6\u786e\u5730\u3001\u6709\u9488\u5bf9\u6027\u5730\u53cd\u9988\u51fa\u76ee\u524d\u6574\u4f53\u4e1a\u52a1\u7684\u8d28\u91cf\uff0c\u4e3a\u4ea7\u54c1\u3001\u7814\u53d1\u3001\u8fd0\u7ef4\u63d0\u4f9b\u4e00\u4e2a\u9ad8\u5ea6\u4e00\u81f4\u7684\u76ee\u6807\u3002 \u8be5\u6e38\u620f\u9879\u76ee\u7684 SLO \u4e5f\u7ecf\u5386\u4e86\u591a\u6b21\u4fee\u8ba2\uff0c\u4e00\u822c\u4fee\u8ba2\u7684\u539f\u56e0\u662f\uff0c\u968f\u7740\u4ea7\u54c1\u8fd0\u8425\u7684\u60c5\u51b5\u53d8\u5316\uff0c\u4e00\u4e9b SLI \u4f1a\u968f\u4e4b\u53d8\u5316\uff0c\u901a\u8fc7\u62a5\u8b66\u63d0\u9192\uff0c\u6211\u4eec\u53ca\u65f6\u8fdb\u884c\u4e86\u4fee\u8ba2\uff0c\u914d\u5408\u4ea7\u54c1\u5f53\u65f6\u7684\u8fd0\u8425\u60c5\u51b5\u3002\u6700\u540e\u5728\u5b9e\u8df5\u8fc7\u7a0b\u4e2d\uff0cSLO \u7684\u786e\u8d77\u5230\u4e86\u76d1\u63a7\u8d28\u91cf\u7684\u4f5c\u7528\uff0c\u62a5\u8b66\u8ba9\u6211\u4eec\u53ca\u65f6\u53d1\u73b0\u4e86\u4e00\u4e9b\u6f5c\u5728\u7684\u95ee\u9898\uff0c\u5982\u67d0\u4e2a\u533a\u6269\u5bb9\u51fa\u73b0\u95ee\u9898\u3001\u533a\u57df\u6027\u7684\u7f51\u7edc\u8d28\u91cf\u95ee\u9898\u3001\u7a0b\u5e8f\u5185\u90e8\u7684\u903b\u8f91\u5bfc\u81f4\u4e00\u4e9b bug \u7b49\uff0c\u4e5f\u5f97\u5230\u4e86\u4ea7\u54c1\u7814\u53d1\u7684\u8ba4\u540c\u548c\u80af\u5b9a\u3002","title":"\u7b2c\u4e00\u7bc7 \u8fd0\u7ef4\u7684\u4ef7\u503c\u548c\u76ee\u6807"},{"location":"chapter_2/yunweijiazhi/#_1","text":"","title":"\u6982\u8ff0"},{"location":"chapter_2/yunweijiazhi/#_2","text":"\u8fd9\u91cc\u5206\u4e09\u6b21\u6982\u62ec, \u5176\u5b9e\u662f\u4e00\u4e2a\u610f\u601d \u4e3a\u4ea7\u54c1\u63d0\u4f9b\u53ef\u63a7\u6210\u672c\u4e0b\u9ad8\u8d28\u3001\u9ad8\u6548\u7684\u8fd0\u7ef4\u670d\u52a1 \u82b1\u66f4\u5c11\u7684\u94b1\uff0c\u8ba9\u4ea7\u54c1\u66f4\u5feb\u8fed\u4ee3\uff0c\u66f4\u7a33\u5b9a\u8fd0\u884c \u80fd\u591f\u505a\u5230\u65e0\u7f1d\u3001\u5b89\u5168\u3001\u4e0d\u505c\u7684\u53d8\u66f4\u7ba1\u7406\uff0c\u662f\u8fd0\u7ef4\u90e8\u95e8\u80fd\u7ed9\u516c\u53f8\u505a\u7684\u6700\u5927\u8d21\u732e \u6709\u4e9b\u8fd0\u7ef4\u540c\u4ec1\u6982\u51b5\u4e86\u8fd0\u7ef4\u4e5d\u5b57\u771f\u8a00\u201c\u5b89\u5168\u7a33\u5b9a\u9ad8\u6548\u4f4e\u6210\u672c\u201d\uff0c\u8bf4\u7684\u975e\u5e38\u5230\u4f4d\u3002 \u5927\u90e8\u5206\u516c\u53f8,\u8fd0\u7ef4\u90e8\u95e8\u5e94\u8be5\u4f1a\u6709\u4ee5\u4e0b 4 \u4e2a\u56e2\u961f: \u4e1a\u52a1\u8fd0\u7ef4 \uff08\u8d1f\u8d23\u548c\u5177\u4f53\u7684\u4e1a\u52a1\u90e8\u95e8\u5bf9\u63a5,\u5229\u7528\u73b0\u6709\u7684\u5de5\u5177\u548c\u5f00\u6e90\u6280\u672f\uff0c\u89e3\u51b3\u4e1a\u52a1\u90e8\u95e8\u7684\u5404\u7c7b\u8fd0\u7ef4\u9700\u6c42\uff09 \u8fd0\u7ef4\u5f00\u53d1 (\u8d1f\u8d23\u6574\u4e2a\u8fd0\u7ef4\u56e2\u961f\u7684\u5de5\u5177\u5efa\u8bbe\uff0c\u5f62\u6210\u4e00\u5957\u8fd0\u7ef4\u5de5\u5177\u5e73\u53f0) \u7cfb\u7edf\u8fd0\u7ef4 \uff08\u8d1f\u8d23\u6574\u4e2a\u57fa\u7840\u8bbe\u65bd\u7684\u7a33\u5b9a\u3001\u5305\u62ec\u64cd\u4f5c\u7cfb\u7edf\u5b9a\u5236\u3001\u865a\u62df\u5316\u3001\u673a\u623f\u7f51\u7edc\u7ba1\u7406\u7b49\uff09 \u76d1\u63a7\u8fd0\u7ef4 (7*24 \u5c0f\u65f6\u5012\u73ed,\u6709\u95ee\u9898\u76f4\u63a5 call \u76f8\u5e94\u7684\u8fd0\u7ef4\u548c\u7814\u53d1\u4eba\u5458\u8fdb\u884c\u89e3\u51b3) \u5f53\u7136,\u53ef\u80fd\u8fd8\u4f1a\u6709\u5355\u72ec\u7684\"\u5b89\u5168\u8fd0\u7ef4\"\u5c0f\u7ec4\uff0c\u4ee5\u53ca\u548c\u8fd0\u7ef4\u90e8\u5e76\u7acb\u7684\"DBA\"\u56e2\u961f. \u6211\u8ba4\u4e3a\u65e0\u8bba\u5728\u54ea\u4e2a\u56e2\u961f\uff0c\u8fd0\u7ef4\u5de5\u7a0b\u5e08\u4eec\u90fd\u5e94\u8be5\u628a\u201c\u5b89\u5168\u7a33\u5b9a\u9ad8\u6548\u4f4e\u6210\u672c\u201d\u8fd9\u4e2a\u4e5d\u5b57\u771f\u8a00\u7262\u8bb0\u5fc3\u5934,\u5bf9\u81ea\u5df1\u505a\u7684\u5de5\u4f5c\u4ece\u4e5d\u5b57\u771f\u8a00\u7684\u89d2\u5ea6\u53bb\u5c55\u5f00\u601d\u8003\u548c\u8fdb\u884c\u6548\u679c\u8861\u91cf.","title":"\u4e00 \u7528\u4e00\u53e5\u8bdd\u6765\u6982\u62ec\u8fd0\u7ef4\u7684\u4ef7\u503c"},{"location":"chapter_2/yunweijiazhi/#_3","text":"","title":"\u4e8c \u601d\u7ef4\u5bfc\u56fe"},{"location":"chapter_2/yunweijiazhi/#_4","text":"\u5b89\u5168\u3001\u7a33\u5b9a\u3001\u9ad8\u6548\u3001\u4f4e\u6210\u672c\uff0c\u600e\u4e48\u624d\u80fd\u628a\u8fd9\u56db\u5927\u76ee\u6807\u505a\u597d\uff1f\u5e94\u8be5\u505a\u54ea\u4e9b\u4e8b\u60c5\u6765\u8fbe\u6210\u76ee\u6807\uff1f\u7528\u4e00\u5f20\u8111\u56fe\u6765\u68b3\u7406\u4e00\u4e0b\uff1a","title":"(\u4e00) \u601d\u7ef4\u5bfc\u56fe"},{"location":"chapter_2/yunweijiazhi/#_5","text":"\u8fd9\u7bc7\u6587\u7ae0\u662f\u5728 \u5fae\u4fe1\u516c\u4f17\u53f7\u770b\u5230\u5e76\u6536\u85cf\u7684 . \u611f\u8c22\u539f\u6587\u4f5c\u8005---\u79e6\u6653\u8f89\u3002 \u5173\u4e8e\u79e6\u6653\u8f89\u5927\u795e\uff0c\u6211\u6240\u8bb0\u5f97\u7684 2 \u4ef6\u4e8b\u60c5: \u662f\u5c0f\u7c73\u5f00\u6e90\u76d1\u63a7\u7cfb\u7edf open-falcon \u7684\u4e3b\u7a0b \u6bcf\u5929 6 \u70b9\u5230\u516c\u53f8\uff0c\u4e00\u5929\u53ef\u4ee5\u6bd4\u522b\u4eba\u591a\u505a\u5f88\u591a\u4e8b\u60c5","title":"\uff08\u4e8c) \u53c2\u8003\u6587\u7ae0"},{"location":"chapter_2/yunweijiazhi/#devops-sre","text":"DevOps\uff0c\u5f88\u591a\u4eba\u7406\u89e3\u4e3a\u5c31\u662f\u8ba9\u7814\u53d1\u90e8\u95e8\u505a\u8fd0\u7ef4\u7684\u4e8b\uff0c\u6216\u8005\u8fd0\u7ef4\u90e8\u95e8\u505a\u7814\u53d1\u7684\u4e8b\u60c5\uff0c\u4f46\u5b9e\u9645\u4e0a DevOps \u5728\u56fd\u5916\u7684\u5b9a\u4e49\u66f4\u5bbd\u6cdb\u4e00\u70b9\u3002DevOps \u7684\u601d\u60f3\u66f4\u591a\u7684\u662f\u8bf4\u628a\u6574\u4e2a\u5f00\u53d1\u6d41\u7a0b\u7684\u754c\u9650\u6253\u901a\uff0c\u4ea7\u54c1\u6709\u7684\u65f6\u5019\u4e5f\u8981\u5e72\u4e00\u4e9b\u7814\u53d1\u7684\u4e8b\uff0c\u7814\u53d1\u6709\u65f6\u5019\u628a\u8fd9\u4e2a\u4fe1\u606f\u8981\u5f88\u5feb\u7684\u53cd\u9988\u7ed9\u8fd9\u4e2a\u4ea7\u54c1\uff0c\u5f00\u53d1\u548c\u8fd0\u7ef4\u6216\u8005 QA \u548c\u8fd0\u7ef4\u4e4b\u95f4\u7684\u754c\u9650\u4e5f\u6253\u901a\u3002 SRE \u5c31\u662f DevOps \u7684\u601d\u60f3\u5728\u5f00\u53d1\u548c\u8fd0\u7ef4\u4e4b\u95f4\u7684\u4e00\u4e2a\u5e73\u8861 .","title":"\u4e09 \u5173\u4e8e DevOps \u548c SRE"},{"location":"chapter_2/yunweijiazhi/#sre","text":"\u8fd9\u4e2a\u56fe\u662f\u6211\u53d1\u660e\u7684\uff0c\u4e66\u4e2d\u6ca1\u6709\u63d0\u5230\u3002\u4e66\u91cc\u5927\u6982\u6709\u4e8c\u5341\u591a\u7ae0\u7684\u5185\u5bb9\u662f\u5728\u8bb2 SRE \u7684\u5404\u79cd\u65e5\u5e38\u5de5\u4f5c(In general, an SRE team is responsible for the availability, latency, performance, efficiency, change management, monitoring, emergency response, and capacity planning of their services)\uff0c\u7b80\u5355\u63d0\u4e86\u4e00\u4e0b\u5b83\u7684\u91d1\u5b57\u5854\u6a21\u578b\uff0c\u4e8e\u662f\u6211\u5f52\u7eb3\u603b\u7ed3\u4e86\u4e00\u4e0b\u3002\u8fd9\u91cc\u662f\u7531\u4e0b\u81f3\u4e0a\uff0c\u4e0b\u9762\u7684\u4e8b\u4efd\u989d\u6bd4\u8f83\u5927\u4e00\u70b9\uff0c\u4e0a\u9762\u7684\u4e8b\u4efd\u989d\u6bd4\u8f83\u5c0f\u4e00\u70b9\uff0c\u5206\u4e86\u4e09\u7c7b\u3002\u7b2c\u4e00\u7c7b\uff0c\u8fd0\u7ef4\u90e8\u95e8\u6700\u91cd\u8981\u7684\u662f\u5e94\u6025\u54cd\u5e94\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u4e1a\u52a1\u8d8a\u6765\u8d8a\u5927\uff0c\u4e0e\u8fd0\u8425\u7684\u7ed3\u5408\u8d8a\u6765\u8d8a\u7d27\u5bc6\uff0c\u5f88\u591a\u65f6\u5019\u8981\u5904\u7406\u7684\u4e8b\u60c5\u66f4\u591a\u7684\u662f\u5546\u4e1a\u548c\u8fd0\u8425\u4e0a\u7684\u4e8b\uff0c\u4e5f\u5305\u62ec\u8f6f\u4ef6\u4e0a\u7684\u95ee\u9898\uff0c\u8fd9\u4e2a\u90e8\u95e8\u6700\u7279\u6b8a\u6216\u8005\u6700\u552f\u4e00\u7684\u804c\u8d23\u5c31\u662f\u5e94\u6025\u54cd\u5e94\u3002\u4e4b\u4e0a\u662f\u65e5\u5e38\u8fd0\u7ef4\uff0c\u4fdd\u8bc1\u673a\u5668\u80fd\u591f\u6b63\u5e38\u66f4\u65b0\u3001\u5feb\u901f\u8fed\u4ee3\u3002\u518d\u5f80\u4e0a\u662f\u8f93\u51fa\u4e00\u4e9b\u5de5\u7a0b\u7814\u53d1\uff0c\u65e0\u8bba\u662f\u505a\u5de5\u5177\uff0c\u8fd8\u662f\u505a\u9ad8\u53ef\u7528\u67b6\u6784\u3001\u63d0\u9ad8\u53ef\u9760\u6027\uff0c\u8fd9\u4e9b\u90fd\u662f\u6700\u4e0a\u5c42\u7684\u4e1c\u897f\uff0c\u53ea\u6709\u628a\u5e95\u4e0b\u5168\u90e8\u505a\u597d\u4e86\u624d\u80fd\u8bf4\u5230\u4e0a\u9762\u3002","title":"(\u4e00) SRE \u5de5\u4f5c\u804c\u8d23"},{"location":"chapter_2/yunweijiazhi/#1","text":"\u5e94\u6025\u54cd\u5e94\u662f\u8fd0\u7ef4\u90e8\u95e8\u5728\u516c\u53f8\u6700\u72ec\u7279\u7684\u4e00\u70b9\uff0c\u8868\u73b0\u4e3a\u5f53\u516c\u53f8\u51fa\u73b0\u95ee\u9898\u65f6\uff0c\u5e94\u8be5\u627e\u8c01\u6216\u8005\u6d41\u7a0b\u5e94\u8be5\u662f\u600e\u6837\u7684\u3002\u6211\u56de\u56fd\u4e4b\u540e\u89c1\u4e86\u4e0d\u5c11\u521d\u521b\u4f01\u4e1a\uff0c\u4ed6\u4eec\u7f51\u7ad9\u51fa\u95ee\u9898\u4e86\uff0c\u5f80\u5f80\u662f CEO \u5148\u53d1\u73b0\uff0cCEO \u6253\u7535\u8bdd\u201c\u54ce\uff0c\u8fd9\u4e2a\u5230\u5e95\u662f\u600e\u4e48\u56de\u4e8b\u554a\u201d\uff0c\u7136\u540e\u6bcf\u4e00\u4e2a\u4eba\u90fd\u8bf4\u201c\u4e0d\u77e5\u9053\u554a\uff0c\u4e0d\u662f\u6211\u8d1f\u8d23\u5440\uff0c\u6211\u5f97\u627e\u8c01\u8c01\u201d\u3002\u4e0d\u7ba1\u591a\u5927\u4e00\u4ef6\u4e8b\u90fd\u5f97\u4f20\u904d\u6574\u4e2a\u516c\u53f8\uff0c\u6574\u4e2a\u6548\u7387\u975e\u5e38\u6df7\u4e71\u3002 \u6211\u5728 Google \u5f85\u4e86\u516b\u5e74\u65f6\u95f4\uff0c\u8fd9\u6837\u7684\u6d41\u7a0b\u4e5f\u7ecf\u5386\u8fc7\uff0c\u4f46\u662f\u6700\u8fd1\u8fd9\u51e0\u5e74 Google \u975e\u5e38\u91cd\u89c6\u8fd9\u4e00\u70b9\uff0c\u5efa\u7acb\u4e86\u4e00\u6574\u5957\u5e94\u6025\u4e8b\u4ef6\u5904\u7406\u65b9\u5f0f\u3002\u9996\u5148\u8981\u6709\u5168\u9762\u76d1\u63a7\uff0c\u76d1\u63a7\u8fd9\u4ef6\u4e8b\u60c5\u662f\u6301\u4e45\u4e0d\u65ad\u7684\uff0c\u91cd\u4e2d\u4e4b\u91cd\u3002SRE \u6240\u6709\u4eba\u90fd\u8981\u975e\u5e38\u4e86\u89e3\u6574\u4e2a\u76d1\u63a7\u7cfb\u7edf\u5728\u6240\u6709\u4e1a\u52a1\u4e2d\u7684\u90e8\u7f72\u5b9e\u65bd\uff0c\u5176\u5b9e\u8fd9\u662f\u6211\u4eec\u5e73\u65f6\u82b1\u7cbe\u529b\u6700\u591a\u7684\u5730\u65b9\u3002\u76d1\u63a7\u7cfb\u7edf\u91cc\u9762\u5bf9\u6574\u4e2a\u7cfb\u7edf\u6240\u6709\u65b9\u9762\u90fd\u6709\u76d1\u63a7\uff0c\u4e0d\u5149\u5305\u62ec\u4e1a\u52a1\u6307\u6807\uff0c\u4e5f\u5305\u62ec\u6027\u80fd\u6307\u6807\u3001\u6548\u7387\u6307\u6807\u3002\u76d1\u63a7\u5e94\u8be5\u5e73\u53f0\u5316\u3001\u7cfb\u7edf\u5316\uff0c\u4e0d\u505c\u7684\u5f80\u4e0a\u79ef\u7d2f\uff0c\u591a\u505a\u4e00\u4e9b\u6a21\u677f\uff0c\u540c\u8d28\u5316\u7684\u7cfb\u7edf\u5c31\u53ef\u4ee5\u7528\u540c\u6837\u7684\u65b9\u6cd5\u53bb\u505a\u76d1\u63a7\u3002 \u7b2c\u4e8c\u70b9\u662f\u5e94\u6025\u4e8b\u52a1\u5904\u7406\uff0c\u5e94\u6025\u4e8b\u52a1\u5904\u7406\u5206\u4e24\u90e8\u5206\uff0c\u7b2c\u4e00\u90e8\u5206\u662f\u6f14\u4e60\uff0c\u53e6\u5916\u4e00\u90e8\u5206\u662f\u771f\u6b63\u7684\u5904\u7406\u6d41\u7a0b\u3002\u5982\u4f55\u628a\u5b83\u505a\u597d\uff1f\u5b9e\u9645\u4e0a\u5c31\u662f\u8981\u4e0d\u505c\u7684\u53bb\u6f14\u4e60\u3001\u53bb\u505a\u8fd9\u4e2a\u4e8b\u60c5\u3002\u50cf\u521a\u624d\u4e3e\u7684\u4f8b\u5b50\uff0c\u7f51\u7ad9\u6302\u4e86\uff0c\u9996\u5148\u4e0d\u5e94\u8be5 CEO \u5148\u53d1\u73b0\uff0c\u800c\u5e94\u8be5\u662f\u76d1\u63a7\u7cfb\u7edf\u6216\u8005\u62a5\u8b66\u7cfb\u7edf\u5148\u544a\u8b66\uff0c\u5728\u53d1\u73b0\u4e4b\u524d\u5c31\u5f88\u5e94\u8be5\u660e\u786e\u8fd9\u4e2a\u4e1c\u897f\u5e94\u8be5\u8c01\u6392\u67e5\uff0c\u8c01\u5904\u7406\uff0c\u8fd9\u4e2a\u4fe1\u606f\u5e94\u8be5\u65e9\u5c31\u53d1\u7ed9\u5408\u9002\u7684\u4eba\u53bb\u5904\u7406\uff0c\u751a\u81f3\u4ed6\u5e94\u8be5\u65e9\u5c31\u5728\u505a\u4e86\u3002\u5982\u679c\u53d1\u751f\u7279\u522b\u5927\u7684\uff0c\u9700\u8981\u8de8\u90e8\u95e8\u4e4b\u95f4\u534f\u4f5c\u7684\u95ee\u9898\uff0c\u90a3\u4e0d\u5e94\u8be5\u53ea\u662f\u9886\u5bfc\u73b0\u573a\u8c03\u914d\uff0c\u800c\u662f\u6574\u4e2a\u7ec4\u7ec7\u6bcf\u4e2a\u4eba\u90fd\u660e\u767d\u8fd9\u4e2a\u6d41\u7a0b\u5e94\u8be5\u662f\u600e\u4e48\u6837\u7684\uff0c\u76f4\u63a5\u5c31\u505a\u3002Google \u751a\u81f3\u53ef\u4ee5\u505a\u5230\u5728\u4e00\u6b21\u4e8b\u6545\u4e2d\u95f4\u4e24\u5730\u4ea4\u73ed\uff0c\u67d0\u4e2a\u56e2\u961f\u5904\u7406\u4e00\u534a\uff0c\u7136\u540e\u6211\u4ea4\u63a5\u7ed9\u53e6\u5916\u4e00\u8fb9\u56e2\u961f\uff0c\u5c31\u4e0b\u73ed\u56de\u5bb6\u4e86\uff0c\u6301\u7eed\u4e0d\u505c\u7684\u6709\u4eba\u7ee7\u7eed\u8ddf\u8e2a\u5904\u7406\u8fd9\u4ef6\u4e8b\u60c5\uff0c\u800c\u4e0d\u4f1a\u51fa\u73b0\u95ee\u9898\u3002\u8fd9\u6837\u4e00\u4e2a\u6a21\u5f0f\u662f\u6211\u89c9\u5f97\u975e\u5e38\u503c\u5f97\u6211\u4eec\u601d\u8003\u7684\u3002 \u5904\u7406\u5b8c\u95ee\u9898\u4e4b\u540e\uff0c\u8981\u603b\u7ed3\u3002\u4e4b\u524d\u542c\u8fc7\u7684\u4e00\u4e2a\u6545\u4e8b\u662f\uff0c\u67d0\u516c\u53f8\u4e1a\u52a1\u51fa\u73b0\u4e86\u4e00\u4e2a\u4e8b\u6545\uff0c\u5927\u5bb6\u52a0\u73ed\u52a0\u70b9\uff0c\u5341\u51e0\u4e2a\u5c0f\u65f6\u6ca1\u7761\u89c9\u628a\u8fd9\u4e8b\u641e\u5b9a\uff0c\u7136\u540e\u9886\u5bfc\u8fc7\u6765\u5c31\u8bf4\u4e86\u4e00\u53e5\u201c\u5927\u5bb6\u8f9b\u82e6\u4e86\uff0c\u56de\u5bb6\u7761\u89c9\u5427\u201d\u3002\u4f46\u662f\uff0c\u5176\u5b9e\u5728\u8fd9\u4e2a\u65f6\u5019\u6211\u8981\u8bf4\uff0c\u9886\u5bfc\u5149\u8bf4\u8fd9\u4e2a\u5176\u5b9e\u6070\u6070\u662f\u4e0d\u591f\u7684\u3002\u9886\u5bfc\u5728\u8fd9\u91cc\u5e94\u8be5\u95ee\uff1a\u4e3a\u4ec0\u4e48\u52a0\u73ed\u554a\uff1f\u8fd9\u4e2a\u4e8b\u60c5\u4e3a\u4ec0\u4e48\u4f1a\u53d1\u751f\u554a\uff0c\u4e0b\u6b21\u80fd\u4e0d\u80fd\u4e0d\u53d1\u751f\uff0c\u5927\u5bb6\u80fd\u4e0d\u80fd\u4e0d\u52a0\u73ed\uff0c\u80fd\u4e0d\u80fd\u4e0d\u71ac\u591c\uff1f\u8fd9\u6837\u624d\u5bf9, \u80fd\u505a\u5230\u4e8b\u540e\u603b\u7ed3\u8fd9\u4e2a\u4e8b\u60c5\u5f88\u96be\uff0c\u4f46\u53ea\u6709\u628a\u8fd9\u4e2a\u505a\u597d\u4e86\uff0c\u624d\u80fd\u964d\u4f4e\u4ee5\u540e\u95ee\u9898\u53d1\u751f\u7684\u51e0\u7387\u3002","title":"1 \u5e94\u6025\u54cd\u5e94"},{"location":"chapter_2/yunweijiazhi/#2","text":"\u65e5\u5e38\u8fd0\u7ef4\u505a\u5f97\u6700\u591a\u7684\u53ef\u80fd\u662f\u53d8\u66f4\u7ba1\u7406\u3002\u4e1a\u52a1\u73b0\u5728\u53d1\u5c55\u975e\u5e38\u5feb\uff0c\u8fed\u4ee3\u901f\u5ea6\u3001\u8fed\u4ee3\u5468\u671f\u975e\u5e38\u5feb\u3002\u5176\u5b9e\u8fd9\u4ef6\u4e8b\u60c5\u80fd\u505a\u597d\uff0c \u80fd\u591f\u505a\u5230\u65e0\u7f1d\u3001\u5b89\u5168\u3001\u4e0d\u505c\u7684\u53d8\u66f4\u7ba1\u7406\uff0c\u662f\u8fd0\u7ef4\u90e8\u95e8\u80fd\u7ed9\u516c\u53f8\u505a\u7684\u6700\u5927\u8d21\u732e \u3002 \u7b2c\u4e8c\u4e2a\uff0c\u5bb9\u91cf\u89c4\u5212\uff0c\u5f53\u89c4\u6a21\u5927\u5230\u4e00\u5b9a\u7a0b\u5ea6\u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u6709\u4eba\u6765\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\u2014\u2014\u5230\u5e95\u8981\u4e70\u591a\u5c11\u65b0\u673a\u5668\uff0c\u80fd\u5426\u4fdd\u8bc1\u660e\u5e74\u7684\u6027\u80fd\u3001\u6548\u7387\uff0c\u90a3\u8c01\u6765\u8d1f\u8d23\u8fd9\u4ef6\u4e8b\u5462\uff1fSRE \u90e8\u95e8\u63d0\u51fa\u8fd9\u4e9b\u65b9\u6848\uff0c\u7136\u540e\u8981\u786e\u4fdd\u8fd9\u4e9b\u6307\u6807\u3001\u8fd9\u4e9b\u4e1c\u897f\u662f\u6709\u6570\u636e\u652f\u6491\u7684\uff0c\u786e\u5b9e\u80fd\u89e3\u51b3\u95ee\u9898\u7684\u3002","title":"2 \u65e5\u5e38\u8fd0\u7ef4"},{"location":"chapter_2/yunweijiazhi/#3","text":"\u5de5\u7a0b\u7814\u53d1\u867d\u7136\u505a\u5f97\u5c11\uff0c\u4f46\u662f\u5de5\u4f5c\u5f88\u5173\u952e\u3002SRE \u5728\u5de5\u7a0b\u7814\u53d1\u4e0a\u4e3b\u8981\u7684\u5de5\u4f5c\uff0c\u9996\u5148\u662f\u5e2e\u4ea7\u54c1\u90e8\u95e8\u786e\u5b9a\u4e00\u4e2a SLO\u3002SLO \u662f\u4e00\u4e2a\u670d\u52a1\u6307\u6807\uff0c\u6bcf\u4e00\u4e2a\u4ea7\u54c1\u90fd\u6709\u4e00\u4e2a\u670d\u52a1\u6307\u6807\u3002\u4efb\u4f55\u7cfb\u7edf\u90fd\u4e0d\u53ef\u80fd\u662f\u767e\u5206\u4e4b\u767e\u53ef\u9760\u7684\uff0c\u4e5f\u6ca1\u6709\u5fc5\u8981\u505a\u5230\u767e\u5206\u4e4b\u767e\u53ef\u9760\u3002\u8fd9\u91cc\u5f97\u6709\u4e00\u4e2a\u76ee\u6807\uff0c\u6bd4\u5982\u8bf4\u53ef\u4ee5\u6bcf\u4e2a\u6708\u4e2d\u65ad\u51e0\u5206\u949f\u3002\u8fd9\u4ef6\u4e8b\u60c5\u662f\u8981\u4ea7\u54c1\u90e8\u95e8\u8003\u8651\u6e05\u695a\u7684\u3002\u6bd4\u5982\u6211\u4e4b\u524d\u5728 YouTube \u505a\u89c6\u9891\u5b58\u50a8\u3001\u89c6\u9891\u70b9\u64ad\u7684\u65f6\u5019\uff0c\u8981\u8003\u8651\u6bcf\u4e2a\u89c6\u9891\u5230\u5e95\u662f\u5b58\u4e00\u4efd\u8fd8\u662f\u5b58\u4e24\u4efd\u7684\u95ee\u9898\uff0c\u5c06\u8fd9\u79cd\u95ee\u9898\u653e\u5230\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u90e8\u7f72\u89c4\u6a21\u91cc\u9762\u7684\u65f6\u5019\uff0c\u53ea\u6709\u4ea7\u54c1\u90e8\u95e8\u80fd\u591f\u62cd\u677f\u3002\u8bf4\u5230\u5e95\u662f\u8981\u4e0d\u8981\u82b1\u8fd9\u4e2a\u9884\u7b97\uff0c\u8981\u4e0d\u8981\u82b1\u8fd9\u4e48\u591a\u94b1\u53bb\u63d0\u9ad8 0.1%\u7684\u53ef\u9760\u6027\u6216\u8005 0.01%\u7684\u53ef\u9760\u6027\u3002 \u53e6\u5916\u4e00\u70b9\u662f\u65e0\u4eba\u5316\u8fd0\u7ef4\u3002\u5927\u5bb6\u90fd\u770b\u8fc7\u300a\u9ed1\u5ba2\u5e1d\u56fd\u300b\u5427\uff1f\u4e00\u9192\u6765\u53d1\u73b0\u5927\u5bb6\u90fd\u662f\u7535\u6c60\uff0c\u90fd\u662f\u4e3a\u673a\u5668\u670d\u52a1\u7684\u3002\u5176\u5b9e\u628a\u8fd9\u4e2a\u6bd4\u55bb\u653e\u5728\u8fd0\u7ef4\u90e8\u95e8\u975e\u5e38\u5408\u9002\u3002\u56e0\u4e3a\u5982\u679c\u4e0d\u505c\u7684\u5f00\u53d1\u51fa\u9700\u8981\u4eba\u6765\u64cd\u4f5c\u8fd0\u7ef4\u7684\u7cfb\u7edf\uff0c\u7ed3\u679c\u5927\u5bb6\u6700\u540e\u90fd\u662f\u7535\u6c60\uff0c\u660e\u663e\u662f\u4e0d\u53ef\u6301\u7eed\u7684\u3002\u5982\u679c\u4e0d\u505c\u7684\u4ea7\u751f\u8fd9\u79cd\u9700\u8981\u4eba\u6765\u64cd\u4f5c\u7684\u4e1c\u897f\uff0c\u4e0d\u505c\u7684\u62db\u4eba\uff0c\u6700\u540e\u5c31\u53d8\u6210\u4e0d\u505c\u7684\u8fd0\u7ef4\u8fd9\u4e2a\u4e1c\u897f\u3002\u628a\u6574\u4e2a\u6d41\u7a0b\u81ea\u52a8\u5316\uff0c\u5efa\u7acb\u4e00\u4e2a\u80fd\u591f\u5e94\u5bf9\u590d\u6742\u4e1a\u52a1\u7684\u5e73\u53f0\uff0c\u8fd9\u5c31\u662f\u5de5\u7a0b\u7814\u53d1\u4e0a\u6700\u9700\u8981\u7684\u4e1c\u897f\u3002","title":"3 \u5de5\u7a0b\u7814\u53d1"},{"location":"chapter_2/yunweijiazhi/#sre_1","text":"SRE \u5728 Google \u6709\u5341\u51e0\u5e74\u7684\u5386\u53f2\u4e86\u3002\u8fd9\u4e2a\u6a21\u578b\u662f\u5982\u4f55\u6210\u529f\u7684\uff1f\u6211\u603b\u7ed3\u5982\u4e0b\u51e0\u70b9\uff1a","title":"(\u4e8c) SRE \u6a21\u578b\u6210\u529f\u7684\u5173\u952e\u8981\u7d20"},{"location":"chapter_2/yunweijiazhi/#1_1","text":"\u8fd0\u7ef4\u884c\u4e1a\u4ece\u6765\u90fd\u8bf4\u4e0d\u6e05\u695a\u81ea\u5df1\u662f\u5e72\u561b\u7684\uff0c\u8fd9\u662f\u4e0d\u5bf9\u7684\u3002\u5f88\u591a\u4eba\u8ba4\u4e3a\u4f1a\u64cd\u4f5c Linux\uff0c\u6216\u8005\u662f DBA\u3001\u4f1a\u914d\u7f51\u7edc\uff0c\u5c31\u7b97\u8fd0\u7ef4\u4e86\u3002\u5b9e\u9645\u4e0a\u8fd0\u7ef4\u7684\u8303\u56f4\u8981\u6bd4\u8fd9\u4e2a\u5927\u5f97\u591a\u3002\u8fd0\u7ef4\u5e94\u8be5\u662f\u8d1f\u8d23\u516c\u53f8\u4e1a\u52a1\u6b63\u5e38\u8fd0\u8f6c\u7684\u89d2\u8272\uff0c\u8fd9\u624d\u662f\u771f\u6b63\u7684\u8fd0\u7ef4\u3002\u5728\u51fa\u95ee\u9898\u7684\u65f6\u5019\u80fd\u89e3\u51b3\u95ee\u9898\uff0c\u4fdd\u969c\u4e1a\u52a1\u8fde\u7eed\u6027\uff0c\u751a\u81f3\u907f\u514d\u95ee\u9898\u53d1\u751f\uff0c\u8fd9\u624d\u662f\u8fd0\u7ef4\u804c\u4e1a\u7684\u5b9a\u4e49\u3002 \u5177\u4f53\u5982\u4f55\u505a\u5462\uff1f\u63a8\u6f14\u548c\u6f14\u4e60\u3002 \u63a8\u6f14\u662f\u7ed9\u4f60\u4e00\u5957\u7cfb\u7edf\uff0c\u4f60\u8981\u5206\u6790\u51fa\u6765\u5b83\u4f1a\u6709\u4ec0\u4e48\u6837\u7684\u5931\u8d25\u6a21\u5f0f\u3002\u6211\u4eec\u5f53\u65f6\u7ecf\u5e38\u5728\u9ed1\u677f\u4e0a\u753b\u7cfb\u7edf\u56fe\uff0c\u5927\u5bb6\u4e00\u8d77\u8ba8\u8bba\u5982\u679c\u8fd9\u4e2a\u7ec4\u4ef6\u51fa\u95ee\u9898\u4e86\u4f1a\u53d1\u751f\u4ec0\u4e48\u60c5\u51b5\uff0c\u7528\u6237\u5230\u5e95\u8fd8\u80fd\u4e0d\u80fd\u770b\u89c6\u9891\u4e86\uff0c\u7528\u6237\u8d2d\u4e70\u6d41\u7a0b\u8fd8\u80fd\u4e0d\u80fd\u8d70\u901a\u3002\u5b9e\u9645\u4e0a\u8fd9\u4e9b\u8fc7\u7a0b\u5f88\u591a\u65f6\u5019\u8f6f\u4ef6\u5f00\u53d1\u662f\u4e0d\u8003\u8651\u7684\uff0c\u4f46\u662f\u5982\u4f55\u62c6\u5206\u3001\u5982\u4f55\u53bb\u4fdd\u8bc1\u6bcf\u4e2a\u73af\u8282\u7684\u53ef\u9760\uff0c\u8fd9\u624d\u662f\u8fd0\u7ef4\u8fd9\u4e2a\u884c\u4e1a\u6700\u5173\u952e\u7684\u4e00\u70b9\uff0c\u6240\u4ee5\u4e00\u5b9a\u8981\u505a\u8fd9\u79cd\u63a8\u6f14\u3002\u53ea\u6709\u8fd9\u79cd\u63a8\u6f14\u624d\u80fd\u8f93\u51fa\u6539\u53d8\uff0c\u8ba9\u7cfb\u7edf\u66f4\u53ef\u9760\u3002 \u7b2c\u4e8c\u70b9\u662f\u6f14\u4e60\u3002\u6211\u4eec\u5f53\u65f6\u6bcf\u5468\u90fd\u4f1a\u8fdb\u884c\u4e00\u6b21\u5c0f\u578b\u707e\u96be\u6f14\u4e60\uff0c\u4f8b\u5982\u628a\u4ee5\u524d\u51fa\u73b0\u7684\u95ee\u9898\u62ff\u51fa\u6765\u4e00\u4e2a\uff0c\u8ba9\u65b0\u52a0\u5165\u56e2\u961f\u7684\u4eba\u53bb\u6f14\u4e60\uff0c\u6240\u6709\u5176\u4ed6\u7684\u4eba\u4e5f\u90fd\u8981\u53bb\u53c2\u52a0\u3002\u8fd9\u91cc\u4e3b\u8981\u662f\u89c2\u5bdf\u65b0\u4eba\u5230\u5e95\u662f\u600e\u4e48\u601d\u8003\u8fd9\u4e2a\u7cfb\u7edf\u7684\uff0c\u65b0\u4eba\u505a\u51fa\u7684\u51b3\u5b9a\u5230\u5e95\u662f\u4e0d\u662f\u6b63\u786e\u7684\u3002\u56e0\u4e3a\u4e00\u4e2a\u4eba\u505a\u51fa\u7684\u51b3\u5b9a\u662f\u4e0d\u662f\u6b63\u786e\u7684\u5b9e\u9645\u4e0a\u53d6\u51b3\u4e8e\u7cfb\u7edf\u7ed9\u7684\u53cd\u9988\u5230\u5e95\u662f\u4e0d\u662f\u5bf9\u7684\u3002Google \u8ba4\u4e3a\u8fd0\u7ef4\u590d\u6742\u7cfb\u7edf\u4e0d\u662f\u4e00\u4e2a\u9760\u667a\u5546\u548c\u8bb0\u5fc6\u529b\u5c31\u80fd\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u4e0d\u80fd\u4f9d\u8d56\u4eba\u4e00\u5b9a\u8981\u77e5\u9053\u8fd9\u6bb5\u8bdd\u6216\u8fd9\u4e2a\u77e5\u8bc6\u70b9\uff0c\u800c\u662f\u8981\u77e5\u9053\u4e00\u79cd\u65b9\u6cd5\uff0c\u77e5\u9053\u5982\u4f55\u53bb\u6392\u9664\u95ee\u9898\u6216\u6392\u67e5\u95ee\u9898\u3002\u8fd0\u7ef4\u7cfb\u7edf\u5e94\u8be5\u63d0\u4f9b\u8db3\u591f\u7684\u4fe1\u606f\uff0c\u8ba9\u8f6e\u503c\u7684\u4eba\u80fd\u591f\u7528\u6b63\u786e\u7684\u65b9\u6cd5\u53bb\u5904\u7406\u95ee\u9898\u3002\u8fd9\u5f88\u50cf\u662f\u80cc\u82f1\u8bed\u8f9e\u5178\u548c\u4f1a\u7528\u82f1\u8bed\u804a\u5929\u7684\u533a\u522b\uff0c\u4f60\u518d\u600e\u4e48\u80cc\u8f9e\u5178\u5173\u952e\u65f6\u523b\u4e5f\u662f\u8981\u67e5\u8f9e\u5178\u7684\uff0c\u4f46\u662f\u771f\u6b63\u80fd\u8fd0\u7528\u8fd9\u4e9b\u4fe1\u606f\u89e3\u51b3\u95ee\u9898\uff0c\u662f\u6bd4\u8f83\u96be\u7684\u3002 \u6b64\u5916\uff0c\u8981\u533a\u5206\u8d23\u4efb\u548c\u6307\u8d23\u3002\u8d23\u4efb\u548c\u6307\u8d23\u662f\u4e24\u4e2a\u4e8b\u60c5\uff0c\u4f46\u662f\u5f88\u591a\u516c\u53f8\u7684\u8fd0\u7ef4\u7ecf\u5e38\u5206\u4e0d\u6e05\u695a\u3002\u4ec0\u4e48\u53eb\u8d23\u4efb\uff0c\u5c31\u662f\u8fd9\u4e2a\u4e8b\u5230\u5e95\u8c01\u8d1f\u8d23\u3002\u4f46\u662f\u6307\u8d23\u662f\u53e6\u5916\u4e00\u56de\u4e8b\u3002\u4f8b\u5982\u4e00\u4e2a\u5458\u5de5\u6572\u9519\u4e86\u4e00\u4e2a\u547d\u4ee4\uff0c\u5927\u5bb6\u8bf4 \u201c\u90fd\u662f\u56e0\u4e3a\u4ed6\u7684\u9519\uff0c\u7ed9\u4ed6\u6263\u5de5\u8d44\u3001\u6263\u5956\u91d1\uff0c\u8ba9\u4ed6\u4e09\u5929\u4e0d\u5403\u996d\u201d\uff0c\u4f46\u8fd9\u5176\u5b9e\u5e76\u4e0d\u771f\u6b63\u89e3\u51b3\u95ee\u9898\u3002\u518d\u4f8b\u5982\uff0c\u6bd4\u5982\u8bf4\u4e00\u4e2a\u7cfb\u7edf\u8bbe\u8ba1\u7535\u6e90\u63d2\u5ea7\uff0c\u6ca1\u6709\u4ed4\u7ec6\u8003\u8651\uff0c\u5f88\u5bb9\u6613\u88ab\u4eba\u8e22\u5230\uff0c\u7ed3\u679c\u6709\u4eba\u771f\u8e22\u5230\u4e86\uff0c\u6574\u4e2a\u673a\u623f\u65ad\u7535\u4e86\u51fa\u4e86\u5f88\u5927\u7684\u4e8b\u6545\u3002\u90a3\u4e48\u4ece Google \u7684\u7406\u5ff5\u6765\u8bf4\u8fd9\u91cc\u4e0d\u662f\u4eba\u7684\u95ee\u9898\uff0c\u800c\u662f\u7cfb\u7edf\u8bbe\u8ba1\u7684\u95ee\u9898\u3002\u8fd9\u91cc\u662f\u4e0d\u662f\u5e94\u8be5\u6709\u4e24\u5957\u7535\u6e90\uff0c\u662f\u4e0d\u662f\u5e94\u8be5\u6709\u4fdd\u62a4\uff1f\u53ea\u6709\u4ece\u7cfb\u7edf\u8bbe\u8ba1\u95ee\u9898\u7684\u89d2\u5ea6\u51fa\u53d1\u624d\u80fd\u771f\u6b63\u89e3\u51b3\u95ee\u9898\uff0c\u800c\u6307\u8d23\u8fd9\u4e2a\u8e22\u5230\u63d2\u5ea7\u7684\u4eba\uff0c\u8ba9\u4ed6\u4e00\u4e2a\u6708\u4e0d\u4e0a\u73ed\uff0c\u751a\u81f3\u5f53\u65f6\u5f00\u9664\u4e5f\u5e76\u4e0d\u80fd\u89e3\u51b3\u7cfb\u7edf\u7684\u8bbe\u8ba1\u95ee\u9898\uff0c\u4e0b\u56de\u603b\u4f1a\u8fd8\u6709\u4eba\u8e22\u5230\u3002 \u200b \u8bf4\u4e00\u4e2a\u6545\u4e8b\uff0c\u6545\u4e8b\u7684\u5185\u5bb9\u662f\u4e00\u4e2a\u4e8b\u6545\u3002\u67d0\u4e2a\u6570\u636e\u4e2d\u5fc3\u6709\u4e00\u6392\u673a\u5668\u8981\u65ad\u7535\uff0c\u6570\u636e\u4e2d\u5fc3\u7684\u4eba\u53d1\u4e86\u4e00\u4e2a\u5de5\u5355\u544a\u8bc9\u64cd\u4f5c\u5458\u8981\u628a\u8fd9\u4e2a\u5f00\u5173\u7ed9\u5173\u4e86\u3002\u7136\u540e\u8fd9\u4e2a\u64cd\u4f5c\u5458\u53bb\u5173\uff0c\u4ed6\u5173\u6389\u4e86\u5f00\u5173\uff0c\u4f46\u662f\u53d1\u73b0\u8fd9\u4e00\u6392\u673a\u5668\u7684\u706f\u6ca1\u706d\uff0c\u53e6\u5916\u4e00\u6392\u7684\u706f\u5374\u706d\u4e86\u2014\u2014\u6309\u9519\u5f00\u5173\u4e86\u3002\u4ed6\u68c0\u67e5\u4e00\u4e0b\u53d1\u73b0\u6309\u9519\u4e86\uff0c\u201c\u556a\u201d\u628a\u53e6\u5916\u4e00\u4e2a\u5f00\u5173\u4e5f\u5173\u4e86\uff0c\u7136\u540e\u518d\u628a\u8fd9\u4e00\u6392\u673a\u5668\u7ed9\u542f\u52a8\uff0c\u7ed3\u679c\u7531\u4e8e\u542f\u52a8\u65f6\u5019\u8fc7\u8f7d\u5bfc\u81f4\u6574\u4e2a\u6570\u636e\u4e2d\u5fc3\u90fd\u65ad\u7535\u4e86\uff0c\u6269\u5927\u4e86\u95ee\u9898\u3002\u5982\u679c\u5355\u7eaf\u53ea\u662f\u6307\u8d23\uff0c\u8fd9\u4e2a\u4eba\u80af\u5b9a\u5b8c\u4e86\uff0c\u8d77\u7801\u5956\u91d1\u6ca1\u6709\u4e86\uff0c\u80fd\u4e0d\u80fd\u4fdd\u4f4f\u5de5\u4f5c\u90fd\u4e0d\u77e5\u9053\u3002\u4f46\u662f Google \u66f4\u5173\u6ce8\u7684\u662f\u8fd9\u4e2a\u4e1c\u897f\u4e3a\u4ec0\u4e48\u4f1a\u5bb9\u6613\u51fa\u9519\uff0c\u8981\u4e48\u662f\u5f00\u5173\u989c\u8272\u4e0d\u5bf9\uff0c\u8981\u4e48\u662f\u76f8\u540c\u673a\u5668\u7684\u64cd\u4f5c\u65b9\u5f0f\u9760\u5f97\u592a\u8fd1\u4e86\uff0c\u4f1a\u8ba9\u4eba\u4ea7\u751f\u8fd9\u79cd\u9519\u8bef\u7684\u5224\u65ad\u3002\u6240\u4ee5\u4f60\u770b Google \u7684\u673a\u623f\u91cc\u90fd\u662f\u4e94\u989c\u516d\u8272\u7684\uff0c\u56e0\u4e3a\u8fd9\u6837\u786e\u5b9e\u6709\u7528\uff0c\u6bd4\u5982\u70ed\u6c34\u7ba1\u662f\u7ea2\u8272\u7684\uff0c\u5236\u51b7\u7ba1\u662f\u84dd\u8272\u7684\uff0c\u6240\u4ee5\u67e5\u8d77\u6765\u5f88\u5bb9\u6613\uff0c\u533a\u5206\u8d77\u6765\u5f88\u5bb9\u6613\uff0c\u5c3d\u91cf\u51cf\u5c11\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\u8fd9\u4e2a\u8bbe\u8ba1\u7684\u601d\u60f3\u5728 SRE \u65e5\u5e38\u5de5\u4f5c\u91cc\u8d2f\u5f7b\u5f97\u975e\u5e38\u6df1\uff0c\u6bcf\u4eba\u5728\u6d41\u7a0b\u6216\u5de5\u4f5c\u7684\u65f6\u5019\u90fd\u8981\u8003\u8651\u5230\u6709\u6ca1\u6709\u88ab\u8bef\u7528\u7684\u53ef\u80fd\uff0c\u7136\u540e\u5982\u4f55\u907f\u514d\u8bef\u7528\u3002","title":"1 \u804c\u4e1a\u5316"},{"location":"chapter_2/yunweijiazhi/#2_1","text":"\u4e13\u4e1a\u5316\u4f53\u73b0\u5728\u4ec0\u4e48\u7a0b\u5ea6\u5462\uff1f\u8981\u771f\u6b63\u7684\u53bb\u5199\u4ee3\u7801\uff0c\u8981\u80fd\u7ed9\u4e1a\u52a1\u7cfb\u7edf\u6216\u8005\u7ed9\u7814\u53d1\u5199\u7684\u4e1c\u897f\u6311\u51fa\u95ee\u9898\uff0c\u63d0\u9ad8\u53ef\u9760\u6027\u3002 \u7b2c\u4e00\uff0c\u51cf\u5c11\u7410\u4e8b\u3002\u8fd0\u7ef4\u4e2d\u6709\u5f88\u591a\u865a\u5047\u7684\u5de5\u4f5c\u3002\u6bcf\u5929\u5f88\u5fd9\uff0c\u7136\u800c\u53c8\u4e0d\u89e3\u51b3\u95ee\u9898\uff0c\u505a\u4e86\u5f88\u591a\u5047\u7684\u5de5\u4f5c\u3002\u5927\u5bb6\u770b\u8d77\u6765\u597d\u50cf\u5f88\u5fd9\uff0c\u4e00\u4e2a\u5c4f\u5e55\u4e0a\u5341\u51e0\u4e2a\u7a97\u53e3\uff0c\u5404\u79cd\u5237\u5c4f\uff0c\u4f46\u5b8c\u5168\u4e0d\u89e3\u51b3\u95ee\u9898\u3002\u66f4\u597d\u7684\u65b9\u5f0f\u662f\u7528\u81ea\u52a8\u5316\u3001\u7cfb\u7edf\u5316\u3001\u5de5\u5177\u5316\u7684\u65b9\u5f0f\u53bb\u6d88\u9664\u8fd9\u79cd\u7410\u4e8b\u7684\u5b58\u5728\u3002\u5982\u679c\u6c38\u8fdc\u9760\u4eba\u5de5\uff0c\u90a3\u6c38\u8fdc\u90fd\u95f2\u4e0d\u4e0b\u6765\u3002 \u7b2c\u4e8c\uff0c\u56de\u5230 SRE\uff0cSRE \u5236\u5ea6\u91cc\u6709\u4e00\u6761\u7ea2\u7ebf\uff0c\u8fd0\u7ef4\u7684\u4eba\u53ea\u80fd\u628a\u4e00\u534a\u7684\u65f6\u95f4\u82b1\u5728\u8fd0\u7ef4\u4e0a\uff0c\u53e6\u5916\u4e00\u534a\u7684\u65f6\u95f4\u5fc5\u987b\u641e\u5de5\u7a0b\u4e0a\u3001\u7814\u53d1\u4e0a\u7684\u4e1c\u897f\u3002\u7814\u53d1\u53ef\u4ee5\u662f\u5199\u5de5\u5177\uff0c\u53ef\u4ee5\u662f\u53c2\u4e0e\u7cfb\u7edf\u8bbe\u8ba1\uff0c\u53c2\u4e0e\u53ef\u9760\u6027\u7684\u63d0\u9ad8\uff0c\u4f46\u662f\u8981\u4fdd\u8bc1\u8fd0\u7ef4\u4e0d\u80fd\u53ea\u5e72\u8fd0\u7ef4\u3002 \u7b2c\u4e09\u70b9\uff0c\u6211\u8ba4\u4e3a\u4e5f\u662f\u6bd4\u8f83\u7f3a\u5c11\u7684\uff0c\u8fd0\u7ef4\u90e8\u95e8\u5149\u6709\u8d23\u4efb\u6ca1\u6709\u51b3\u7b56\u6743\uff0c\u6240\u4ee5\u5927\u5bb6\u90fd\u8bf4\u4e00\u51fa\u4e8b\u6545\uff0c\u8fd0\u7ef4\u5c31\u80cc\u9ed1\u9505\u3002\u600e\u4e48\u4e0d\u80cc\u9ed1\u9505\u5462\uff1f\u8bf4\u6539\u8fd9\u513f\u3001\u6539\u90a3\u513f\uff0c\u7136\u540e\u53d1\u73b0\u6ca1\u6709\u4eba\u6279\u51c6\u6539\u52a8\uff0c\u8fd9\u662f\u6700\u5927\u7684\u95ee\u9898\u3002SRE \u505a\u7684\u6700\u597d\u7684\u4e00\u70b9\u662f\u7ba1\u7406\u5c42\u5bf9 SRE \u7684\u5de5\u4f5c\u65b9\u5f0f\u975e\u5e38\u8ba4\u53ef\u3001\u975e\u5e38\u652f\u6301\uff0c\u4ed6\u4eec\u8ba4\u4e3a\u670d\u52a1\u8d28\u91cf\u662f\u670d\u52a1\u7684\u4e00\u4e2a\u91cd\u8981\u6307\u6807\u3002\u4e00\u65e6\u4e0a\u5347\u5230\u8fd9\u4e2a\u9ad8\u5ea6\uff0cSRE \u90e8\u95e8\u63d0\u51fa\u4e00\u4e9b\u8981\u6c42\u5c31\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\uff0c\u5f97\u5230\u652f\u6301\uff0c\u56e0\u4e3a\u4ed6\u4eec\u662f\u6709\u4e8b\u5b9e\u6839\u636e\u7684\u3002\u5f53 Google SRE \u53d1\u73b0\u751f\u4ea7\u51fa\u73b0\u95ee\u9898\u7684\u65f6\u5019\uff0c\u6807\u51c6\u7684\u89e3\u51b3\u529e\u6cd5\u5c31\u662f\u6682\u505c\u6240\u6709\u66f4\u65b0\uff0c\u786e\u4fdd\u4e1a\u52a1\u7a33\u5b9a\u3002\u4e3e\u4e2a\u6bd4\u8f83\u6781\u7aef\u7684\u4f8b\u5b50\uff0c\u50cf\u521a\u624d\u8bf4\u7684\u5982\u679c\u53d1\u73b0\u7ebf\u4e0a\u7cfb\u7edf\u6709\u95ee\u9898\u7684\u60c5\u51b5\u4e0b\uff0cSRE \u662f\u6709\u6743\u5229\u62d2\u7edd\u63a5\u53d7\u4e1a\u52a1\u66f4\u65b0\u7684\uff0c\u53ea\u5141\u8bb8\u7814\u53d1\u90e8\u95e8\u4fee bug\uff0c\u4e0d\u5141\u8bb8\u52a0\u65b0\u529f\u80fd\u3002\u8fd9\u4e2a\u4e89\u8bae\u6211\u5728\u8fc7\u53bb\u516b\u5e74\u89c1\u8fc7\u4e3a\u6570\u4e0d\u591a\u7684\u51e0\u6b21\uff0c\u5f00\u53d1\u53ef\u4ee5\u4e00\u76f4\u95f9\u5230 VP\uff0cSVP \u8fd9\u4e2a\u7ea7\u522b\u3002\u6bcf\u4e00\u6b21\u90fd\u662f\u542c SRE \u7684\u3002","title":"2 \u4e13\u4e1a\u5316"},{"location":"chapter_2/yunweijiazhi/#3_1","text":"\u6240\u6709\u4e1c\u897f\u4e0d\u90fd\u662f\u767e\u5206\u4e4b\u767e\u7a33\u5b9a\u7684\uff0c\u7a33\u5b9a\u6027\u7684\u63d0\u9ad8\u8981\u6d88\u8017\u6210\u672c\uff0c\u8981\u589e\u52a0\u66f4\u591a\u7684\u5197\u4f59\uff0c\u66f4\u591a\u7684\u5bb9\u91cf\uff0c\u751a\u81f3\u53ea\u80fd\u82b1\u94b1\u89e3\u51b3\u3002\u8fd0\u7ef4\u90e8\u95e8\u7684\u4efb\u52a1\u5c31\u662f\u63d0\u4f9b\u8fd9\u4e9b\u6570\u636e\u548c\u65b9\u6848\u3002\u6bd4\u5982\u641e\u4e09\u4e2a 9\u3001\u56db\u4e2a 9\uff0c\u8981\u5982\u4f55\u8fbe\u5230\uff0c\u8fd9\u5728\u6295\u5165\u548c\u7cfb\u7edf\u8bbe\u8ba1\u4e0a\u6709\u5f88\u5927\u533a\u522b\u3002\u8fd9\u4e2a\u90e8\u5206\u516c\u53f8\u91cc\u6ca1\u6709\u5176\u4ed6\u4eba\u53ef\u4ee5\u63d0\u51fa\uff0c\u5fc5\u987b\u8981\u7531\u8fd0\u7ef4\u90e8\u95e8\u63d0\u51fa\u3002\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u53cd\u9988\u56de\u8def\u7684\u8bdd\uff0c\u4f60\u4f1a\u53d1\u73b0\u5927\u5bb6\u90fd\u5f88\u75db\u82e6\uff0c\u5f88\u591a\u65f6\u5019\u505a\u51fa\u7684\u51b3\u5b9a\u90fd\u662f\u8fdd\u80cc\u81ea\u7136\u89c4\u5f8b\u7684\u3002\u6211\u770b\u8fc7\u5f88\u591a\u8fd9\u6837\u7684\u6848\u4f8b\uff0c\u4e0a\u9762\u62cd\u8111\u95e8\u51b3\u5b9a\u67d0\u4e2a\u4e1a\u52a1\u8981 100%\u7a33\u5b9a\uff0c\u5b8c\u5168\u4e0d\u7ba1\u4e0b\u9762\u600e\u4e48\u641e\uff0c\u7531\u4e8e\u53cd\u9988\u56de\u8def\u4e0d\u5b58\u5728\u6216\u8005\u8fd9\u4e2a\u53cd\u9988\u56de\u8def\u7684\u4fe1\u606f\u6d41\u52a8\u4e0d\u591f\u987a\u7545\uff0c\u5bfc\u81f4\u4e86\u8fd9\u4e2a\u4e1c\u897f\u6700\u7ec8\u5b9e\u9645\u505a\u4e0d\u597d\uff0c\u8fd9\u662f SRE \u6a21\u578b\u76f8\u5f53\u5173\u952e\u7684\u4e00\u4e2a\u5730\u65b9\u3002 \u53c2\u8003 1 \u53c2\u8003 2","title":"3 \u6253\u901a\u4e0e\u4ea7\u54c1\u56e2\u961f\u7684\u53cd\u9988\u56de\u8def"},{"location":"chapter_2/yunweijiazhi/#slo","text":"","title":"\u4e94 SLO \u6700\u4f73\u5b9e\u8df5"},{"location":"chapter_2/yunweijiazhi/#_6","text":"SLA \uff08service level agreement\uff09:\u670d\u52a1\u7b49\u7ea7\u534f\u8bae \u6307\u7684\u662f\u6574\u4e2a\u534f\u8bae\uff0c\u534f\u8bae\u7684\u5185\u5bb9\u5305\u542b\u4e86 SLI\uff0cSLO \u4ee5\u53ca\u6062\u590d\u7684\u65b9\u5f0f\u548c\u65f6\u95f4\u7b49\u7b49\u4e00\u7cfb\u5217\u6240\u6784\u6210\u7684\u534f\u8bae SLI\uff08service level indicator\uff09:\u670d\u52a1\u7b49\u7ea7\u5bf9\u8c61 \u6307\u7684\u662f\u5bf9\u8c61\uff0c\u4f8b\u5982\uff1aqps\uff0c\u54cd\u5e94\u65f6\u95f4\uff0c\u51c6\u786e\u6027\u7b49 SLO\uff08service level objective\uff09:\u670d\u52a1\u7b49\u7ea7\u76ee\u6807 \u6307\u7684\u662f\u76ee\u6807\uff0c\u4f8b\u5982\uff1aqps 99.99% \uff0c\u54cd\u5e94\u65f6\u95f4 10ms \u7b49 \u4ec0\u4e48\u662f\u670d\u52a1\uff1f\u5c31\u662f\u63d0\u4f9b\u7ed9\u5ba2\u6237\u7684\u6240\u6709\u529f\u80fd\u7684\u96c6\u5408\u3002\u6e38\u620f\u4e1a\u52a1\u6765\u770b\uff0c\u6211\u4eec SRE \u7ed9\u73a9\u5bb6\u3001\u4ea7\u54c1\u65b9\u63d0\u4f9b\u7684\u6240\u6709\u670d\u52a1\u3001\u529f\u80fd\u7b49\uff0c\u90fd\u5c5e\u4e8e\u670d\u52a1\u8303\u7574\u3002 \u90a3\u4e48\u6211\u4eec\u63d0\u4f9b\u7684\u670d\u52a1\u8d28\u91cf\u5982\u4f55\uff1f\u600e\u4e48\u8861\u91cf\u548c\u8bc4\u4ef7\u8fd9\u4e9b\u670d\u52a1\u7684\u8d28\u91cf\uff1f\u662f\u5426\u8fbe\u5230\u4e86\u5927\u5bb6\u4e00\u81f4\u7684\u671f\u671b\uff1f\u8fd9\u4e9b\u6b63\u662f SLO \u6240\u63cf\u8ff0\u5e76\u8981\u89e3\u51b3\u7684\u95ee\u9898\u3002 \u672c\u6587\u5c06\u4ee5\u67d0\u4e2a\u6e38\u620f\u9879\u76ee\u4e3a\u4f8b\u5b50\uff0c\u9610\u8ff0\u5728\u6e38\u620f\u4e1a\u52a1\u65b9\u9762\u5b9e\u8df5 SLO \u7684\u4e00\u4e9b\u7ecf\u9a8c\uff0c\u5e0c\u671b\u80fd\u629b\u7816\u5f15\u7389\u3001\u6709\u66f4\u591a\u7684\u5b9e\u8df5\u6848\u4f8b\u540e\u7eed\u80fd\u5206\u4eab\u51fa\u6765\uff0c\u5f15\u8d77\u66f4\u591a\u7684\u601d\u8003\u548c\u8ba8\u8bba\u3002","title":"(\u4e00) \u524d\u8a00"},{"location":"chapter_2/yunweijiazhi/#slo_1","text":"\u6211\u4eec SRE \u5e38\u4f1a\u9047\u5230\u8fd9\u4e9b\u60c5\u51b5\uff1a \u67d0\u5929\uff0c\u8fd0\u8425\u540c\u5b66\u544a\u77e5\uff0cxx \u670d\u52a1\u5668\u6709\u7528\u6237\u53cd\u9988\u6389\u7ebf\u3001\u6216\u8005\u5361\u673a\u3002\u8fd9\u65f6\u5019 SRE \u7ecf\u8fc7\u4e00\u8f6e\u5bf9\u670d\u52a1\u5668\u7684\u57fa\u672c\u68c0\u67e5\uff0cCPU\u3001\u5185\u5b58\u3001\u7f51\u7edc\u3001\u65e5\u5fd7\u7b49\u90fd\u6ca1\u4ec0\u4e48\u5f02\u5e38\uff0c\u7136\u540e\u5c31\u6ca1\u6709\u7136\u540e\u4e86\u3002 \u67d0\u5929\uff0cQA \u53cd\u9988\u4eca\u5e74\u4e0a\u534a\u5e74 xx \u4ea7\u54c1\u7684\u7a33\u5b9a\u6027\u5f88\u5dee\uff0cSRE \u89c9\u5f97\u5e76\u6ca1\u6709\uff0c\u56e0\u4e3a\u6545\u969c\u6b21\u6570\u6bd4\u53bb\u5e74\u8fd8\u4f4e\u3002QA \u540c\u5b66\u5374\u8bf4\u4ea7\u54c1\u5f88\u4e0d\u6ee1\u610f\u67d0\u4e00\u6b21\u6545\u969c\u6062\u590d\u7528\u4e86 2 \u4e2a\u5c0f\u65f6\u2026\u2026 \u4ee5\u4e0a\u7684\u4f8b\u5b50\uff0c\u5176\u5b9e\u66b4\u9732\u4e86\u4e00\u4e9b\u95ee\u9898\u70b9\uff1a \u6211\u4eec\u5e38\u89c4\u7684\u7cfb\u7edf\u6307\u6807\u90fd\u80fd\u53cd\u9988\u73a9\u5bb6\u7528\u6237\u53d1\u8069\u7684\u6389\u7ebf\u3001\u5361\u673a\u95ee\u9898\u5417\uff1f SRE \u548c\u4ea7\u54c1\u5bf9\u5982\u4f55\u8bc4\u4ef7\u6e38\u620f\u8d28\u91cf\u7684\u6807\u51c6\uff0c\u6709\u5171\u8bc6\u5417\uff1f \u4e3a\u4e86\u8ba9\u4ea7\u54c1\u548c\u670d\u52a1\u7684\u7528\u6237\u4f53\u9a8c\u548c\u53ef\u9760\u6027\u6709\u5ba2\u89c2\u7684\u5ea6\u91cf\uff0c\u4e3a\u8fd0\u7ef4\u51b3\u7b56\u63d0\u4f9b\u6570\u636e\u7684\u652f\u6491\uff0c\u4e3a\u4ea7\u54c1\u4e0d\u540c\u89d2\u8272\u6c9f\u901a\u63d0\u4f9b\u7126\u70b9\uff0c\u6211\u4eec\u9700\u8981\u548c\u4ea7\u54c1\u4e0d\u540c\u7684\u89d2\u8272\u4e00\u8d77\uff0c\u5236\u5b9a\u51fa\u5927\u5bb6\u90fd\u8ba4\u53ef\u7684 SLO\uff0c\u5e76\u4ee5\u6b64\u4f5c\u4e3a\u4fc3\u8fdb\u6211\u4eec\u89c2\u5bdf\u3001\u8861\u91cf\u3001\u6539\u8fdb\u4e1a\u52a1\u7684\u53c2\u8003\u548c\u76ee\u6807\u3002 \u300aSRE WORKBOOK\u300b\u91cc\u63d0\u5230\uff0c \u201cSRE \u7684\u6838\u5fc3\u804c\u8d23\uff0c\u4e0d\u4ec5\u4ec5\u662f\u5c06\u6240\u6709\u4e8b\u60c5\u81ea\u52a8\u5316\u800c\u968f\u65f6\u5f85\u547d\u5904\u7406\u6545\u969c\uff0cSRE \u7684\u65e5\u5e38\u5de5\u4f5c\u90fd\u5c06\u6309\u7167 SLO \u6765\u5f00\u5c55\uff0c\u786e\u4fdd SLO \u5728\u77ed\u671f\u5185\u662f\u5408\u7406\u7684\uff0c\u5e76\u53ef\u4ee5\u6839\u636e SLI \u53d8\u5316\u7684\u60c5\u51b5\u9002\u65f6\u5bf9 SLO \u505a\u51fa\u8c03\u6574\u201d\u3002 \u53e6\u5916\u4e5f\u63d0\u5230\uff0c \u201c\u8c37\u6b4c\u8ba4\u4e3a\u4e00\u4e2a\u6df1\u601d\u719f\u8651\u7684 SLO \u662f\u505a\u51fa\u51b3\u7b56\u7684\u5173\u952e\uff0c\u8fd9\u4e9b\u51b3\u7b56\u5305\u62ec\u4e86\u53ef\u9760\u6027\u76f8\u5173\u5de5\u4f5c\uff0c\u548c\u786e\u5b9a\u5de5\u4f5c\u4f18\u5148\u7ea7\u6392\u5e8f\u7b49\u5185\u5bb9\u3002SLO \u66f4\u50cf\u4e00\u79cd\u5de5\u5177\uff0c\u53ef\u4ee5\u5e2e\u52a9 SRE \u786e\u5b9a\u54ea\u4e2a\u5de5\u4f5c\u4f18\u5148\u7ea7\u66f4\u9ad8\u201d\u3002 \u8fd9\u6837 SRE \u7684\u5de5\u4f5c\uff0c\u5728\u65f6\u95f4\u3001\u7cbe\u529b\u6709\u9650\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5c3d\u91cf\u805a\u7126\u5230 SLO \u53cd\u9988\u7684\u8d28\u91cf\u6216\u6307\u6807\u4e0a\u9762\u6765\u3002","title":"\uff08\u4e8c\uff09\u4e3a\u4ec0\u4e48\u9700\u8981 SLO"},{"location":"chapter_2/yunweijiazhi/#slo_2","text":"\u90a3\u4e48 SLO \u7684\u7279\u70b9\u662f\u5565\uff1f\u4e00\u4e2a\u597d\u7684 SLO \u6709\u4ec0\u4e48\u7279\u70b9\uff1f \u9996\u5148\uff0c SLO \u662f\u4e00\u4e2a\u53ef\u4ee5\u5ea6\u91cf\u3001\u5ba2\u89c2\u5b58\u5728\u7684\u3001\u53ef\u4ee5\u660e\u786e\u7684\u6307\u6807\u3002 SLO \u662f\u7531\u5ba2\u89c2\u7684\u6570\u636e\u7edf\u8ba1\u5f97\u6765\uff0c\u662f\u5927\u5bb6\u8ba4\u540c\u7684\u3001\u6ca1\u6709\u63ba\u6742\u4e3b\u89c2\u7684\u770b\u6cd5\u3002\u5b83\u7684\u6570\u636e\u6765\u6e90\u3001\u6536\u96c6\u65b9\u6cd5\u3001\u8ba1\u7b97\u7edf\u8ba1\u65b9\u6cd5\uff0c\u4e5f\u662f\u5fc5\u987b\u660e\u786e\u7684\u3002\u6700\u540e SLO \u4e0d\u662f\u4ec5\u4ec5\u4e00\u6b21\u8bbe\u5b9a\u5c31\u6c38\u4e0d\u53d8\u7684\uff0c\u5b83\u662f\u6301\u7eed\u8fed\u4ee3\u7684\uff0c\u4f1a\u968f\u7740\u4e1a\u52a1\u7684\u7279\u70b9\u3001\u8ba1\u7b97\u65b9\u6cd5\u7684\u6539\u53d8\u7b49\u7684\u6539\u53d8\u800c\u6301\u7eed\u6539\u53d8\u3002 \u90a3\u4ec0\u4e48\u6837\u7684 SLO \u624d\u7b97\u662f\u597d\u7684 SLO\uff1f \u6709\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u7279\u70b9\u5c31\u662f\uff1a\u540c\u7406\u5fc3\u3002 \u597d\u7684 SLO \u9700\u8981\u6709\u540c\u7406\u5fc3\uff0c\u80fd\u8d34\u5207\u53cd\u6620\u7528\u6237\u4f7f\u7528\u670d\u52a1\u7684\u5b9e\u9645\u611f\u53d7\u3002\u6211\u4eec\u5c1d\u8bd5\u4ee5\u7528\u6237\u7684\u89d2\u5ea6\u6765\u89c2\u5bdf\u4e00\u4e2a\u670d\u52a1\uff0c\u4ece\u4f7f\u7528\u670d\u52a1\u5f00\u59cb\u7684\u6bcf\u4e00\u4e2a\u6b65\u9aa4\u3001\u7ec6\u8282\u91cc\uff0c\u627e\u51fa\u6211\u4eec\u6700\u5173\u6ce8\u7684\u4e1c\u897f\uff0c\u8fd9\u6837\u4e1c\u897f\u5c31\u6709\u53ef\u80fd\u88ab\u63d0\u70bc\u6210 SLO\u3002\u8bf4\u5230\u5e95\uff0cSLO \u7684\u8bbe\u8ba1\u9700\u8981\u56f4\u7ed5\u7528\u6237\u4f53\u9a8c\u6765\u8bbe\u8ba1\uff0c\u670d\u52a1\u4e8e\u4ea7\u54c1\u3002 \u4f8b\u5982\uff0c\u6c42\u804c\u7f51\u7ad9\uff0c\u7528\u6237\u5173\u6ce8\u7684\u70b9\u5e94\u8be5\u662f\uff1a \u5feb\u901f\u7684\u9875\u9762\u52a0\u8f7d \u80fd\u591f\u83b7\u53d6\u6240\u6709\u7684\u804c\u4f4d \u804c\u4f4d\u4e1a\u52a1\u4fe1\u606f\u52a0\u8f7d\u8db3\u591f\u5feb \u770b\u5230\u5c3d\u53ef\u80fd\u591a\u7684\u804c\u4f4d\uff0c\u5373\u4f7f\u4e0d\u4e00\u5b9a\u76f8\u5173 \u800c\u4ed6\u4eec\u4e0d\u600e\u4e48\u5173\u6ce8\u7684\u70b9\u662f\uff1a \u6240\u6709\u7684\u7f51\u7ad9\u529f\u80fd\u90fd\u53ef\u7528 \u5185\u5bb9\u975e\u5e38\u51c6\u786e \u907f\u514d\u663e\u793a\u4e0d\u76f8\u5173\u7684\u804c\u4f4d \u7528\u6e38\u620f\u4e1a\u52a1\u4f5c\u4e3a\u4f8b\u5b50\uff0c\u4f8b\u5982\u4e00\u6b3e\u56de\u5408\u5236\u7684 MMORPG \u7684\u6e38\u620f\uff0c\u73a9\u5bb6\u5173\u6ce8\u7684\u70b9\u7406\u5e94\u662f\uff1a \u53ef\u7528\u6027\u3002\u5373\u4f7f\u662f\u51cc\u6668\uff0c\u5982\u679c\u6e38\u620f\u4e0d\u53ef\u73a9\uff0c\u4e5f\u4f1a\u5f71\u54cd\u73a9\u5bb6\u7684\u6446\u644a\u6536\u76ca \u90a3\u4ed6\u4eec\u4e0d\u600e\u4e48\u5173\u6ce8\u7684\u70b9\u662f\uff1a \u7f51\u7edc\u5ef6\u8fdf\u3002\u5927\u591a\u573a\u666f\u4e0b\uff0c\u73a9\u5bb6\u5bf9\u5b9e\u65f6\u6027\u7684\u8981\u6c42\u5e76\u4e0d\u591a\u3002 \u540c\u6837\uff0c\u6362\u6210\u4e00\u6b3e\u5373\u65f6\u7ade\u6280\u7c7b\u7684\u6e38\u620f\uff0c\u5f71\u54cd\u73a9\u5bb6\u4f53\u9a8c\u7684\u70b9\u4f1a\u548c MMORPG \u6709\u5f88\u5927\u5dee\u522b\uff0c\u4ed6\u4eec\u66f4\u5173\u6ce8\uff1a \u5ef6\u8fdf\u6216\u6d41\u7545\u5ea6\u3002\u5ef6\u8fdf\u76f4\u63a5\u5f71\u54cd\u5230\u6574\u4e2a\u6e38\u620f\u6838\u5fc3\u7684\u4f53\u9a8c\u3002\u5f00\u6253\u4e4b\u540e\u5982\u679c\u5b58\u5728\u5361\u987f\uff0c\u4f1a\u7ed9\u73a9\u5bb6\u9020\u6210\u975e\u5e38\u5927\u7684\u8d1f\u9762\u611f\u53d7\u3002 \u53cd\u800c\u4e0d\u600e\u4e48\u5173\u6ce8\uff1a \u53ef\u7528\u6027\u3002 \u53ef\u89c1\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684 SLO \u90fd\u6709\u666e\u904d\u9002\u7528\u6027\u3002\u4e00\u4e2a\u597d\u7684 SLO \u5fc5\u987b\u4f9d\u9644\u4e00\u4e2a\u80fd\u53cd\u9988\u7528\u6237\u4f53\u9a8c\u7684\u573a\u666f\uff0c\u5e76\u80fd\u91cf\u5316\u6210\u4e00\u4e9b\u6570\u636e\u6307\u6807\uff0c\u6765\u5ba2\u89c2\u53cd\u9988\u51fa\u7528\u6237\u7684\u4e3b\u89c2\u4f53\u9a8c\u3002","title":"(\u4e09) SLO \u7684\u7279\u70b9"},{"location":"chapter_2/yunweijiazhi/#slo_3","text":"\u4ece 0 \u5230 1 \u5236\u5b9a SLO \u5927\u81f4\u7684\u6d41\u7a0b\u662f\uff1a \u5176\u4e2d\u201c\u8bbe\u7f6e SLO\u201d\u8fd9\u4e00\u6b65\uff0c\u5e76\u4e0d\u662f\u4e00\u8e74\u800c\u5c31\u3002\u5176\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u6b65\u9aa4\u662f\u6536\u96c6 SLI\u3002SLO \u7684\u5236\u5b9a\u79bb\u4e0d\u5f00 SLI\u3002 SLI \u670d\u52a1\u7b49\u7ea7\u6307\u6807\uff0c\u5373\u4e00\u4e9b\u9488\u5bf9\u670d\u52a1\u7684\u76d1\u63a7\u9879\uff0c\u4f8b\u5982\u201ckcp \u9000\u5316\u7387\u201d\u3001\u201c\u8bbf\u95ee\u5ef6\u8fdf\u5e73\u5747\u503c\u201d\u3001\u201c\u767b\u5f55\u6e38\u620f\u6210\u529f\u7387\u201d\u7b49\u3002SLI \u53ef\u4ee5\u6839\u636e\u4e1a\u52a1\u7684\u7279\u70b9\uff0c\u4ece\u53ef\u7528\u6027\u3001\u5ef6\u8fdf\u3001\u6570\u91cf\u3001\u8d28\u91cf\u3001\u7ed3\u679c\u6b63\u786e\u6027\u7b49\u7b49\u591a\u65b9\u9762\u8986\u76d6\u3002SLI \u662f\u5177\u4f53\u660e\u786e\u7684\u5e76\u53ef\u4ee5\u6d4b\u91cf\u7684\uff0c\u4e0d\u540c\u7684\u7cfb\u7edf\u6709\u4e0d\u4e00\u6837\u7684\u6d4b\u91cf\u5bf9\u8c61\u548c\u65b9\u6cd5\u3002 \u6211\u4eec\u901a\u8fc7\u5c06 SLI \u6216\u8005\u51e0\u4e2a SLI \u7684\u7ec4\u5408\u8fdb\u884c\u4e00\u6bb5\u65f6\u95f4\u7684\u6570\u636e\u6536\u96c6\u548c\u89c2\u5bdf\uff0c\u5c31\u53ef\u4ee5\u5230\u4e00\u4e2a\u8d77\u59cb\u7684 SLO\uff0c\u4f8b\u5982\uff1a90%\u7684\u5339\u914d\u65f6\u957f<120s\u3002","title":"(\u56db) \u5982\u4f55\u5236\u5b9a SLO"},{"location":"chapter_2/yunweijiazhi/#fps-slo","text":"\u901a\u5e38\u4e00\u6b3e\u5927\u4e16\u754c\u67b6\u6784\u3001\u5b9e\u65f6\u5c04\u51fb\u7ade\u6280\u7c7b\u6e38\u620f\uff0c\u4f1a\u5206\u522b\u6709\u7f8e\u670d\u3001\u4e9a\u670d\u3001\u6b27\u670d\u7b49\u51e0\u4e2a\u5927\u533a\uff0c\u73a9\u5bb6\u6839\u636e\u81ea\u5df1\u7684\u5b9e\u9645\u767b\u5f55\u5230\u4e0d\u540c\u7684\u533a\u57df\uff0c\u5339\u914d\u5176\u4ed6\u73a9\u5bb6\u540e\u8fdb\u884c\u6e38\u620f\u3002","title":"(\u4e94) FPS \u6e38\u620f\u7684 SLO \u5b9e\u8df5"},{"location":"chapter_2/yunweijiazhi/#1-sli","text":"\u9996\u5148\u660e\u786e\u7684\u662f\uff0c\u6e38\u620f\u76f8\u5173\u7684\u6307\u6807\u5b9e\u5728\u592a\u591a\uff0c\u6211\u4eec\u9700\u8981\u805a\u7126\u3002 \u5229\u7528\u540c\u7406\u5fc3\uff0c\u4ece\u7528\u6237\u89d2\u5ea6\u51fa\u53d1 \uff0c\u6211\u4eec\u9009\u4e86\u4e24\u4e2a\u51fa\u53d1\u70b9\uff1a\u767b\u5f55\u548c\u6218\u6597\u3002 \u6211\u4eec\u5c1d\u8bd5\u4ece\u73a9\u5bb6\u884c\u4e3a\u6765\u53d1\u6398\uff1a \u4e0b\u8f7d\u6e38\u620f\u5ba2\u6237\u7aef \u6253\u5f00\u6e38\u620f\uff0c\u66f4\u65b0 patch \u767b\u5f55\u8d26\u53f7\uff0c\u9009\u62e9\u5927\u533a \u8fdb\u5165\u5927\u5385\uff0c\u7b49\u5f85\u5339\u914d \u8fdb\u5165\u6218\u6597 \u6218\u6597\u7ed3\u675f\uff0c\u56de\u5230\u5927\u5385\uff0c\u7ee7\u7eed\u7b49\u5f85\u5339\u914d\u4e0b\u4e00\u573a\u6218\u6597 \u8fd9\u4e9b\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u5dee\u8bc4\u7684\u4f1a\u6709\u54ea\u4e9b\u573a\u666f\u5462\uff1f\u6211\u4eec\u6309\u7167\u767b\u5f55\u548c\u6218\u6597\u8fd9\u4e24\u5927\u573a\u666f\u603b\u7ed3\u4e86\u4e00\u4e9b\u5982\u4e0b\uff1a \u767b\u5f55 \u4e0b\u8f7d patch \u5931\u8d25\u3001\u8fc7\u6162 \u767b\u5f55\u8d26\u53f7\u5931\u8d25 \u8fde\u63a5\u670d\u52a1\u5668\u5931\u8d25 \u6218\u6597 \u5339\u914d\u65f6\u957f\u8fc7\u957f \u6218\u6597\u5ef6\u8fdf\u5f88\u9ad8 \u5361\u987f \u7f51\u7edc\u4e22\u5305\u6216\u5ef6\u65f6\u9ad8 \u670d\u52a1\u5668\u5904\u7406\u6162 \u7ecf\u5e38\u65ad\u7ebf\u91cd\u8fde \u4ee5\u4e0a\u8bf4\u7684\u8fd9\u4e9b\uff0c\u90fd\u4f1a\u7ed9\u73a9\u5bb6\u9020\u6210\u7cdf\u7cd5\u7684\u4f53\u9a8c\u3002\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u548c\u4ea7\u54c1\u7814\u53d1\u4e00\u8d77\u5bf9\u8fd9\u4e9b\u573a\u666f\u63d0\u70bc\u51fa\u4e00\u4e9b\u53ef\u89c2\u5bdf\u7684\u3001\u53ef\u91cf\u5316\u7684\u6307\u6807\u51fa\u6765\u3002 \u5728\u6574\u7406 SLI \u7684\u65f6\u5019\uff0c\u6709\u4e00\u4e2a\u5bb9\u6613\u5ffd\u7565\u7684\u70b9\uff0c\u5c31\u662f\u6536\u96c6\u6570\u636e\u7684\u8303\u56f4\u662f\u5426\u6709\u7f3a\u6f0f\u3002\u4f8b\u5982\u8981\u6536\u96c6\u6570\u636e\u8ba1\u7b97\u73a9\u5bb6\u7684\u767b\u5f55\u6210\u529f\u7387\uff0c\u5982\u679c\u53ea\u662f\u4ece\u670d\u52a1\u7aef\u7684\u65e5\u5fd7\u6570\u636e\u6536\u96c6\uff0c\u8fd9\u4e2a\u6210\u529f\u7387\u5c31\u4f1a\u5b58\u5728\u504f\u9ad8\u7684\u53ef\u80fd\uff0c\u56e0\u4e3a\u73a9\u5bb6\u53ef\u80fd\u56e0\u4e3a\u7f51\u7edc\u3001\u4e3b\u52a8\u5173\u95ed\u7b49\u60c5\u51b5\uff0c\u8fd8\u6ca1\u767b\u5f55\u5230\u670d\u52a1\u5668\u5c31\u5df2\u7ecf\u6d41\u5931\u6389\u4e86\u3002\u6240\u4ee5\u6570\u636e\u7684\u6536\u96c6\u7684\u8303\u56f4\u5c3d\u91cf\u8003\u8651\u5168\u9762\u3002 \u4e8e\u662f\uff0c\u6211\u4eec\u548c\u4ea7\u54c1\u7814\u53d1\u4e00\u8d77\u603b\u7ed3\u4e86\u4ee5\u4e0b SLI\uff1a 90%\u73a9\u5bb6\u7684\u5339\u914d\u65f6\u957f 90%\u73a9\u5bb6\u7684\u7f51\u7edc\u5ef6\u65f6 \u8fdb\u5165\u6218\u6597\u6210\u529f\u7387 \u6218\u6597\u91cd\u8fde\u7387\uff08\u6218\u6597\u4e2d\u65ad\u7ebf\u91cd\u8fde\u7684\u6bd4\u4f8b\uff09 \u91cd\u65b0\u767b\u5f55\u7387\uff08\u91cd\u65b0\u767b\u5f55\u6e38\u620f\u7684\u6bd4\u4f8b\uff09 \u767b\u5f55\u8f6c\u6362\u7387\uff08\u4ece\u73a9\u5bb6\u6253\u5f00\u6e38\u620f\u5ba2\u6237\u7aef\u5f00\u59cb\u5230\u6700\u540e\u8fdb\u5165\u6e38\u620f\u7684\u6bd4\u4f8b\uff09 \u7136\u540e\u548c\u4ea7\u54c1\u7814\u53d1\u660e\u786e\u4e86\u6570\u636e\u6536\u96c6\u7684\u8303\u56f4\u3001\u8ba1\u7b97\u65b9\u5f0f\uff1a \u65e5\u5fd7\u6536\u96c6\u65b9\u5f0f\uff1a \u670d\u52a1\u5668\u65e5\u5fd7\uff0c\u901a\u8fc7 \u65e5\u5fd7\u4e2d\u5fc3 \u6536\u96c6\uff0c\u5e76\u5206\u6d41\u5230 ELK\u96c6\u7fa4 \u8fdb\u884c\u6570\u636e\u5206\u6790\u548c\u7edf\u8ba1 \u7528\u6237\u7aef\u4f53\u9a8c\u7cfb\u7edf\uff0c\u76f4\u63a5\u5229\u7528\u8be5\u7cfb\u7edf\u63d0\u4f9b\u7684\u7edf\u8ba1\u529f\u80fd\u3002\u8fd9\u91cc\u4e3b\u8981\u662f\u7528\u6765\u6536\u96c6\u767b\u5f55\u8f6c\u6362\u7387\u8fd9\u4e2a\u6307\u6807 \u8ba1\u7b97\u65b9\u6cd5\uff1a\u6bcf\u4e2a\u6307\u6807\u7684\u8ba1\u7b97\u65b9\u6cd5\u90fd\u4e0d\u4e00\u6837\uff0c\u8fd9\u91cc\u4e0d\u4e00\u4e00\u8be6\u8ff0\u4e86\uff0c\u8ba1\u7b97\u65b9\u6cd5\u4e00\u822c\u4f7f\u7528 xx \u6bd4\u4f8b\u3001\u6216\u8005\u7edf\u8ba1 90 \u5206\u4f4d\u7684\u6570\u636e","title":"1 \u5982\u4f55\u9009\u62e9 SLI"},{"location":"chapter_2/yunweijiazhi/#2-sli","text":"1 \u5229\u7528\u540c\u7406\u5fc3\uff0c\u4ece\u7528\u6237\u89d2\u5ea6\u51fa\u53d1 2 \u4ece\u7528\u6237\u6700\u5173\u5fc3\u7684\u65b9\u9762\u51fa\u53d1, \u800c\u4e0d\u662f\u73b0\u5728\u76d1\u63a7\u7cfb\u7edf\u6709\u4ec0\u4e48. 3 \u6ce8\u610f\u6570\u636e\u8303\u56f4\u662f\u5426\u6709\u7f3a\u6f0f.","title":"2 \u6574\u7406 SLI \u6700\u4f73\u5b9e\u8df5"},{"location":"chapter_2/yunweijiazhi/#3-slo","text":"\u6700\u540e\uff0c\u6211\u4eec\u7f16\u5199\u76d1\u63a7\u63d2\u4ef6\uff0c\u4ece ELK \u91cc\u9762\u91c7\u96c6\u6570\u636e\u5e76\u8ba1\u7b97\u7ed3\u679c\uff0c\u89c2\u5bdf\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u5f97\u51fa\u4e86\u521d\u59cb\u7684 SLO\uff1a \u6307\u6807 SLO \u8fdb\u5165\u6218\u6597\u6210\u529f\u7387 \u5f00\u59cb\u6218\u6597\u65f6\uff0c\u4e0d\u4f4e\u4e8e XXX %\u73a9\u5bb6\u6210\u529f\u8fdb\u5165\u6218\u6597 \u5339\u914d\u65f6\u957f XXX %\u73a9\u5bb6\u5339\u914d\u65f6\u957f\u4e0d\u957f\u4e8e XXX s \u6218\u6597\u670d\u91cd\u8fde\u7387 \u6218\u6597\u4e2d\u4e0d\u8d85\u8fc7 XXX %\u73a9\u5bb6\u9700\u8981\u91cd\u8fde\u6218\u6597 \u5ef6\u65f6 XXX %\u7684\u73a9\u5bb6\u5ef6\u65f6\u4e0d\u8d85\u8fc7 XXX ms \u540c\u65f6\u5728\u76d1\u63a7\u7cfb\u7edf\u4e0a\u521b\u5efa\u4e86\u4e00\u4e2a dashboard\uff0c\u5e76\u6309\u7167\u4ee5\u4e0a\u7684\u9608\u503c\u8bbe\u7f6e\u7684\u62a5\u8b66\u3002","title":"3 SLO \u7684\u5236\u5b9a"},{"location":"chapter_2/yunweijiazhi/#4-slo","text":"SLO \u4ece\u5236\u5b9a\u5f00\u59cb\uff0c\u4e0d\u662f\u4e00\u6210\u4e0d\u53d8\u7684\uff0c\u9700\u8981\u7ed3\u5408\u5b9e\u9645\u60c5\u51b5\u6765\u4e0d\u65ad\u8fed\u4ee3\u3002\u6211\u4eec\u9700\u8981\u6536\u96c6\u5404\u65b9\u9762\u7684\u4fe1\u606f\u6765\u8f85\u52a9\u6211\u4eec\u8bc4\u4f30 SLO \u7684\u5236\u5b9a\uff1a \u8206\u60c5\u76d1\u63a7\uff1a\u8bba\u575b\u3001\u8d34\u5427\u3001\u5ba2\u670d\u53cd\u9988\u7b49 \u4ea7\u54c1\u7814\u53d1\u7684\u5176\u4ed6\u8f85\u52a9\u6570\u636e\u6216\u65e5\u5fd7 \u6bcf\u6b21\u62a5\u8b66\u8c03\u67e5 \u6211\u4eec\u9700\u8981\u5bf9 SLO \u8fdb\u884c\u5468\u671f\u6027\u7684 review\uff0c\u63d0\u9ad8\u6307\u6807\u7684\u5ea6\u91cf\u7cbe\u5ea6\u3001\u63d0\u9ad8\u8986\u76d6\u8303\u56f4\u3001\u8c03\u589e\u9608\u503c\u3001\u6216\u8005\u6316\u6398\u66f4\u591a\u53cd\u9988\u4e1a\u52a1\u8d28\u91cf\u7684\u5176\u4ed6 SLO \u7b49\u7b49\u3002\u901a\u8fc7\u6301\u7eed\u5730\u8fed\u4ee3\uff0c\u4f7f\u5f97 SLO \u66f4\u52a0\u80fd\u5168\u9762\u5730\u3001\u51c6\u786e\u5730\u3001\u6709\u9488\u5bf9\u6027\u5730\u53cd\u9988\u51fa\u76ee\u524d\u6574\u4f53\u4e1a\u52a1\u7684\u8d28\u91cf\uff0c\u4e3a\u4ea7\u54c1\u3001\u7814\u53d1\u3001\u8fd0\u7ef4\u63d0\u4f9b\u4e00\u4e2a\u9ad8\u5ea6\u4e00\u81f4\u7684\u76ee\u6807\u3002 \u8be5\u6e38\u620f\u9879\u76ee\u7684 SLO \u4e5f\u7ecf\u5386\u4e86\u591a\u6b21\u4fee\u8ba2\uff0c\u4e00\u822c\u4fee\u8ba2\u7684\u539f\u56e0\u662f\uff0c\u968f\u7740\u4ea7\u54c1\u8fd0\u8425\u7684\u60c5\u51b5\u53d8\u5316\uff0c\u4e00\u4e9b SLI \u4f1a\u968f\u4e4b\u53d8\u5316\uff0c\u901a\u8fc7\u62a5\u8b66\u63d0\u9192\uff0c\u6211\u4eec\u53ca\u65f6\u8fdb\u884c\u4e86\u4fee\u8ba2\uff0c\u914d\u5408\u4ea7\u54c1\u5f53\u65f6\u7684\u8fd0\u8425\u60c5\u51b5\u3002\u6700\u540e\u5728\u5b9e\u8df5\u8fc7\u7a0b\u4e2d\uff0cSLO \u7684\u786e\u8d77\u5230\u4e86\u76d1\u63a7\u8d28\u91cf\u7684\u4f5c\u7528\uff0c\u62a5\u8b66\u8ba9\u6211\u4eec\u53ca\u65f6\u53d1\u73b0\u4e86\u4e00\u4e9b\u6f5c\u5728\u7684\u95ee\u9898\uff0c\u5982\u67d0\u4e2a\u533a\u6269\u5bb9\u51fa\u73b0\u95ee\u9898\u3001\u533a\u57df\u6027\u7684\u7f51\u7edc\u8d28\u91cf\u95ee\u9898\u3001\u7a0b\u5e8f\u5185\u90e8\u7684\u903b\u8f91\u5bfc\u81f4\u4e00\u4e9b bug \u7b49\uff0c\u4e5f\u5f97\u5230\u4e86\u4ea7\u54c1\u7814\u53d1\u7684\u8ba4\u540c\u548c\u80af\u5b9a\u3002","title":"4 SLO \u8fed\u4ee3\u4e0e\u603b\u7ed3"},{"location":"chapter_2/yunweipingtailinian/","text":"\u4e00\u4e2a\u5408\u683c\u7684\u8fd0\u7ef4\u5e73\u53f0 \u4e00 \u81f3\u5c11\u8981\u89e3\u51b3\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898 \u8fd0\u7ef4\u65e5\u5e38\u7e41\u7410\u7684\u91cd\u590d\u5de5\u4f5c \u8f6f\u786c\u4ef6\u57fa\u7840\u67b6\u6784\u8d44\u6e90\u4fe1\u606f\u6df7\u6c8c \u7814\u8fd0\u804c\u80fd\u8fb9\u754c\u6df7\u4e71\uff0c\u804c\u8d23\u5bf9\u7acb\uff0c\u6548\u80fd\u4f4e\u5f31 \u7b2c\u4e00\u8981\u52a1\u662f\u89e3\u51b3\u5f53\u4e0b\u75db\u70b9\uff0c\u5f80\u5f80\u662f\u8fd0\u7ef4\u53cc\u624b\u6025\u9700\u91ca\u653e\uff0c\u521a\u6027\u9700\u6c42\u884d\u751f\u8fd0\u7ef4\u5e73\u53f0\u3002\u7f13\u548c\u8fd0\u7ef4\u5f00\u53d1\u4e4b\u95f4\u4f9b\u6c42\u5173\u7cfb\uff0c\u5efa\u7acb\u6e05\u6670\u804c\u8d23\u8fb9\u754c\uff0c\u670d\u52a1\u597d\u7814\u53d1\u7b2c\u4e00\u751f\u4ea7\u529b\uff0c\u65e2\u800c\u518d\u6539\u53d8\u8fd0\u5f00\u5173\u7cfb\u4f9b\u6c42\u94fe\uff0c\u4ece\u5bf9\u6297\u5230\u8d4b\u80fd\u3002\u5728\u6210\u672c\u3001\u5b89\u5168\u3001\u8d28\u91cf\u3001\u6548\u7387\u4e4b\u95f4\u5bfb\u627e\u5e73\u8861 \u4e8c \u81f3\u5c11\u5177\u5907\u5982\u4e0b\u51e0\u4e2a\u7279\u6027 \u6301\u7eed\u96c6\u6210 \u6301\u7eed\u4ea4\u4ed8 \u6301\u7eed\u90e8\u7f72 \u8fd0\u7ef4\u5e73\u53f0\uff0c\u8981\u9700\u6c42\u5224\u7814\u51c6\u786e\u3001\u6210\u679c\u4ea4\u4ed8\u8fc5\u901f\u3001\u4ea7\u54c1\u6301\u7eed\u8fed\u4ee3\u3001\u4ea4\u4ed8\u8d28\u91cf\u53ef\u9760\u3002\u5176\u6b21\u662f\u4ea7\u54c1\u5b9a\u4f4d\u8981\u51c6\u786e\uff0c\u6bcf\u4e2a\u4ea7\u54c1\u8bbe\u8ba1\u4eba\u90fd\u8981\u6709\u8eac\u8eab\u5165\u5c40\u7684\u80fd\u624b\uff0c\u4e00\u7ebf\u7ecf\u5386\u4e30\u5bcc\u4e14\u6df1\u523b\u3002 \u4e09 \u6700\u5c11\u8981\u5177\u5907\u5982\u4e0b\u51e0\u9879\u529f\u80fd\uff1a CMDB \u670d\u52a1\u6811 \u6d41\u7a0b\u7ba1\u63a7(\u6bd4\u5982workflow) CICD \u6392\u73ed CMDB,\u670d\u52a1\u6811\u4e3a\u4f20\u7edf\u8fd0\u7ef4\u5e73\u53f0\u5fc5\u5907\u529f\u80fd\uff0c\u968f\u7740\u516c\u6709\u4e91\u5f3a\u52bf\u4e0b\u6c89\uff0cKubernetes\uff0cservermesh\u9010\u6b65\u666e\u53ca\u8fed\u4ee3\uff0c\u65b0\u578b\u670d\u52a1\u6cbb\u7406\u65b9\u5f0f\u4e0d\u518d\u9700\u8981\u4f20\u7edf\u70b9\u5230\u70b9\u8fd9\u79cd\u4e2d\u5fc3\u5316\u7684\u7ba1\u7406\u529f\u80fd\u3002\u6d41\u7a0b\u7ba1\u63a7\u3001CICD\u3001\u6392\u73ed\u662f\u4f20\u7edf\u516c\u53f8\u8d28\u91cf\u7ba1\u7406\u3001SLA\u8fbe\u6807\u7684\u91cd\u8981\u65b9\u5f0f\u3002 \u56db \u8fd0\u7ef4\u5e73\u53f0\u4e09\u5927\u6838\u5fc3\u80fd\u529b\uff1a \u914d\u7f6e\u7ba1\u7406\u80fd\u529b \u53d8\u66f4\u7ba1\u7406\u80fd\u529b \u72b6\u6001\u7ba1\u7406\u80fd\u529b \u8fd0\u7ef4\u5e73\u53f0\u7684\u5efa\u8bbe\u7406\u5ff5 \u6807\u51c6\u5316\u5148\u884c \u5feb\u901f\u5c1d\u8bd5 \u63a5\u53d7\u4e0d\u5b8c\u7f8e \u4e1a\u52a1\u5bfc\u5411 \u8fd0\u7ef4\u5e73\u53f0\u7684\u5ef6\u4f38 \u6570\u636e\u5316\u8fd0\u8425\u80fd\u529b \u4ea7\u54c1\u5316UI\u80fd\u529b \u5168\u6d41\u7a0b\u76d1\u7ba1\u95ed\u73af\u80fd\u529b \u4e00\u53e5\u8bdd\u603b\u7ed3 \u7528\u8001\u677f\u601d\u7ef4\u6253\u9020\u4ea7\u7814\u8fd0\u5171\u540c\u4f53\uff0c\u65e8\u5728\u4e3a\u4ea7\u7814\u8d4b\u80fd\u63d0\u6548\u3002 \u53c2\u8003\u6587\u6863 https://mp.weixin.qq.com/s/63n2CPfaHLiu-zFtrvlEUg","title":"\u7b2c\u4e09\u7bc7 \u8fd0\u7ef4\u5e73\u53f0\u5efa\u8bbe\u7684\u7406\u5ff5"},{"location":"chapter_2/yunweipingtailinian/#_1","text":"","title":"\u4e00\u4e2a\u5408\u683c\u7684\u8fd0\u7ef4\u5e73\u53f0"},{"location":"chapter_2/yunweipingtailinian/#_2","text":"\u8fd0\u7ef4\u65e5\u5e38\u7e41\u7410\u7684\u91cd\u590d\u5de5\u4f5c \u8f6f\u786c\u4ef6\u57fa\u7840\u67b6\u6784\u8d44\u6e90\u4fe1\u606f\u6df7\u6c8c \u7814\u8fd0\u804c\u80fd\u8fb9\u754c\u6df7\u4e71\uff0c\u804c\u8d23\u5bf9\u7acb\uff0c\u6548\u80fd\u4f4e\u5f31 \u7b2c\u4e00\u8981\u52a1\u662f\u89e3\u51b3\u5f53\u4e0b\u75db\u70b9\uff0c\u5f80\u5f80\u662f\u8fd0\u7ef4\u53cc\u624b\u6025\u9700\u91ca\u653e\uff0c\u521a\u6027\u9700\u6c42\u884d\u751f\u8fd0\u7ef4\u5e73\u53f0\u3002\u7f13\u548c\u8fd0\u7ef4\u5f00\u53d1\u4e4b\u95f4\u4f9b\u6c42\u5173\u7cfb\uff0c\u5efa\u7acb\u6e05\u6670\u804c\u8d23\u8fb9\u754c\uff0c\u670d\u52a1\u597d\u7814\u53d1\u7b2c\u4e00\u751f\u4ea7\u529b\uff0c\u65e2\u800c\u518d\u6539\u53d8\u8fd0\u5f00\u5173\u7cfb\u4f9b\u6c42\u94fe\uff0c\u4ece\u5bf9\u6297\u5230\u8d4b\u80fd\u3002\u5728\u6210\u672c\u3001\u5b89\u5168\u3001\u8d28\u91cf\u3001\u6548\u7387\u4e4b\u95f4\u5bfb\u627e\u5e73\u8861","title":"\u4e00 \u81f3\u5c11\u8981\u89e3\u51b3\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898"},{"location":"chapter_2/yunweipingtailinian/#_3","text":"\u6301\u7eed\u96c6\u6210 \u6301\u7eed\u4ea4\u4ed8 \u6301\u7eed\u90e8\u7f72 \u8fd0\u7ef4\u5e73\u53f0\uff0c\u8981\u9700\u6c42\u5224\u7814\u51c6\u786e\u3001\u6210\u679c\u4ea4\u4ed8\u8fc5\u901f\u3001\u4ea7\u54c1\u6301\u7eed\u8fed\u4ee3\u3001\u4ea4\u4ed8\u8d28\u91cf\u53ef\u9760\u3002\u5176\u6b21\u662f\u4ea7\u54c1\u5b9a\u4f4d\u8981\u51c6\u786e\uff0c\u6bcf\u4e2a\u4ea7\u54c1\u8bbe\u8ba1\u4eba\u90fd\u8981\u6709\u8eac\u8eab\u5165\u5c40\u7684\u80fd\u624b\uff0c\u4e00\u7ebf\u7ecf\u5386\u4e30\u5bcc\u4e14\u6df1\u523b\u3002","title":"\u4e8c \u81f3\u5c11\u5177\u5907\u5982\u4e0b\u51e0\u4e2a\u7279\u6027"},{"location":"chapter_2/yunweipingtailinian/#_4","text":"CMDB \u670d\u52a1\u6811 \u6d41\u7a0b\u7ba1\u63a7(\u6bd4\u5982workflow) CICD \u6392\u73ed CMDB,\u670d\u52a1\u6811\u4e3a\u4f20\u7edf\u8fd0\u7ef4\u5e73\u53f0\u5fc5\u5907\u529f\u80fd\uff0c\u968f\u7740\u516c\u6709\u4e91\u5f3a\u52bf\u4e0b\u6c89\uff0cKubernetes\uff0cservermesh\u9010\u6b65\u666e\u53ca\u8fed\u4ee3\uff0c\u65b0\u578b\u670d\u52a1\u6cbb\u7406\u65b9\u5f0f\u4e0d\u518d\u9700\u8981\u4f20\u7edf\u70b9\u5230\u70b9\u8fd9\u79cd\u4e2d\u5fc3\u5316\u7684\u7ba1\u7406\u529f\u80fd\u3002\u6d41\u7a0b\u7ba1\u63a7\u3001CICD\u3001\u6392\u73ed\u662f\u4f20\u7edf\u516c\u53f8\u8d28\u91cf\u7ba1\u7406\u3001SLA\u8fbe\u6807\u7684\u91cd\u8981\u65b9\u5f0f\u3002","title":"\u4e09 \u6700\u5c11\u8981\u5177\u5907\u5982\u4e0b\u51e0\u9879\u529f\u80fd\uff1a"},{"location":"chapter_2/yunweipingtailinian/#_5","text":"\u914d\u7f6e\u7ba1\u7406\u80fd\u529b \u53d8\u66f4\u7ba1\u7406\u80fd\u529b \u72b6\u6001\u7ba1\u7406\u80fd\u529b","title":"\u56db \u8fd0\u7ef4\u5e73\u53f0\u4e09\u5927\u6838\u5fc3\u80fd\u529b\uff1a"},{"location":"chapter_2/yunweipingtailinian/#_6","text":"\u6807\u51c6\u5316\u5148\u884c \u5feb\u901f\u5c1d\u8bd5 \u63a5\u53d7\u4e0d\u5b8c\u7f8e \u4e1a\u52a1\u5bfc\u5411","title":"\u8fd0\u7ef4\u5e73\u53f0\u7684\u5efa\u8bbe\u7406\u5ff5"},{"location":"chapter_2/yunweipingtailinian/#_7","text":"\u6570\u636e\u5316\u8fd0\u8425\u80fd\u529b \u4ea7\u54c1\u5316UI\u80fd\u529b \u5168\u6d41\u7a0b\u76d1\u7ba1\u95ed\u73af\u80fd\u529b","title":"\u8fd0\u7ef4\u5e73\u53f0\u7684\u5ef6\u4f38"},{"location":"chapter_2/yunweipingtailinian/#_8","text":"\u7528\u8001\u677f\u601d\u7ef4\u6253\u9020\u4ea7\u7814\u8fd0\u5171\u540c\u4f53\uff0c\u65e8\u5728\u4e3a\u4ea7\u7814\u8d4b\u80fd\u63d0\u6548\u3002","title":"\u4e00\u53e5\u8bdd\u603b\u7ed3"},{"location":"chapter_2/yunweipingtailinian/#_9","text":"https://mp.weixin.qq.com/s/63n2CPfaHLiu-zFtrvlEUg","title":"\u53c2\u8003\u6587\u6863"},{"location":"chapter_2/yunweizhiyeguifan/","text":"\u6982\u8ff0 \u672c\u6587\u65e8\u5728\u9610\u8ff0\u4e1a\u52a1 SRE \u5728\u5e73\u65f6\u5de5\u4f5c\u4e2d\uff0c\u505a\u7684\u66f4\u52a0\u804c\u4e1a\u5316\u7684\u4e00\u4e9b\u611f\u609f\u548c\u603b\u7ed3.\u4e0b\u6587\u4e2d\u4e1a\u52a1\u8fd0\u7ef4\u7b49\u540c\u4e8e\u4e1a\u52a1 SRE. \u4e00 \u4e1a\u52a1\u8fd0\u7ef4\u7684\u804c\u4e1a\u6807\u51c6 (\u4e00) \u68b3\u7406\u5de5\u4f5c\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u8fd0\u7ef4\u4efb\u52a1\u90fd\u6709\u6d41\u7a0b\uff0c\u6d41\u7a0b\u5316\u505a\u4e8b\u60c5 \u5176\u4e2d\u5c31\u6d89\u53ca\u5230\u505a\u6807\u51c6\u5316,\u6807\u51c6\u5316\u662f\u81ea\u52a8\u5316\u7684\u524d\u63d0,\u6709\u4e9b\u8fd0\u7ef4\u4efb\u52a1\u53ef\u80fd\u6682\u65f6\u6ca1\u6709\u81ea\u52a8\u5316,\u4f46\u662f SRE \u4e00\u5b9a\u8981\u628a\u4ed6\u5148\u68b3\u7406\u6210\u6d41\u7a0b,\u603b\u7ed3\u5404\u4e2a\u4efb\u52a1\u7684\u6807\u51c6\u8f93\u5165\u548c\u6807\u51c6\u8f93\u51fa,\u5f62\u6210\u6d41\u7a0b\u6587\u6863.\u5e76\u52aa\u529b\u505a\u5230\u4ee5\u8fd0\u7ef4\u5e73\u53f0 API \u5f62\u5f0f\u4f53\u73b0. (\u4e8c) \u81ea\u52a8\u5316\u4e00\u5207 \u505a\u81ea\u52a8\u5316\u7684\u91cd\u8981\u6027\u76f8\u4fe1\u5927\u5bb6\u90fd\u660e\u767d\uff0c\u8fd9\u91cc\u4e3b\u8981\u662f\u60f3\u8bf4\u4e00\u4e0b\u5bf9 SRE \u505a\u81ea\u52a8\u5316\u7684\u4e00\u4e9b\u611f\u609f. 1 \u6ce8\u91cd\u53ef\u89c6\u5316: \u4f7f\u8fd0\u7ef4\u6d41\u7a0b\u53d8\u5f97\u81ea\u52a8\u5316\uff0c\u540c\u65f6\u6ce8\u91cd\u81ea\u52a8\u5316\u5f53\u4e2d\u7684\u53ef\u89c6\u5316 \u3002 \u6d41\u7a0b\u4e00\u5171\u8981\u505a\u51e0\u6b65\uff0c\u6bcf\u4e00\u6b65\u90fd\u505a\u4ec0\u4e48\uff0c\u660e\u786e\u7684\u63d0\u793a\u3002 \u5982\u679c\u5931\u8d25\uff0c\u5219\u544a\u77e5\u539f\u56e0\u3001\u62a5\u9519\u4fe1\u606f\uff0c\u4f7f\u7528\u6237\u4e00\u773c\u660e\u767d\u6d41\u7a0b\u4e3a\u4ec0\u4e48\u5931\u8d25\u3002 \u5927\u5230\u6d41\u7a0b\u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6d41\u7a0b\uff0c\u5c0f\u5230 tomcat \u542f\u52a8\u8fc7\u7a0b\u751a\u81f3\u4e00\u4e2a shell \u811a\u672c\u7684\u6267\u884c\u3002 2 \u660e\u767d\u8fd0\u7ef4\u81ea\u52a8\u5316\u5e73\u53f0\u7684\u6838\u5fc3\u662f 3 \u5927\u80fd\u529b\uff1a \u914d\u7f6e\u7ba1\u7406\u80fd\u529b\u3001\u53d8\u66f4\u7ba1\u7406\u80fd\u529b\u3001\u72b6\u6001\u7ba1\u7406\u80fd\u529b \uff08\u4e09\uff09\u505a\u4efb\u4f55\u91cd\u5927\u53d8\u66f4\u4e4b\u524d\u4e00\u5b9a\u8981\u53cc\u91cd\u786e\u8ba4 \u505a\u4efb\u4f55\u91cd\u5927\u6539\u52a8\u524d\u4e00\u5b9a\u8981 double check \u5177\u4f53\u4f53\u73b0\u5728\u6709\u7ec4\u5185\u4e92\u76f8 review \u673a\u5236\u548c\u5177\u4f53 review \u8bb0\u5f55\u6587\u6863 \uff08\u56db\uff09\u4efb\u4f55\u91cd\u5927\u7ebf\u4e0a\u6539\u52a8 \u4e00\u5b9a\u8981\u9075\u5b88\u7070\u5ea6\u53d1\u5e03\u539f\u5219 \uff08\u4e94\uff09 \u6709\u53d8\u52a8\u53ca\u65f6\u544a\u77e5\u4e1a\u52a1\u65b9 \u4e8c \u4e1a\u52a1\u8fd0\u7ef4\u548c\u540c\u4e8b\uff08\u4e0a\u6e38\u548c\u4e0b\u6e38\uff09\u7684\u6c9f\u901a\u6807\u51c6 \u4efb\u4f55\u65f6\u5019\u90fd\u4e0d\u80fd\u6709\u60c5\u7eea\u5316\u7684\u8868\u8fbe\u65b9\u5f0f \u4efb\u4f55\u53d8\u66f4\u63d0\u524d\u544a\u77e5 \u4e09 \u7ebf\u4e0a\u5404\u79cd\u64cd\u4f5c\u8981\u5584\u7528\u68c0\u67e5\u6280\u80fd 1 \u91cd\u70b9: \u9879\u76ee\u4e0a\u7ebf\u4e4b\u524d\uff0c\u6709\u4e00\u4e2a checklist,\u4e0a\u7ebf\u4e4b\u524d\u5fc5\u987b\u4e00\u4e00\u68c0\u67e5 \u9879\u76ee\u7814\u53d1\u671f\u95f4\uff0c\u548c\u5404\u4e2a\u5e95\u5c42\u652f\u6301\u90e8\u95e8\u7684\u4e00\u4e9b\u5f85\u89e3\u51b3\u95ee\u9898\u8fdb\u884c\u7f57\u5217\uff0c\u5e76\u5b9a\u671f\u68c0\u67e5 \u56db \u5e73\u65f6\u5e94\u8be5\u4e3b\u52a8\u63d0\u9ad8\u7684\u6280\u672f\u5de5\u7a0b\u80fd\u529b \u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4ee5\u4e0b\u8fd9\u4e9b \u6280\u672f\u9886\u57df \u8981\u6c42 \u5907\u6ce8 Linux kernel \u6df1\u5165\u7406\u89e3 kernel,\u5305\u62ec\u638c\u63e1 CPU \u8c03\u5ea6\u3001Mem \u5b50\u7cfb\u7edf\u3001Net \u5b50\u7cfb\u7edf\u3001IO \u5b50\u7cfb\u7edf\u7684\u7ec6\u8282,\u64c5\u957f\u6545\u969c\u6392\u67e5,\u5229\u7528 Perf \u5de5\u5177\u8fdb\u884c\u6027\u80fd\u5206\u6790\u548c\u4f18\u5316 \u7a0b\u5e8f: python/shell \u7cbe\u901a \u7a0b\u5e8f: c/js/html/css \u4f7f\u7528\u5c42\u9762\u65e0\u95ee\u9898 \u5229\u7528 Web \u6846\u67b6\u8fdb\u884c\u8fd0\u7ef4\u5de5\u5177\u5f00\u53d1: flask \u751f\u6001\u3001 react \u751f\u6001 \u719f\u7ec3\u5f00\u53d1 \u4e0d\u4ec5\u9650\u4e8e flask \u548c react,\u4e5f\u53ef\u4ee5 Django\u3001Tornado\u3001Vue \u6570\u636e\u5e93: MySQL\u3001MongoDB\u3001Redis \u4f7f\u7528\u5c42\u9762\u65e0\u95ee\u9898 \u5bb9\u5668\u5316: Docker\u3001Kubernetes \u4f7f\u7528\u5c42\u9762\u65e0\u95ee\u9898 \u7f51\u7edc\u670d\u52a1: nginx\u3001etcd\u3001bind\u3001kafka\u3001haproxy\u3001 \u7b49\u7b49 \u53ef\u968f\u5fc3\u6240\u6b32\u642d\u5efa,\u5373\u4f7f\u4ee5\u524d\u6ca1\u63a5\u89e6\u8fc7,\u80fd\u591f\u7167\u7740\u6559\u7a0b\u3001\u5b98\u7f51\u8fdb\u884c\u7ef4\u62a4 \u5f00\u6e90\u8fd0\u7ef4\u5de5\u5177\u4f7f\u7528\uff1asupervisor\u3001 puppet\u3001ansible\u3001zabbix \u7b49 \u719f\u7ec3\u4f7f\u7528 \u7f51\u7edc\u534f\u8bae: TCP/IP \u534f\u8bae\u65cf\u3001http/https\u3001\u8def\u7531\u4ea4\u6362\u3001\u5b50\u7f51\u5212\u5206 \u6df1\u5165\u7406\u89e3\u5176\u539f\u7406,\u62e5\u6709\u624e\u5b9e\u7684\u57fa\u7840\u77e5\u8bc6 \u4e94 \u8fd0\u7ef4\u5de5\u4f5c\u6307\u5bfc\u6027\u539f\u5219\u7684\u6c47\u603b \u4e00\u5207\u8fd0\u7ef4\u5de5\u5177\u8981\u7ed9\u7528\u6237\u8fd9\u6837\u7684\u4f53\u9a8c: \u7b80\u5355\u3001\u9760\u8c31 \u505a\u8fd0\u7ef4\u7cfb\u7edf\u65f6\u6ce8\u91cd\u6807\u51c6\u5316\u548c\u53ef\u89c6\u5316 \u56e2\u961f\u5408\u5e76\u65f6\u53ef\u4ee5\u53c2\u8003\u8fd9\u6837\u4e00\u4e2a\u539f\u5219: \u6570\u636e\u548c\u6280\u80fd\u5171\u4eab\uff0c\u8fd0\u8425\u72ec\u7acb \u505a\u7cfb\u7edf\u529f\u80fd\u7684\u65f6\u5019\uff0c\u5bf9\u540e\u7aef(\u4f60\u4f9d\u8d56\u7684\u7cfb\u7edf)\u5b95\u673a\u7684\u60c5\u51b5\uff0c\u63d0\u4f9b\u91cd\u8bd5\u673a\u5236\uff0c\u5e76\u4e14\u91cd\u8bd5\u7684\u65f6\u5019\u53bb\u9664\u7b2c\u4e00\u6b21\u5931\u8d25\u7684\u4e3b\u673a. \u8fd0\u7ef4\u78b0\u5230\u7684\u4efb\u52a1\uff0c\u5c31\u662f\u4e0d\u65ad\u7684\u8fdb\u884c\u62bd\u8c61\uff0c\u628a\u4e00\u5c42\u4e00\u5c42\u7684\u5de5\u4f5c\u5265\u79bb\uff0c\u5398\u6e05\uff0c\u7136\u540e\u5206\u522b\u53bb\u5b9e\u73b0\u6bcf\u4e00\u5c42\u3002\u6bcf\u4e00\u5c42\u90fd\u6709\u81ea\u5df1\u7684 owner \u548c\u76f8\u5e94\u7684\u7528\u6237 \u8fd0\u7ef4\u540c\u5b66\u9700\u8981\u65f6\u523b\u719f\u6089\u5f53\u524d\u4e1a\u52a1\u67b6\u6784\u4e0b\uff0c\u5404\u7c7b\u5c42\u9762\u53ef\u7528\u7684\u5f00\u6e90\u8f6f\u4ef6\u4ee5\u53ca\u6280\u80fd\uff0c\u4f8b\u5982\u4ee5\u4e0b\u662f\u4e00\u4e2a\u68b3\u7406: \u5b89\u5168\u7c7b\uff1a iptables\u3001ipset \u3001\u5404\u79cd\u5f00\u6e90\u8f6f\u4ef6\u7684\u9650\u5236\u6280\uff08\u6bd4\u5982 rsync \u91cc\u9762\u7684 hosts allow ,nginx \u91cc\u9762\u7684 allow,deny\uff09 \u7a33\u5b9a\u7c7b\uff1a supervisor\\\u5404\u79cd\u91cd\u8bd5\u673a\u5236 + \u5404\u79cd\u76d1\u63a7\u6280\u80fd \u9ad8\u6548\uff1a flask \u5f00\u53d1\u3001python \u5f00\u53d1\u3001\u6279\u91cf\u64cd\u4f5c\u5de5\u5177\uff08cssh\uff0cpssh\uff09 \u914d\u7f6e\u7ba1\u7406\u5de5\u5177\uff08puppet\u3001ansbile\uff09 \u4f4e\u6210\u672c: \u5408\u7406\u5229\u7528\u5404\u79cd\u8d44\u6e90\uff0c\u5305\u62ec ip \u8d44\u6e90\u3001\u7aef\u53e3\u8d44\u6e90\u7b49\u7b49 \u603b\u7ed3\u662f\u8fdb\u6b65\u7684\u9636\u68af\uff0c\u5206\u4eab\u662f\u5feb\u4e50\u7684\u6e90\u6cc9\u3002\u8fd0\u7ef4\u5de5\u4f5c\u4e2d\uff0c\u5e94\u8be5\u5e38\u5e38\u603b\u7ed3\uff0c\u591a\u591a\u5206\u4eab \u516d \u4e1a\u52a1\u8fd0\u7ef4\u627e\u4e8b\u60c5\u505a\u7684\u5404\u4e2a\u65b9\u9762\u6c47\u603b 1 \u5e73\u65f6\u65e5\u5e38 \u68b3\u7406\u5f53\u524d\u5904\u4e8e\u4e34\u754c\u72b6\u6001\u7684\u8bbe\u5907\u3001\u8f6f\u4ef6\u3001\u7cfb\u7edf\uff08\u7edf\u79f0\u8fd0\u7ef4\u98ce\u9669\u70b9\uff09\uff0c\u5e76\u8fdb\u884c\u6539\u5584 \u4e0d\u65ad\u5b8c\u5584\u81ea\u5df1\u56e2\u961f\u7684\u6280\u80fd\u95ed\u73af \u628a\u5f53\u524d\u81ea\u5df1\u5de5\u4f5c\u4e2d\u505a\u8d77\u6765\u4e0d\u65b9\u4fbf\u7684\u4efb\u52a1\u8fdb\u884c\u68b3\u7406\uff0c\u7136\u540e\u7740\u624b\u4f18\u5316 2 \u5927\u65b9\u5411 \u805a\u7126\u4ea7\u54c1\u6839\u672c\u9700\u6c42\uff0c\u63d0\u4f9b\u80fd\u591f\u89e3\u51b3\u4ea7\u54c1\u95ee\u9898\u7684\u670d\u52a1\u5668\u67b6\u6784\u3002 \u6570\u636e\u51b3\u7b56\uff0c\u901a\u8fc7\u6570\u636e\u6765\u505a\u67b6\u6784\u4f18\u5316\u7684\u8bc4\u4f30\u3002 \u5b66\u4e60\u7d27\u8ddf\u65b0\u6280\u672f\u65b9\u6848\uff0c\u4e3a\u4ea7\u54c1\u63d0\u9ad8\u7a33\u5b9a\u6027\u3001\u964d\u4f4e\u6210\u672c\u3001\u63d0\u5347\u6548\u7387\u3002 \u603b\u7ed3\u8fd0\u7ef4\u7ecf\u9a8c\uff0c\u5206\u4eab\u77e5\u8bc6\uff0c\u63a8\u52a8\u516c\u53f8\u4ea7\u54c1\u8fdb\u884c\u67b6\u6784\u5347\u7ea7\u6216\u4f18\u5316\u3002 3 \u804c\u4e1a\u6210\u957f\u5468\u671f \u6280\u672f+\u6280\u672f+\u6280\u672f ==> \u4ea7\u54c1+\u6280\u672f+\u8fd0\u8425 \u4e03 \u4e1a\u52a1\u8fd0\u7ef4\u5e73\u65f6\u7684\u610f\u8bc6 \u6293\u4f4f\u6838\u5fc3: \u6838\u5fc3\u6d41\u7a0b \u6838\u5fc3\u5e94\u7528 ##\u4e1a\u52a1\u90e8\u5206\u592a\u591a\uff0c\u5fc5\u987b\u6293\u4f4f\u6838\u5fc3\u5e94\u7528 \u5bf9\u7ebf\u4e0a\u53d8\u66f4\u3001\u9ad8\u5371\u64cd\u4f5c\u4fdd\u6301\u656c\u754f: \u5148\u6d4b\u8bd5\u540e\u4e0a\u7ebf \u505a\u597d\u5907\u4efd \u7ebf\u4e0a\u64cd\u4f5c\u610f\u8bc6 #\u7ebf\u4e0a\u64cd\u4f5c\uff0c\u4e00\u6761\u547d\u4ee4\u6572\u4e0b\u53bb\u8fbe\u5230\u4ec0\u4e48\u6548\u679c\u3002\u5fc5\u987b\u505a\u5230\u5fc3\u4e2d\u6709\u6570\uff0c\u800c\u975e\u6572\u4e0b\u53bb\u8bd5\u8bd5\u770b\u8fd9\u6837\u7684\u5fc3\u6001 \u811a\u672c\u5316\uff0f\u81ea\u52a8\u5316\u4ee3\u66ff\u624b\u5de5\u64cd\u4f5c \u8c28\u614e ##\u505a\u4eba\u8c28\u614e ,\u63d0\u524d\u9884\u5224\u53ef\u80fd\u4f1a\u51fa\u73b0\u7684\u95ee\u9898\u3002 \u7ec6\u5fc3 ##\u505a\u4e8b\u7ec6\u5fc3,\u590d\u5236\u7c98\u8d34\u547d\u4ee4\u9700\u4ed4\u7ec6\u68c0\u67e5. \u53d8\u66f4\u5b8c\u8981\u9a6c\u4e0a\u9a8c\u8bc1 \u4fdd\u6301\u5bf9\u7ebf\u4e0a\u8fd0\u884c\u72b6\u6001\u7684\u5173\u6ce8 \u4e0d\u8981\u201d\u5077\u5077\u201d\u53d8\u66f4 \u7f16\u5199\u811a\u672c\\\u7a0b\u5e8f\u65f6,\u4e0d\u8f7b\u6613 hardcode \u5904\u7406\u6545\u969c\u65f6,\u627e\u4e0a\u4f60\u7684\u642d\u6863\u4e00\u8d77 \u5904\u7406\u6545\u969c\u65f6,\u6bd4\u4e1a\u52a1\u65b9\u66f4\u201c\u7d27\u5f20\u201d \u505a\u597d CMDB \u8054\u52a8\uff0c\u7edf\u4e00\u53d8\u66f4\u64cd\u4f5c\u5165\u53e3 \u4fdd\u6301\u4e00\u81f4\u64cd\u4f5c\uff0c\u907f\u514d\u5f02\u6784\u7ba1\u7406 \u4e34\u65f6\u9700\u6c42\u66f4\u9700\u8981\u89c4\u8303\u5904\u7406 \u9488\u5bf9\u6545\u969c\u5904\u7406\u7684\u8981\u6c42: 1 \u5206\u949f\u53d1\u73b0\u95ee\u9898\uff0c5 \u5206\u949f\u5b9a\u4f4d\u95ee\u9898\uff0c10 \u5206\u949f\u6062\u590d\u95ee\u9898 \u516b \u603b\u7ed3\u4e00\u4e0b Google SRE \u7684\u6307\u5bfc\u601d\u60f3 1 \u62e5\u62b1\u98ce\u9669\u548c\u7ba1\u7406\u98ce\u9669 2 \u7528\u597d SLI \u548c SLO \u5de5\u5177, SRE \u7684\u5de5\u4f5c\u56f4\u7ed5 SLO \u5c55\u5f00. 3 \u51cf\u5c11\u7410\u4e8b \u5de5\u7a0b\u5de5\u4f5c\u901a\u5e38\u662f\u6307\u6709\u521b\u65b0\u6027\u548c\u521b\u9020\u6027\u7684, \u7740\u91cd\u901a\u8fc7\u8bbe\u8ba1\u6765\u89e3\u51b3\u95ee\u9898, \u89e3\u51b3\u65b9\u6848\u8d8a\u901a\u7528\u8d8a\u597d. \u4f8b\u5982 \u8f6f\u4ef6\u5de5\u7a0b\u3001\u7cfb\u7edf\u5de5\u7a0b. \u7410\u4e8b: \u4e0e\u8fd0\u7ef4\u670d\u52a1\u76f8\u5173\u7684\u91cd\u590d\u6027\u7684\u3001\u624b\u5de5\u7684\u52b3\u52a8. 4 \u505a\u597d\u76d1\u63a7. 5 \u505a\u597d\u81ea\u52a8\u5316 6 \u505a\u597d\u53d1\u5e03\u5de5\u7a0b(\u53d8\u66f4\u7ba1\u7406) 7 \u7b80\u5355\u5316 \u4e5d SRE \u5de5\u4f5c\u7740\u529b\u70b9 1 \u878d\u5165\u4e1a\u52a1\u56e2\u961f \u61c2\u4e1a\u52a1\u672f\u8bed\u3001\"\u9ed1\u8bdd\" \u61c2\u4e1a\u52a1\u76ee\u6807 2 \u5efa\u7acb\u4fe1\u4efb\u83b7\u5f97\u6388\u6743 \u56e2\u961f\u4e4b\u95f4\u5efa\u7acb\u4fe1\u4efb, \u6700\u6700\u6839\u672c\u7684\u8fd8\u662f\u6280\u672f\u80fd\u529b. shut up, show me the code . \u9664\u4e86\u6280\u672f\u80fd\u529b\u4e4b\u5916, \u5f88\u6709\u5fc5\u8981\u52a0\u5f3a\u81ea\u5df1\u7684\u6c9f\u901a\u3001\u8bf4\u670d\u80fd\u529b. 3 \u63a8\u52a8\u4e1a\u52a1\u53d1\u5c55 SRE \u9700\u8981\u9488\u5bf9\u4e1a\u52a1\u5c42\u7684\u9700\u6c42\u505a\u66f4\u591a\u7684\u4e8b\u60c5. SRE \u56e2\u961f\u5728\u4e1a\u52a1\u5c42\u8d8a\u6df1\u5165, \u5f00\u53d1\u7684\u5de5\u5177\u53ef\u80fd\u5c31\u8d8a\u5b8c\u5584\u548c\u4e30\u5bcc. (\u6bd4\u5982\u539f\u6765\u4e00\u4e2a\u4e1a\u52a1\u9700\u6c42\u9700\u8981\u5b8c\u5168 RD \u56e2\u961f\u4ece 0 \u5230 1 \u5f00\u53d1,SRE \u53c2\u4e0e\u4e4b\u540e\u5b8c\u5168\u53ef\u4ee5\u63d0\u4f9b\u5f00\u6e90\u5de5\u5177\u94fe,\u8ba9 RD \u540c\u5b66\u5c11\u5199\u4e00\u4e9b\u4ee3\u7801\u964d\u4f4e\u5de5\u4f5c\u91cf\u3001\u63d0\u5347\u4ea4\u4ed8\u6548\u7387) SRE \u56e2\u961f\u901a\u8fc7\u68b3\u7406\u4e1a\u52a1\u7279\u6027\u3001\u5236\u5b9a\u4e1a\u52a1\u6d41\u7a0b\u3001\u5b9a\u5236\u81ea\u52a8\u5316\u5de5\u5177\u7b49\u591a\u79cd\u65b9\u5f0f, \u4e3b\u52a8\u5730\u6539\u8fdb\u4e1a\u52a1\u7684\u8fed\u4ee3\u6548\u7387, \u63d0\u5347\u4ea7\u54c1\u53d1\u5e03\u7b49\u5404\u4e2a\u73af\u8282\u7684\u80fd\u6548, \u540c\u65f6\u901a\u8fc7\u79ef\u6781\u7684\u7b56\u7565(\u4f7f\u7528\u81ea\u52a8\u5316\u5de5\u5177\u548c SRE \u624b\u6bb5)\u6765\u964d\u4f4e\u8fed\u4ee3\u901f\u5ea6\u5e26\u6765\u7684\u4e0d\u7a33\u5b9a\u56e0\u7d20.","title":"\u7b2c\u4e8c\u7bc7 \u4e1a\u52a1SRE\u7684\u804c\u4e1a\u89c4\u8303"},{"location":"chapter_2/yunweizhiyeguifan/#_1","text":"\u672c\u6587\u65e8\u5728\u9610\u8ff0\u4e1a\u52a1 SRE \u5728\u5e73\u65f6\u5de5\u4f5c\u4e2d\uff0c\u505a\u7684\u66f4\u52a0\u804c\u4e1a\u5316\u7684\u4e00\u4e9b\u611f\u609f\u548c\u603b\u7ed3.\u4e0b\u6587\u4e2d\u4e1a\u52a1\u8fd0\u7ef4\u7b49\u540c\u4e8e\u4e1a\u52a1 SRE.","title":"\u6982\u8ff0"},{"location":"chapter_2/yunweizhiyeguifan/#_2","text":"","title":"\u4e00 \u4e1a\u52a1\u8fd0\u7ef4\u7684\u804c\u4e1a\u6807\u51c6"},{"location":"chapter_2/yunweizhiyeguifan/#_3","text":"\u5176\u4e2d\u5c31\u6d89\u53ca\u5230\u505a\u6807\u51c6\u5316,\u6807\u51c6\u5316\u662f\u81ea\u52a8\u5316\u7684\u524d\u63d0,\u6709\u4e9b\u8fd0\u7ef4\u4efb\u52a1\u53ef\u80fd\u6682\u65f6\u6ca1\u6709\u81ea\u52a8\u5316,\u4f46\u662f SRE \u4e00\u5b9a\u8981\u628a\u4ed6\u5148\u68b3\u7406\u6210\u6d41\u7a0b,\u603b\u7ed3\u5404\u4e2a\u4efb\u52a1\u7684\u6807\u51c6\u8f93\u5165\u548c\u6807\u51c6\u8f93\u51fa,\u5f62\u6210\u6d41\u7a0b\u6587\u6863.\u5e76\u52aa\u529b\u505a\u5230\u4ee5\u8fd0\u7ef4\u5e73\u53f0 API \u5f62\u5f0f\u4f53\u73b0.","title":"(\u4e00) \u68b3\u7406\u5de5\u4f5c\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u8fd0\u7ef4\u4efb\u52a1\u90fd\u6709\u6d41\u7a0b\uff0c\u6d41\u7a0b\u5316\u505a\u4e8b\u60c5"},{"location":"chapter_2/yunweizhiyeguifan/#_4","text":"\u505a\u81ea\u52a8\u5316\u7684\u91cd\u8981\u6027\u76f8\u4fe1\u5927\u5bb6\u90fd\u660e\u767d\uff0c\u8fd9\u91cc\u4e3b\u8981\u662f\u60f3\u8bf4\u4e00\u4e0b\u5bf9 SRE \u505a\u81ea\u52a8\u5316\u7684\u4e00\u4e9b\u611f\u609f.","title":"(\u4e8c) \u81ea\u52a8\u5316\u4e00\u5207"},{"location":"chapter_2/yunweizhiyeguifan/#1","text":"\u4f7f\u8fd0\u7ef4\u6d41\u7a0b\u53d8\u5f97\u81ea\u52a8\u5316\uff0c\u540c\u65f6\u6ce8\u91cd\u81ea\u52a8\u5316\u5f53\u4e2d\u7684\u53ef\u89c6\u5316 \u3002 \u6d41\u7a0b\u4e00\u5171\u8981\u505a\u51e0\u6b65\uff0c\u6bcf\u4e00\u6b65\u90fd\u505a\u4ec0\u4e48\uff0c\u660e\u786e\u7684\u63d0\u793a\u3002 \u5982\u679c\u5931\u8d25\uff0c\u5219\u544a\u77e5\u539f\u56e0\u3001\u62a5\u9519\u4fe1\u606f\uff0c\u4f7f\u7528\u6237\u4e00\u773c\u660e\u767d\u6d41\u7a0b\u4e3a\u4ec0\u4e48\u5931\u8d25\u3002 \u5927\u5230\u6d41\u7a0b\u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6d41\u7a0b\uff0c\u5c0f\u5230 tomcat \u542f\u52a8\u8fc7\u7a0b\u751a\u81f3\u4e00\u4e2a shell \u811a\u672c\u7684\u6267\u884c\u3002","title":"1 \u6ce8\u91cd\u53ef\u89c6\u5316:"},{"location":"chapter_2/yunweizhiyeguifan/#2-3","text":"\u914d\u7f6e\u7ba1\u7406\u80fd\u529b\u3001\u53d8\u66f4\u7ba1\u7406\u80fd\u529b\u3001\u72b6\u6001\u7ba1\u7406\u80fd\u529b","title":"2 \u660e\u767d\u8fd0\u7ef4\u81ea\u52a8\u5316\u5e73\u53f0\u7684\u6838\u5fc3\u662f 3 \u5927\u80fd\u529b\uff1a"},{"location":"chapter_2/yunweizhiyeguifan/#_5","text":"\u505a\u4efb\u4f55\u91cd\u5927\u6539\u52a8\u524d\u4e00\u5b9a\u8981 double check \u5177\u4f53\u4f53\u73b0\u5728\u6709\u7ec4\u5185\u4e92\u76f8 review \u673a\u5236\u548c\u5177\u4f53 review \u8bb0\u5f55\u6587\u6863","title":"\uff08\u4e09\uff09\u505a\u4efb\u4f55\u91cd\u5927\u53d8\u66f4\u4e4b\u524d\u4e00\u5b9a\u8981\u53cc\u91cd\u786e\u8ba4"},{"location":"chapter_2/yunweizhiyeguifan/#_6","text":"","title":"\uff08\u56db\uff09\u4efb\u4f55\u91cd\u5927\u7ebf\u4e0a\u6539\u52a8 \u4e00\u5b9a\u8981\u9075\u5b88\u7070\u5ea6\u53d1\u5e03\u539f\u5219"},{"location":"chapter_2/yunweizhiyeguifan/#_7","text":"","title":"\uff08\u4e94\uff09 \u6709\u53d8\u52a8\u53ca\u65f6\u544a\u77e5\u4e1a\u52a1\u65b9"},{"location":"chapter_2/yunweizhiyeguifan/#_8","text":"\u4efb\u4f55\u65f6\u5019\u90fd\u4e0d\u80fd\u6709\u60c5\u7eea\u5316\u7684\u8868\u8fbe\u65b9\u5f0f \u4efb\u4f55\u53d8\u66f4\u63d0\u524d\u544a\u77e5","title":"\u4e8c \u4e1a\u52a1\u8fd0\u7ef4\u548c\u540c\u4e8b\uff08\u4e0a\u6e38\u548c\u4e0b\u6e38\uff09\u7684\u6c9f\u901a\u6807\u51c6"},{"location":"chapter_2/yunweizhiyeguifan/#_9","text":"","title":"\u4e09 \u7ebf\u4e0a\u5404\u79cd\u64cd\u4f5c\u8981\u5584\u7528\u68c0\u67e5\u6280\u80fd"},{"location":"chapter_2/yunweizhiyeguifan/#1_1","text":"\u9879\u76ee\u4e0a\u7ebf\u4e4b\u524d\uff0c\u6709\u4e00\u4e2a checklist,\u4e0a\u7ebf\u4e4b\u524d\u5fc5\u987b\u4e00\u4e00\u68c0\u67e5 \u9879\u76ee\u7814\u53d1\u671f\u95f4\uff0c\u548c\u5404\u4e2a\u5e95\u5c42\u652f\u6301\u90e8\u95e8\u7684\u4e00\u4e9b\u5f85\u89e3\u51b3\u95ee\u9898\u8fdb\u884c\u7f57\u5217\uff0c\u5e76\u5b9a\u671f\u68c0\u67e5","title":"1 \u91cd\u70b9:"},{"location":"chapter_2/yunweizhiyeguifan/#_10","text":"\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4ee5\u4e0b\u8fd9\u4e9b \u6280\u672f\u9886\u57df \u8981\u6c42 \u5907\u6ce8 Linux kernel \u6df1\u5165\u7406\u89e3 kernel,\u5305\u62ec\u638c\u63e1 CPU \u8c03\u5ea6\u3001Mem \u5b50\u7cfb\u7edf\u3001Net \u5b50\u7cfb\u7edf\u3001IO \u5b50\u7cfb\u7edf\u7684\u7ec6\u8282,\u64c5\u957f\u6545\u969c\u6392\u67e5,\u5229\u7528 Perf \u5de5\u5177\u8fdb\u884c\u6027\u80fd\u5206\u6790\u548c\u4f18\u5316 \u7a0b\u5e8f: python/shell \u7cbe\u901a \u7a0b\u5e8f: c/js/html/css \u4f7f\u7528\u5c42\u9762\u65e0\u95ee\u9898 \u5229\u7528 Web \u6846\u67b6\u8fdb\u884c\u8fd0\u7ef4\u5de5\u5177\u5f00\u53d1: flask \u751f\u6001\u3001 react \u751f\u6001 \u719f\u7ec3\u5f00\u53d1 \u4e0d\u4ec5\u9650\u4e8e flask \u548c react,\u4e5f\u53ef\u4ee5 Django\u3001Tornado\u3001Vue \u6570\u636e\u5e93: MySQL\u3001MongoDB\u3001Redis \u4f7f\u7528\u5c42\u9762\u65e0\u95ee\u9898 \u5bb9\u5668\u5316: Docker\u3001Kubernetes \u4f7f\u7528\u5c42\u9762\u65e0\u95ee\u9898 \u7f51\u7edc\u670d\u52a1: nginx\u3001etcd\u3001bind\u3001kafka\u3001haproxy\u3001 \u7b49\u7b49 \u53ef\u968f\u5fc3\u6240\u6b32\u642d\u5efa,\u5373\u4f7f\u4ee5\u524d\u6ca1\u63a5\u89e6\u8fc7,\u80fd\u591f\u7167\u7740\u6559\u7a0b\u3001\u5b98\u7f51\u8fdb\u884c\u7ef4\u62a4 \u5f00\u6e90\u8fd0\u7ef4\u5de5\u5177\u4f7f\u7528\uff1asupervisor\u3001 puppet\u3001ansible\u3001zabbix \u7b49 \u719f\u7ec3\u4f7f\u7528 \u7f51\u7edc\u534f\u8bae: TCP/IP \u534f\u8bae\u65cf\u3001http/https\u3001\u8def\u7531\u4ea4\u6362\u3001\u5b50\u7f51\u5212\u5206 \u6df1\u5165\u7406\u89e3\u5176\u539f\u7406,\u62e5\u6709\u624e\u5b9e\u7684\u57fa\u7840\u77e5\u8bc6","title":"\u56db \u5e73\u65f6\u5e94\u8be5\u4e3b\u52a8\u63d0\u9ad8\u7684\u6280\u672f\u5de5\u7a0b\u80fd\u529b"},{"location":"chapter_2/yunweizhiyeguifan/#_11","text":"\u4e00\u5207\u8fd0\u7ef4\u5de5\u5177\u8981\u7ed9\u7528\u6237\u8fd9\u6837\u7684\u4f53\u9a8c: \u7b80\u5355\u3001\u9760\u8c31 \u505a\u8fd0\u7ef4\u7cfb\u7edf\u65f6\u6ce8\u91cd\u6807\u51c6\u5316\u548c\u53ef\u89c6\u5316 \u56e2\u961f\u5408\u5e76\u65f6\u53ef\u4ee5\u53c2\u8003\u8fd9\u6837\u4e00\u4e2a\u539f\u5219: \u6570\u636e\u548c\u6280\u80fd\u5171\u4eab\uff0c\u8fd0\u8425\u72ec\u7acb \u505a\u7cfb\u7edf\u529f\u80fd\u7684\u65f6\u5019\uff0c\u5bf9\u540e\u7aef(\u4f60\u4f9d\u8d56\u7684\u7cfb\u7edf)\u5b95\u673a\u7684\u60c5\u51b5\uff0c\u63d0\u4f9b\u91cd\u8bd5\u673a\u5236\uff0c\u5e76\u4e14\u91cd\u8bd5\u7684\u65f6\u5019\u53bb\u9664\u7b2c\u4e00\u6b21\u5931\u8d25\u7684\u4e3b\u673a. \u8fd0\u7ef4\u78b0\u5230\u7684\u4efb\u52a1\uff0c\u5c31\u662f\u4e0d\u65ad\u7684\u8fdb\u884c\u62bd\u8c61\uff0c\u628a\u4e00\u5c42\u4e00\u5c42\u7684\u5de5\u4f5c\u5265\u79bb\uff0c\u5398\u6e05\uff0c\u7136\u540e\u5206\u522b\u53bb\u5b9e\u73b0\u6bcf\u4e00\u5c42\u3002\u6bcf\u4e00\u5c42\u90fd\u6709\u81ea\u5df1\u7684 owner \u548c\u76f8\u5e94\u7684\u7528\u6237 \u8fd0\u7ef4\u540c\u5b66\u9700\u8981\u65f6\u523b\u719f\u6089\u5f53\u524d\u4e1a\u52a1\u67b6\u6784\u4e0b\uff0c\u5404\u7c7b\u5c42\u9762\u53ef\u7528\u7684\u5f00\u6e90\u8f6f\u4ef6\u4ee5\u53ca\u6280\u80fd\uff0c\u4f8b\u5982\u4ee5\u4e0b\u662f\u4e00\u4e2a\u68b3\u7406: \u5b89\u5168\u7c7b\uff1a iptables\u3001ipset \u3001\u5404\u79cd\u5f00\u6e90\u8f6f\u4ef6\u7684\u9650\u5236\u6280\uff08\u6bd4\u5982 rsync \u91cc\u9762\u7684 hosts allow ,nginx \u91cc\u9762\u7684 allow,deny\uff09 \u7a33\u5b9a\u7c7b\uff1a supervisor\\\u5404\u79cd\u91cd\u8bd5\u673a\u5236 + \u5404\u79cd\u76d1\u63a7\u6280\u80fd \u9ad8\u6548\uff1a flask \u5f00\u53d1\u3001python \u5f00\u53d1\u3001\u6279\u91cf\u64cd\u4f5c\u5de5\u5177\uff08cssh\uff0cpssh\uff09 \u914d\u7f6e\u7ba1\u7406\u5de5\u5177\uff08puppet\u3001ansbile\uff09 \u4f4e\u6210\u672c: \u5408\u7406\u5229\u7528\u5404\u79cd\u8d44\u6e90\uff0c\u5305\u62ec ip \u8d44\u6e90\u3001\u7aef\u53e3\u8d44\u6e90\u7b49\u7b49 \u603b\u7ed3\u662f\u8fdb\u6b65\u7684\u9636\u68af\uff0c\u5206\u4eab\u662f\u5feb\u4e50\u7684\u6e90\u6cc9\u3002\u8fd0\u7ef4\u5de5\u4f5c\u4e2d\uff0c\u5e94\u8be5\u5e38\u5e38\u603b\u7ed3\uff0c\u591a\u591a\u5206\u4eab","title":"\u4e94 \u8fd0\u7ef4\u5de5\u4f5c\u6307\u5bfc\u6027\u539f\u5219\u7684\u6c47\u603b"},{"location":"chapter_2/yunweizhiyeguifan/#_12","text":"","title":"\u516d \u4e1a\u52a1\u8fd0\u7ef4\u627e\u4e8b\u60c5\u505a\u7684\u5404\u4e2a\u65b9\u9762\u6c47\u603b"},{"location":"chapter_2/yunweizhiyeguifan/#1_2","text":"\u68b3\u7406\u5f53\u524d\u5904\u4e8e\u4e34\u754c\u72b6\u6001\u7684\u8bbe\u5907\u3001\u8f6f\u4ef6\u3001\u7cfb\u7edf\uff08\u7edf\u79f0\u8fd0\u7ef4\u98ce\u9669\u70b9\uff09\uff0c\u5e76\u8fdb\u884c\u6539\u5584 \u4e0d\u65ad\u5b8c\u5584\u81ea\u5df1\u56e2\u961f\u7684\u6280\u80fd\u95ed\u73af \u628a\u5f53\u524d\u81ea\u5df1\u5de5\u4f5c\u4e2d\u505a\u8d77\u6765\u4e0d\u65b9\u4fbf\u7684\u4efb\u52a1\u8fdb\u884c\u68b3\u7406\uff0c\u7136\u540e\u7740\u624b\u4f18\u5316","title":"1 \u5e73\u65f6\u65e5\u5e38"},{"location":"chapter_2/yunweizhiyeguifan/#2","text":"\u805a\u7126\u4ea7\u54c1\u6839\u672c\u9700\u6c42\uff0c\u63d0\u4f9b\u80fd\u591f\u89e3\u51b3\u4ea7\u54c1\u95ee\u9898\u7684\u670d\u52a1\u5668\u67b6\u6784\u3002 \u6570\u636e\u51b3\u7b56\uff0c\u901a\u8fc7\u6570\u636e\u6765\u505a\u67b6\u6784\u4f18\u5316\u7684\u8bc4\u4f30\u3002 \u5b66\u4e60\u7d27\u8ddf\u65b0\u6280\u672f\u65b9\u6848\uff0c\u4e3a\u4ea7\u54c1\u63d0\u9ad8\u7a33\u5b9a\u6027\u3001\u964d\u4f4e\u6210\u672c\u3001\u63d0\u5347\u6548\u7387\u3002 \u603b\u7ed3\u8fd0\u7ef4\u7ecf\u9a8c\uff0c\u5206\u4eab\u77e5\u8bc6\uff0c\u63a8\u52a8\u516c\u53f8\u4ea7\u54c1\u8fdb\u884c\u67b6\u6784\u5347\u7ea7\u6216\u4f18\u5316\u3002","title":"2 \u5927\u65b9\u5411"},{"location":"chapter_2/yunweizhiyeguifan/#3","text":"\u6280\u672f+\u6280\u672f+\u6280\u672f ==> \u4ea7\u54c1+\u6280\u672f+\u8fd0\u8425","title":"3 \u804c\u4e1a\u6210\u957f\u5468\u671f"},{"location":"chapter_2/yunweizhiyeguifan/#_13","text":"\u6293\u4f4f\u6838\u5fc3: \u6838\u5fc3\u6d41\u7a0b \u6838\u5fc3\u5e94\u7528 ##\u4e1a\u52a1\u90e8\u5206\u592a\u591a\uff0c\u5fc5\u987b\u6293\u4f4f\u6838\u5fc3\u5e94\u7528 \u5bf9\u7ebf\u4e0a\u53d8\u66f4\u3001\u9ad8\u5371\u64cd\u4f5c\u4fdd\u6301\u656c\u754f: \u5148\u6d4b\u8bd5\u540e\u4e0a\u7ebf \u505a\u597d\u5907\u4efd \u7ebf\u4e0a\u64cd\u4f5c\u610f\u8bc6 #\u7ebf\u4e0a\u64cd\u4f5c\uff0c\u4e00\u6761\u547d\u4ee4\u6572\u4e0b\u53bb\u8fbe\u5230\u4ec0\u4e48\u6548\u679c\u3002\u5fc5\u987b\u505a\u5230\u5fc3\u4e2d\u6709\u6570\uff0c\u800c\u975e\u6572\u4e0b\u53bb\u8bd5\u8bd5\u770b\u8fd9\u6837\u7684\u5fc3\u6001 \u811a\u672c\u5316\uff0f\u81ea\u52a8\u5316\u4ee3\u66ff\u624b\u5de5\u64cd\u4f5c \u8c28\u614e ##\u505a\u4eba\u8c28\u614e ,\u63d0\u524d\u9884\u5224\u53ef\u80fd\u4f1a\u51fa\u73b0\u7684\u95ee\u9898\u3002 \u7ec6\u5fc3 ##\u505a\u4e8b\u7ec6\u5fc3,\u590d\u5236\u7c98\u8d34\u547d\u4ee4\u9700\u4ed4\u7ec6\u68c0\u67e5. \u53d8\u66f4\u5b8c\u8981\u9a6c\u4e0a\u9a8c\u8bc1 \u4fdd\u6301\u5bf9\u7ebf\u4e0a\u8fd0\u884c\u72b6\u6001\u7684\u5173\u6ce8 \u4e0d\u8981\u201d\u5077\u5077\u201d\u53d8\u66f4 \u7f16\u5199\u811a\u672c\\\u7a0b\u5e8f\u65f6,\u4e0d\u8f7b\u6613 hardcode \u5904\u7406\u6545\u969c\u65f6,\u627e\u4e0a\u4f60\u7684\u642d\u6863\u4e00\u8d77 \u5904\u7406\u6545\u969c\u65f6,\u6bd4\u4e1a\u52a1\u65b9\u66f4\u201c\u7d27\u5f20\u201d \u505a\u597d CMDB \u8054\u52a8\uff0c\u7edf\u4e00\u53d8\u66f4\u64cd\u4f5c\u5165\u53e3 \u4fdd\u6301\u4e00\u81f4\u64cd\u4f5c\uff0c\u907f\u514d\u5f02\u6784\u7ba1\u7406 \u4e34\u65f6\u9700\u6c42\u66f4\u9700\u8981\u89c4\u8303\u5904\u7406 \u9488\u5bf9\u6545\u969c\u5904\u7406\u7684\u8981\u6c42: 1 \u5206\u949f\u53d1\u73b0\u95ee\u9898\uff0c5 \u5206\u949f\u5b9a\u4f4d\u95ee\u9898\uff0c10 \u5206\u949f\u6062\u590d\u95ee\u9898","title":"\u4e03 \u4e1a\u52a1\u8fd0\u7ef4\u5e73\u65f6\u7684\u610f\u8bc6"},{"location":"chapter_2/yunweizhiyeguifan/#google-sre","text":"1 \u62e5\u62b1\u98ce\u9669\u548c\u7ba1\u7406\u98ce\u9669 2 \u7528\u597d SLI \u548c SLO \u5de5\u5177, SRE \u7684\u5de5\u4f5c\u56f4\u7ed5 SLO \u5c55\u5f00. 3 \u51cf\u5c11\u7410\u4e8b \u5de5\u7a0b\u5de5\u4f5c\u901a\u5e38\u662f\u6307\u6709\u521b\u65b0\u6027\u548c\u521b\u9020\u6027\u7684, \u7740\u91cd\u901a\u8fc7\u8bbe\u8ba1\u6765\u89e3\u51b3\u95ee\u9898, \u89e3\u51b3\u65b9\u6848\u8d8a\u901a\u7528\u8d8a\u597d. \u4f8b\u5982 \u8f6f\u4ef6\u5de5\u7a0b\u3001\u7cfb\u7edf\u5de5\u7a0b. \u7410\u4e8b: \u4e0e\u8fd0\u7ef4\u670d\u52a1\u76f8\u5173\u7684\u91cd\u590d\u6027\u7684\u3001\u624b\u5de5\u7684\u52b3\u52a8. 4 \u505a\u597d\u76d1\u63a7. 5 \u505a\u597d\u81ea\u52a8\u5316 6 \u505a\u597d\u53d1\u5e03\u5de5\u7a0b(\u53d8\u66f4\u7ba1\u7406) 7 \u7b80\u5355\u5316","title":"\u516b \u603b\u7ed3\u4e00\u4e0b Google SRE \u7684\u6307\u5bfc\u601d\u60f3"},{"location":"chapter_2/yunweizhiyeguifan/#sre","text":"","title":"\u4e5d SRE \u5de5\u4f5c\u7740\u529b\u70b9"},{"location":"chapter_2/yunweizhiyeguifan/#1_3","text":"\u61c2\u4e1a\u52a1\u672f\u8bed\u3001\"\u9ed1\u8bdd\" \u61c2\u4e1a\u52a1\u76ee\u6807","title":"1 \u878d\u5165\u4e1a\u52a1\u56e2\u961f"},{"location":"chapter_2/yunweizhiyeguifan/#2_1","text":"\u56e2\u961f\u4e4b\u95f4\u5efa\u7acb\u4fe1\u4efb, \u6700\u6700\u6839\u672c\u7684\u8fd8\u662f\u6280\u672f\u80fd\u529b. shut up, show me the code . \u9664\u4e86\u6280\u672f\u80fd\u529b\u4e4b\u5916, \u5f88\u6709\u5fc5\u8981\u52a0\u5f3a\u81ea\u5df1\u7684\u6c9f\u901a\u3001\u8bf4\u670d\u80fd\u529b.","title":"2 \u5efa\u7acb\u4fe1\u4efb\u83b7\u5f97\u6388\u6743"},{"location":"chapter_2/yunweizhiyeguifan/#3_1","text":"SRE \u9700\u8981\u9488\u5bf9\u4e1a\u52a1\u5c42\u7684\u9700\u6c42\u505a\u66f4\u591a\u7684\u4e8b\u60c5. SRE \u56e2\u961f\u5728\u4e1a\u52a1\u5c42\u8d8a\u6df1\u5165, \u5f00\u53d1\u7684\u5de5\u5177\u53ef\u80fd\u5c31\u8d8a\u5b8c\u5584\u548c\u4e30\u5bcc. (\u6bd4\u5982\u539f\u6765\u4e00\u4e2a\u4e1a\u52a1\u9700\u6c42\u9700\u8981\u5b8c\u5168 RD \u56e2\u961f\u4ece 0 \u5230 1 \u5f00\u53d1,SRE \u53c2\u4e0e\u4e4b\u540e\u5b8c\u5168\u53ef\u4ee5\u63d0\u4f9b\u5f00\u6e90\u5de5\u5177\u94fe,\u8ba9 RD \u540c\u5b66\u5c11\u5199\u4e00\u4e9b\u4ee3\u7801\u964d\u4f4e\u5de5\u4f5c\u91cf\u3001\u63d0\u5347\u4ea4\u4ed8\u6548\u7387) SRE \u56e2\u961f\u901a\u8fc7\u68b3\u7406\u4e1a\u52a1\u7279\u6027\u3001\u5236\u5b9a\u4e1a\u52a1\u6d41\u7a0b\u3001\u5b9a\u5236\u81ea\u52a8\u5316\u5de5\u5177\u7b49\u591a\u79cd\u65b9\u5f0f, \u4e3b\u52a8\u5730\u6539\u8fdb\u4e1a\u52a1\u7684\u8fed\u4ee3\u6548\u7387, \u63d0\u5347\u4ea7\u54c1\u53d1\u5e03\u7b49\u5404\u4e2a\u73af\u8282\u7684\u80fd\u6548, \u540c\u65f6\u901a\u8fc7\u79ef\u6781\u7684\u7b56\u7565(\u4f7f\u7528\u81ea\u52a8\u5316\u5de5\u5177\u548c SRE \u624b\u6bb5)\u6765\u964d\u4f4e\u8fed\u4ee3\u901f\u5ea6\u5e26\u6765\u7684\u4e0d\u7a33\u5b9a\u56e0\u7d20.","title":"3 \u63a8\u52a8\u4e1a\u52a1\u53d1\u5c55"},{"location":"chapter_3/10_linux_net/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3 Linux Net \u5b50\u7cfb\u7edf\u7684 \u6838\u5fc3\u67b6\u6784\u56fe\u3001\u6838\u5fc3\u6570\u636e\u7ed3\u6784 \u53d1\u5305\u8def\u5f84 \u548c \u6536\u5305\u8def\u5f84 , \u6bcf\u4e2a\u8def\u5f84\u4e0a\u600e\u4e48\u76d1\u63a7\u548c\u8c03\u4f18 \u4ee5\u53ca \u4e00\u4e9b\u5e38\u89c1\u7684\u95ee\u9898 \u4e00 \u5185\u6838\u7f51\u7edc\u5c42\u6838\u5fc3\u67b6\u6784\u56fe \u8fd9\u91cc\u603b\u7ed3\u4e00\u4e0b\u5185\u6838\u7684\u6838\u5fc3\u5b9e\u73b0, \u65b9\u4fbf\u5feb\u901f\u638c\u63e1\u5176\u6838\u5fc3\u539f\u7406 \u5176\u4e2d dev.c \u662f\u6307 //file: net/core/dev.c , \u8457\u540d\u7684 napi_gro_receive \u51fd\u6570\u548c netif_receive_skb \u51fd\u6570\u5c31\u662f\u5728\u8fd9\u91cc\u5b9e\u73b0\u7684 (\u4e00) \u6838\u5fc3\u6570\u636e\u7ed3\u6784 1 struct softnet_data linux \u5185\u6838\u901a\u8fc7\u8c03\u7528 subsys_initcall \u6765\u521d\u59cb\u5316\u5404\u4e2a\u5b50\u7cfb\u7edf\uff0c\u5728\u6e90\u4ee3\u7801\u76ee\u5f55\u91cc\u4f60\u53ef\u4ee5 grep \u51fa\u8bb8\u591a\u5bf9\u8fd9\u4e2a\u51fd\u6570\u7684\u8c03\u7528\u3002\u8fd9\u91cc\u6211\u4eec\u8981\u8bf4\u7684\u662f\u7f51\u7edc\u5b50\u7cfb\u7edf\u7684\u521d\u59cb\u5316\uff0c\u4f1a\u6267\u884c\u5230 net_dev_init \u51fd\u6570\u3002 //file: net/core/dev.c static int __init net_dev_init(void){ ...... for_each_possible_cpu(i) { struct softnet_data *sd = &per_cpu(softnet_data, i); memset(sd, 0, sizeof(*sd)); skb_queue_head_init(&sd->input_pkt_queue); skb_queue_head_init(&sd->process_queue); sd->completion_queue = NULL; INIT_LIST_HEAD(&sd->poll_list); /*\u5c06poll_list\u6210\u5458\uff08\u8be5\u6210\u5458\u662f\u4e00\u4e2astruct list_head\uff09\u7684\u524d\u9a71\u548c\u540e\u7f6e\u90fd\u6307\u5411\u81ea\u5df1*/ ...... } ...... open_softirq(NET_TX_SOFTIRQ, net_tx_action); open_softirq(NET_RX_SOFTIRQ, net_rx_action); } subsys_initcall(net_dev_init); \u5728\u8fd9\u4e2a\u51fd\u6570\u91cc\uff0c\u4f1a\u4e3a \u6bcf\u4e2a CPU \u90fd\u7533\u8bf7\u4e00\u4e2a softnet_data \u6570\u636e\u7ed3\u6784 \uff0c\u5728\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u91cc\u7684 poll_list \u662f\u7b49\u5f85\u9a71\u52a8\u7a0b\u5e8f\u5c06\u5176 poll \u51fd\u6570\u6ce8\u518c\u8fdb\u6765\uff0c\u7a0d\u540e\u7f51\u5361\u9a71\u52a8\u521d\u59cb\u5316\u7684\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8fd9\u4e00\u8fc7\u7a0b\u3002 \u6838\u5fc3\u6210\u5458: poll_list. \u662f\u4ec0\u4e48\u539f\u7406\u5462, \u8fd9\u91cc\u5c31\u662f\u4e00\u4e2a poll \u51fd\u6570\u94fe\u8868. \u6bcf\u6b21\u7f51\u5361\u6709\u6570\u636e\u6765\u65f6, \u786c\u4e2d\u65ad\u628a\u81ea\u5df1\u7684 poll \u51fd\u6570\u653e\u5230\u8fd9\u4e2a\u94fe\u8868\u91cc\u6765. \u662f\u4e00\u4e2a\u94fe\u8868\uff0c\u540e\u7eed\u5c06 struct napi_struct \u52a0\u5165 softnet_data \u7ed3\u6784\u4e2d poll_list \u94fe\u8868\u91cc\u6765\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7 softnet_data \u7684 poll_list \u94fe\u8868\u904d\u5386\u6240\u6709\u7684 napi_struct \u5b9e\u4f8b\uff0c\u6bcf\u4e2a napi_struct \u5b9e\u4f8b\u5176\u5b9e\u5305\u542b\u4e86\u7279\u5b9a\u4e8e \u7f51\u5361 \u7684 poll \u51fd\u6570\uff0c\u540e\u7eed\u8c03\u7528 napi_struct \u7684 poll \u51fd\u6570\u5176\u5b9e\u5c31\u662f\u8c03\u7528 \u7f51\u5361 \u7684 poll \u51fd\u6570. \u5e76\u4e14\u8fd9\u91cc\u8bf4\u7684 \u7f51\u5361 , \u6bd4\u5982\u662f igb \u7f51\u5361\uff0c\u90a3\u4e48\u5176\u5b9e\u6307\u7684\u662f struct igb_q_vector \u7ed3\u6784\uff0c\u8be5\u7ed3\u6784\u8868\u793a igb \u7f51\u5361\u7684\u4e00\u4e2a\u961f\u5217,\u6bcf\u4e2a igb \u7f51\u5361\u53ef\u4ee5\u6709 8 \u4e2a\u961f\u5217\uff0c\u6bcf\u4e2a\u961f\u5217\u5bf9\u5e94\u4e00\u4e2a\u771f\u5b9e\u7684\u786c\u4e2d\u65ad\u53f7. list_add_tail(&napi->poll_list, &sd->poll_list); \u4e5f\u5c31\u662f\u8bf4\u5f85\u4f1a\u513f\u5185\u6838\u8dd1\u8f6f\u4e2d\u65ad\u65f6,\u8981\u6267\u884c\u6211\u7684poll\u51fd\u6570(\u8fd9\u91cc\u6211\u5c31\u662f\u4e00\u5f20\u7f51\u5361) \u8f6f\u4e2d\u65ad\u9636\u6bb5: static void net_rx_action(struct softirq_action *h){ struct softnet_data *sd = &__get_cpu_var(softnet_data); unsigned long time_limit = jiffies + 2; int budget = netdev_budget; void *have; local_irq_disable(); while (!list_empty(&sd->poll_list)) { ...... n = list_first_entry(&sd->poll_list, struct napi_struct, poll_list); work = 0; if (test_bit(NAPI_STATE_SCHED, &n->state)) { work = n->poll(n, weight); trace_napi_poll(n); } budget -= work; } } \u7b80\u5355\u7406\u89e3\u5c31\u662f\u5728\u8dd1\u7279\u5b9a\u4e8e\u7f51\u5361\u7684poll\u51fd\u6570. softnet_data 2 struct net_protocol \u4ee3\u8868\u4e00\u4e2a\u4f20\u8f93\u5c42\u534f\u8bae\uff0c\u6bd4\u5982 tcp\u3001udp static const struct net_protocol tcp_protocol = { .early_demux = tcp_v4_early_demux, .handler = tcp_v4_rcv, .err_handler = tcp_v4_err, .no_policy = 1, .netns_ok = 1, }; static const struct net_protocol udp_protocol = { .handler = udp_rcv, .err_handler = udp_err, .no_policy = 1, .netns_ok = 1 }; 2.1 inet_protos[MAX_INET_PROTOS] \u6570\u7ec4 inet_protos \u662f\u4e00\u4e2a\u5168\u5c40\u7684\u6307\u9488\u6570\u7ec4, \u5b58\u6709\u6240\u6709 net_protocol const struct net_protocol __rcu *inet_protos[MAX_INET_PROTOS] __read_mostly; \u5176\u4e2d MAX_INET_PROTOS \u4e3a 256 include/net/protocol.h:38:#define MAX_INET_PROTOS 256 2.2 ptype_base \u54c8\u5e0c\u8868 net/core/dev.c:146:struct list_head ptype_base[PTYPE_HASH_SIZE] __read_mostly; #define PTYPE_HASH_SIZE (16) 3 struct net \u7f51\u7edc\u547d\u540d\u7a7a\u95f4 struct net \u7ed3\u6784\u4f53\u8868\u793a\u7684\u5185\u6838\u4e2d\u7684\u7f51\u7edc\u547d\u540d\u7a7a\u95f4(net_namespace)\u3002\u5728 linux \u5185\u6838\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u7f51\u7edc\u8bbe\u5907(struct net_device)\u90fd\u6709\u4e00\u4e2a\u6240\u5c5e\u7684\u7f51\u7edc\u547d\u540d\u7a7a\u95f4 \u7f51\u7edc\u7cfb\u7edf\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u4f1a\u521d\u59cb\u5316\u4e00\u4e2a\u521d\u59cb\u7f51\u7edc\u547d\u540d\u7a7a\u95f4\uff0c\u5373 init_net \u547d\u540d\u7a7a\u95f4\u3002\u540e\u7eed\u521b\u5efa\u7684 net namespace \u547d\u540d\u7a7a\u95f4\u4f1a\u548c init_net \u4e00\u8d77\u901a\u8fc7 list \u9879\u7ec4\u7ec7\u8d77\u6765\uff0c\u4e14\u6bcf\u4e2a\u7f51\u7edc\u8bbe\u5907\u90fd\u5bf9\u5e94\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\uff0c\u540c\u4e00\u547d\u540d\u7a7a\u95f4\u4e0b\u7684\u7f51\u7edc\u8bbe\u5907\u901a\u8fc7 dev_base_head \u7ec4\u7ec7\u5728\u4e00\u8d77\u3002\u7ec4\u7ec7\u7ed3\u6784\u5982\u4e0b: struct net \u5185\u7684\u4e00\u4e9b\u91cd\u8981\u6210\u5458\uff1a struct net_device *loopback_dev; 4 struct net_device \u5185\u6838\u5c42\u9762\u63cf\u8ff0\u4e00\u5f20\u7f51\u5361 \u6bcf\u4e2a struct net, \u90fd\u81f3\u5c11\u6709\u4e00\u4e2a\u73af\u56de\u63a5\u53e3 lo, \u8be5\u63a5\u53e3\u5c31\u662f\u7528 struct net_device \u8868\u793a \u5728 linux \u4e2d\u4f7f\u7528 struct net_device \u7ed3\u6784\u4f53\u6765\u63cf\u8ff0\u6bcf\u4e00\u4e2a\u7f51\u7edc\u8bbe\u5907\u3002\u540c\u65f6\u8fd9\u4e2a\u7528\u6765\u523b\u753b\u7f51\u7edc\u8bbe\u5907\u7684 struct net_device \u7ed3\u6784\u4f53\u5305\u542b\u7684\u5b57\u6bb5\u975e\u5e38\u7684\u591a\uff0c\u4ee5\u81f3\u4e8e\u5185\u6838\u7684\u5f00\u53d1\u8005\u90fd\u89c9\u5f97\u5728\u73b0\u5728\u7684 linux \u5185\u6838\u4e2d\uff0c\u8fd9\u4e2a struct net_device \u662f\u4e00\u4e2a\u5927\u7684\u9519\u8bef\u3002 \u5e76\u4e14\u6ce8\u518c net_device( register_netdev(struct net_device *dev) )\u662f\u6ce8\u518c\u5230\u4e00\u4e2a\u94fe\u8868\u4e2d struct net_device can be conceptually divided into two parts: visible and invisible. net_device \u7ed3\u6784\u4f53(\u6709\u4f17\u591a\u6210\u5458\uff0c\u603b\u4f53\u6765\u8bf4\u6210\u5458)\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a \u53ef\u89c1\u548c\u4e0d\u53ef\u89c1. \u5185\u6838\u4f7f\u7528 net_device \u8868\u793a\u7f51\u5361\u3002\u7f51\u5361\u53ef\u4ee5\u5206\u4e3a \u7269\u7406\u7f51\u5361 \u548c \u865a\u62df\u7f51\u5361 \u3002\u7269\u7406\u7f51\u5361\u662f\u6307\u771f\u6b63\u80fd\u628a\u62a5\u6587\u53d1\u51fa\u672c\u673a\u7684\u7f51\u5361\uff0c\u5305\u62ec\u771f\u5b9e\u7269\u7406\u673a\u7684\u7f51\u5361\u4ee5\u53ca VM \u865a\u62df\u673a\u7684\u7f51\u5361\uff0c\u800c\u50cf tun/tap\uff0cvxlan\u3001veth pair \u8fd9\u6837\u7684\u5219\u5c5e\u4e8e\u865a\u62df\u7f51\u5361\u7684\u8303\u7574\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff0c \u6bcf\u4e2a\u7f51\u5361\u90fd\u6709\u4e24\u7aef \uff0c\u4e00\u7aef\u662f\u534f\u8bae\u6808(IP\u3001TCP\u3001UDP)\uff0c\u53e6\u4e00\u7aef\u5219\u6709\u6240\u533a\u522b\uff0c\u5bf9\u7269\u7406\u7f51\u5361\u6765\u8bf4\uff0c\u8fd9\u4e00\u7aef\u662f\u7f51\u5361\u751f\u4ea7\u5382\u5546\u63d0\u4f9b\u7684\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\uff0c\u800c\u5bf9\u865a\u62df\u7f51\u5361\u6765\u8bf4\u5dee\u522b\u5c31\u5927\u4e86\uff0c\u6b63\u662f\u7531\u4e8e\u865a\u62df\u7f51\u5361\u7684\u5b58\u5728\uff0c\u5185\u6838\u624d\u80fd\u652f\u6301\u5404\u79cd\u96a7\u9053\u5c01\u88c5\u3001\u5bb9\u5668\u901a\u4fe1\u7b49\u529f\u80fd\u3002 net_device \u6e90\u7801\u5982\u4e0b: struct net_device { /* * This is the first field of the \"visible\" part of this structure * (i.e. as seen by users in the \"Space.c\" file). It is the name * of the interface. */ char name[IFNAMSIZ]; /* device name hash chain, please keep it close to name[] */ struct hlist_node name_hlist; /* snmp alias */ char *ifalias; /* * I/O specific fields * FIXME: Merge these and struct ifmap into one */ unsigned long mem_end; /* shared mem end */ unsigned long mem_start; /* shared mem start */ unsigned long base_addr; /* device I/O address */ int irq; /* device IRQ number */ /* * Some hardware also needs these fields, but they are not * part of the usual set specified in Space.c. */ unsigned long state; struct list_head dev_list; struct list_head napi_list; struct list_head unreg_list; struct list_head close_list; /* directly linked devices, like slaves for bonding */ struct { struct list_head upper; struct list_head lower; } adj_list; /* all linked devices, *including* neighbours */ struct { struct list_head upper; struct list_head lower; } all_adj_list; /* currently active device features */ netdev_features_t features; /* user-changeable features */ netdev_features_t hw_features; /* user-requested features */ netdev_features_t wanted_features; /* mask of features inheritable by VLAN devices */ netdev_features_t vlan_features; /* mask of features inherited by encapsulating devices * This field indicates what encapsulation offloads * the hardware is capable of doing, and drivers will * need to set them appropriately. */ netdev_features_t hw_enc_features; /* mask of fetures inheritable by MPLS */ netdev_features_t mpls_features; /* Interface index. Unique device identifier */ int ifindex; int iflink; struct net_device_stats stats; /* dropped packets by core network, Do not use this in drivers */ atomic_long_t rx_dropped; atomic_long_t tx_dropped; /* Stats to monitor carrier on<->off transitions */ atomic_t carrier_changes; #ifdef CONFIG_WIRELESS_EXT /* List of functions to handle Wireless Extensions (instead of ioctl). * See <net/iw_handler.h> for details. Jean II */ const struct iw_handler_def * wireless_handlers; /* Instance data managed by the core of Wireless Extensions. */ struct iw_public_data * wireless_data; #endif /* Management operations */ const struct net_device_ops *netdev_ops; const struct ethtool_ops *ethtool_ops; const struct forwarding_accel_ops *fwd_ops; /* Hardware header description */ const struct header_ops *header_ops; unsigned int flags; /* interface flags (a la BSD) */ unsigned int priv_flags; /* Like 'flags' but invisible to userspace. * See if.h for definitions. */ unsigned short gflags; unsigned short padded; /* How much padding added by alloc_netdev() */ unsigned char operstate; /* RFC2863 operstate */ unsigned char link_mode; /* mapping policy to operstate */ unsigned char if_port; /* Selectable AUI, TP,..*/ unsigned char dma; /* DMA channel */ unsigned int mtu; /* interface MTU value */ unsigned short type; /* interface hardware type */ unsigned short hard_header_len; /* hardware hdr length */ /* extra head- and tailroom the hardware may need, but not in all cases * can this be guaranteed, especially tailroom. Some cases also use * LL_MAX_HEADER instead to allocate the skb. */ unsigned short needed_headroom; unsigned short needed_tailroom; /* Interface address info. */ unsigned char perm_addr[MAX_ADDR_LEN]; /* permanent hw address */ unsigned char addr_assign_type; /* hw address assignment type */ unsigned char addr_len; /* hardware address length */ unsigned short neigh_priv_len; unsigned short dev_id; /* Used to differentiate devices * that share the same link * layer address */ unsigned short dev_port; /* Used to differentiate * devices that share the same * function */ spinlock_t addr_list_lock; struct netdev_hw_addr_list uc; /* Unicast mac addresses */ struct netdev_hw_addr_list mc; /* Multicast mac addresses */ struct netdev_hw_addr_list dev_addrs; /* list of device * hw addresses */ #ifdef CONFIG_SYSFS struct kset *queues_kset; #endif bool uc_promisc; unsigned int promiscuity; unsigned int allmulti; /* Protocol specific pointers */ #if IS_ENABLED(CONFIG_VLAN_8021Q) struct vlan_info __rcu *vlan_info; /* VLAN info */ #endif #if IS_ENABLED(CONFIG_NET_DSA) struct dsa_switch_tree *dsa_ptr; /* dsa specific data */ #endif #if IS_ENABLED(CONFIG_TIPC) struct tipc_bearer __rcu *tipc_ptr; /* TIPC specific data */ #endif void *atalk_ptr; /* AppleTalk link */ struct in_device __rcu *ip_ptr; /* IPv4 specific data \u5728\u8fd9\u4e2a\u7ed3\u6784\u4f53\u4e2d\u5b58\u653eipv4\u5730\u5740*/ struct dn_dev __rcu *dn_ptr; /* DECnet specific data */ struct inet6_dev __rcu *ip6_ptr; /* IPv6 specific data */ void *ax25_ptr; /* AX.25 specific data */ struct wireless_dev *ieee80211_ptr; /* IEEE 802.11 specific data, assign before registering */ /* * Cache lines mostly used on receive path (including eth_type_trans()) */ unsigned long last_rx; /* Time of last Rx */ /* Interface address info used in eth_type_trans() */ unsigned char *dev_addr; /* hw address, (before bcast because most packets are unicast) */ #ifdef CONFIG_SYSFS struct netdev_rx_queue *_rx; /* Number of RX queues allocated at register_netdev() time */ unsigned int num_rx_queues; /* Number of RX queues currently active in device */ unsigned int real_num_rx_queues; #endif rx_handler_func_t __rcu *rx_handler; void __rcu *rx_handler_data; struct netdev_queue __rcu *ingress_queue; unsigned char broadcast[MAX_ADDR_LEN]; /* hw bcast add */ /* * Cache lines mostly used on transmit path */ struct netdev_queue *_tx ____cacheline_aligned_in_smp; /* Number of TX queues allocated at alloc_netdev_mq() time */ unsigned int num_tx_queues; /* Number of TX queues currently active in device */ unsigned int real_num_tx_queues; /* root qdisc from userspace point of view */ struct Qdisc *qdisc; unsigned long tx_queue_len; /* Max frames per queue allowed */ spinlock_t tx_global_lock; #ifdef CONFIG_XPS struct xps_dev_maps __rcu *xps_maps; #endif #ifdef CONFIG_RFS_ACCEL /* CPU reverse-mapping for RX completion interrupts, indexed * by RX queue number. Assigned by driver. This must only be * set if the ndo_rx_flow_steer operation is defined. */ struct cpu_rmap *rx_cpu_rmap; #endif /* These may be needed for future network-power-down code. */ /* * trans_start here is expensive for high speed devices on SMP, * please use netdev_queue->trans_start instead. */ unsigned long trans_start; /* Time (in jiffies) of last Tx */ int watchdog_timeo; /* used by dev_watchdog() */ struct timer_list watchdog_timer; /* Number of references to this device */ int __percpu *pcpu_refcnt; /* delayed register/unregister */ struct list_head todo_list; /* device index hash chain */ struct hlist_node index_hlist; struct list_head link_watch_list; /* register/unregister state machine */ enum { NETREG_UNINITIALIZED=0, NETREG_REGISTERED, /* completed register_netdevice */ NETREG_UNREGISTERING, /* called unregister_netdevice */ NETREG_UNREGISTERED, /* completed unregister todo */ NETREG_RELEASED, /* called free_netdev */ NETREG_DUMMY, /* dummy device for NAPI poll */ } reg_state:8; bool dismantle; /* device is going do be freed */ enum { RTNL_LINK_INITIALIZED, RTNL_LINK_INITIALIZING, } rtnl_link_state:16; /* Called from unregister, can be used to call free_netdev */ void (*destructor)(struct net_device *dev); #ifdef CONFIG_NETPOLL struct netpoll_info __rcu *npinfo; #endif #ifdef CONFIG_NET_NS /* Network namespace this network device is inside */ struct net *nd_net; #endif /* mid-layer private */ union { void *ml_priv; struct pcpu_lstats __percpu *lstats; /* loopback stats */ struct pcpu_sw_netstats __percpu *tstats; struct pcpu_dstats __percpu *dstats; /* dummy stats */ struct pcpu_vstats __percpu *vstats; /* veth stats */ }; /* GARP */ struct garp_port __rcu *garp_port; /* MRP */ struct mrp_port __rcu *mrp_port; /* class/net/name entry */ struct device dev; /* space for optional device, statistics, and wireless sysfs groups */ const struct attribute_group *sysfs_groups[4]; /* space for optional per-rx queue attributes */ const struct attribute_group *sysfs_rx_queue_group; /* rtnetlink link ops */ const struct rtnl_link_ops *rtnl_link_ops; /* for setting kernel sock attribute on TCP connection setup */ #define GSO_MAX_SIZE 65536 unsigned int gso_max_size; #define GSO_MAX_SEGS 65535 u16 gso_max_segs; #ifdef CONFIG_DCB /* Data Center Bridging netlink ops */ const struct dcbnl_rtnl_ops *dcbnl_ops; #endif u8 num_tc; struct netdev_tc_txq tc_to_txq[TC_MAX_QUEUE]; u8 prio_tc_map[TC_BITMASK + 1]; #if IS_ENABLED(CONFIG_FCOE) /* max exchange id for FCoE LRO by ddp */ unsigned int fcoe_ddp_xid; #endif #if IS_ENABLED(CONFIG_CGROUP_NET_PRIO) struct netprio_map __rcu *priomap; #endif /* phy device may attach itself for hardware timestamping */ struct phy_device *phydev; struct lock_class_key *qdisc_tx_busylock; /* group the device belongs to */ int group; struct pm_qos_request pm_qos_req; }; 4.1 ptype_base \u548c ptype_all ptype_base \u4e3a\u4e00\u4e2a hash \u8868,\u800c ptype_all \u4e3a\u4e00\u4e2a\u53cc\u5411\u94fe\u8868.\u6bcf\u4e00\u4e2a\u91cc\u9762\u6ce8\u518c\u7684\u534f\u8bae\u90fd\u7528\u4e00\u4e2a struct packet_type \u8868\u793a. packet_type \u6570\u636e\u7ed3\u6784\u5305\u542b\u534f\u8bae\u7c7b\u578b\u3001\u6307\u5411\u7f51\u7edc\u8bbe\u5907\u7684\u6307\u9488\u3001\u6307\u5411\u534f\u8bae\u7684\u63a5\u6536\u6570\u636e\u5904\u7406\u4f8b\u7a0b\u7684\u6307\u9488, \u5982\u4e0b\uff1a struct packet_type { unsigned short type; /*\u534f\u8bae\u7c7b\u578b*/ struct net_device *dev; int (*func) (struct sk_buff *, struct net_device *, struct packet_type *); void *data; /* Private to the packet type */ struct packet_type *next; }; func \u662f\u8be5\u7ed3\u6784\u4f53\u4e3b\u8981\u6210\u5458\uff0c\u6307\u5411\u7f51\u7edc\u5c42\u7684\u4e00\u4e2a\u51fd\u6570\u3002\u5982\u679c\u5206\u7ec4\u7684\u7c7b\u578b\u9002\u5f53\uff0c\u5c31\u5c06\u5176\u4f20\u7ed9\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570\uff0c\u5176\u4e2d ip \u5305\u7684\u5904\u7406\u51fd\u6570\u5c31\u662f ip_rcv . netif_receive_skb() \u51fd\u6570\uff0c\u904d\u5386 ptype_all \u94fe\u8868\uff0c\u627e\u5230\u5408\u9002\u7684 packet_type , \u7136\u540e\u8c03\u7528\u5176 func \u6307\u9488\u6307\u5411\u7684\u5904\u7406\u51fd\u6570(\u6bd4\u5982 ip_rcv() ) 4.2 struct in_device \uff08IP \u914d\u7f6e\u5757\uff09 struct in_device { struct net_device *dev; // \u56de\u6307\u7f51\u7edc\u8bbe\u5907 atomic_t refcnt; // \u5f53\u4e00\u4e2aIP\u914d\u7f6e\u5757\u5c06\u8981\u88ab\u9500\u6bc1\u65f6\uff0c\u5148\u8bbe\u7f6e\u8be5\u6807\u8bb0\u4e3a1\uff0c\u5f53\u5f15\u7528\u8ba1\u6570\u4e3a0\u65f6\u518d\u6267\u884c\u5185\u5b58\u56de\u6536 int dead; // \u6bcf\u4e2a\u7f51\u7edc\u8bbe\u5907\u53ef\u4ee5\u914d\u7f6e\u591a\u4e2aIP\u5730\u5740\uff0c\u6240\u4ee5\u662f\u5217\u8868 struct in_ifaddr *ifa_list; /* IP ifaddr chain */ // \u591a\u64ad\u76f8\u5173\u7684\u7ed3\u6784 rwlock_t mc_list_lock; struct ip_mc_list *mc_list; /* IP multicast filter chain */ spinlock_t mc_tomb_lock; struct ip_mc_list *mc_tomb; unsigned long mr_v1_seen; unsigned long mr_v2_seen; unsigned long mr_maxdelay; unsigned char mr_qrv; unsigned char mr_gq_running; unsigned char mr_ifc_count; struct timer_list mr_gq_timer; /* general query timer */ struct timer_list mr_ifc_timer; /* interface change timer */ // \u7f51\u7edc\u8bbe\u5907\u5b9a\u4e49\u7684\u90bb\u5c45\u5b50\u7cfb\u7edf\u914d\u7f6e\u53c2\u6570 struct neigh_parms *arp_parms; // \u5f71\u54cd\u8be5\u7f51\u7edc\u8bbe\u5907\u7684IP\u7cfb\u7edf\u914d\u7f6e struct ipv4_devconf cnf; // \u4f7f\u7528RCU\u673a\u5236\u56de\u6536IP\u914d\u7f6e\u5757 struct rcu_head rcu_head; }; 4.3 struct in_ifaddr \uff08IPv4 \u5730\u5740\uff09 struct in_ifaddr { struct in_ifaddr *ifa_next; // \u540c\u4e00\u4e2a\u7f51\u7edc\u8bbe\u5907\u4e0a\u914d\u7f6e\u7684IP\u5730\u5740\u7ec4\u6210\u6210\u94fe\u8868 struct in_device *ifa_dev; // \u56de\u6307\u7f51\u7edc\u8bbe\u5907 struct rcu_head rcu_head; // \u4f7f\u7528RCU\u4fdd\u62a4\u672cIP\u5730\u5740\u7684\u4fee\u6539 // \u5bf9\u4e8e\u652f\u6301\u5e7f\u64ad\u7684\u7f51\u7edc\uff0cifa_local\u548cifa_address\u4e00\u6837\u4fdd\u5b58\u7684\u90fd\u662f\u672c\u7aef\u5730\u5740\uff1b // \u5bf9\u4e8e\u70b9\u5bf9\u70b9\u7f51\u7edc\uff0cifa_address\u4fdd\u5b58\u7684\u662f\u5bf9\u7aefIP\u5730\u5740 __be32 ifa_local; __be32 ifa_address; __be32 ifa_mask; // \u5b50\u7f51\u63a9\u7801 __be32 ifa_broadcast; // \u5e7f\u64ad\u5730\u5740 __be32 ifa_anycast; unsigned char ifa_scope; // IP\u5730\u5740\u4f5c\u7528\u57df\uff0c\u89c1\u4e0b\u6587 unsigned char ifa_flags; unsigned char ifa_prefixlen; // \u5b50\u7f51\u63a9\u7801\u957f\u5ea6 char ifa_label[IFNAMSIZ]; // \u7f51\u7edc\u5730\u5740\u522b\u540d }; \u53c2\u8003 linux \u5185\u6838\u534f\u8bae\u6808 IP \u5730\u5740\u6570\u636e\u7ed3\u6784 5 struct net_device_ops \u6bcf\u4e2a net_device \u5177\u5907\u7684\u4e00\u4e9b\u80fd\u529b, \u6bd4\u5982 open,read,write,poll,ioctl \u7b49 net_device_ops \u6838\u5fc3\u63cf\u8ff0\u7b26\u5185\u5305\u542b\u4e86\u9a71\u52a8\u7a0b\u5e8f\u586b\u5145\u7684\u5404\u7c7b\u51fd\u6570, \u5305\u62ec\u53d1\u9001\u3001\u63a5\u6536\u6570\u636e\u5305 \u4ee5 net/ethernet/intel/igb/igb_main.c (igb \u7f51\u5361\u9a71\u52a8) \u4e3a\u4f8b\u5b50, \u5305\u542b\u4e86 open , close , xmit , ioctl \u7b49\u5404\u79cd\u5b9e\u73b0 /file: drivers/net/ethernet/intel/igb/igb_main.c static const struct net_device_ops igb_netdev_ops = { .ndo_open = igb_open, .ndo_stop = igb_close, .ndo_start_xmit = igb_xmit_frame, .ndo_get_stats64 = igb_get_stats64, .ndo_set_rx_mode = igb_set_rx_mode, .ndo_set_mac_address = igb_set_mac, .ndo_change_mtu = igb_change_mtu, .ndo_do_ioctl = igb_ioctl, .ndo_tx_timeout = igb_tx_timeout, .ndo_validate_addr = eth_validate_addr, .ndo_vlan_rx_add_vid = igb_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = igb_vlan_rx_kill_vid, .ndo_set_vf_mac = igb_ndo_set_vf_mac, .ndo_set_vf_vlan = igb_ndo_set_vf_vlan, .ndo_set_vf_rate = igb_ndo_set_vf_bw, .ndo_set_vf_spoofchk = igb_ndo_set_vf_spoofchk, .ndo_get_vf_config = igb_ndo_get_vf_config, #ifdef CONFIG_NET_POLL_CONTROLLER .ndo_poll_controller = igb_netpoll, #endif .ndo_fix_features = igb_fix_features, .ndo_set_features = igb_set_features, }; 5.1 struct ethtool_ops \u4ee5 net/ethernet/intel/igb/igb_ethool.c \u4e3a\u4f8b\uff0c\u8fd9\u91cc\u6ce8\u518c\u4e86 igb \u7f51\u5361\u5bf9 ethool \u7684\u652f\u6301. static const struct ethtool_ops igb_ethtool_ops = { .get_settings = igb_get_settings, .set_settings = igb_set_settings, .get_drvinfo = igb_get_drvinfo, .get_regs_len = igb_get_regs_len, .get_regs = igb_get_regs, .get_wol = igb_get_wol, .set_wol = igb_set_wol, .get_msglevel = igb_get_msglevel, .set_msglevel = igb_set_msglevel, .nway_reset = igb_nway_reset, .get_link = igb_get_link, .get_eeprom_len = igb_get_eeprom_len, .get_eeprom = igb_get_eeprom, .set_eeprom = igb_set_eeprom, .get_ringparam = igb_get_ringparam, .set_ringparam = igb_set_ringparam, .get_pauseparam = igb_get_pauseparam, .set_pauseparam = igb_set_pauseparam, .self_test = igb_diag_test, .get_strings = igb_get_strings, .set_phys_id = igb_set_phys_id, .get_sset_count = igb_get_sset_count, .get_ethtool_stats = igb_get_ethtool_stats, .get_coalesce = igb_get_coalesce, .set_coalesce = igb_set_coalesce, .get_ts_info = igb_get_ts_info, .get_rxnfc = igb_get_rxnfc, .set_rxnfc = igb_set_rxnfc, .get_eee = igb_get_eee, .set_eee = igb_set_eee, .get_module_info = igb_get_module_info, .get_module_eeprom = igb_get_module_eeprom, .get_rxfh_indir_size = igb_get_rxfh_indir_size, .get_rxfh = igb_get_rxfh, .set_rxfh = igb_set_rxfh, .get_channels = igb_get_channels, .set_channels = igb_set_channels, .begin = igb_ethtool_begin, .complete = igb_ethtool_complete, }; void igb_set_ethtool_ops(struct net_device *netdev) { netdev->ethtool_ops = &igb_ethtool_ops; } 6 struct napi_struct struct napi_struct { /* The poll_list must only be managed by the entity which * changes the state of the NAPI_STATE_SCHED bit. This means * whoever atomically sets that bit can add this napi_struct * to the per-cpu poll_list, and whoever clears that bit * can remove from the list right before clearing the bit. */ struct list_head poll_list; unsigned long state; // state \u53ef\u4ee5\u662f NAPI_STATE_SCHED \u6216 NAPI_STATE_DISABLE\uff0c\u524d\u8005\u8868\u793a\u8bbe\u5907\u5c06\u5728\u5185\u6838\u7684\u4e0b\u4e00\u6b21\u5faa\u73af\u65f6\u88ab\u8f6e\u8be2\uff0c\u540e\u8005\u8868\u793a\u8f6e\u8be2\u5df1\u7ecf\u7ed3\u675f\u4e14\u6ca1\u6709\u66f4\u591a\u7684\u5206\u7ec4\u7b49\u5f85\u5904\u7406\uff0c\u4f46\u8bbe\u5907\u5c1a\u672a\u4ece\u8f6e\u8be2\u8868\u79fb\u9664\u3002 int weight; unsigned int gro_count; int (*poll)(struct napi_struct *, int); //\u6838\u5fc3\u6210\u5458, \u7279\u5b9a\u4e8e\u786c\u4ef6\u7684poll\u51fd\u6570 #ifdef CONFIG_NETPOLL spinlock_t poll_lock; int poll_owner; #endif struct net_device *dev; struct sk_buff *gro_list; struct sk_buff *skb; struct list_head dev_list; struct hlist_node napi_hash_node; unsigned int napi_id; }; struct napi_struct \u8be5\u7ed3\u6784\u7528\u4e8e\u7ba1\u7406\u8f6e\u8be2\u8868\u4e0a\u7684\u8bbe\u5907\u3002\u5176\u5b9a\u4e49\u5982\u4e0b: <netdevice.h> struct napi_struct { struct list_head poll_list; unsigned long state; int weight; int (*poll) (struct napi_struct *, int) }; \u8f6e\u8be2\u8868\u901a\u8fc7\u4e00\u4e2a\u6807\u51c6\u7684\u5185\u6838\u53cc\u94fe\u8868\u5b9e\u73b0\uff0cpoll_list \u7528\u4f5c\u94fe\u8868\u5143\u7d20\u3002weight \u548c poll \u7684\u8bed\u4e49\u540c\u4e0a\u6587 \u6240\u8ff0\u3002state \u53ef\u4ee5\u662f NAPI_STATE_SCHED \u6216 NAPI_STATE_DISABLE\uff0c\u524d\u8005\u8868\u793a\u8bbe\u5907\u5c06\u5728\u5185\u6838\u7684\u4e0b\u4e00\u6b21\u5faa\u73af\u65f6\u88ab\u8f6e\u8be2\uff0c\u540e\u8005\u8868\u793a\u8f6e\u8be2\u5df1\u7ecf\u7ed3\u675f\u4e14\u6ca1\u6709\u66f4\u591a\u7684\u5206\u7ec4\u7b49\u5f85\u5904\u7406\uff0c\u4f46\u8bbe\u5907\u5c1a\u672a\u4ece\u8f6e\u8be2\u8868\u79fb\u9664\u3002 \u8bf7\u6ce8\u610f\uff0c struct napi_struct \u7ecf\u5e38\u5d4c\u5165\u5230 \u4e00\u4e2a\u66f4\u5927\u7684\u7ed3\u6784\u4e2d\uff0c\u540e\u8005\u5305\u542b\u4e86\u4e0e\u7f51\u5361\u6709\u5173\u7684\u3001\u7279\u5b9a \u624b\u9a71 \u52a8 \u7a08 \u5e8f \u7684 \u6570 \u636e \u3002 \u8fd9 \u6837 \u5728 \u5185 \u6838 \u4f7f \u7528 poll \u51fd\u6570 \u8f6e \u8be2 \u7f51 \u5361 \u65f6 \uff0c \u53ef \u7528 container_of \u673a \u5236 \u83b7 \u5f97 \u76f8 \u5173 \u4fe1 \u606f \u3002 \u5b9e\u73b0 poll \u51fd\u6570\u9700\u8981\u4e24\u4e2a\u53c3\u6570:\u4e00\u4e2a\u6307\u5411 napi_struct \u5b9e\u4f8b\u7684\u6307\u9488\u548c\u4e00\u4e2a\u6307\u5b9a\u4e86\u201c\u9884\u7b97\u201d \u7684\u6574\u6570\uff0c\u9884\u7b97 \u8868\u793a\u5185\u6838\u5141\u8bb8\u9a71\u52a8\u7a0b\u5e8f\u5904\u7406\u7684\u5206\u7ec4\u6570\u76ee\u3002 7 sk_buff \u7ed3\u6784\u4f53 sk_buff \u662f Linux \u7f51\u7edc\u4e2d\u6700\u6838\u5fc3\u7684\u7ed3\u6784\u4f53\uff0c\u5b83\u7528\u6765\u7ba1\u7406\u548c\u63a7\u5236\u63a5\u6536\u6216\u53d1\u9001\u6570\u636e\u5305\u7684\u4fe1\u606f\u3002 \u5404\u5c42\u534f\u8bae\u90fd\u4f9d\u8d56\u4e8e sk_buff \u800c\u5b58\u5728\u3002 struct sk_buff \u662f linux \u7f51\u7edc\u7cfb\u7edf\u4e2d\u7684\u6838\u5fc3\u7ed3\u6784\u4f53\uff0clinux \u7f51\u7edc\u4e2d\u7684\u6240\u6709\u6570\u636e\u5305\u7684\u5c01\u88c5\u4ee5\u53ca\u89e3\u5c01\u88c5\u90fd\u662f\u5728\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u3002 \u5185\u6838\u4e2d sk_buff \u7ed3\u6784\u4f53\u5728\u5404\u5c42\u534f\u8bae\u4e4b\u95f4\u4f20\u8f93\u4e0d\u662f\u7528\u62f7\u8d1d sk_buff \u7ed3\u6784\u4f53\uff0c\u800c\u662f\u901a\u8fc7\u589e\u52a0\u534f\u8bae\u5934\u548c\u79fb\u52a8\u6307\u9488\u6765\u64cd\u4f5c\u7684\u3002 \u5982\u679c\u662f\u4ece L4 \u4f20\u8f93\u5230 L2\uff0c\u5219\u662f\u901a\u8fc7\u5f80 sk_buff \u7ed3\u6784\u4f53\u4e2d\u589e\u52a0\u8be5\u5c42\u534f\u8bae\u5934\u6765\u64cd\u4f5c\uff1b\u5982\u679c\u662f\u4ece L4 \u5230 L2\uff0c\u5219\u662f\u901a\u8fc7\u79fb\u52a8 sk_buff \u7ed3\u6784\u4f53\u4e2d\u7684 data \u6307\u9488\u6765\u5b9e\u73b0\uff0c\u4e0d\u4f1a\u5220\u9664\u5404\u5c42\u534f\u8bae\u5934\u3002\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u63d0\u9ad8 CPU \u7684\u5de5\u4f5c\u6548\u7387\u3002 7.1 \u8be6\u7ec6\u4ee3\u7801 include/linux/skbuff.h (sk_buff \u7ed3\u6784\u5b9a\u4e49\u548c sk_buff \u5b8f) struct sk_buff { /* These two members must be first. */ struct sk_buff *next; struct sk_buff *prev; struct sock *sk; struct skb_timeval tstamp; struct net_device *dev; struct net_device *input_dev; union { struct tcphdr *th; struct udphdr *uh; struct icmphdr *icmph; struct igmphdr *igmph; struct iphdr *ipiph; struct ipv6hdr *ipv6h; unsigned char *raw; } h; union { struct iphdr *iph; struct ipv6hdr *ipv6h; struct arphdr *arph; unsigned char *raw; } nh; union { unsigned char *raw; } mac; struct dst_entry *dst; struct sec_path *sp; ....// \u66f4\u591a\u6210\u5458 } struct sk_buff \u6210\u5458\u542b\u4e49 \u5185\u6838\u663e\u7136\u9700\u8981\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u8868\u793a\u62a5\u6587\uff0c\u8fd9\u4e2a\u7ed3\u6784\u5c31\u662f sk_buff ( socket buffer \u7684\u7b80\u79f0)\uff0c\u5b83\u7b49\u540c\u4e8e\u5728 <TCP/IP\u8be6\u89e3 \u53772> \u4e2d\u63cf\u8ff0\u7684 BSD \u5185\u6838\u4e2d\u7684 mbuf\u3002 sk_buff \u7ed3\u6784\u81ea\u8eab\u5e76\u4e0d\u5b58\u50a8\u62a5\u6587\u5185\u5bb9\uff0c\u5b83\u901a\u8fc7\u591a\u4e2a\u6307\u9488\u6307\u5411\u771f\u6b63\u7684\u62a5\u6587\u5185\u5b58\u7a7a\u95f4: sk_buff \u662f\u4e00\u4e2a\u8d2f\u7a7f\u6574\u4e2a\u534f\u8bae\u6808\u5c42\u6b21\u7684\u7ed3\u6784\uff0c\u5728\u5404\u5c42\u95f4\u4f20\u9012\u65f6\uff0c\u5185\u6838\u53ea\u9700\u8981\u8c03\u6574 sk_buff \u4e2d\u7684\u6307\u9488\u4f4d\u7f6e\u5c31\u884c\u3002 7.2 sk_buff_head \u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868 struct sk_buff_head { struct sk_buff *next; struct sk_buff *prev; __u32 qlen; spinlock_t lock; } struct sock \u4e2d\u7684 sk_write_queue \u6210\u5458, \u4ee3\u8868 \u53d1\u9001\u961f\u5217 , \u5c31\u662f\u4e00\u4e2a struct sk_buff_head . @sk_write_queue: Packet sending queue struct sock \u4e2d\u7684 sk_receive_queue \u6210\u5458, \u4ee3\u8868 \u63a5\u6536\u961f\u5217 , \u4e5f\u662f\u4e00\u4e2a struct sk_buff_head . @sk_receive_queue: incoming packets include/net/sock.h struct sock { ... struct sk_buff_head sk_write_queue; struct sk_buff_head sk_receive_queue; ... } 8 struct proto tcp_prot \u5728\u53d1\u9001\u6570\u636e\u4e4b\u524d\uff0c\u6211\u4eec\u5f80\u5f80\u8fd8\u9700\u8981\u4e00\u4e2a\u5df2\u7ecf\u5efa\u7acb\u597d\u8fde\u63a5\u7684 socket\u3002 \u6211\u4eec\u5c31\u4ee5\u5f00\u7bc7\u670d\u52a1\u5668\u7f29\u5fae\u6e90\u4ee3\u7801\u4e2d\u63d0\u5230\u7684 accept \u4e3a\u4f8b\uff0c\u5f53 accept \u4e4b\u540e\uff0c\u8fdb\u7a0b\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 socket \u51fa\u6765\uff0c\u7136\u540e\u628a\u5b83\u653e\u5230\u5f53\u524d\u8fdb\u7a0b\u7684\u6253\u5f00\u6587\u4ef6\u5217\u8868\u4e2d\uff0c\u4e13\u95e8\u7528\u4e8e\u548c\u5bf9\u5e94\u7684\u5ba2\u6237\u7aef\u901a\u4fe1\u3002 \u5047\u8bbe\u670d\u52a1\u5668\u8fdb\u7a0b\u901a\u8fc7 accept \u548c\u5ba2\u6237\u7aef\u5efa\u7acb\u4e86\u4e24\u6761\u8fde\u63a5\uff0c\u6211\u4eec\u6765\u7b80\u5355\u770b\u4e00\u4e0b\u8fd9\u4e24\u6761\u8fde\u63a5\u548c\u8fdb\u7a0b\u7684\u5173\u8054\u5173\u7cfb\u3002 \u5176\u4e2d\u4ee3\u8868\u4e00\u6761\u8fde\u63a5\u7684 socket \u5185\u6838\u5bf9\u8c61\u66f4\u4e3a\u5177\u4f53\u4e00\u70b9\u7684\u7ed3\u6784\u56fe\u5982\u4e0b\u3002 Linux \u5185\u6838\u7f51\u7edc\u5c42\u5b9e\u73b0\u65f6, \u603b\u662f\u5206\u4e3a\u4e09\u5c42: BSD socket \u5bf9\u8c61 inet \u534f\u8bae\u65cf \u5177\u4f53\u534f\u8bae,\u6bd4\u5982 tcp \u6309\u7167\u7ecf\u5178\u7684 \u63cf\u8ff0\u7b26 + ops \u601d\u60f3, \u5bf9\u5e94 inet socket \u7684\u64cd\u4f5c\u80fd\u529b\u662f\u7528\u7ed3\u6784\u4f53 struct proto_ops \u8868\u793a, \u6bd4\u5982 inet \u5c42\u4e00\u4e9b\u64cd\u4f5c\u662f\u7528 struct proto_ops inet_stream_ops \u7ed3\u6784\u4f53\u8868\u793a, \u5177\u4f53 \u534f\u8bae\u5c42 sock \u7684\u64cd\u4f5c\u80fd\u529b\u662f\u7528\u7ed3\u6784\u4f53 struct proto \u8868\u793a, \u6bd4\u5982 tcp \u5c42\u4e00\u4e9b\u64cd\u4f5c\u662f\u7528 struct proto tcp_prot \u7ed3\u6784\u4f53\u8868\u793a. struct proto udp_prot = { \u5b9a\u4e49\u5728 net/ipv4/udp.c:2650 struct proto tcp_prot = { \u5b9a\u4e49\u5728 net/ipv4/tcp_ipv4.c:2447 net/ipv4/tcp_ipv4.c struct proto tcp_prot = { .name = \"TCP\", .owner = THIS_MODULE, .close = tcp_close, .connect = tcp_v4_connect, .disconnect = tcp_disconnect, .accept = inet_csk_accept, .ioctl = tcp_ioctl, .init = tcp_v4_init_sock, .destroy = tcp_v4_destroy_sock, .shutdown = tcp_shutdown, .setsockopt = tcp_setsockopt, .getsockopt = tcp_getsockopt, .recvmsg = tcp_recvmsg, .sendmsg = tcp_sendmsg, .sendpage = tcp_sendpage, .backlog_rcv = tcp_v4_do_rcv, .release_cb = tcp_release_cb, .hash = inet_hash, .unhash = inet_unhash, .get_port = inet_csk_get_port, .enter_memory_pressure = tcp_enter_memory_pressure, .stream_memory_free = tcp_stream_memory_free, .sockets_allocated = &tcp_sockets_allocated, .orphan_count = &tcp_orphan_count, .memory_allocated = &tcp_memory_allocated, .memory_pressure = &tcp_memory_pressure, .sysctl_mem = sysctl_tcp_mem, .sysctl_wmem = sysctl_tcp_wmem, .sysctl_rmem = sysctl_tcp_rmem, .max_header = MAX_TCP_HEADER, .obj_size = sizeof(struct tcp_sock), .slab_flags = SLAB_DESTROY_BY_RCU, .twsk_prot = &tcp_timewait_sock_ops, .rsk_prot = &tcp_request_sock_ops, .h.hashinfo = &tcp_hashinfo, .no_autobind = true, #ifdef CONFIG_COMPAT .compat_setsockopt = compat_tcp_setsockopt, .compat_getsockopt = compat_tcp_getsockopt, #endif #ifdef CONFIG_MEMCG_KMEM .init_cgroup = tcp_init_cgroup, .destroy_cgroup = tcp_destroy_cgroup, .proto_cgroup = tcp_proto_cgroup, #endif }; struct proto { \u5b9a\u4e49\u5728 include/net/sock.h:1048 net/ipv4/af_inet.c const struct proto_ops inet_stream_ops = { .family = PF_INET, .owner = THIS_MODULE, .release = inet_release, .bind = inet_bind, .connect = inet_stream_connect, .socketpair = sock_no_socketpair, .accept = inet_accept, .getname = inet_getname, .poll = tcp_poll, .ioctl = inet_ioctl, .listen = inet_listen, .shutdown = inet_shutdown, .setsockopt = sock_common_setsockopt, .getsockopt = sock_common_getsockopt, .sendmsg = inet_sendmsg, .recvmsg = inet_recvmsg, .mmap = sock_no_mmap, .sendpage = inet_sendpage, .splice_read = tcp_splice_read, #ifdef CONFIG_COMPAT .compat_setsockopt = compat_sock_common_setsockopt, .compat_getsockopt = compat_sock_common_getsockopt, .compat_ioctl = inet_compat_ioctl, #endif }; 8.1 \u5173\u4e8e socket \u548c inet \u548c proto \u7684\u8bf4\u660e I think the question is the most headache problem when a newbie try to create a new protocol Explain : Both structures have member elements with similar names although they represent different functions struct proto_ops: used for communication between socket layer and transport layer struct proto: used for communicate with system calls Example : when you call a system call in userspace, ex connect(), prot_ops_connect() will be call first. In fucntion prot_ops_connect() , we need to call sk->sk_prot->connect() And sk->sk_prot->connect() will call proto_connect() automatically \u4e5f\u5c31\u662f\u8bf4\u5176\u5b9e\u5206\u4e24\u5c42, struct proto_ops \u7528\u4e8e socket \u5c42\u548c\u4f20\u8f93\u5c42\u4ea4\u4e92. proto \u7528\u4e8e\u65b9\u4fbf\u5b9e\u73b0\u7cfb\u7edf\u8c03\u7528. \u53e6\u5916, Linux \u5185\u6838\u7f51\u7edc\u5c42\u5b9e\u73b0\u65f6, \u603b\u662f\u5206\u4e3a\u4e09\u5c42: BSD socket \u5bf9\u8c61 inet \u534f\u8bae\u65cf \u5177\u4f53\u534f\u8bae,\u6bd4\u5982 tcp \u53c2\u8003 understand 'struct proto' and 'struct proto_ops' in the kernel 9 \u7528\u6237\u7684 tcp \u53d1\u9001\u961f\u5217\u662f\u4e00\u4e2a\u94fe\u8868 skb \u662f struct sk_buff \u5bf9\u8c61\u7684\u7b80\u79f0\uff0c\u7528\u6237\u7684\u53d1\u9001\u961f\u5217\u5c31\u662f\u8be5\u5bf9\u8c61\u7ec4\u6210\u7684\u4e00\u4e2a\u94fe\u8868\u3002 10 struct sock \u8bb2\u89e3 struct socket \u662f\u5728\u865a\u62df\u6587\u4ef6\u7cfb\u7edf\u4e0a\u88ab\u521b\u5efa\u51fa\u6765\u7684\uff0c\u53ef\u4ee5\u628a\u5b83\u770b\u6210\u4e00\u4e2a\u6587\u4ef6\u3002 struct sock \u662f\u7f51\u7edc\u5c42\u5bf9\u4e8e socket \u7684\u8868\u793a\uff0c\u7ed3\u6784\u4f53\u6bd4\u8f83\u5e9e\u5927. 10.1 socket \u548c sock \u662f\u540c\u4e00\u4e8b\u7269\u7684\u4e24\u4e2a\u4fa7\u9762\uff0c \u4e3a\u4ec0\u4e48\u4e0d\u628a\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\u5408\u5e76\u6210\u4e00\u4e2a\u5462? \u8fd9\u662f\u56e0\u4e3a socket \u662f inode \u7ed3\u6784\u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u5373\u628a inode \u7ed3 \u6784\u5185\u90e8\u7684\u4e00\u4e2a union \u7528\u4f5c socket \u7ed3\u6784\u3002\u7531\u4e8e\u63d2\u53e3\u64cd\u4f5c\u7684\u7279\u6b8a\u6027\uff0c\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u4e2d\u9700\u8981\u6709\u5927\u91cf\u7684\u7ed3\u6784\u6210\u5206\uff0c\u5982\u679c\u628a\u8fd9\u4e9b\u6210\u5206\u5168\u90e8\u653e\u5230 socket \u7ed3\u6784\u4e2d\uff0c\u5219 inode \u7ed3\u6784\u4e2d\u7684\u8fd9\u4e2a union \u5c31\u4f1a\u53d8\u5f97\u5f88\u5927\uff0c\u4ece\u800c inode \u7ed3\u6784\u4e5f\u4f1a\u53d8\u5f97\u5f88\u5927\uff0c\u800c\u5bf9\u4e8e\u5176\u4ed6\u6587\u4ef6\u7cfb\u7edf\u8fd9\u4e2a union \u662f\u4e0d\u9700\u8981\u8fd9\u4e48\u5927\u7684\uff0c \u6240\u4ee5\u4f1a\u9020\u6210\u5de8\u5927\u6d6a\u8d39\uff0c\u7cfb\u7edf\u4e2d\u4f7f\u7528 inode \u7ed3\u6784\u7684\u6570\u91cf\u8981\u8fdc\u8fdc\u8d85\u8fc7\u4f7f\u7528 socket \u7684\u6570\u91cf\uff0c\u6545\u89e3\u51b3\u7684\u529e\u6cd5\u5c31\u662f\u628a\u63d2\u53e3\u5206\u6210\u4e24\u90e8\u5206\uff0c\u628a\u4e0e\u6587\u4ef6\u7cfb \u7edf\u5173\u7cfb\u5bc6\u5207\u7684\u653e\u5728 socket \u7ed3\u6784\u4e2d\uff0c\u628a\u4e0e\u901a\u4fe1\u5173\u7cfb\u5bc6\u5207\u7684\u653e\u5728\u53e6\u4e00\u4e2a\u5355\u72ec\u7ed3\u6784 sock \u4e2d\uff1b struct inode { ..................... union { struct ext2_inode_info ext2_i; struct ext3_inode_info ext3_i; struct socket socket_i; ..................... } u; }; struct socket { socket_state state; // \u8be5state\u7528\u6765\u8868\u660e\u8be5socket\u7684\u5f53\u524d\u72b6\u6001 typedef enum { SS_FREE = 0, /* not allocated */ SS_UNCONNECTED, /* unconnected to any socket */ SS_CONNECTING, /* in process of connecting */ SS_CONNECTED, /* connected to socket */ SS_DISCONNECTING /* in process of disconnecting */ } socket_state; unsigned long flags; //\u8be5\u6210\u5458\u53ef\u80fd\u7684\u503c\u5982\u4e0b\uff0c\u8be5\u6807\u5fd7\u7528\u6765\u8bbe\u7f6esocket\u662f\u5426\u6b63\u5728\u5fd9\u788c #define SOCK_ASYNC_NOSPACE 0 #define SOCK_ASYNC_WAITDATA 1 #define SOCK_NOSPACE 2 struct proto_ops *ops; //\u4f9d\u636e\u534f\u8bae\u90a6\u5b9a\u5230\u8be5socket\u4e0a\u7684\u7279\u5b9a\u7684\u534f\u8bae\u65cf\u7684\u64cd\u4f5c\u51fd\u6570\u6307\u9488\uff0c\u4f8b\u5982IPv4 TCP\u5c31\u662finet_stream_ops struct inode *inode; //\u8868\u660e\u8be5socket\u6240\u5c5e\u7684inode struct fasync_struct *fasync_list; //\u5f02\u6b65\u5524\u9192\u961f\u5217 struct file *file; //file\u56de\u6307\u6307\u9488 struct sock *sk; //sock\u6307\u9488 wait_queue_head_t wait; //sock\u7684\u7b49\u5f85\u961f\u5217\uff0c\u5728TCP\u9700\u8981\u7b49\u5f85\u65f6\u5c31sleep\u5728\u8fd9\u4e2a\u961f\u5217\u4e0a short type; //\u8868\u793a\u8be5socket\u5728\u7279\u5b9a\u534f\u8bae\u65cf\u4e0b\u7684\u7c7b\u578b\u4f8b\u5982SOCK_STREAM, unsigned char passcred; //\u5728TCP\u5206\u6790\u4e2d\u65e0\u987b\u8003\u8651 }; /** * struct sock - network layer representation of sockets * @__sk_common: shared layout with inet_timewait_sock * @sk_shutdown: mask of %SEND_SHUTDOWN and/or %RCV_SHUTDOWN * @sk_userlocks: %SO_SNDBUF and %SO_RCVBUF settings * @sk_lock: synchronizer * @sk_rcvbuf: size of receive buffer in bytes * @sk_wq: sock wait queue and async head * @sk_rx_dst: receive input route used by early demux * @sk_dst_cache: destination cache * @sk_dst_lock: destination cache lock * @sk_policy: flow policy * @sk_receive_queue: incoming packets * @sk_wmem_alloc: transmit queue bytes committed * @sk_write_queue: Packet sending queue * @sk_async_wait_queue: DMA copied packets * @sk_omem_alloc: \"o\" is \"option\" or \"other\" * @sk_wmem_queued: persistent queue size * @sk_forward_alloc: space allocated forward * @sk_napi_id: id of the last napi context to receive data for sk * @sk_ll_usec: usecs to busypoll when there is no data * @sk_allocation: allocation mode * @sk_pacing_rate: Pacing rate (if supported by transport/packet scheduler) * @sk_max_pacing_rate: Maximum pacing rate (%SO_MAX_PACING_RATE) * @sk_sndbuf: size of send buffer in bytes * @sk_flags: %SO_LINGER (l_onoff), %SO_BROADCAST, %SO_KEEPALIVE, * %SO_OOBINLINE settings, %SO_TIMESTAMPING settings * @sk_no_check_tx: %SO_NO_CHECK setting, set checksum in TX packets * @sk_no_check_rx: allow zero checksum in RX packets * @sk_route_caps: route capabilities (e.g. %NETIF_F_TSO) * @sk_route_nocaps: forbidden route capabilities (e.g NETIF_F_GSO_MASK) * @sk_gso_type: GSO type (e.g. %SKB_GSO_TCPV4) * @sk_gso_max_size: Maximum GSO segment size to build * @sk_gso_max_segs: Maximum number of GSO segments * @sk_lingertime: %SO_LINGER l_linger setting * @sk_backlog: always used with the per-socket spinlock held * @sk_callback_lock: used with the callbacks in the end of this struct * @sk_error_queue: rarely used * @sk_prot_creator: sk_prot of original sock creator (see ipv6_setsockopt, * IPV6_ADDRFORM for instance) * @sk_err: last error * @sk_err_soft: errors that don't cause failure but are the cause of a * persistent failure not just 'timed out' * @sk_drops: raw/udp drops counter * @sk_ack_backlog: current listen backlog * @sk_max_ack_backlog: listen backlog set in listen() * @sk_priority: %SO_PRIORITY setting * @sk_cgrp_prioidx: socket group's priority map index * @sk_type: socket type (%SOCK_STREAM, etc) * @sk_protocol: which protocol this socket belongs in this network family * @sk_peer_pid: &struct pid for this socket's peer * @sk_peer_cred: %SO_PEERCRED setting * @sk_rcvlowat: %SO_RCVLOWAT setting * @sk_rcvtimeo: %SO_RCVTIMEO setting * @sk_sndtimeo: %SO_SNDTIMEO setting * @sk_rxhash: flow hash received from netif layer * @sk_filter: socket filtering instructions * @sk_protinfo: private area, net family specific, when not using slab * @sk_timer: sock cleanup timer * @sk_stamp: time stamp of last packet received * @sk_socket: Identd and reporting IO signals * @sk_user_data: RPC layer private data * @sk_frag: cached page frag * @sk_peek_off: current peek_offset value * @sk_send_head: front of stuff to transmit * @sk_security: used by security modules * @sk_mark: generic packet mark * @sk_classid: this socket's cgroup classid * @sk_cgrp: this socket's cgroup-specific proto data * @sk_write_pending: a write to stream socket waits to start * @sk_state_change: callback to indicate change in the state of the sock * @sk_data_ready: callback to indicate there is data to be processed * @sk_write_space: callback to indicate there is bf sending space available * @sk_error_report: callback to indicate errors (e.g. %MSG_ERRQUEUE) * @sk_backlog_rcv: callback to process the backlog * @sk_destruct: called at sock freeing time, i.e. when all refcnt == 0 */ struct sock { /* * Now struct inet_timewait_sock also uses sock_common, so please just * don't add nothing before this first member (__sk_common) --acme */ struct sock_common __sk_common; #define sk_node __sk_common.skc_node #define sk_nulls_node __sk_common.skc_nulls_node #define sk_refcnt __sk_common.skc_refcnt #define sk_tx_queue_mapping __sk_common.skc_tx_queue_mapping #define sk_dontcopy_begin __sk_common.skc_dontcopy_begin #define sk_dontcopy_end __sk_common.skc_dontcopy_end #define sk_hash __sk_common.skc_hash #define sk_portpair __sk_common.skc_portpair #define sk_num __sk_common.skc_num #define sk_dport __sk_common.skc_dport #define sk_addrpair __sk_common.skc_addrpair #define sk_daddr __sk_common.skc_daddr #define sk_rcv_saddr __sk_common.skc_rcv_saddr #define sk_family __sk_common.skc_family #define sk_state __sk_common.skc_state #define sk_reuse __sk_common.skc_reuse #define sk_reuseport __sk_common.skc_reuseport #define sk_bound_dev_if __sk_common.skc_bound_dev_if #define sk_bind_node __sk_common.skc_bind_node #define sk_prot __sk_common.skc_prot #define sk_net __sk_common.skc_net #define sk_v6_daddr __sk_common.skc_v6_daddr #define sk_v6_rcv_saddr __sk_common.skc_v6_rcv_saddr socket_lock_t sk_lock; struct sk_buff_head sk_receive_queue; /* * The backlog queue is special, it is always used with * the per-socket spinlock held and requires low latency * access. Therefore we special case it's implementation. * Note : rmem_alloc is in this structure to fill a hole * on 64bit arches, not because its logically part of * backlog. */ struct { atomic_t rmem_alloc; int len; struct sk_buff *head; struct sk_buff *tail; } sk_backlog; #define sk_rmem_alloc sk_backlog.rmem_alloc int sk_forward_alloc; #ifdef CONFIG_RPS __u32 sk_rxhash; #endif #ifdef CONFIG_NET_RX_BUSY_POLL unsigned int sk_napi_id; unsigned int sk_ll_usec; #endif atomic_t sk_drops; int sk_rcvbuf; struct sk_filter __rcu *sk_filter; struct socket_wq __rcu *sk_wq; #ifdef CONFIG_NET_DMA struct sk_buff_head sk_async_wait_queue; #endif #ifdef CONFIG_XFRM struct xfrm_policy *sk_policy[2]; #endif unsigned long sk_flags; struct dst_entry *sk_rx_dst; struct dst_entry __rcu *sk_dst_cache; spinlock_t sk_dst_lock; atomic_t sk_wmem_alloc; atomic_t sk_omem_alloc; int sk_sndbuf; struct sk_buff_head sk_write_queue; kmemcheck_bitfield_begin(flags); unsigned int sk_shutdown : 2, sk_no_check_tx : 1, sk_no_check_rx : 1, sk_userlocks : 4, sk_protocol : 8, sk_type : 16; #define SK_PROTOCOL_MAX U8_MAX kmemcheck_bitfield_end(flags); int sk_wmem_queued; gfp_t sk_allocation; u32 sk_pacing_rate; /* bytes per second */ u32 sk_max_pacing_rate; netdev_features_t sk_route_caps; netdev_features_t sk_route_nocaps; int sk_gso_type; unsigned int sk_gso_max_size; u16 sk_gso_max_segs; int sk_rcvlowat; unsigned long sk_lingertime; struct sk_buff_head sk_error_queue; struct proto *sk_prot_creator; rwlock_t sk_callback_lock; int sk_err, sk_err_soft; unsigned short sk_ack_backlog; unsigned short sk_max_ack_backlog; __u32 sk_priority; #if IS_ENABLED(CONFIG_CGROUP_NET_PRIO) __u32 sk_cgrp_prioidx; #endif struct pid *sk_peer_pid; const struct cred *sk_peer_cred; long sk_rcvtimeo; long sk_sndtimeo; void *sk_protinfo; struct timer_list sk_timer; ktime_t sk_stamp; struct socket *sk_socket; void *sk_user_data; struct page_frag sk_frag; struct sk_buff *sk_send_head; __s32 sk_peek_off; int sk_write_pending; #ifdef CONFIG_SECURITY void *sk_security; #endif __u32 sk_mark; u32 sk_classid; struct cg_proto *sk_cgrp; void (*sk_state_change)(struct sock *sk); void (*sk_data_ready)(struct sock *sk); void (*sk_write_space)(struct sock *sk); void (*sk_error_report)(struct sock *sk); int (*sk_backlog_rcv)(struct sock *sk, struct sk_buff *skb); void (*sk_destruct)(struct sock *sk); }; socket & sock \u7528\u6237\u7a7a\u95f4\u901a\u8fc7 socket()\u3001bind()\u3001listen()\u3001accept() \u7b49\u5e93\u51fd\u6570\u8fdb\u884c\u7f51\u7edc\u7f16\u7a0b\u3002\u800c\u8fd9\u91cc\u63d0\u5230\u7684 socket \u548c sock \u662f\u5185\u6838\u4e2d\u7684\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u5176\u4e2d socket \u5411\u4e0a\u9762\u5411\u7528\u6237\uff0c\u800c sock \u5411\u4e0b\u9762\u5411\u534f\u8bae\u6808\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u8fd9\u4e24\u4e2a\u7ed3\u6784\u5b9e\u9645\u4e0a\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002 \u6ce8\u610f\u5230\uff0c\u8fd9\u4e24\u4e2a\u7ed3\u6784\u4e0a\u90fd\u6709\u4e00\u4e2a\u53eb ops \u7684\u6307\u9488, \u4f46\u5b83\u4eec\u7684\u7c7b\u578b\u4e0d\u540c\u3002socket \u7684 ops \u662f\u4e00\u4e2a\u6307\u5411 struct proto_ops \u7684\u6307\u9488\uff0csock \u7684 ops \u662f\u4e00\u4e2a\u6307\u5411 struct proto \u7684\u6307\u9488, \u5b83\u4eec\u5728\u7ed3\u6784\u88ab\u521b\u5efa\u65f6\u786e\u5b9a\u3002 \u56de\u5fc6\u7f51\u7edc\u7f16\u7a0b\u4e2d socket() \u51fd\u6570\u7684\u539f\u578b\uff1a #include <sys/socket.h> sockfd = socket(int socket_family, int socket_type, int protocol); \u5b9e\u9645\u4e0a, socket->ops \u548c sock->ops \u7531\u524d\u4e24\u4e2a\u53c2\u6570 socket_family \u548c socket_type \u5171\u540c\u786e\u5b9a\u3002 \u5982\u679c socket_family \u662f\u6700\u5e38\u7528\u7684 PF_INET \u534f\u8bae\u7c07, \u5219 socket->ops \u548c sock->ops \u7684\u53d6\u503c\u5c31\u8bb0\u5f55\u5728 INET \u534f\u8bae\u5f00\u5173\u8868\u4e2d static struct inet_protosw inetsw_array[] = { { .type = SOCK_STREAM, .protocol = IPPROTO_TCP, .prot = &tcp_prot, // \u5bf9\u5e94 sock->ops .ops = &inet_stream_ops, // \u5bf9\u5e94 socket->ops .flags = INET_PROTOSW_PERMANENT | INET_PROTOSW_ICSK, }, { .type = SOCK_DGRAM, .protocol = IPPROTO_UDP, .prot = &udp_prot, // \u5bf9\u5e94 sock->ops .ops = &inet_dgram_ops, // \u5bf9\u5e94 socket->ops .flags = INET_PROTOSW_PERMANENT, }, } ....... 10.2 struct inet_connection_sock include/net/inet_connection_sock.h /** inet_connection_sock - INET connection oriented sock * * @icsk_accept_queue: FIFO of established children * @icsk_bind_hash: Bind node * @icsk_timeout: Timeout * @icsk_retransmit_timer: Resend (no ack) * @icsk_rto: Retransmit timeout * @icsk_pmtu_cookie Last pmtu seen by socket * @icsk_ca_ops Pluggable congestion control hook * @icsk_af_ops Operations which are AF_INET{4,6} specific * @icsk_ca_state: Congestion control state * @icsk_retransmits: Number of unrecovered [RTO] timeouts * @icsk_pending: Scheduled timer event * @icsk_backoff: Backoff * @icsk_syn_retries: Number of allowed SYN (or equivalent) retries * @icsk_probes_out: unanswered 0 window probes * @icsk_ext_hdr_len: Network protocol overhead (IP/IPv6 options) * @icsk_ack: Delayed ACK control data * @icsk_mtup; MTU probing control data */ struct inet_connection_sock { /* inet_sock has to be the first member! */ struct inet_sock icsk_inet; struct request_sock_queue icsk_accept_queue; struct inet_bind_bucket *icsk_bind_hash; unsigned long icsk_timeout; struct timer_list icsk_retransmit_timer; struct timer_list icsk_delack_timer; __u32 icsk_rto; __u32 icsk_pmtu_cookie; const struct tcp_congestion_ops *icsk_ca_ops; const struct inet_connection_sock_af_ops *icsk_af_ops; unsigned int (*icsk_sync_mss)(struct sock *sk, u32 pmtu); __u8 icsk_ca_state; __u8 icsk_retransmits; __u8 icsk_pending; __u8 icsk_backoff; __u8 icsk_syn_retries; __u8 icsk_probes_out; __u16 icsk_ext_hdr_len; struct { __u8 pending; /* ACK is pending */ __u8 quick; /* Scheduled number of quick acks */ __u8 pingpong; /* The session is interactive */ __u8 blocked; /* Delayed ACK was blocked by socket lock */ __u32 ato; /* Predicted tick of soft clock */ unsigned long timeout; /* Currently scheduled timeout */ __u32 lrcvtime; /* timestamp of last received data packet */ __u16 last_seg_size; /* Size of last incoming segment */ __u16 rcv_mss; /* MSS used for delayed ACK decisions */ } icsk_ack; struct { int enabled; /* Range of MTUs to search */ int search_high; int search_low; /* Information on the current probe. */ int probe_size; } icsk_mtup; u32 icsk_ca_priv[16]; u32 icsk_user_timeout; #define ICSK_CA_PRIV_SIZE (16 * sizeof(u32)) }; 10.3 struct inet_sock /** struct inet_sock - representation of INET sockets * * @sk - ancestor class * @pinet6 - pointer to IPv6 control block * @inet_daddr - Foreign IPv4 addr * @inet_rcv_saddr - Bound local IPv4 addr * @inet_dport - Destination port * @inet_num - Local port * @inet_saddr - Sending source * @uc_ttl - Unicast TTL * @inet_sport - Source port * @inet_id - ID counter for DF pkts * @tos - TOS * @mc_ttl - Multicasting TTL * @is_icsk - is this an inet_connection_sock? * @uc_index - Unicast outgoing device index * @mc_index - Multicast device index * @mc_list - Group array * @cork - info to build ip hdr on each ip frag while socket is corked */ struct inet_sock { /* sk and pinet6 has to be the first two members of inet_sock */ struct sock sk; #if IS_ENABLED(CONFIG_IPV6) struct ipv6_pinfo *pinet6; #endif /* Socket demultiplex comparisons on incoming packets. */ #define inet_daddr sk.__sk_common.skc_daddr #define inet_rcv_saddr sk.__sk_common.skc_rcv_saddr #define inet_dport sk.__sk_common.skc_dport #define inet_num sk.__sk_common.skc_num __be32 inet_saddr; __s16 uc_ttl; __u16 cmsg_flags; __be16 inet_sport; __u16 inet_id; struct ip_options_rcu __rcu *inet_opt; int rx_dst_ifindex; __u8 tos; __u8 min_ttl; __u8 mc_ttl; __u8 pmtudisc; __u8 recverr:1, is_icsk:1, freebind:1, hdrincl:1, mc_loop:1, transparent:1, mc_all:1, nodefrag:1; __u8 rcv_tos; int uc_index; int mc_index; __be32 mc_addr; struct ip_mc_socklist __rcu *mc_list; struct inet_cork_full cork; }; 10.4 \u534a\u8fde\u63a5\u54c8\u5e0c\u8868\u548c\u5168\u94fe\u63a5\u961f\u5217 \u534a\u8fde\u63a5\u54c8\u5e0c\u8868 \u662f\u91c7\u7528 struct lisen_sock \u7ed3\u6784\u4f53\u8868\u793a \u5168\u94fe\u63a5\u961f\u5217 \u91c7\u7528 rskq_accept_head \u548c rskq_accept_tail \u6307\u9488\u5206\u522b\u6307\u5411\u5934\u90e8\u548c\u5c3e\u90e8 \u5176\u5e95\u5c42\u5143\u7d20\u90fd\u662f struct request_sock \u534a\u8fde\u63a5\u54c8\u5e0c\u8868 \u548c \u5168\u94fe\u63a5\u961f\u5217 \u88ab \u4e00\u8d77 \u5c01\u88c5\u5728 struct requst_sock_queue \u5f53\u4e2d 10.5 struct request_sock - mini sock to represent a connection request struct tcp_request_sock { struct inet_request_sock req; #ifdef CONFIG_TCP_MD5SIG /* Only used by TCP MD5 Signature so far. */ const struct tcp_request_sock_ops *af_specific; #endif //\u5ba2\u6237\u7aefSYN\u6bb5\u4e2d\u643a\u5e26\u7684seq\uff0c\u5373\u5ba2\u6237\u7aef\u7684\u521d\u59cb\u5e8f\u5217\u53f7 */ u32 rcv_isn; //SYN+ACK\u6bb5\u643a\u5e26\u7684seq\uff0c\u5373\u670d\u52a1\u5668\u7aef\u7684\u521d\u59cb\u5e8f\u5217\u53f7 u32 snt_isn; //SYN+ACK\u6bb5\u53d1\u9001\u7684\u65f6\u95f4\u6233\uff0c\u57fa\u4e8ejiffies u32 snt_synack; }; struct inet_request_sock { struct request_sock req; #if IS_ENABLED(CONFIG_IPV6) u16 inet6_rsk_offset; #endif __be16 loc_port; /* \u670d\u52a1\u5668\u7aef\u7aef\u53e3\u53f7 */ __be32 loc_addr; /* \u670d\u52a1\u5668\u7aefIP\u5730\u5740 */ __be32 rmt_addr; /* \u5ba2\u6237\u7aefIP\u5730\u5740 */ __be16 rmt_port; /* \u5ba2\u6237\u7aef\u7aef\u53e3\u53f7 */ kmemcheck_bitfield_begin(flags); u16 snd_wscale : 4, /* \u5ba2\u6237\u7aef\u7684\u7a97\u53e3\u6269\u5927\u56e0\u5b50 */ rcv_wscale : 4, /* \u670d\u52a1\u5668\u7aef\u7684\u7a97\u53e3\u6269\u5927\u56e0\u5b50 */ tstamp_ok : 1, /* \u6807\u8bc6\u672c\u8fde\u63a5\u662f\u5426\u652f\u6301TIMESTAMP\u9009\u9879 */ sack_ok : 1, /* \u6807\u8bc6\u672c\u8fde\u63a5\u662f\u5426\u652f\u6301SACK\u9009\u9879 */ wscale_ok : 1, /* \u6807\u8bc6\u672c\u8fde\u63a5\u662f\u5426\u652f\u6301Window Scale\u9009\u9879 */ ecn_ok : 1, /* \u6807\u8bc6\u672c\u8fde\u63a5\u662f\u5426\u652f\u6301ECN\u9009\u9879 */ acked : 1, no_srccheck : 1; kmemcheck_bitfield_end(flags); struct ip_options_rcu *opt; /* IP\u9009\u9879 */ }; /* struct request_sock - mini sock to represent a connection request */ struct request_sock { //\u548c\u5176\u5b83struct request_sock\u5bf9\u8c61\u5f62\u6210\u94fe\u8868 struct request_sock *dl_next; /* Must be first member! */ //SYN\u6bb5\u4e2d\u5ba2\u6237\u7aef\u901a\u544a\u7684MSS u16 mss; //SYN+ACK\u6bb5\u5df2\u7ecf\u91cd\u4f20\u7684\u6b21\u6570\uff0c\u521d\u59cb\u5316\u4e3a0 u8 retrans; u8 __pad; u32 window_clamp; /* window clamp at creation time */ u32 rcv_wnd; /* rcv_wnd offered first time */ u32 ts_recent; //SYN+ACK\u6bb5\u7684\u8d85\u65f6\u65f6\u95f4 unsigned long expires; //\u6307\u5411tcp_request_sock_ops,\u8be5\u51fd\u6570\u96c6\u7528\u4e8e\u5904\u7406\u7b2c\u4e09\u6b21\u63e1\u624b\u7684 //ACK\u6bb5\u4ee5\u53ca\u540e\u7eedaccept\u8fc7\u7a0b\u4e2dstruct tcp_sock\u5bf9\u8c61\u7684\u521b\u5efa const struct request_sock_ops *rsk_ops; //\u8fde\u63a5\u5efa\u7acb\u524d\u65e0\u6548\uff0c\u5efa\u7acb\u540e\u6307\u5411\u521b\u5efa\u7684tcp_sock\u7ed3\u6784 struct sock *sk; u32 secid; u32 peer_secid; }; linux \u5185\u6838\u534f\u8bae\u6808 TCP \u4e4b\u8fde\u63a5\u8bf7\u6c42\u961f\u5217 11 linux \u5b9e\u73b0\u8f6f\u4e2d\u65ad\u7684\u91cd\u8981\u6570\u636e\u7ed3\u6784 softnet_data \u662f\u7528\u4e8e\u5b9e\u73b0\u8f6f\u4e2d\u65ad\u7684\u91cd\u8981\u6570\u636e\u7ed3\u6784,softnet_data \u662f\u6bcf\u4e2a CPU \u90fd\u62e5\u6709\u7684\u4e00\u4e2a\u6570\u636e\u7ed3\u6784. \u4ee5\u4e0b\u662f\u57fa\u4e8e 2.6.32 \u7684\u6e90\u7801 struct softnet_data { struct Qdisc *output_queue; //\u53d1\u9001\u5e27\u961f\u5217 struct sk_buff_head input_pkt_queue; //\u63a5\u6536\u5e27\u961f\u5217\uff08\u5165\u53e3\u961f\u5217\uff09 struct list_head poll_list; //\u8fd9\u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868 struct sk_buff *completion_queue; struct napi_struct backlog; }; \u8bf4\u660e \uff1a \u53ef\u4ee5\u770b\u5230\u53d1\u9001\u5e27\u961f\u5217\u5e76\u4e0d\u662f skb \u7684\u94fe\u8868\uff0c\u800c\u662f Qdisc \u7684\u94fe\u8868\uff0c\u8fd9\u662f\u56e0\u4e3a\u53d1\u9001\u4e00\u822c\u9700\u8981 Qos \u6d41\u63a7\uff0c\u6240\u4ee5\u53d1\u9001\u5e27\u4f1a\u5b58\u5165\u76f8\u5e94 dev \u5173\u8054\u7684 Qdisc \u4e2d\uff08Qdisc \u4e2d\u6709 skb \u7684\u961f\u5217\uff09\uff0c\u8be6\u89c1\u201c\u540e\u9762\u94fe\u8def\u5c42\u6570\u636e\u5305\u53d1\u9001\u201d\u5206\u6790\u3002 poll_list \u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u662f\u4e00\u4e2a napi_struct \u7ed3\u6784\uff0c\u800c napi_struct \u53c8\u662f net_device \u7684\u6210\u5458\uff0c\u6240\u4ee5\u8fd9\u4e2a\u94fe\u8868\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a net_device \u94fe\u8868\uff0c\u8fd9\u4e9b net_device \u90fd\u5e26\u6709\u8f93\u5165\u5e27\u7b49\u7740\u88ab\u5904\u7406\u3002This is a bidirectional list of devices with input frames waiting to be processed. More details can be found in the section \"Processing the NET_RX_SOFTIRQ: net_rx_action\" in Chapter 10. input_pkt_queue \u662f\u8bbe\u5907\u9a71\u52a8\u5c06\u6570\u636e\u4ece\u7269\u7406\u4ecb\u8d28\u63a5\u6536\u540e\u5c01\u88c5\u6210 skb \u540e\u5b58\u653e\u7684\u7f13\u5b58\u961f\u5217\uff0c\u6240\u6709 \u975e NAPI \u8bbe\u5907 \u5171\u6709\u8fd9\u4e00\u4e2a\u8f93\u5165\u7f13\u5b58\u961f\u5217\uff0c\u800c NAPI \u8bbe\u5907\u6709\u81ea\u5df1\u7684\u79c1\u6709\u961f\u5217\u7528\u4e8e\u5b58\u653e\u8f93\u5165\u5305\u3002 This queue, initialized in net_dev_init , is where incoming frames are stored before being processed by the driver. It is used by non-NAPI drivers; those that have been upgraded to NAPI use their own private queues. softnet_data Structure \u4ee5\u4e0b\u57fa\u4e8e 3.16.51 \u6e90\u4ee3\u7801 /* * Incoming packets are placed on per-cpu queues */ struct softnet_data { struct Qdisc *output_queue; struct Qdisc **output_queue_tailp; struct list_head poll_list; //\u8fd9\u91cc\u6bcf\u4e00\u4e2a\u5143\u7d20\u662f\u4e00\u4e2astruct napi_struct, \u800c\u6bcf\u4e2anapi_struct\u5176\u5b9e\u662fstruct igb_q_vector\u5b50\u5143\u7d20. struct sk_buff *completion_queue; struct sk_buff_head process_queue; /* stats */ unsigned int processed; unsigned int time_squeeze; unsigned int cpu_collision; unsigned int received_rps; #ifdef CONFIG_RPS struct softnet_data *rps_ipi_list; /* Elements below can be accessed between CPUs for RPS */ struct call_single_data csd ____cacheline_aligned_in_smp; struct softnet_data *rps_ipi_next; unsigned int cpu; unsigned int input_queue_head; unsigned int input_queue_tail; #endif unsigned int dropped; struct sk_buff_head input_pkt_queue; struct napi_struct backlog; #ifdef CONFIG_NET_FLOW_LIMIT struct sd_flow_limit __rcu *flow_limit; #endif }; \u4e00\u4e9b\u91cd\u8981\u6210\u5458 \u7f13\u51b2\u961f\u5217(\u53d1\u9001\u3001\u63a5\u6536) 12 struct msghdr struct msghdr { void *msg_name; /* optional address */ socklen_t msg_namelen; /* size of address */ struct iovec *msg_iov; /* scatter/gather array */ size_t msg_iovlen; /* # elements in msg_iov */ void *msg_control; /* ancillary data, see below */ size_t msg_controllen; /* ancillary data buffer len */ int msg_flags; /* flags on received message */ }; The msghdr structure is used to minimize the number of directly supplied parameters to the recvmsg() and sendmsg() functions \u4e3b\u8981\u7528\u4e8e\u5411\u4e00\u4e2a socket \u53d1\u9001\u6d88\u606f\uff0c\u6216\u4ece\u4e00\u4e2a socket \u4e2d\u63a5\u6536\u6d88\u606f\u3002 msghdr \u7ed3\u6784\u4e00\u822c\u4f1a\u7528\u4e8e\u5982\u4e0b\u4e24\u4e2a\u51fd\u6570\u4e2d\uff1a #include <sys/types.h> #include <sys/socket.h> ssize_t sendmsg(int sockfd, const struct msghdr *msg, int flags); ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags); 13 struct iovec struct iovec { void __user *iov_base; /* BSD uses caddr_t (1003.1g requires void *) */ __kernel_size_t iov_len; /* Must be size_t (1003.1g) */ }; \u770b\u7740\u5c31\u662f\u7528\u4e8e\u5b58\u50a8\u7528\u6237\u7a7a\u95f4\u7684\u5185\u5b58\u5730\u5740\u548c\u957f\u5ea6. \u65b9\u4fbf\u540e\u7eed\u628a\u6570\u636e\u4ece\u7528\u6237\u7a7a\u95f4 COPY \u5230\u5185\u6838\u7a7a\u95f4 14 \u7b49\u5f85\u961f\u5217\u76f8\u5173\u7ed3\u6784\u4f53 \u672c\u8d28\u4e0a\u6765\u8bf4, \u7b49\u5f85\u961f\u5217\u5c31\u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868 \u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u63cf\u8ff0\u4e00\u4e2a\u7b49\u5f85\u961f\u5217\uff1await_queue_head_t \u548c wait_queue_t\u3002 \u8fd9\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\u5b9a\u4e49\u5728 include/linux/wait.h \u5934\u6587\u4ef6\u4e2d\u3002 \u5176\u4e00 wait_queue_t\uff08\u7b49\u5f85\u961f\u5217\u9879\uff09 typedef struct __wait_queue wait_queue_t; struct __wait_queue { unsigned int flags; #define WQ_FLAG_EXCLUSIVE 0x01 void *private; wait_queue_func_t func; struct list_head task_list; }; \u4e0b\u9762\u8bf4\u660e\u4e00\u4e0b\u5404\u4e2a\u6210\u5458\u7684\u4f5c\u7528\uff1a flags: \u53ef\u4ee5\u8bbe\u7f6e\u4e3a WQ_FLAG_EXCLUSIVE\uff0c\u8868\u793a\u7b49\u5f85\u7684\u8fdb\u7a0b\u5e94\u8be5\u72ec\u5360\u8d44\u6e90\uff08\u89e3\u51b3\u60ca\u7fa4\u73b0\u8c61\uff09\u3002 private: \u4e00\u822c\u7528\u4e8e\u4fdd\u5b58\u7b49\u5f85\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u63cf\u8ff0\u7b26 task_struct\u3002 func: \u5524\u9192\u51fd\u6570\uff0c\u4e00\u822c\u8bbe\u7f6e\u4e3a default_wake_function() \u51fd\u6570\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u81ea\u5b9a\u4e49\u7684\u5524\u9192\u51fd\u6570\u3002 task_list: \u7528\u4e8e\u8fde\u63a5\u5176\u4ed6\u7b49\u5f85\u8d44\u6e90\u7684\u8fdb\u7a0b\u3002 \u5176\u4e8c wait_queue_head_t\uff08\u7b49\u5f85\u961f\u5217\u5934\uff09 struct __wait_queue_head { spinlock_t lock; struct list_head task_list; }; typedef struct __wait_queue_head wait_queue_head_t; \u5176\u4e09 \u521b\u5efa wait_queue_t\uff08\u521b\u5efa\u7b49\u5f85\u961f\u5217\u9879\uff09 #define DEFINE_WAIT_FUNC(name, function) \\ wait_queue_t name = { \\ .private = current, \\ .func = function, \\ .task_list = LIST_HEAD_INIT((name).task_list), \\ } #define DEFINE_WAIT(name) DEFINE_WAIT_FUNC(name, autoremove_wake_function) Linux \u7b49\u5f85\u961f\u5217\u539f\u7406\u4e0e\u5b9e\u73b0 linux \u7b49\u5f85\u961f\u5217 wait_queue_head_t \u548c wait_queue_t 15 struct eventpoll /* * This structure is stored inside the \"private_data\" member of the file * structure and represents the main data structure for the eventpoll * interface. */ struct eventpoll { /* Protect the access to this structure */ spinlock_t lock; /* * This mutex is used to ensure that files are not removed * while epoll is using them. This is held during the event * collection loop, the file cleanup path, the epoll file exit * code and the ctl operations. */ struct mutex mtx; /* Wait queue used by sys_epoll_wait() */ wait_queue_head_t wq; /* Wait queue used by file->poll() */ wait_queue_head_t poll_wait; /* List of ready file descriptors */ struct list_head rdllist; /* RB tree root used to store monitored fd structs */ struct rb_root rbr; /* * This is a single linked list that chains all the \"struct epitem\" that * happened while transferring ready events to userspace w/out * holding ->lock. */ struct epitem *ovflist; /* wakeup_source used when ep_scan_ready_list is running */ struct wakeup_source *ws; /* The user that created the eventpoll descriptor */ struct user_struct *user; struct file *file; /* used to optimize loop detection check */ int visited; struct list_head visited_list_link; }; 16 struct socket_wq struct socket_wq { /* Note: wait MUST be first field of socket_wq */ wait_queue_head_t wait; struct fasync_struct *fasync_list; struct rcu_head rcu; } ____cacheline_aligned_in_smp; 17 struct neighbour Neighbors are represented by struct neighbour structures. The structure is complex and includes status fields, virtual functions to interface with L3 protocols, timers, and cached L2 headers. include/net/neighbour.h struct neighbour { struct neighbour __rcu *next; struct neigh_table *tbl; struct neigh_parms *parms; unsigned long confirmed; unsigned long updated; rwlock_t lock; atomic_t refcnt; struct sk_buff_head arp_queue; unsigned int arp_queue_len_bytes; struct timer_list timer; unsigned long used; atomic_t probes; __u8 flags; __u8 nud_state; __u8 type; __u8 dead; seqlock_t ha_lock; unsigned char ha[ALIGN(MAX_ADDR_LEN, sizeof(unsigned long))]; struct hh_cache hh; int (*output)(struct neighbour *, struct sk_buff *); const struct neigh_ops *ops; struct rcu_head rcu; struct net_device *dev; u8 primary_key[0]; }; struct neigh_ops { int family; void (*solicit)(struct neighbour *, struct sk_buff *); void (*error_report)(struct neighbour *, struct sk_buff *); int (*output)(struct neighbour *, struct sk_buff *); int (*connected_output)(struct neighbour *, struct sk_buff *); }; 18 struct inet_hashinfo tcp_hashinfo \u9996\u5148\uff0c\u5728 linux \u5185\u6838\u7684\u7f51\u7edc\u6a21\u5757\u91cc\u7ef4\u62a4\u7740\u4e00\u4e2a\u5168\u5c40\u5b9e\u4f8b\uff0c\u7528\u6765\u5b58\u50a8\u6240\u6709\u548c tcp \u76f8\u5173\u7684 socket\uff1a // net/ipv4/tcp_ipv4.c struct inet_hashinfo tcp_hashinfo; \u5176\u6b21\uff0c\u5728\u8be5\u5b9e\u4f8b\u7684\u5185\u90e8\uff0c\u53c8\u6839\u636e socket \u7c7b\u578b\u7684\u4e0d\u540c\uff0c\u5212\u5206\u6210\u56db\u4e2a hashtable\uff1a // include/net/inet_hashtables.h struct inet_hashinfo { // key\u662f\u7531\u672c\u5730\u5730\u5740\u3001\u672c\u5730\u7aef\u53e3\u3001\u8fdc\u7a0b\u5730\u5740\u3001\u8fdc\u7a0b\u7aef\u53e3\u7ec4\u6210\u7684\u56db\u5143\u7ec4 // value\u662f\u6b63\u5728\u5efa\u7acb\u8fde\u63a5\u6216\u5df2\u7ecf\u5efa\u7acb\u8fde\u63a5\u7684socket // \u6bd4\u5982\uff0c\u5f53\u5185\u6838\u6536\u5230\u4e00\u4e2atcp\u6d88\u606f\u65f6\uff0c\u5b83\u5148\u4ece\u6d88\u606f\u5934\u91cc\u8bfb\u51fa\u5730\u5740\u548c\u7aef\u53e3\u7b49\u4fe1\u606f // \u7136\u540e\u7528\u8be5\u4fe1\u606f\u5230ehash\u91cc\u83b7\u53d6\u5bf9\u5e94\u7684socket // \u6700\u540e\u628a\u5269\u4f59\u7684tcp\u6570\u636e\u6dfb\u52a0\u5230\u8be5socket\u7684recv buf\u4e2d\u4f9b\u7528\u6237\u7a0b\u5e8f\u8bfb\u53d6 struct inet_ehash_bucket *ehash; // key\u662f\u672c\u5730\u7aef\u53e3 // value\u662f\u4f7f\u7528\u8fd9\u4e2a\u7aef\u53e3\u7684\u6240\u6709socket // \u6bd4\u5982\uff0c\u5f53\u6211\u4eec\u7528socket\u76d1\u542c\u4e00\u4e2a\u7aef\u53e3\u65f6\uff0c\u8be5socket\u5c31\u5728bhash\u91cc // \u540c\u7406\uff0c\u7531\u8be5\u76d1\u542c\u7aef\u53e3\u5efa\u7acb\u7684\u8fde\u63a5\u5bf9\u5e94\u7684\u90a3\u4e9bsocket\u4e5f\u5728\u8fd9\u91cc // \u56e0\u4e3a\u5b83\u4eec\u4e5f\u90fd\u662f\u4f7f\u7528\u540c\u6837\u7684\u672c\u5730\u7aef\u53e3 struct inet_bind_hashbucket *bhash; // key\u662f\u672c\u5730\u5730\u5740\u548c\u7aef\u53e3\u7ec4\u6210\u7684\u4e8c\u5143\u7ec4 // value\u662f\u5bf9\u5e94\u7684\u5904\u4e8elisten\u72b6\u6001\u7684socket struct inet_listen_hashbucket *lhash2; // key\u662f\u672c\u5730\u7aef\u53e3 // value\u662f\u5bf9\u5e94\u7684\u5904\u4e8elisten\u72b6\u6001\u7684socket struct inet_listen_hashbucket listening_hash[INET_LHTABLE_SIZE]; }; \u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u672c\u5730\u7aef\u53e3\u662f\u5426\u88ab\u4f7f\u7528 // \u6839\u636e\u7aef\u53e3\u7b97\u51fahash\u503c\uff0c\u7136\u540e\u6839\u636e\u8fd9\u4e2a\u503c\u627e\u5230bhash\u4e2d\u5bf9\u5e94\u7684slot head = &hinfo->bhash[inet_bhashfn(net, port, hinfo->bhash_size)]; // \u904d\u5386slot\u6307\u5411\u7684\u94fe\u8868\uff0c\u627e\u5230port\u5bf9\u5e94\u7684\u503c inet_bind_bucket_for_each(tb, &head->chain) if (net_eq(ib_net(tb), net) && tb->l3mdev == l3mdev && tb->port == port) goto tb_found; // \u5982\u679c\u6ca1\u627e\u5230\uff0c\u8bf4\u660e\u73b0\u5728\u8fd8\u6ca1\u6709\u4eba\u4f7f\u7528\u8fd9\u4e2a\u7aef\u53e3\uff0c\u5c31\u65b0\u521b\u5efa\u4e00\u4e2a // \u65b0\u521b\u5efa\u7684\u5b9e\u4f8b\u5c31\u4f1a\u653e\u5230bhash\u4e2d\uff0c\u8868\u660e\u8fd9\u4e2a\u7aef\u53e3\u6211\u5728\u4f7f\u7528\u4e86 tb = inet_bind_bucket_create(hinfo->bind_bucket_cachep, net, head, port, l3mdev); \u53c2\u8003 Linux \u7cfb\u7edf\u7814\u7a76 - \u64cd\u4f5c\u7cfb\u7edf\u662f\u5982\u4f55\u7ba1\u7406 tcp \u8fde\u63a5\u7684 (1) 19 dst_entry \u5185\u6838\u9700\u8981\u786e\u5b9a\u6536\u5230\u7684\u62a5\u6587\u662f\u5e94\u8be5\u672c\u5730\u4e0a\u9001(local deliver)\u8fd8\u662f\u8f6c\u53d1(forward),\u5bf9\u672c\u673a\u53d1\u9001(local out)\u7684\u62a5\u6587\u9700\u8981\u786e\u5b9a\u662f\u4ece\u54ea\u4e2a\u7f51\u5361\u53d1\u9001\u51fa\u53bb\uff0c\u8fd9\u90fd\u662f\u5185\u6838\u901a\u8fc7\u67e5\u8be2 fib (forward information base, \u8f6c\u53d1\u4fe1\u606f\u8868) \u786e\u5b9a\u3002fib \u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u6570\u636e\u5e93\uff0c\u6570\u636e\u6765\u6e90\u662f\u7528\u6237\u914d\u7f6e\u6216\u8005\u5185\u6838\u81ea\u52a8\u751f\u6210\u7684\u8def\u7531\u3002 fib \u67e5\u8be2\u7684\u8f93\u5165\u662f\u62a5\u6587 sk_buff\uff0c\u8f93\u51fa\u662f dst_entry. dst_entry \u4f1a\u88ab\u8bbe\u7f6e\u5230 skb \u4e0a\uff1a static inline void skb_dst_set(struct sk_buff *skb, struct dst_entry *dst) { skb->_skb_refdst = (unsigned long)dst; } \u800c dst_entry \u4e2d\u6700\u91cd\u8981\u7684\u662f\u4e00\u4e2a input \u6307\u9488\u548c output \u6307\u9488\uff1a struct dst_entry { ...... int (*input)(struct sk_buff *); int (*output)(struct net *net, struct sock *sk, struct sk_buff *skb); ...... } \u5bf9\u4e8e\u9700\u8981\u672c\u673a\u4e0a\u9001\u7684\u62a5\u6587\uff1a rth->dst.input = ip_local_deliver; \u5bf9\u9700\u8981\u8f6c\u53d1\u7684\u62a5\u6587\uff1a rth->dst.input = ip_forward; \u5bf9\u672c\u673a\u53d1\u9001\u7684\u62a5\u6587\uff1a rth->dst.output = ip_output; (\u4e8c) \u6838\u5fc3\u51fd\u6570 L3->L4 \u6211\u4eec\u77e5\u9053\u7f51\u7edc\u534f\u8bae\u6808\u662f\u5206\u5c42\u7684\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u5177\u4f53\u5230\u5b9e\u73b0\uff0c\u5185\u6838\u534f\u8bae\u6808\u7684\u5206\u5c42\u53ea\u662f\u903b\u8f91\u4e0a\u7684\uff0c\u672c\u8d28\u8fd8\u662f\u51fd\u6570\u8c03\u7528\u3002\u53d1\u9001\u6d41\u7a0b(\u4e0a\u5c42\u8c03\u7528\u4e0b\u5c42)\u901a\u5e38\u662f\u76f4\u63a5\u8c03\u7528(\u56e0\u4e3a\u6ca1\u6709\u4e0d\u786e\u5b9a\u6027\uff0c\u6bd4\u5982 TCP \u77e5\u9053\u4e0b\u9762\u4e00\u5b9a IP)\uff0c\u4f46\u63a5\u6536\u8fc7\u7a0b\u4e0d\u4e00\u6837\u4e86\uff0c\u6bd4\u5982\u62a5\u6587\u5728 IP \u5c42\u65f6\uff0c\u5b83\u4e0a\u9762\u53ef\u80fd\u662f TCP\uff0c\u4e5f\u53ef\u80fd\u662f UDP\uff0c\u6216\u8005\u662f ICMP \u7b49\u7b49\uff0c\u6240\u4ee5\u63a5\u6536\u8fc7\u7a0b\u4f7f\u7528\u7684\u662f \u6ce8\u518c-\u56de\u8c03 \u673a\u5236 \u3002 \u8fd8\u662f\u4ee5 INET \u534f\u8bae\u7c07\u4e3a\u4f8b\uff0c\u6ce8\u518c\u63a5\u53e3\u662f\uff1a int inet_add_protocol(const struct net_protocol *prot, unsigned char protocol); \u5728\u5185\u6838\u7f51\u7edc\u5b50\u7cfb\u7edf\u521d\u59cb\u5316\u65f6\uff0cL4 \u5c42\u534f\u8bae(\u5982\u4e0b\u9762\u7684 TCP \u548c UDP)\u4f1a\u88ab\u6ce8\u518c\uff1a static struct net_protocol tcp_protocol = { ...... .handler = tcp_v4_rcv, ...... }; static struct net_protocol udp_protocol = { ..... .handler = udp_rcv, ..... }; ....... \u800c\u5728 IP \u5c42\uff0c\u67e5\u8be2\u8fc7\u8def\u7531\u540e\uff0c\u5982\u679c\u8be5\u62a5\u6587\u662f\u9700\u8981\u4e0a\u9001\u672c\u673a\u7684\uff0c\u5219\u4f1a\u6839\u636e\u62a5\u6587\u7684 L4 \u534f\u8bae\uff0c\u9001\u7ed9\u4e0d\u540c\u7684 L4 \u5904\u7406\uff1a static int ip_local_deliver_finish(struct net *net, struct sock *sk, struct sk_buff *skb) { ...... ipprot = rcu_dereference(inet_protos[protocol]); ...... ret = ipprot->handler(skb); ...... } ....... L2->L3 L2->L3 \u5982\u51fa\u4e00\u8f99\u3002\u53ea\u4e0d\u8fc7\u6ce8\u518c\u63a5\u53e3\u53d8\u6210\u4e86\uff1a void dev_add_pack(struct packet_type *pt) \u8c01\u4f1a\u6ce8\u518c\u5462\uff1f\u663e\u7136\u81f3\u5c11 IP \u4f1a\uff1a static struct packet_type ip_packet_type = { .type = cpu_to_be16(ETH_P_IP), .func = ip_rcv, } ....... \u800c\u5728\u62a5\u6587\u63a5\u6536\u8fc7\u7a0b\u4e2d\uff0c\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u4f1a\u5c06\u62a5\u6587\u7684 L3 \u7c7b\u578b\u8bbe\u7f6e\u5230 skb->protocol\uff0c\u7136\u540e\u5728\u5185\u6838 netif_receive_skb \u6536\u5305\u65f6\uff0c\u4f1a\u6839\u636e\u8fd9\u4e2a protocol \u8c03\u7528\u4e0d\u540c\u7684\u56de\u8c03\u51fd\u6570\uff1a __netif_receive_skb(struct sk_buff *skb) { ...... type = skb->protocol; ...... ret = pt_prev->func(skb, skb->dev, pt_prev, orig_dev); } ....... 1 ip_rcv \u901a\u8fc7 inet_protos \u6570\u7ec4 \u627e\u5230 tcp_v4_rcv \u6216\u8005 udp_rcv \u51fd\u6570 \u6267\u884c NetFilter Iptables \u5305\u8fc7\u6ee4 net/ipv4/ip_output.c /* * Main IP Receive routine. */ int ip_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt, struct net_device *orig_dev) { const struct iphdr *iph; u32 len; /* When the interface is in promisc. mode, drop all the crap * that it receives, do not try to analyse it. */ if (skb->pkt_type == PACKET_OTHERHOST) goto drop; IP_UPD_PO_STATS_BH(dev_net(dev), IPSTATS_MIB_IN, skb->len); if ((skb = skb_share_check(skb, GFP_ATOMIC)) == NULL) { IP_INC_STATS_BH(dev_net(dev), IPSTATS_MIB_INDISCARDS); goto out; } if (!pskb_may_pull(skb, sizeof(struct iphdr))) goto inhdr_error; iph = ip_hdr(skb); /* * RFC1122: 3.2.1.2 MUST silently discard any IP frame that fails the checksum. * * Is the datagram acceptable? * * 1. Length at least the size of an ip header * 2. Version of 4 * 3. Checksums correctly. [Speed optimisation for later, skip loopback checksums] * 4. Doesn't have a bogus length */ if (iph->ihl < 5 || iph->version != 4) goto inhdr_error; BUILD_BUG_ON(IPSTATS_MIB_ECT1PKTS != IPSTATS_MIB_NOECTPKTS + INET_ECN_ECT_1); BUILD_BUG_ON(IPSTATS_MIB_ECT0PKTS != IPSTATS_MIB_NOECTPKTS + INET_ECN_ECT_0); BUILD_BUG_ON(IPSTATS_MIB_CEPKTS != IPSTATS_MIB_NOECTPKTS + INET_ECN_CE); IP_ADD_STATS_BH(dev_net(dev), IPSTATS_MIB_NOECTPKTS + (iph->tos & INET_ECN_MASK), max_t(unsigned short, 1, skb_shinfo(skb)->gso_segs)); if (!pskb_may_pull(skb, iph->ihl*4)) goto inhdr_error; iph = ip_hdr(skb); if (unlikely(ip_fast_csum((u8 *)iph, iph->ihl))) goto csum_error; len = ntohs(iph->tot_len); if (skb->len < len) { IP_INC_STATS_BH(dev_net(dev), IPSTATS_MIB_INTRUNCATEDPKTS); goto drop; } else if (len < (iph->ihl*4)) goto inhdr_error; /* Our transport medium may have padded the buffer out. Now we know it * is IP we can trim to the true length of the frame. * Note this now means skb->len holds ntohs(iph->tot_len). */ if (pskb_trim_rcsum(skb, len)) { IP_INC_STATS_BH(dev_net(dev), IPSTATS_MIB_INDISCARDS); goto drop; } skb->transport_header = skb->network_header + iph->ihl*4; /* Remove any debris in the socket control block */ memset(IPCB(skb), 0, sizeof(struct inet_skb_parm)); /* Must drop socket now because of tproxy. */ skb_orphan(skb); return NF_HOOK(NFPROTO_IPV4, NF_INET_PRE_ROUTING, skb, dev, NULL, ip_rcv_finish); csum_error: IP_INC_STATS_BH(dev_net(dev), IPSTATS_MIB_CSUMERRORS); inhdr_error: IP_INC_STATS_BH(dev_net(dev), IPSTATS_MIB_INHDRERRORS); drop: kfree_skb(skb); out: return NET_RX_DROP; } 2 tcp_v4_rcv 4 udp_rcv 5 napi_schedule \u7cfb\u5217\u51fd\u6570 5.1 napi_schedule include/linux/netdevice.h:416:static inline void napi_schedule(struct napi_struct *n) /** * napi_schedule - schedule NAPI poll * @n: napi context * * Schedule NAPI poll routine to be called if it is not already * running. */ static inline void napi_schedule(struct napi_struct *n) { if (napi_schedule_prep(n)) __napi_schedule(n); } 5.2 __napi_schedule include/linux/netdevice.h /** * __napi_schedule - schedule for receive * @n: entry to schedule * * The entry's receive function will be scheduled to run */ void __napi_schedule(struct napi_struct *n) { unsigned long flags; local_irq_save(flags); ____napi_schedule(&__get_cpu_var(softnet_data), n); local_irq_restore(flags); } EXPORT_SYMBOL(__napi_schedule); 5.3 ____napi_schedule net/core/dev.c:3009:static inline void ____napi_schedule /* Called with irq disabled */ static inline void ____napi_schedule(struct softnet_data *sd, struct napi_struct *napi) { list_add_tail(&napi->poll_list, &sd->poll_list); __raise_softirq_irqoff(NET_RX_SOFTIRQ); } 6 dev_hard_start_xmit \u771f\u6b63\u63d0\u4ea4\u7ed9\u786c\u4ef6\u7f51\u5361\u53d1\u5305\u51fd\u6570 net/core/dev.c int dev_hard_start_xmit(struct sk_buff *skb, struct net_device *dev, struct netdev_queue *txq) { const struct net_device_ops *ops = dev->netdev_ops; int rc = NETDEV_TX_OK; unsigned int skb_len; if (likely(!skb->next)) { netdev_features_t features; /* * If device doesn't need skb->dst, release it right now while * its hot in this cpu cache */ if (dev->priv_flags & IFF_XMIT_DST_RELEASE) skb_dst_drop(skb); features = netif_skb_features(skb); if (vlan_tx_tag_present(skb) && !vlan_hw_offload_capable(features, skb->vlan_proto)) { skb = __vlan_put_tag(skb, skb->vlan_proto, vlan_tx_tag_get(skb)); if (unlikely(!skb)) goto out; skb->vlan_tci = 0; } /* If encapsulation offload request, verify we are testing * hardware encapsulation features instead of standard * features for the netdev */ if (skb->encapsulation) features &= dev->hw_enc_features; if (netif_needs_gso(skb, features)) { if (unlikely(dev_gso_segment(skb, features))) goto out_kfree_skb; if (skb->next) goto gso; } else { if (skb_needs_linearize(skb, features) && __skb_linearize(skb)) goto out_kfree_skb; /* If packet is not checksummed and device does not * support checksumming for this protocol, complete * checksumming here. */ if (skb->ip_summed == CHECKSUM_PARTIAL) { if (skb->encapsulation) skb_set_inner_transport_header(skb, skb_checksum_start_offset(skb)); else skb_set_transport_header(skb, skb_checksum_start_offset(skb)); if (!(features & NETIF_F_ALL_CSUM) && skb_checksum_help(skb)) goto out_kfree_skb; } } if (!list_empty(&ptype_all)) dev_queue_xmit_nit(skb, dev); skb_len = skb->len; trace_net_dev_start_xmit(skb, dev); rc = ops->ndo_start_xmit(skb, dev); trace_net_dev_xmit(skb, rc, dev, skb_len); if (rc == NETDEV_TX_OK) txq_trans_update(txq); return rc; } gso: do { struct sk_buff *nskb = skb->next; skb->next = nskb->next; nskb->next = NULL; if (!list_empty(&ptype_all)) dev_queue_xmit_nit(nskb, dev); skb_len = nskb->len; trace_net_dev_start_xmit(nskb, dev); rc = ops->ndo_start_xmit(nskb, dev); trace_net_dev_xmit(nskb, rc, dev, skb_len); if (unlikely(rc != NETDEV_TX_OK)) { if (rc & ~NETDEV_TX_MASK) goto out_kfree_gso_skb; nskb->next = skb->next; skb->next = nskb; return rc; } txq_trans_update(txq); if (unlikely(netif_xmit_stopped(txq) && skb->next)) return NETDEV_TX_BUSY; } while (skb->next); out_kfree_gso_skb: if (likely(skb->next == NULL)) { skb->destructor = DEV_GSO_CB(skb)->destructor; consume_skb(skb); return rc; } out_kfree_skb: kfree_skb(skb); out: return rc; } EXPORT_SYMBOL_GPL(dev_hard_start_xmit); 7 tcp_transmit_skb \u662f\u53d1\u9001\u6570\u636e\u4f4d\u4e8e\u4f20\u8f93\u5c42\u7684\u6700\u540e\u4e00\u6b65 \u5e76\u4e14\u5728 tcp_connect \u51fd\u6570\u4e2d\u4e00\u5f00\u59cb\u53d1\u9001 SYN \u62a5\u6587\u65f6\u4e5f\u7528\u5230\u8be5\u51fd\u6570. //file: net/ipv4/tcp_output.c static int tcp_transmit_skb(struct sock *sk, struct sk_buff *skb, int clone_it, gfp_t gfp_mask) { //1.\u514b\u9686\u65b0 skb \u51fa\u6765 if (likely(clone_it)) { skb = skb_clone(skb, gfp_mask); ...... } //2.\u5c01\u88c5 TCP \u5934 th = tcp_hdr(skb); th->source = inet->inet_sport; th->dest = inet->inet_dport; th->window = ...; th->urg = ...; ...... //3.\u8c03\u7528\u7f51\u7edc\u5c42\u53d1\u9001\u63a5\u53e3 err = icsk->icsk_af_ops->queue_xmit(skb, &inet->cork.fl); } \u4e8c \u53d1\u5305\u8def\u5f84 1 \u67b6\u6784\u56fe\u548c\u603b\u4f53\u7eb2\u9886 2 \u786c\u4e2d\u65ad\u4ee3\u7801 \u8fd9\u91cc\u548c \u6536\u5305\u8def\u5f84 \u7684\u786c\u4e2d\u65ad\u4ee3\u7801\u76f8\u540c 3 \u5185\u6838\u4e8b\u5148\u505a\u4e86\u54ea\u4e9b\u51c6\u5907\u5de5\u4f5c 4 \u5177\u4f53\u8def\u5f84 4.1 \u534f\u8bae\u6808 4.2 \u90bb\u5c45\u5b50\u7cfb\u7edf \u90bb\u5c45\u5b50\u7cfb\u7edf \u5d4c\u5165\u5728 \u7f51\u7edc\u5c42 \u548c \u6570\u636e\u94fe\u8def\u5c42 \u4e4b\u95f4\uff08\uff0c\u53ef\u4ee5\u5bf9\u4e0a\u548c\u5bf9\u4e0b\u63d0\u4f9b\u4e00\u4e2a\u7edf\u4e00\u7684\u63a5\u53e3\uff0c\u8ba9\u4e24\u5c42\u95f4\u7684\u901a\u4fe1\u53d8\u7684\u900f\u660e\u3002\u5f53\u7136\u8fd9\u91cc\u9762\u6709\u5f88\u5927\u4e00\u90e8\u5206\u539f\u56e0\u5f97\u5f52\u529f\u4e8e\u5730\u5740\u89e3\u6790\u534f\u8bae\uff08ARP\uff09 L3 \u7684\u662f\u903b\u8f91\u5730\u5740\uff0cL2 \u7684\u662f\u7269\u7406\u5730\u5740\uff0c\u9700\u8981\u505a\u7684\u5c31\u662f\u5b9e\u73b0\u8fd9\u4e24\u4e2a\u5730\u5740\u7684\u6620\u5c04\u3002\u5728 Linux \u5185\u6838\u4e2d\u628a\u5b83\u5355\u72ec\u505a\u6210\u5b50\u7cfb\u7edf\u539f\u56e0\u662f\u7f51\u7edc\u5c42\u4e0d\u6b62\u6709 ipv4\uff0c\u8fd8\u6709\u5176\u4ed6\u534f\u8bae\uff0c\u5982\u679c\u4e3a\u6bcf\u4e2a L3 \u534f\u8bae\u505a\u5355\u72ec\u5f00\u53d1\u4f1a\u6709\u4e00\u4e9b\u91cd\u590d\u52b3\u52a8\uff0c\u56e0\u6b64\u63d0\u70bc\u4e00\u4e9b\u901a\u7528\u6570\u636e\u7ed3\u6784\u51cf\u5c11\u8fd9\u4e9b\u91cd\u590d\u52b3\u52a8. 4.3 \u7f51\u7edc\u8bbe\u5907\u5b50\u7cfb\u7edf \u4e24\u5927\u6838\u5fc3\u51fd\u6570: dev_queue_xmit \u548c dev_hard_start_xmit \u4e24\u5927\u6838\u5fc3\u4f5c\u7528: \u67e5\u627e\u4e00\u4e2a\u5408\u9002\u7f51\u5361\u961f\u5217\u8fdb\u884c\u53d1\u9001(\u56e0\u4e3a\u73b0\u5728\u7f51\u5361\u90fd\u662f\u591a\u961f\u5217) \u6267\u884c tc\uff08\u6d41\u91cf\u63a7\u5236\uff09 4.4 \u5177\u4f53\u9a71\u52a8\u7a0b\u5e8f \u4e09 \u6536\u5305\u8def\u5f84 1 \u67b6\u6784\u56fe\u548c\u603b\u4f53\u7eb2\u9886 2 \u786c\u4e2d\u65ad\u4ee3\u7801 \u4ee5 igb \u7f51\u5361\u4e3a\u4f8b //file: drivers/net/ethernet/intel/igb/igb_main.c static irqreturn_t igb_msix_ring(int irq, void \\*data){ struct igb_q_vector *q_vector = data; /* Write the ITR value calculated from the previous interrupt. */ igb_write_itr(q_vector); napi_schedule(&q_vector->napi); return IRQ_HANDLED; } 2.1 \u7f51\u5361\u786c\u4e2d\u65ad\u6d41\u7a0b \u6b65\u9aa4 \u51fd\u6570 \u662f\u5426\u5f00\u542f\u786c\u4e2d\u65ad 1 do_IRQ() 3 2 handle_IRQ_event() 3 3 \u9a71\u52a8\u7a0b\u5e8f\u63d0\u4f9b\u7684 rtc_interrupt 3 4 do_softirq 3 5 net_rx_action 3 3 \u4e3a\u4e86\u5b9e\u73b0\u8f6f\u4e2d\u65ad\u5185\u6838\u505a\u4e86\u54ea\u4e9b\u51c6\u5907\u5de5\u4f5c 3.1 \u5f00\u542f ksoftirqd \u7ebf\u7a0b \u4e3a\u4ec0\u4e48\u8981\u521b\u5efa\u8fd9\u4e2a\u7ebf\u7a0b\uff1f \u56e0\u4e3a\u8981\u5229\u7528\u8fd9\u4e2a\u7ebf\u7a0b\u53bb\u8dd1\u8f6f\u4e2d\u65ad. \u6bcf\u4e2a\u8f6f\u4e2d\u65ad\u6709\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570 \u8f6f\u4e2d\u65ad\u53f7 \u5904\u7406\u51fd\u6570 \u6ce8\u610f\u70b9 NET_TX_SOFTIRQ net_tx_action NET_RX_SOFTIRQ net_rx_action 3.2 \u7edf\u4e00\u5b9e\u73b0\u3001\u7edf\u4e00\u6ce8\u518c\u534f\u8bae\u5904\u7406\u51fd\u6570 3.2.1 \u5b9e\u73b0 \u534f\u8bae \uff08\u63a5\u6536\u65b9\u5411\uff09\u5904\u7406\u51fd\u6570 \u6ce8\u610f\u70b9 ip ip_rcv tcp tcp_v4_rcv udp udp_rcv 3.2.1 \u6ce8\u518c inet_protos \u6570\u7ec4 \u8bb0\u5f55\u7740 udp\uff0ctcp \u7684\u5904\u7406\u51fd\u6570\u5730\u5740\uff0c ptype_base \u54c8\u5e0c\u8868 \u5b58\u50a8\u7740 ip_rcv() \u51fd\u6570\u7684\u5904\u7406\u5730\u5740\u3002 \u5185\u6838\u5b9e\u73b0\u4e86\u7f51\u7edc\u5c42\u7684 ip \u534f\u8bae\uff0c\u4e5f\u5b9e\u73b0\u4e86\u4f20\u8f93\u5c42\u7684 tcp \u534f\u8bae\u548c udp \u534f\u8bae\u3002\u8fd9\u4e9b\u534f\u8bae\u5bf9\u5e94\u7684\u5b9e\u73b0\u51fd\u6570\u5206\u522b\u662f ip_rcv(),tcp_v4_rcv()\u548c udp_rcv()\u3002\u548c\u6211\u4eec\u5e73\u65f6\u5199\u4ee3\u7801\u7684\u65b9\u5f0f\u4e0d\u4e00\u6837\u7684\u662f\uff0c\u5185\u6838\u662f\u901a\u8fc7\u6ce8\u518c\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u7684\u3002Linux \u5185\u6838\u4e2d\u7684 fs_initcall \u548c subsys_initcall \u7c7b\u4f3c\uff0c\u4e5f\u662f\u521d\u59cb\u5316\u6a21\u5757\u7684\u5165\u53e3\u3002fs_initcall \u8c03\u7528 inet_init \u540e\u5f00\u59cb\u7f51\u7edc\u534f\u8bae\u6808\u6ce8\u518c\u3002\u901a\u8fc7 inet_init\uff0c\u5c06\u8fd9\u4e9b\u51fd\u6570\u6ce8\u518c\u5230\u4e86 inet_protos \u548c ptype_base \u6570\u636e\u7ed3\u6784\u4e2d\u4e86\u3002\u5982\u4e0b\u56fe: \u76f8\u5173\u4ee3\u7801\u5982\u4e0b //file: net/ipv4/af_inet.c static struct packet_type ip_packet_type __read_mostly = { .type = cpu_to_be16(ETH_P_IP), .func = ip_rcv }; static const struct net_protocol udp_protocol = { .handler = udp_rcv, .err_handler = udp_err, .no_policy = 1, .netns_ok = 1 }; static const struct net_protocol tcp_protocol = { .early_demux = tcp_v4_early_demux, .handler = tcp_v4_rcv, .err_handler = tcp_v4_err, .no_policy = 1, .netns_ok = 1, }; static int __init inet_init(void){ ...... if (inet_add_protocol(&icmp_protocol, IPPROTO_ICMP) < 0) pr_crit(\"%s: Cannot add ICMP protocol\\n\", __func__); if (inet_add_protocol(&udp_protocol, IPPROTO_UDP) < 0) pr_crit(\"%s: Cannot add UDP protocol\\n\", __func__); if (inet_add_protocol(&tcp_protocol, IPPROTO_TCP) < 0) pr_crit(\"%s: Cannot add TCP protocol\\n\", __func__); ...... dev_add_pack(&ip_packet_type); } \u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c udp_protocol \u7ed3\u6784\u4f53\u4e2d\u7684 handler \u662f udp_rcv \uff0c tcp_protocol \u7ed3\u6784\u4f53\u4e2d\u7684 handler \u662f tcp_v4_rcv \uff0c\u901a\u8fc7 inet_add_protocol \u88ab\u521d\u59cb\u5316\u4e86\u8fdb\u6765\u3002 int inet_add_protocol(const struct net_protocol \\*prot, unsigned char protocol){ if (!prot->netns_ok) { pr_err(\"Protocol %u is not namespace aware, cannot register.\\n\", protocol); return -EINVAL; } return !cmpxchg((const struct net_protocol **)&inet_protos[protocol], NULL, prot) ? 0 : -1; } inet_add_protocol \u51fd\u6570\u5c06 tcp \u548c udp \u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570\u90fd\u6ce8\u518c\u5230\u4e86 inet_protos \u6570\u7ec4\u4e2d\u4e86\u3002\u518d\u770b dev_add_pack(&ip_packet_type); \u8fd9\u4e00\u884c\uff0cip_packet_type \u7ed3\u6784\u4f53\u4e2d\u7684 type \u662f\u534f\u8bae\u540d\uff0cfunc \u662f ip_rcv \u51fd\u6570\uff0c\u5728 dev_add_pack \u4e2d\u4f1a\u88ab\u6ce8\u518c\u5230 ptype_base \u54c8\u5e0c\u8868\u4e2d\u3002 //file: net/core/dev.c void dev_add_pack(struct packet_type \\*pt){ struct list_head *head = ptype_head(pt); ...... } static inline struct list_head *ptype_head(const struct packet_type *pt){ if (pt->type == htons(ETH_P_ALL)) return &ptype_all; else return &ptype_base[ntohs(pt->type) & PTYPE_HASH_MASK]; } \u8fd9\u91cc\u6211\u4eec\u9700\u8981\u8bb0\u4f4f inet_protos \u8bb0\u5f55\u7740 udp\uff0ctcp \u7684\u5904\u7406\u51fd\u6570\u5730\u5740\uff0cptype_base \u5b58\u50a8\u7740 ip_rcv()\u51fd\u6570\u7684\u5904\u7406\u5730\u5740 \u3002\u540e\u9762\u6211\u4eec\u4f1a\u770b\u5230 \u8f6f\u4e2d\u65ad\u4e2d\u4f1a\u901a\u8fc7 ptype_base \u627e\u5230 ip_rcv \u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u5c06 ip \u5305\u6b63\u786e\u5730\u9001\u5230 ip_rcv()\u4e2d\u6267\u884c \u3002 \u5728 ip_rcv \u4e2d\u5c06\u4f1a\u901a\u8fc7 inet_protos \u627e\u5230 tcp \u6216\u8005 udp \u7684\u5904\u7406\u51fd\u6570\uff0c\u518d\u800c\u628a\u5305\u8f6c\u53d1\u7ed9 udp_rcv()\u6216 tcp_v4_rcv()\u51fd\u6570 \u3002 \u6269\u5c55\u4e00\u4e0b\uff0c\u5982\u679c\u770b\u4e00\u4e0b ip_rcv \u548c udp_rcv \u7b49\u51fd\u6570\u7684\u4ee3\u7801\u80fd\u770b\u5230\u5f88\u591a\u534f\u8bae\u7684\u5904\u7406\u8fc7\u7a0b\u3002\u4f8b\u5982\uff0c ip_rcv \u4e2d\u4f1a\u5904\u7406 netfilter \u548c iptable \u8fc7\u6ee4\uff0c\u5982\u679c\u4f60\u6709\u5f88\u591a\u6216\u8005\u5f88\u590d\u6742\u7684 netfilter \u6216 iptables \u89c4\u5219\uff0c\u8fd9\u4e9b\u89c4\u5219\u90fd\u662f\u5728\u8f6f\u4e2d\u65ad\u7684\u4e0a\u4e0b\u6587\u4e2d\u6267\u884c\u7684\uff0c\u4f1a\u52a0\u5927\u7f51\u7edc\u5ef6\u8fdf\u3002 \u518d\u4f8b\u5982\uff0cudp_rcv \u4e2d\u4f1a\u5224\u65ad socket \u63a5\u6536\u961f\u5217\u662f\u5426\u6ee1\u4e86\u3002\u5bf9\u5e94\u7684\u76f8\u5173\u5185\u6838\u53c2\u6570\u662f net.core.rmem_max \u548c net.core.rmem_default\u3002\u5982\u679c\u6709\u5174\u8da3\uff0c\u5efa\u8bae\u5927\u5bb6\u597d\u597d\u8bfb\u4e00\u4e0b inet_init \u8fd9\u4e2a\u51fd\u6570\u7684\u4ee3\u7801\u3002 4 \u5177\u4f53\u8def\u5f84 4.0 \u7b80\u5316\u7248\u672c: \u786c\u4e2d\u65ad(igb_msix_ring) ---> napi_schedule()\u51fd\u6570 ---> \u89e6\u53d1\u8f6f\u4e2d\u65ad( __raise_softirq_irqoff ) \u8f6f\u4e2d\u65ad(net_rx_action) ---> \u7279\u5b9a\u4e8e\u7f51\u5361\u7684 igb_poll()\u51fd\u6570 ---> napi_gro_receive ---> netif_receive_skb ---> ip_rcv 4.1 \u786c\u4e2d\u65ad\u4e4b\u524d\u548c\u786c\u4e2d\u65ad\u7684\u5de5\u4f5c \u9996\u5148\u5f53\u6570\u636e\u5e27\u4ece\u7f51\u7ebf\u5230\u8fbe\u7f51\u5361\u4e0a\u7684\u65f6\u5019\uff0c\u7b2c\u4e00\u7ad9\u662f\u7f51\u5361\u7684\u63a5\u6536\u961f\u5217\u3002\u7f51\u5361\u5728\u5206\u914d\u7ed9\u81ea\u5df1\u7684 RingBuffer \u4e2d\u5bfb\u627e\u53ef\u7528\u7684\u5185\u5b58\u4f4d\u7f6e\uff0c\u627e\u5230\u540e DMA \u5f15\u64ce\u4f1a\u628a\u6570\u636e DMA \u5230\u7f51\u5361\u4e4b\u524d\u5173\u8054\u7684\u5185\u5b58\u91cc\uff0c \u8fd9\u4e2a\u65f6\u5019 CPU \u90fd\u662f\u65e0\u611f\u7684\u3002 \u5f53 DMA \u64cd\u4f5c\u5b8c\u6210\u4ee5\u540e\uff0c \u7f51\u5361\u4f1a\u5411 CPU \u53d1\u8d77\u4e00\u4e2a\u786c\u4e2d\u65ad \uff0c\u901a\u77e5 CPU \u6709\u6570\u636e\u5230\u8fbe\u3002 \u6ce8\u610f\uff1a\u5f53 RingBuffer \u6ee1\u7684\u65f6\u5019\uff0c\u65b0\u6765\u7684\u6570\u636e\u5305\u5c06\u7ed9\u4e22\u5f03\u3002ifconfig \u67e5\u770b\u7f51\u5361\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u91cc\u9762\u6709\u4e2a overruns\uff0c\u8868\u793a\u56e0\u4e3a\u73af\u5f62\u961f\u5217\u6ee1\u88ab\u4e22\u5f03\u7684\u5305\u3002\u5982\u679c\u53d1\u73b0\u6709\u4e22\u5305\uff0c\u53ef\u80fd\u9700\u8981\u901a\u8fc7 ethtool \u547d\u4ee4\u6765\u52a0\u5927\u73af\u5f62\u961f\u5217\u7684\u957f\u5ea6\u3002 \u5728\u542f\u52a8\u7f51\u5361\u4e00\u8282\uff0c\u6211\u4eec\u8bf4\u5230\u4e86\u7f51\u5361\u7684\u786c\u4e2d\u65ad\u6ce8\u518c\u7684\u5904\u7406\u51fd\u6570\u662f igb_msix_ring\u3002 //file: drivers/net/ethernet/intel/igb/igb_main.c static irqreturn_t igb_msix_ring(int irq, void \\*data){ struct igb_q_vector *q_vector = data; /* Write the ITR value calculated from the previous interrupt. */ igb_write_itr(q_vector); napi_schedule(&q_vector->napi); return IRQ_HANDLED; } igb_write_itr \u53ea\u662f\u8bb0\u5f55\u4e00\u4e0b\u786c\u4ef6\u4e2d\u65ad\u9891\u7387\uff08\u636e\u8bf4\u76ee\u7684\u662f\u5728\u51cf\u5c11\u5bf9 CPU \u7684\u4e2d\u65ad\u9891\u7387\u65f6\u7528\u5230\uff09\u3002\u987a\u7740 napi_schedule \u8c03\u7528\u4e00\u8def\u8ddf\u8e2a\u4e0b\u53bb\uff0c __napi_schedule=>____napi_schedule /* Called with irq disabled */ static inline void ____napi_schedule(struct softnet_data \\*sd, struct napi_struct *napi){ list_add_tail(&napi->poll_list, &sd->poll_list); __raise_softirq_irqoff(NET_RX_SOFTIRQ); } \u8fd9\u91cc\u6211\u4eec\u770b\u5230\uff0c list_add_tail \u4fee\u6539\u4e86 CPU \u53d8\u91cf softnet_data \u91cc\u7684 poll_list\uff0c\u5c06\u9a71\u52a8 napi_struct \u4f20\u8fc7\u6765\u7684 poll_list \u6dfb\u52a0\u4e86\u8fdb\u6765\u3002\u5176\u4e2d softnet_data \u4e2d\u7684 poll_list \u662f\u4e00\u4e2a\u53cc\u5411\u5217\u8868\uff0c\u5176\u4e2d\u7684\u8bbe\u5907\u90fd\u5e26\u6709\u8f93\u5165\u5e27\u7b49\u7740\u88ab\u5904\u7406\u3002\u7d27\u63a5\u7740 __raise_softirq_irqoff \u89e6\u53d1\u4e86\u4e00\u4e2a\u8f6f\u4e2d\u65ad NET_RX_SOFTIRQ\uff0c \u8fd9\u4e2a\u6240\u8c13\u7684\u89e6\u53d1\u8fc7\u7a0b\u53ea\u662f\u5bf9\u4e00\u4e2a\u53d8\u91cf\u8fdb\u884c\u4e86\u4e00\u6b21\u6216\u8fd0\u7b97\u800c\u5df2\u3002 void __raise_softirq_irqoff(unsigned int nr){ trace_softirq_raise(nr); or_softirq_pending(1UL << nr); } //file: include/linux/irq_cpustat.h #define or_softirq_pending(x) (local_softirq_pending() |= (x)) \u6211\u4eec\u8bf4\u8fc7\uff0cLinux \u5728\u786c\u4e2d\u65ad\u91cc\u53ea\u5b8c\u6210\u7b80\u5355\u5fc5\u8981\u7684\u5de5\u4f5c\uff0c\u5269\u4e0b\u7684\u5927\u90e8\u5206\u7684\u5904\u7406\u90fd\u662f\u8f6c\u4ea4\u7ed9\u8f6f\u4e2d\u65ad\u7684\u3002\u901a\u8fc7\u4e0a\u9762\u4ee3\u7801\u53ef\u4ee5\u770b\u5230\uff0c\u786c\u4e2d\u65ad\u5904\u7406\u8fc7\u7a0b\u771f\u7684\u662f\u975e\u5e38\u77ed\u3002\u53ea\u662f\u8bb0\u5f55\u4e86\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u4fee\u6539\u4e86\u4e00\u4e0b\u4e0b CPU \u7684 poll_list\uff0c\u7136\u540e\u53d1\u51fa\u4e2a\u8f6f\u4e2d\u65ad\u3002\u5c31\u8fd9\u4e48\u7b80\u5355\uff0c\u786c\u4e2d\u65ad\u5de5\u4f5c\u5c31\u7b97\u662f\u5b8c\u6210\u4e86\u3002 4.2 \u8f6f\u4e2d\u65ad\u7684\u5de5\u4f5c 4.2.1 \u8fdb\u5165\u534f\u8bae\u6808\u4e4b\u524d\u7684\u5de5\u4f5c(netif_receive_skb \u4e4b\u524d) \u5185\u6838\u7ebf\u7a0b\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86 ksoftirqd \u4e2d\u4e24\u4e2a\u7ebf\u7a0b\u51fd\u6570 ksoftirqd_should_run \u548c run_ksoftirqd\u3002\u5176\u4e2d ksoftirqd_should_run \u4ee3\u7801\u5982\u4e0b\uff1a static int ksoftirqd_should_run(unsigned int cpu){ return local_softirq_pending(); } #define local_softirq_pending() \\ **IRQ_STAT(smp_processor_id(), **softirq_pending) \u8fd9\u91cc\u770b\u5230\u548c\u786c\u4e2d\u65ad\u4e2d\u8c03\u7528\u4e86\u540c\u4e00\u4e2a\u51fd\u6570 local_softirq_pending\u3002\u4f7f\u7528\u65b9\u5f0f\u4e0d\u540c\u7684\u662f\u786c\u4e2d\u65ad\u4f4d\u7f6e\u662f\u4e3a\u4e86\u5199\u5165\u6807\u8bb0\uff0c\u8fd9\u91cc\u4ec5\u4ec5\u53ea\u662f\u8bfb\u53d6\u3002\u5982\u679c\u786c\u4e2d\u65ad\u4e2d\u8bbe\u7f6e\u4e86 NET_RX_SOFTIRQ,\u8fd9\u91cc\u81ea\u7136\u80fd\u8bfb\u53d6\u7684\u5230\u3002\u63a5\u4e0b\u6765\u4f1a\u771f\u6b63\u8fdb\u5165\u7ebf\u7a0b\u51fd\u6570\u4e2d run_ksoftirqd \u5904\u7406\uff1a static void run_ksoftirqd(unsigned int cpu){ local_irq_disable(); if (local_softirq_pending()) { __do_softirq(); rcu_note_context_switch(cpu); local_irq_enable(); cond_resched(); return; } local_irq_enable(); } \u5728 __do_softirq \u4e2d\uff0c\u5224\u65ad\u6839\u636e\u5f53\u524d CPU \u7684\u8f6f\u4e2d\u65ad\u7c7b\u578b\uff0c\u8c03\u7528\u5176\u6ce8\u518c\u7684 action \u65b9\u6cd5\u3002 asmlinkage void __do_softirq(void){ do { if (pending & 1) { unsigned int vec_nr = h - softirq_vec; int prev_count = preempt_count(); ... trace_softirq_entry(vec_nr); h->action(h); trace_softirq_exit(vec_nr); ... } h++; pending >>= 1; } while (pending); } \u5728\u7f51\u7edc\u5b50\u7cfb\u7edf\u521d\u59cb\u5316\u5c0f\u8282\uff0c \u6211\u4eec\u770b\u5230\u6211\u4eec\u4e3a NET_RX_SOFTIRQ \u6ce8\u518c\u4e86\u5904\u7406\u51fd\u6570 net_rx_action\u3002\u6240\u4ee5 net_rx_action \u51fd\u6570\u5c31\u4f1a\u88ab\u6267\u884c\u5230\u4e86\u3002 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u4e00\u4e2a\u7ec6\u8282\uff0c\u786c\u4e2d\u65ad\u4e2d\u8bbe\u7f6e\u8f6f\u4e2d\u65ad\u6807\u8bb0\uff0c\u548c ksoftirq \u7684\u5224\u65ad\u662f\u5426\u6709\u8f6f\u4e2d\u65ad\u5230\u8fbe\uff0c\u90fd\u662f\u57fa\u4e8e smp_processor_id()\u7684\u3002\u8fd9\u610f\u5473\u7740\u53ea\u8981\u786c\u4e2d\u65ad\u5728\u54ea\u4e2a CPU \u4e0a\u88ab\u54cd\u5e94\uff0c\u90a3\u4e48\u8f6f\u4e2d\u65ad\u4e5f\u662f\u5728\u8fd9\u4e2a CPU \u4e0a\u5904\u7406\u7684\u3002\u6240\u4ee5\u8bf4\uff0c\u5982\u679c\u4f60\u53d1\u73b0\u4f60\u7684 Linux \u8f6f\u4e2d\u65ad CPU \u6d88\u8017\u90fd\u96c6\u4e2d\u5728\u4e00\u4e2a\u6838\u4e0a\u7684\u8bdd\uff0c\u505a\u6cd5\u662f\u8981\u628a\u8c03\u6574\u786c\u4e2d\u65ad\u7684 CPU \u4eb2\u548c\u6027\uff0c\u6765\u5c06\u786c\u4e2d\u65ad\u6253\u6563\u5230\u4e0d\u540c\u7684 CPU \u6838\u4e0a\u53bb\u3002 \u6211\u4eec\u518d\u6765\u628a\u7cbe\u529b\u96c6\u4e2d\u5230\u8fd9\u4e2a\u6838\u5fc3\u51fd\u6570 net_rx_action \u4e0a\u6765\u3002 static void net_rx_action(struct softirq_action *h){ struct softnet_data *sd = &__get_cpu_var(softnet_data); unsigned long time_limit = jiffies + 2; int budget = netdev_budget; void \\*have; local_irq_disable(); while (!list_empty(&sd->poll_list)) { ...... n = list_first_entry(&sd->poll_list, struct napi_struct, poll_list); work = 0; if (test_bit(NAPI_STATE_SCHED, &n->state)) { work = n->poll(n, weight); trace_napi_poll(n); } budget -= work; } } \u51fd\u6570\u5f00\u5934\u7684 time_limit \u548c budget \u662f\u7528\u6765\u63a7\u5236 net_rx_action \u51fd\u6570\u4e3b\u52a8\u9000\u51fa\u7684\uff0c\u76ee\u7684\u662f\u4fdd\u8bc1\u7f51\u7edc\u5305\u7684\u63a5\u6536\u4e0d\u9738\u5360 CPU \u4e0d\u653e\u3002\u7b49\u4e0b\u6b21\u7f51\u5361\u518d\u6709\u786c\u4e2d\u65ad\u8fc7\u6765\u7684\u65f6\u5019\u518d\u5904\u7406\u5269\u4e0b\u7684\u63a5\u6536\u6570\u636e\u5305\u3002\u5176\u4e2d budget \u53ef\u4ee5\u901a\u8fc7\u5185\u6838\u53c2\u6570\u8c03\u6574\u3002\u8fd9\u4e2a\u51fd\u6570\u4e2d\u5269\u4e0b\u7684\u6838\u5fc3\u903b\u8f91\u662f\u83b7\u53d6\u5230\u5f53\u524d CPU \u53d8\u91cf softnet_data\uff0c\u5bf9\u5176 poll_list \u8fdb\u884c\u904d\u5386, \u7136\u540e\u6267\u884c\u5230\u7f51\u5361\u9a71\u52a8\u6ce8\u518c\u5230\u7684 poll \u51fd\u6570\u3002\u5bf9\u4e8e igb \u7f51\u5361\u6765\u8bf4\uff0c\u5c31\u662f igb \u9a71\u52a8\u529b\u7684 igb_poll \u51fd\u6570\u4e86\u3002 static int igb_poll(struct napi_struct \\*napi, int budget){ ... if (q_vector->tx.ring) clean_complete = igb_clean_tx_irq(q_vector); if (q_vector->rx.ring) clean_complete &= igb_clean_rx_irq(q_vector, budget); ... } \u5728\u8bfb\u53d6\u64cd\u4f5c\u4e2d\uff0c igb_poll \u7684\u91cd\u70b9\u5de5\u4f5c\u662f\u5bf9 igb_clean_rx_irq \u7684\u8c03\u7528\u3002 static bool igb_clean_rx_irq(struct igb_q_vector _q_vector, const int budget){ ... do { /_ retrieve a buffer from the ring \\*/ skb = igb_fetch_rx_buffer(rx_ring, rx_desc, skb); /* fetch next buffer in frame if non-eop */ if (igb_is_non_eop(rx_ring, rx_desc)) continue; } /* verify the packet layout is correct */ if (igb_cleanup_headers(rx_ring, rx_desc, skb)) { skb = NULL; continue; } /* populate checksum, timestamp, VLAN, and protocol */ igb_process_skb_fields(rx_ring, rx_desc, skb); napi_gro_receive(&q_vector->napi, skb); } igb_fetch_rx_buffer \u548c igb_is_non_eop \u7684\u4f5c\u7528\u5c31\u662f\u628a\u6570\u636e\u5e27\u4ece RingBuffer \u4e0a\u53d6\u4e0b\u6765\u3002\u4e3a\u4ec0\u4e48\u9700\u8981\u4e24\u4e2a\u51fd\u6570\u5462\uff1f\u56e0\u4e3a\u6709\u53ef\u80fd\u5e27\u8981\u5360\u591a\u591a\u4e2a RingBuffer\uff0c\u6240\u4ee5\u662f\u5728\u4e00\u4e2a\u5faa\u73af\u4e2d\u83b7\u53d6\u7684\uff0c\u76f4\u5230\u5e27\u5c3e\u90e8\u3002\u83b7\u53d6\u4e0b\u6765\u7684\u4e00\u4e2a\u6570\u636e\u5e27\u7528\u4e00\u4e2a sk_buff \u6765\u8868\u793a\u3002\u6536\u53d6\u5b8c\u6570\u636e\u4ee5\u540e\uff0c\u5bf9\u5176\u8fdb\u884c\u4e00\u4e9b\u6821\u9a8c\uff0c\u7136\u540e\u5f00\u59cb\u8bbe\u7f6e sbk \u53d8\u91cf\u7684 timestamp, VLAN id, protocol \u7b49\u5b57\u6bb5\u3002\u63a5\u4e0b\u6765\u8fdb\u5165\u5230 napi_gro_receive \u4e2d: //file: net/core/dev.c gro_result_t napi_gro_receive(struct napi_struct *napi, struct sk_buff *skb){ skb_gro_reset_offset(skb); return napi_skb_finish(dev_gro_receive(napi, skb), skb); } dev_gro_receive \u8fd9\u4e2a\u51fd\u6570\u4ee3\u8868\u7684\u662f\u7f51\u5361 GRO \u7279\u6027\uff0c\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u6210\u628a\u76f8\u5173\u7684\u5c0f\u5305\u5408\u5e76\u6210\u4e00\u4e2a\u5927\u5305\u5c31\u884c\uff0c\u76ee\u7684\u662f\u51cf\u5c11\u4f20\u9001\u7ed9\u7f51\u7edc\u6808\u7684\u5305\u6570\uff0c\u8fd9\u6709\u52a9\u4e8e\u51cf\u5c11 CPU \u7684\u4f7f\u7528\u91cf\u3002\u6211\u4eec\u6682\u4e14\u5ffd\u7565\uff0c\u76f4\u63a5\u770b napi_skb_finish, \u8fd9\u4e2a\u51fd\u6570\u4e3b\u8981\u5c31\u662f\u8c03\u7528\u4e86 netif_receive_skb\u3002 //file: net/core/dev.c static gro_result_t napi_skb_finish(gro_result_t ret, struct sk_buff \\*skb){ switch (ret) { case GRO_NORMAL: if (netif_receive_skb(skb)) ret = GRO_DROP; break; ...... } \u5728 netif_receive_skb \u4e2d\uff0c\u6570\u636e\u5305\u5c06\u88ab\u9001\u5230\u534f\u8bae\u6808\u4e2d\u3002\u58f0\u660e\uff0c\u4ee5\u4e0b\u7684 3.3, 3.4, 3.5 \u4e5f\u90fd\u5c5e\u4e8e\u8f6f\u4e2d\u65ad\u7684\u5904\u7406\u8fc7\u7a0b\uff0c\u53ea\u4e0d\u8fc7\u7531\u4e8e\u7bc7\u5e45\u592a\u957f\uff0c\u5355\u72ec\u62ff\u51fa\u6765\u6210\u5c0f\u8282\u3002 4.2.2 \u8fdb\u5165\u534f\u8bae\u6808\u4e4b\u540e\u7684\u5de5\u4f5c(netif_receive_skb \u4e4b\u540e) netif_receive_skb \u51fd\u6570\u4f1a\u6839\u636e\u5305\u7684\u534f\u8bae\uff0c\u5047\u5982\u662f udp \u5305\uff0c\u4f1a\u5c06\u5305\u4f9d\u6b21\u9001\u5230 ip_rcv() , udp_rcv() \u534f\u8bae\u5904\u7406\u51fd\u6570\u4e2d\u8fdb\u884c\u5904\u7406\u3002 //file: net/core/dev.c int netif_receive_skb(struct sk_buff \\*skb){ //RPS\u5904\u7406\u903b\u8f91\uff0c\u5148\u5ffd\u7565 ...... return __netif_receive_skb(skb); } static int \\_\\_netif_receive_skb(struct sk_buff \\*skb){ ...... ret = __netif_receive_skb_core(skb, false); } static int \\_\\_netif_receive_skb_core(struct sk_buff \\*skb, bool pfmemalloc){ ...... //pcap\u903b\u8f91\uff0c\u8fd9\u91cc\u4f1a\u5c06\u6570\u636e\u9001\u5165\u6293\u5305\u70b9\u3002tcpdump\u5c31\u662f\u4ece\u8fd9\u4e2a\u5165\u53e3\u83b7\u53d6\u5305\u7684 list_for_each_entry_rcu(ptype, &ptype_all, list) { if (!ptype->dev || ptype->dev == skb->dev) { if (pt_prev) ret = deliver_skb(skb, pt_prev, orig_dev); pt_prev = ptype; } } ...... list_for_each_entry_rcu(ptype, &ptype_base[ntohs(type) & PTYPE_HASH_MASK], list) { if (ptype->type == type && (ptype->dev == null_or_dev || ptype->dev == skb->dev || ptype->dev == orig_dev)) { if (pt_prev) ret = deliver_skb(skb, pt_prev, orig_dev); // \u5728\u8fd9\u91cc\u8fd0\u884cdeliver_skb\u51fd\u6570 pt_prev = ptype; } } } \u5728 __netif_receive_skb_core \u4e2d\uff0c\u6211\u770b\u7740\u539f\u6765\u7ecf\u5e38\u4f7f\u7528\u7684 tcpdump \u7684\u6293\u5305\u70b9\uff0c\u5f88\u662f\u6fc0\u52a8\uff0c\u770b\u6765\u8bfb\u4e00\u904d\u6e90\u4ee3\u7801\u65f6\u95f4\u771f\u7684\u6ca1\u767d\u6d6a\u8d39\u3002\u63a5\u7740 __netif_receive_skb_core \u53d6\u51fa protocol\uff0c\u5b83\u4f1a\u4ece\u6570\u636e\u5305\u4e2d\u53d6\u51fa\u534f\u8bae\u4fe1\u606f\uff0c\u7136\u540e\u904d\u5386\u6ce8\u518c\u5728\u8fd9\u4e2a\u534f\u8bae\u4e0a\u7684\u56de\u8c03\u51fd\u6570\u5217\u8868\u3002 ptype_base \u662f\u4e00\u4e2a hash table \uff0c\u5728\u534f\u8bae\u6ce8\u518c\u5c0f\u8282\u6211\u4eec\u63d0\u5230\u8fc7\u3002 ip_rcv \u51fd\u6570\u5730\u5740\u5c31\u662f\u5b58\u5728\u8fd9\u4e2a hash table \u4e2d\u7684\u3002 //file: net/core/dev.c static inline int deliver_skb(struct sk_buff \\*skb, struct packet_type *pt_prev, struct net_device *orig_dev){ ...... return pt_prev->func(skb, skb->dev, pt_prev, orig_dev); } pt_prev->func \u8fd9\u4e00\u884c\u5c31\u8c03\u7528\u5230\u4e86\u534f\u8bae\u5c42\u6ce8\u518c\u7684\u5904\u7406\u51fd\u6570\u4e86\u3002\u5bf9\u4e8e ip \u5305\u6765\u8bb2\uff0c\u5c31\u4f1a\u8fdb\u5165\u5230 ip_rcv \uff08\u5982\u679c\u662f arp \u5305\u7684\u8bdd\uff0c\u4f1a\u8fdb\u5165\u5230 arp_rcv \uff09\u3002 \u56db \u5e38\u89c1\u95ee\u9898&&\u5e38\u7528\u6280\u80fd 1 \u8c03\u6574\u7f51\u5361\u8f6f\u4e2d\u65ad\u5230\u4e0d\u540c CPU \u9ed8\u8ba4\u60c5\u51b5 \u5f53\u51fa\u884c\u5927\u6d41\u91cf\u4e0b\u8f7d\u7684\u65f6\u5019\uff0c\u7f51\u5361\u4e2d\u65ad\u90fd\u5728 cpu 0 \u4e0a(cpu 0 \u7684 system \u65f6\u95f4\u975e\u5e38\u9ad8) \u901a\u8fc7 mpstat -I SUM -P ALL \u67e5\u770b\uff0c\u6240\u6709\u7684\u4e2d\u65ad\u90fd\u5728 cpu 0 \u4e0a \u6bd4\u5982\u6211\u8981\u628a\u7f51\u5361 0 \u53f7\u961f\u5217\u7684\u4e2d\u65ad\u7ed1\u5b9a\u5230 cpu0 \u548c cpu1 \u4e0a\uff0c\u6267\u884c\u5982\u4e0b\u547d\u4ee4\uff1a echo 02 > /proc/irq/149/smp_affinity \u7136\u540e\u518d\u8fdb\u884c\u65bd\u538b\uff1a \u53d1\u73b0 cpu1 \u5df2\u7ecf\u5206\u62c5\u4e86\u4e00\u90e8\u5206\u538b\u529b\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5982\u4f55\u83b7\u53d6 0 \u53f7\u961f\u5217\u7684\u4e2d\u65ad\u53f7? grep eth0 /proc/interrupts \u53ef\u662f\u4e3a\u4ec0\u4e48\u4fee\u6539\u4e86\u786c\u4e2d\u65ad\u5230 CPU \u7684\u4eb2\u548c\u6027\u3001\u5374\u540c\u65f6\u80fd\u591f\u5f71\u54cd\u8f6f\u4e2d\u65ad\u7684\u4eb2\u548c\u6027\u5462? \u786c\u4e2d\u65ad\u4e2d\u8bbe\u7f6e\u8f6f\u4e2d\u65ad\u6807\u8bb0\u548c ksoftirq \u7684\u5224\u65ad\u662f\u5426\u6709\u8f6f\u4e2d\u65ad\u5230\u8fbe\uff0c\u90fd\u4f7f\u7528\u5230\u4e86 local_softirq_pending \u51fd\u6570, \u90fd\u662f\u57fa\u4e8e smp_processor_id() \u7684\u3002\u8fd9\u610f\u5473\u7740 \u53ea\u8981\u786c\u4e2d\u65ad\u5728\u54ea\u4e2a CPU \u4e0a\u88ab\u54cd\u5e94\uff0c\u90a3\u4e48\u8f6f\u4e2d\u65ad\u4e5f\u662f\u5728\u8fd9\u4e2a CPU \u4e0a\u5904\u7406\u7684 \u3002\u6240\u4ee5\u8bf4\uff0c\u5982\u679c\u4f60\u53d1\u73b0\u4f60\u7684 Linux \u8f6f\u4e2d\u65ad CPU \u6d88\u8017\u90fd\u96c6\u4e2d\u5728\u4e00\u4e2a\u6838\u4e0a\u7684\u8bdd\uff0c\u505a\u6cd5\u662f\u8981\u628a\u8c03\u6574\u786c\u4e2d\u65ad\u7684 CPU \u4eb2\u548c\u6027\uff0c\u6765\u5c06\u786c\u4e2d\u65ad\u6253\u6563\u5230\u4e0d\u540c\u7684 CPU \u6838\u4e0a\u53bb\u3002 \u786c\u4e2d\u65ad \u89e6\u53d1\u8f6f\u4e2d\u65ad\u7684\u4ee3\u7801\u5982\u4e0b void \\_\\_raise_softirq_irqoff(unsigned int nr){ trace_softirq_raise(nr); or_softirq_pending(1UL << nr); } //file: include/linux/irq_cpustat.h #define or_softirq_pending(x) (local_softirq_pending() |= (x)) \u8f6f\u4e2d\u65ad ksoftirqd_should_run \u4ee3\u7801\u5982\u4e0b\uff1a static int ksoftirqd_should_run(unsigned int cpu){ return local_softirq_pending(); } #define local_softirq_pending() \\ **IRQ_STAT(smp_processor_id(), **softirq_pending) 2 netfilter \u548c iptables \u8fc7\u6ee4\u662f\u5728\u54ea\u4e2a\u73af\u8282/\u73af\u5883\u4e0b\u6267\u884c\u7684? ip_rcv \u4e2d\u4f1a\u5904\u7406 netfilter \u548c iptable \u8fc7\u6ee4\uff0c\u5982\u679c\u4f60\u6709\u5f88\u591a\u6216\u8005\u5f88\u590d\u6742\u7684 netfilter \u6216 iptables \u89c4\u5219\uff0c\u8fd9\u4e9b\u89c4\u5219\u90fd\u662f\u5728\u8f6f\u4e2d\u65ad\u7684\u4e0a\u4e0b\u6587\u4e2d\u6267\u884c\u7684\uff0c\u4f1a\u52a0\u5927\u7f51\u7edc\u5ef6\u8fdf\u3002 3 tcpdump \u662f\u5728\u54ea\u4e2a\u73af\u8282\u6267\u884c\u7684? 3.1 \u6536\u5305\u65b9\u5411 ip_rcv \u2014> netfilter: raw_prerouting \u2014> conntrack \u2014> \u8def\u7531(routing decision) \u5176\u4e2d tcpdump \uff08\u5982\u679c\uff09\u8fd0\u884c\u7684\u8bdd\uff0c\u662f\u5728 ip_rcv \u4e4b\u524d . tcpdump \u662f\u5982\u4f55\u5de5\u4f5c\u7684? tcpdump \u5de5\u4f5c\u5728\u8bbe\u5907\u5c42\uff0c\u662f\u901a\u8fc7\u865a\u534f\u8bae\u7684\u65b9\u5f0f\u5de5\u4f5c\u7684\u3002\u5b83\u901a\u8fc7\u8c03\u7528 packet_create \u5c06 \u6293 \u5305 \u51fd \u6570 \u4ee5 \u534f \u8bae \u7684 \u5f62 \u5f0f \u6302 \u5230 ptype_all \u4e0a\u3002 \u5f53\u6536\u5305\u7684\u65f6\u5019\uff0c\u9a71\u52a8\u4e2d\u5b9e\u73b0\u7684 igb_poll \u51fd\u6570\u6700\u7ec8\u4f1a\u8c03\u7528\u5230 __nelif_receive_skb_core , \u8fd9 \u4e2a\u51fd\u6570 \u4f1a \u5728 \u5c06 \u5305 \u9001 \u5230 \u534f \u8bae \u6808 \u51fd\u6570 ( ip_rcv\u3001arp_rcv \u7b49 ) \u4e4b \u524d \uff0c \u5c06 \u5305 \u5148 \u9001 \u5230 ptype_all \u6293 \u5305 \u70b9\u3002\u6211\u4eec\u5e73\u65f6\u5de5\u4f5c\u4e2d\u7ecf\u5e38\u4f1a\u7528\u5230\u7684 tcpdump \u5c31\u662f\u57fa\u4e8e\u8fd9\u4e9b\u6293\u5305\u70b9\u6765\u5de5\u4f5c\u7684\u3002 \u8fd9 \u6b21 \u4f60 \u77e5 \u9053 tcpdump \u662f \u5982 \u4f55 \u548c \u5185 \u6838 \u8fdb \u884c \u914d \u5408 \u7684 \u4e86\u5427 ! 3.2 \u53d1\u5305\u65b9\u5411 4 eBPF \u548c XDP \u7684\u5305\u8fc7\u6ee4\u79fb\u4ea4\u5230\u7f51\u5361\u4e0a\u5177\u4f53\u662f\u5565? \u8bf4\u767d\u4e86, \u5176\u5b9e XDP \u662f\u5728\u7f51\u5361\u9a71\u52a8\u5c42\u6267\u884c\u5305\u8fc7\u6ee4, \u88ab\u8fc7\u6ee4\u6389\u7684\u5305\u90fd\u4e0d\u4f1a\u5206\u914d SKB. XDP\uff08eXpress Data Path\uff09\u662f\u57fa\u4e8e eBPF \u5b9e\u73b0\u7684\u9ad8\u6027\u80fd\u3001\u53ef\u7f16\u7a0b\u7684\u6570\u636e\u5e73\u9762\u6280\u672f \u3002\u57fa\u672c\u7684\u8f6f\u4ef6\u67b6\u6784\u5982\u4e0b\u56fe\u6240\u793a XDP \u4f4d\u4e8e\u7f51\u5361\u9a71\u52a8\u5c42\uff0c\u5f53\u6570\u636e\u5305\u7ecf\u8fc7 DMA \u5b58\u653e\u5230 ring buffer \u4e4b\u540e\uff0c\u5206\u914d skb \u4e4b\u524d\uff0c\u5373\u53ef\u88ab XDP \u5904\u7406 \u3002\u6570\u636e\u5305\u7ecf\u8fc7 XDP \u4e4b\u540e\uff0c\u4f1a\u6709 4 \u79cd\u53bb\u5411\uff1a XDP_DROP\uff1a\u4e22\u5305 XDP_PASS\uff1a\u4e0a\u9001\u534f\u8bae\u6808 XDP_TX\uff1a\u4ece\u5f53\u524d\u7f51\u5361\u53d1\u9001\u51fa\u53bb XDP_REDIRECT\uff1a\u4ece\u5176\u4ed6\u7f51\u5361\u53d1\u9001\u51fa\u53bb \u7531\u4e8e XDP \u4f4d\u4e8e\u6574\u4e2a Linux \u5185\u6838\u7f51\u7edc\u8f6f\u4ef6\u6808\u7684\u5e95\u90e8\uff0c\u80fd\u591f\u975e\u5e38\u65e9\u5730\u8bc6\u522b\u5e76\u4e22\u5f03\u653b\u51fb\u62a5\u6587\uff0c\u5177\u6709\u5f88\u9ad8\u7684\u6027\u80fd \u3002\u8fd9\u4e3a\u6211\u4eec\u6539\u5584 iptables/nftables \u534f\u8bae\u6808\u4e22\u5305\u7684\u6027\u80fd\u74f6\u9888\uff0c\u63d0\u4f9b\u4e86\u975e\u5e38\u68d2\u7684\u89e3\u51b3\u65b9\u6848\u3002","title":"\u7b2c\u5341\u7bc7 Linux Net\u5b50\u7cfb\u7edf\u603b\u7ed3\u3001\u6536\u53d1\u5305\u6d41\u7a0b\u518d\u6b21\u68b3\u7406"},{"location":"chapter_3/10_linux_net/#_1","text":"\u672c\u7bc7\u603b\u7ed3 Linux Net \u5b50\u7cfb\u7edf\u7684 \u6838\u5fc3\u67b6\u6784\u56fe\u3001\u6838\u5fc3\u6570\u636e\u7ed3\u6784 \u53d1\u5305\u8def\u5f84 \u548c \u6536\u5305\u8def\u5f84 , \u6bcf\u4e2a\u8def\u5f84\u4e0a\u600e\u4e48\u76d1\u63a7\u548c\u8c03\u4f18 \u4ee5\u53ca \u4e00\u4e9b\u5e38\u89c1\u7684\u95ee\u9898","title":"\u6982\u8ff0"},{"location":"chapter_3/10_linux_net/#_2","text":"\u8fd9\u91cc\u603b\u7ed3\u4e00\u4e0b\u5185\u6838\u7684\u6838\u5fc3\u5b9e\u73b0, \u65b9\u4fbf\u5feb\u901f\u638c\u63e1\u5176\u6838\u5fc3\u539f\u7406 \u5176\u4e2d dev.c \u662f\u6307 //file: net/core/dev.c , \u8457\u540d\u7684 napi_gro_receive \u51fd\u6570\u548c netif_receive_skb \u51fd\u6570\u5c31\u662f\u5728\u8fd9\u91cc\u5b9e\u73b0\u7684","title":"\u4e00 \u5185\u6838\u7f51\u7edc\u5c42\u6838\u5fc3\u67b6\u6784\u56fe"},{"location":"chapter_3/10_linux_net/#_3","text":"","title":"(\u4e00) \u6838\u5fc3\u6570\u636e\u7ed3\u6784"},{"location":"chapter_3/10_linux_net/#1-struct-softnet_data","text":"linux \u5185\u6838\u901a\u8fc7\u8c03\u7528 subsys_initcall \u6765\u521d\u59cb\u5316\u5404\u4e2a\u5b50\u7cfb\u7edf\uff0c\u5728\u6e90\u4ee3\u7801\u76ee\u5f55\u91cc\u4f60\u53ef\u4ee5 grep \u51fa\u8bb8\u591a\u5bf9\u8fd9\u4e2a\u51fd\u6570\u7684\u8c03\u7528\u3002\u8fd9\u91cc\u6211\u4eec\u8981\u8bf4\u7684\u662f\u7f51\u7edc\u5b50\u7cfb\u7edf\u7684\u521d\u59cb\u5316\uff0c\u4f1a\u6267\u884c\u5230 net_dev_init \u51fd\u6570\u3002 //file: net/core/dev.c static int __init net_dev_init(void){ ...... for_each_possible_cpu(i) { struct softnet_data *sd = &per_cpu(softnet_data, i); memset(sd, 0, sizeof(*sd)); skb_queue_head_init(&sd->input_pkt_queue); skb_queue_head_init(&sd->process_queue); sd->completion_queue = NULL; INIT_LIST_HEAD(&sd->poll_list); /*\u5c06poll_list\u6210\u5458\uff08\u8be5\u6210\u5458\u662f\u4e00\u4e2astruct list_head\uff09\u7684\u524d\u9a71\u548c\u540e\u7f6e\u90fd\u6307\u5411\u81ea\u5df1*/ ...... } ...... open_softirq(NET_TX_SOFTIRQ, net_tx_action); open_softirq(NET_RX_SOFTIRQ, net_rx_action); } subsys_initcall(net_dev_init); \u5728\u8fd9\u4e2a\u51fd\u6570\u91cc\uff0c\u4f1a\u4e3a \u6bcf\u4e2a CPU \u90fd\u7533\u8bf7\u4e00\u4e2a softnet_data \u6570\u636e\u7ed3\u6784 \uff0c\u5728\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u91cc\u7684 poll_list \u662f\u7b49\u5f85\u9a71\u52a8\u7a0b\u5e8f\u5c06\u5176 poll \u51fd\u6570\u6ce8\u518c\u8fdb\u6765\uff0c\u7a0d\u540e\u7f51\u5361\u9a71\u52a8\u521d\u59cb\u5316\u7684\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8fd9\u4e00\u8fc7\u7a0b\u3002 \u6838\u5fc3\u6210\u5458: poll_list. \u662f\u4ec0\u4e48\u539f\u7406\u5462, \u8fd9\u91cc\u5c31\u662f\u4e00\u4e2a poll \u51fd\u6570\u94fe\u8868. \u6bcf\u6b21\u7f51\u5361\u6709\u6570\u636e\u6765\u65f6, \u786c\u4e2d\u65ad\u628a\u81ea\u5df1\u7684 poll \u51fd\u6570\u653e\u5230\u8fd9\u4e2a\u94fe\u8868\u91cc\u6765. \u662f\u4e00\u4e2a\u94fe\u8868\uff0c\u540e\u7eed\u5c06 struct napi_struct \u52a0\u5165 softnet_data \u7ed3\u6784\u4e2d poll_list \u94fe\u8868\u91cc\u6765\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7 softnet_data \u7684 poll_list \u94fe\u8868\u904d\u5386\u6240\u6709\u7684 napi_struct \u5b9e\u4f8b\uff0c\u6bcf\u4e2a napi_struct \u5b9e\u4f8b\u5176\u5b9e\u5305\u542b\u4e86\u7279\u5b9a\u4e8e \u7f51\u5361 \u7684 poll \u51fd\u6570\uff0c\u540e\u7eed\u8c03\u7528 napi_struct \u7684 poll \u51fd\u6570\u5176\u5b9e\u5c31\u662f\u8c03\u7528 \u7f51\u5361 \u7684 poll \u51fd\u6570. \u5e76\u4e14\u8fd9\u91cc\u8bf4\u7684 \u7f51\u5361 , \u6bd4\u5982\u662f igb \u7f51\u5361\uff0c\u90a3\u4e48\u5176\u5b9e\u6307\u7684\u662f struct igb_q_vector \u7ed3\u6784\uff0c\u8be5\u7ed3\u6784\u8868\u793a igb \u7f51\u5361\u7684\u4e00\u4e2a\u961f\u5217,\u6bcf\u4e2a igb \u7f51\u5361\u53ef\u4ee5\u6709 8 \u4e2a\u961f\u5217\uff0c\u6bcf\u4e2a\u961f\u5217\u5bf9\u5e94\u4e00\u4e2a\u771f\u5b9e\u7684\u786c\u4e2d\u65ad\u53f7. list_add_tail(&napi->poll_list, &sd->poll_list); \u4e5f\u5c31\u662f\u8bf4\u5f85\u4f1a\u513f\u5185\u6838\u8dd1\u8f6f\u4e2d\u65ad\u65f6,\u8981\u6267\u884c\u6211\u7684poll\u51fd\u6570(\u8fd9\u91cc\u6211\u5c31\u662f\u4e00\u5f20\u7f51\u5361) \u8f6f\u4e2d\u65ad\u9636\u6bb5: static void net_rx_action(struct softirq_action *h){ struct softnet_data *sd = &__get_cpu_var(softnet_data); unsigned long time_limit = jiffies + 2; int budget = netdev_budget; void *have; local_irq_disable(); while (!list_empty(&sd->poll_list)) { ...... n = list_first_entry(&sd->poll_list, struct napi_struct, poll_list); work = 0; if (test_bit(NAPI_STATE_SCHED, &n->state)) { work = n->poll(n, weight); trace_napi_poll(n); } budget -= work; } } \u7b80\u5355\u7406\u89e3\u5c31\u662f\u5728\u8dd1\u7279\u5b9a\u4e8e\u7f51\u5361\u7684poll\u51fd\u6570. softnet_data","title":"1 struct softnet_data"},{"location":"chapter_3/10_linux_net/#2-struct-net_protocol","text":"\u4ee3\u8868\u4e00\u4e2a\u4f20\u8f93\u5c42\u534f\u8bae\uff0c\u6bd4\u5982 tcp\u3001udp static const struct net_protocol tcp_protocol = { .early_demux = tcp_v4_early_demux, .handler = tcp_v4_rcv, .err_handler = tcp_v4_err, .no_policy = 1, .netns_ok = 1, }; static const struct net_protocol udp_protocol = { .handler = udp_rcv, .err_handler = udp_err, .no_policy = 1, .netns_ok = 1 };","title":"2 struct net_protocol"},{"location":"chapter_3/10_linux_net/#21-inet_protosmax_inet_protos","text":"inet_protos \u662f\u4e00\u4e2a\u5168\u5c40\u7684\u6307\u9488\u6570\u7ec4, \u5b58\u6709\u6240\u6709 net_protocol const struct net_protocol __rcu *inet_protos[MAX_INET_PROTOS] __read_mostly; \u5176\u4e2d MAX_INET_PROTOS \u4e3a 256 include/net/protocol.h:38:#define MAX_INET_PROTOS 256","title":"2.1 inet_protos[MAX_INET_PROTOS] \u6570\u7ec4"},{"location":"chapter_3/10_linux_net/#22-ptype_base","text":"net/core/dev.c:146:struct list_head ptype_base[PTYPE_HASH_SIZE] __read_mostly; #define PTYPE_HASH_SIZE (16)","title":"2.2 ptype_base \u54c8\u5e0c\u8868"},{"location":"chapter_3/10_linux_net/#3-struct-net","text":"\u7f51\u7edc\u547d\u540d\u7a7a\u95f4 struct net \u7ed3\u6784\u4f53\u8868\u793a\u7684\u5185\u6838\u4e2d\u7684\u7f51\u7edc\u547d\u540d\u7a7a\u95f4(net_namespace)\u3002\u5728 linux \u5185\u6838\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u7f51\u7edc\u8bbe\u5907(struct net_device)\u90fd\u6709\u4e00\u4e2a\u6240\u5c5e\u7684\u7f51\u7edc\u547d\u540d\u7a7a\u95f4 \u7f51\u7edc\u7cfb\u7edf\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u4f1a\u521d\u59cb\u5316\u4e00\u4e2a\u521d\u59cb\u7f51\u7edc\u547d\u540d\u7a7a\u95f4\uff0c\u5373 init_net \u547d\u540d\u7a7a\u95f4\u3002\u540e\u7eed\u521b\u5efa\u7684 net namespace \u547d\u540d\u7a7a\u95f4\u4f1a\u548c init_net \u4e00\u8d77\u901a\u8fc7 list \u9879\u7ec4\u7ec7\u8d77\u6765\uff0c\u4e14\u6bcf\u4e2a\u7f51\u7edc\u8bbe\u5907\u90fd\u5bf9\u5e94\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\uff0c\u540c\u4e00\u547d\u540d\u7a7a\u95f4\u4e0b\u7684\u7f51\u7edc\u8bbe\u5907\u901a\u8fc7 dev_base_head \u7ec4\u7ec7\u5728\u4e00\u8d77\u3002\u7ec4\u7ec7\u7ed3\u6784\u5982\u4e0b: struct net \u5185\u7684\u4e00\u4e9b\u91cd\u8981\u6210\u5458\uff1a struct net_device *loopback_dev;","title":"3 struct net"},{"location":"chapter_3/10_linux_net/#4-struct-net_device","text":"\u5185\u6838\u5c42\u9762\u63cf\u8ff0\u4e00\u5f20\u7f51\u5361 \u6bcf\u4e2a struct net, \u90fd\u81f3\u5c11\u6709\u4e00\u4e2a\u73af\u56de\u63a5\u53e3 lo, \u8be5\u63a5\u53e3\u5c31\u662f\u7528 struct net_device \u8868\u793a \u5728 linux \u4e2d\u4f7f\u7528 struct net_device \u7ed3\u6784\u4f53\u6765\u63cf\u8ff0\u6bcf\u4e00\u4e2a\u7f51\u7edc\u8bbe\u5907\u3002\u540c\u65f6\u8fd9\u4e2a\u7528\u6765\u523b\u753b\u7f51\u7edc\u8bbe\u5907\u7684 struct net_device \u7ed3\u6784\u4f53\u5305\u542b\u7684\u5b57\u6bb5\u975e\u5e38\u7684\u591a\uff0c\u4ee5\u81f3\u4e8e\u5185\u6838\u7684\u5f00\u53d1\u8005\u90fd\u89c9\u5f97\u5728\u73b0\u5728\u7684 linux \u5185\u6838\u4e2d\uff0c\u8fd9\u4e2a struct net_device \u662f\u4e00\u4e2a\u5927\u7684\u9519\u8bef\u3002 \u5e76\u4e14\u6ce8\u518c net_device( register_netdev(struct net_device *dev) )\u662f\u6ce8\u518c\u5230\u4e00\u4e2a\u94fe\u8868\u4e2d struct net_device can be conceptually divided into two parts: visible and invisible. net_device \u7ed3\u6784\u4f53(\u6709\u4f17\u591a\u6210\u5458\uff0c\u603b\u4f53\u6765\u8bf4\u6210\u5458)\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a \u53ef\u89c1\u548c\u4e0d\u53ef\u89c1. \u5185\u6838\u4f7f\u7528 net_device \u8868\u793a\u7f51\u5361\u3002\u7f51\u5361\u53ef\u4ee5\u5206\u4e3a \u7269\u7406\u7f51\u5361 \u548c \u865a\u62df\u7f51\u5361 \u3002\u7269\u7406\u7f51\u5361\u662f\u6307\u771f\u6b63\u80fd\u628a\u62a5\u6587\u53d1\u51fa\u672c\u673a\u7684\u7f51\u5361\uff0c\u5305\u62ec\u771f\u5b9e\u7269\u7406\u673a\u7684\u7f51\u5361\u4ee5\u53ca VM \u865a\u62df\u673a\u7684\u7f51\u5361\uff0c\u800c\u50cf tun/tap\uff0cvxlan\u3001veth pair \u8fd9\u6837\u7684\u5219\u5c5e\u4e8e\u865a\u62df\u7f51\u5361\u7684\u8303\u7574\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff0c \u6bcf\u4e2a\u7f51\u5361\u90fd\u6709\u4e24\u7aef \uff0c\u4e00\u7aef\u662f\u534f\u8bae\u6808(IP\u3001TCP\u3001UDP)\uff0c\u53e6\u4e00\u7aef\u5219\u6709\u6240\u533a\u522b\uff0c\u5bf9\u7269\u7406\u7f51\u5361\u6765\u8bf4\uff0c\u8fd9\u4e00\u7aef\u662f\u7f51\u5361\u751f\u4ea7\u5382\u5546\u63d0\u4f9b\u7684\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\uff0c\u800c\u5bf9\u865a\u62df\u7f51\u5361\u6765\u8bf4\u5dee\u522b\u5c31\u5927\u4e86\uff0c\u6b63\u662f\u7531\u4e8e\u865a\u62df\u7f51\u5361\u7684\u5b58\u5728\uff0c\u5185\u6838\u624d\u80fd\u652f\u6301\u5404\u79cd\u96a7\u9053\u5c01\u88c5\u3001\u5bb9\u5668\u901a\u4fe1\u7b49\u529f\u80fd\u3002 net_device \u6e90\u7801\u5982\u4e0b: struct net_device { /* * This is the first field of the \"visible\" part of this structure * (i.e. as seen by users in the \"Space.c\" file). It is the name * of the interface. */ char name[IFNAMSIZ]; /* device name hash chain, please keep it close to name[] */ struct hlist_node name_hlist; /* snmp alias */ char *ifalias; /* * I/O specific fields * FIXME: Merge these and struct ifmap into one */ unsigned long mem_end; /* shared mem end */ unsigned long mem_start; /* shared mem start */ unsigned long base_addr; /* device I/O address */ int irq; /* device IRQ number */ /* * Some hardware also needs these fields, but they are not * part of the usual set specified in Space.c. */ unsigned long state; struct list_head dev_list; struct list_head napi_list; struct list_head unreg_list; struct list_head close_list; /* directly linked devices, like slaves for bonding */ struct { struct list_head upper; struct list_head lower; } adj_list; /* all linked devices, *including* neighbours */ struct { struct list_head upper; struct list_head lower; } all_adj_list; /* currently active device features */ netdev_features_t features; /* user-changeable features */ netdev_features_t hw_features; /* user-requested features */ netdev_features_t wanted_features; /* mask of features inheritable by VLAN devices */ netdev_features_t vlan_features; /* mask of features inherited by encapsulating devices * This field indicates what encapsulation offloads * the hardware is capable of doing, and drivers will * need to set them appropriately. */ netdev_features_t hw_enc_features; /* mask of fetures inheritable by MPLS */ netdev_features_t mpls_features; /* Interface index. Unique device identifier */ int ifindex; int iflink; struct net_device_stats stats; /* dropped packets by core network, Do not use this in drivers */ atomic_long_t rx_dropped; atomic_long_t tx_dropped; /* Stats to monitor carrier on<->off transitions */ atomic_t carrier_changes; #ifdef CONFIG_WIRELESS_EXT /* List of functions to handle Wireless Extensions (instead of ioctl). * See <net/iw_handler.h> for details. Jean II */ const struct iw_handler_def * wireless_handlers; /* Instance data managed by the core of Wireless Extensions. */ struct iw_public_data * wireless_data; #endif /* Management operations */ const struct net_device_ops *netdev_ops; const struct ethtool_ops *ethtool_ops; const struct forwarding_accel_ops *fwd_ops; /* Hardware header description */ const struct header_ops *header_ops; unsigned int flags; /* interface flags (a la BSD) */ unsigned int priv_flags; /* Like 'flags' but invisible to userspace. * See if.h for definitions. */ unsigned short gflags; unsigned short padded; /* How much padding added by alloc_netdev() */ unsigned char operstate; /* RFC2863 operstate */ unsigned char link_mode; /* mapping policy to operstate */ unsigned char if_port; /* Selectable AUI, TP,..*/ unsigned char dma; /* DMA channel */ unsigned int mtu; /* interface MTU value */ unsigned short type; /* interface hardware type */ unsigned short hard_header_len; /* hardware hdr length */ /* extra head- and tailroom the hardware may need, but not in all cases * can this be guaranteed, especially tailroom. Some cases also use * LL_MAX_HEADER instead to allocate the skb. */ unsigned short needed_headroom; unsigned short needed_tailroom; /* Interface address info. */ unsigned char perm_addr[MAX_ADDR_LEN]; /* permanent hw address */ unsigned char addr_assign_type; /* hw address assignment type */ unsigned char addr_len; /* hardware address length */ unsigned short neigh_priv_len; unsigned short dev_id; /* Used to differentiate devices * that share the same link * layer address */ unsigned short dev_port; /* Used to differentiate * devices that share the same * function */ spinlock_t addr_list_lock; struct netdev_hw_addr_list uc; /* Unicast mac addresses */ struct netdev_hw_addr_list mc; /* Multicast mac addresses */ struct netdev_hw_addr_list dev_addrs; /* list of device * hw addresses */ #ifdef CONFIG_SYSFS struct kset *queues_kset; #endif bool uc_promisc; unsigned int promiscuity; unsigned int allmulti; /* Protocol specific pointers */ #if IS_ENABLED(CONFIG_VLAN_8021Q) struct vlan_info __rcu *vlan_info; /* VLAN info */ #endif #if IS_ENABLED(CONFIG_NET_DSA) struct dsa_switch_tree *dsa_ptr; /* dsa specific data */ #endif #if IS_ENABLED(CONFIG_TIPC) struct tipc_bearer __rcu *tipc_ptr; /* TIPC specific data */ #endif void *atalk_ptr; /* AppleTalk link */ struct in_device __rcu *ip_ptr; /* IPv4 specific data \u5728\u8fd9\u4e2a\u7ed3\u6784\u4f53\u4e2d\u5b58\u653eipv4\u5730\u5740*/ struct dn_dev __rcu *dn_ptr; /* DECnet specific data */ struct inet6_dev __rcu *ip6_ptr; /* IPv6 specific data */ void *ax25_ptr; /* AX.25 specific data */ struct wireless_dev *ieee80211_ptr; /* IEEE 802.11 specific data, assign before registering */ /* * Cache lines mostly used on receive path (including eth_type_trans()) */ unsigned long last_rx; /* Time of last Rx */ /* Interface address info used in eth_type_trans() */ unsigned char *dev_addr; /* hw address, (before bcast because most packets are unicast) */ #ifdef CONFIG_SYSFS struct netdev_rx_queue *_rx; /* Number of RX queues allocated at register_netdev() time */ unsigned int num_rx_queues; /* Number of RX queues currently active in device */ unsigned int real_num_rx_queues; #endif rx_handler_func_t __rcu *rx_handler; void __rcu *rx_handler_data; struct netdev_queue __rcu *ingress_queue; unsigned char broadcast[MAX_ADDR_LEN]; /* hw bcast add */ /* * Cache lines mostly used on transmit path */ struct netdev_queue *_tx ____cacheline_aligned_in_smp; /* Number of TX queues allocated at alloc_netdev_mq() time */ unsigned int num_tx_queues; /* Number of TX queues currently active in device */ unsigned int real_num_tx_queues; /* root qdisc from userspace point of view */ struct Qdisc *qdisc; unsigned long tx_queue_len; /* Max frames per queue allowed */ spinlock_t tx_global_lock; #ifdef CONFIG_XPS struct xps_dev_maps __rcu *xps_maps; #endif #ifdef CONFIG_RFS_ACCEL /* CPU reverse-mapping for RX completion interrupts, indexed * by RX queue number. Assigned by driver. This must only be * set if the ndo_rx_flow_steer operation is defined. */ struct cpu_rmap *rx_cpu_rmap; #endif /* These may be needed for future network-power-down code. */ /* * trans_start here is expensive for high speed devices on SMP, * please use netdev_queue->trans_start instead. */ unsigned long trans_start; /* Time (in jiffies) of last Tx */ int watchdog_timeo; /* used by dev_watchdog() */ struct timer_list watchdog_timer; /* Number of references to this device */ int __percpu *pcpu_refcnt; /* delayed register/unregister */ struct list_head todo_list; /* device index hash chain */ struct hlist_node index_hlist; struct list_head link_watch_list; /* register/unregister state machine */ enum { NETREG_UNINITIALIZED=0, NETREG_REGISTERED, /* completed register_netdevice */ NETREG_UNREGISTERING, /* called unregister_netdevice */ NETREG_UNREGISTERED, /* completed unregister todo */ NETREG_RELEASED, /* called free_netdev */ NETREG_DUMMY, /* dummy device for NAPI poll */ } reg_state:8; bool dismantle; /* device is going do be freed */ enum { RTNL_LINK_INITIALIZED, RTNL_LINK_INITIALIZING, } rtnl_link_state:16; /* Called from unregister, can be used to call free_netdev */ void (*destructor)(struct net_device *dev); #ifdef CONFIG_NETPOLL struct netpoll_info __rcu *npinfo; #endif #ifdef CONFIG_NET_NS /* Network namespace this network device is inside */ struct net *nd_net; #endif /* mid-layer private */ union { void *ml_priv; struct pcpu_lstats __percpu *lstats; /* loopback stats */ struct pcpu_sw_netstats __percpu *tstats; struct pcpu_dstats __percpu *dstats; /* dummy stats */ struct pcpu_vstats __percpu *vstats; /* veth stats */ }; /* GARP */ struct garp_port __rcu *garp_port; /* MRP */ struct mrp_port __rcu *mrp_port; /* class/net/name entry */ struct device dev; /* space for optional device, statistics, and wireless sysfs groups */ const struct attribute_group *sysfs_groups[4]; /* space for optional per-rx queue attributes */ const struct attribute_group *sysfs_rx_queue_group; /* rtnetlink link ops */ const struct rtnl_link_ops *rtnl_link_ops; /* for setting kernel sock attribute on TCP connection setup */ #define GSO_MAX_SIZE 65536 unsigned int gso_max_size; #define GSO_MAX_SEGS 65535 u16 gso_max_segs; #ifdef CONFIG_DCB /* Data Center Bridging netlink ops */ const struct dcbnl_rtnl_ops *dcbnl_ops; #endif u8 num_tc; struct netdev_tc_txq tc_to_txq[TC_MAX_QUEUE]; u8 prio_tc_map[TC_BITMASK + 1]; #if IS_ENABLED(CONFIG_FCOE) /* max exchange id for FCoE LRO by ddp */ unsigned int fcoe_ddp_xid; #endif #if IS_ENABLED(CONFIG_CGROUP_NET_PRIO) struct netprio_map __rcu *priomap; #endif /* phy device may attach itself for hardware timestamping */ struct phy_device *phydev; struct lock_class_key *qdisc_tx_busylock; /* group the device belongs to */ int group; struct pm_qos_request pm_qos_req; };","title":"4 struct net_device"},{"location":"chapter_3/10_linux_net/#41-ptype_base-ptype_all","text":"ptype_base \u4e3a\u4e00\u4e2a hash \u8868,\u800c ptype_all \u4e3a\u4e00\u4e2a\u53cc\u5411\u94fe\u8868.\u6bcf\u4e00\u4e2a\u91cc\u9762\u6ce8\u518c\u7684\u534f\u8bae\u90fd\u7528\u4e00\u4e2a struct packet_type \u8868\u793a. packet_type \u6570\u636e\u7ed3\u6784\u5305\u542b\u534f\u8bae\u7c7b\u578b\u3001\u6307\u5411\u7f51\u7edc\u8bbe\u5907\u7684\u6307\u9488\u3001\u6307\u5411\u534f\u8bae\u7684\u63a5\u6536\u6570\u636e\u5904\u7406\u4f8b\u7a0b\u7684\u6307\u9488, \u5982\u4e0b\uff1a struct packet_type { unsigned short type; /*\u534f\u8bae\u7c7b\u578b*/ struct net_device *dev; int (*func) (struct sk_buff *, struct net_device *, struct packet_type *); void *data; /* Private to the packet type */ struct packet_type *next; }; func \u662f\u8be5\u7ed3\u6784\u4f53\u4e3b\u8981\u6210\u5458\uff0c\u6307\u5411\u7f51\u7edc\u5c42\u7684\u4e00\u4e2a\u51fd\u6570\u3002\u5982\u679c\u5206\u7ec4\u7684\u7c7b\u578b\u9002\u5f53\uff0c\u5c31\u5c06\u5176\u4f20\u7ed9\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570\uff0c\u5176\u4e2d ip \u5305\u7684\u5904\u7406\u51fd\u6570\u5c31\u662f ip_rcv . netif_receive_skb() \u51fd\u6570\uff0c\u904d\u5386 ptype_all \u94fe\u8868\uff0c\u627e\u5230\u5408\u9002\u7684 packet_type , \u7136\u540e\u8c03\u7528\u5176 func \u6307\u9488\u6307\u5411\u7684\u5904\u7406\u51fd\u6570(\u6bd4\u5982 ip_rcv() )","title":"4.1 ptype_base \u548c ptype_all"},{"location":"chapter_3/10_linux_net/#42-struct-in_device-ip","text":"struct in_device { struct net_device *dev; // \u56de\u6307\u7f51\u7edc\u8bbe\u5907 atomic_t refcnt; // \u5f53\u4e00\u4e2aIP\u914d\u7f6e\u5757\u5c06\u8981\u88ab\u9500\u6bc1\u65f6\uff0c\u5148\u8bbe\u7f6e\u8be5\u6807\u8bb0\u4e3a1\uff0c\u5f53\u5f15\u7528\u8ba1\u6570\u4e3a0\u65f6\u518d\u6267\u884c\u5185\u5b58\u56de\u6536 int dead; // \u6bcf\u4e2a\u7f51\u7edc\u8bbe\u5907\u53ef\u4ee5\u914d\u7f6e\u591a\u4e2aIP\u5730\u5740\uff0c\u6240\u4ee5\u662f\u5217\u8868 struct in_ifaddr *ifa_list; /* IP ifaddr chain */ // \u591a\u64ad\u76f8\u5173\u7684\u7ed3\u6784 rwlock_t mc_list_lock; struct ip_mc_list *mc_list; /* IP multicast filter chain */ spinlock_t mc_tomb_lock; struct ip_mc_list *mc_tomb; unsigned long mr_v1_seen; unsigned long mr_v2_seen; unsigned long mr_maxdelay; unsigned char mr_qrv; unsigned char mr_gq_running; unsigned char mr_ifc_count; struct timer_list mr_gq_timer; /* general query timer */ struct timer_list mr_ifc_timer; /* interface change timer */ // \u7f51\u7edc\u8bbe\u5907\u5b9a\u4e49\u7684\u90bb\u5c45\u5b50\u7cfb\u7edf\u914d\u7f6e\u53c2\u6570 struct neigh_parms *arp_parms; // \u5f71\u54cd\u8be5\u7f51\u7edc\u8bbe\u5907\u7684IP\u7cfb\u7edf\u914d\u7f6e struct ipv4_devconf cnf; // \u4f7f\u7528RCU\u673a\u5236\u56de\u6536IP\u914d\u7f6e\u5757 struct rcu_head rcu_head; };","title":"4.2 struct in_device \uff08IP \u914d\u7f6e\u5757\uff09"},{"location":"chapter_3/10_linux_net/#43-struct-in_ifaddr-ipv4","text":"struct in_ifaddr { struct in_ifaddr *ifa_next; // \u540c\u4e00\u4e2a\u7f51\u7edc\u8bbe\u5907\u4e0a\u914d\u7f6e\u7684IP\u5730\u5740\u7ec4\u6210\u6210\u94fe\u8868 struct in_device *ifa_dev; // \u56de\u6307\u7f51\u7edc\u8bbe\u5907 struct rcu_head rcu_head; // \u4f7f\u7528RCU\u4fdd\u62a4\u672cIP\u5730\u5740\u7684\u4fee\u6539 // \u5bf9\u4e8e\u652f\u6301\u5e7f\u64ad\u7684\u7f51\u7edc\uff0cifa_local\u548cifa_address\u4e00\u6837\u4fdd\u5b58\u7684\u90fd\u662f\u672c\u7aef\u5730\u5740\uff1b // \u5bf9\u4e8e\u70b9\u5bf9\u70b9\u7f51\u7edc\uff0cifa_address\u4fdd\u5b58\u7684\u662f\u5bf9\u7aefIP\u5730\u5740 __be32 ifa_local; __be32 ifa_address; __be32 ifa_mask; // \u5b50\u7f51\u63a9\u7801 __be32 ifa_broadcast; // \u5e7f\u64ad\u5730\u5740 __be32 ifa_anycast; unsigned char ifa_scope; // IP\u5730\u5740\u4f5c\u7528\u57df\uff0c\u89c1\u4e0b\u6587 unsigned char ifa_flags; unsigned char ifa_prefixlen; // \u5b50\u7f51\u63a9\u7801\u957f\u5ea6 char ifa_label[IFNAMSIZ]; // \u7f51\u7edc\u5730\u5740\u522b\u540d }; \u53c2\u8003 linux \u5185\u6838\u534f\u8bae\u6808 IP \u5730\u5740\u6570\u636e\u7ed3\u6784","title":"4.3 struct in_ifaddr \uff08IPv4 \u5730\u5740\uff09"},{"location":"chapter_3/10_linux_net/#5-struct-net_device_ops","text":"\u6bcf\u4e2a net_device \u5177\u5907\u7684\u4e00\u4e9b\u80fd\u529b, \u6bd4\u5982 open,read,write,poll,ioctl \u7b49 net_device_ops \u6838\u5fc3\u63cf\u8ff0\u7b26\u5185\u5305\u542b\u4e86\u9a71\u52a8\u7a0b\u5e8f\u586b\u5145\u7684\u5404\u7c7b\u51fd\u6570, \u5305\u62ec\u53d1\u9001\u3001\u63a5\u6536\u6570\u636e\u5305 \u4ee5 net/ethernet/intel/igb/igb_main.c (igb \u7f51\u5361\u9a71\u52a8) \u4e3a\u4f8b\u5b50, \u5305\u542b\u4e86 open , close , xmit , ioctl \u7b49\u5404\u79cd\u5b9e\u73b0 /file: drivers/net/ethernet/intel/igb/igb_main.c static const struct net_device_ops igb_netdev_ops = { .ndo_open = igb_open, .ndo_stop = igb_close, .ndo_start_xmit = igb_xmit_frame, .ndo_get_stats64 = igb_get_stats64, .ndo_set_rx_mode = igb_set_rx_mode, .ndo_set_mac_address = igb_set_mac, .ndo_change_mtu = igb_change_mtu, .ndo_do_ioctl = igb_ioctl, .ndo_tx_timeout = igb_tx_timeout, .ndo_validate_addr = eth_validate_addr, .ndo_vlan_rx_add_vid = igb_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = igb_vlan_rx_kill_vid, .ndo_set_vf_mac = igb_ndo_set_vf_mac, .ndo_set_vf_vlan = igb_ndo_set_vf_vlan, .ndo_set_vf_rate = igb_ndo_set_vf_bw, .ndo_set_vf_spoofchk = igb_ndo_set_vf_spoofchk, .ndo_get_vf_config = igb_ndo_get_vf_config, #ifdef CONFIG_NET_POLL_CONTROLLER .ndo_poll_controller = igb_netpoll, #endif .ndo_fix_features = igb_fix_features, .ndo_set_features = igb_set_features, };","title":"5 struct net_device_ops"},{"location":"chapter_3/10_linux_net/#51-struct-ethtool_ops","text":"\u4ee5 net/ethernet/intel/igb/igb_ethool.c \u4e3a\u4f8b\uff0c\u8fd9\u91cc\u6ce8\u518c\u4e86 igb \u7f51\u5361\u5bf9 ethool \u7684\u652f\u6301. static const struct ethtool_ops igb_ethtool_ops = { .get_settings = igb_get_settings, .set_settings = igb_set_settings, .get_drvinfo = igb_get_drvinfo, .get_regs_len = igb_get_regs_len, .get_regs = igb_get_regs, .get_wol = igb_get_wol, .set_wol = igb_set_wol, .get_msglevel = igb_get_msglevel, .set_msglevel = igb_set_msglevel, .nway_reset = igb_nway_reset, .get_link = igb_get_link, .get_eeprom_len = igb_get_eeprom_len, .get_eeprom = igb_get_eeprom, .set_eeprom = igb_set_eeprom, .get_ringparam = igb_get_ringparam, .set_ringparam = igb_set_ringparam, .get_pauseparam = igb_get_pauseparam, .set_pauseparam = igb_set_pauseparam, .self_test = igb_diag_test, .get_strings = igb_get_strings, .set_phys_id = igb_set_phys_id, .get_sset_count = igb_get_sset_count, .get_ethtool_stats = igb_get_ethtool_stats, .get_coalesce = igb_get_coalesce, .set_coalesce = igb_set_coalesce, .get_ts_info = igb_get_ts_info, .get_rxnfc = igb_get_rxnfc, .set_rxnfc = igb_set_rxnfc, .get_eee = igb_get_eee, .set_eee = igb_set_eee, .get_module_info = igb_get_module_info, .get_module_eeprom = igb_get_module_eeprom, .get_rxfh_indir_size = igb_get_rxfh_indir_size, .get_rxfh = igb_get_rxfh, .set_rxfh = igb_set_rxfh, .get_channels = igb_get_channels, .set_channels = igb_set_channels, .begin = igb_ethtool_begin, .complete = igb_ethtool_complete, }; void igb_set_ethtool_ops(struct net_device *netdev) { netdev->ethtool_ops = &igb_ethtool_ops; }","title":"5.1 struct ethtool_ops"},{"location":"chapter_3/10_linux_net/#6-struct-napi_struct","text":"struct napi_struct { /* The poll_list must only be managed by the entity which * changes the state of the NAPI_STATE_SCHED bit. This means * whoever atomically sets that bit can add this napi_struct * to the per-cpu poll_list, and whoever clears that bit * can remove from the list right before clearing the bit. */ struct list_head poll_list; unsigned long state; // state \u53ef\u4ee5\u662f NAPI_STATE_SCHED \u6216 NAPI_STATE_DISABLE\uff0c\u524d\u8005\u8868\u793a\u8bbe\u5907\u5c06\u5728\u5185\u6838\u7684\u4e0b\u4e00\u6b21\u5faa\u73af\u65f6\u88ab\u8f6e\u8be2\uff0c\u540e\u8005\u8868\u793a\u8f6e\u8be2\u5df1\u7ecf\u7ed3\u675f\u4e14\u6ca1\u6709\u66f4\u591a\u7684\u5206\u7ec4\u7b49\u5f85\u5904\u7406\uff0c\u4f46\u8bbe\u5907\u5c1a\u672a\u4ece\u8f6e\u8be2\u8868\u79fb\u9664\u3002 int weight; unsigned int gro_count; int (*poll)(struct napi_struct *, int); //\u6838\u5fc3\u6210\u5458, \u7279\u5b9a\u4e8e\u786c\u4ef6\u7684poll\u51fd\u6570 #ifdef CONFIG_NETPOLL spinlock_t poll_lock; int poll_owner; #endif struct net_device *dev; struct sk_buff *gro_list; struct sk_buff *skb; struct list_head dev_list; struct hlist_node napi_hash_node; unsigned int napi_id; }; struct napi_struct \u8be5\u7ed3\u6784\u7528\u4e8e\u7ba1\u7406\u8f6e\u8be2\u8868\u4e0a\u7684\u8bbe\u5907\u3002\u5176\u5b9a\u4e49\u5982\u4e0b: <netdevice.h> struct napi_struct { struct list_head poll_list; unsigned long state; int weight; int (*poll) (struct napi_struct *, int) }; \u8f6e\u8be2\u8868\u901a\u8fc7\u4e00\u4e2a\u6807\u51c6\u7684\u5185\u6838\u53cc\u94fe\u8868\u5b9e\u73b0\uff0cpoll_list \u7528\u4f5c\u94fe\u8868\u5143\u7d20\u3002weight \u548c poll \u7684\u8bed\u4e49\u540c\u4e0a\u6587 \u6240\u8ff0\u3002state \u53ef\u4ee5\u662f NAPI_STATE_SCHED \u6216 NAPI_STATE_DISABLE\uff0c\u524d\u8005\u8868\u793a\u8bbe\u5907\u5c06\u5728\u5185\u6838\u7684\u4e0b\u4e00\u6b21\u5faa\u73af\u65f6\u88ab\u8f6e\u8be2\uff0c\u540e\u8005\u8868\u793a\u8f6e\u8be2\u5df1\u7ecf\u7ed3\u675f\u4e14\u6ca1\u6709\u66f4\u591a\u7684\u5206\u7ec4\u7b49\u5f85\u5904\u7406\uff0c\u4f46\u8bbe\u5907\u5c1a\u672a\u4ece\u8f6e\u8be2\u8868\u79fb\u9664\u3002 \u8bf7\u6ce8\u610f\uff0c struct napi_struct \u7ecf\u5e38\u5d4c\u5165\u5230 \u4e00\u4e2a\u66f4\u5927\u7684\u7ed3\u6784\u4e2d\uff0c\u540e\u8005\u5305\u542b\u4e86\u4e0e\u7f51\u5361\u6709\u5173\u7684\u3001\u7279\u5b9a \u624b\u9a71 \u52a8 \u7a08 \u5e8f \u7684 \u6570 \u636e \u3002 \u8fd9 \u6837 \u5728 \u5185 \u6838 \u4f7f \u7528 poll \u51fd\u6570 \u8f6e \u8be2 \u7f51 \u5361 \u65f6 \uff0c \u53ef \u7528 container_of \u673a \u5236 \u83b7 \u5f97 \u76f8 \u5173 \u4fe1 \u606f \u3002 \u5b9e\u73b0 poll \u51fd\u6570\u9700\u8981\u4e24\u4e2a\u53c3\u6570:\u4e00\u4e2a\u6307\u5411 napi_struct \u5b9e\u4f8b\u7684\u6307\u9488\u548c\u4e00\u4e2a\u6307\u5b9a\u4e86\u201c\u9884\u7b97\u201d \u7684\u6574\u6570\uff0c\u9884\u7b97 \u8868\u793a\u5185\u6838\u5141\u8bb8\u9a71\u52a8\u7a0b\u5e8f\u5904\u7406\u7684\u5206\u7ec4\u6570\u76ee\u3002","title":"6 struct napi_struct"},{"location":"chapter_3/10_linux_net/#7-sk_buff","text":"sk_buff \u662f Linux \u7f51\u7edc\u4e2d\u6700\u6838\u5fc3\u7684\u7ed3\u6784\u4f53\uff0c\u5b83\u7528\u6765\u7ba1\u7406\u548c\u63a7\u5236\u63a5\u6536\u6216\u53d1\u9001\u6570\u636e\u5305\u7684\u4fe1\u606f\u3002 \u5404\u5c42\u534f\u8bae\u90fd\u4f9d\u8d56\u4e8e sk_buff \u800c\u5b58\u5728\u3002 struct sk_buff \u662f linux \u7f51\u7edc\u7cfb\u7edf\u4e2d\u7684\u6838\u5fc3\u7ed3\u6784\u4f53\uff0clinux \u7f51\u7edc\u4e2d\u7684\u6240\u6709\u6570\u636e\u5305\u7684\u5c01\u88c5\u4ee5\u53ca\u89e3\u5c01\u88c5\u90fd\u662f\u5728\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u3002 \u5185\u6838\u4e2d sk_buff \u7ed3\u6784\u4f53\u5728\u5404\u5c42\u534f\u8bae\u4e4b\u95f4\u4f20\u8f93\u4e0d\u662f\u7528\u62f7\u8d1d sk_buff \u7ed3\u6784\u4f53\uff0c\u800c\u662f\u901a\u8fc7\u589e\u52a0\u534f\u8bae\u5934\u548c\u79fb\u52a8\u6307\u9488\u6765\u64cd\u4f5c\u7684\u3002 \u5982\u679c\u662f\u4ece L4 \u4f20\u8f93\u5230 L2\uff0c\u5219\u662f\u901a\u8fc7\u5f80 sk_buff \u7ed3\u6784\u4f53\u4e2d\u589e\u52a0\u8be5\u5c42\u534f\u8bae\u5934\u6765\u64cd\u4f5c\uff1b\u5982\u679c\u662f\u4ece L4 \u5230 L2\uff0c\u5219\u662f\u901a\u8fc7\u79fb\u52a8 sk_buff \u7ed3\u6784\u4f53\u4e2d\u7684 data \u6307\u9488\u6765\u5b9e\u73b0\uff0c\u4e0d\u4f1a\u5220\u9664\u5404\u5c42\u534f\u8bae\u5934\u3002\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u63d0\u9ad8 CPU \u7684\u5de5\u4f5c\u6548\u7387\u3002","title":"7 sk_buff \u7ed3\u6784\u4f53"},{"location":"chapter_3/10_linux_net/#71","text":"include/linux/skbuff.h (sk_buff \u7ed3\u6784\u5b9a\u4e49\u548c sk_buff \u5b8f) struct sk_buff { /* These two members must be first. */ struct sk_buff *next; struct sk_buff *prev; struct sock *sk; struct skb_timeval tstamp; struct net_device *dev; struct net_device *input_dev; union { struct tcphdr *th; struct udphdr *uh; struct icmphdr *icmph; struct igmphdr *igmph; struct iphdr *ipiph; struct ipv6hdr *ipv6h; unsigned char *raw; } h; union { struct iphdr *iph; struct ipv6hdr *ipv6h; struct arphdr *arph; unsigned char *raw; } nh; union { unsigned char *raw; } mac; struct dst_entry *dst; struct sec_path *sp; ....// \u66f4\u591a\u6210\u5458 } struct sk_buff \u6210\u5458\u542b\u4e49 \u5185\u6838\u663e\u7136\u9700\u8981\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u8868\u793a\u62a5\u6587\uff0c\u8fd9\u4e2a\u7ed3\u6784\u5c31\u662f sk_buff ( socket buffer \u7684\u7b80\u79f0)\uff0c\u5b83\u7b49\u540c\u4e8e\u5728 <TCP/IP\u8be6\u89e3 \u53772> \u4e2d\u63cf\u8ff0\u7684 BSD \u5185\u6838\u4e2d\u7684 mbuf\u3002 sk_buff \u7ed3\u6784\u81ea\u8eab\u5e76\u4e0d\u5b58\u50a8\u62a5\u6587\u5185\u5bb9\uff0c\u5b83\u901a\u8fc7\u591a\u4e2a\u6307\u9488\u6307\u5411\u771f\u6b63\u7684\u62a5\u6587\u5185\u5b58\u7a7a\u95f4: sk_buff \u662f\u4e00\u4e2a\u8d2f\u7a7f\u6574\u4e2a\u534f\u8bae\u6808\u5c42\u6b21\u7684\u7ed3\u6784\uff0c\u5728\u5404\u5c42\u95f4\u4f20\u9012\u65f6\uff0c\u5185\u6838\u53ea\u9700\u8981\u8c03\u6574 sk_buff \u4e2d\u7684\u6307\u9488\u4f4d\u7f6e\u5c31\u884c\u3002","title":"7.1 \u8be6\u7ec6\u4ee3\u7801"},{"location":"chapter_3/10_linux_net/#72-sk_buff_head","text":"\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868 struct sk_buff_head { struct sk_buff *next; struct sk_buff *prev; __u32 qlen; spinlock_t lock; } struct sock \u4e2d\u7684 sk_write_queue \u6210\u5458, \u4ee3\u8868 \u53d1\u9001\u961f\u5217 , \u5c31\u662f\u4e00\u4e2a struct sk_buff_head . @sk_write_queue: Packet sending queue struct sock \u4e2d\u7684 sk_receive_queue \u6210\u5458, \u4ee3\u8868 \u63a5\u6536\u961f\u5217 , \u4e5f\u662f\u4e00\u4e2a struct sk_buff_head . @sk_receive_queue: incoming packets include/net/sock.h struct sock { ... struct sk_buff_head sk_write_queue; struct sk_buff_head sk_receive_queue; ... }","title":"7.2 sk_buff_head"},{"location":"chapter_3/10_linux_net/#8-struct-proto-tcp_prot","text":"\u5728\u53d1\u9001\u6570\u636e\u4e4b\u524d\uff0c\u6211\u4eec\u5f80\u5f80\u8fd8\u9700\u8981\u4e00\u4e2a\u5df2\u7ecf\u5efa\u7acb\u597d\u8fde\u63a5\u7684 socket\u3002 \u6211\u4eec\u5c31\u4ee5\u5f00\u7bc7\u670d\u52a1\u5668\u7f29\u5fae\u6e90\u4ee3\u7801\u4e2d\u63d0\u5230\u7684 accept \u4e3a\u4f8b\uff0c\u5f53 accept \u4e4b\u540e\uff0c\u8fdb\u7a0b\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 socket \u51fa\u6765\uff0c\u7136\u540e\u628a\u5b83\u653e\u5230\u5f53\u524d\u8fdb\u7a0b\u7684\u6253\u5f00\u6587\u4ef6\u5217\u8868\u4e2d\uff0c\u4e13\u95e8\u7528\u4e8e\u548c\u5bf9\u5e94\u7684\u5ba2\u6237\u7aef\u901a\u4fe1\u3002 \u5047\u8bbe\u670d\u52a1\u5668\u8fdb\u7a0b\u901a\u8fc7 accept \u548c\u5ba2\u6237\u7aef\u5efa\u7acb\u4e86\u4e24\u6761\u8fde\u63a5\uff0c\u6211\u4eec\u6765\u7b80\u5355\u770b\u4e00\u4e0b\u8fd9\u4e24\u6761\u8fde\u63a5\u548c\u8fdb\u7a0b\u7684\u5173\u8054\u5173\u7cfb\u3002 \u5176\u4e2d\u4ee3\u8868\u4e00\u6761\u8fde\u63a5\u7684 socket \u5185\u6838\u5bf9\u8c61\u66f4\u4e3a\u5177\u4f53\u4e00\u70b9\u7684\u7ed3\u6784\u56fe\u5982\u4e0b\u3002 Linux \u5185\u6838\u7f51\u7edc\u5c42\u5b9e\u73b0\u65f6, \u603b\u662f\u5206\u4e3a\u4e09\u5c42: BSD socket \u5bf9\u8c61 inet \u534f\u8bae\u65cf \u5177\u4f53\u534f\u8bae,\u6bd4\u5982 tcp \u6309\u7167\u7ecf\u5178\u7684 \u63cf\u8ff0\u7b26 + ops \u601d\u60f3, \u5bf9\u5e94 inet socket \u7684\u64cd\u4f5c\u80fd\u529b\u662f\u7528\u7ed3\u6784\u4f53 struct proto_ops \u8868\u793a, \u6bd4\u5982 inet \u5c42\u4e00\u4e9b\u64cd\u4f5c\u662f\u7528 struct proto_ops inet_stream_ops \u7ed3\u6784\u4f53\u8868\u793a, \u5177\u4f53 \u534f\u8bae\u5c42 sock \u7684\u64cd\u4f5c\u80fd\u529b\u662f\u7528\u7ed3\u6784\u4f53 struct proto \u8868\u793a, \u6bd4\u5982 tcp \u5c42\u4e00\u4e9b\u64cd\u4f5c\u662f\u7528 struct proto tcp_prot \u7ed3\u6784\u4f53\u8868\u793a. struct proto udp_prot = { \u5b9a\u4e49\u5728 net/ipv4/udp.c:2650 struct proto tcp_prot = { \u5b9a\u4e49\u5728 net/ipv4/tcp_ipv4.c:2447 net/ipv4/tcp_ipv4.c struct proto tcp_prot = { .name = \"TCP\", .owner = THIS_MODULE, .close = tcp_close, .connect = tcp_v4_connect, .disconnect = tcp_disconnect, .accept = inet_csk_accept, .ioctl = tcp_ioctl, .init = tcp_v4_init_sock, .destroy = tcp_v4_destroy_sock, .shutdown = tcp_shutdown, .setsockopt = tcp_setsockopt, .getsockopt = tcp_getsockopt, .recvmsg = tcp_recvmsg, .sendmsg = tcp_sendmsg, .sendpage = tcp_sendpage, .backlog_rcv = tcp_v4_do_rcv, .release_cb = tcp_release_cb, .hash = inet_hash, .unhash = inet_unhash, .get_port = inet_csk_get_port, .enter_memory_pressure = tcp_enter_memory_pressure, .stream_memory_free = tcp_stream_memory_free, .sockets_allocated = &tcp_sockets_allocated, .orphan_count = &tcp_orphan_count, .memory_allocated = &tcp_memory_allocated, .memory_pressure = &tcp_memory_pressure, .sysctl_mem = sysctl_tcp_mem, .sysctl_wmem = sysctl_tcp_wmem, .sysctl_rmem = sysctl_tcp_rmem, .max_header = MAX_TCP_HEADER, .obj_size = sizeof(struct tcp_sock), .slab_flags = SLAB_DESTROY_BY_RCU, .twsk_prot = &tcp_timewait_sock_ops, .rsk_prot = &tcp_request_sock_ops, .h.hashinfo = &tcp_hashinfo, .no_autobind = true, #ifdef CONFIG_COMPAT .compat_setsockopt = compat_tcp_setsockopt, .compat_getsockopt = compat_tcp_getsockopt, #endif #ifdef CONFIG_MEMCG_KMEM .init_cgroup = tcp_init_cgroup, .destroy_cgroup = tcp_destroy_cgroup, .proto_cgroup = tcp_proto_cgroup, #endif }; struct proto { \u5b9a\u4e49\u5728 include/net/sock.h:1048 net/ipv4/af_inet.c const struct proto_ops inet_stream_ops = { .family = PF_INET, .owner = THIS_MODULE, .release = inet_release, .bind = inet_bind, .connect = inet_stream_connect, .socketpair = sock_no_socketpair, .accept = inet_accept, .getname = inet_getname, .poll = tcp_poll, .ioctl = inet_ioctl, .listen = inet_listen, .shutdown = inet_shutdown, .setsockopt = sock_common_setsockopt, .getsockopt = sock_common_getsockopt, .sendmsg = inet_sendmsg, .recvmsg = inet_recvmsg, .mmap = sock_no_mmap, .sendpage = inet_sendpage, .splice_read = tcp_splice_read, #ifdef CONFIG_COMPAT .compat_setsockopt = compat_sock_common_setsockopt, .compat_getsockopt = compat_sock_common_getsockopt, .compat_ioctl = inet_compat_ioctl, #endif };","title":"8 struct proto tcp_prot"},{"location":"chapter_3/10_linux_net/#81-socket-inet-proto","text":"I think the question is the most headache problem when a newbie try to create a new protocol Explain : Both structures have member elements with similar names although they represent different functions struct proto_ops: used for communication between socket layer and transport layer struct proto: used for communicate with system calls Example : when you call a system call in userspace, ex connect(), prot_ops_connect() will be call first. In fucntion prot_ops_connect() , we need to call sk->sk_prot->connect() And sk->sk_prot->connect() will call proto_connect() automatically \u4e5f\u5c31\u662f\u8bf4\u5176\u5b9e\u5206\u4e24\u5c42, struct proto_ops \u7528\u4e8e socket \u5c42\u548c\u4f20\u8f93\u5c42\u4ea4\u4e92. proto \u7528\u4e8e\u65b9\u4fbf\u5b9e\u73b0\u7cfb\u7edf\u8c03\u7528. \u53e6\u5916, Linux \u5185\u6838\u7f51\u7edc\u5c42\u5b9e\u73b0\u65f6, \u603b\u662f\u5206\u4e3a\u4e09\u5c42: BSD socket \u5bf9\u8c61 inet \u534f\u8bae\u65cf \u5177\u4f53\u534f\u8bae,\u6bd4\u5982 tcp \u53c2\u8003 understand 'struct proto' and 'struct proto_ops' in the kernel","title":"8.1 \u5173\u4e8e socket \u548c inet \u548c proto \u7684\u8bf4\u660e"},{"location":"chapter_3/10_linux_net/#9-tcp","text":"skb \u662f struct sk_buff \u5bf9\u8c61\u7684\u7b80\u79f0\uff0c\u7528\u6237\u7684\u53d1\u9001\u961f\u5217\u5c31\u662f\u8be5\u5bf9\u8c61\u7ec4\u6210\u7684\u4e00\u4e2a\u94fe\u8868\u3002","title":"9 \u7528\u6237\u7684 tcp \u53d1\u9001\u961f\u5217\u662f\u4e00\u4e2a\u94fe\u8868"},{"location":"chapter_3/10_linux_net/#10-struct-sock","text":"struct socket \u662f\u5728\u865a\u62df\u6587\u4ef6\u7cfb\u7edf\u4e0a\u88ab\u521b\u5efa\u51fa\u6765\u7684\uff0c\u53ef\u4ee5\u628a\u5b83\u770b\u6210\u4e00\u4e2a\u6587\u4ef6\u3002 struct sock \u662f\u7f51\u7edc\u5c42\u5bf9\u4e8e socket \u7684\u8868\u793a\uff0c\u7ed3\u6784\u4f53\u6bd4\u8f83\u5e9e\u5927.","title":"10 struct sock \u8bb2\u89e3"},{"location":"chapter_3/10_linux_net/#101-socket-sock","text":"\u8fd9\u662f\u56e0\u4e3a socket \u662f inode \u7ed3\u6784\u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u5373\u628a inode \u7ed3 \u6784\u5185\u90e8\u7684\u4e00\u4e2a union \u7528\u4f5c socket \u7ed3\u6784\u3002\u7531\u4e8e\u63d2\u53e3\u64cd\u4f5c\u7684\u7279\u6b8a\u6027\uff0c\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u4e2d\u9700\u8981\u6709\u5927\u91cf\u7684\u7ed3\u6784\u6210\u5206\uff0c\u5982\u679c\u628a\u8fd9\u4e9b\u6210\u5206\u5168\u90e8\u653e\u5230 socket \u7ed3\u6784\u4e2d\uff0c\u5219 inode \u7ed3\u6784\u4e2d\u7684\u8fd9\u4e2a union \u5c31\u4f1a\u53d8\u5f97\u5f88\u5927\uff0c\u4ece\u800c inode \u7ed3\u6784\u4e5f\u4f1a\u53d8\u5f97\u5f88\u5927\uff0c\u800c\u5bf9\u4e8e\u5176\u4ed6\u6587\u4ef6\u7cfb\u7edf\u8fd9\u4e2a union \u662f\u4e0d\u9700\u8981\u8fd9\u4e48\u5927\u7684\uff0c \u6240\u4ee5\u4f1a\u9020\u6210\u5de8\u5927\u6d6a\u8d39\uff0c\u7cfb\u7edf\u4e2d\u4f7f\u7528 inode \u7ed3\u6784\u7684\u6570\u91cf\u8981\u8fdc\u8fdc\u8d85\u8fc7\u4f7f\u7528 socket \u7684\u6570\u91cf\uff0c\u6545\u89e3\u51b3\u7684\u529e\u6cd5\u5c31\u662f\u628a\u63d2\u53e3\u5206\u6210\u4e24\u90e8\u5206\uff0c\u628a\u4e0e\u6587\u4ef6\u7cfb \u7edf\u5173\u7cfb\u5bc6\u5207\u7684\u653e\u5728 socket \u7ed3\u6784\u4e2d\uff0c\u628a\u4e0e\u901a\u4fe1\u5173\u7cfb\u5bc6\u5207\u7684\u653e\u5728\u53e6\u4e00\u4e2a\u5355\u72ec\u7ed3\u6784 sock \u4e2d\uff1b struct inode { ..................... union { struct ext2_inode_info ext2_i; struct ext3_inode_info ext3_i; struct socket socket_i; ..................... } u; }; struct socket { socket_state state; // \u8be5state\u7528\u6765\u8868\u660e\u8be5socket\u7684\u5f53\u524d\u72b6\u6001 typedef enum { SS_FREE = 0, /* not allocated */ SS_UNCONNECTED, /* unconnected to any socket */ SS_CONNECTING, /* in process of connecting */ SS_CONNECTED, /* connected to socket */ SS_DISCONNECTING /* in process of disconnecting */ } socket_state; unsigned long flags; //\u8be5\u6210\u5458\u53ef\u80fd\u7684\u503c\u5982\u4e0b\uff0c\u8be5\u6807\u5fd7\u7528\u6765\u8bbe\u7f6esocket\u662f\u5426\u6b63\u5728\u5fd9\u788c #define SOCK_ASYNC_NOSPACE 0 #define SOCK_ASYNC_WAITDATA 1 #define SOCK_NOSPACE 2 struct proto_ops *ops; //\u4f9d\u636e\u534f\u8bae\u90a6\u5b9a\u5230\u8be5socket\u4e0a\u7684\u7279\u5b9a\u7684\u534f\u8bae\u65cf\u7684\u64cd\u4f5c\u51fd\u6570\u6307\u9488\uff0c\u4f8b\u5982IPv4 TCP\u5c31\u662finet_stream_ops struct inode *inode; //\u8868\u660e\u8be5socket\u6240\u5c5e\u7684inode struct fasync_struct *fasync_list; //\u5f02\u6b65\u5524\u9192\u961f\u5217 struct file *file; //file\u56de\u6307\u6307\u9488 struct sock *sk; //sock\u6307\u9488 wait_queue_head_t wait; //sock\u7684\u7b49\u5f85\u961f\u5217\uff0c\u5728TCP\u9700\u8981\u7b49\u5f85\u65f6\u5c31sleep\u5728\u8fd9\u4e2a\u961f\u5217\u4e0a short type; //\u8868\u793a\u8be5socket\u5728\u7279\u5b9a\u534f\u8bae\u65cf\u4e0b\u7684\u7c7b\u578b\u4f8b\u5982SOCK_STREAM, unsigned char passcred; //\u5728TCP\u5206\u6790\u4e2d\u65e0\u987b\u8003\u8651 }; /** * struct sock - network layer representation of sockets * @__sk_common: shared layout with inet_timewait_sock * @sk_shutdown: mask of %SEND_SHUTDOWN and/or %RCV_SHUTDOWN * @sk_userlocks: %SO_SNDBUF and %SO_RCVBUF settings * @sk_lock: synchronizer * @sk_rcvbuf: size of receive buffer in bytes * @sk_wq: sock wait queue and async head * @sk_rx_dst: receive input route used by early demux * @sk_dst_cache: destination cache * @sk_dst_lock: destination cache lock * @sk_policy: flow policy * @sk_receive_queue: incoming packets * @sk_wmem_alloc: transmit queue bytes committed * @sk_write_queue: Packet sending queue * @sk_async_wait_queue: DMA copied packets * @sk_omem_alloc: \"o\" is \"option\" or \"other\" * @sk_wmem_queued: persistent queue size * @sk_forward_alloc: space allocated forward * @sk_napi_id: id of the last napi context to receive data for sk * @sk_ll_usec: usecs to busypoll when there is no data * @sk_allocation: allocation mode * @sk_pacing_rate: Pacing rate (if supported by transport/packet scheduler) * @sk_max_pacing_rate: Maximum pacing rate (%SO_MAX_PACING_RATE) * @sk_sndbuf: size of send buffer in bytes * @sk_flags: %SO_LINGER (l_onoff), %SO_BROADCAST, %SO_KEEPALIVE, * %SO_OOBINLINE settings, %SO_TIMESTAMPING settings * @sk_no_check_tx: %SO_NO_CHECK setting, set checksum in TX packets * @sk_no_check_rx: allow zero checksum in RX packets * @sk_route_caps: route capabilities (e.g. %NETIF_F_TSO) * @sk_route_nocaps: forbidden route capabilities (e.g NETIF_F_GSO_MASK) * @sk_gso_type: GSO type (e.g. %SKB_GSO_TCPV4) * @sk_gso_max_size: Maximum GSO segment size to build * @sk_gso_max_segs: Maximum number of GSO segments * @sk_lingertime: %SO_LINGER l_linger setting * @sk_backlog: always used with the per-socket spinlock held * @sk_callback_lock: used with the callbacks in the end of this struct * @sk_error_queue: rarely used * @sk_prot_creator: sk_prot of original sock creator (see ipv6_setsockopt, * IPV6_ADDRFORM for instance) * @sk_err: last error * @sk_err_soft: errors that don't cause failure but are the cause of a * persistent failure not just 'timed out' * @sk_drops: raw/udp drops counter * @sk_ack_backlog: current listen backlog * @sk_max_ack_backlog: listen backlog set in listen() * @sk_priority: %SO_PRIORITY setting * @sk_cgrp_prioidx: socket group's priority map index * @sk_type: socket type (%SOCK_STREAM, etc) * @sk_protocol: which protocol this socket belongs in this network family * @sk_peer_pid: &struct pid for this socket's peer * @sk_peer_cred: %SO_PEERCRED setting * @sk_rcvlowat: %SO_RCVLOWAT setting * @sk_rcvtimeo: %SO_RCVTIMEO setting * @sk_sndtimeo: %SO_SNDTIMEO setting * @sk_rxhash: flow hash received from netif layer * @sk_filter: socket filtering instructions * @sk_protinfo: private area, net family specific, when not using slab * @sk_timer: sock cleanup timer * @sk_stamp: time stamp of last packet received * @sk_socket: Identd and reporting IO signals * @sk_user_data: RPC layer private data * @sk_frag: cached page frag * @sk_peek_off: current peek_offset value * @sk_send_head: front of stuff to transmit * @sk_security: used by security modules * @sk_mark: generic packet mark * @sk_classid: this socket's cgroup classid * @sk_cgrp: this socket's cgroup-specific proto data * @sk_write_pending: a write to stream socket waits to start * @sk_state_change: callback to indicate change in the state of the sock * @sk_data_ready: callback to indicate there is data to be processed * @sk_write_space: callback to indicate there is bf sending space available * @sk_error_report: callback to indicate errors (e.g. %MSG_ERRQUEUE) * @sk_backlog_rcv: callback to process the backlog * @sk_destruct: called at sock freeing time, i.e. when all refcnt == 0 */ struct sock { /* * Now struct inet_timewait_sock also uses sock_common, so please just * don't add nothing before this first member (__sk_common) --acme */ struct sock_common __sk_common; #define sk_node __sk_common.skc_node #define sk_nulls_node __sk_common.skc_nulls_node #define sk_refcnt __sk_common.skc_refcnt #define sk_tx_queue_mapping __sk_common.skc_tx_queue_mapping #define sk_dontcopy_begin __sk_common.skc_dontcopy_begin #define sk_dontcopy_end __sk_common.skc_dontcopy_end #define sk_hash __sk_common.skc_hash #define sk_portpair __sk_common.skc_portpair #define sk_num __sk_common.skc_num #define sk_dport __sk_common.skc_dport #define sk_addrpair __sk_common.skc_addrpair #define sk_daddr __sk_common.skc_daddr #define sk_rcv_saddr __sk_common.skc_rcv_saddr #define sk_family __sk_common.skc_family #define sk_state __sk_common.skc_state #define sk_reuse __sk_common.skc_reuse #define sk_reuseport __sk_common.skc_reuseport #define sk_bound_dev_if __sk_common.skc_bound_dev_if #define sk_bind_node __sk_common.skc_bind_node #define sk_prot __sk_common.skc_prot #define sk_net __sk_common.skc_net #define sk_v6_daddr __sk_common.skc_v6_daddr #define sk_v6_rcv_saddr __sk_common.skc_v6_rcv_saddr socket_lock_t sk_lock; struct sk_buff_head sk_receive_queue; /* * The backlog queue is special, it is always used with * the per-socket spinlock held and requires low latency * access. Therefore we special case it's implementation. * Note : rmem_alloc is in this structure to fill a hole * on 64bit arches, not because its logically part of * backlog. */ struct { atomic_t rmem_alloc; int len; struct sk_buff *head; struct sk_buff *tail; } sk_backlog; #define sk_rmem_alloc sk_backlog.rmem_alloc int sk_forward_alloc; #ifdef CONFIG_RPS __u32 sk_rxhash; #endif #ifdef CONFIG_NET_RX_BUSY_POLL unsigned int sk_napi_id; unsigned int sk_ll_usec; #endif atomic_t sk_drops; int sk_rcvbuf; struct sk_filter __rcu *sk_filter; struct socket_wq __rcu *sk_wq; #ifdef CONFIG_NET_DMA struct sk_buff_head sk_async_wait_queue; #endif #ifdef CONFIG_XFRM struct xfrm_policy *sk_policy[2]; #endif unsigned long sk_flags; struct dst_entry *sk_rx_dst; struct dst_entry __rcu *sk_dst_cache; spinlock_t sk_dst_lock; atomic_t sk_wmem_alloc; atomic_t sk_omem_alloc; int sk_sndbuf; struct sk_buff_head sk_write_queue; kmemcheck_bitfield_begin(flags); unsigned int sk_shutdown : 2, sk_no_check_tx : 1, sk_no_check_rx : 1, sk_userlocks : 4, sk_protocol : 8, sk_type : 16; #define SK_PROTOCOL_MAX U8_MAX kmemcheck_bitfield_end(flags); int sk_wmem_queued; gfp_t sk_allocation; u32 sk_pacing_rate; /* bytes per second */ u32 sk_max_pacing_rate; netdev_features_t sk_route_caps; netdev_features_t sk_route_nocaps; int sk_gso_type; unsigned int sk_gso_max_size; u16 sk_gso_max_segs; int sk_rcvlowat; unsigned long sk_lingertime; struct sk_buff_head sk_error_queue; struct proto *sk_prot_creator; rwlock_t sk_callback_lock; int sk_err, sk_err_soft; unsigned short sk_ack_backlog; unsigned short sk_max_ack_backlog; __u32 sk_priority; #if IS_ENABLED(CONFIG_CGROUP_NET_PRIO) __u32 sk_cgrp_prioidx; #endif struct pid *sk_peer_pid; const struct cred *sk_peer_cred; long sk_rcvtimeo; long sk_sndtimeo; void *sk_protinfo; struct timer_list sk_timer; ktime_t sk_stamp; struct socket *sk_socket; void *sk_user_data; struct page_frag sk_frag; struct sk_buff *sk_send_head; __s32 sk_peek_off; int sk_write_pending; #ifdef CONFIG_SECURITY void *sk_security; #endif __u32 sk_mark; u32 sk_classid; struct cg_proto *sk_cgrp; void (*sk_state_change)(struct sock *sk); void (*sk_data_ready)(struct sock *sk); void (*sk_write_space)(struct sock *sk); void (*sk_error_report)(struct sock *sk); int (*sk_backlog_rcv)(struct sock *sk, struct sk_buff *skb); void (*sk_destruct)(struct sock *sk); };","title":"10.1 socket \u548c sock \u662f\u540c\u4e00\u4e8b\u7269\u7684\u4e24\u4e2a\u4fa7\u9762\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u628a\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\u5408\u5e76\u6210\u4e00\u4e2a\u5462?"},{"location":"chapter_3/10_linux_net/#socket-sock","text":"\u7528\u6237\u7a7a\u95f4\u901a\u8fc7 socket()\u3001bind()\u3001listen()\u3001accept() \u7b49\u5e93\u51fd\u6570\u8fdb\u884c\u7f51\u7edc\u7f16\u7a0b\u3002\u800c\u8fd9\u91cc\u63d0\u5230\u7684 socket \u548c sock \u662f\u5185\u6838\u4e2d\u7684\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u5176\u4e2d socket \u5411\u4e0a\u9762\u5411\u7528\u6237\uff0c\u800c sock \u5411\u4e0b\u9762\u5411\u534f\u8bae\u6808\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u8fd9\u4e24\u4e2a\u7ed3\u6784\u5b9e\u9645\u4e0a\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002 \u6ce8\u610f\u5230\uff0c\u8fd9\u4e24\u4e2a\u7ed3\u6784\u4e0a\u90fd\u6709\u4e00\u4e2a\u53eb ops \u7684\u6307\u9488, \u4f46\u5b83\u4eec\u7684\u7c7b\u578b\u4e0d\u540c\u3002socket \u7684 ops \u662f\u4e00\u4e2a\u6307\u5411 struct proto_ops \u7684\u6307\u9488\uff0csock \u7684 ops \u662f\u4e00\u4e2a\u6307\u5411 struct proto \u7684\u6307\u9488, \u5b83\u4eec\u5728\u7ed3\u6784\u88ab\u521b\u5efa\u65f6\u786e\u5b9a\u3002 \u56de\u5fc6\u7f51\u7edc\u7f16\u7a0b\u4e2d socket() \u51fd\u6570\u7684\u539f\u578b\uff1a #include <sys/socket.h> sockfd = socket(int socket_family, int socket_type, int protocol); \u5b9e\u9645\u4e0a, socket->ops \u548c sock->ops \u7531\u524d\u4e24\u4e2a\u53c2\u6570 socket_family \u548c socket_type \u5171\u540c\u786e\u5b9a\u3002 \u5982\u679c socket_family \u662f\u6700\u5e38\u7528\u7684 PF_INET \u534f\u8bae\u7c07, \u5219 socket->ops \u548c sock->ops \u7684\u53d6\u503c\u5c31\u8bb0\u5f55\u5728 INET \u534f\u8bae\u5f00\u5173\u8868\u4e2d static struct inet_protosw inetsw_array[] = { { .type = SOCK_STREAM, .protocol = IPPROTO_TCP, .prot = &tcp_prot, // \u5bf9\u5e94 sock->ops .ops = &inet_stream_ops, // \u5bf9\u5e94 socket->ops .flags = INET_PROTOSW_PERMANENT | INET_PROTOSW_ICSK, }, { .type = SOCK_DGRAM, .protocol = IPPROTO_UDP, .prot = &udp_prot, // \u5bf9\u5e94 sock->ops .ops = &inet_dgram_ops, // \u5bf9\u5e94 socket->ops .flags = INET_PROTOSW_PERMANENT, }, } .......","title":"socket &amp; sock"},{"location":"chapter_3/10_linux_net/#102-struct-inet_connection_sock","text":"include/net/inet_connection_sock.h /** inet_connection_sock - INET connection oriented sock * * @icsk_accept_queue: FIFO of established children * @icsk_bind_hash: Bind node * @icsk_timeout: Timeout * @icsk_retransmit_timer: Resend (no ack) * @icsk_rto: Retransmit timeout * @icsk_pmtu_cookie Last pmtu seen by socket * @icsk_ca_ops Pluggable congestion control hook * @icsk_af_ops Operations which are AF_INET{4,6} specific * @icsk_ca_state: Congestion control state * @icsk_retransmits: Number of unrecovered [RTO] timeouts * @icsk_pending: Scheduled timer event * @icsk_backoff: Backoff * @icsk_syn_retries: Number of allowed SYN (or equivalent) retries * @icsk_probes_out: unanswered 0 window probes * @icsk_ext_hdr_len: Network protocol overhead (IP/IPv6 options) * @icsk_ack: Delayed ACK control data * @icsk_mtup; MTU probing control data */ struct inet_connection_sock { /* inet_sock has to be the first member! */ struct inet_sock icsk_inet; struct request_sock_queue icsk_accept_queue; struct inet_bind_bucket *icsk_bind_hash; unsigned long icsk_timeout; struct timer_list icsk_retransmit_timer; struct timer_list icsk_delack_timer; __u32 icsk_rto; __u32 icsk_pmtu_cookie; const struct tcp_congestion_ops *icsk_ca_ops; const struct inet_connection_sock_af_ops *icsk_af_ops; unsigned int (*icsk_sync_mss)(struct sock *sk, u32 pmtu); __u8 icsk_ca_state; __u8 icsk_retransmits; __u8 icsk_pending; __u8 icsk_backoff; __u8 icsk_syn_retries; __u8 icsk_probes_out; __u16 icsk_ext_hdr_len; struct { __u8 pending; /* ACK is pending */ __u8 quick; /* Scheduled number of quick acks */ __u8 pingpong; /* The session is interactive */ __u8 blocked; /* Delayed ACK was blocked by socket lock */ __u32 ato; /* Predicted tick of soft clock */ unsigned long timeout; /* Currently scheduled timeout */ __u32 lrcvtime; /* timestamp of last received data packet */ __u16 last_seg_size; /* Size of last incoming segment */ __u16 rcv_mss; /* MSS used for delayed ACK decisions */ } icsk_ack; struct { int enabled; /* Range of MTUs to search */ int search_high; int search_low; /* Information on the current probe. */ int probe_size; } icsk_mtup; u32 icsk_ca_priv[16]; u32 icsk_user_timeout; #define ICSK_CA_PRIV_SIZE (16 * sizeof(u32)) };","title":"10.2 struct inet_connection_sock"},{"location":"chapter_3/10_linux_net/#103-struct-inet_sock","text":"/** struct inet_sock - representation of INET sockets * * @sk - ancestor class * @pinet6 - pointer to IPv6 control block * @inet_daddr - Foreign IPv4 addr * @inet_rcv_saddr - Bound local IPv4 addr * @inet_dport - Destination port * @inet_num - Local port * @inet_saddr - Sending source * @uc_ttl - Unicast TTL * @inet_sport - Source port * @inet_id - ID counter for DF pkts * @tos - TOS * @mc_ttl - Multicasting TTL * @is_icsk - is this an inet_connection_sock? * @uc_index - Unicast outgoing device index * @mc_index - Multicast device index * @mc_list - Group array * @cork - info to build ip hdr on each ip frag while socket is corked */ struct inet_sock { /* sk and pinet6 has to be the first two members of inet_sock */ struct sock sk; #if IS_ENABLED(CONFIG_IPV6) struct ipv6_pinfo *pinet6; #endif /* Socket demultiplex comparisons on incoming packets. */ #define inet_daddr sk.__sk_common.skc_daddr #define inet_rcv_saddr sk.__sk_common.skc_rcv_saddr #define inet_dport sk.__sk_common.skc_dport #define inet_num sk.__sk_common.skc_num __be32 inet_saddr; __s16 uc_ttl; __u16 cmsg_flags; __be16 inet_sport; __u16 inet_id; struct ip_options_rcu __rcu *inet_opt; int rx_dst_ifindex; __u8 tos; __u8 min_ttl; __u8 mc_ttl; __u8 pmtudisc; __u8 recverr:1, is_icsk:1, freebind:1, hdrincl:1, mc_loop:1, transparent:1, mc_all:1, nodefrag:1; __u8 rcv_tos; int uc_index; int mc_index; __be32 mc_addr; struct ip_mc_socklist __rcu *mc_list; struct inet_cork_full cork; };","title":"10.3 struct inet_sock"},{"location":"chapter_3/10_linux_net/#104","text":"\u534a\u8fde\u63a5\u54c8\u5e0c\u8868 \u662f\u91c7\u7528 struct lisen_sock \u7ed3\u6784\u4f53\u8868\u793a \u5168\u94fe\u63a5\u961f\u5217 \u91c7\u7528 rskq_accept_head \u548c rskq_accept_tail \u6307\u9488\u5206\u522b\u6307\u5411\u5934\u90e8\u548c\u5c3e\u90e8 \u5176\u5e95\u5c42\u5143\u7d20\u90fd\u662f struct request_sock \u534a\u8fde\u63a5\u54c8\u5e0c\u8868 \u548c \u5168\u94fe\u63a5\u961f\u5217 \u88ab \u4e00\u8d77 \u5c01\u88c5\u5728 struct requst_sock_queue \u5f53\u4e2d","title":"10.4 \u534a\u8fde\u63a5\u54c8\u5e0c\u8868\u548c\u5168\u94fe\u63a5\u961f\u5217"},{"location":"chapter_3/10_linux_net/#105-struct-request_sock-mini-sock-to-represent-a-connection-request","text":"struct tcp_request_sock { struct inet_request_sock req; #ifdef CONFIG_TCP_MD5SIG /* Only used by TCP MD5 Signature so far. */ const struct tcp_request_sock_ops *af_specific; #endif //\u5ba2\u6237\u7aefSYN\u6bb5\u4e2d\u643a\u5e26\u7684seq\uff0c\u5373\u5ba2\u6237\u7aef\u7684\u521d\u59cb\u5e8f\u5217\u53f7 */ u32 rcv_isn; //SYN+ACK\u6bb5\u643a\u5e26\u7684seq\uff0c\u5373\u670d\u52a1\u5668\u7aef\u7684\u521d\u59cb\u5e8f\u5217\u53f7 u32 snt_isn; //SYN+ACK\u6bb5\u53d1\u9001\u7684\u65f6\u95f4\u6233\uff0c\u57fa\u4e8ejiffies u32 snt_synack; }; struct inet_request_sock { struct request_sock req; #if IS_ENABLED(CONFIG_IPV6) u16 inet6_rsk_offset; #endif __be16 loc_port; /* \u670d\u52a1\u5668\u7aef\u7aef\u53e3\u53f7 */ __be32 loc_addr; /* \u670d\u52a1\u5668\u7aefIP\u5730\u5740 */ __be32 rmt_addr; /* \u5ba2\u6237\u7aefIP\u5730\u5740 */ __be16 rmt_port; /* \u5ba2\u6237\u7aef\u7aef\u53e3\u53f7 */ kmemcheck_bitfield_begin(flags); u16 snd_wscale : 4, /* \u5ba2\u6237\u7aef\u7684\u7a97\u53e3\u6269\u5927\u56e0\u5b50 */ rcv_wscale : 4, /* \u670d\u52a1\u5668\u7aef\u7684\u7a97\u53e3\u6269\u5927\u56e0\u5b50 */ tstamp_ok : 1, /* \u6807\u8bc6\u672c\u8fde\u63a5\u662f\u5426\u652f\u6301TIMESTAMP\u9009\u9879 */ sack_ok : 1, /* \u6807\u8bc6\u672c\u8fde\u63a5\u662f\u5426\u652f\u6301SACK\u9009\u9879 */ wscale_ok : 1, /* \u6807\u8bc6\u672c\u8fde\u63a5\u662f\u5426\u652f\u6301Window Scale\u9009\u9879 */ ecn_ok : 1, /* \u6807\u8bc6\u672c\u8fde\u63a5\u662f\u5426\u652f\u6301ECN\u9009\u9879 */ acked : 1, no_srccheck : 1; kmemcheck_bitfield_end(flags); struct ip_options_rcu *opt; /* IP\u9009\u9879 */ }; /* struct request_sock - mini sock to represent a connection request */ struct request_sock { //\u548c\u5176\u5b83struct request_sock\u5bf9\u8c61\u5f62\u6210\u94fe\u8868 struct request_sock *dl_next; /* Must be first member! */ //SYN\u6bb5\u4e2d\u5ba2\u6237\u7aef\u901a\u544a\u7684MSS u16 mss; //SYN+ACK\u6bb5\u5df2\u7ecf\u91cd\u4f20\u7684\u6b21\u6570\uff0c\u521d\u59cb\u5316\u4e3a0 u8 retrans; u8 __pad; u32 window_clamp; /* window clamp at creation time */ u32 rcv_wnd; /* rcv_wnd offered first time */ u32 ts_recent; //SYN+ACK\u6bb5\u7684\u8d85\u65f6\u65f6\u95f4 unsigned long expires; //\u6307\u5411tcp_request_sock_ops,\u8be5\u51fd\u6570\u96c6\u7528\u4e8e\u5904\u7406\u7b2c\u4e09\u6b21\u63e1\u624b\u7684 //ACK\u6bb5\u4ee5\u53ca\u540e\u7eedaccept\u8fc7\u7a0b\u4e2dstruct tcp_sock\u5bf9\u8c61\u7684\u521b\u5efa const struct request_sock_ops *rsk_ops; //\u8fde\u63a5\u5efa\u7acb\u524d\u65e0\u6548\uff0c\u5efa\u7acb\u540e\u6307\u5411\u521b\u5efa\u7684tcp_sock\u7ed3\u6784 struct sock *sk; u32 secid; u32 peer_secid; }; linux \u5185\u6838\u534f\u8bae\u6808 TCP \u4e4b\u8fde\u63a5\u8bf7\u6c42\u961f\u5217","title":"10.5 struct request_sock - mini sock to represent a connection request"},{"location":"chapter_3/10_linux_net/#11-linux-softnet_data","text":"\u662f\u7528\u4e8e\u5b9e\u73b0\u8f6f\u4e2d\u65ad\u7684\u91cd\u8981\u6570\u636e\u7ed3\u6784,softnet_data \u662f\u6bcf\u4e2a CPU \u90fd\u62e5\u6709\u7684\u4e00\u4e2a\u6570\u636e\u7ed3\u6784. \u4ee5\u4e0b\u662f\u57fa\u4e8e 2.6.32 \u7684\u6e90\u7801 struct softnet_data { struct Qdisc *output_queue; //\u53d1\u9001\u5e27\u961f\u5217 struct sk_buff_head input_pkt_queue; //\u63a5\u6536\u5e27\u961f\u5217\uff08\u5165\u53e3\u961f\u5217\uff09 struct list_head poll_list; //\u8fd9\u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868 struct sk_buff *completion_queue; struct napi_struct backlog; }; \u8bf4\u660e \uff1a \u53ef\u4ee5\u770b\u5230\u53d1\u9001\u5e27\u961f\u5217\u5e76\u4e0d\u662f skb \u7684\u94fe\u8868\uff0c\u800c\u662f Qdisc \u7684\u94fe\u8868\uff0c\u8fd9\u662f\u56e0\u4e3a\u53d1\u9001\u4e00\u822c\u9700\u8981 Qos \u6d41\u63a7\uff0c\u6240\u4ee5\u53d1\u9001\u5e27\u4f1a\u5b58\u5165\u76f8\u5e94 dev \u5173\u8054\u7684 Qdisc \u4e2d\uff08Qdisc \u4e2d\u6709 skb \u7684\u961f\u5217\uff09\uff0c\u8be6\u89c1\u201c\u540e\u9762\u94fe\u8def\u5c42\u6570\u636e\u5305\u53d1\u9001\u201d\u5206\u6790\u3002 poll_list \u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u662f\u4e00\u4e2a napi_struct \u7ed3\u6784\uff0c\u800c napi_struct \u53c8\u662f net_device \u7684\u6210\u5458\uff0c\u6240\u4ee5\u8fd9\u4e2a\u94fe\u8868\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a net_device \u94fe\u8868\uff0c\u8fd9\u4e9b net_device \u90fd\u5e26\u6709\u8f93\u5165\u5e27\u7b49\u7740\u88ab\u5904\u7406\u3002This is a bidirectional list of devices with input frames waiting to be processed. More details can be found in the section \"Processing the NET_RX_SOFTIRQ: net_rx_action\" in Chapter 10. input_pkt_queue \u662f\u8bbe\u5907\u9a71\u52a8\u5c06\u6570\u636e\u4ece\u7269\u7406\u4ecb\u8d28\u63a5\u6536\u540e\u5c01\u88c5\u6210 skb \u540e\u5b58\u653e\u7684\u7f13\u5b58\u961f\u5217\uff0c\u6240\u6709 \u975e NAPI \u8bbe\u5907 \u5171\u6709\u8fd9\u4e00\u4e2a\u8f93\u5165\u7f13\u5b58\u961f\u5217\uff0c\u800c NAPI \u8bbe\u5907\u6709\u81ea\u5df1\u7684\u79c1\u6709\u961f\u5217\u7528\u4e8e\u5b58\u653e\u8f93\u5165\u5305\u3002 This queue, initialized in net_dev_init , is where incoming frames are stored before being processed by the driver. It is used by non-NAPI drivers; those that have been upgraded to NAPI use their own private queues. softnet_data Structure \u4ee5\u4e0b\u57fa\u4e8e 3.16.51 \u6e90\u4ee3\u7801 /* * Incoming packets are placed on per-cpu queues */ struct softnet_data { struct Qdisc *output_queue; struct Qdisc **output_queue_tailp; struct list_head poll_list; //\u8fd9\u91cc\u6bcf\u4e00\u4e2a\u5143\u7d20\u662f\u4e00\u4e2astruct napi_struct, \u800c\u6bcf\u4e2anapi_struct\u5176\u5b9e\u662fstruct igb_q_vector\u5b50\u5143\u7d20. struct sk_buff *completion_queue; struct sk_buff_head process_queue; /* stats */ unsigned int processed; unsigned int time_squeeze; unsigned int cpu_collision; unsigned int received_rps; #ifdef CONFIG_RPS struct softnet_data *rps_ipi_list; /* Elements below can be accessed between CPUs for RPS */ struct call_single_data csd ____cacheline_aligned_in_smp; struct softnet_data *rps_ipi_next; unsigned int cpu; unsigned int input_queue_head; unsigned int input_queue_tail; #endif unsigned int dropped; struct sk_buff_head input_pkt_queue; struct napi_struct backlog; #ifdef CONFIG_NET_FLOW_LIMIT struct sd_flow_limit __rcu *flow_limit; #endif };","title":"11 linux \u5b9e\u73b0\u8f6f\u4e2d\u65ad\u7684\u91cd\u8981\u6570\u636e\u7ed3\u6784 softnet_data"},{"location":"chapter_3/10_linux_net/#_4","text":"\u7f13\u51b2\u961f\u5217(\u53d1\u9001\u3001\u63a5\u6536)","title":"\u4e00\u4e9b\u91cd\u8981\u6210\u5458"},{"location":"chapter_3/10_linux_net/#12-struct-msghdr","text":"struct msghdr { void *msg_name; /* optional address */ socklen_t msg_namelen; /* size of address */ struct iovec *msg_iov; /* scatter/gather array */ size_t msg_iovlen; /* # elements in msg_iov */ void *msg_control; /* ancillary data, see below */ size_t msg_controllen; /* ancillary data buffer len */ int msg_flags; /* flags on received message */ }; The msghdr structure is used to minimize the number of directly supplied parameters to the recvmsg() and sendmsg() functions \u4e3b\u8981\u7528\u4e8e\u5411\u4e00\u4e2a socket \u53d1\u9001\u6d88\u606f\uff0c\u6216\u4ece\u4e00\u4e2a socket \u4e2d\u63a5\u6536\u6d88\u606f\u3002 msghdr \u7ed3\u6784\u4e00\u822c\u4f1a\u7528\u4e8e\u5982\u4e0b\u4e24\u4e2a\u51fd\u6570\u4e2d\uff1a #include <sys/types.h> #include <sys/socket.h> ssize_t sendmsg(int sockfd, const struct msghdr *msg, int flags); ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags);","title":"12 struct msghdr"},{"location":"chapter_3/10_linux_net/#13-struct-iovec","text":"struct iovec { void __user *iov_base; /* BSD uses caddr_t (1003.1g requires void *) */ __kernel_size_t iov_len; /* Must be size_t (1003.1g) */ }; \u770b\u7740\u5c31\u662f\u7528\u4e8e\u5b58\u50a8\u7528\u6237\u7a7a\u95f4\u7684\u5185\u5b58\u5730\u5740\u548c\u957f\u5ea6. \u65b9\u4fbf\u540e\u7eed\u628a\u6570\u636e\u4ece\u7528\u6237\u7a7a\u95f4 COPY \u5230\u5185\u6838\u7a7a\u95f4","title":"13 struct iovec"},{"location":"chapter_3/10_linux_net/#14","text":"\u672c\u8d28\u4e0a\u6765\u8bf4, \u7b49\u5f85\u961f\u5217\u5c31\u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868 \u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u63cf\u8ff0\u4e00\u4e2a\u7b49\u5f85\u961f\u5217\uff1await_queue_head_t \u548c wait_queue_t\u3002 \u8fd9\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\u5b9a\u4e49\u5728 include/linux/wait.h \u5934\u6587\u4ef6\u4e2d\u3002 \u5176\u4e00 wait_queue_t\uff08\u7b49\u5f85\u961f\u5217\u9879\uff09 typedef struct __wait_queue wait_queue_t; struct __wait_queue { unsigned int flags; #define WQ_FLAG_EXCLUSIVE 0x01 void *private; wait_queue_func_t func; struct list_head task_list; }; \u4e0b\u9762\u8bf4\u660e\u4e00\u4e0b\u5404\u4e2a\u6210\u5458\u7684\u4f5c\u7528\uff1a flags: \u53ef\u4ee5\u8bbe\u7f6e\u4e3a WQ_FLAG_EXCLUSIVE\uff0c\u8868\u793a\u7b49\u5f85\u7684\u8fdb\u7a0b\u5e94\u8be5\u72ec\u5360\u8d44\u6e90\uff08\u89e3\u51b3\u60ca\u7fa4\u73b0\u8c61\uff09\u3002 private: \u4e00\u822c\u7528\u4e8e\u4fdd\u5b58\u7b49\u5f85\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u63cf\u8ff0\u7b26 task_struct\u3002 func: \u5524\u9192\u51fd\u6570\uff0c\u4e00\u822c\u8bbe\u7f6e\u4e3a default_wake_function() \u51fd\u6570\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u81ea\u5b9a\u4e49\u7684\u5524\u9192\u51fd\u6570\u3002 task_list: \u7528\u4e8e\u8fde\u63a5\u5176\u4ed6\u7b49\u5f85\u8d44\u6e90\u7684\u8fdb\u7a0b\u3002 \u5176\u4e8c wait_queue_head_t\uff08\u7b49\u5f85\u961f\u5217\u5934\uff09 struct __wait_queue_head { spinlock_t lock; struct list_head task_list; }; typedef struct __wait_queue_head wait_queue_head_t; \u5176\u4e09 \u521b\u5efa wait_queue_t\uff08\u521b\u5efa\u7b49\u5f85\u961f\u5217\u9879\uff09 #define DEFINE_WAIT_FUNC(name, function) \\ wait_queue_t name = { \\ .private = current, \\ .func = function, \\ .task_list = LIST_HEAD_INIT((name).task_list), \\ } #define DEFINE_WAIT(name) DEFINE_WAIT_FUNC(name, autoremove_wake_function) Linux \u7b49\u5f85\u961f\u5217\u539f\u7406\u4e0e\u5b9e\u73b0 linux \u7b49\u5f85\u961f\u5217 wait_queue_head_t \u548c wait_queue_t","title":"14 \u7b49\u5f85\u961f\u5217\u76f8\u5173\u7ed3\u6784\u4f53"},{"location":"chapter_3/10_linux_net/#15-struct-eventpoll","text":"/* * This structure is stored inside the \"private_data\" member of the file * structure and represents the main data structure for the eventpoll * interface. */ struct eventpoll { /* Protect the access to this structure */ spinlock_t lock; /* * This mutex is used to ensure that files are not removed * while epoll is using them. This is held during the event * collection loop, the file cleanup path, the epoll file exit * code and the ctl operations. */ struct mutex mtx; /* Wait queue used by sys_epoll_wait() */ wait_queue_head_t wq; /* Wait queue used by file->poll() */ wait_queue_head_t poll_wait; /* List of ready file descriptors */ struct list_head rdllist; /* RB tree root used to store monitored fd structs */ struct rb_root rbr; /* * This is a single linked list that chains all the \"struct epitem\" that * happened while transferring ready events to userspace w/out * holding ->lock. */ struct epitem *ovflist; /* wakeup_source used when ep_scan_ready_list is running */ struct wakeup_source *ws; /* The user that created the eventpoll descriptor */ struct user_struct *user; struct file *file; /* used to optimize loop detection check */ int visited; struct list_head visited_list_link; };","title":"15 struct eventpoll"},{"location":"chapter_3/10_linux_net/#16-struct-socket_wq","text":"struct socket_wq { /* Note: wait MUST be first field of socket_wq */ wait_queue_head_t wait; struct fasync_struct *fasync_list; struct rcu_head rcu; } ____cacheline_aligned_in_smp;","title":"16 struct socket_wq"},{"location":"chapter_3/10_linux_net/#17-struct-neighbour","text":"Neighbors are represented by struct neighbour structures. The structure is complex and includes status fields, virtual functions to interface with L3 protocols, timers, and cached L2 headers. include/net/neighbour.h struct neighbour { struct neighbour __rcu *next; struct neigh_table *tbl; struct neigh_parms *parms; unsigned long confirmed; unsigned long updated; rwlock_t lock; atomic_t refcnt; struct sk_buff_head arp_queue; unsigned int arp_queue_len_bytes; struct timer_list timer; unsigned long used; atomic_t probes; __u8 flags; __u8 nud_state; __u8 type; __u8 dead; seqlock_t ha_lock; unsigned char ha[ALIGN(MAX_ADDR_LEN, sizeof(unsigned long))]; struct hh_cache hh; int (*output)(struct neighbour *, struct sk_buff *); const struct neigh_ops *ops; struct rcu_head rcu; struct net_device *dev; u8 primary_key[0]; }; struct neigh_ops { int family; void (*solicit)(struct neighbour *, struct sk_buff *); void (*error_report)(struct neighbour *, struct sk_buff *); int (*output)(struct neighbour *, struct sk_buff *); int (*connected_output)(struct neighbour *, struct sk_buff *); };","title":"17 struct neighbour"},{"location":"chapter_3/10_linux_net/#18-struct-inet_hashinfo-tcp_hashinfo","text":"\u9996\u5148\uff0c\u5728 linux \u5185\u6838\u7684\u7f51\u7edc\u6a21\u5757\u91cc\u7ef4\u62a4\u7740\u4e00\u4e2a\u5168\u5c40\u5b9e\u4f8b\uff0c\u7528\u6765\u5b58\u50a8\u6240\u6709\u548c tcp \u76f8\u5173\u7684 socket\uff1a // net/ipv4/tcp_ipv4.c struct inet_hashinfo tcp_hashinfo; \u5176\u6b21\uff0c\u5728\u8be5\u5b9e\u4f8b\u7684\u5185\u90e8\uff0c\u53c8\u6839\u636e socket \u7c7b\u578b\u7684\u4e0d\u540c\uff0c\u5212\u5206\u6210\u56db\u4e2a hashtable\uff1a // include/net/inet_hashtables.h struct inet_hashinfo { // key\u662f\u7531\u672c\u5730\u5730\u5740\u3001\u672c\u5730\u7aef\u53e3\u3001\u8fdc\u7a0b\u5730\u5740\u3001\u8fdc\u7a0b\u7aef\u53e3\u7ec4\u6210\u7684\u56db\u5143\u7ec4 // value\u662f\u6b63\u5728\u5efa\u7acb\u8fde\u63a5\u6216\u5df2\u7ecf\u5efa\u7acb\u8fde\u63a5\u7684socket // \u6bd4\u5982\uff0c\u5f53\u5185\u6838\u6536\u5230\u4e00\u4e2atcp\u6d88\u606f\u65f6\uff0c\u5b83\u5148\u4ece\u6d88\u606f\u5934\u91cc\u8bfb\u51fa\u5730\u5740\u548c\u7aef\u53e3\u7b49\u4fe1\u606f // \u7136\u540e\u7528\u8be5\u4fe1\u606f\u5230ehash\u91cc\u83b7\u53d6\u5bf9\u5e94\u7684socket // \u6700\u540e\u628a\u5269\u4f59\u7684tcp\u6570\u636e\u6dfb\u52a0\u5230\u8be5socket\u7684recv buf\u4e2d\u4f9b\u7528\u6237\u7a0b\u5e8f\u8bfb\u53d6 struct inet_ehash_bucket *ehash; // key\u662f\u672c\u5730\u7aef\u53e3 // value\u662f\u4f7f\u7528\u8fd9\u4e2a\u7aef\u53e3\u7684\u6240\u6709socket // \u6bd4\u5982\uff0c\u5f53\u6211\u4eec\u7528socket\u76d1\u542c\u4e00\u4e2a\u7aef\u53e3\u65f6\uff0c\u8be5socket\u5c31\u5728bhash\u91cc // \u540c\u7406\uff0c\u7531\u8be5\u76d1\u542c\u7aef\u53e3\u5efa\u7acb\u7684\u8fde\u63a5\u5bf9\u5e94\u7684\u90a3\u4e9bsocket\u4e5f\u5728\u8fd9\u91cc // \u56e0\u4e3a\u5b83\u4eec\u4e5f\u90fd\u662f\u4f7f\u7528\u540c\u6837\u7684\u672c\u5730\u7aef\u53e3 struct inet_bind_hashbucket *bhash; // key\u662f\u672c\u5730\u5730\u5740\u548c\u7aef\u53e3\u7ec4\u6210\u7684\u4e8c\u5143\u7ec4 // value\u662f\u5bf9\u5e94\u7684\u5904\u4e8elisten\u72b6\u6001\u7684socket struct inet_listen_hashbucket *lhash2; // key\u662f\u672c\u5730\u7aef\u53e3 // value\u662f\u5bf9\u5e94\u7684\u5904\u4e8elisten\u72b6\u6001\u7684socket struct inet_listen_hashbucket listening_hash[INET_LHTABLE_SIZE]; }; \u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u672c\u5730\u7aef\u53e3\u662f\u5426\u88ab\u4f7f\u7528 // \u6839\u636e\u7aef\u53e3\u7b97\u51fahash\u503c\uff0c\u7136\u540e\u6839\u636e\u8fd9\u4e2a\u503c\u627e\u5230bhash\u4e2d\u5bf9\u5e94\u7684slot head = &hinfo->bhash[inet_bhashfn(net, port, hinfo->bhash_size)]; // \u904d\u5386slot\u6307\u5411\u7684\u94fe\u8868\uff0c\u627e\u5230port\u5bf9\u5e94\u7684\u503c inet_bind_bucket_for_each(tb, &head->chain) if (net_eq(ib_net(tb), net) && tb->l3mdev == l3mdev && tb->port == port) goto tb_found; // \u5982\u679c\u6ca1\u627e\u5230\uff0c\u8bf4\u660e\u73b0\u5728\u8fd8\u6ca1\u6709\u4eba\u4f7f\u7528\u8fd9\u4e2a\u7aef\u53e3\uff0c\u5c31\u65b0\u521b\u5efa\u4e00\u4e2a // \u65b0\u521b\u5efa\u7684\u5b9e\u4f8b\u5c31\u4f1a\u653e\u5230bhash\u4e2d\uff0c\u8868\u660e\u8fd9\u4e2a\u7aef\u53e3\u6211\u5728\u4f7f\u7528\u4e86 tb = inet_bind_bucket_create(hinfo->bind_bucket_cachep, net, head, port, l3mdev); \u53c2\u8003 Linux \u7cfb\u7edf\u7814\u7a76 - \u64cd\u4f5c\u7cfb\u7edf\u662f\u5982\u4f55\u7ba1\u7406 tcp \u8fde\u63a5\u7684 (1)","title":"18 struct inet_hashinfo tcp_hashinfo"},{"location":"chapter_3/10_linux_net/#19-dst_entry","text":"\u5185\u6838\u9700\u8981\u786e\u5b9a\u6536\u5230\u7684\u62a5\u6587\u662f\u5e94\u8be5\u672c\u5730\u4e0a\u9001(local deliver)\u8fd8\u662f\u8f6c\u53d1(forward),\u5bf9\u672c\u673a\u53d1\u9001(local out)\u7684\u62a5\u6587\u9700\u8981\u786e\u5b9a\u662f\u4ece\u54ea\u4e2a\u7f51\u5361\u53d1\u9001\u51fa\u53bb\uff0c\u8fd9\u90fd\u662f\u5185\u6838\u901a\u8fc7\u67e5\u8be2 fib (forward information base, \u8f6c\u53d1\u4fe1\u606f\u8868) \u786e\u5b9a\u3002fib \u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u6570\u636e\u5e93\uff0c\u6570\u636e\u6765\u6e90\u662f\u7528\u6237\u914d\u7f6e\u6216\u8005\u5185\u6838\u81ea\u52a8\u751f\u6210\u7684\u8def\u7531\u3002 fib \u67e5\u8be2\u7684\u8f93\u5165\u662f\u62a5\u6587 sk_buff\uff0c\u8f93\u51fa\u662f dst_entry. dst_entry \u4f1a\u88ab\u8bbe\u7f6e\u5230 skb \u4e0a\uff1a static inline void skb_dst_set(struct sk_buff *skb, struct dst_entry *dst) { skb->_skb_refdst = (unsigned long)dst; } \u800c dst_entry \u4e2d\u6700\u91cd\u8981\u7684\u662f\u4e00\u4e2a input \u6307\u9488\u548c output \u6307\u9488\uff1a struct dst_entry { ...... int (*input)(struct sk_buff *); int (*output)(struct net *net, struct sock *sk, struct sk_buff *skb); ...... } \u5bf9\u4e8e\u9700\u8981\u672c\u673a\u4e0a\u9001\u7684\u62a5\u6587\uff1a rth->dst.input = ip_local_deliver; \u5bf9\u9700\u8981\u8f6c\u53d1\u7684\u62a5\u6587\uff1a rth->dst.input = ip_forward; \u5bf9\u672c\u673a\u53d1\u9001\u7684\u62a5\u6587\uff1a rth->dst.output = ip_output;","title":"19 dst_entry"},{"location":"chapter_3/10_linux_net/#_5","text":"","title":"(\u4e8c) \u6838\u5fc3\u51fd\u6570"},{"location":"chapter_3/10_linux_net/#l3-l4","text":"\u6211\u4eec\u77e5\u9053\u7f51\u7edc\u534f\u8bae\u6808\u662f\u5206\u5c42\u7684\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u5177\u4f53\u5230\u5b9e\u73b0\uff0c\u5185\u6838\u534f\u8bae\u6808\u7684\u5206\u5c42\u53ea\u662f\u903b\u8f91\u4e0a\u7684\uff0c\u672c\u8d28\u8fd8\u662f\u51fd\u6570\u8c03\u7528\u3002\u53d1\u9001\u6d41\u7a0b(\u4e0a\u5c42\u8c03\u7528\u4e0b\u5c42)\u901a\u5e38\u662f\u76f4\u63a5\u8c03\u7528(\u56e0\u4e3a\u6ca1\u6709\u4e0d\u786e\u5b9a\u6027\uff0c\u6bd4\u5982 TCP \u77e5\u9053\u4e0b\u9762\u4e00\u5b9a IP)\uff0c\u4f46\u63a5\u6536\u8fc7\u7a0b\u4e0d\u4e00\u6837\u4e86\uff0c\u6bd4\u5982\u62a5\u6587\u5728 IP \u5c42\u65f6\uff0c\u5b83\u4e0a\u9762\u53ef\u80fd\u662f TCP\uff0c\u4e5f\u53ef\u80fd\u662f UDP\uff0c\u6216\u8005\u662f ICMP \u7b49\u7b49\uff0c\u6240\u4ee5\u63a5\u6536\u8fc7\u7a0b\u4f7f\u7528\u7684\u662f \u6ce8\u518c-\u56de\u8c03 \u673a\u5236 \u3002 \u8fd8\u662f\u4ee5 INET \u534f\u8bae\u7c07\u4e3a\u4f8b\uff0c\u6ce8\u518c\u63a5\u53e3\u662f\uff1a int inet_add_protocol(const struct net_protocol *prot, unsigned char protocol); \u5728\u5185\u6838\u7f51\u7edc\u5b50\u7cfb\u7edf\u521d\u59cb\u5316\u65f6\uff0cL4 \u5c42\u534f\u8bae(\u5982\u4e0b\u9762\u7684 TCP \u548c UDP)\u4f1a\u88ab\u6ce8\u518c\uff1a static struct net_protocol tcp_protocol = { ...... .handler = tcp_v4_rcv, ...... }; static struct net_protocol udp_protocol = { ..... .handler = udp_rcv, ..... }; ....... \u800c\u5728 IP \u5c42\uff0c\u67e5\u8be2\u8fc7\u8def\u7531\u540e\uff0c\u5982\u679c\u8be5\u62a5\u6587\u662f\u9700\u8981\u4e0a\u9001\u672c\u673a\u7684\uff0c\u5219\u4f1a\u6839\u636e\u62a5\u6587\u7684 L4 \u534f\u8bae\uff0c\u9001\u7ed9\u4e0d\u540c\u7684 L4 \u5904\u7406\uff1a static int ip_local_deliver_finish(struct net *net, struct sock *sk, struct sk_buff *skb) { ...... ipprot = rcu_dereference(inet_protos[protocol]); ...... ret = ipprot->handler(skb); ...... } .......","title":"L3-&gt;L4"},{"location":"chapter_3/10_linux_net/#l2-l3","text":"L2->L3 \u5982\u51fa\u4e00\u8f99\u3002\u53ea\u4e0d\u8fc7\u6ce8\u518c\u63a5\u53e3\u53d8\u6210\u4e86\uff1a void dev_add_pack(struct packet_type *pt) \u8c01\u4f1a\u6ce8\u518c\u5462\uff1f\u663e\u7136\u81f3\u5c11 IP \u4f1a\uff1a static struct packet_type ip_packet_type = { .type = cpu_to_be16(ETH_P_IP), .func = ip_rcv, } ....... \u800c\u5728\u62a5\u6587\u63a5\u6536\u8fc7\u7a0b\u4e2d\uff0c\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u4f1a\u5c06\u62a5\u6587\u7684 L3 \u7c7b\u578b\u8bbe\u7f6e\u5230 skb->protocol\uff0c\u7136\u540e\u5728\u5185\u6838 netif_receive_skb \u6536\u5305\u65f6\uff0c\u4f1a\u6839\u636e\u8fd9\u4e2a protocol \u8c03\u7528\u4e0d\u540c\u7684\u56de\u8c03\u51fd\u6570\uff1a __netif_receive_skb(struct sk_buff *skb) { ...... type = skb->protocol; ...... ret = pt_prev->func(skb, skb->dev, pt_prev, orig_dev); } .......","title":"L2-&gt;L3"},{"location":"chapter_3/10_linux_net/#1-ip_rcv","text":"\u901a\u8fc7 inet_protos \u6570\u7ec4 \u627e\u5230 tcp_v4_rcv \u6216\u8005 udp_rcv \u51fd\u6570 \u6267\u884c NetFilter Iptables \u5305\u8fc7\u6ee4 net/ipv4/ip_output.c /* * Main IP Receive routine. */ int ip_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt, struct net_device *orig_dev) { const struct iphdr *iph; u32 len; /* When the interface is in promisc. mode, drop all the crap * that it receives, do not try to analyse it. */ if (skb->pkt_type == PACKET_OTHERHOST) goto drop; IP_UPD_PO_STATS_BH(dev_net(dev), IPSTATS_MIB_IN, skb->len); if ((skb = skb_share_check(skb, GFP_ATOMIC)) == NULL) { IP_INC_STATS_BH(dev_net(dev), IPSTATS_MIB_INDISCARDS); goto out; } if (!pskb_may_pull(skb, sizeof(struct iphdr))) goto inhdr_error; iph = ip_hdr(skb); /* * RFC1122: 3.2.1.2 MUST silently discard any IP frame that fails the checksum. * * Is the datagram acceptable? * * 1. Length at least the size of an ip header * 2. Version of 4 * 3. Checksums correctly. [Speed optimisation for later, skip loopback checksums] * 4. Doesn't have a bogus length */ if (iph->ihl < 5 || iph->version != 4) goto inhdr_error; BUILD_BUG_ON(IPSTATS_MIB_ECT1PKTS != IPSTATS_MIB_NOECTPKTS + INET_ECN_ECT_1); BUILD_BUG_ON(IPSTATS_MIB_ECT0PKTS != IPSTATS_MIB_NOECTPKTS + INET_ECN_ECT_0); BUILD_BUG_ON(IPSTATS_MIB_CEPKTS != IPSTATS_MIB_NOECTPKTS + INET_ECN_CE); IP_ADD_STATS_BH(dev_net(dev), IPSTATS_MIB_NOECTPKTS + (iph->tos & INET_ECN_MASK), max_t(unsigned short, 1, skb_shinfo(skb)->gso_segs)); if (!pskb_may_pull(skb, iph->ihl*4)) goto inhdr_error; iph = ip_hdr(skb); if (unlikely(ip_fast_csum((u8 *)iph, iph->ihl))) goto csum_error; len = ntohs(iph->tot_len); if (skb->len < len) { IP_INC_STATS_BH(dev_net(dev), IPSTATS_MIB_INTRUNCATEDPKTS); goto drop; } else if (len < (iph->ihl*4)) goto inhdr_error; /* Our transport medium may have padded the buffer out. Now we know it * is IP we can trim to the true length of the frame. * Note this now means skb->len holds ntohs(iph->tot_len). */ if (pskb_trim_rcsum(skb, len)) { IP_INC_STATS_BH(dev_net(dev), IPSTATS_MIB_INDISCARDS); goto drop; } skb->transport_header = skb->network_header + iph->ihl*4; /* Remove any debris in the socket control block */ memset(IPCB(skb), 0, sizeof(struct inet_skb_parm)); /* Must drop socket now because of tproxy. */ skb_orphan(skb); return NF_HOOK(NFPROTO_IPV4, NF_INET_PRE_ROUTING, skb, dev, NULL, ip_rcv_finish); csum_error: IP_INC_STATS_BH(dev_net(dev), IPSTATS_MIB_CSUMERRORS); inhdr_error: IP_INC_STATS_BH(dev_net(dev), IPSTATS_MIB_INHDRERRORS); drop: kfree_skb(skb); out: return NET_RX_DROP; }","title":"1 ip_rcv"},{"location":"chapter_3/10_linux_net/#2-tcp_v4_rcv","text":"","title":"2 tcp_v4_rcv"},{"location":"chapter_3/10_linux_net/#4-udp_rcv","text":"","title":"4 udp_rcv"},{"location":"chapter_3/10_linux_net/#5-napi_schedule","text":"","title":"5 napi_schedule \u7cfb\u5217\u51fd\u6570"},{"location":"chapter_3/10_linux_net/#51-napi_schedule","text":"include/linux/netdevice.h:416:static inline void napi_schedule(struct napi_struct *n) /** * napi_schedule - schedule NAPI poll * @n: napi context * * Schedule NAPI poll routine to be called if it is not already * running. */ static inline void napi_schedule(struct napi_struct *n) { if (napi_schedule_prep(n)) __napi_schedule(n); }","title":"5.1 napi_schedule"},{"location":"chapter_3/10_linux_net/#52-__napi_schedule","text":"include/linux/netdevice.h /** * __napi_schedule - schedule for receive * @n: entry to schedule * * The entry's receive function will be scheduled to run */ void __napi_schedule(struct napi_struct *n) { unsigned long flags; local_irq_save(flags); ____napi_schedule(&__get_cpu_var(softnet_data), n); local_irq_restore(flags); } EXPORT_SYMBOL(__napi_schedule);","title":"5.2 __napi_schedule"},{"location":"chapter_3/10_linux_net/#53-____napi_schedule","text":"net/core/dev.c:3009:static inline void ____napi_schedule /* Called with irq disabled */ static inline void ____napi_schedule(struct softnet_data *sd, struct napi_struct *napi) { list_add_tail(&napi->poll_list, &sd->poll_list); __raise_softirq_irqoff(NET_RX_SOFTIRQ); }","title":"5.3 ____napi_schedule"},{"location":"chapter_3/10_linux_net/#6-dev_hard_start_xmit","text":"net/core/dev.c int dev_hard_start_xmit(struct sk_buff *skb, struct net_device *dev, struct netdev_queue *txq) { const struct net_device_ops *ops = dev->netdev_ops; int rc = NETDEV_TX_OK; unsigned int skb_len; if (likely(!skb->next)) { netdev_features_t features; /* * If device doesn't need skb->dst, release it right now while * its hot in this cpu cache */ if (dev->priv_flags & IFF_XMIT_DST_RELEASE) skb_dst_drop(skb); features = netif_skb_features(skb); if (vlan_tx_tag_present(skb) && !vlan_hw_offload_capable(features, skb->vlan_proto)) { skb = __vlan_put_tag(skb, skb->vlan_proto, vlan_tx_tag_get(skb)); if (unlikely(!skb)) goto out; skb->vlan_tci = 0; } /* If encapsulation offload request, verify we are testing * hardware encapsulation features instead of standard * features for the netdev */ if (skb->encapsulation) features &= dev->hw_enc_features; if (netif_needs_gso(skb, features)) { if (unlikely(dev_gso_segment(skb, features))) goto out_kfree_skb; if (skb->next) goto gso; } else { if (skb_needs_linearize(skb, features) && __skb_linearize(skb)) goto out_kfree_skb; /* If packet is not checksummed and device does not * support checksumming for this protocol, complete * checksumming here. */ if (skb->ip_summed == CHECKSUM_PARTIAL) { if (skb->encapsulation) skb_set_inner_transport_header(skb, skb_checksum_start_offset(skb)); else skb_set_transport_header(skb, skb_checksum_start_offset(skb)); if (!(features & NETIF_F_ALL_CSUM) && skb_checksum_help(skb)) goto out_kfree_skb; } } if (!list_empty(&ptype_all)) dev_queue_xmit_nit(skb, dev); skb_len = skb->len; trace_net_dev_start_xmit(skb, dev); rc = ops->ndo_start_xmit(skb, dev); trace_net_dev_xmit(skb, rc, dev, skb_len); if (rc == NETDEV_TX_OK) txq_trans_update(txq); return rc; } gso: do { struct sk_buff *nskb = skb->next; skb->next = nskb->next; nskb->next = NULL; if (!list_empty(&ptype_all)) dev_queue_xmit_nit(nskb, dev); skb_len = nskb->len; trace_net_dev_start_xmit(nskb, dev); rc = ops->ndo_start_xmit(nskb, dev); trace_net_dev_xmit(nskb, rc, dev, skb_len); if (unlikely(rc != NETDEV_TX_OK)) { if (rc & ~NETDEV_TX_MASK) goto out_kfree_gso_skb; nskb->next = skb->next; skb->next = nskb; return rc; } txq_trans_update(txq); if (unlikely(netif_xmit_stopped(txq) && skb->next)) return NETDEV_TX_BUSY; } while (skb->next); out_kfree_gso_skb: if (likely(skb->next == NULL)) { skb->destructor = DEV_GSO_CB(skb)->destructor; consume_skb(skb); return rc; } out_kfree_skb: kfree_skb(skb); out: return rc; } EXPORT_SYMBOL_GPL(dev_hard_start_xmit);","title":"6 dev_hard_start_xmit \u771f\u6b63\u63d0\u4ea4\u7ed9\u786c\u4ef6\u7f51\u5361\u53d1\u5305\u51fd\u6570"},{"location":"chapter_3/10_linux_net/#7-tcp_transmit_skb","text":"\u662f\u53d1\u9001\u6570\u636e\u4f4d\u4e8e\u4f20\u8f93\u5c42\u7684\u6700\u540e\u4e00\u6b65 \u5e76\u4e14\u5728 tcp_connect \u51fd\u6570\u4e2d\u4e00\u5f00\u59cb\u53d1\u9001 SYN \u62a5\u6587\u65f6\u4e5f\u7528\u5230\u8be5\u51fd\u6570. //file: net/ipv4/tcp_output.c static int tcp_transmit_skb(struct sock *sk, struct sk_buff *skb, int clone_it, gfp_t gfp_mask) { //1.\u514b\u9686\u65b0 skb \u51fa\u6765 if (likely(clone_it)) { skb = skb_clone(skb, gfp_mask); ...... } //2.\u5c01\u88c5 TCP \u5934 th = tcp_hdr(skb); th->source = inet->inet_sport; th->dest = inet->inet_dport; th->window = ...; th->urg = ...; ...... //3.\u8c03\u7528\u7f51\u7edc\u5c42\u53d1\u9001\u63a5\u53e3 err = icsk->icsk_af_ops->queue_xmit(skb, &inet->cork.fl); }","title":"7 tcp_transmit_skb"},{"location":"chapter_3/10_linux_net/#_6","text":"","title":"\u4e8c \u53d1\u5305\u8def\u5f84"},{"location":"chapter_3/10_linux_net/#1","text":"","title":"1 \u67b6\u6784\u56fe\u548c\u603b\u4f53\u7eb2\u9886"},{"location":"chapter_3/10_linux_net/#2","text":"\u8fd9\u91cc\u548c \u6536\u5305\u8def\u5f84 \u7684\u786c\u4e2d\u65ad\u4ee3\u7801\u76f8\u540c","title":"2 \u786c\u4e2d\u65ad\u4ee3\u7801"},{"location":"chapter_3/10_linux_net/#3","text":"","title":"3 \u5185\u6838\u4e8b\u5148\u505a\u4e86\u54ea\u4e9b\u51c6\u5907\u5de5\u4f5c"},{"location":"chapter_3/10_linux_net/#4","text":"","title":"4 \u5177\u4f53\u8def\u5f84"},{"location":"chapter_3/10_linux_net/#41","text":"","title":"4.1 \u534f\u8bae\u6808"},{"location":"chapter_3/10_linux_net/#42","text":"\u90bb\u5c45\u5b50\u7cfb\u7edf \u5d4c\u5165\u5728 \u7f51\u7edc\u5c42 \u548c \u6570\u636e\u94fe\u8def\u5c42 \u4e4b\u95f4\uff08\uff0c\u53ef\u4ee5\u5bf9\u4e0a\u548c\u5bf9\u4e0b\u63d0\u4f9b\u4e00\u4e2a\u7edf\u4e00\u7684\u63a5\u53e3\uff0c\u8ba9\u4e24\u5c42\u95f4\u7684\u901a\u4fe1\u53d8\u7684\u900f\u660e\u3002\u5f53\u7136\u8fd9\u91cc\u9762\u6709\u5f88\u5927\u4e00\u90e8\u5206\u539f\u56e0\u5f97\u5f52\u529f\u4e8e\u5730\u5740\u89e3\u6790\u534f\u8bae\uff08ARP\uff09 L3 \u7684\u662f\u903b\u8f91\u5730\u5740\uff0cL2 \u7684\u662f\u7269\u7406\u5730\u5740\uff0c\u9700\u8981\u505a\u7684\u5c31\u662f\u5b9e\u73b0\u8fd9\u4e24\u4e2a\u5730\u5740\u7684\u6620\u5c04\u3002\u5728 Linux \u5185\u6838\u4e2d\u628a\u5b83\u5355\u72ec\u505a\u6210\u5b50\u7cfb\u7edf\u539f\u56e0\u662f\u7f51\u7edc\u5c42\u4e0d\u6b62\u6709 ipv4\uff0c\u8fd8\u6709\u5176\u4ed6\u534f\u8bae\uff0c\u5982\u679c\u4e3a\u6bcf\u4e2a L3 \u534f\u8bae\u505a\u5355\u72ec\u5f00\u53d1\u4f1a\u6709\u4e00\u4e9b\u91cd\u590d\u52b3\u52a8\uff0c\u56e0\u6b64\u63d0\u70bc\u4e00\u4e9b\u901a\u7528\u6570\u636e\u7ed3\u6784\u51cf\u5c11\u8fd9\u4e9b\u91cd\u590d\u52b3\u52a8.","title":"4.2 \u90bb\u5c45\u5b50\u7cfb\u7edf"},{"location":"chapter_3/10_linux_net/#43","text":"\u4e24\u5927\u6838\u5fc3\u51fd\u6570: dev_queue_xmit \u548c dev_hard_start_xmit \u4e24\u5927\u6838\u5fc3\u4f5c\u7528: \u67e5\u627e\u4e00\u4e2a\u5408\u9002\u7f51\u5361\u961f\u5217\u8fdb\u884c\u53d1\u9001(\u56e0\u4e3a\u73b0\u5728\u7f51\u5361\u90fd\u662f\u591a\u961f\u5217) \u6267\u884c tc\uff08\u6d41\u91cf\u63a7\u5236\uff09","title":"4.3 \u7f51\u7edc\u8bbe\u5907\u5b50\u7cfb\u7edf"},{"location":"chapter_3/10_linux_net/#44","text":"","title":"4.4 \u5177\u4f53\u9a71\u52a8\u7a0b\u5e8f"},{"location":"chapter_3/10_linux_net/#_7","text":"","title":"\u4e09 \u6536\u5305\u8def\u5f84"},{"location":"chapter_3/10_linux_net/#1_1","text":"","title":"1 \u67b6\u6784\u56fe\u548c\u603b\u4f53\u7eb2\u9886"},{"location":"chapter_3/10_linux_net/#2_1","text":"\u4ee5 igb \u7f51\u5361\u4e3a\u4f8b //file: drivers/net/ethernet/intel/igb/igb_main.c static irqreturn_t igb_msix_ring(int irq, void \\*data){ struct igb_q_vector *q_vector = data; /* Write the ITR value calculated from the previous interrupt. */ igb_write_itr(q_vector); napi_schedule(&q_vector->napi); return IRQ_HANDLED; }","title":"2 \u786c\u4e2d\u65ad\u4ee3\u7801"},{"location":"chapter_3/10_linux_net/#21","text":"\u6b65\u9aa4 \u51fd\u6570 \u662f\u5426\u5f00\u542f\u786c\u4e2d\u65ad 1 do_IRQ() 3 2 handle_IRQ_event() 3 3 \u9a71\u52a8\u7a0b\u5e8f\u63d0\u4f9b\u7684 rtc_interrupt 3 4 do_softirq 3 5 net_rx_action 3","title":"2.1 \u7f51\u5361\u786c\u4e2d\u65ad\u6d41\u7a0b"},{"location":"chapter_3/10_linux_net/#3_1","text":"","title":"3 \u4e3a\u4e86\u5b9e\u73b0\u8f6f\u4e2d\u65ad\u5185\u6838\u505a\u4e86\u54ea\u4e9b\u51c6\u5907\u5de5\u4f5c"},{"location":"chapter_3/10_linux_net/#31-ksoftirqd","text":"\u4e3a\u4ec0\u4e48\u8981\u521b\u5efa\u8fd9\u4e2a\u7ebf\u7a0b\uff1f \u56e0\u4e3a\u8981\u5229\u7528\u8fd9\u4e2a\u7ebf\u7a0b\u53bb\u8dd1\u8f6f\u4e2d\u65ad. \u6bcf\u4e2a\u8f6f\u4e2d\u65ad\u6709\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570 \u8f6f\u4e2d\u65ad\u53f7 \u5904\u7406\u51fd\u6570 \u6ce8\u610f\u70b9 NET_TX_SOFTIRQ net_tx_action NET_RX_SOFTIRQ net_rx_action","title":"3.1 \u5f00\u542f ksoftirqd \u7ebf\u7a0b"},{"location":"chapter_3/10_linux_net/#32","text":"","title":"3.2 \u7edf\u4e00\u5b9e\u73b0\u3001\u7edf\u4e00\u6ce8\u518c\u534f\u8bae\u5904\u7406\u51fd\u6570"},{"location":"chapter_3/10_linux_net/#321","text":"\u534f\u8bae \uff08\u63a5\u6536\u65b9\u5411\uff09\u5904\u7406\u51fd\u6570 \u6ce8\u610f\u70b9 ip ip_rcv tcp tcp_v4_rcv udp udp_rcv","title":"3.2.1 \u5b9e\u73b0"},{"location":"chapter_3/10_linux_net/#321_1","text":"inet_protos \u6570\u7ec4 \u8bb0\u5f55\u7740 udp\uff0ctcp \u7684\u5904\u7406\u51fd\u6570\u5730\u5740\uff0c ptype_base \u54c8\u5e0c\u8868 \u5b58\u50a8\u7740 ip_rcv() \u51fd\u6570\u7684\u5904\u7406\u5730\u5740\u3002 \u5185\u6838\u5b9e\u73b0\u4e86\u7f51\u7edc\u5c42\u7684 ip \u534f\u8bae\uff0c\u4e5f\u5b9e\u73b0\u4e86\u4f20\u8f93\u5c42\u7684 tcp \u534f\u8bae\u548c udp \u534f\u8bae\u3002\u8fd9\u4e9b\u534f\u8bae\u5bf9\u5e94\u7684\u5b9e\u73b0\u51fd\u6570\u5206\u522b\u662f ip_rcv(),tcp_v4_rcv()\u548c udp_rcv()\u3002\u548c\u6211\u4eec\u5e73\u65f6\u5199\u4ee3\u7801\u7684\u65b9\u5f0f\u4e0d\u4e00\u6837\u7684\u662f\uff0c\u5185\u6838\u662f\u901a\u8fc7\u6ce8\u518c\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u7684\u3002Linux \u5185\u6838\u4e2d\u7684 fs_initcall \u548c subsys_initcall \u7c7b\u4f3c\uff0c\u4e5f\u662f\u521d\u59cb\u5316\u6a21\u5757\u7684\u5165\u53e3\u3002fs_initcall \u8c03\u7528 inet_init \u540e\u5f00\u59cb\u7f51\u7edc\u534f\u8bae\u6808\u6ce8\u518c\u3002\u901a\u8fc7 inet_init\uff0c\u5c06\u8fd9\u4e9b\u51fd\u6570\u6ce8\u518c\u5230\u4e86 inet_protos \u548c ptype_base \u6570\u636e\u7ed3\u6784\u4e2d\u4e86\u3002\u5982\u4e0b\u56fe: \u76f8\u5173\u4ee3\u7801\u5982\u4e0b //file: net/ipv4/af_inet.c static struct packet_type ip_packet_type __read_mostly = { .type = cpu_to_be16(ETH_P_IP), .func = ip_rcv }; static const struct net_protocol udp_protocol = { .handler = udp_rcv, .err_handler = udp_err, .no_policy = 1, .netns_ok = 1 }; static const struct net_protocol tcp_protocol = { .early_demux = tcp_v4_early_demux, .handler = tcp_v4_rcv, .err_handler = tcp_v4_err, .no_policy = 1, .netns_ok = 1, }; static int __init inet_init(void){ ...... if (inet_add_protocol(&icmp_protocol, IPPROTO_ICMP) < 0) pr_crit(\"%s: Cannot add ICMP protocol\\n\", __func__); if (inet_add_protocol(&udp_protocol, IPPROTO_UDP) < 0) pr_crit(\"%s: Cannot add UDP protocol\\n\", __func__); if (inet_add_protocol(&tcp_protocol, IPPROTO_TCP) < 0) pr_crit(\"%s: Cannot add TCP protocol\\n\", __func__); ...... dev_add_pack(&ip_packet_type); } \u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c udp_protocol \u7ed3\u6784\u4f53\u4e2d\u7684 handler \u662f udp_rcv \uff0c tcp_protocol \u7ed3\u6784\u4f53\u4e2d\u7684 handler \u662f tcp_v4_rcv \uff0c\u901a\u8fc7 inet_add_protocol \u88ab\u521d\u59cb\u5316\u4e86\u8fdb\u6765\u3002 int inet_add_protocol(const struct net_protocol \\*prot, unsigned char protocol){ if (!prot->netns_ok) { pr_err(\"Protocol %u is not namespace aware, cannot register.\\n\", protocol); return -EINVAL; } return !cmpxchg((const struct net_protocol **)&inet_protos[protocol], NULL, prot) ? 0 : -1; } inet_add_protocol \u51fd\u6570\u5c06 tcp \u548c udp \u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570\u90fd\u6ce8\u518c\u5230\u4e86 inet_protos \u6570\u7ec4\u4e2d\u4e86\u3002\u518d\u770b dev_add_pack(&ip_packet_type); \u8fd9\u4e00\u884c\uff0cip_packet_type \u7ed3\u6784\u4f53\u4e2d\u7684 type \u662f\u534f\u8bae\u540d\uff0cfunc \u662f ip_rcv \u51fd\u6570\uff0c\u5728 dev_add_pack \u4e2d\u4f1a\u88ab\u6ce8\u518c\u5230 ptype_base \u54c8\u5e0c\u8868\u4e2d\u3002 //file: net/core/dev.c void dev_add_pack(struct packet_type \\*pt){ struct list_head *head = ptype_head(pt); ...... } static inline struct list_head *ptype_head(const struct packet_type *pt){ if (pt->type == htons(ETH_P_ALL)) return &ptype_all; else return &ptype_base[ntohs(pt->type) & PTYPE_HASH_MASK]; } \u8fd9\u91cc\u6211\u4eec\u9700\u8981\u8bb0\u4f4f inet_protos \u8bb0\u5f55\u7740 udp\uff0ctcp \u7684\u5904\u7406\u51fd\u6570\u5730\u5740\uff0cptype_base \u5b58\u50a8\u7740 ip_rcv()\u51fd\u6570\u7684\u5904\u7406\u5730\u5740 \u3002\u540e\u9762\u6211\u4eec\u4f1a\u770b\u5230 \u8f6f\u4e2d\u65ad\u4e2d\u4f1a\u901a\u8fc7 ptype_base \u627e\u5230 ip_rcv \u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u5c06 ip \u5305\u6b63\u786e\u5730\u9001\u5230 ip_rcv()\u4e2d\u6267\u884c \u3002 \u5728 ip_rcv \u4e2d\u5c06\u4f1a\u901a\u8fc7 inet_protos \u627e\u5230 tcp \u6216\u8005 udp \u7684\u5904\u7406\u51fd\u6570\uff0c\u518d\u800c\u628a\u5305\u8f6c\u53d1\u7ed9 udp_rcv()\u6216 tcp_v4_rcv()\u51fd\u6570 \u3002 \u6269\u5c55\u4e00\u4e0b\uff0c\u5982\u679c\u770b\u4e00\u4e0b ip_rcv \u548c udp_rcv \u7b49\u51fd\u6570\u7684\u4ee3\u7801\u80fd\u770b\u5230\u5f88\u591a\u534f\u8bae\u7684\u5904\u7406\u8fc7\u7a0b\u3002\u4f8b\u5982\uff0c ip_rcv \u4e2d\u4f1a\u5904\u7406 netfilter \u548c iptable \u8fc7\u6ee4\uff0c\u5982\u679c\u4f60\u6709\u5f88\u591a\u6216\u8005\u5f88\u590d\u6742\u7684 netfilter \u6216 iptables \u89c4\u5219\uff0c\u8fd9\u4e9b\u89c4\u5219\u90fd\u662f\u5728\u8f6f\u4e2d\u65ad\u7684\u4e0a\u4e0b\u6587\u4e2d\u6267\u884c\u7684\uff0c\u4f1a\u52a0\u5927\u7f51\u7edc\u5ef6\u8fdf\u3002 \u518d\u4f8b\u5982\uff0cudp_rcv \u4e2d\u4f1a\u5224\u65ad socket \u63a5\u6536\u961f\u5217\u662f\u5426\u6ee1\u4e86\u3002\u5bf9\u5e94\u7684\u76f8\u5173\u5185\u6838\u53c2\u6570\u662f net.core.rmem_max \u548c net.core.rmem_default\u3002\u5982\u679c\u6709\u5174\u8da3\uff0c\u5efa\u8bae\u5927\u5bb6\u597d\u597d\u8bfb\u4e00\u4e0b inet_init \u8fd9\u4e2a\u51fd\u6570\u7684\u4ee3\u7801\u3002","title":"3.2.1 \u6ce8\u518c"},{"location":"chapter_3/10_linux_net/#4_1","text":"","title":"4 \u5177\u4f53\u8def\u5f84"},{"location":"chapter_3/10_linux_net/#40","text":"\u786c\u4e2d\u65ad(igb_msix_ring) ---> napi_schedule()\u51fd\u6570 ---> \u89e6\u53d1\u8f6f\u4e2d\u65ad( __raise_softirq_irqoff ) \u8f6f\u4e2d\u65ad(net_rx_action) ---> \u7279\u5b9a\u4e8e\u7f51\u5361\u7684 igb_poll()\u51fd\u6570 ---> napi_gro_receive ---> netif_receive_skb ---> ip_rcv","title":"4.0 \u7b80\u5316\u7248\u672c:"},{"location":"chapter_3/10_linux_net/#41_1","text":"\u9996\u5148\u5f53\u6570\u636e\u5e27\u4ece\u7f51\u7ebf\u5230\u8fbe\u7f51\u5361\u4e0a\u7684\u65f6\u5019\uff0c\u7b2c\u4e00\u7ad9\u662f\u7f51\u5361\u7684\u63a5\u6536\u961f\u5217\u3002\u7f51\u5361\u5728\u5206\u914d\u7ed9\u81ea\u5df1\u7684 RingBuffer \u4e2d\u5bfb\u627e\u53ef\u7528\u7684\u5185\u5b58\u4f4d\u7f6e\uff0c\u627e\u5230\u540e DMA \u5f15\u64ce\u4f1a\u628a\u6570\u636e DMA \u5230\u7f51\u5361\u4e4b\u524d\u5173\u8054\u7684\u5185\u5b58\u91cc\uff0c \u8fd9\u4e2a\u65f6\u5019 CPU \u90fd\u662f\u65e0\u611f\u7684\u3002 \u5f53 DMA \u64cd\u4f5c\u5b8c\u6210\u4ee5\u540e\uff0c \u7f51\u5361\u4f1a\u5411 CPU \u53d1\u8d77\u4e00\u4e2a\u786c\u4e2d\u65ad \uff0c\u901a\u77e5 CPU \u6709\u6570\u636e\u5230\u8fbe\u3002 \u6ce8\u610f\uff1a\u5f53 RingBuffer \u6ee1\u7684\u65f6\u5019\uff0c\u65b0\u6765\u7684\u6570\u636e\u5305\u5c06\u7ed9\u4e22\u5f03\u3002ifconfig \u67e5\u770b\u7f51\u5361\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u91cc\u9762\u6709\u4e2a overruns\uff0c\u8868\u793a\u56e0\u4e3a\u73af\u5f62\u961f\u5217\u6ee1\u88ab\u4e22\u5f03\u7684\u5305\u3002\u5982\u679c\u53d1\u73b0\u6709\u4e22\u5305\uff0c\u53ef\u80fd\u9700\u8981\u901a\u8fc7 ethtool \u547d\u4ee4\u6765\u52a0\u5927\u73af\u5f62\u961f\u5217\u7684\u957f\u5ea6\u3002 \u5728\u542f\u52a8\u7f51\u5361\u4e00\u8282\uff0c\u6211\u4eec\u8bf4\u5230\u4e86\u7f51\u5361\u7684\u786c\u4e2d\u65ad\u6ce8\u518c\u7684\u5904\u7406\u51fd\u6570\u662f igb_msix_ring\u3002 //file: drivers/net/ethernet/intel/igb/igb_main.c static irqreturn_t igb_msix_ring(int irq, void \\*data){ struct igb_q_vector *q_vector = data; /* Write the ITR value calculated from the previous interrupt. */ igb_write_itr(q_vector); napi_schedule(&q_vector->napi); return IRQ_HANDLED; } igb_write_itr \u53ea\u662f\u8bb0\u5f55\u4e00\u4e0b\u786c\u4ef6\u4e2d\u65ad\u9891\u7387\uff08\u636e\u8bf4\u76ee\u7684\u662f\u5728\u51cf\u5c11\u5bf9 CPU \u7684\u4e2d\u65ad\u9891\u7387\u65f6\u7528\u5230\uff09\u3002\u987a\u7740 napi_schedule \u8c03\u7528\u4e00\u8def\u8ddf\u8e2a\u4e0b\u53bb\uff0c __napi_schedule=>____napi_schedule /* Called with irq disabled */ static inline void ____napi_schedule(struct softnet_data \\*sd, struct napi_struct *napi){ list_add_tail(&napi->poll_list, &sd->poll_list); __raise_softirq_irqoff(NET_RX_SOFTIRQ); } \u8fd9\u91cc\u6211\u4eec\u770b\u5230\uff0c list_add_tail \u4fee\u6539\u4e86 CPU \u53d8\u91cf softnet_data \u91cc\u7684 poll_list\uff0c\u5c06\u9a71\u52a8 napi_struct \u4f20\u8fc7\u6765\u7684 poll_list \u6dfb\u52a0\u4e86\u8fdb\u6765\u3002\u5176\u4e2d softnet_data \u4e2d\u7684 poll_list \u662f\u4e00\u4e2a\u53cc\u5411\u5217\u8868\uff0c\u5176\u4e2d\u7684\u8bbe\u5907\u90fd\u5e26\u6709\u8f93\u5165\u5e27\u7b49\u7740\u88ab\u5904\u7406\u3002\u7d27\u63a5\u7740 __raise_softirq_irqoff \u89e6\u53d1\u4e86\u4e00\u4e2a\u8f6f\u4e2d\u65ad NET_RX_SOFTIRQ\uff0c \u8fd9\u4e2a\u6240\u8c13\u7684\u89e6\u53d1\u8fc7\u7a0b\u53ea\u662f\u5bf9\u4e00\u4e2a\u53d8\u91cf\u8fdb\u884c\u4e86\u4e00\u6b21\u6216\u8fd0\u7b97\u800c\u5df2\u3002 void __raise_softirq_irqoff(unsigned int nr){ trace_softirq_raise(nr); or_softirq_pending(1UL << nr); } //file: include/linux/irq_cpustat.h #define or_softirq_pending(x) (local_softirq_pending() |= (x)) \u6211\u4eec\u8bf4\u8fc7\uff0cLinux \u5728\u786c\u4e2d\u65ad\u91cc\u53ea\u5b8c\u6210\u7b80\u5355\u5fc5\u8981\u7684\u5de5\u4f5c\uff0c\u5269\u4e0b\u7684\u5927\u90e8\u5206\u7684\u5904\u7406\u90fd\u662f\u8f6c\u4ea4\u7ed9\u8f6f\u4e2d\u65ad\u7684\u3002\u901a\u8fc7\u4e0a\u9762\u4ee3\u7801\u53ef\u4ee5\u770b\u5230\uff0c\u786c\u4e2d\u65ad\u5904\u7406\u8fc7\u7a0b\u771f\u7684\u662f\u975e\u5e38\u77ed\u3002\u53ea\u662f\u8bb0\u5f55\u4e86\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u4fee\u6539\u4e86\u4e00\u4e0b\u4e0b CPU \u7684 poll_list\uff0c\u7136\u540e\u53d1\u51fa\u4e2a\u8f6f\u4e2d\u65ad\u3002\u5c31\u8fd9\u4e48\u7b80\u5355\uff0c\u786c\u4e2d\u65ad\u5de5\u4f5c\u5c31\u7b97\u662f\u5b8c\u6210\u4e86\u3002","title":"4.1 \u786c\u4e2d\u65ad\u4e4b\u524d\u548c\u786c\u4e2d\u65ad\u7684\u5de5\u4f5c"},{"location":"chapter_3/10_linux_net/#42_1","text":"","title":"4.2 \u8f6f\u4e2d\u65ad\u7684\u5de5\u4f5c"},{"location":"chapter_3/10_linux_net/#421-netif_receive_skb","text":"\u5185\u6838\u7ebf\u7a0b\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86 ksoftirqd \u4e2d\u4e24\u4e2a\u7ebf\u7a0b\u51fd\u6570 ksoftirqd_should_run \u548c run_ksoftirqd\u3002\u5176\u4e2d ksoftirqd_should_run \u4ee3\u7801\u5982\u4e0b\uff1a static int ksoftirqd_should_run(unsigned int cpu){ return local_softirq_pending(); } #define local_softirq_pending() \\ **IRQ_STAT(smp_processor_id(), **softirq_pending) \u8fd9\u91cc\u770b\u5230\u548c\u786c\u4e2d\u65ad\u4e2d\u8c03\u7528\u4e86\u540c\u4e00\u4e2a\u51fd\u6570 local_softirq_pending\u3002\u4f7f\u7528\u65b9\u5f0f\u4e0d\u540c\u7684\u662f\u786c\u4e2d\u65ad\u4f4d\u7f6e\u662f\u4e3a\u4e86\u5199\u5165\u6807\u8bb0\uff0c\u8fd9\u91cc\u4ec5\u4ec5\u53ea\u662f\u8bfb\u53d6\u3002\u5982\u679c\u786c\u4e2d\u65ad\u4e2d\u8bbe\u7f6e\u4e86 NET_RX_SOFTIRQ,\u8fd9\u91cc\u81ea\u7136\u80fd\u8bfb\u53d6\u7684\u5230\u3002\u63a5\u4e0b\u6765\u4f1a\u771f\u6b63\u8fdb\u5165\u7ebf\u7a0b\u51fd\u6570\u4e2d run_ksoftirqd \u5904\u7406\uff1a static void run_ksoftirqd(unsigned int cpu){ local_irq_disable(); if (local_softirq_pending()) { __do_softirq(); rcu_note_context_switch(cpu); local_irq_enable(); cond_resched(); return; } local_irq_enable(); } \u5728 __do_softirq \u4e2d\uff0c\u5224\u65ad\u6839\u636e\u5f53\u524d CPU \u7684\u8f6f\u4e2d\u65ad\u7c7b\u578b\uff0c\u8c03\u7528\u5176\u6ce8\u518c\u7684 action \u65b9\u6cd5\u3002 asmlinkage void __do_softirq(void){ do { if (pending & 1) { unsigned int vec_nr = h - softirq_vec; int prev_count = preempt_count(); ... trace_softirq_entry(vec_nr); h->action(h); trace_softirq_exit(vec_nr); ... } h++; pending >>= 1; } while (pending); } \u5728\u7f51\u7edc\u5b50\u7cfb\u7edf\u521d\u59cb\u5316\u5c0f\u8282\uff0c \u6211\u4eec\u770b\u5230\u6211\u4eec\u4e3a NET_RX_SOFTIRQ \u6ce8\u518c\u4e86\u5904\u7406\u51fd\u6570 net_rx_action\u3002\u6240\u4ee5 net_rx_action \u51fd\u6570\u5c31\u4f1a\u88ab\u6267\u884c\u5230\u4e86\u3002 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u4e00\u4e2a\u7ec6\u8282\uff0c\u786c\u4e2d\u65ad\u4e2d\u8bbe\u7f6e\u8f6f\u4e2d\u65ad\u6807\u8bb0\uff0c\u548c ksoftirq \u7684\u5224\u65ad\u662f\u5426\u6709\u8f6f\u4e2d\u65ad\u5230\u8fbe\uff0c\u90fd\u662f\u57fa\u4e8e smp_processor_id()\u7684\u3002\u8fd9\u610f\u5473\u7740\u53ea\u8981\u786c\u4e2d\u65ad\u5728\u54ea\u4e2a CPU \u4e0a\u88ab\u54cd\u5e94\uff0c\u90a3\u4e48\u8f6f\u4e2d\u65ad\u4e5f\u662f\u5728\u8fd9\u4e2a CPU \u4e0a\u5904\u7406\u7684\u3002\u6240\u4ee5\u8bf4\uff0c\u5982\u679c\u4f60\u53d1\u73b0\u4f60\u7684 Linux \u8f6f\u4e2d\u65ad CPU \u6d88\u8017\u90fd\u96c6\u4e2d\u5728\u4e00\u4e2a\u6838\u4e0a\u7684\u8bdd\uff0c\u505a\u6cd5\u662f\u8981\u628a\u8c03\u6574\u786c\u4e2d\u65ad\u7684 CPU \u4eb2\u548c\u6027\uff0c\u6765\u5c06\u786c\u4e2d\u65ad\u6253\u6563\u5230\u4e0d\u540c\u7684 CPU \u6838\u4e0a\u53bb\u3002 \u6211\u4eec\u518d\u6765\u628a\u7cbe\u529b\u96c6\u4e2d\u5230\u8fd9\u4e2a\u6838\u5fc3\u51fd\u6570 net_rx_action \u4e0a\u6765\u3002 static void net_rx_action(struct softirq_action *h){ struct softnet_data *sd = &__get_cpu_var(softnet_data); unsigned long time_limit = jiffies + 2; int budget = netdev_budget; void \\*have; local_irq_disable(); while (!list_empty(&sd->poll_list)) { ...... n = list_first_entry(&sd->poll_list, struct napi_struct, poll_list); work = 0; if (test_bit(NAPI_STATE_SCHED, &n->state)) { work = n->poll(n, weight); trace_napi_poll(n); } budget -= work; } } \u51fd\u6570\u5f00\u5934\u7684 time_limit \u548c budget \u662f\u7528\u6765\u63a7\u5236 net_rx_action \u51fd\u6570\u4e3b\u52a8\u9000\u51fa\u7684\uff0c\u76ee\u7684\u662f\u4fdd\u8bc1\u7f51\u7edc\u5305\u7684\u63a5\u6536\u4e0d\u9738\u5360 CPU \u4e0d\u653e\u3002\u7b49\u4e0b\u6b21\u7f51\u5361\u518d\u6709\u786c\u4e2d\u65ad\u8fc7\u6765\u7684\u65f6\u5019\u518d\u5904\u7406\u5269\u4e0b\u7684\u63a5\u6536\u6570\u636e\u5305\u3002\u5176\u4e2d budget \u53ef\u4ee5\u901a\u8fc7\u5185\u6838\u53c2\u6570\u8c03\u6574\u3002\u8fd9\u4e2a\u51fd\u6570\u4e2d\u5269\u4e0b\u7684\u6838\u5fc3\u903b\u8f91\u662f\u83b7\u53d6\u5230\u5f53\u524d CPU \u53d8\u91cf softnet_data\uff0c\u5bf9\u5176 poll_list \u8fdb\u884c\u904d\u5386, \u7136\u540e\u6267\u884c\u5230\u7f51\u5361\u9a71\u52a8\u6ce8\u518c\u5230\u7684 poll \u51fd\u6570\u3002\u5bf9\u4e8e igb \u7f51\u5361\u6765\u8bf4\uff0c\u5c31\u662f igb \u9a71\u52a8\u529b\u7684 igb_poll \u51fd\u6570\u4e86\u3002 static int igb_poll(struct napi_struct \\*napi, int budget){ ... if (q_vector->tx.ring) clean_complete = igb_clean_tx_irq(q_vector); if (q_vector->rx.ring) clean_complete &= igb_clean_rx_irq(q_vector, budget); ... } \u5728\u8bfb\u53d6\u64cd\u4f5c\u4e2d\uff0c igb_poll \u7684\u91cd\u70b9\u5de5\u4f5c\u662f\u5bf9 igb_clean_rx_irq \u7684\u8c03\u7528\u3002 static bool igb_clean_rx_irq(struct igb_q_vector _q_vector, const int budget){ ... do { /_ retrieve a buffer from the ring \\*/ skb = igb_fetch_rx_buffer(rx_ring, rx_desc, skb); /* fetch next buffer in frame if non-eop */ if (igb_is_non_eop(rx_ring, rx_desc)) continue; } /* verify the packet layout is correct */ if (igb_cleanup_headers(rx_ring, rx_desc, skb)) { skb = NULL; continue; } /* populate checksum, timestamp, VLAN, and protocol */ igb_process_skb_fields(rx_ring, rx_desc, skb); napi_gro_receive(&q_vector->napi, skb); } igb_fetch_rx_buffer \u548c igb_is_non_eop \u7684\u4f5c\u7528\u5c31\u662f\u628a\u6570\u636e\u5e27\u4ece RingBuffer \u4e0a\u53d6\u4e0b\u6765\u3002\u4e3a\u4ec0\u4e48\u9700\u8981\u4e24\u4e2a\u51fd\u6570\u5462\uff1f\u56e0\u4e3a\u6709\u53ef\u80fd\u5e27\u8981\u5360\u591a\u591a\u4e2a RingBuffer\uff0c\u6240\u4ee5\u662f\u5728\u4e00\u4e2a\u5faa\u73af\u4e2d\u83b7\u53d6\u7684\uff0c\u76f4\u5230\u5e27\u5c3e\u90e8\u3002\u83b7\u53d6\u4e0b\u6765\u7684\u4e00\u4e2a\u6570\u636e\u5e27\u7528\u4e00\u4e2a sk_buff \u6765\u8868\u793a\u3002\u6536\u53d6\u5b8c\u6570\u636e\u4ee5\u540e\uff0c\u5bf9\u5176\u8fdb\u884c\u4e00\u4e9b\u6821\u9a8c\uff0c\u7136\u540e\u5f00\u59cb\u8bbe\u7f6e sbk \u53d8\u91cf\u7684 timestamp, VLAN id, protocol \u7b49\u5b57\u6bb5\u3002\u63a5\u4e0b\u6765\u8fdb\u5165\u5230 napi_gro_receive \u4e2d: //file: net/core/dev.c gro_result_t napi_gro_receive(struct napi_struct *napi, struct sk_buff *skb){ skb_gro_reset_offset(skb); return napi_skb_finish(dev_gro_receive(napi, skb), skb); } dev_gro_receive \u8fd9\u4e2a\u51fd\u6570\u4ee3\u8868\u7684\u662f\u7f51\u5361 GRO \u7279\u6027\uff0c\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u6210\u628a\u76f8\u5173\u7684\u5c0f\u5305\u5408\u5e76\u6210\u4e00\u4e2a\u5927\u5305\u5c31\u884c\uff0c\u76ee\u7684\u662f\u51cf\u5c11\u4f20\u9001\u7ed9\u7f51\u7edc\u6808\u7684\u5305\u6570\uff0c\u8fd9\u6709\u52a9\u4e8e\u51cf\u5c11 CPU \u7684\u4f7f\u7528\u91cf\u3002\u6211\u4eec\u6682\u4e14\u5ffd\u7565\uff0c\u76f4\u63a5\u770b napi_skb_finish, \u8fd9\u4e2a\u51fd\u6570\u4e3b\u8981\u5c31\u662f\u8c03\u7528\u4e86 netif_receive_skb\u3002 //file: net/core/dev.c static gro_result_t napi_skb_finish(gro_result_t ret, struct sk_buff \\*skb){ switch (ret) { case GRO_NORMAL: if (netif_receive_skb(skb)) ret = GRO_DROP; break; ...... } \u5728 netif_receive_skb \u4e2d\uff0c\u6570\u636e\u5305\u5c06\u88ab\u9001\u5230\u534f\u8bae\u6808\u4e2d\u3002\u58f0\u660e\uff0c\u4ee5\u4e0b\u7684 3.3, 3.4, 3.5 \u4e5f\u90fd\u5c5e\u4e8e\u8f6f\u4e2d\u65ad\u7684\u5904\u7406\u8fc7\u7a0b\uff0c\u53ea\u4e0d\u8fc7\u7531\u4e8e\u7bc7\u5e45\u592a\u957f\uff0c\u5355\u72ec\u62ff\u51fa\u6765\u6210\u5c0f\u8282\u3002","title":"4.2.1 \u8fdb\u5165\u534f\u8bae\u6808\u4e4b\u524d\u7684\u5de5\u4f5c(netif_receive_skb \u4e4b\u524d)"},{"location":"chapter_3/10_linux_net/#422-netif_receive_skb","text":"netif_receive_skb \u51fd\u6570\u4f1a\u6839\u636e\u5305\u7684\u534f\u8bae\uff0c\u5047\u5982\u662f udp \u5305\uff0c\u4f1a\u5c06\u5305\u4f9d\u6b21\u9001\u5230 ip_rcv() , udp_rcv() \u534f\u8bae\u5904\u7406\u51fd\u6570\u4e2d\u8fdb\u884c\u5904\u7406\u3002 //file: net/core/dev.c int netif_receive_skb(struct sk_buff \\*skb){ //RPS\u5904\u7406\u903b\u8f91\uff0c\u5148\u5ffd\u7565 ...... return __netif_receive_skb(skb); } static int \\_\\_netif_receive_skb(struct sk_buff \\*skb){ ...... ret = __netif_receive_skb_core(skb, false); } static int \\_\\_netif_receive_skb_core(struct sk_buff \\*skb, bool pfmemalloc){ ...... //pcap\u903b\u8f91\uff0c\u8fd9\u91cc\u4f1a\u5c06\u6570\u636e\u9001\u5165\u6293\u5305\u70b9\u3002tcpdump\u5c31\u662f\u4ece\u8fd9\u4e2a\u5165\u53e3\u83b7\u53d6\u5305\u7684 list_for_each_entry_rcu(ptype, &ptype_all, list) { if (!ptype->dev || ptype->dev == skb->dev) { if (pt_prev) ret = deliver_skb(skb, pt_prev, orig_dev); pt_prev = ptype; } } ...... list_for_each_entry_rcu(ptype, &ptype_base[ntohs(type) & PTYPE_HASH_MASK], list) { if (ptype->type == type && (ptype->dev == null_or_dev || ptype->dev == skb->dev || ptype->dev == orig_dev)) { if (pt_prev) ret = deliver_skb(skb, pt_prev, orig_dev); // \u5728\u8fd9\u91cc\u8fd0\u884cdeliver_skb\u51fd\u6570 pt_prev = ptype; } } } \u5728 __netif_receive_skb_core \u4e2d\uff0c\u6211\u770b\u7740\u539f\u6765\u7ecf\u5e38\u4f7f\u7528\u7684 tcpdump \u7684\u6293\u5305\u70b9\uff0c\u5f88\u662f\u6fc0\u52a8\uff0c\u770b\u6765\u8bfb\u4e00\u904d\u6e90\u4ee3\u7801\u65f6\u95f4\u771f\u7684\u6ca1\u767d\u6d6a\u8d39\u3002\u63a5\u7740 __netif_receive_skb_core \u53d6\u51fa protocol\uff0c\u5b83\u4f1a\u4ece\u6570\u636e\u5305\u4e2d\u53d6\u51fa\u534f\u8bae\u4fe1\u606f\uff0c\u7136\u540e\u904d\u5386\u6ce8\u518c\u5728\u8fd9\u4e2a\u534f\u8bae\u4e0a\u7684\u56de\u8c03\u51fd\u6570\u5217\u8868\u3002 ptype_base \u662f\u4e00\u4e2a hash table \uff0c\u5728\u534f\u8bae\u6ce8\u518c\u5c0f\u8282\u6211\u4eec\u63d0\u5230\u8fc7\u3002 ip_rcv \u51fd\u6570\u5730\u5740\u5c31\u662f\u5b58\u5728\u8fd9\u4e2a hash table \u4e2d\u7684\u3002 //file: net/core/dev.c static inline int deliver_skb(struct sk_buff \\*skb, struct packet_type *pt_prev, struct net_device *orig_dev){ ...... return pt_prev->func(skb, skb->dev, pt_prev, orig_dev); } pt_prev->func \u8fd9\u4e00\u884c\u5c31\u8c03\u7528\u5230\u4e86\u534f\u8bae\u5c42\u6ce8\u518c\u7684\u5904\u7406\u51fd\u6570\u4e86\u3002\u5bf9\u4e8e ip \u5305\u6765\u8bb2\uff0c\u5c31\u4f1a\u8fdb\u5165\u5230 ip_rcv \uff08\u5982\u679c\u662f arp \u5305\u7684\u8bdd\uff0c\u4f1a\u8fdb\u5165\u5230 arp_rcv \uff09\u3002","title":"4.2.2 \u8fdb\u5165\u534f\u8bae\u6808\u4e4b\u540e\u7684\u5de5\u4f5c(netif_receive_skb \u4e4b\u540e)"},{"location":"chapter_3/10_linux_net/#_8","text":"","title":"\u56db \u5e38\u89c1\u95ee\u9898&amp;&amp;\u5e38\u7528\u6280\u80fd"},{"location":"chapter_3/10_linux_net/#1-cpu","text":"","title":"1 \u8c03\u6574\u7f51\u5361\u8f6f\u4e2d\u65ad\u5230\u4e0d\u540c CPU"},{"location":"chapter_3/10_linux_net/#_9","text":"\u5f53\u51fa\u884c\u5927\u6d41\u91cf\u4e0b\u8f7d\u7684\u65f6\u5019\uff0c\u7f51\u5361\u4e2d\u65ad\u90fd\u5728 cpu 0 \u4e0a(cpu 0 \u7684 system \u65f6\u95f4\u975e\u5e38\u9ad8) \u901a\u8fc7 mpstat -I SUM -P ALL \u67e5\u770b\uff0c\u6240\u6709\u7684\u4e2d\u65ad\u90fd\u5728 cpu 0 \u4e0a \u6bd4\u5982\u6211\u8981\u628a\u7f51\u5361 0 \u53f7\u961f\u5217\u7684\u4e2d\u65ad\u7ed1\u5b9a\u5230 cpu0 \u548c cpu1 \u4e0a\uff0c\u6267\u884c\u5982\u4e0b\u547d\u4ee4\uff1a echo 02 > /proc/irq/149/smp_affinity \u7136\u540e\u518d\u8fdb\u884c\u65bd\u538b\uff1a \u53d1\u73b0 cpu1 \u5df2\u7ecf\u5206\u62c5\u4e86\u4e00\u90e8\u5206\u538b\u529b\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5982\u4f55\u83b7\u53d6 0 \u53f7\u961f\u5217\u7684\u4e2d\u65ad\u53f7? grep eth0 /proc/interrupts \u53ef\u662f\u4e3a\u4ec0\u4e48\u4fee\u6539\u4e86\u786c\u4e2d\u65ad\u5230 CPU \u7684\u4eb2\u548c\u6027\u3001\u5374\u540c\u65f6\u80fd\u591f\u5f71\u54cd\u8f6f\u4e2d\u65ad\u7684\u4eb2\u548c\u6027\u5462? \u786c\u4e2d\u65ad\u4e2d\u8bbe\u7f6e\u8f6f\u4e2d\u65ad\u6807\u8bb0\u548c ksoftirq \u7684\u5224\u65ad\u662f\u5426\u6709\u8f6f\u4e2d\u65ad\u5230\u8fbe\uff0c\u90fd\u4f7f\u7528\u5230\u4e86 local_softirq_pending \u51fd\u6570, \u90fd\u662f\u57fa\u4e8e smp_processor_id() \u7684\u3002\u8fd9\u610f\u5473\u7740 \u53ea\u8981\u786c\u4e2d\u65ad\u5728\u54ea\u4e2a CPU \u4e0a\u88ab\u54cd\u5e94\uff0c\u90a3\u4e48\u8f6f\u4e2d\u65ad\u4e5f\u662f\u5728\u8fd9\u4e2a CPU \u4e0a\u5904\u7406\u7684 \u3002\u6240\u4ee5\u8bf4\uff0c\u5982\u679c\u4f60\u53d1\u73b0\u4f60\u7684 Linux \u8f6f\u4e2d\u65ad CPU \u6d88\u8017\u90fd\u96c6\u4e2d\u5728\u4e00\u4e2a\u6838\u4e0a\u7684\u8bdd\uff0c\u505a\u6cd5\u662f\u8981\u628a\u8c03\u6574\u786c\u4e2d\u65ad\u7684 CPU \u4eb2\u548c\u6027\uff0c\u6765\u5c06\u786c\u4e2d\u65ad\u6253\u6563\u5230\u4e0d\u540c\u7684 CPU \u6838\u4e0a\u53bb\u3002 \u786c\u4e2d\u65ad \u89e6\u53d1\u8f6f\u4e2d\u65ad\u7684\u4ee3\u7801\u5982\u4e0b void \\_\\_raise_softirq_irqoff(unsigned int nr){ trace_softirq_raise(nr); or_softirq_pending(1UL << nr); } //file: include/linux/irq_cpustat.h #define or_softirq_pending(x) (local_softirq_pending() |= (x)) \u8f6f\u4e2d\u65ad ksoftirqd_should_run \u4ee3\u7801\u5982\u4e0b\uff1a static int ksoftirqd_should_run(unsigned int cpu){ return local_softirq_pending(); } #define local_softirq_pending() \\ **IRQ_STAT(smp_processor_id(), **softirq_pending)","title":"\u9ed8\u8ba4\u60c5\u51b5"},{"location":"chapter_3/10_linux_net/#2-netfilter-iptables","text":"ip_rcv \u4e2d\u4f1a\u5904\u7406 netfilter \u548c iptable \u8fc7\u6ee4\uff0c\u5982\u679c\u4f60\u6709\u5f88\u591a\u6216\u8005\u5f88\u590d\u6742\u7684 netfilter \u6216 iptables \u89c4\u5219\uff0c\u8fd9\u4e9b\u89c4\u5219\u90fd\u662f\u5728\u8f6f\u4e2d\u65ad\u7684\u4e0a\u4e0b\u6587\u4e2d\u6267\u884c\u7684\uff0c\u4f1a\u52a0\u5927\u7f51\u7edc\u5ef6\u8fdf\u3002","title":"2 netfilter \u548c iptables \u8fc7\u6ee4\u662f\u5728\u54ea\u4e2a\u73af\u8282/\u73af\u5883\u4e0b\u6267\u884c\u7684?"},{"location":"chapter_3/10_linux_net/#3-tcpdump","text":"","title":"3 tcpdump \u662f\u5728\u54ea\u4e2a\u73af\u8282\u6267\u884c\u7684?"},{"location":"chapter_3/10_linux_net/#31","text":"ip_rcv \u2014> netfilter: raw_prerouting \u2014> conntrack \u2014> \u8def\u7531(routing decision) \u5176\u4e2d tcpdump \uff08\u5982\u679c\uff09\u8fd0\u884c\u7684\u8bdd\uff0c\u662f\u5728 ip_rcv \u4e4b\u524d . tcpdump \u662f\u5982\u4f55\u5de5\u4f5c\u7684? tcpdump \u5de5\u4f5c\u5728\u8bbe\u5907\u5c42\uff0c\u662f\u901a\u8fc7\u865a\u534f\u8bae\u7684\u65b9\u5f0f\u5de5\u4f5c\u7684\u3002\u5b83\u901a\u8fc7\u8c03\u7528 packet_create \u5c06 \u6293 \u5305 \u51fd \u6570 \u4ee5 \u534f \u8bae \u7684 \u5f62 \u5f0f \u6302 \u5230 ptype_all \u4e0a\u3002 \u5f53\u6536\u5305\u7684\u65f6\u5019\uff0c\u9a71\u52a8\u4e2d\u5b9e\u73b0\u7684 igb_poll \u51fd\u6570\u6700\u7ec8\u4f1a\u8c03\u7528\u5230 __nelif_receive_skb_core , \u8fd9 \u4e2a\u51fd\u6570 \u4f1a \u5728 \u5c06 \u5305 \u9001 \u5230 \u534f \u8bae \u6808 \u51fd\u6570 ( ip_rcv\u3001arp_rcv \u7b49 ) \u4e4b \u524d \uff0c \u5c06 \u5305 \u5148 \u9001 \u5230 ptype_all \u6293 \u5305 \u70b9\u3002\u6211\u4eec\u5e73\u65f6\u5de5\u4f5c\u4e2d\u7ecf\u5e38\u4f1a\u7528\u5230\u7684 tcpdump \u5c31\u662f\u57fa\u4e8e\u8fd9\u4e9b\u6293\u5305\u70b9\u6765\u5de5\u4f5c\u7684\u3002 \u8fd9 \u6b21 \u4f60 \u77e5 \u9053 tcpdump \u662f \u5982 \u4f55 \u548c \u5185 \u6838 \u8fdb \u884c \u914d \u5408 \u7684 \u4e86\u5427 !","title":"3.1 \u6536\u5305\u65b9\u5411"},{"location":"chapter_3/10_linux_net/#32_1","text":"","title":"3.2 \u53d1\u5305\u65b9\u5411"},{"location":"chapter_3/10_linux_net/#4-ebpf-xdp","text":"\u8bf4\u767d\u4e86, \u5176\u5b9e XDP \u662f\u5728\u7f51\u5361\u9a71\u52a8\u5c42\u6267\u884c\u5305\u8fc7\u6ee4, \u88ab\u8fc7\u6ee4\u6389\u7684\u5305\u90fd\u4e0d\u4f1a\u5206\u914d SKB. XDP\uff08eXpress Data Path\uff09\u662f\u57fa\u4e8e eBPF \u5b9e\u73b0\u7684\u9ad8\u6027\u80fd\u3001\u53ef\u7f16\u7a0b\u7684\u6570\u636e\u5e73\u9762\u6280\u672f \u3002\u57fa\u672c\u7684\u8f6f\u4ef6\u67b6\u6784\u5982\u4e0b\u56fe\u6240\u793a XDP \u4f4d\u4e8e\u7f51\u5361\u9a71\u52a8\u5c42\uff0c\u5f53\u6570\u636e\u5305\u7ecf\u8fc7 DMA \u5b58\u653e\u5230 ring buffer \u4e4b\u540e\uff0c\u5206\u914d skb \u4e4b\u524d\uff0c\u5373\u53ef\u88ab XDP \u5904\u7406 \u3002\u6570\u636e\u5305\u7ecf\u8fc7 XDP \u4e4b\u540e\uff0c\u4f1a\u6709 4 \u79cd\u53bb\u5411\uff1a XDP_DROP\uff1a\u4e22\u5305 XDP_PASS\uff1a\u4e0a\u9001\u534f\u8bae\u6808 XDP_TX\uff1a\u4ece\u5f53\u524d\u7f51\u5361\u53d1\u9001\u51fa\u53bb XDP_REDIRECT\uff1a\u4ece\u5176\u4ed6\u7f51\u5361\u53d1\u9001\u51fa\u53bb \u7531\u4e8e XDP \u4f4d\u4e8e\u6574\u4e2a Linux \u5185\u6838\u7f51\u7edc\u8f6f\u4ef6\u6808\u7684\u5e95\u90e8\uff0c\u80fd\u591f\u975e\u5e38\u65e9\u5730\u8bc6\u522b\u5e76\u4e22\u5f03\u653b\u51fb\u62a5\u6587\uff0c\u5177\u6709\u5f88\u9ad8\u7684\u6027\u80fd \u3002\u8fd9\u4e3a\u6211\u4eec\u6539\u5584 iptables/nftables \u534f\u8bae\u6808\u4e22\u5305\u7684\u6027\u80fd\u74f6\u9888\uff0c\u63d0\u4f9b\u4e86\u975e\u5e38\u68d2\u7684\u89e3\u51b3\u65b9\u6848\u3002","title":"4 eBPF \u548c XDP \u7684\u5305\u8fc7\u6ee4\u79fb\u4ea4\u5230\u7f51\u5361\u4e0a\u5177\u4f53\u662f\u5565?"},{"location":"chapter_3/11_igb/","text":"\u6982\u8ff0 \u6838\u5fc3\u6570\u636e\u7ed3\u6784 1 \u7f51\u5361 struct igb_adapter /* board specific private data structure */ struct igb_adapter { unsigned long active_vlans[BITS_TO_LONGS(VLAN_N_VID)]; struct net_device *netdev; unsigned long state; unsigned int flags; unsigned int num_q_vectors; struct msix_entry msix_entries[MAX_MSIX_ENTRIES]; /* Interrupt Throttle Rate */ u32 rx_itr_setting; u32 tx_itr_setting; u16 tx_itr; u16 rx_itr; /* TX */ u16 tx_work_limit; u32 tx_timeout_count; int num_tx_queues; struct igb_ring *tx_ring[16]; /* RX */ int num_rx_queues; struct igb_ring *rx_ring[16]; u32 max_frame_size; u32 min_frame_size; struct timer_list watchdog_timer; struct timer_list phy_info_timer; u16 mng_vlan_id; u32 bd_number; u32 wol; u32 en_mng_pt; u16 link_speed; u16 link_duplex; struct work_struct reset_task; struct work_struct watchdog_task; bool fc_autoneg; u8 tx_timeout_factor; struct timer_list blink_timer; unsigned long led_status; /* OS defined structs */ struct pci_dev *pdev; spinlock_t stats64_lock; struct rtnl_link_stats64 stats64; /* structs defined in e1000_hw.h */ struct e1000_hw hw; struct e1000_hw_stats stats; struct e1000_phy_info phy_info; struct e1000_phy_stats phy_stats; u32 test_icr; struct igb_ring test_tx_ring; struct igb_ring test_rx_ring; int msg_enable; struct igb_q_vector *q_vector[MAX_Q_VECTORS]; u32 eims_enable_mask; u32 eims_other; /* to not mess up cache alignment, always add to the bottom */ u16 tx_ring_count; u16 rx_ring_count; unsigned int vfs_allocated_count; struct vf_data_storage *vf_data; int vf_rate_link_speed; u32 rss_queues; u32 wvbr; u32 *shadow_vfta; struct ptp_clock *ptp_clock; struct ptp_clock_info ptp_caps; struct delayed_work ptp_overflow_work; struct work_struct ptp_tx_work; struct sk_buff *ptp_tx_skb; struct hwtstamp_config tstamp_config; unsigned long ptp_tx_start; unsigned long last_rx_ptp_check; unsigned long last_rx_timestamp; spinlock_t tmreg_lock; struct cyclecounter cc; struct timecounter tc; u32 tx_hwtstamp_timeouts; u32 rx_hwtstamp_cleared; char fw_version[32]; #ifdef CONFIG_IGB_HWMON struct hwmon_buff *igb_hwmon_buff; bool ets; #endif struct i2c_algo_bit_data i2c_algo; struct i2c_adapter i2c_adap; struct i2c_client *i2c_client; u32 rss_indir_tbl_init; u8 rss_indir_tbl[IGB_RETA_SIZE]; unsigned long link_check_timeout; int copper_tries; struct e1000_info ei; u16 eee_advert; }; 2 \u53d1\u9001\u548c\u63a5\u6536 buffer(\u5355\u4e2a) struct igb_tx_buffer { union e1000_adv_tx_desc *next_to_watch; unsigned long time_stamp; struct sk_buff *skb; unsigned int bytecount; u16 gso_segs; __be16 protocol; DEFINE_DMA_UNMAP_ADDR(dma); DEFINE_DMA_UNMAP_LEN(len); u32 tx_flags; }; struct igb_rx_buffer { dma_addr_t dma; struct page *page; unsigned int page_offset; }; 3 \u7f51\u5361\u4e2d\u65ad\u63cf\u8ff0\u7b26\u6570\u636e\u7ed3\u6784 struct igb_q_vector \u4e5f\u53ef\u4ee5\u662f\u591a\u961f\u5217\u7f51\u5361\u91cc\u7684\u4e00\u4e2a\u961f\u5217 \u53d1\u5305\u961f\u5217\u4e2d\u7ef4\u62a4\u4e86 256 \u4e2a\u53d1\u5305 buffer\uff08struct igb_tx_buffer\uff09 \u6bcf\u4e2a igb_q_vector \u5bf9\u5e94\u4e00\u4e2a\u786c\u4e2d\u65ad(\u6240\u4ee5 struct igb_q_vector \u5c31\u662f\u4e00\u4e2a \u7f51\u5361\u961f\u5217 ), \u5bf9\u5e94 2 \u4e2a struct igb_ring \uff08\u4e24\u4e2a\u73af\u5f62\u7f13\u51b2\u533a\uff09, \u5176\u4e2d\u4e00\u4e2a\u7528\u4e8e \u53d1\u9001 \u3001\u4e00\u4e2a\u7528\u4e8e \u63a5\u6536 \u6bcf\u4e2a\u7f51\u5361\uff08struct igb_adapter\uff09\u6709 MAX_Q_VECTORS(\u9ed8\u8ba4\u662f 8) \u4e2a struct igb_q_vector struct igb_ring \u662f\u6838\u5fc3\uff0c struct igb_ring_container \u53ea\u662f\u4e00\u4e2a\u5916\u5305\u88c5. \u6bcf\u4e2a struct igb_ring \u662f\u5c31\u662f\u4e00\u4e2a RingBuffer , \u6bcf\u4e2a RingBuffer \u8981\u4e48\u662f\u7528\u4e8e\u53d1\u9001\u8981\u4e48\u662f\u7528\u4e8e\u63a5\u6536. struct igb_q_vector { struct igb_adapter *adapter; /* backlink */ int cpu; /* CPU for DCA */ u32 eims_value; /* EIMS mask value */ u16 itr_val; u8 set_itr; void __iomem *itr_register; struct igb_ring_container rx, tx; struct napi_struct napi; struct rcu_head rcu; /* to avoid race with update stats on free */ char name[IFNAMSIZ + 9]; /* for dynamic allocation of rings associated with this q_vector */ struct igb_ring ring[0] ____cacheline_internodealigned_in_smp; }; struct igb_ring_container { struct igb_ring *ring; /* pointer to linked list of rings */ unsigned int total_bytes; /* total bytes processed this int */ unsigned int total_packets; /* total packets processed this int */ u16 work_limit; /* total work allowed per interrupt */ u8 count; /* total number of rings in vector */ u8 itr; /* current ITR setting for ring */ }; struct igb_ring { struct igb_q_vector *q_vector; /* backlink to q_vector */ struct net_device *netdev; /* back pointer to net_device */ struct device *dev; /* device pointer for dma mapping */ union { /* array of buffer info structs */ struct igb_tx_buffer *tx_buffer_info; struct igb_rx_buffer *rx_buffer_info; }; void *desc; /* descriptor ring memory*/ /* \u5927\u5c0f\u4e3asize\u7684DMA\u5185\u5b58\u533a*/ unsigned long flags; /* ring specific flags */ void __iomem *tail; /* pointer to ring tail register */ dma_addr_t dma; /* phys address of the ring */ unsigned int size; /* length of desc. ring in bytes */ u16 count; /* number of desc. in the ring */ /*256\u4e2a*/ u8 queue_index; /* logical index of the ring*/ u8 reg_idx; /* physical index of the ring */ /* everything past this point are written often */ u16 next_to_clean; u16 next_to_use; u16 next_to_alloc; union { /* TX */ struct { struct igb_tx_queue_stats tx_stats; struct u64_stats_sync tx_syncp; struct u64_stats_sync tx_syncp2; }; /* RX */ struct { struct sk_buff *skb; struct igb_rx_queue_stats rx_stats; struct u64_stats_sync rx_syncp; }; }; } ____cacheline_internodealigned_in_smp; 4 DMA \u63cf\u8ff0\u7b26 DMA \u63cf\u8ff0\u7b26\uff08union e1000_adv_tx_desc\uff09 \u4e0a\u56fe\u4e2d,\u6bcf\u4e2a RingBuffer \u5185\u90e8(\u6bcf\u4e2a struct igb_ring \u5185\u90e8)\u6709\u4e00\u4e2a igb_t(r)x_buffer \u6570\u7ec4 \u548c\u4e00\u4e2a e1000_adv_tx_desc \u6570\u7ec4 , \u5176\u4e2d e1000_adv_tx_desc \u6570\u7ec4 \u4e2d\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\u5c31\u662f\u4e00\u4e2a DMA \u63cf\u8ff0\u7b26 5 \u5bf9\u4e0a\u5c42\u63d0\u4f9b net_device_ops drivers/net/ethernet/intel/igb/igb_main.c:2080:static const struct net_device_ops igb_netdev_ops = { \u6838\u5fc3\u51fd\u6570 1 \u786c\u4e2d\u65ad\u6ce8\u518c igb_request_msix drivers/net/ethernet/intel/igb/igb_main.c /** * igb_request_msix - Initialize MSI-X interrupts * @adapter: board private structure to initialize * * igb_request_msix allocates MSI-X vectors and requests interrupts from the * kernel. **/ static int igb_request_msix(struct igb_adapter *adapter) { struct net_device *netdev = adapter->netdev; struct e1000_hw *hw = &adapter->hw; int i, err = 0, vector = 0, free_vector = 0; err = request_irq(adapter->msix_entries[vector].vector, igb_msix_other, 0, netdev->name, adapter); if (err) goto err_out; for (i = 0; i < adapter->num_q_vectors; i++) { struct igb_q_vector *q_vector = adapter->q_vector[i]; vector++; q_vector->itr_register = hw->hw_addr + E1000_EITR(vector); if (q_vector->rx.ring && q_vector->tx.ring) sprintf(q_vector->name, \"%s-TxRx-%u\", netdev->name, q_vector->rx.ring->queue_index); else if (q_vector->tx.ring) sprintf(q_vector->name, \"%s-tx-%u\", netdev->name, q_vector->tx.ring->queue_index); else if (q_vector->rx.ring) sprintf(q_vector->name, \"%s-rx-%u\", netdev->name, q_vector->rx.ring->queue_index); else sprintf(q_vector->name, \"%s-unused\", netdev->name); err = request_irq(adapter->msix_entries[vector].vector, igb_msix_ring, 0, q_vector->name, q_vector); if (err) goto err_free; } igb_configure_msix(adapter); return 0; err_free: /* free already assigned IRQs */ free_irq(adapter->msix_entries[free_vector++].vector, adapter); vector--; for (i = 0; i < vector; i++) { free_irq(adapter->msix_entries[free_vector++].vector, adapter->q_vector[i]); } err_out: return err; } 2 \u786c\u4e2d\u65ad\u5904\u7406\u51fd\u6570 \u6839\u636e err = request_irq(adapter->msix_entries[vector].vector,igb_msix_ring, 0, q_vector->name, \u5f97\u77e5, \u786c\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u4e3a igb_msix_ring \u51fd\u6570 \u5177\u4f53 static irqreturn_t igb_msix_ring(int irq, void *data) { struct igb_q_vector *q_vector = data; /* Write the ITR value calculated from the previous interrupt. */ igb_write_itr(q_vector); napi_schedule(&q_vector->napi); return IRQ_HANDLED; } 3 igb_poll igb_poll \u51fd\u6570\u5176\u5b9e\u5728 net_rx_action \u548c net_tx_action \u51fd\u6570\u4e2d\u90fd\u4f1a\u88ab\u8c03\u7528 /** * igb_poll - NAPI Rx polling callback * @napi: napi polling structure * @budget: count of how many packets we should handle **/ static int igb_poll(struct napi_struct *napi, int budget) { struct igb_q_vector *q_vector = container_of(napi, struct igb_q_vector, napi); bool clean_complete = true; #ifdef CONFIG_IGB_DCA if (q_vector->adapter->flags & IGB_FLAG_DCA_ENABLED) igb_update_dca(q_vector); #endif if (q_vector->tx.ring) clean_complete = igb_clean_tx_irq(q_vector); if (q_vector->rx.ring) clean_complete &= igb_clean_rx_irq(q_vector, budget); /* If all work not completed, return budget and keep polling */ if (!clean_complete) return budget; /* If not enough Rx work done, exit the polling mode */ napi_complete(napi); igb_ring_irq_enable(q_vector); return 0; } 4 \u5177\u4f53\u9a71\u52a8\u51fd\u6570 \u53d1\u9001 static void igb_tx_map(struct igb_ring *tx_ring, struct igb_tx_buffer *first, const u8 hdr_len) { struct sk_buff *skb = first->skb; struct igb_tx_buffer *tx_buffer; union e1000_adv_tx_desc *tx_desc; struct skb_frag_struct *frag; dma_addr_t dma; unsigned int data_len, size; u32 tx_flags = first->tx_flags; u32 cmd_type = igb_tx_cmd_type(skb, tx_flags); u16 i = tx_ring->next_to_use; tx_desc = IGB_TX_DESC(tx_ring, i); igb_tx_olinfo_status(tx_ring, tx_desc, tx_flags, skb->len - hdr_len); size = skb_headlen(skb); data_len = skb->data_len; dma = dma_map_single(tx_ring->dev, skb->data, size, DMA_TO_DEVICE); tx_buffer = first; for (frag = &skb_shinfo(skb)->frags[0];; frag++) { if (dma_mapping_error(tx_ring->dev, dma)) goto dma_error; /* record length, and DMA address */ dma_unmap_len_set(tx_buffer, len, size); dma_unmap_addr_set(tx_buffer, dma, dma); tx_desc->read.buffer_addr = cpu_to_le64(dma); while (unlikely(size > IGB_MAX_DATA_PER_TXD)) { tx_desc->read.cmd_type_len = cpu_to_le32(cmd_type ^ IGB_MAX_DATA_PER_TXD); i++; tx_desc++; if (i == tx_ring->count) { tx_desc = IGB_TX_DESC(tx_ring, 0); i = 0; } tx_desc->read.olinfo_status = 0; dma += IGB_MAX_DATA_PER_TXD; size -= IGB_MAX_DATA_PER_TXD; tx_desc->read.buffer_addr = cpu_to_le64(dma); } if (likely(!data_len)) break; tx_desc->read.cmd_type_len = cpu_to_le32(cmd_type ^ size); i++; tx_desc++; if (i == tx_ring->count) { tx_desc = IGB_TX_DESC(tx_ring, 0); i = 0; } tx_desc->read.olinfo_status = 0; size = skb_frag_size(frag); data_len -= size; dma = skb_frag_dma_map(tx_ring->dev, frag, 0, size, DMA_TO_DEVICE); tx_buffer = &tx_ring->tx_buffer_info[i]; } /* write last descriptor with RS and EOP bits */ cmd_type |= size | IGB_TXD_DCMD; tx_desc->read.cmd_type_len = cpu_to_le32(cmd_type); netdev_tx_sent_queue(txring_txq(tx_ring), first->bytecount); /* set the timestamp */ first->time_stamp = jiffies; /* Force memory writes to complete before letting h/w know there * are new descriptors to fetch. (Only applicable for weak-ordered * memory model archs, such as IA-64). * * We also need this memory barrier to make certain all of the * status bits have been updated before next_to_watch is written. */ wmb(); /* set next_to_watch value indicating a packet is present */ first->next_to_watch = tx_desc; i++; if (i == tx_ring->count) i = 0; tx_ring->next_to_use = i; writel(i, tx_ring->tail); /* we need this if more than one processor can write to our tail * at a time, it synchronizes IO on IA64/Altix systems */ mmiowb(); return; dma_error: dev_err(tx_ring->dev, \"TX DMA map failed\\n\"); /* clear dma mappings for failed tx_buffer_info map */ for (;;) { tx_buffer = &tx_ring->tx_buffer_info[i]; igb_unmap_and_free_tx_resource(tx_ring, tx_buffer); if (tx_buffer == first) break; if (i == 0) i = tx_ring->count; i--; } tx_ring->next_to_use = i; } \u53ef\u4ee5\u770b\u5230\u91cc\u9762\u6700\u7ec8\u4e5f\u8fd8\u662f\u5199\u4e86\u5bc4\u5b58\u5668: wmb() \u53c2\u8003 i350 \u7f51\u5361\u9a71\u52a8\u786c\u4ef6\u539f\u7406\u548c\u8f6f\u4ef6\u5b9e\u73b0","title":"\u7b2c\u5341\u4e00\u7bc7 igb\u7f51\u5361\u9a71\u52a8\u68b3\u7406"},{"location":"chapter_3/11_igb/#_1","text":"","title":"\u6982\u8ff0"},{"location":"chapter_3/11_igb/#_2","text":"","title":"\u6838\u5fc3\u6570\u636e\u7ed3\u6784"},{"location":"chapter_3/11_igb/#1-struct-igb_adapter","text":"/* board specific private data structure */ struct igb_adapter { unsigned long active_vlans[BITS_TO_LONGS(VLAN_N_VID)]; struct net_device *netdev; unsigned long state; unsigned int flags; unsigned int num_q_vectors; struct msix_entry msix_entries[MAX_MSIX_ENTRIES]; /* Interrupt Throttle Rate */ u32 rx_itr_setting; u32 tx_itr_setting; u16 tx_itr; u16 rx_itr; /* TX */ u16 tx_work_limit; u32 tx_timeout_count; int num_tx_queues; struct igb_ring *tx_ring[16]; /* RX */ int num_rx_queues; struct igb_ring *rx_ring[16]; u32 max_frame_size; u32 min_frame_size; struct timer_list watchdog_timer; struct timer_list phy_info_timer; u16 mng_vlan_id; u32 bd_number; u32 wol; u32 en_mng_pt; u16 link_speed; u16 link_duplex; struct work_struct reset_task; struct work_struct watchdog_task; bool fc_autoneg; u8 tx_timeout_factor; struct timer_list blink_timer; unsigned long led_status; /* OS defined structs */ struct pci_dev *pdev; spinlock_t stats64_lock; struct rtnl_link_stats64 stats64; /* structs defined in e1000_hw.h */ struct e1000_hw hw; struct e1000_hw_stats stats; struct e1000_phy_info phy_info; struct e1000_phy_stats phy_stats; u32 test_icr; struct igb_ring test_tx_ring; struct igb_ring test_rx_ring; int msg_enable; struct igb_q_vector *q_vector[MAX_Q_VECTORS]; u32 eims_enable_mask; u32 eims_other; /* to not mess up cache alignment, always add to the bottom */ u16 tx_ring_count; u16 rx_ring_count; unsigned int vfs_allocated_count; struct vf_data_storage *vf_data; int vf_rate_link_speed; u32 rss_queues; u32 wvbr; u32 *shadow_vfta; struct ptp_clock *ptp_clock; struct ptp_clock_info ptp_caps; struct delayed_work ptp_overflow_work; struct work_struct ptp_tx_work; struct sk_buff *ptp_tx_skb; struct hwtstamp_config tstamp_config; unsigned long ptp_tx_start; unsigned long last_rx_ptp_check; unsigned long last_rx_timestamp; spinlock_t tmreg_lock; struct cyclecounter cc; struct timecounter tc; u32 tx_hwtstamp_timeouts; u32 rx_hwtstamp_cleared; char fw_version[32]; #ifdef CONFIG_IGB_HWMON struct hwmon_buff *igb_hwmon_buff; bool ets; #endif struct i2c_algo_bit_data i2c_algo; struct i2c_adapter i2c_adap; struct i2c_client *i2c_client; u32 rss_indir_tbl_init; u8 rss_indir_tbl[IGB_RETA_SIZE]; unsigned long link_check_timeout; int copper_tries; struct e1000_info ei; u16 eee_advert; };","title":"1 \u7f51\u5361 struct igb_adapter"},{"location":"chapter_3/11_igb/#2-buffer","text":"struct igb_tx_buffer { union e1000_adv_tx_desc *next_to_watch; unsigned long time_stamp; struct sk_buff *skb; unsigned int bytecount; u16 gso_segs; __be16 protocol; DEFINE_DMA_UNMAP_ADDR(dma); DEFINE_DMA_UNMAP_LEN(len); u32 tx_flags; }; struct igb_rx_buffer { dma_addr_t dma; struct page *page; unsigned int page_offset; };","title":"2 \u53d1\u9001\u548c\u63a5\u6536 buffer(\u5355\u4e2a)"},{"location":"chapter_3/11_igb/#3-struct-igb_q_vector","text":"\u4e5f\u53ef\u4ee5\u662f\u591a\u961f\u5217\u7f51\u5361\u91cc\u7684\u4e00\u4e2a\u961f\u5217 \u53d1\u5305\u961f\u5217\u4e2d\u7ef4\u62a4\u4e86 256 \u4e2a\u53d1\u5305 buffer\uff08struct igb_tx_buffer\uff09 \u6bcf\u4e2a igb_q_vector \u5bf9\u5e94\u4e00\u4e2a\u786c\u4e2d\u65ad(\u6240\u4ee5 struct igb_q_vector \u5c31\u662f\u4e00\u4e2a \u7f51\u5361\u961f\u5217 ), \u5bf9\u5e94 2 \u4e2a struct igb_ring \uff08\u4e24\u4e2a\u73af\u5f62\u7f13\u51b2\u533a\uff09, \u5176\u4e2d\u4e00\u4e2a\u7528\u4e8e \u53d1\u9001 \u3001\u4e00\u4e2a\u7528\u4e8e \u63a5\u6536 \u6bcf\u4e2a\u7f51\u5361\uff08struct igb_adapter\uff09\u6709 MAX_Q_VECTORS(\u9ed8\u8ba4\u662f 8) \u4e2a struct igb_q_vector struct igb_ring \u662f\u6838\u5fc3\uff0c struct igb_ring_container \u53ea\u662f\u4e00\u4e2a\u5916\u5305\u88c5. \u6bcf\u4e2a struct igb_ring \u662f\u5c31\u662f\u4e00\u4e2a RingBuffer , \u6bcf\u4e2a RingBuffer \u8981\u4e48\u662f\u7528\u4e8e\u53d1\u9001\u8981\u4e48\u662f\u7528\u4e8e\u63a5\u6536. struct igb_q_vector { struct igb_adapter *adapter; /* backlink */ int cpu; /* CPU for DCA */ u32 eims_value; /* EIMS mask value */ u16 itr_val; u8 set_itr; void __iomem *itr_register; struct igb_ring_container rx, tx; struct napi_struct napi; struct rcu_head rcu; /* to avoid race with update stats on free */ char name[IFNAMSIZ + 9]; /* for dynamic allocation of rings associated with this q_vector */ struct igb_ring ring[0] ____cacheline_internodealigned_in_smp; }; struct igb_ring_container { struct igb_ring *ring; /* pointer to linked list of rings */ unsigned int total_bytes; /* total bytes processed this int */ unsigned int total_packets; /* total packets processed this int */ u16 work_limit; /* total work allowed per interrupt */ u8 count; /* total number of rings in vector */ u8 itr; /* current ITR setting for ring */ }; struct igb_ring { struct igb_q_vector *q_vector; /* backlink to q_vector */ struct net_device *netdev; /* back pointer to net_device */ struct device *dev; /* device pointer for dma mapping */ union { /* array of buffer info structs */ struct igb_tx_buffer *tx_buffer_info; struct igb_rx_buffer *rx_buffer_info; }; void *desc; /* descriptor ring memory*/ /* \u5927\u5c0f\u4e3asize\u7684DMA\u5185\u5b58\u533a*/ unsigned long flags; /* ring specific flags */ void __iomem *tail; /* pointer to ring tail register */ dma_addr_t dma; /* phys address of the ring */ unsigned int size; /* length of desc. ring in bytes */ u16 count; /* number of desc. in the ring */ /*256\u4e2a*/ u8 queue_index; /* logical index of the ring*/ u8 reg_idx; /* physical index of the ring */ /* everything past this point are written often */ u16 next_to_clean; u16 next_to_use; u16 next_to_alloc; union { /* TX */ struct { struct igb_tx_queue_stats tx_stats; struct u64_stats_sync tx_syncp; struct u64_stats_sync tx_syncp2; }; /* RX */ struct { struct sk_buff *skb; struct igb_rx_queue_stats rx_stats; struct u64_stats_sync rx_syncp; }; }; } ____cacheline_internodealigned_in_smp;","title":"3 \u7f51\u5361\u4e2d\u65ad\u63cf\u8ff0\u7b26\u6570\u636e\u7ed3\u6784 struct igb_q_vector"},{"location":"chapter_3/11_igb/#4-dma","text":"DMA \u63cf\u8ff0\u7b26\uff08union e1000_adv_tx_desc\uff09 \u4e0a\u56fe\u4e2d,\u6bcf\u4e2a RingBuffer \u5185\u90e8(\u6bcf\u4e2a struct igb_ring \u5185\u90e8)\u6709\u4e00\u4e2a igb_t(r)x_buffer \u6570\u7ec4 \u548c\u4e00\u4e2a e1000_adv_tx_desc \u6570\u7ec4 , \u5176\u4e2d e1000_adv_tx_desc \u6570\u7ec4 \u4e2d\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\u5c31\u662f\u4e00\u4e2a DMA \u63cf\u8ff0\u7b26","title":"4 DMA \u63cf\u8ff0\u7b26"},{"location":"chapter_3/11_igb/#5-net_device_ops","text":"drivers/net/ethernet/intel/igb/igb_main.c:2080:static const struct net_device_ops igb_netdev_ops = {","title":"5 \u5bf9\u4e0a\u5c42\u63d0\u4f9b net_device_ops"},{"location":"chapter_3/11_igb/#_3","text":"","title":"\u6838\u5fc3\u51fd\u6570"},{"location":"chapter_3/11_igb/#1","text":"igb_request_msix drivers/net/ethernet/intel/igb/igb_main.c /** * igb_request_msix - Initialize MSI-X interrupts * @adapter: board private structure to initialize * * igb_request_msix allocates MSI-X vectors and requests interrupts from the * kernel. **/ static int igb_request_msix(struct igb_adapter *adapter) { struct net_device *netdev = adapter->netdev; struct e1000_hw *hw = &adapter->hw; int i, err = 0, vector = 0, free_vector = 0; err = request_irq(adapter->msix_entries[vector].vector, igb_msix_other, 0, netdev->name, adapter); if (err) goto err_out; for (i = 0; i < adapter->num_q_vectors; i++) { struct igb_q_vector *q_vector = adapter->q_vector[i]; vector++; q_vector->itr_register = hw->hw_addr + E1000_EITR(vector); if (q_vector->rx.ring && q_vector->tx.ring) sprintf(q_vector->name, \"%s-TxRx-%u\", netdev->name, q_vector->rx.ring->queue_index); else if (q_vector->tx.ring) sprintf(q_vector->name, \"%s-tx-%u\", netdev->name, q_vector->tx.ring->queue_index); else if (q_vector->rx.ring) sprintf(q_vector->name, \"%s-rx-%u\", netdev->name, q_vector->rx.ring->queue_index); else sprintf(q_vector->name, \"%s-unused\", netdev->name); err = request_irq(adapter->msix_entries[vector].vector, igb_msix_ring, 0, q_vector->name, q_vector); if (err) goto err_free; } igb_configure_msix(adapter); return 0; err_free: /* free already assigned IRQs */ free_irq(adapter->msix_entries[free_vector++].vector, adapter); vector--; for (i = 0; i < vector; i++) { free_irq(adapter->msix_entries[free_vector++].vector, adapter->q_vector[i]); } err_out: return err; }","title":"1 \u786c\u4e2d\u65ad\u6ce8\u518c"},{"location":"chapter_3/11_igb/#2","text":"\u6839\u636e err = request_irq(adapter->msix_entries[vector].vector,igb_msix_ring, 0, q_vector->name, \u5f97\u77e5, \u786c\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u4e3a igb_msix_ring \u51fd\u6570 \u5177\u4f53 static irqreturn_t igb_msix_ring(int irq, void *data) { struct igb_q_vector *q_vector = data; /* Write the ITR value calculated from the previous interrupt. */ igb_write_itr(q_vector); napi_schedule(&q_vector->napi); return IRQ_HANDLED; }","title":"2 \u786c\u4e2d\u65ad\u5904\u7406\u51fd\u6570"},{"location":"chapter_3/11_igb/#3-igb_poll","text":"igb_poll \u51fd\u6570\u5176\u5b9e\u5728 net_rx_action \u548c net_tx_action \u51fd\u6570\u4e2d\u90fd\u4f1a\u88ab\u8c03\u7528 /** * igb_poll - NAPI Rx polling callback * @napi: napi polling structure * @budget: count of how many packets we should handle **/ static int igb_poll(struct napi_struct *napi, int budget) { struct igb_q_vector *q_vector = container_of(napi, struct igb_q_vector, napi); bool clean_complete = true; #ifdef CONFIG_IGB_DCA if (q_vector->adapter->flags & IGB_FLAG_DCA_ENABLED) igb_update_dca(q_vector); #endif if (q_vector->tx.ring) clean_complete = igb_clean_tx_irq(q_vector); if (q_vector->rx.ring) clean_complete &= igb_clean_rx_irq(q_vector, budget); /* If all work not completed, return budget and keep polling */ if (!clean_complete) return budget; /* If not enough Rx work done, exit the polling mode */ napi_complete(napi); igb_ring_irq_enable(q_vector); return 0; }","title":"3 igb_poll"},{"location":"chapter_3/11_igb/#4","text":"\u53d1\u9001 static void igb_tx_map(struct igb_ring *tx_ring, struct igb_tx_buffer *first, const u8 hdr_len) { struct sk_buff *skb = first->skb; struct igb_tx_buffer *tx_buffer; union e1000_adv_tx_desc *tx_desc; struct skb_frag_struct *frag; dma_addr_t dma; unsigned int data_len, size; u32 tx_flags = first->tx_flags; u32 cmd_type = igb_tx_cmd_type(skb, tx_flags); u16 i = tx_ring->next_to_use; tx_desc = IGB_TX_DESC(tx_ring, i); igb_tx_olinfo_status(tx_ring, tx_desc, tx_flags, skb->len - hdr_len); size = skb_headlen(skb); data_len = skb->data_len; dma = dma_map_single(tx_ring->dev, skb->data, size, DMA_TO_DEVICE); tx_buffer = first; for (frag = &skb_shinfo(skb)->frags[0];; frag++) { if (dma_mapping_error(tx_ring->dev, dma)) goto dma_error; /* record length, and DMA address */ dma_unmap_len_set(tx_buffer, len, size); dma_unmap_addr_set(tx_buffer, dma, dma); tx_desc->read.buffer_addr = cpu_to_le64(dma); while (unlikely(size > IGB_MAX_DATA_PER_TXD)) { tx_desc->read.cmd_type_len = cpu_to_le32(cmd_type ^ IGB_MAX_DATA_PER_TXD); i++; tx_desc++; if (i == tx_ring->count) { tx_desc = IGB_TX_DESC(tx_ring, 0); i = 0; } tx_desc->read.olinfo_status = 0; dma += IGB_MAX_DATA_PER_TXD; size -= IGB_MAX_DATA_PER_TXD; tx_desc->read.buffer_addr = cpu_to_le64(dma); } if (likely(!data_len)) break; tx_desc->read.cmd_type_len = cpu_to_le32(cmd_type ^ size); i++; tx_desc++; if (i == tx_ring->count) { tx_desc = IGB_TX_DESC(tx_ring, 0); i = 0; } tx_desc->read.olinfo_status = 0; size = skb_frag_size(frag); data_len -= size; dma = skb_frag_dma_map(tx_ring->dev, frag, 0, size, DMA_TO_DEVICE); tx_buffer = &tx_ring->tx_buffer_info[i]; } /* write last descriptor with RS and EOP bits */ cmd_type |= size | IGB_TXD_DCMD; tx_desc->read.cmd_type_len = cpu_to_le32(cmd_type); netdev_tx_sent_queue(txring_txq(tx_ring), first->bytecount); /* set the timestamp */ first->time_stamp = jiffies; /* Force memory writes to complete before letting h/w know there * are new descriptors to fetch. (Only applicable for weak-ordered * memory model archs, such as IA-64). * * We also need this memory barrier to make certain all of the * status bits have been updated before next_to_watch is written. */ wmb(); /* set next_to_watch value indicating a packet is present */ first->next_to_watch = tx_desc; i++; if (i == tx_ring->count) i = 0; tx_ring->next_to_use = i; writel(i, tx_ring->tail); /* we need this if more than one processor can write to our tail * at a time, it synchronizes IO on IA64/Altix systems */ mmiowb(); return; dma_error: dev_err(tx_ring->dev, \"TX DMA map failed\\n\"); /* clear dma mappings for failed tx_buffer_info map */ for (;;) { tx_buffer = &tx_ring->tx_buffer_info[i]; igb_unmap_and_free_tx_resource(tx_ring, tx_buffer); if (tx_buffer == first) break; if (i == 0) i = tx_ring->count; i--; } tx_ring->next_to_use = i; } \u53ef\u4ee5\u770b\u5230\u91cc\u9762\u6700\u7ec8\u4e5f\u8fd8\u662f\u5199\u4e86\u5bc4\u5b58\u5668: wmb()","title":"4 \u5177\u4f53\u9a71\u52a8\u51fd\u6570"},{"location":"chapter_3/11_igb/#_4","text":"i350 \u7f51\u5361\u9a71\u52a8\u786c\u4ef6\u539f\u7406\u548c\u8f6f\u4ef6\u5b9e\u73b0","title":"\u53c2\u8003"},{"location":"chapter_3/12_rss_rps_rfs_xps/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3\u7f51\u5361\u7684\u5404\u7c7b\u7279\u6027: RSS RPS RFS XPS \u5c55\u5f00 RSS(Receive Side Scaling) \u7f51\u5361\u591a\u961f\u5217 , \u9700\u8981\u786c\u4ef6\u652f\u6301\u3002\u7f51\u5361\u63a5\u6536\u5230\u7f51\u7edc\u6570\u636e\u5305\u4e4b\u540e\uff0c\u8981\u53d1\u9001\u4e00\u4e2a\u786c\u4ef6\u4e2d\u65ad\uff0c\u901a\u77e5 CPU \u53d6\u6570\u636e\u5305\u3002\u9ed8\u8ba4\u914d\u7f6e\uff0c\u90fd\u662f\u7531 CPU0 \u53bb\u505a\u3002 RPS(Receive Packet Steering) RPS \u5168\u79f0\u662f Receive Packet Steering,\u91c7\u7528\u8f6f\u4ef6\u6a21\u62df\u7684\u65b9\u5f0f\uff0c\u5b9e\u73b0\u4e86\u591a\u961f\u5217\u7f51\u5361\u6240\u63d0\u4f9b\u7684\u529f\u80fd\uff0c\u5206\u6563\u4e86\u5728\u591a CPU \u7cfb\u7edf\u4e0a\u6570\u636e\u63a5\u6536\u65f6\u7684\u8f6f\u4e2d\u65ad\u8d1f\u8f7d, \u628a\u8f6f\u4e2d\u65ad\u5206\u5230\u5404\u4e2a CPU \u5904\u7406\uff0c\u800c\u4e0d\u9700\u8981\u786c\u4ef6\u652f\u6301\uff0c\u5728\u591a\u6838 CPU \u548c\u5355\u961f\u5217\u7f51\u5361\u7684\u60c5\u51b5\u4e0b\uff0c\u5f00\u542f RPS \u53ef\u4ee5\u5927\u5927\u63d0\u5347\u7f51\u7edc\u6027\u80fd. \u5982\u679c\u7cfb\u7edf\u5f00\u4e86 RPS,\u6570\u636e\u5305\u4f1a\u88ab\u7f13\u51b2\u5728 TCP \u5c42\u4e4b\u524d\u7684\u961f\u5217\u4e2d,\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 net.core.netdev_max_backlog \u9002\u5f53\u52a0\u5927\u8fd9\u4e2a\u961f\u5217\u7684\u957f\u5ea6\uff0c\u4ee5\u4fdd\u8bc1\u4e0a\u5c42\u7684\u5904\u7406\u65f6\u95f4. RFS(Receive Flow Steering) RPS \u8fd8\u6709\u4e2a\u95ee\u9898\uff0c\u7531\u4e8e RPS \u53ea\u662f\u628a\u6570\u636e\u5305\u5747\u8861\u5230\u4e0d\u540c\u7684 cpu\uff0c\u4f46\u662f\u6536\u5305\u7684\u5e94\u7528\u7a0b\u5e8f\u548c\u8f6f\u4e2d\u65ad\u5904\u7406\u4e0d\u4e00\u5b9a\u662f\u5728\u540c\u4e00\u4e2a CPU\uff0c\u8fd9\u6837\u5bf9\u4e8e cpu cache \u7684\u5f71\u54cd\u4f1a\u5f88\u5927\u3002\u56e0\u6b64\u5c31\u51fa\u73b0 RFS\uff08Receive flow steering\uff09\uff0c\u5b83\u786e\u4fdd\u5e94\u7528\u7a0b\u5e8f\u548c\u8f6f\u4e2d\u65ad\u5904\u7406\u7684 cpu \u662f\u540c\u4e00\u4e2a\uff0c\u4ece\u800c\u80fd\u5145\u5206\u5229\u7528 cpu \u7684 cache\uff0c\u8fd9\u4e24\u4e2a\u8865\u4e01\u5f80\u5f80\u90fd\u662f\u4e00\u8d77\u8bbe\u7f6e\uff0c\u4ee5\u8fbe\u5230\u6700\u597d\u7684\u4f18\u5316\u6548\u679c\u3002 \u7ef4\u62a4\u4e24\u5f20 hash \u8868\uff0c\u5b9e\u73b0\u5c06\u8f6f\u4e2d\u65ad\u5206\u6563\u5230\u591a\u9897 CPU \u53bb\u5904\u7406\u3002 XPS(Transmit Packet Steering) XPS \u901a\u8fc7\u521b\u5efa CPU \u5230\u7f51\u5361\u53d1\u9001\u961f\u5217\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u6765\u4fdd\u8bc1\u5904\u7406 \u53d1\u9001\u8f6f\u4e2d\u65ad\u8bf7\u6c42\u7684 CPU \u548c \u5411\u5916\u53d1\u9001\u6570\u636e\u5305\u7684 CPU \u662f\u540c\u4e00\u4e2a CPU\uff0c\u7528\u6765\u4fdd\u8bc1\u53d1\u9001\u6570\u636e\u5305\u65f6\u5019\u7684\u5c40\u90e8\u6027\u3002 \u53c2\u8003 Linux RSS/RPS/RFS/XPS \u591a\u961f\u5217\u7f51\u5361\u53ca RPS/RFS/XPS \u8bbe\u7f6e","title":"\u7b2c\u5341\u4e8c\u7bc7 Linux\u7f51\u5361rss\u548crps\u548crfs\u548cxps"},{"location":"chapter_3/12_rss_rps_rfs_xps/#_1","text":"\u672c\u7bc7\u603b\u7ed3\u7f51\u5361\u7684\u5404\u7c7b\u7279\u6027: RSS RPS RFS XPS","title":"\u6982\u8ff0"},{"location":"chapter_3/12_rss_rps_rfs_xps/#_2","text":"","title":"\u5c55\u5f00"},{"location":"chapter_3/12_rss_rps_rfs_xps/#rssreceive-side-scaling","text":"\u7f51\u5361\u591a\u961f\u5217 , \u9700\u8981\u786c\u4ef6\u652f\u6301\u3002\u7f51\u5361\u63a5\u6536\u5230\u7f51\u7edc\u6570\u636e\u5305\u4e4b\u540e\uff0c\u8981\u53d1\u9001\u4e00\u4e2a\u786c\u4ef6\u4e2d\u65ad\uff0c\u901a\u77e5 CPU \u53d6\u6570\u636e\u5305\u3002\u9ed8\u8ba4\u914d\u7f6e\uff0c\u90fd\u662f\u7531 CPU0 \u53bb\u505a\u3002","title":"RSS(Receive Side Scaling)"},{"location":"chapter_3/12_rss_rps_rfs_xps/#rpsreceive-packet-steering","text":"RPS \u5168\u79f0\u662f Receive Packet Steering,\u91c7\u7528\u8f6f\u4ef6\u6a21\u62df\u7684\u65b9\u5f0f\uff0c\u5b9e\u73b0\u4e86\u591a\u961f\u5217\u7f51\u5361\u6240\u63d0\u4f9b\u7684\u529f\u80fd\uff0c\u5206\u6563\u4e86\u5728\u591a CPU \u7cfb\u7edf\u4e0a\u6570\u636e\u63a5\u6536\u65f6\u7684\u8f6f\u4e2d\u65ad\u8d1f\u8f7d, \u628a\u8f6f\u4e2d\u65ad\u5206\u5230\u5404\u4e2a CPU \u5904\u7406\uff0c\u800c\u4e0d\u9700\u8981\u786c\u4ef6\u652f\u6301\uff0c\u5728\u591a\u6838 CPU \u548c\u5355\u961f\u5217\u7f51\u5361\u7684\u60c5\u51b5\u4e0b\uff0c\u5f00\u542f RPS \u53ef\u4ee5\u5927\u5927\u63d0\u5347\u7f51\u7edc\u6027\u80fd. \u5982\u679c\u7cfb\u7edf\u5f00\u4e86 RPS,\u6570\u636e\u5305\u4f1a\u88ab\u7f13\u51b2\u5728 TCP \u5c42\u4e4b\u524d\u7684\u961f\u5217\u4e2d,\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 net.core.netdev_max_backlog \u9002\u5f53\u52a0\u5927\u8fd9\u4e2a\u961f\u5217\u7684\u957f\u5ea6\uff0c\u4ee5\u4fdd\u8bc1\u4e0a\u5c42\u7684\u5904\u7406\u65f6\u95f4.","title":"RPS(Receive Packet Steering)"},{"location":"chapter_3/12_rss_rps_rfs_xps/#rfsreceive-flow-steering","text":"RPS \u8fd8\u6709\u4e2a\u95ee\u9898\uff0c\u7531\u4e8e RPS \u53ea\u662f\u628a\u6570\u636e\u5305\u5747\u8861\u5230\u4e0d\u540c\u7684 cpu\uff0c\u4f46\u662f\u6536\u5305\u7684\u5e94\u7528\u7a0b\u5e8f\u548c\u8f6f\u4e2d\u65ad\u5904\u7406\u4e0d\u4e00\u5b9a\u662f\u5728\u540c\u4e00\u4e2a CPU\uff0c\u8fd9\u6837\u5bf9\u4e8e cpu cache \u7684\u5f71\u54cd\u4f1a\u5f88\u5927\u3002\u56e0\u6b64\u5c31\u51fa\u73b0 RFS\uff08Receive flow steering\uff09\uff0c\u5b83\u786e\u4fdd\u5e94\u7528\u7a0b\u5e8f\u548c\u8f6f\u4e2d\u65ad\u5904\u7406\u7684 cpu \u662f\u540c\u4e00\u4e2a\uff0c\u4ece\u800c\u80fd\u5145\u5206\u5229\u7528 cpu \u7684 cache\uff0c\u8fd9\u4e24\u4e2a\u8865\u4e01\u5f80\u5f80\u90fd\u662f\u4e00\u8d77\u8bbe\u7f6e\uff0c\u4ee5\u8fbe\u5230\u6700\u597d\u7684\u4f18\u5316\u6548\u679c\u3002 \u7ef4\u62a4\u4e24\u5f20 hash \u8868\uff0c\u5b9e\u73b0\u5c06\u8f6f\u4e2d\u65ad\u5206\u6563\u5230\u591a\u9897 CPU \u53bb\u5904\u7406\u3002","title":"RFS(Receive Flow Steering)"},{"location":"chapter_3/12_rss_rps_rfs_xps/#xpstransmit-packet-steering","text":"XPS \u901a\u8fc7\u521b\u5efa CPU \u5230\u7f51\u5361\u53d1\u9001\u961f\u5217\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u6765\u4fdd\u8bc1\u5904\u7406 \u53d1\u9001\u8f6f\u4e2d\u65ad\u8bf7\u6c42\u7684 CPU \u548c \u5411\u5916\u53d1\u9001\u6570\u636e\u5305\u7684 CPU \u662f\u540c\u4e00\u4e2a CPU\uff0c\u7528\u6765\u4fdd\u8bc1\u53d1\u9001\u6570\u636e\u5305\u65f6\u5019\u7684\u5c40\u90e8\u6027\u3002","title":"XPS(Transmit Packet Steering)"},{"location":"chapter_3/12_rss_rps_rfs_xps/#_3","text":"Linux RSS/RPS/RFS/XPS \u591a\u961f\u5217\u7f51\u5361\u53ca RPS/RFS/XPS \u8bbe\u7f6e","title":"\u53c2\u8003"},{"location":"chapter_3/1_linux_kernel_net/","text":"\u4e00 Linux\u6570\u636e\u5305\u63a5\u6536\u7684\u5b8c\u6574\u8def\u5f84\u68b3\u7406 \u7f51\u5361Driver\u5c42\u9762 1.1 \u7f51\u5361\u63a5\u6536\u5230\u6570\u636e\u5305 1.2 \u5c06\u6570\u636e\u5305\u4ece\u7f51\u5361\u786c\u4ef6\u8f6c\u79fb\u5230\u4e3b\u673a\u5185\u5b58\u4e2d. \u5185\u6838\u5c42\u9762 2.1 TCP/IP \u534f\u8bae\u9010\u5c42\u5904\u7406 \u5e94\u7528\u7a0b\u5e8f\u5c42\u9762 3.1 \u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7read()\u7cfb\u7edf\u8c03\u7528,\u4ecesocket buffer\u8bfb\u53d6\u6570\u636e \u901a\u8fc72\u5e45\u56fe\u6765\u5c55\u793a\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b: \u603b\u4f53\u8bf4\u660e\u7684\u56fe \u8be6\u7ec6\u7684\u56fe \u4e8c \u4f5c\u4e3a\u8fd0\u7ef4,\u53ef\u4ee5\u505a\u54ea\u4e9b\u8c03\u4f18 (\u4e00) \u7f51\u5361Driver\u5c42\u9762 Driver\u4f1a\u63d0\u524d\u7533\u8bf7\u597d\u4e00\u7247\u5185\u5b58\u533a\u57df,\u4f5c\u4e3a\u7f13\u51b2\u533a\u6765\u63a5\u6536\u6570\u636e\u5305.\u53eb\u505ask_buffer(socket kernel buffers) \u6362\u4e00\u79cd\u8bf4\u6cd5: Linux\u5185\u6838\u4f7f\u7528sk_buff(socket kernel buffers)\u6570\u636e\u7ed3\u6784\u63cf\u8ff0\u4e00\u4e2a\u6570\u636e\u5305\u3002 \u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u4e3a\u8fd9\u7247\u7f13\u51b2\u533a\u8db3\u591f\u5927(\u5b9e\u9645\u4e0a,\u73b0\u4ee3\u7684Linux\u670d\u52a1\u5668\u5185\u5b58\u90fd\u8db3\u591f\u5927,\u591f\u5b58\u653e\u8fd9\u4e9b\u6570\u636e\u5305\u4e86) Ring Buffer \u7f51\u5361\u73af\u72b6\u7f13\u51b2\u533a. \u53ef\u4ee5\u7406\u89e3\u4e3a\u7f51\u5361\u7684\u7f13\u5b58. \u8fd9\u7247\u533a\u57df\u7684\u5927\u5c0f\u662f\u7f51\u5361\u5382\u5546\u51b3\u5b9a\u7684(\u4e0d\u540c\u7684\u7f51\u5361\u5382\u5546\u3001\u4e0d\u540c\u7cfb\u5217\u7684\u7f51\u5361\u90fd\u662f\u6709\u533a\u522b\u7684)\uff0c\u5e76\u4e14\u5927\u5c0f\u4e0d\u80fd\u968f\u610f\u8c03\u6574,\u6216\u8005\u8bf4\u5b83\u7684\u5927\u5c0f\u662f\u56fa\u5b9a\u7684\u3002 \u4f46\u662f\u5c31\u50cf\u5bb6\u7528\u5439\u98ce\u673a\u53ef\u4ee5\u5f00\u5927\u6863\u548c\u5c0f\u6321\u4e00\u6837\uff08\u5927\u6863\u98ce\u5927\uff0c\u5c0f\u6863\u98ce\u5c0f\uff09\uff0cRing Buffer\u4e5f\u53ef\u4ee5\u8c03\u6574\u6210\u6700\u5927\u6863,\u8fd0\u7ef4\u4eba\u5458\u81f3\u5c11\u53ef\u4ee5\u628aRing Buffer\u8c03\u6574\u6210\u5927\u6863. Ring Buffer\u548c\u524d\u9762\u8bf4\u7684sk_buffer\u662f\u4ec0\u4e48\u5173\u7cfb\u5462? sk_bffer\u662f\u7528\u4e8e\u5b58\u50a8\u5b9e\u9645\u6570\u636e\u5305\u7684\uff0cRing Buffer\u7528\u4e8e\u5b58\u50a8\u5b9e\u9645\u6570\u636e\u5305\u7684\u6307\u9488 \u90a3\u4e48\u7f51\u5361Driver\u5c42\u9762\uff0c\u6574\u4e2a\u6570\u636e\u5305\u63a5\u6536\u7684\u8fc7\u7a0b\u5982\u4e0b: \u9a71\u52a8\u7a0b\u5e8f\u4e8b\u5148\u5728\u5185\u5b58\u4e2d\u5206\u914d\u4e00\u7247\u7f13\u51b2\u533a\u6765\u63a5\u6536\u6570\u636e\u5305,\u53eb\u505ask_buffer. \u5c06\u4e0a\u8ff0\u7f13\u51b2\u533a\u7684\u5730\u5740\u548c\u5927\u5c0f\uff08\u5373\u63a5\u6536\u63cf\u8ff0\u7b26\uff09\uff0c\u52a0\u5165\u5230rx ring buffer\u3002\u63cf\u8ff0\u7b26\u4e2d\u7684\u7f13\u51b2\u533a\u5730\u5740\u662fDMA\u4f7f\u7528\u7684\u7269\u7406\u5730\u5740; \u9a71\u52a8\u7a0b\u5e8f\u901a\u77e5\u7f51\u5361\u6709\u65b0\u7684\u63cf\u8ff0\u7b26(\u6216\u8005\u8bf4\u6709\u7a7a\u95f2\u53ef\u7528\u7684\u63cf\u8ff0\u7b26) \u7f51\u5361\u4ecerx ring buffer\u4e2d\u53d6\u51fa\u63cf\u8ff0\u7b26,\u4ece\u800c\u83b7\u53d6\u7f13\u51b2\u533a\u7684\u5730\u5740\u548c\u5927\u5c0f. \u5f53\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u5305\u5230\u8fbe\uff0c\u7f51\u5361(NIC)\u8c03\u7528DMA engine,(\u6b64\u65f6\u7f51\u5361\u5df2\u7ecf\u901a\u8fc7ring buffer\u7684\u63cf\u8ff0\u7b26\u77e5\u9053\u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\u4e86)\uff0c\u628a\u6570\u636e\u5305\u653e\u5165sk_buffer. \u5e76\u4e14\u6211\u731c\u6d4b\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u5305\u542b\u4e86\u7533\u8bf7\u4f7f\u7528\u63cf\u8ff0\u7b26\u548c\u91ca\u653e\u63cf\u8ff0\u7b26\u7684\u8fc7\u7a0b. \u5982\u679c\u6574\u4e2a\u8fc7\u7a0b\u6b63\u5e38,\u7f51\u5361\u4f1a\u53d1\u8d77\u4e2d\u65ad\uff0c\u901a\u77e5\u5185\u6838\u7684\u4e2d\u65ad\u7a0b\u5e8f\u5c06\u6570\u636e\u5305\u4f20\u9012\u7ed9IP\u5c42\uff0c\u8fdb\u5165TCP/IP\u534f\u8bae\u6808\u5904\u7406\uff0cTCP/IP\u534f\u8bae\u6808\u5904\u7406\u3002 \u6bcf\u4e2a\u6570\u636e\u5305\u7ecf\u8fc7TCP\u5c42\u4e00\u7cfb\u5217\u590d\u6742\u7684\u6b65\u9aa4\uff0c\u66f4\u65b0TCP\u72b6\u6001\u673a\uff0c\u6700\u7ec8\u5230\u8fbesocket\u7684recv Buffer\uff0c\u7b49\u5f85\u88ab\u5e94\u7528\u7a0b\u5e8f\u63a5\u6536\u5904\u7406\u3002\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\uff0c\u6570\u636e\u5305\u5230\u8fberecv Buffer\uff0cTCP\u5c31\u4f1a\u56deACK\u786e\u8ba4\uff0c\u65e2TCP\u7684ACK\u8868\u793a\u6570\u636e\u5305\u5df2\u7ecf\u88ab\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u6536\u5230,\u4f46\u5e76\u4e0d\u786e\u4fdd\u5e94\u7528\u5c42\u4e00\u5b9a\u6536\u5230\u6570\u636e\uff08\u4f8b\u5982\u8fd9\u4e2a\u65f6\u5019\u7cfb\u7edfcrash\uff09 \u7136\u540e,\u5185\u6838\u5e94\u8be5\u4f1a\u628a\u521a\u5360\u7528\u6389\u7684\u63cf\u8ff0\u7b26\u91cd\u65b0\u653e\u5165ring buffer\uff0c\u8fd9\u6837\u7f51\u5361\u5c31\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528\u63cf\u8ff0\u7b26\u4e86\u3002 \u4f5c\u4e3a\u8fd0\u7ef4\u4eba\u5458\uff0c\u6211\u4eec\u770b\u5230\uff0c\u8fd9\u91cc\u6700\u7b80\u5355\u7684\u4f18\u5316\u5c31\u662f\u628aring buffer\u8c03\u5230\u6700\u5927\uff0c\u7ed9\u4e0a\u5c42\uff08\u5e94\u7528\u7a0b\u5e8f\u5c42\u9762\uff09\u5c3d\u53ef\u80fd\u591a\u4e00\u70b9\u65f6\u95f4\u5904\u7406\u6570\u636e\u5305. \u53ef\u4ee5\u4f7f\u7528ethtool\u547d\u4ee4\uff0c\u8fdb\u884cRing Buffer\u7684\u67e5\u770b\u548c\u8bbe\u7f6e. 1 \u67e5\u770b\u7f51\u5361\u5f53\u524d\u7684\u8bbe\u7f6e(\u5305\u62ecRing Buffer): ethtool -g eth1 2 \u6539\u53d8Ring Buffer\u5927\u5c0f: ethtool -G eth1 rx 4096 tx 4096 (\u4e8c) TCP/IP\u534f\u8bae\u6808\u5c42\u9762 \u6b64\u65f6\u6570\u636e\u5305\u5df2\u7ecf\u63a5\u5165\u5185\u6838\u5904\u7406\u533a\u57df\uff0c\u7531\u5185\u6838\u7684TCP/IP\u534f\u8bae\u6808\u529f\u80fd\u5904\u7406 1 Ring Buffer \u5230 TCP/IP\u534f\u8bae\u6808\u4e4b\u95f4\u8fd8\u6709\u4e00\u4e2aInput Packet Queue(\u6570\u636e\u5305\u63a5\u6536\u961f\u5217) Linux\u7cfb\u7edf\u4e2d\u5e7f\u6cdb\u4f7f\u7528\u5404\u79cd\u7f13\u51b2\u6280\u80fd\uff0c\u800c\u7f13\u51b2\u6280\u80fd\u5e38\u5e38\u7531\u961f\u5217\u5b9e\u73b0\u3002 \u5f53\u63a5\u6536\u6570\u636e\u5305\u7684\u901f\u7387\u5927\u4e8e\u5185\u6838TCP\u5904\u7406\u5305\u7684\u901f\u7387\uff0c\u6570\u636e\u5305\u5c06\u4f1a\u7f13\u51b2\u5728TCP\u5c42\u4e4b\u524d\u7684\u961f\u5217\u4e2d\u3002\u63a5\u6536\u961f\u5217\u7684\u957f\u5ea6\u7531\u53c2\u6570net.core.netdev_max_backlog\u8bbe\u7f6e\u3002 \u6211\u4eec\u53ef\u4ee5\u9002\u5f53\u52a0\u5927\u8fd9\u4e2a\u503c. \u5927\u5bb6\u77e5\u9053\uff0c\u4e24\u4e2a\u57fa\u4e8etcp\u534f\u8bae\u7684socket\u8981\u901a\u4fe1\uff0c\u9996\u5148\u8981\u8fdb\u884c\u8fde\u63a5\u5efa\u7acb\u7684\u8fc7\u7a0b\uff0c\u7136\u540e\u624d\u662f\u6570\u636e\u4f20\u8f93\u7684\u8fc7\u7a0b\u3002 2 \u8fde\u63a5\u5efa\u7acb \u7b80\u5355\u770b\u4e0b\u8fde\u63a5\u7684\u5efa\u7acb\u8fc7\u7a0b\uff0c\u5ba2\u6237\u7aef\u5411server\u53d1\u9001SYN\u5305\uff0cserver\u56de\u590dSYN\uff0bACK\uff0c\u540c\u65f6\u5c06\u8fd9\u4e2a\u5904\u4e8eSYN_RECV\u72b6\u6001\u7684\u8fde\u63a5\u4fdd\u5b58\u5230\u534a\u8fde\u63a5\u961f\u5217\u3002\u5ba2\u6237\u7aef\u8fd4\u56deACK\u5305\u5b8c\u6210\u4e09\u6b21\u63e1\u624b\uff0cserver\u5c06ESTABLISHED\u72b6\u6001\u7684\u8fde\u63a5\u79fb\u5165accept\u961f\u5217\uff0c\u7b49\u5f85\u5e94\u7528\u8c03\u7528accept()\u3002 \u53ef\u4ee5\u770b\u5230\u5efa\u7acb\u8fde\u63a5\u6d89\u53ca\u4e24\u4e2a\u961f\u5217\uff1a \u534a\u8fde\u63a5\u961f\u5217(SYN Queue): \u4fdd\u5b58SYN_RECV\u72b6\u6001\u7684\u8fde\u63a5\u3002\u961f\u5217\u957f\u5ea6\u7531net.ipv4.tcp_max_syn_backlog\u8bbe\u7f6e \u5b8c\u6574\u8fde\u63a5\u961f\u5217(ESTAB Queue):\u4fdd\u5b58ESTABLISHED\u72b6\u6001\u7684\u8fde\u63a5\u3002\u961f\u5217\u957f\u5ea6\u4e3amin(net.core.somaxconn, backlog)\u3002\u5176\u4e2dbacklog\u662f\u6211\u4eec\u521b\u5efaServerSocket(int port,int backlog)\u65f6\u6307\u5b9a\u7684\u53c2\u6570\uff0c\u6700\u7ec8\u4f1a\u4f20\u9012\u7ed9listen\u65b9\u6cd5\uff1a #include int listen(int sockfd, int backlog); \u5982\u679c\u6211\u4eec\u8bbe\u7f6e\u7684backlog\u5927\u4e8enet.core.somaxconn\uff0c\u5b8c\u6574\u8fde\u63a5\u961f\u5217\u7684\u957f\u5ea6\u5c06\u88ab\u8bbe\u7f6e\u4e3anet.core.somaxconn\u3002 \u6ce8\u610f\uff1a\u4e0d\u540c\u7684\u7f16\u7a0b\u8bed\u8a00\u90fd\u6709\u76f8\u5e94\u7684socket\u7533\u8bf7\u65b9\u6cd5,\u6bd4\u5982Python\u662fsocket\u6a21\u5757.\u5728\u670d\u52a1\u7aef\u76d1\u542c\u4e00\u4e2a\u7aef\u53e3\uff0c\u5e95\u5c42\u90fd\u8981\u7ecf\u8fc73\u4e2a\u6b65\u9aa4\uff1a \u7533\u8bf7socket\u3001bind\u76f8\u5e94\u7684IP\u548cport\u3001\u8c03\u7528listen\u65b9\u6cd5\u8fdb\u884c\u76d1\u542c\u3002\u8fd9\u4e2alisten\u65b9\u6cd5python\u4f1a\u8fdb\u884c\u5c01\u88c5\uff0c\u522b\u7684\u7f16\u7a0b\u8bed\u8a00\u4e5f\u4f1a\u8fdb\u884c\u5c01\u88c5\uff0c\u4f46\u6700\u7ec8\u90fd\u662f\u8c03\u7528\u7cfb\u7edf\u7684listen()\u8c03\u7528 \u6211\u4eec\u5bf9\u8fd9\u4e24\u4e2a\u961f\u5217\u505a\u4e00\u4e0b\u603b\u7ed3: \u961f\u5217\u540d\u79f0 \u8bf4\u660e \u4e2d\u6587\u8bf4\u660e \u5e38\u7528\u4f18\u5316\u6280\u80fd \u534a\u8fde\u63a5\u961f\u5217(incomplete connection queue) Maximal number of remembered connection requests, which have not received an acknowledgment from connecting client. \u8fd8\u6ca1\u6709\u88ab\u5ba2\u6237\u7aef\u8fd4\u56deack\u7684\u5bf9\u5217\u7684\u957f\u5ea6\u3002 1. \u6700\u5927\u957f\u5ea6\u7531/proc/sys/net/ipv4/tcp_max_syn_backlog\u53c2\u6570\u51b3\u5b9a\uff0c\u5e76\u4e14\u7528\u6237\u4e0d\u80fd\u63a7\u5236\u5176\u957f\u5ea6\u3002 2. \u5f00\u542fnet.ipv4.tcp_syncookies\uff0c\u9632\u8303\u5c11\u91cf\u7684tcp syn\u653b\u51fb\u3002 \u5b8c\u5168\u8fde\u63a5\u961f\u5217(complete connection queue) the queue length for completely established sockets waiting to be accepted \u5df2\u7ecf\u63e1\u624b\u5b8c\u6210\uff0c\u4f46\u8fd8\u6ca1\u6709\u88abaccepted\u7684\u961f\u5217. 1. \u5185\u6838\u9650\u5236\uff0c\u8be5\u961f\u5217\u957f\u5ea6\u4e0d\u80fd\u8d85\u8fc7net.core.somaxconn\uff0c\u7528\u6237\u53ef\u4ee5\u63a7\u5236\u8fd9\u4e2a\u961f\u5217\u7684\u957f\u5ea6\u30022. \u52a0\u5927\u76f8\u5e94\u961f\u5217\u7684\u6700\u5927\u957f\u5ea6\u3002 3. \u6570\u636e\u4f20\u8f93 \u8fde\u63a5\u5efa\u7acb\u540e,\u5c31\u5230\u4e86socket\u6570\u636e\u4f20\u8f93\u7684\u5c42\u9762\u3002\u6b64\u65f6kernel\u80fd\u591f\u4e3a\u5e94\u7528\u7a0b\u5e8f\u505a\u7684\uff0c\u6709\u4e00\u4e2asocket Recv Buffer, \u4e5f\u5c31\u662f\u63a5\u6536\u7f13\u51b2\u533a. 3.1 Recv Buffer\u81ea\u52a8\u8c03\u8282\u673a\u5236 kernel\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\uff0c\u81ea\u52a8\u8c03\u8282Recv Buffer\u7684\u5927\u5c0f,\u4ee5\u671f\u627e\u5230\u6027\u80fd\u548c\u8d44\u6e90\u7684\u5e73\u8861\u70b9. \u5f53net.ipv4.tcp_moderate_rcvbuf\u8bbe\u7f6e\u4e3a1\u65f6\uff0c\u81ea\u52a8\u8c03\u8282\u673a\u5236\u751f\u6548\uff0c\u6bcf\u4e2aTCP\u8fde\u63a5\u7684recv Buffer\u7531\u4e0b\u9762\u76843\u5143\u6570\u7ec4\u6307\u5b9a(min, default, max)\uff1a net.ipv4.tcp_rmem = 4096 87380 16777216 \u6700\u521dRecv Buffer\u88ab\u8bbe\u7f6e\u4e3a87380\uff0c\u540c\u65f6\u8fd9\u4e2a\u7f3a\u7701\u503c\u4f1a\u8986\u76d6net.core.rmem_default\u7684\u8bbe\u7f6e,\u968f\u540erecv buffer\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u5728\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u52a8\u6001\u8c03\u8282\u3002 \u5f53net.ipv4.tcp_moderate_rcvbuf\u88ab\u8bbe\u7f6e\u4e3a0\uff0c\u6216\u8005\u8bbe\u7f6e\u4e86socket\u9009\u9879SO_RCVBUF\uff0c\u7f13\u51b2\u7684\u52a8\u6001\u8c03\u8282\u673a\u5236\u88ab\u5173\u95ed\u3002recv buffer\u7684\u7f3a\u7701\u503c\u7531net.core.rmem_default\u8bbe\u7f6e\uff0c\u4f46\u5982\u679c\u8bbe\u7f6e\u4e86net.ipv4.tcp_rmem\uff0c\u7f3a\u7701\u503c\u5219\u88ab\u8986\u76d6\u3002\u53ef\u4ee5\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528setsockopt()\u8bbe\u7f6erecv buffer\u7684\u6700\u5927\u503c\u4e3anet.core.rmem_max 3.2 \u5982\u679c\u5173\u95edRecv Buffer\u81ea\u52a8\u8c03\u8282\u673a\u5236 \u5982\u679c\u628anet.ipv4.tcp_moderate_rcvbuf\u88ab\u8bbe\u7f6e\u4e3a0,\u540c\u65f6socket\u81ea\u5df1\u4e5f\u6ca1\u6709\u8bbe\u7f6eSO_RCVBUF\u9009\u9879\uff0c\u90a3\u4e48\u4e00\u4e2asocket\u7684\u9ed8\u8ba4Buffer \u5927\u5c0f\u5c06\u6709net.core.rmem_default\u51b3\u5b9a\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u5982\u4e0b\u603b\u7ed3: \u5f53\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528setsockopt()\uff0c\u662f\u53ef\u4ee5\u81ea\u5b9a\u4e49Recv Buffer\u5927\u5c0f\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u5e94\u8be5\u628anet.ipv4.tcp_rmem\u4e2dmax\u503c\u548cnet.core.rmem_max\u503c\u8bbe\u7f6e\u6210\u4e00\u81f4\uff0c\u8fd9\u6837\u5047\u8bbe\u5e94\u7528\u7a0b\u5e8f\u6ca1\u6709\u5173\u6ce8\u5230\u8fd9\u4e2a\u70b9\uff0c\u4ecd\u7136\u53ef\u4ee5\u7531kernel\u628a\u5b83\u81ea\u52a8\u8c03\u8282\u6210\u6700\u5927\u7684Recv Buffer Recv Buffer\u7684\u9ed8\u8ba4\u503c\uff0c\u4e5f\u53ef\u4ee5\u9002\u5f53\u8fdb\u884c\u63d0\u9ad8\u3002\u5305\u62ecnet.core.rmem_default\u548cnet.ipv4.tcp_rmem\u4e2d\u7684default\u8bbe\u7f6e \u5982\u679c\u4e0d\u660e\u786e\u5982\u4f55\u4f18\u5316\uff0c\u81f3\u5c11\u53ef\u4ee5\u6253\u5f00net.ipv4.tcp_moderate_rcvbuf=1,\u8fd9\u6837kernel\u4f1a\u81ea\u52a8\u8c03\u6574socket\u7684Buffer (\u4e09) \u5173\u4e8eLinux\u63a5\u6536\u6570\u636e\u5305\u94fe\u8def\u4f18\u5316\u7684\u6574\u4f53\u603b\u7ed3 \u5e8f\u53f7 \u6570\u636e\u63a5\u6536\u9636\u6bb5 \u5e38\u7528\u4f18\u5316\u6280\u80fd 1 \u7f51\u5361Ring Buffer \u6839\u636e\u4e0d\u540c\u7684\u7f51\u5361\u7c7b\u578b\uff0c\u628aRing Buffer\u8bbe\u7f6e\u6210\u6700\u5927 2 \u7f51\u5361Ring Buffer\u548c\u7cfb\u7edfTCP/IP\u6808\u4e4b\u95f4 \u4f7f\u7528net.core.netdev_max_backlog,\u8c03\u5927Input Packet Queue 3 \u534a\u8fde\u63a5\u961f\u5217 \u5f00\u542fnet.ipv4.tcp_syncookies\uff0c\u9632\u8303\u5c11\u91cf\u7684tcp syn\u653b\u51fb 4 \u5b8c\u6574\u8fde\u63a5\u961f\u5217 \u901a\u8fc7net.core.somaxconn,\u8c03\u5927\u4e00\u4e9b\u961f\u5217\u957f\u5ea6,\u7ed9\u5e94\u7528\u7a0b\u5e8f\u4ee5\u66f4\u591a\u5904\u7406\u65f6\u95f4 5 Socket Recv Buffer \u5f00\u542fnet.ipv4.tcp_moderate_rcvbuf=1,\u5e76\u4e14\u628anet.ipv4.tcp_rmem/net.core.rmem_max\u4e2d\u9ed8\u8ba4\u503c\u548c\u6700\u5927\u503c\u8c03\u5927","title":"\u7b2c\u4e00\u7bc7 Linux\u6570\u636e\u5305\u63a5\u6536\u8def\u5f84\u68b3\u7406\u548c\u5e38\u7528\u8c03\u4f18\u6280\u80fd"},{"location":"chapter_3/1_linux_kernel_net/#linux","text":"\u7f51\u5361Driver\u5c42\u9762 1.1 \u7f51\u5361\u63a5\u6536\u5230\u6570\u636e\u5305 1.2 \u5c06\u6570\u636e\u5305\u4ece\u7f51\u5361\u786c\u4ef6\u8f6c\u79fb\u5230\u4e3b\u673a\u5185\u5b58\u4e2d. \u5185\u6838\u5c42\u9762 2.1 TCP/IP \u534f\u8bae\u9010\u5c42\u5904\u7406 \u5e94\u7528\u7a0b\u5e8f\u5c42\u9762 3.1 \u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7read()\u7cfb\u7edf\u8c03\u7528,\u4ecesocket buffer\u8bfb\u53d6\u6570\u636e \u901a\u8fc72\u5e45\u56fe\u6765\u5c55\u793a\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b: \u603b\u4f53\u8bf4\u660e\u7684\u56fe \u8be6\u7ec6\u7684\u56fe","title":"\u4e00 Linux\u6570\u636e\u5305\u63a5\u6536\u7684\u5b8c\u6574\u8def\u5f84\u68b3\u7406"},{"location":"chapter_3/1_linux_kernel_net/#_1","text":"","title":"\u4e8c \u4f5c\u4e3a\u8fd0\u7ef4,\u53ef\u4ee5\u505a\u54ea\u4e9b\u8c03\u4f18"},{"location":"chapter_3/1_linux_kernel_net/#driver","text":"Driver\u4f1a\u63d0\u524d\u7533\u8bf7\u597d\u4e00\u7247\u5185\u5b58\u533a\u57df,\u4f5c\u4e3a\u7f13\u51b2\u533a\u6765\u63a5\u6536\u6570\u636e\u5305.\u53eb\u505ask_buffer(socket kernel buffers) \u6362\u4e00\u79cd\u8bf4\u6cd5: Linux\u5185\u6838\u4f7f\u7528sk_buff(socket kernel buffers)\u6570\u636e\u7ed3\u6784\u63cf\u8ff0\u4e00\u4e2a\u6570\u636e\u5305\u3002 \u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u4e3a\u8fd9\u7247\u7f13\u51b2\u533a\u8db3\u591f\u5927(\u5b9e\u9645\u4e0a,\u73b0\u4ee3\u7684Linux\u670d\u52a1\u5668\u5185\u5b58\u90fd\u8db3\u591f\u5927,\u591f\u5b58\u653e\u8fd9\u4e9b\u6570\u636e\u5305\u4e86) Ring Buffer \u7f51\u5361\u73af\u72b6\u7f13\u51b2\u533a. \u53ef\u4ee5\u7406\u89e3\u4e3a\u7f51\u5361\u7684\u7f13\u5b58. \u8fd9\u7247\u533a\u57df\u7684\u5927\u5c0f\u662f\u7f51\u5361\u5382\u5546\u51b3\u5b9a\u7684(\u4e0d\u540c\u7684\u7f51\u5361\u5382\u5546\u3001\u4e0d\u540c\u7cfb\u5217\u7684\u7f51\u5361\u90fd\u662f\u6709\u533a\u522b\u7684)\uff0c\u5e76\u4e14\u5927\u5c0f\u4e0d\u80fd\u968f\u610f\u8c03\u6574,\u6216\u8005\u8bf4\u5b83\u7684\u5927\u5c0f\u662f\u56fa\u5b9a\u7684\u3002 \u4f46\u662f\u5c31\u50cf\u5bb6\u7528\u5439\u98ce\u673a\u53ef\u4ee5\u5f00\u5927\u6863\u548c\u5c0f\u6321\u4e00\u6837\uff08\u5927\u6863\u98ce\u5927\uff0c\u5c0f\u6863\u98ce\u5c0f\uff09\uff0cRing Buffer\u4e5f\u53ef\u4ee5\u8c03\u6574\u6210\u6700\u5927\u6863,\u8fd0\u7ef4\u4eba\u5458\u81f3\u5c11\u53ef\u4ee5\u628aRing Buffer\u8c03\u6574\u6210\u5927\u6863. Ring Buffer\u548c\u524d\u9762\u8bf4\u7684sk_buffer\u662f\u4ec0\u4e48\u5173\u7cfb\u5462? sk_bffer\u662f\u7528\u4e8e\u5b58\u50a8\u5b9e\u9645\u6570\u636e\u5305\u7684\uff0cRing Buffer\u7528\u4e8e\u5b58\u50a8\u5b9e\u9645\u6570\u636e\u5305\u7684\u6307\u9488 \u90a3\u4e48\u7f51\u5361Driver\u5c42\u9762\uff0c\u6574\u4e2a\u6570\u636e\u5305\u63a5\u6536\u7684\u8fc7\u7a0b\u5982\u4e0b: \u9a71\u52a8\u7a0b\u5e8f\u4e8b\u5148\u5728\u5185\u5b58\u4e2d\u5206\u914d\u4e00\u7247\u7f13\u51b2\u533a\u6765\u63a5\u6536\u6570\u636e\u5305,\u53eb\u505ask_buffer. \u5c06\u4e0a\u8ff0\u7f13\u51b2\u533a\u7684\u5730\u5740\u548c\u5927\u5c0f\uff08\u5373\u63a5\u6536\u63cf\u8ff0\u7b26\uff09\uff0c\u52a0\u5165\u5230rx ring buffer\u3002\u63cf\u8ff0\u7b26\u4e2d\u7684\u7f13\u51b2\u533a\u5730\u5740\u662fDMA\u4f7f\u7528\u7684\u7269\u7406\u5730\u5740; \u9a71\u52a8\u7a0b\u5e8f\u901a\u77e5\u7f51\u5361\u6709\u65b0\u7684\u63cf\u8ff0\u7b26(\u6216\u8005\u8bf4\u6709\u7a7a\u95f2\u53ef\u7528\u7684\u63cf\u8ff0\u7b26) \u7f51\u5361\u4ecerx ring buffer\u4e2d\u53d6\u51fa\u63cf\u8ff0\u7b26,\u4ece\u800c\u83b7\u53d6\u7f13\u51b2\u533a\u7684\u5730\u5740\u548c\u5927\u5c0f. \u5f53\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u5305\u5230\u8fbe\uff0c\u7f51\u5361(NIC)\u8c03\u7528DMA engine,(\u6b64\u65f6\u7f51\u5361\u5df2\u7ecf\u901a\u8fc7ring buffer\u7684\u63cf\u8ff0\u7b26\u77e5\u9053\u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\u4e86)\uff0c\u628a\u6570\u636e\u5305\u653e\u5165sk_buffer. \u5e76\u4e14\u6211\u731c\u6d4b\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u5305\u542b\u4e86\u7533\u8bf7\u4f7f\u7528\u63cf\u8ff0\u7b26\u548c\u91ca\u653e\u63cf\u8ff0\u7b26\u7684\u8fc7\u7a0b. \u5982\u679c\u6574\u4e2a\u8fc7\u7a0b\u6b63\u5e38,\u7f51\u5361\u4f1a\u53d1\u8d77\u4e2d\u65ad\uff0c\u901a\u77e5\u5185\u6838\u7684\u4e2d\u65ad\u7a0b\u5e8f\u5c06\u6570\u636e\u5305\u4f20\u9012\u7ed9IP\u5c42\uff0c\u8fdb\u5165TCP/IP\u534f\u8bae\u6808\u5904\u7406\uff0cTCP/IP\u534f\u8bae\u6808\u5904\u7406\u3002 \u6bcf\u4e2a\u6570\u636e\u5305\u7ecf\u8fc7TCP\u5c42\u4e00\u7cfb\u5217\u590d\u6742\u7684\u6b65\u9aa4\uff0c\u66f4\u65b0TCP\u72b6\u6001\u673a\uff0c\u6700\u7ec8\u5230\u8fbesocket\u7684recv Buffer\uff0c\u7b49\u5f85\u88ab\u5e94\u7528\u7a0b\u5e8f\u63a5\u6536\u5904\u7406\u3002\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\uff0c\u6570\u636e\u5305\u5230\u8fberecv Buffer\uff0cTCP\u5c31\u4f1a\u56deACK\u786e\u8ba4\uff0c\u65e2TCP\u7684ACK\u8868\u793a\u6570\u636e\u5305\u5df2\u7ecf\u88ab\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u6536\u5230,\u4f46\u5e76\u4e0d\u786e\u4fdd\u5e94\u7528\u5c42\u4e00\u5b9a\u6536\u5230\u6570\u636e\uff08\u4f8b\u5982\u8fd9\u4e2a\u65f6\u5019\u7cfb\u7edfcrash\uff09 \u7136\u540e,\u5185\u6838\u5e94\u8be5\u4f1a\u628a\u521a\u5360\u7528\u6389\u7684\u63cf\u8ff0\u7b26\u91cd\u65b0\u653e\u5165ring buffer\uff0c\u8fd9\u6837\u7f51\u5361\u5c31\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528\u63cf\u8ff0\u7b26\u4e86\u3002 \u4f5c\u4e3a\u8fd0\u7ef4\u4eba\u5458\uff0c\u6211\u4eec\u770b\u5230\uff0c\u8fd9\u91cc\u6700\u7b80\u5355\u7684\u4f18\u5316\u5c31\u662f\u628aring buffer\u8c03\u5230\u6700\u5927\uff0c\u7ed9\u4e0a\u5c42\uff08\u5e94\u7528\u7a0b\u5e8f\u5c42\u9762\uff09\u5c3d\u53ef\u80fd\u591a\u4e00\u70b9\u65f6\u95f4\u5904\u7406\u6570\u636e\u5305. \u53ef\u4ee5\u4f7f\u7528ethtool\u547d\u4ee4\uff0c\u8fdb\u884cRing Buffer\u7684\u67e5\u770b\u548c\u8bbe\u7f6e. 1 \u67e5\u770b\u7f51\u5361\u5f53\u524d\u7684\u8bbe\u7f6e(\u5305\u62ecRing Buffer): ethtool -g eth1 2 \u6539\u53d8Ring Buffer\u5927\u5c0f: ethtool -G eth1 rx 4096 tx 4096","title":"(\u4e00) \u7f51\u5361Driver\u5c42\u9762"},{"location":"chapter_3/1_linux_kernel_net/#tcpip","text":"\u6b64\u65f6\u6570\u636e\u5305\u5df2\u7ecf\u63a5\u5165\u5185\u6838\u5904\u7406\u533a\u57df\uff0c\u7531\u5185\u6838\u7684TCP/IP\u534f\u8bae\u6808\u529f\u80fd\u5904\u7406","title":"(\u4e8c) TCP/IP\u534f\u8bae\u6808\u5c42\u9762"},{"location":"chapter_3/1_linux_kernel_net/#1-ring-buffer-tcpipinput-packet-queue","text":"Linux\u7cfb\u7edf\u4e2d\u5e7f\u6cdb\u4f7f\u7528\u5404\u79cd\u7f13\u51b2\u6280\u80fd\uff0c\u800c\u7f13\u51b2\u6280\u80fd\u5e38\u5e38\u7531\u961f\u5217\u5b9e\u73b0\u3002 \u5f53\u63a5\u6536\u6570\u636e\u5305\u7684\u901f\u7387\u5927\u4e8e\u5185\u6838TCP\u5904\u7406\u5305\u7684\u901f\u7387\uff0c\u6570\u636e\u5305\u5c06\u4f1a\u7f13\u51b2\u5728TCP\u5c42\u4e4b\u524d\u7684\u961f\u5217\u4e2d\u3002\u63a5\u6536\u961f\u5217\u7684\u957f\u5ea6\u7531\u53c2\u6570net.core.netdev_max_backlog\u8bbe\u7f6e\u3002 \u6211\u4eec\u53ef\u4ee5\u9002\u5f53\u52a0\u5927\u8fd9\u4e2a\u503c. \u5927\u5bb6\u77e5\u9053\uff0c\u4e24\u4e2a\u57fa\u4e8etcp\u534f\u8bae\u7684socket\u8981\u901a\u4fe1\uff0c\u9996\u5148\u8981\u8fdb\u884c\u8fde\u63a5\u5efa\u7acb\u7684\u8fc7\u7a0b\uff0c\u7136\u540e\u624d\u662f\u6570\u636e\u4f20\u8f93\u7684\u8fc7\u7a0b\u3002","title":"1  Ring Buffer \u5230 TCP/IP\u534f\u8bae\u6808\u4e4b\u95f4\u8fd8\u6709\u4e00\u4e2aInput Packet Queue(\u6570\u636e\u5305\u63a5\u6536\u961f\u5217)"},{"location":"chapter_3/1_linux_kernel_net/#2","text":"\u7b80\u5355\u770b\u4e0b\u8fde\u63a5\u7684\u5efa\u7acb\u8fc7\u7a0b\uff0c\u5ba2\u6237\u7aef\u5411server\u53d1\u9001SYN\u5305\uff0cserver\u56de\u590dSYN\uff0bACK\uff0c\u540c\u65f6\u5c06\u8fd9\u4e2a\u5904\u4e8eSYN_RECV\u72b6\u6001\u7684\u8fde\u63a5\u4fdd\u5b58\u5230\u534a\u8fde\u63a5\u961f\u5217\u3002\u5ba2\u6237\u7aef\u8fd4\u56deACK\u5305\u5b8c\u6210\u4e09\u6b21\u63e1\u624b\uff0cserver\u5c06ESTABLISHED\u72b6\u6001\u7684\u8fde\u63a5\u79fb\u5165accept\u961f\u5217\uff0c\u7b49\u5f85\u5e94\u7528\u8c03\u7528accept()\u3002 \u53ef\u4ee5\u770b\u5230\u5efa\u7acb\u8fde\u63a5\u6d89\u53ca\u4e24\u4e2a\u961f\u5217\uff1a \u534a\u8fde\u63a5\u961f\u5217(SYN Queue): \u4fdd\u5b58SYN_RECV\u72b6\u6001\u7684\u8fde\u63a5\u3002\u961f\u5217\u957f\u5ea6\u7531net.ipv4.tcp_max_syn_backlog\u8bbe\u7f6e \u5b8c\u6574\u8fde\u63a5\u961f\u5217(ESTAB Queue):\u4fdd\u5b58ESTABLISHED\u72b6\u6001\u7684\u8fde\u63a5\u3002\u961f\u5217\u957f\u5ea6\u4e3amin(net.core.somaxconn, backlog)\u3002\u5176\u4e2dbacklog\u662f\u6211\u4eec\u521b\u5efaServerSocket(int port,int backlog)\u65f6\u6307\u5b9a\u7684\u53c2\u6570\uff0c\u6700\u7ec8\u4f1a\u4f20\u9012\u7ed9listen\u65b9\u6cd5\uff1a #include int listen(int sockfd, int backlog); \u5982\u679c\u6211\u4eec\u8bbe\u7f6e\u7684backlog\u5927\u4e8enet.core.somaxconn\uff0c\u5b8c\u6574\u8fde\u63a5\u961f\u5217\u7684\u957f\u5ea6\u5c06\u88ab\u8bbe\u7f6e\u4e3anet.core.somaxconn\u3002 \u6ce8\u610f\uff1a\u4e0d\u540c\u7684\u7f16\u7a0b\u8bed\u8a00\u90fd\u6709\u76f8\u5e94\u7684socket\u7533\u8bf7\u65b9\u6cd5,\u6bd4\u5982Python\u662fsocket\u6a21\u5757.\u5728\u670d\u52a1\u7aef\u76d1\u542c\u4e00\u4e2a\u7aef\u53e3\uff0c\u5e95\u5c42\u90fd\u8981\u7ecf\u8fc73\u4e2a\u6b65\u9aa4\uff1a \u7533\u8bf7socket\u3001bind\u76f8\u5e94\u7684IP\u548cport\u3001\u8c03\u7528listen\u65b9\u6cd5\u8fdb\u884c\u76d1\u542c\u3002\u8fd9\u4e2alisten\u65b9\u6cd5python\u4f1a\u8fdb\u884c\u5c01\u88c5\uff0c\u522b\u7684\u7f16\u7a0b\u8bed\u8a00\u4e5f\u4f1a\u8fdb\u884c\u5c01\u88c5\uff0c\u4f46\u6700\u7ec8\u90fd\u662f\u8c03\u7528\u7cfb\u7edf\u7684listen()\u8c03\u7528 \u6211\u4eec\u5bf9\u8fd9\u4e24\u4e2a\u961f\u5217\u505a\u4e00\u4e0b\u603b\u7ed3: \u961f\u5217\u540d\u79f0 \u8bf4\u660e \u4e2d\u6587\u8bf4\u660e \u5e38\u7528\u4f18\u5316\u6280\u80fd \u534a\u8fde\u63a5\u961f\u5217(incomplete connection queue) Maximal number of remembered connection requests, which have not received an acknowledgment from connecting client. \u8fd8\u6ca1\u6709\u88ab\u5ba2\u6237\u7aef\u8fd4\u56deack\u7684\u5bf9\u5217\u7684\u957f\u5ea6\u3002 1. \u6700\u5927\u957f\u5ea6\u7531/proc/sys/net/ipv4/tcp_max_syn_backlog\u53c2\u6570\u51b3\u5b9a\uff0c\u5e76\u4e14\u7528\u6237\u4e0d\u80fd\u63a7\u5236\u5176\u957f\u5ea6\u3002 2. \u5f00\u542fnet.ipv4.tcp_syncookies\uff0c\u9632\u8303\u5c11\u91cf\u7684tcp syn\u653b\u51fb\u3002 \u5b8c\u5168\u8fde\u63a5\u961f\u5217(complete connection queue) the queue length for completely established sockets waiting to be accepted \u5df2\u7ecf\u63e1\u624b\u5b8c\u6210\uff0c\u4f46\u8fd8\u6ca1\u6709\u88abaccepted\u7684\u961f\u5217. 1. \u5185\u6838\u9650\u5236\uff0c\u8be5\u961f\u5217\u957f\u5ea6\u4e0d\u80fd\u8d85\u8fc7net.core.somaxconn\uff0c\u7528\u6237\u53ef\u4ee5\u63a7\u5236\u8fd9\u4e2a\u961f\u5217\u7684\u957f\u5ea6\u30022. \u52a0\u5927\u76f8\u5e94\u961f\u5217\u7684\u6700\u5927\u957f\u5ea6\u3002","title":"2 \u8fde\u63a5\u5efa\u7acb"},{"location":"chapter_3/1_linux_kernel_net/#3","text":"\u8fde\u63a5\u5efa\u7acb\u540e,\u5c31\u5230\u4e86socket\u6570\u636e\u4f20\u8f93\u7684\u5c42\u9762\u3002\u6b64\u65f6kernel\u80fd\u591f\u4e3a\u5e94\u7528\u7a0b\u5e8f\u505a\u7684\uff0c\u6709\u4e00\u4e2asocket Recv Buffer, \u4e5f\u5c31\u662f\u63a5\u6536\u7f13\u51b2\u533a.","title":"3. \u6570\u636e\u4f20\u8f93"},{"location":"chapter_3/1_linux_kernel_net/#31-recv-buffer","text":"kernel\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\uff0c\u81ea\u52a8\u8c03\u8282Recv Buffer\u7684\u5927\u5c0f,\u4ee5\u671f\u627e\u5230\u6027\u80fd\u548c\u8d44\u6e90\u7684\u5e73\u8861\u70b9. \u5f53net.ipv4.tcp_moderate_rcvbuf\u8bbe\u7f6e\u4e3a1\u65f6\uff0c\u81ea\u52a8\u8c03\u8282\u673a\u5236\u751f\u6548\uff0c\u6bcf\u4e2aTCP\u8fde\u63a5\u7684recv Buffer\u7531\u4e0b\u9762\u76843\u5143\u6570\u7ec4\u6307\u5b9a(min, default, max)\uff1a net.ipv4.tcp_rmem = 4096 87380 16777216 \u6700\u521dRecv Buffer\u88ab\u8bbe\u7f6e\u4e3a87380\uff0c\u540c\u65f6\u8fd9\u4e2a\u7f3a\u7701\u503c\u4f1a\u8986\u76d6net.core.rmem_default\u7684\u8bbe\u7f6e,\u968f\u540erecv buffer\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u5728\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u52a8\u6001\u8c03\u8282\u3002 \u5f53net.ipv4.tcp_moderate_rcvbuf\u88ab\u8bbe\u7f6e\u4e3a0\uff0c\u6216\u8005\u8bbe\u7f6e\u4e86socket\u9009\u9879SO_RCVBUF\uff0c\u7f13\u51b2\u7684\u52a8\u6001\u8c03\u8282\u673a\u5236\u88ab\u5173\u95ed\u3002recv buffer\u7684\u7f3a\u7701\u503c\u7531net.core.rmem_default\u8bbe\u7f6e\uff0c\u4f46\u5982\u679c\u8bbe\u7f6e\u4e86net.ipv4.tcp_rmem\uff0c\u7f3a\u7701\u503c\u5219\u88ab\u8986\u76d6\u3002\u53ef\u4ee5\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528setsockopt()\u8bbe\u7f6erecv buffer\u7684\u6700\u5927\u503c\u4e3anet.core.rmem_max","title":"3.1 Recv Buffer\u81ea\u52a8\u8c03\u8282\u673a\u5236"},{"location":"chapter_3/1_linux_kernel_net/#32-recv-buffer","text":"\u5982\u679c\u628anet.ipv4.tcp_moderate_rcvbuf\u88ab\u8bbe\u7f6e\u4e3a0,\u540c\u65f6socket\u81ea\u5df1\u4e5f\u6ca1\u6709\u8bbe\u7f6eSO_RCVBUF\u9009\u9879\uff0c\u90a3\u4e48\u4e00\u4e2asocket\u7684\u9ed8\u8ba4Buffer \u5927\u5c0f\u5c06\u6709net.core.rmem_default\u51b3\u5b9a\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u5982\u4e0b\u603b\u7ed3: \u5f53\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528setsockopt()\uff0c\u662f\u53ef\u4ee5\u81ea\u5b9a\u4e49Recv Buffer\u5927\u5c0f\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u5e94\u8be5\u628anet.ipv4.tcp_rmem\u4e2dmax\u503c\u548cnet.core.rmem_max\u503c\u8bbe\u7f6e\u6210\u4e00\u81f4\uff0c\u8fd9\u6837\u5047\u8bbe\u5e94\u7528\u7a0b\u5e8f\u6ca1\u6709\u5173\u6ce8\u5230\u8fd9\u4e2a\u70b9\uff0c\u4ecd\u7136\u53ef\u4ee5\u7531kernel\u628a\u5b83\u81ea\u52a8\u8c03\u8282\u6210\u6700\u5927\u7684Recv Buffer Recv Buffer\u7684\u9ed8\u8ba4\u503c\uff0c\u4e5f\u53ef\u4ee5\u9002\u5f53\u8fdb\u884c\u63d0\u9ad8\u3002\u5305\u62ecnet.core.rmem_default\u548cnet.ipv4.tcp_rmem\u4e2d\u7684default\u8bbe\u7f6e \u5982\u679c\u4e0d\u660e\u786e\u5982\u4f55\u4f18\u5316\uff0c\u81f3\u5c11\u53ef\u4ee5\u6253\u5f00net.ipv4.tcp_moderate_rcvbuf=1,\u8fd9\u6837kernel\u4f1a\u81ea\u52a8\u8c03\u6574socket\u7684Buffer","title":"3.2 \u5982\u679c\u5173\u95edRecv Buffer\u81ea\u52a8\u8c03\u8282\u673a\u5236"},{"location":"chapter_3/1_linux_kernel_net/#linux_1","text":"\u5e8f\u53f7 \u6570\u636e\u63a5\u6536\u9636\u6bb5 \u5e38\u7528\u4f18\u5316\u6280\u80fd 1 \u7f51\u5361Ring Buffer \u6839\u636e\u4e0d\u540c\u7684\u7f51\u5361\u7c7b\u578b\uff0c\u628aRing Buffer\u8bbe\u7f6e\u6210\u6700\u5927 2 \u7f51\u5361Ring Buffer\u548c\u7cfb\u7edfTCP/IP\u6808\u4e4b\u95f4 \u4f7f\u7528net.core.netdev_max_backlog,\u8c03\u5927Input Packet Queue 3 \u534a\u8fde\u63a5\u961f\u5217 \u5f00\u542fnet.ipv4.tcp_syncookies\uff0c\u9632\u8303\u5c11\u91cf\u7684tcp syn\u653b\u51fb 4 \u5b8c\u6574\u8fde\u63a5\u961f\u5217 \u901a\u8fc7net.core.somaxconn,\u8c03\u5927\u4e00\u4e9b\u961f\u5217\u957f\u5ea6,\u7ed9\u5e94\u7528\u7a0b\u5e8f\u4ee5\u66f4\u591a\u5904\u7406\u65f6\u95f4 5 Socket Recv Buffer \u5f00\u542fnet.ipv4.tcp_moderate_rcvbuf=1,\u5e76\u4e14\u628anet.ipv4.tcp_rmem/net.core.rmem_max\u4e2d\u9ed8\u8ba4\u503c\u548c\u6700\u5927\u503c\u8c03\u5927","title":"(\u4e09) \u5173\u4e8eLinux\u63a5\u6536\u6570\u636e\u5305\u94fe\u8def\u4f18\u5316\u7684\u6574\u4f53\u603b\u7ed3"},{"location":"chapter_3/2_estab_queue_monitoring/","text":"\u4e00 \u89c2\u5bdf\u67d0\u4e2asocket\u7684\u5b8c\u6574\u8fde\u63a5\u961f\u5217(ESTAB Queue)\u7684\u6700\u5927\u503c\u548c\u5f53\u524d\u503c (\u4e00) LISTEN\u72b6\u6001 \u901a\u8fc7ss\u547d\u4ee4\uff0c\u89c2\u5bdf\u5904\u4e8elisten\u72b6\u6001\u7684socket\uff0c\u5f97\u77e5\u67d0\u4e2a\u5177\u4f53\u7684socket\u7684\u5b8c\u6574\u8fde\u63a5\u961f\u5217\u7684\u6700\u5927\u957f\u5ea6\u548c\u5f53\u524d\u957f\u5ea6\u3002 ss -ltnp LISTEN \u72b6\u6001: Send-Q\u8868\u793a\u5b8c\u6574\u8fde\u63a5\u961f\u5217(ESTAB Queue)\u7684\u6700\u5927\u503c\uff0c\u5c31\u662f\u4e4b\u524d\u63d0\u5230\u8fc7\u7684min(backlog, somaxconn) \u7684\u503c\u3002 Recv-Q\u8868\u793a\u76ee\u524d\u8be5\u961f\u5217\u4e2d,\u7b49\u5f85\u5e94\u7528\u5c42\u8c03\u7528accept()\u8fde\u63a5\u7684\u6570\u91cf (\u4e8c) \u975eLISTEN\u72b6\u6001 ss -ntp -4 state established Recv-Q \u8868\u793a\u7f51\u7edc\u63a5\u6536\u961f\u5217: \u8868\u793a\u6536\u5230\u7684\u6570\u636e\u5df2\u7ecf\u5728\u672c\u5730\u63a5\u6536\u7f13\u51b2\uff0c\u4f46\u662f\u8fd8\u6709\u591a\u5c11\u6ca1\u6709\u88ab\u8fdb\u7a0b\u53d6\u8d70\uff0crecv(). Send-Q \u8868\u793a\u7f51\u7edc\u53d1\u9001\u961f\u5217: \u5bf9\u65b9\u6ca1\u6709\u6536\u5230\u7684\u6570\u636e\u6216\u8005\u8bf4\u6ca1\u6709Ack\u7684,\u8fd8\u662f\u672c\u5730\u7f13\u51b2\u533a. (\u4e09) \u603b\u7ed3 \u901a\u8fc7\u4e0a\u8ff0\u63cf\u8ff0\uff0c\u5982\u679c\u4e00\u4e2asocket\uff08\u6bd4\u5982\u4e00\u4e2apython\u5e94\u7528\u76d1\u542c\u7684socket\uff09\uff0c\u5b83\u7684Recv-Q\u4e00\u76f4\u7b49\u4e8eSend-Q\uff0c\u90a3\u4e48\u8bf4\u660e\u8be5\u5e94\u7528\u5df2\u7ecf\u5904\u7406\u4e0d\u8fc7\u6765\u5ba2\u6237\u7aef\u8bf7\u6c42\u4e86\u3002 \u81f3\u4eca\u6ca1\u6709\u89c1\u5230\u8fc7\u975eLISTEN\u72b6\u6001\u4e0b,Recv-Q\u548cSend-Q\u975e0\u7684\u60c5\u51b5 \u4e8c \u89c2\u5bdfLinux\u670d\u52a1\u5668\u662f\u5426\u4e22\u6389\u7528\u6237\u8bf7\u6c42 (\u4e00) TcpListenOverflows \u5f53\u5e94\u7528\u7a0b\u5e8f\u5df2\u7ecf\u5904\u7406\u4e0d\u8fc7\u6765\uff0c\u5e76\u4e14\u76f8\u5e94\u7684ESTAB Queue\u4e5f\u5df2\u7ecf\u6ee1\u65f6\uff0cLinux\u5185\u5b58\u4e2d\u4f1a\u8fdb\u884c\u76f8\u5e94\u8bb0\u5f55\uff0c \u53ef\u4ee5\u901a\u8fc7/proc/net/netstat\u6587\u4ef6\u83b7\u53d6\u3002 \u5f53ESTAB Queue\u6ee1\u65f6\uff0c\u5ba2\u6237\u7aef\u65b0\u7684\u8fde\u63a5\u4e0d\u80fd\u88ab\u5efa\u7acb\uff0c\u670d\u52a1\u7aef\u901a\u8fc7net.ipv4.tcp_abort_on_overflow \u53c2\u6570\u7684\u8bbe\u7f6e\uff0c\u51b3\u5b9a \u662f\u5426\u7ed9\u5ba2\u6237\u7aef\u53d1\u9001\u54cd\u5e94: \u5f53net.ipv4.tcp_abort_on_overflow = 0\u65f6\uff0c\u76f4\u63a5\u4e22\u5f03\u8be5ACK\u5305\uff0c\u5ba2\u6237\u7aef\u7684socket\u4f1a\u5411\u5e94\u7528\u5c42\u8fd4\u56de read timeout\u3002 \u5f53net.ipv4.tcp_abort_on_overflow = 1\u65f6\uff0c\u670d\u52a1\u7aef\u4f1a\u53d1\u751fRST\u5305\uff0c\u5ba2\u6237\u7aef\u7684socket\u4f1a\u5411\u5e94\u7528\u5c42\u8fd4\u56deconnection reset by peer\u3002 (\u4e8c) TcpListenDrops \u5305\u542b\u4e0a\u9762ESTAB Queue\u6ee1\u7684\u60c5\u51b5\uff0c\u4e5f\u5c31\u662f\u8bf4\u5f53\u51fa\u73b0ListenOverflows\u65f6\uff0c\u5b83\u4e5f\u4f1a\u589e\u52a01\uff1b \u9664\u6b64\u4e4b\u5916\uff0c\u5f53\u5185\u5b58\u4e0d\u591f\u65e0\u6cd5\u4e3a\u65b0\u7684\u8fde\u63a5\u5206\u914dsocket\u76f8\u5173\u7684\u6570\u636e\u7ed3\u6784\u65f6\uff0c\u4e5f\u4f1a\u589e\u52a01\uff0c\u5f53\u7136\u8fd8\u6709\u522b\u7684\u5f02\u5e38\u60c5\u51b5\u4e0b\u4f1a\u589e\u52a01\u3002 (\u4e09) \u603b\u7ed3 cat /proc/net/netstat | awk '/TcpExt/ { print $21,$22 }' \u901a\u8fc7\u4ee5\u4e0a\u547d\u4ee4,\u4e0d\u65ad\u89c2\u5bdf\uff0c\u5982\u679c\u6570\u503c\u4e00\u76f4\u589e\u52a0\uff0c\u8bf4\u660e\u5f53\u524d\u7cfb\u7edf\u5df2\u7ecf\u51fa\u73b0\u4e22\u5f03\u7528\u6237\u8bf7\u6c42\u7684\u60c5\u51b5\u4e86. \u5b9e\u6218\u6280\u5de7 \u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u89c2\u5bdf\u7cfb\u7edf\u662f\u5426\u6709\u4e22\u5f03\u7528\u6237\u8bf7\u6c42\u7684\u60c5\u51b5 for h in `seq 1 100`; do cat /proc/net/netstat | awk '/TcpExt/ { print $21,$22 }' ; sleep 2 ; done \u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u786e\u8ba4\u662f\u54ea\u4e9b\u5e94\u7528\u5c42\u7684\u8fdb\u7a0b\u7684accept\u961f\u5217\u6709\u6ea2\u51fa ss -lntp |grep -v 'Recv-Q' |awk '$2 !=0\u2019","title":"\u7b2c\u4e8c\u7bc7 Linux\u4e0b\u5982\u4f55\u89c2\u5bdf\u5b8c\u6574\u8fde\u63a5\u961f\u5217\u7684\u60c5\u51b5"},{"location":"chapter_3/2_estab_queue_monitoring/#socketestab-queue","text":"","title":"\u4e00 \u89c2\u5bdf\u67d0\u4e2asocket\u7684\u5b8c\u6574\u8fde\u63a5\u961f\u5217(ESTAB Queue)\u7684\u6700\u5927\u503c\u548c\u5f53\u524d\u503c"},{"location":"chapter_3/2_estab_queue_monitoring/#listen","text":"\u901a\u8fc7ss\u547d\u4ee4\uff0c\u89c2\u5bdf\u5904\u4e8elisten\u72b6\u6001\u7684socket\uff0c\u5f97\u77e5\u67d0\u4e2a\u5177\u4f53\u7684socket\u7684\u5b8c\u6574\u8fde\u63a5\u961f\u5217\u7684\u6700\u5927\u957f\u5ea6\u548c\u5f53\u524d\u957f\u5ea6\u3002 ss -ltnp LISTEN \u72b6\u6001: Send-Q\u8868\u793a\u5b8c\u6574\u8fde\u63a5\u961f\u5217(ESTAB Queue)\u7684\u6700\u5927\u503c\uff0c\u5c31\u662f\u4e4b\u524d\u63d0\u5230\u8fc7\u7684min(backlog, somaxconn) \u7684\u503c\u3002 Recv-Q\u8868\u793a\u76ee\u524d\u8be5\u961f\u5217\u4e2d,\u7b49\u5f85\u5e94\u7528\u5c42\u8c03\u7528accept()\u8fde\u63a5\u7684\u6570\u91cf","title":"(\u4e00) LISTEN\u72b6\u6001"},{"location":"chapter_3/2_estab_queue_monitoring/#listen_1","text":"ss -ntp -4 state established Recv-Q \u8868\u793a\u7f51\u7edc\u63a5\u6536\u961f\u5217: \u8868\u793a\u6536\u5230\u7684\u6570\u636e\u5df2\u7ecf\u5728\u672c\u5730\u63a5\u6536\u7f13\u51b2\uff0c\u4f46\u662f\u8fd8\u6709\u591a\u5c11\u6ca1\u6709\u88ab\u8fdb\u7a0b\u53d6\u8d70\uff0crecv(). Send-Q \u8868\u793a\u7f51\u7edc\u53d1\u9001\u961f\u5217: \u5bf9\u65b9\u6ca1\u6709\u6536\u5230\u7684\u6570\u636e\u6216\u8005\u8bf4\u6ca1\u6709Ack\u7684,\u8fd8\u662f\u672c\u5730\u7f13\u51b2\u533a.","title":"(\u4e8c) \u975eLISTEN\u72b6\u6001"},{"location":"chapter_3/2_estab_queue_monitoring/#_1","text":"\u901a\u8fc7\u4e0a\u8ff0\u63cf\u8ff0\uff0c\u5982\u679c\u4e00\u4e2asocket\uff08\u6bd4\u5982\u4e00\u4e2apython\u5e94\u7528\u76d1\u542c\u7684socket\uff09\uff0c\u5b83\u7684Recv-Q\u4e00\u76f4\u7b49\u4e8eSend-Q\uff0c\u90a3\u4e48\u8bf4\u660e\u8be5\u5e94\u7528\u5df2\u7ecf\u5904\u7406\u4e0d\u8fc7\u6765\u5ba2\u6237\u7aef\u8bf7\u6c42\u4e86\u3002 \u81f3\u4eca\u6ca1\u6709\u89c1\u5230\u8fc7\u975eLISTEN\u72b6\u6001\u4e0b,Recv-Q\u548cSend-Q\u975e0\u7684\u60c5\u51b5","title":"(\u4e09) \u603b\u7ed3"},{"location":"chapter_3/2_estab_queue_monitoring/#linux","text":"","title":"\u4e8c \u89c2\u5bdfLinux\u670d\u52a1\u5668\u662f\u5426\u4e22\u6389\u7528\u6237\u8bf7\u6c42"},{"location":"chapter_3/2_estab_queue_monitoring/#tcplistenoverflows","text":"\u5f53\u5e94\u7528\u7a0b\u5e8f\u5df2\u7ecf\u5904\u7406\u4e0d\u8fc7\u6765\uff0c\u5e76\u4e14\u76f8\u5e94\u7684ESTAB Queue\u4e5f\u5df2\u7ecf\u6ee1\u65f6\uff0cLinux\u5185\u5b58\u4e2d\u4f1a\u8fdb\u884c\u76f8\u5e94\u8bb0\u5f55\uff0c \u53ef\u4ee5\u901a\u8fc7/proc/net/netstat\u6587\u4ef6\u83b7\u53d6\u3002 \u5f53ESTAB Queue\u6ee1\u65f6\uff0c\u5ba2\u6237\u7aef\u65b0\u7684\u8fde\u63a5\u4e0d\u80fd\u88ab\u5efa\u7acb\uff0c\u670d\u52a1\u7aef\u901a\u8fc7net.ipv4.tcp_abort_on_overflow \u53c2\u6570\u7684\u8bbe\u7f6e\uff0c\u51b3\u5b9a \u662f\u5426\u7ed9\u5ba2\u6237\u7aef\u53d1\u9001\u54cd\u5e94: \u5f53net.ipv4.tcp_abort_on_overflow = 0\u65f6\uff0c\u76f4\u63a5\u4e22\u5f03\u8be5ACK\u5305\uff0c\u5ba2\u6237\u7aef\u7684socket\u4f1a\u5411\u5e94\u7528\u5c42\u8fd4\u56de read timeout\u3002 \u5f53net.ipv4.tcp_abort_on_overflow = 1\u65f6\uff0c\u670d\u52a1\u7aef\u4f1a\u53d1\u751fRST\u5305\uff0c\u5ba2\u6237\u7aef\u7684socket\u4f1a\u5411\u5e94\u7528\u5c42\u8fd4\u56deconnection reset by peer\u3002","title":"(\u4e00) TcpListenOverflows"},{"location":"chapter_3/2_estab_queue_monitoring/#tcplistendrops","text":"\u5305\u542b\u4e0a\u9762ESTAB Queue\u6ee1\u7684\u60c5\u51b5\uff0c\u4e5f\u5c31\u662f\u8bf4\u5f53\u51fa\u73b0ListenOverflows\u65f6\uff0c\u5b83\u4e5f\u4f1a\u589e\u52a01\uff1b \u9664\u6b64\u4e4b\u5916\uff0c\u5f53\u5185\u5b58\u4e0d\u591f\u65e0\u6cd5\u4e3a\u65b0\u7684\u8fde\u63a5\u5206\u914dsocket\u76f8\u5173\u7684\u6570\u636e\u7ed3\u6784\u65f6\uff0c\u4e5f\u4f1a\u589e\u52a01\uff0c\u5f53\u7136\u8fd8\u6709\u522b\u7684\u5f02\u5e38\u60c5\u51b5\u4e0b\u4f1a\u589e\u52a01\u3002","title":"(\u4e8c) TcpListenDrops"},{"location":"chapter_3/2_estab_queue_monitoring/#_2","text":"cat /proc/net/netstat | awk '/TcpExt/ { print $21,$22 }' \u901a\u8fc7\u4ee5\u4e0a\u547d\u4ee4,\u4e0d\u65ad\u89c2\u5bdf\uff0c\u5982\u679c\u6570\u503c\u4e00\u76f4\u589e\u52a0\uff0c\u8bf4\u660e\u5f53\u524d\u7cfb\u7edf\u5df2\u7ecf\u51fa\u73b0\u4e22\u5f03\u7528\u6237\u8bf7\u6c42\u7684\u60c5\u51b5\u4e86.","title":"(\u4e09) \u603b\u7ed3"},{"location":"chapter_3/2_estab_queue_monitoring/#_3","text":"\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u89c2\u5bdf\u7cfb\u7edf\u662f\u5426\u6709\u4e22\u5f03\u7528\u6237\u8bf7\u6c42\u7684\u60c5\u51b5 for h in `seq 1 100`; do cat /proc/net/netstat | awk '/TcpExt/ { print $21,$22 }' ; sleep 2 ; done \u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u786e\u8ba4\u662f\u54ea\u4e9b\u5e94\u7528\u5c42\u7684\u8fdb\u7a0b\u7684accept\u961f\u5217\u6709\u6ea2\u51fa ss -lntp |grep -v 'Recv-Q' |awk '$2 !=0\u2019","title":"\u5b9e\u6218\u6280\u5de7"},{"location":"chapter_3/3_net_ipv4_tcp_syn_retries/","text":"\u4e00 \u53c2\u6570\u4f5c\u7528 net.ipv4.tcp_syn_retries \u7684\u8bbe\u7f6e,\u8868\u793a\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884cconnect()\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u5728\u5bf9\u65b9\u4e0d\u8fd4\u56deSYN + ACK\u7684\u60c5\u51b5\u4e0b(\u4e5f\u5c31\u662f\u8d85\u65f6\u7684\u60c5\u51b5\u4e0b)\uff0c\u7b2c\u4e00\u6b21\u53d1\u9001\u4e4b\u540e\uff0c\u5185\u6838\u6700\u591a\u91cd\u8bd5\u51e0\u6b21\u53d1\u9001SYN\u5305;\u5e76\u4e14\u51b3\u5b9a\u4e86\u7b49\u5f85\u65f6\u95f4. Linux\u4e0a\u7684\u9ed8\u8ba4\u503c\u662f net.ipv4.tcp_syn_retries = 6 ,\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u662f\u672c\u673a\u4e3b\u52a8\u53d1\u8d77\u8fde\u63a5,(\u5373\u4e3b\u52a8\u5f00\u542fTCP\u4e09\u6b21\u63e1\u624b\u4e2d\u7684\u7b2c\u4e00\u4e2aSYN\u5305),\u5982\u679c\u4e00\u76f4\u6536\u4e0d\u5230\u5bf9\u65b9\u8fd4\u56deSYN + ACK ,\u90a3\u4e48\u5e94\u7528\u7a0b\u5e8f\u6700\u5927\u7684\u8d85\u65f6\u65f6\u95f4\u5c31\u662f127\u79d2 \u4e8c \u8be6\u7ec6\u8bf4\u660e \u6ce8\uff1a\u8fd9\u91cc\u53ea\u5206\u6790 TCP \u8fde\u63a5\u8d85\u65f6 Linux \u7cfb\u7edf\u9ed8\u8ba4\u7684\u5efa\u7acb TCP \u8fde\u63a5\u7684\u8d85\u65f6\u65f6\u95f4\u4e3a 127 \u79d2\uff0c\u5bf9\u4e8e\u8bb8\u591a\u5ba2\u6237\u7aef\u6765\u8bf4\uff0c\u8fd9\u4e2a\u65f6\u95f4\u90fd\u592a\u957f\u4e86\uff0c \u7279\u522b\u662f\u5f53\u8fd9\u4e2a\u5ba2\u6237\u7aef\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u670d\u52a1\u7684\u65f6\u5019\uff0c\u66f4\u5e0c\u671b\u80fd\u591f\u5c3d\u65e9\u5931\u8d25\uff0c\u4ee5\u4fbf\u80fd\u591f\u9009\u62e9\u5176\u5b83\u7684\u53ef\u7528\u670d\u52a1\u91cd\u65b0\u5c1d\u8bd5\u3002 socket\u5bf9\u8c61\u662fLinux\u4e0b\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u7528\u5230\u7684\u548c\u8fdc\u7aef\u5efa\u7acbTCP\u6216\u8005UDP\u8fde\u63a5\u7684\u5bf9\u8c61. \u7cfb\u7edf\u8c03\u7528 connect(2) \u5219\u662f\u7528\u6765\u5c1d\u8bd5\u5efa\u7acb socket \u8fde\u63a5\uff08TCP\uff09\u7684\u51fd\u6570\u3002 connect \u5bf9\u4e8e UDP \u6765\u8bf4\u5e76\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u800c\u5bf9\u4e8e TCP \u6765\u8bf4\u5219\u662f\u4e00\u4e2a\u5fc5\u987b\u8fc7\u7a0b\uff0c\u8457\u540d\u7684 TCP 3 \u6b21\u63e1\u624b\u5b9e\u9645\u4e0a\u4e5f\u7531 connect \u6765\u5b8c\u6210\u3002 \u7f51\u7edc\u4e2d\u7684\u8fde\u63a5\u8d85\u65f6\u975e\u5e38\u5e38\u89c1\uff0c\u4e0d\u7ba1\u662f\u5e7f\u57df\u7f51\u8fd8\u662f\u5c40\u57df\u7f51\uff0c\u4e3a\u4e86\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5bb9\u5fcd\u5931\u8d25\uff0c\u6240\u4ee5\u8fde\u63a5\u52a0\u5165\u4e86\u91cd\u8bd5\u673a\u5236\uff0c \u800c\u53e6\u4e00\u65b9\u9762\uff0c\u4e3a\u4e86\u4e0d\u7ed9\u670d\u52a1\u7aef\u5e26\u6765\u8fc7\u5927\u7684\u538b\u529b\uff0c\u91cd\u8bd5\u4e5f\u662f\u6709\u9650\u5236\u7684\u3002 \u5728 Linux \u4e2d\uff0c\u8fde\u63a5\u8d85\u65f6\u5178\u578b\u4e3a 2 \u5206 7 \u79d2\uff0c\u800c\u5bf9\u4e8e\u4e00\u4e9b client \u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u957f\u7684\u65f6\u95f4\uff1b \u4e0b\u9762\u6765\u770b\u770b 2 \u5206 7 \u79d2\u662f\u600e\u6837\u6765\u7684\uff0c\u4ee5\u53ca\u600e\u6837\u914d\u7f6e Linux kernel \u6765\u7f29\u77ed\u8fd9\u4e2a\u8d85\u65f6\u3002 2 \u5206 7 \u79d2\u5373 127 \u79d2\uff0c\u521a\u597d\u662f 2 \u7684 7 \u6b21\u65b9\u51cf\u4e00\uff0c\u806a\u660e\u7684\u8bfb\u8005\u53ef\u80fd\u5df2\u7ecf\u770b\u51fa\u6765\u4e86\uff0c\u5982\u679c TCP \u63e1\u624b\u7684 SYN \u5305\u8d85\u65f6\u91cd\u8bd5\u6309\u7167 2 \u7684\u5e42\u6765 backoff\uff0c \u90a3\u4e48\uff1a \u7b2c 1 \u6b21\u53d1\u9001 SYN \u62a5\u6587\u540e\u7b49\u5f85 1s\uff082 \u7684 0 \u6b21\u5e42\uff09\uff0c\u5982\u679c\u8d85\u65f6\uff0c\u5219\u91cd\u8bd5 \u7b2c 2 \u6b21\u53d1\u9001\u540e\u7b49\u5f85 2s\uff082 \u7684 1 \u6b21\u5e42\uff09\uff0c\u5982\u679c\u8d85\u65f6\uff0c\u5219\u91cd\u8bd5 \u7b2c 3 \u6b21\u53d1\u9001\u540e\u7b49\u5f85 4s\uff082 \u7684 2 \u6b21\u5e42\uff09\uff0c\u5982\u679c\u8d85\u65f6\uff0c\u5219\u91cd\u8bd5 \u7b2c 4 \u6b21\u53d1\u9001\u540e\u7b49\u5f85 8s\uff082 \u7684 3 \u6b21\u5e42\uff09\uff0c\u5982\u679c\u8d85\u65f6\uff0c\u5219\u91cd\u8bd5 \u7b2c 5 \u6b21\u53d1\u9001\u540e\u7b49\u5f85 16s\uff082 \u7684 4 \u6b21\u5e42\uff09\uff0c\u5982\u679c\u8d85\u65f6\uff0c\u5219\u91cd\u8bd5 \u7b2c 6 \u6b21\u53d1\u9001\u540e\u7b49\u5f85 32s\uff082 \u7684 5 \u6b21\u5e42\uff09\uff0c\u5982\u679c\u8d85\u65f6\uff0c\u5219\u91cd\u8bd5 \u7b2c 7 \u6b21\u53d1\u9001\u540e\u7b49\u5f85 64s\uff082 \u7684 6 \u6b21\u5e42\uff09\uff0c\u5982\u679c\u8d85\u65f6\uff0c\u5219\u8d85\u65f6\u5931\u8d25 \u4e0a\u9762\u7684\u7ed3\u679c\u521a\u597d\u662f 127 \u79d2\u3002\u4e5f\u5c31\u662f\u8bf4 Linux \u5185\u6838\u5728\u5c1d\u8bd5\u5efa\u7acb TCP \u8fde\u63a5\u65f6\uff0c\u6700\u591a\u4f1a\u5c1d\u8bd5 7 \u6b21\u3002 \u63a5\u4e0b\u6765,\u6211\u4eec\u7528\u5b9e\u9a8c\u6765\u8fdb\u884c\u9a8c\u8bc1: \u9996\u5148\uff0c\u914d\u7f6e iptables \u6765\u4e22\u5f03\u6307\u5b9a\u7aef\u53e3\u7684 SYN \u62a5\u6587 # iptables -A INPUT --protocol tcp --dport 5000 --syn -j DROP \u7136\u540e\uff0c\u6253\u5f00 tcpdump \u89c2\u5bdf\u5230\u8fbe\u6307\u5b9a\u7aef\u53e3\u7684\u62a5\u6587 # tcpdump -i lo -Ss0 -n src 127.0.0.1 and dst 127.0.0.1 and port 5000 \u6700\u540e\uff0c\u4f7f\u7528 telnet \u8fde\u63a5\u6307\u5b9a\u7aef\u53e3 date '+ %F %T'; telnet 127.0.0.1 5000; date '+ %F %T'; \u4e0a\u9762\u7684\u547d\u4ee4\u8f93\u51fa\u5982\u4e0b: \u8d85\u65f6\u65f6\u95f4\u4e3a127\u79d2. tcpdump\u7684\u8f93\u51fa\u5982\u4e0b: \u4ecetcpdump\u7684\u8f93\u51fa\u4e5f\u53ef\u4ee5\u770b\u5230,\u4e00\u5171\u53d1\u4e867\u6b21SYN\u5305(\u90fd\u662f\u540c\u4e00\u4e2aseq\u53f7\u7801)\uff0c\u7b2c\u4e00\u6b21\u662f\u6b63\u5e38\u8bf7\u6c42,\u540e\u97626\u6b21\u662f\u91cd\u8bd5,\u6b63\u662f\u8be5\u5185\u6838\u53c2\u6570 \u8bbe\u7f6e\u7684\u503c. \u4e09 \u5e94\u7528\u5c42\u771f\u6b63\u7684\u8d85\u65f6\u65f6\u95f4 \u90a3\u4e48\u95ee\u9898\u6765\u4e86,\u5e94\u7528\u5c42\u771f\u6b63\u7684\u8d85\u65f6\u65f6\u95f4\u4e00\u5b9a\u662f127\u79d2\u5417\uff1f\u8fd8\u662f\u4e0d\u80fd\u5927\u4e8e127\u79d2. \u901a\u8fc7\u4e0a\u9762\u7684\u5b9e\u9a8c\uff0c\u57fa\u672c\u53ef\u4ee5\u5f97\u77e5\u5e94\u7528\u5c42\u7684\u8d85\u65f6\u95f4\u4e00\u5b9a\u4e0d\u80fd\u5927\u4e8e\u5185\u6838\u7684\u8bbe\u5b9a. \u5982\u679c\u5e94\u7528\u5c42\u7684\u8bbe\u5b9a\u5c0f\u4e8e\u5185\u6838\u7684\u8bbe\u5b9a\u5462\uff1f\u8d85\u65f6\u65f6\u95f4\u5e94\u8be5\u662f\u5c0f\u4e8e127\u79d2\u7684.\u6211\u4eec\u7ee7\u7eed\u901a\u8fc7\u5b9e\u9a8c\u6765\u9a8c\u8bc1\u4e0b. \u73b0\u5728\u6211\u7684\u673a\u5668\u4e0a,\u5185\u6838\u53c2\u6570\u662fnet.ipv4.tcp_syn_retries=6,\u6700\u5927\u8d85\u65f6\u65f6\u95f4\u662f 127\u79d2 \u5e94\u7528\u5c42\u4ee3\u7801\u5982\u4e0b: \u4e00\u4e2apython\u7a0b\u5e8f,\u4e3b\u52a8\u8bbe\u7f6esocket\u7684\u8d85\u65f6\u65f6\u95f4\u4e3a5\u79d2. #!/usr/bin/python import socket from datetime import datetime fmt = \"%Y-%m-%d %H:%M:%S\" address = ('127.0.0.1',5000) s = socket.socket() s.settimeout(5) #\u8bbe\u7f6esocket\u8d85\u65f6\u65f6\u95f4\u4e3a5\u79d2 print datetime.now().strftime(fmt) s.connect_ex(address) print datetime.now().strftime(fmt) \u6211\u4eec\u518d\u6765\u89c2\u5bdf\u4e0b\u5e94\u7528\u7a0b\u5e8f\u7684\u8868\u73b0\u548ctcpdump\u7684\u8f93\u51fa \u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u5230\uff0c\u5e94\u7528\u7a0b\u5e8f5\u79d2\u5c31\u8d85\u65f6\u9000\u51fa\u4e86. \u518d\u6765\u770b\u4e0btcpdump\u7684\u8f93\u51fa: \u4ecetcpdump\u7684\u8f93\u51fa\u770b\u5230,\u7b2c\u4e00\u6b21\u53d1\u9001\u4e4b\u540e,\u53ea\u5c1d\u8bd5\u4e862\u6b21\u91cd\u8bd5(2\u76840\u6b21+2\u76841\u6b21),\u56e0\u4e3a\u7b2c\u4e09\u6b21\u91cd\u8bd5\u8981\u7b492\u76842\u6b21\u65b9\u79d2,\u4e5f\u5c31\u662f4\u79d2, \u524d\u97621+2 + 4\u662f7\u79d2,\u800c\u5e94\u7528\u5c42\u8bbe\u7f6e\u7684\u8d85\u65f6\u65f6\u95f4\u662f5\u79d2,\u4ecb\u4e8e2\uff5e3\u4e4b\u95f4,\u56e0\u6b64\u7b2c\u4e09\u6b21\u91cd\u8bd5\u4e0d\u4f1a\u8fdb\u884c. \u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u8bbe\u7f6e\u7684\u8d85\u65f6\u65f6\u95f4\u8db3\u591f\u957f,\u90a3\u4e48\u7b2c\u4e09\u6b21\u91cd\u8bd5\u5e94\u8be5\u572815:57:28\u8fdb\u884c. \u56db \u603b\u7ed3 net.ipv4.tcp_syn_retries\u662f\u7528\u4e8e\u8bbe\u7f6e\u4e3b\u52a8\u53d1\u8d77TCP\u8fde\u63a5\u8d85\u65f6\u65f6,SYN\u5305\u7684\u91cd\u8bd5\u6b21\u6570,\u8be5\u53c2\u6570\u5982\u679c\u662fx,\u90a3\u4e48connect(2)\u8c03\u7528\u6700\u5927\u7684\u8d85\u65f6\u65f6\u95f4\u4e3a2\u7684x\u6b21\u65b9 -1,\u5355\u4f4d\u662f\u79d2. \u5e94\u7528\u7a0b\u5e8f\u6700\u5927\u7684\u8d85\u65f6\u65f6\u95f4\u4e0d\u80fd\u8d85\u8fc7\u5185\u6838\u7684\u8bbe\u5b9a,\u53ef\u4ee5\u5c0f\u4e8e\u7b49\u4e8e\u5185\u6838\u7684\u8bbe\u5b9a. \u4e94 \u53c2\u8003\u6587\u7ae0 \u672c\u6b21\u53c2\u8003\u6587\u7ae0: http://www.chengweiyang.cn/2017/02/18/linux-connect-timeout/","title":"\u7b2c\u4e09\u7bc7 \u7406\u89e3net.ipv4.tcp_syn_retries\u8bbe\u7f6e"},{"location":"chapter_3/3_net_ipv4_tcp_syn_retries/#_1","text":"net.ipv4.tcp_syn_retries \u7684\u8bbe\u7f6e,\u8868\u793a\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884cconnect()\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u5728\u5bf9\u65b9\u4e0d\u8fd4\u56deSYN + ACK\u7684\u60c5\u51b5\u4e0b(\u4e5f\u5c31\u662f\u8d85\u65f6\u7684\u60c5\u51b5\u4e0b)\uff0c\u7b2c\u4e00\u6b21\u53d1\u9001\u4e4b\u540e\uff0c\u5185\u6838\u6700\u591a\u91cd\u8bd5\u51e0\u6b21\u53d1\u9001SYN\u5305;\u5e76\u4e14\u51b3\u5b9a\u4e86\u7b49\u5f85\u65f6\u95f4. Linux\u4e0a\u7684\u9ed8\u8ba4\u503c\u662f net.ipv4.tcp_syn_retries = 6 ,\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u662f\u672c\u673a\u4e3b\u52a8\u53d1\u8d77\u8fde\u63a5,(\u5373\u4e3b\u52a8\u5f00\u542fTCP\u4e09\u6b21\u63e1\u624b\u4e2d\u7684\u7b2c\u4e00\u4e2aSYN\u5305),\u5982\u679c\u4e00\u76f4\u6536\u4e0d\u5230\u5bf9\u65b9\u8fd4\u56deSYN + ACK ,\u90a3\u4e48\u5e94\u7528\u7a0b\u5e8f\u6700\u5927\u7684\u8d85\u65f6\u65f6\u95f4\u5c31\u662f127\u79d2","title":"\u4e00 \u53c2\u6570\u4f5c\u7528"},{"location":"chapter_3/3_net_ipv4_tcp_syn_retries/#_2","text":"\u6ce8\uff1a\u8fd9\u91cc\u53ea\u5206\u6790 TCP \u8fde\u63a5\u8d85\u65f6 Linux \u7cfb\u7edf\u9ed8\u8ba4\u7684\u5efa\u7acb TCP \u8fde\u63a5\u7684\u8d85\u65f6\u65f6\u95f4\u4e3a 127 \u79d2\uff0c\u5bf9\u4e8e\u8bb8\u591a\u5ba2\u6237\u7aef\u6765\u8bf4\uff0c\u8fd9\u4e2a\u65f6\u95f4\u90fd\u592a\u957f\u4e86\uff0c \u7279\u522b\u662f\u5f53\u8fd9\u4e2a\u5ba2\u6237\u7aef\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u670d\u52a1\u7684\u65f6\u5019\uff0c\u66f4\u5e0c\u671b\u80fd\u591f\u5c3d\u65e9\u5931\u8d25\uff0c\u4ee5\u4fbf\u80fd\u591f\u9009\u62e9\u5176\u5b83\u7684\u53ef\u7528\u670d\u52a1\u91cd\u65b0\u5c1d\u8bd5\u3002 socket\u5bf9\u8c61\u662fLinux\u4e0b\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u7528\u5230\u7684\u548c\u8fdc\u7aef\u5efa\u7acbTCP\u6216\u8005UDP\u8fde\u63a5\u7684\u5bf9\u8c61. \u7cfb\u7edf\u8c03\u7528 connect(2) \u5219\u662f\u7528\u6765\u5c1d\u8bd5\u5efa\u7acb socket \u8fde\u63a5\uff08TCP\uff09\u7684\u51fd\u6570\u3002 connect \u5bf9\u4e8e UDP \u6765\u8bf4\u5e76\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u800c\u5bf9\u4e8e TCP \u6765\u8bf4\u5219\u662f\u4e00\u4e2a\u5fc5\u987b\u8fc7\u7a0b\uff0c\u8457\u540d\u7684 TCP 3 \u6b21\u63e1\u624b\u5b9e\u9645\u4e0a\u4e5f\u7531 connect \u6765\u5b8c\u6210\u3002 \u7f51\u7edc\u4e2d\u7684\u8fde\u63a5\u8d85\u65f6\u975e\u5e38\u5e38\u89c1\uff0c\u4e0d\u7ba1\u662f\u5e7f\u57df\u7f51\u8fd8\u662f\u5c40\u57df\u7f51\uff0c\u4e3a\u4e86\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5bb9\u5fcd\u5931\u8d25\uff0c\u6240\u4ee5\u8fde\u63a5\u52a0\u5165\u4e86\u91cd\u8bd5\u673a\u5236\uff0c \u800c\u53e6\u4e00\u65b9\u9762\uff0c\u4e3a\u4e86\u4e0d\u7ed9\u670d\u52a1\u7aef\u5e26\u6765\u8fc7\u5927\u7684\u538b\u529b\uff0c\u91cd\u8bd5\u4e5f\u662f\u6709\u9650\u5236\u7684\u3002 \u5728 Linux \u4e2d\uff0c\u8fde\u63a5\u8d85\u65f6\u5178\u578b\u4e3a 2 \u5206 7 \u79d2\uff0c\u800c\u5bf9\u4e8e\u4e00\u4e9b client \u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u957f\u7684\u65f6\u95f4\uff1b \u4e0b\u9762\u6765\u770b\u770b 2 \u5206 7 \u79d2\u662f\u600e\u6837\u6765\u7684\uff0c\u4ee5\u53ca\u600e\u6837\u914d\u7f6e Linux kernel \u6765\u7f29\u77ed\u8fd9\u4e2a\u8d85\u65f6\u3002 2 \u5206 7 \u79d2\u5373 127 \u79d2\uff0c\u521a\u597d\u662f 2 \u7684 7 \u6b21\u65b9\u51cf\u4e00\uff0c\u806a\u660e\u7684\u8bfb\u8005\u53ef\u80fd\u5df2\u7ecf\u770b\u51fa\u6765\u4e86\uff0c\u5982\u679c TCP \u63e1\u624b\u7684 SYN \u5305\u8d85\u65f6\u91cd\u8bd5\u6309\u7167 2 \u7684\u5e42\u6765 backoff\uff0c \u90a3\u4e48\uff1a \u7b2c 1 \u6b21\u53d1\u9001 SYN \u62a5\u6587\u540e\u7b49\u5f85 1s\uff082 \u7684 0 \u6b21\u5e42\uff09\uff0c\u5982\u679c\u8d85\u65f6\uff0c\u5219\u91cd\u8bd5 \u7b2c 2 \u6b21\u53d1\u9001\u540e\u7b49\u5f85 2s\uff082 \u7684 1 \u6b21\u5e42\uff09\uff0c\u5982\u679c\u8d85\u65f6\uff0c\u5219\u91cd\u8bd5 \u7b2c 3 \u6b21\u53d1\u9001\u540e\u7b49\u5f85 4s\uff082 \u7684 2 \u6b21\u5e42\uff09\uff0c\u5982\u679c\u8d85\u65f6\uff0c\u5219\u91cd\u8bd5 \u7b2c 4 \u6b21\u53d1\u9001\u540e\u7b49\u5f85 8s\uff082 \u7684 3 \u6b21\u5e42\uff09\uff0c\u5982\u679c\u8d85\u65f6\uff0c\u5219\u91cd\u8bd5 \u7b2c 5 \u6b21\u53d1\u9001\u540e\u7b49\u5f85 16s\uff082 \u7684 4 \u6b21\u5e42\uff09\uff0c\u5982\u679c\u8d85\u65f6\uff0c\u5219\u91cd\u8bd5 \u7b2c 6 \u6b21\u53d1\u9001\u540e\u7b49\u5f85 32s\uff082 \u7684 5 \u6b21\u5e42\uff09\uff0c\u5982\u679c\u8d85\u65f6\uff0c\u5219\u91cd\u8bd5 \u7b2c 7 \u6b21\u53d1\u9001\u540e\u7b49\u5f85 64s\uff082 \u7684 6 \u6b21\u5e42\uff09\uff0c\u5982\u679c\u8d85\u65f6\uff0c\u5219\u8d85\u65f6\u5931\u8d25 \u4e0a\u9762\u7684\u7ed3\u679c\u521a\u597d\u662f 127 \u79d2\u3002\u4e5f\u5c31\u662f\u8bf4 Linux \u5185\u6838\u5728\u5c1d\u8bd5\u5efa\u7acb TCP \u8fde\u63a5\u65f6\uff0c\u6700\u591a\u4f1a\u5c1d\u8bd5 7 \u6b21\u3002 \u63a5\u4e0b\u6765,\u6211\u4eec\u7528\u5b9e\u9a8c\u6765\u8fdb\u884c\u9a8c\u8bc1:","title":"\u4e8c \u8be6\u7ec6\u8bf4\u660e"},{"location":"chapter_3/3_net_ipv4_tcp_syn_retries/#iptables-syn","text":"# iptables -A INPUT --protocol tcp --dport 5000 --syn -j DROP","title":"\u9996\u5148\uff0c\u914d\u7f6e iptables \u6765\u4e22\u5f03\u6307\u5b9a\u7aef\u53e3\u7684 SYN \u62a5\u6587"},{"location":"chapter_3/3_net_ipv4_tcp_syn_retries/#tcpdump","text":"# tcpdump -i lo -Ss0 -n src 127.0.0.1 and dst 127.0.0.1 and port 5000","title":"\u7136\u540e\uff0c\u6253\u5f00 tcpdump \u89c2\u5bdf\u5230\u8fbe\u6307\u5b9a\u7aef\u53e3\u7684\u62a5\u6587"},{"location":"chapter_3/3_net_ipv4_tcp_syn_retries/#telnet","text":"date '+ %F %T'; telnet 127.0.0.1 5000; date '+ %F %T'; \u4e0a\u9762\u7684\u547d\u4ee4\u8f93\u51fa\u5982\u4e0b: \u8d85\u65f6\u65f6\u95f4\u4e3a127\u79d2. tcpdump\u7684\u8f93\u51fa\u5982\u4e0b: \u4ecetcpdump\u7684\u8f93\u51fa\u4e5f\u53ef\u4ee5\u770b\u5230,\u4e00\u5171\u53d1\u4e867\u6b21SYN\u5305(\u90fd\u662f\u540c\u4e00\u4e2aseq\u53f7\u7801)\uff0c\u7b2c\u4e00\u6b21\u662f\u6b63\u5e38\u8bf7\u6c42,\u540e\u97626\u6b21\u662f\u91cd\u8bd5,\u6b63\u662f\u8be5\u5185\u6838\u53c2\u6570 \u8bbe\u7f6e\u7684\u503c.","title":"\u6700\u540e\uff0c\u4f7f\u7528 telnet \u8fde\u63a5\u6307\u5b9a\u7aef\u53e3"},{"location":"chapter_3/3_net_ipv4_tcp_syn_retries/#_3","text":"\u90a3\u4e48\u95ee\u9898\u6765\u4e86,\u5e94\u7528\u5c42\u771f\u6b63\u7684\u8d85\u65f6\u65f6\u95f4\u4e00\u5b9a\u662f127\u79d2\u5417\uff1f\u8fd8\u662f\u4e0d\u80fd\u5927\u4e8e127\u79d2. \u901a\u8fc7\u4e0a\u9762\u7684\u5b9e\u9a8c\uff0c\u57fa\u672c\u53ef\u4ee5\u5f97\u77e5\u5e94\u7528\u5c42\u7684\u8d85\u65f6\u95f4\u4e00\u5b9a\u4e0d\u80fd\u5927\u4e8e\u5185\u6838\u7684\u8bbe\u5b9a. \u5982\u679c\u5e94\u7528\u5c42\u7684\u8bbe\u5b9a\u5c0f\u4e8e\u5185\u6838\u7684\u8bbe\u5b9a\u5462\uff1f\u8d85\u65f6\u65f6\u95f4\u5e94\u8be5\u662f\u5c0f\u4e8e127\u79d2\u7684.\u6211\u4eec\u7ee7\u7eed\u901a\u8fc7\u5b9e\u9a8c\u6765\u9a8c\u8bc1\u4e0b. \u73b0\u5728\u6211\u7684\u673a\u5668\u4e0a,\u5185\u6838\u53c2\u6570\u662fnet.ipv4.tcp_syn_retries=6,\u6700\u5927\u8d85\u65f6\u65f6\u95f4\u662f 127\u79d2 \u5e94\u7528\u5c42\u4ee3\u7801\u5982\u4e0b: \u4e00\u4e2apython\u7a0b\u5e8f,\u4e3b\u52a8\u8bbe\u7f6esocket\u7684\u8d85\u65f6\u65f6\u95f4\u4e3a5\u79d2. #!/usr/bin/python import socket from datetime import datetime fmt = \"%Y-%m-%d %H:%M:%S\" address = ('127.0.0.1',5000) s = socket.socket() s.settimeout(5) #\u8bbe\u7f6esocket\u8d85\u65f6\u65f6\u95f4\u4e3a5\u79d2 print datetime.now().strftime(fmt) s.connect_ex(address) print datetime.now().strftime(fmt) \u6211\u4eec\u518d\u6765\u89c2\u5bdf\u4e0b\u5e94\u7528\u7a0b\u5e8f\u7684\u8868\u73b0\u548ctcpdump\u7684\u8f93\u51fa \u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u5230\uff0c\u5e94\u7528\u7a0b\u5e8f5\u79d2\u5c31\u8d85\u65f6\u9000\u51fa\u4e86. \u518d\u6765\u770b\u4e0btcpdump\u7684\u8f93\u51fa: \u4ecetcpdump\u7684\u8f93\u51fa\u770b\u5230,\u7b2c\u4e00\u6b21\u53d1\u9001\u4e4b\u540e,\u53ea\u5c1d\u8bd5\u4e862\u6b21\u91cd\u8bd5(2\u76840\u6b21+2\u76841\u6b21),\u56e0\u4e3a\u7b2c\u4e09\u6b21\u91cd\u8bd5\u8981\u7b492\u76842\u6b21\u65b9\u79d2,\u4e5f\u5c31\u662f4\u79d2, \u524d\u97621+2 + 4\u662f7\u79d2,\u800c\u5e94\u7528\u5c42\u8bbe\u7f6e\u7684\u8d85\u65f6\u65f6\u95f4\u662f5\u79d2,\u4ecb\u4e8e2\uff5e3\u4e4b\u95f4,\u56e0\u6b64\u7b2c\u4e09\u6b21\u91cd\u8bd5\u4e0d\u4f1a\u8fdb\u884c. \u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u8bbe\u7f6e\u7684\u8d85\u65f6\u65f6\u95f4\u8db3\u591f\u957f,\u90a3\u4e48\u7b2c\u4e09\u6b21\u91cd\u8bd5\u5e94\u8be5\u572815:57:28\u8fdb\u884c.","title":"\u4e09 \u5e94\u7528\u5c42\u771f\u6b63\u7684\u8d85\u65f6\u65f6\u95f4"},{"location":"chapter_3/3_net_ipv4_tcp_syn_retries/#_4","text":"net.ipv4.tcp_syn_retries\u662f\u7528\u4e8e\u8bbe\u7f6e\u4e3b\u52a8\u53d1\u8d77TCP\u8fde\u63a5\u8d85\u65f6\u65f6,SYN\u5305\u7684\u91cd\u8bd5\u6b21\u6570,\u8be5\u53c2\u6570\u5982\u679c\u662fx,\u90a3\u4e48connect(2)\u8c03\u7528\u6700\u5927\u7684\u8d85\u65f6\u65f6\u95f4\u4e3a2\u7684x\u6b21\u65b9 -1,\u5355\u4f4d\u662f\u79d2. \u5e94\u7528\u7a0b\u5e8f\u6700\u5927\u7684\u8d85\u65f6\u65f6\u95f4\u4e0d\u80fd\u8d85\u8fc7\u5185\u6838\u7684\u8bbe\u5b9a,\u53ef\u4ee5\u5c0f\u4e8e\u7b49\u4e8e\u5185\u6838\u7684\u8bbe\u5b9a.","title":"\u56db \u603b\u7ed3"},{"location":"chapter_3/3_net_ipv4_tcp_syn_retries/#_5","text":"\u672c\u6b21\u53c2\u8003\u6587\u7ae0: http://www.chengweiyang.cn/2017/02/18/linux-connect-timeout/","title":"\u4e94 \u53c2\u8003\u6587\u7ae0"},{"location":"chapter_3/4_linux_kernel_net_v2/","text":"\u4f5c\u4e3a\u4e1a\u52a1SRE\uff0c\u6211\u4eec\u6240\u8fd0\u7ef4\u7684\u4e1a\u52a1\uff0c\u5e38\u5e38\u4ee5Linux+TCP/UDP daemon\u7684\u5f62\u5f0f\u5bf9\u5916\u63d0\u4f9b\u670d\u52a1\u3002SRE\u9700\u8981\u5bf9\u670d\u52a1\u5668\u6570\u636e\u5305\u7684\u63a5\u6536\u548c\u53d1\u9001\u8def\u5f84\u6709\u5168\u9762\u7684\u4e86\u89e3\uff0c\u4ee5\u65b9\u4fbf\u5728\u670d\u52a1\u5f02\u5e38\u65f6\u80fd\u5feb\u901f\u5b9a\u4f4d\u95ee\u9898\u3002 \u4ee5tcp\u534f\u8bae\u4e3a\u4f8b\uff0c\u672c\u6587\u5c06\u5bf9Linux\u5185\u6838\u7f51\u7edc\u6570\u636e\u5305\u63a5\u6536\u7684\u8def\u5f84\u8fdb\u884c\u6574\u7406\u548c\u8bf4\u660e\uff0c\u5e0c\u671b\u5bf9\u5927\u5bb6\u6240\u6709\u5e2e\u52a9\u3002 \u4e00 Linux\u6570\u636e\u5305\u63a5\u6536\u8def\u5f84\u7684\u6574\u4f53\u8bf4\u660e \u63a5\u6536\u6570\u636e\u5305\u662f\u4e00\u4e2a\u590d\u6742\u7684\u8fc7\u7a0b\uff0c\u6d89\u53ca\u5f88\u591a\u5e95\u5c42\u7684\u6280\u672f\u7ec6\u8282,\u8fd9\u91cc\u5148\u505a\u4e00\u4e0b\u5927\u6982\u7684\u8bf4\u660e: NIC (network interface card) \u5728\u7cfb\u7edf\u542f\u52a8\u8fc7\u7a0b\u4e2d\u4f1a\u5411\u7cfb\u7edf\u6ce8\u518c\u81ea\u5df1\u7684\u5404\u79cd\u4fe1\u606f\uff0c\u7cfb\u7edf\u4f1a\u5206\u914d\u4e13\u95e8\u7684\u5185\u5b58\u7f13\u51b2\u533a\uff0c NIC\u63a5\u6536\u5230\u6570\u636e\u5305\u4e4b\u540e\uff0c\u5c31\u4f1a\u5b58\u653e\u5728\u5185\u5b58\u7f13\u51b2\u533a\uff0c\u901a\u8fc7\u786c\u4ef6\u4e2d\u65ad\u901a\u77e5\u5185\u6838\u6709\u65b0\u7684\u6570\u636e\u5305\u9700\u8981\u5904\u7406. \u5185\u6838\u4ece\u7f13\u51b2\u533a\u53d6\u8d70NIC\u63a5\u6536\u8fc7\u6765\u7684\u6570\u636e\uff0c\u4ea4\u7ed9TCP/IP\u534f\u8bae\u6808\u5904\u7406\u3002 \u5185\u6838\u7684TCP/IP\u534f\u8bae\u6808\u4ee3\u7801\u8fdb\u884c\u5904\u7406\u540e\uff0c\u66f4\u65b0\u534f\u8bae\u7684\u5404\u79cd\u72b6\u6001\uff0c\u7136\u540e\u4ea4\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7684socket buffer\u3002 \u7136\u540e\u5e94\u7528\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u901a\u8fc7read()\u7cfb\u7edf\u8c03\u7528\uff0c\u4ece\u5bf9\u5e94\u7684socket\u6587\u4ef6\u4e2d\uff0c\u8bfb\u53d6\u6570\u636e\u3002 \u5bf9\u5185\u6838\u6570\u636e\u5305\u63a5\u6536\u7684\u8def\u5f84\u505a\u4e00\u4e0b\u5206\u5c42\uff0c\u603b\u4f53\u53ef\u5206\u4e3a\u4e09\u5c42: \u7f51\u5361\u5c42\u9762 1.1 \u7f51\u5361\u63a5\u6536\u5230\u6570\u636e\u5305 1.2 \u5c06\u6570\u636e\u5305\u4ece\u7f51\u5361\u786c\u4ef6\u8f6c\u79fb\u5230\u4e3b\u673a\u5185\u5b58\u4e2d. \u5185\u6838\u5c42\u9762 2.1 TCP/IP \u534f\u8bae\u9010\u5c42\u5904\u7406 \u5e94\u7528\u7a0b\u5e8f\u5c42\u9762 3.1 \u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7read()\u7cfb\u7edf\u8c03\u7528,\u4ecesocket buffer\u8bfb\u53d6\u6570\u636e \u5982\u4e0b\u56fe: \u63a5\u4e0b\u6765\u89e3\u91ca\u4e00\u4e0b\u4ec0\u4e48\u662fNAPI \u4e8c \u4ec0\u4e48\u662fNAPI \u7cfb\u7edf\u542f\u52a8\u65f6\u4f1a\u4e3a\u7f51\u5361\u5206\u914d Ring Buffer (\u73af\u5f62\u7f13\u51b2\u533a), Ring Buffer \u653e\u7684\u662f\u4e00\u4e2a\u4e2a Packet Descriptor\uff08\u6570\u636e\u5305\u63cf\u8ff0\u7b26\uff09,\u662f\u5b9e\u9645\u6570\u636e\u5305\u7684\u6307\u9488\u3002\u5b9e\u9645\u7684\u6570\u636e\u5305\u662f\u5b58\u653e\u5728\u53e6\u4e00\u5757\u5185\u5b58\u533a\u57df\u4e2d\uff08\u7531\u7f51\u5361Driver\u9884\u5148\u7533\u8bf7\u597d\uff09\uff0c\u79f0\u4e3ask_buffers, sk_buffers\u662f\u53ef\u4ee5\u7531 DMA \u76f4\u63a5\u8bbf\u95ee\u7684. Ring Buffer \u91cc\u7684Packet Descriptor \uff0c\u6709\u4e24\u79cd\u72b6\u6001\uff1a ready \u548c used \u3002\u521d\u59cb\u65f6 Descriptor \u662f\u7a7a\u7684\uff0c\u6307\u5411\u4e00\u4e2a\u7a7a\u7684 sk_buffer\uff0c\u5904\u5728 ready \u72b6\u6001\u3002\u5f53\u6709\u6570\u636e\u65f6\uff0cDMA\u8d1f\u8d23\u4ece NIC\u53d6\u6570\u636e\uff0c\u5e76\u5728 Ring Buffer \u4e0a\u6309\u987a\u5e8f\u627e\u5230\u4e0b\u4e00\u4e2a ready\u7684Descriptor\uff0c\u5c06\u6570\u636e\u5b58\u5165\u8be5 Descriptor \u6307\u5411\u7684sk_buffer \u4e2d\uff0c\u5e76\u6807\u8bb0Descriptor\u4e3aused\u3002\u56e0\u4e3a\u662f\u6309\u987a\u5e8f\u627eready\u7684Descriptor,\u6240\u4ee5Ring Buffer\u662f\u4e2aFIFO\u7684\u961f\u5217\u3002 \u5185\u6838\u91c7\u7528 struct sk_buffer \u6765\u63cf\u8ff0\u4e00\u4e2a\u6536\u5230\u7684\u6570\u636e\u5305, sk_buffer \u5185\u6709\u4e2adata\u6307\u9488\u4f1a\u6307\u5411\u5b9e\u9645\u7684\u7269\u7406\u5185\u5b58\u3002 \u5f53\u901a\u8fc7DMA \u673a\u5236\u5b58\u653e\u5b8c\u6570\u636e\u4e4b\u540e\uff0cNIC\u4f1a\u89e6\u53d1\u4e00\u4e2aIRQ(\u786c\u4ef6\u4e2d\u65ad)\u8ba9 CPU \u53bb\u5904\u7406\u6536\u5230\u7684\u6570\u636e\u3002\u56e0\u4e3a\u6bcf\u6b21\u89e6\u53d1 IRQ \u540e CPU \u90fd\u8981\u82b1\u8d39\u65f6\u95f4\u53bb\u5904\u7406 Interrupt Handler\uff0c\u5982\u679c NIC \u6bcf\u6536\u5230\u4e00\u4e2a Packet \u90fd\u89e6\u53d1\u4e00\u4e2a IRQ \u4f1a\u5bfc\u81f4 CPU \u82b1\u8d39\u5927\u91cf\u7684\u65f6\u95f4\u6267\u884c Interrupt Handler\uff0c\u800c\u6bcf\u6b21\u6267\u884c\u53ea\u80fd\u4ece Ring Buffer \u4e2d\u62ff\u51fa\u4e00\u4e2a Packet\uff0c\u867d\u7136 Interrupt Handler \u6267\u884c\u65f6\u95f4\u5f88\u77ed\uff0c\u4f46\u8fd9\u4e48\u505a\u975e\u5e38\u4f4e\u6548\uff0c\u5e76\u4f1a\u7ed9 CPU \u5e26\u6765\u5f88\u591a\u8d1f\u62c5\u3002\u6240\u4ee5\u76ee\u524d\u90fd\u662f\u91c7\u7528\u4e00\u4e2a\u53eb\u505a New API(NAPI) \u7684\u673a\u5236\uff0c\u53bb\u5bf9 IRQ \u505a\u5408\u5e76\u4ee5\u51cf\u5c11 IRQ \u6b21\u6570\uff0c\u76ee\u524d\u5927\u90e8\u5206\u7f51\u5361Driver \u90fd\u652f\u6301NAPI\u673a\u5236\u3002 NAPI\u673a\u5236\u662f\u5982\u4f55\u5408\u5e76\u548c\u51cf\u5c11IRQ\u6b21\u6570\u7684,\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a: \u4e2d\u65ad+\u8f6e\u8be2 \u3002\u5728\u6570\u636e\u91cf\u5927\u65f6\uff0c\u4e00\u6b21\u4e2d\u65ad\u540e\u901a\u8fc7\u8f6e\u8be2\u63a5\u6536\u4e00\u5b9a\u6570\u91cf\u6570\u636e\u5305\u518d\u8fd4\u56de\uff0c\u907f\u514d\u4ea7\u751f\u591a\u6b21\u4e2d\u65ad,\u5177\u4f53\u7ec6\u8282\u5927\u5bb6\u53ef\u4ee5\u53c2\u8003 \u8fd9\u7bc7\u6587\u7ae0 . \u4e09 \u6982\u62ec\u4e00\u4e0b\u7f51\u5361\u5c42\u9762\u6574\u4e2a\u6570\u636e\u5305\u7684\u63a5\u6536\u8fc7\u7a0b\uff1a \u9a71\u52a8\u7a0b\u5e8f\u4e8b\u5148\u5728\u5185\u5b58\u4e2d\u5206\u914d\u4e00\u7247\u7f13\u51b2\u533a\u6765\u63a5\u6536\u6570\u636e\u5305,\u53eb\u505ask_buffers. \u5c06\u4e0a\u8ff0\u7f13\u51b2\u533a\u7684\u5730\u5740\u548c\u5927\u5c0f\uff08\u5373\u6570\u636e\u5305\u63cf\u8ff0\u7b26\uff09\uff0c\u52a0\u5165\u5230rx ring buffer\u3002\u63cf\u8ff0\u7b26\u4e2d\u7684\u7f13\u51b2\u533a\u5730\u5740\u662fDMA\u4f7f\u7528\u7684\u7269\u7406\u5730\u5740; \u9a71\u52a8\u7a0b\u5e8f\u901a\u77e5\u7f51\u5361\u6709\u65b0\u7684\u63cf\u8ff0\u7b26(\u6216\u8005\u8bf4\u6709\u7a7a\u95f2\u53ef\u7528\u7684\u63cf\u8ff0\u7b26) \u7f51\u5361\u4ecerx ring buffer\u4e2d\u53d6\u51fa\u63cf\u8ff0\u7b26,\u4ece\u800c\u83b7\u53d6\u7f13\u51b2\u533a\u7684\u5730\u5740\u548c\u5927\u5c0f. \u5f53\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u5305\u5230\u8fbe\uff0c\u7f51\u5361(NIC)\u8c03\u7528DMA engine\uff0c\u628a\u6570\u636e\u5305\u653e\u5165sk_buffer. \u5982\u679c\u6574\u4e2a\u8fc7\u7a0b\u6b63\u5e38,\u7f51\u5361\u4f1a\u53d1\u8d77\u4e2d\u65ad\uff0c\u901a\u77e5\u5185\u6838\u7684\u4e2d\u65ad\u7a0b\u5e8f\u5c06\u6570\u636e\u5305\u4f20\u9012\u7ed9IP\u5c42\uff0c\u8fdb\u5165TCP/IP\u534f\u8bae\u6808\u5904\u7406\u3002 \u6bcf\u4e2a\u6570\u636e\u5305\u7ecf\u8fc7TCP\u5c42\u4e00\u7cfb\u5217\u590d\u6742\u7684\u6b65\u9aa4\uff0c\u66f4\u65b0TCP\u72b6\u6001\u673a\uff0c\u6700\u7ec8\u5230\u8fbesocket\u7684recv Buffer\uff0c\u7b49\u5f85\u88ab\u5e94\u7528\u7a0b\u5e8f\u63a5\u6536\u5904\u7406\u3002 \u7136\u540e,\u5185\u6838\u5e94\u8be5\u4f1a\u628a\u521a\u5360\u7528\u6389\u7684\u63cf\u8ff0\u7b26\u91cd\u65b0\u653e\u5165ring buffer\uff0c\u8fd9\u6837\u7f51\u5361\u5c31\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528\u63cf\u8ff0\u7b26\u4e86\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528ethtool\u547d\u4ee4\uff0c\u8fdb\u884cRing Buffer\u7684\u67e5\u770b\u548c\u8bbe\u7f6e. 1 \u67e5\u770b\u7f51\u5361\u5f53\u524d\u7684\u8bbe\u7f6e(\u5305\u62ecRing Buffer): ethtool -g eth1 2 \u6539\u53d8Ring Buffer\u5927\u5c0f: ethtool -G eth1 rx 4096 tx 4096 \u56db \u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5982\u4f55\u628a\u6570\u636e\u5305\u4f20\u9012\u7ed9\u7f51\u7edc\u534f\u8bae\u5c42 \u6211\u4eec\u901a\u8fc7\u4e00\u5f20\u56fe\u6765\u8bf4\u660e\u4e0b, \u4e0a\u56fe\u4e2d\u6d89\u53ca\u5230\u975e\u5e38\u591a\u7684\u6280\u672f\u7ec6\u8282\uff0c\u9650\u4e8e\u7bc7\u5e45\u6211\u4eec\u53ea\u505a\u603b\u4f53\u7684\u8bf4\u660e: NIC\u53d1\u8d77\u7684\u786c\u4ef6\u4e2d\u65ad\uff08\u4e5f\u79f0\u4e3a\u4e2d\u65ad\u5904\u7406\u7684\u4e0a\u534a\u90e8\uff09,\u88ab\u5185\u6838\u6267\u884c\u4e4b\u540e\uff0c\u5f00\u542f\u4e86\u8f6f\u4e2d\u65ad\uff08\u4e2d\u65ad\u5904\u7406\u7684\u4e0b\u534a\u90e8\uff09\uff0c\u5e76\u9a6c\u4e0a\u9000\u51fa\u786c\u4ef6\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f,\u4ee5\u4fbf\u5176\u4ed6\u786c\u4ef6\u53ef\u4ee5\u7ee7\u7eed\u53d1\u8d77\u786c\u4ef6\u4e2d\u65ad. \u8f6f\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u4e2d\uff0c\u901a\u8fc7poll\u5faa\u73af\u628a\u6570\u636e\u4eceRing Buffer\u53d6\u8d70\uff0c\u4f20\u7ed9\u7f51\u7edc\u534f\u8bae\u5c42\u5904\u7406\uff0c\u7136\u540e\u91cd\u65b0\u5f00\u542f\u4e4b\u524d\u5df2\u7ecf\u7981\u7528\u7684\u7f51\u5361\u786c\u4ef6\u4e2d\u65ad. \u5f53\u6709\u65b0\u7684\u6570\u636e\u5305\u5230\u8fbe\u7f51\u5361\u65f6,\u56de\u5230\u7b2c1\u6b65. \u8fd9\u91cc\u6709\u51e0\u70b9\u9700\u8981\u989d\u5916\u8bf4\u660e: \u4ec0\u4e48\u662f\u4e2d\u65ad\u5904\u7406\u7684\u4e0a\u534a\u90e8\u548c\u4e0b\u534a\u90e8 \u6211\u4eec\u77e5\u9053\u4e2d\u65ad\u968f\u65f6\u53ef\u80fd\u53d1\u751f\uff0c\u56e0\u6b64\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u4e5f\u5c31\u968f\u65f6\u53ef\u80fd\u6267\u884c\u3002\u6240\u4ee5\u5fc5\u987b\u4fdd\u8bc1\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u80fd\u591f\u5feb\u901f\u6267\u884c\uff0c\u8fd9\u6837\u624d\u80fd\u5c3d\u5feb\u6062\u590d\u88ab\u4e2d\u65ad\u7684\u4ee3\u7801\u3002\u56e0\u6b64\u5c3d\u7ba1\u5bf9\u786c\u4ef6\u800c\u8a00\uff0c\u64cd\u4f5c\u7cfb\u7edf\u80fd\u8fc5\u901f\u5bf9\u5176\u4e2d\u65ad\u8fdb\u884c\u670d\u52a1\u975e\u5e38\u91cd\u8981\uff0c\u800c\u5bf9\u4e8e\u7cfb\u7edf\u5176\u4ed6\u90e8\u5206\u800c\u8a00\uff0c\u8ba9\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5c3d\u53ef\u80fd\u5728\u77ed\u65f6\u95f4\u5185\u5b8c\u6210\u8fd0\u884c\u4e5f\u540c\u6837\u91cd\u8981\u3002\u6240\u4ee5\u6211\u4eec\u4e00\u822c\u628a\u4e2d\u65ad\u5904\u7406\u5207\u4e3a2\u4e2a\u90e8\u5206\uff0c\u4e0a\u534a\u90e8\u5728\u63a5\u6536\u5230\u4e00\u4e2a\u4e2d\u65ad\u65f6\u7acb\u523b\u5f00\u59cb\u6267\u884c\uff0c\u4f46\u4ed6\u53ea\u505a\u5fc5\u8981\u7684\u5de5\u4f5c\uff0c\u4f8b\u5982\u5bf9\u63a5\u6536\u7684\u4e2d\u65ad\u8fdb\u884c\u5e94\u7b54\u6216\u590d\u4f4d\u786c\u4ef6\uff0c\u8fd9\u4e9b\u5de5\u4f5c\u90fd\u662f\u5728\u6240\u6709\u4e2d\u65ad\u88ab\u7981\u6b62\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u7684\u3002\u800c\u90a3\u4e9b\u5141\u8bb8\u88ab\u7a0d\u540e\u6267\u884c\u7684\u5de5\u4f5c\uff0c\u90fd\u4f1a\u63a8\u5230\u4e0b\u534a\u90e8\u53bb\uff0c\u4e0b\u534a\u90e8\u5e76\u4e0d\u4f1a\u9a6c\u4e0a\u6267\u884c\uff0c\u800c\u662f\u4f1a\u5728\u7a0d\u540e\u9002\u5f53\u7684\u65f6\u673a\u6267\u884c\u3002 \u7f51\u5361\u7684\u8f6f\u4e2d\u65ad\u5904\u7406 \u73b0\u5728\u7684\u7f51\u5361\u57fa\u672c\u90fd\u652f\u6301 RSS(Receive Side Scaling) \uff0c\u4e5f\u5c31\u662f\u591a\u5bf9\u5217\u6280\u672f\u3002\u4e00\u5f20\u7f51\u5361\u6709\u591a\u4e2a\u961f\u5217\uff0c\u6bcf\u4e2a\u961f\u5217\u90fd\u6709\u5404\u81ea\u7684IRQ\u53f7\u548cRing Buffer\uff0c\u4f46\u662f\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7f51\u5361\u7684\u8f6f\u4e2d\u65ad\u90fd\u662f\u5728CPU0\u4e0a\u5904\u7406\uff0c\u5728\u6d41\u91cf\u5927\u7684\u65f6\u5019\uff0c\u4f1a\u9020\u6210CPU0\u8d1f\u8f7d\u6253\u6ee1\uff0c\u5f15\u8d77\u4e22\u5305. \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 \u7ed1\u5b9a\u4e2d\u65ad\u548cCPU\u7684\u4eb2\u548c\u6027\uff0c\u628a\u4e2d\u65ad\u5904\u7406\u5747\u8861\u5230\u591a\u6838\u5fc3\u4e0a \uff0c\u63d0\u5347\u7cfb\u7edf\u6574\u4f53\u6027\u80fd. \u4ec0\u4e48\u662fRPS RPS \u5168\u79f0\u662f Receive Packet Steering,\u91c7\u7528\u8f6f\u4ef6\u6a21\u62df\u7684\u65b9\u5f0f\uff0c\u5b9e\u73b0\u4e86\u591a\u961f\u5217\u7f51\u5361\u6240\u63d0\u4f9b\u7684\u529f\u80fd\uff0c\u5206\u6563\u4e86\u5728\u591aCPU\u7cfb\u7edf\u4e0a\u6570\u636e\u63a5\u6536\u65f6\u7684\u8f6f\u4e2d\u65ad\u8d1f\u8f7d, \u628a\u8f6f\u4e2d\u65ad\u5206\u5230\u5404\u4e2aCPU\u5904\u7406\uff0c\u800c\u4e0d\u9700\u8981\u786c\u4ef6\u652f\u6301\uff0c\u5728\u591a\u6838CPU\u548c\u5355\u961f\u5217\u7f51\u5361\u7684\u60c5\u51b5\u4e0b\uff0c\u5f00\u542fRPS\u53ef\u4ee5\u5927\u5927\u63d0\u5347\u7f51\u7edc\u6027\u80fd. \u5982\u679c\u7cfb\u7edf\u5f00\u4e86RPS,\u6570\u636e\u5305\u4f1a\u88ab\u7f13\u51b2\u5728TCP\u5c42\u4e4b\u524d\u7684\u961f\u5217\u4e2d,\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7net.core.netdev_max_backlog\u9002\u5f53\u52a0\u5927\u8fd9\u4e2a\u961f\u5217\u7684\u957f\u5ea6\uff0c\u4ee5\u4fdd\u8bc1\u4e0a\u5c42\u7684\u5904\u7406\u65f6\u95f4. \u4e94 TCP/IP\u534f\u8bae\u6808\u5c42\u9762 \u6b64\u65f6\u6570\u636e\u5305\u5df2\u7ecf\u63a5\u5165\u5185\u6838\u5904\u7406\u533a\u57df\uff0c\u7531\u5185\u6838\u7684TCP/IP\u534f\u8bae\u6808\u5904\u7406 \uff08\u4e00\uff09 \u8fde\u63a5\u5efa\u7acb \u5927\u5bb6\u77e5\u9053\uff0c\u4e24\u4e2a\u57fa\u4e8etcp\u534f\u8bae\u7684socket\u8981\u901a\u4fe1\uff0c\u9996\u5148\u8981\u8fdb\u884c\u8fde\u63a5\u5efa\u7acb\u7684\u8fc7\u7a0b\uff0c\u7136\u540e\u624d\u662f\u6570\u636e\u4f20\u8f93\u7684\u8fc7\u7a0b\u3002 \u6211\u4eec\u5148\u7b80\u5355\u770b\u4e0b\u8fde\u63a5\u7684\u5efa\u7acb\u8fc7\u7a0b\uff0c\u5ba2\u6237\u7aef\u5411server\u53d1\u9001SYN\u5305\uff0cserver\u56de\u590dSYN\uff0bACK\uff0c\u540c\u65f6\u5c06\u8fd9\u4e2a\u5904\u4e8eSYN_RECV\u72b6\u6001\u7684\u8fde\u63a5\u4fdd\u5b58\u5230\u534a\u8fde\u63a5\u961f\u5217\u3002\u5ba2\u6237\u7aef\u8fd4\u56deACK\u5305\u5b8c\u6210\u4e09\u6b21\u63e1\u624b\uff0cserver\u5c06ESTABLISHED\u72b6\u6001\u7684\u8fde\u63a5\u79fb\u5165accept\u961f\u5217\uff0c\u7b49\u5f85\u5e94\u7528\u8c03\u7528accept()\u3002 \u53ef\u4ee5\u770b\u5230\u5efa\u7acb\u8fde\u63a5\u6d89\u53ca\u4e24\u4e2a\u961f\u5217\uff1a \u534a\u8fde\u63a5\u961f\u5217(SYN Queue): \u4fdd\u5b58SYN_RECV\u72b6\u6001\u7684\u8fde\u63a5\u3002\u961f\u5217\u957f\u5ea6\u7531net.ipv4.tcp_max_syn_backlog\u8bbe\u7f6e. \u5b8c\u6574\u8fde\u63a5\u961f\u5217(ACCEPT Queue):\u4fdd\u5b58ESTABLISHED\u72b6\u6001\u7684\u8fde\u63a5\u3002\u961f\u5217\u957f\u5ea6\u4e3amin(net.core.somaxconn, backlog)\u3002\u5176\u4e2dbacklog\u662f\u6211\u4eec\u521b\u5efaServerSocket(int port,int backlog)\u65f6\u6307\u5b9a\u7684\u53c2\u6570\uff0c\u6700\u7ec8\u4f1a\u4f20\u9012\u7ed9listen\u65b9\u6cd5\uff1a #include int listen(int sockfd, int backlog); \u5982\u679c\u6211\u4eec\u8bbe\u7f6e\u7684backlog\u5927\u4e8enet.core.somaxconn\uff0c\u5b8c\u6574\u8fde\u63a5\u961f\u5217\u7684\u957f\u5ea6\u5c06\u88ab\u8bbe\u7f6e\u4e3anet.core.somaxconn\u3002 \u6ce8\u610f\uff1a\u4e0d\u540c\u7684\u7f16\u7a0b\u8bed\u8a00\u90fd\u6709\u76f8\u5e94\u7684socket\u7533\u8bf7\u65b9\u6cd5,\u6bd4\u5982Python\u662fsocket\u6a21\u5757.\u5728\u670d\u52a1\u7aef\u76d1\u542c\u4e00\u4e2a\u7aef\u53e3\uff0c\u5e95\u5c42\u90fd\u8981\u7ecf\u8fc73\u4e2a\u6b65\u9aa4\uff1a \u7533\u8bf7socket\u3001bind\u76f8\u5e94\u7684IP\u548cport\u3001\u8c03\u7528listen\u65b9\u6cd5\u8fdb\u884c\u76d1\u542c\u3002\u8fd9\u4e2alisten\u65b9\u6cd5python\u4f1a\u8fdb\u884c\u5c01\u88c5\uff0c\u522b\u7684\u7f16\u7a0b\u8bed\u8a00\u4e5f\u4f1a\u8fdb\u884c\u5c01\u88c5\uff0c\u4f46\u6700\u7ec8\u90fd\u662f\u8c03\u7528\u7cfb\u7edf\u7684listen()\u8c03\u7528 \u6211\u4eec\u5bf9\u8fd9\u4e24\u4e2a\u961f\u5217\u505a\u4e00\u4e0b\u603b\u7ed3: \u961f\u5217\u540d\u79f0 \u8bf4\u660e \u6ce8\u610f\u70b9 \u534a\u8fde\u63a5\u961f\u5217(incomplete connection queue) Maximal number of remembered connection requests, which have not received an acknowledgment from connecting client. \u5373\u8fd8\u6ca1\u6709\u88ab\u5ba2\u6237\u7aef\u8fd4\u56deack\u7684\u5bf9\u5217\u7684\u957f\u5ea6\u3002 1 \u6700\u5927\u957f\u5ea6\u7531/proc/sys/net/ipv4/tcp_max_syn_backlog\u53c2\u6570\u51b3\u5b9a\uff0c\u7528\u6237\u7533\u8bf7socket\u65f6\u4e0d\u80fd\u63a7\u5236\u5176\u957f\u5ea6\u3002 2 \u7cfb\u7edf\u7ba1\u7406\u5458\u53ef\u4ee5\u5f00\u542fnet.ipv4.tcp_syncookies\uff0c\u9632\u8303\u5c11\u91cf\u7684tcp syn\u653b\u51fb\u3002 \u5b8c\u5168\u8fde\u63a5\u961f\u5217(complete connection queue) the queue length for completely established sockets waiting to be accepted\u3002\u5df2\u7ecf\u63e1\u624b\u5b8c\u6210\uff0c\u4f46\u8fd8\u6ca1\u6709\u88abaccepted\u7684\u961f\u5217. 1 \u666e\u901a\u7528\u6237\u7533\u8bf7socket\u65f6\u53ef\u4ee5\u63a7\u5236\u8fd9\u4e2a\u961f\u5217\u7684\u957f\u5ea6\uff0c\u4f46\u4e0d\u80fd\u8d85\u8fc7\u5185\u6838net.core.somaxconn\u7684\u8bbe\u5b9a 2.\u7cfb\u7edf\u7ba1\u7406\u5458\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u76f8\u5bf9\u8f83\u5927\u7684\u503c\uff0c\u4f8b\u598265535,\u65b9\u4fbf\u666e\u901a\u7528\u6237\u6309\u9700\u7533\u8bf7 \uff08\u4e8c\uff09 \u6570\u636e\u4f20\u8f93 \u8fde\u63a5\u5efa\u7acb\u540e,\u5c31\u5230\u4e86socket\u6570\u636e\u4f20\u8f93\u7684\u5c42\u9762\u3002\u6b64\u65f6kernel\u80fd\u591f\u4e3a\u5e94\u7528\u7a0b\u5e8f\u505a\u7684\uff0c\u5c31\u662f\u901a\u8fc7socket Recv Buffer\u7f13\u5b58\u6570\u636e,\u5c3d\u91cf\u4fdd\u8bc1\u4e0a\u5c42\u5904\u7406\u65f6\u95f4. 1 Recv Buffer\u81ea\u52a8\u8c03\u8282\u673a\u5236 kernel\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\uff0c\u81ea\u52a8\u8c03\u8282Recv Buffer\u7684\u5927\u5c0f,\u4ee5\u671f\u627e\u5230\u6027\u80fd\u548c\u8d44\u6e90\u7684\u5e73\u8861\u70b9. \u5f53net.ipv4.tcp_moderate_rcvbuf\u8bbe\u7f6e\u4e3a1\u65f6\uff0c\u81ea\u52a8\u8c03\u8282\u673a\u5236\u751f\u6548\uff0c\u6bcf\u4e2aTCP\u8fde\u63a5\u7684recv Buffer\u7531\u4e0b\u9762\u76843\u5143\u6570\u7ec4\u6307\u5b9a(min, default, max)\uff1a net.ipv4.tcp_rmem = 4096 87380 16777216 \u6700\u521dRecv Buffer\u88ab\u8bbe\u7f6e\u4e3a87380\uff0c\u540c\u65f6\u8fd9\u4e2a\u7f3a\u7701\u503c\u4f1a\u8986\u76d6net.core.rmem_default\u7684\u8bbe\u7f6e,\u968f\u540erecv buffer\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u5728\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u52a8\u6001\u8c03\u8282\u3002 \u5f53net.ipv4.tcp_moderate_rcvbuf\u88ab\u8bbe\u7f6e\u4e3a0\uff0c\u6216\u8005\u8bbe\u7f6e\u4e86socket\u9009\u9879SO_RCVBUF\uff0c\u7f13\u51b2\u7684\u52a8\u6001\u8c03\u8282\u673a\u5236\u88ab\u5173\u95ed\u3002 \u5982\u679c\u7f13\u51b2\u7684\u52a8\u6001\u8c03\u8282\u673a\u5236\u88ab\u5173\u95ed,\u540c\u65f6socket\u81ea\u5df1\u4e5f\u6ca1\u6709\u8bbe\u7f6eSO_RCVBUF\u9009\u9879\uff0c\u90a3\u4e48\u4e00\u4e2asocket\u7684\u9ed8\u8ba4Buffer \u5927\u5c0f\u5c06\u7531net.core.rmem_default\u51b3\u5b9a\uff0c\u4f46\u662f\u5e94\u7528\u7a0b\u5e8f\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7setsockopt()\u7cfb\u7edf\u8c03\u7528\uff0c\u52a0\u5927\u81ea\u5df1\u7684Recv Buffer,\u6700\u5927\u4e0d\u80fd\u8d85\u8fc7net.core.rmem_max\u7684\u8bbe\u5b9a. \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u5982\u4e0b\u603b\u7ed3: \u6ca1\u6709\u7279\u6b8a\u60c5\u51b5,\u5efa\u8bae\u6253\u5f00net.ipv4.tcp_moderate_rcvbuf=1,\u8fd9\u6837kernel\u4f1a\u81ea\u52a8\u8c03\u6574\u6bcf\u4e2asocket\u7684Recv Buffer \u6211\u4eec\u5e94\u8be5\u628anet.ipv4.tcp_rmem\u4e2dmax\u503c\u548cnet.core.rmem_max\u503c\u8bbe\u7f6e\u6210\u4e00\u81f4\uff0c\u8fd9\u6837\u5047\u8bbe\u5e94\u7528\u7a0b\u5e8f\u6ca1\u6709\u5173\u6ce8\u5230\u8fd9\u4e2a\u70b9\uff0c\u4ecd\u7136\u53ef\u4ee5\u7531kernel\u628a\u5b83\u81ea\u52a8\u8c03\u8282\u6210\u7cfb\u7edf\u6700\u5927\u7684Recv Buffer. Recv Buffer\u7684\u9ed8\u8ba4\u503c\u53ef\u4ee5\u9002\u5f53\u8fdb\u884c\u63d0\u9ad8,\u5305\u62ecnet.core.rmem_default\u548cnet.ipv4.tcp_rmem\u4e2d\u7684default\u8bbe\u7f6e,\u4ee5\u66f4\u52a0\u6fc0\u8fdb\u7684\u65b9\u5f0f\u4f20\u8f93\u6570\u636e. \u516d \u5173\u4e8eLinux\u63a5\u6536\u6570\u636e\u5305\u94fe\u8def\u4f18\u5316\u7684\u6574\u4f53\u603b\u7ed3 \u5e8f\u53f7 \u6570\u636e\u63a5\u6536\u9636\u6bb5 \u5e38\u7528\u4f18\u5316\u6280\u80fd 1 \u7f51\u5361Ring Buffer \u6839\u636e\u4e0d\u540c\u7684\u7f51\u5361\u7c7b\u578b\uff0c\u628aRing Buffer\u8bbe\u7f6e\u4e3a\u7f51\u5361\u652f\u6301\u7684\u6700\u5927\u503c. 2 \u7f51\u5361\u8f6f\u4e2d\u65ad \u624b\u5de5\u7ed1\u5b9a\u4e2d\u65ad\u5230\u591a\u6838CPU\uff0c\u907f\u514dCPU0\u7684\u6027\u80fd\u74f6\u9888, \u63d0\u5347\u7cfb\u7edf\u6574\u4f53\u6027\u80fd. 3 \u7f51\u5361\u7f13\u51b2\u533a\u5230TCP/IP\u6808\u4e4b\u95f4 \u9002\u5f53\u589e\u52a0net.core.netdev_max_backlog\u7684\u503c,\u8c03\u5927Input Packet Queue. 4 \u534a\u8fde\u63a5\u961f\u5217 \u5f00\u542fnet.ipv4.tcp_syncookies=1\uff0c\u9632\u8303\u5c11\u91cf\u7684tcp syn\u653b\u51fb. 6 \u5b8c\u6574\u8fde\u63a5\u961f\u5217 \u901a\u8fc7net.core.somaxconn,\u8c03\u5927\u5b8c\u6574\u961f\u5217\u7684\u4e0a\u9650,\u7ed9\u5e94\u7528\u7a0b\u5e8f\u4ee5\u66f4\u591a\u5904\u7406\u65f6\u95f4. 7 Socket Recv Buffer \u5f00\u542fnet.ipv4.tcp_moderate_rcvbuf=1,\u5e76\u4e14\u628anet.ipv4.tcp_rmem/net.core.rmem_max\u4e2d\u9ed8\u8ba4\u503c\u548c\u6700\u5927\u503c\u8c03\u5927. \u4e03 \u53c2\u8003\u6587\u7ae0 linux\u7f51\u7edc\u4e4b\u6570\u636e\u5305\u7684\u63a5\u53d7\u8fc7\u7a0b https://www.jianshu.com/p/e6162bc984c8 Linux \u7f51\u7edc\u534f\u8bae\u6808\u6536\u6d88\u606f\u8fc7\u7a0b-Ring Buffer https://ylgrgyq.github.io/2017/07/23/linux-receive-packet-1/ Linux \u7f51\u7edc\u534f\u8bae\u6808\u6536\u6d88\u606f\u8fc7\u7a0b-Per CPU Backlog https://ylgrgyq.github.io/2017/07/24/linux-receive-packet-2/ \u7f51\u5361\u6536\u53d1\u5305\u603b\u7ed3 https://www.zybuluo.com/myecho/note/1068383 /proc/sys/net\u6587\u6863\u8bf4\u660e https://www.kernel.org/doc/Documentation/sysctl/net.txt NAPI https://wiki.linuxfoundation.org/networking/napi Linux\u6280\u5de7:\u591a\u6838\u4e0b\u7ed1\u5b9a\u7f51\u5361\u4e2d\u65ad\u5230\u4e0d\u540cCPU\uff08core\uff09\u603b\u7ed3 https://blog.csdn.net/benpaobagzb/article/details/51044420 Network interface controller https://en.wikipedia.org/wiki/Network_interface_controller#RSS","title":"\u7b2c\u56db\u7bc7 Linux\u7f51\u7edc\u6570\u636e\u5305\u7684\u63ed\u79d8\u4ee5\u53ca\u5e38\u89c1\u7684\u8c03\u4f18\u65b9\u5f0f\u603b\u7ed3"},{"location":"chapter_3/4_linux_kernel_net_v2/#linux","text":"\u63a5\u6536\u6570\u636e\u5305\u662f\u4e00\u4e2a\u590d\u6742\u7684\u8fc7\u7a0b\uff0c\u6d89\u53ca\u5f88\u591a\u5e95\u5c42\u7684\u6280\u672f\u7ec6\u8282,\u8fd9\u91cc\u5148\u505a\u4e00\u4e0b\u5927\u6982\u7684\u8bf4\u660e: NIC (network interface card) \u5728\u7cfb\u7edf\u542f\u52a8\u8fc7\u7a0b\u4e2d\u4f1a\u5411\u7cfb\u7edf\u6ce8\u518c\u81ea\u5df1\u7684\u5404\u79cd\u4fe1\u606f\uff0c\u7cfb\u7edf\u4f1a\u5206\u914d\u4e13\u95e8\u7684\u5185\u5b58\u7f13\u51b2\u533a\uff0c NIC\u63a5\u6536\u5230\u6570\u636e\u5305\u4e4b\u540e\uff0c\u5c31\u4f1a\u5b58\u653e\u5728\u5185\u5b58\u7f13\u51b2\u533a\uff0c\u901a\u8fc7\u786c\u4ef6\u4e2d\u65ad\u901a\u77e5\u5185\u6838\u6709\u65b0\u7684\u6570\u636e\u5305\u9700\u8981\u5904\u7406. \u5185\u6838\u4ece\u7f13\u51b2\u533a\u53d6\u8d70NIC\u63a5\u6536\u8fc7\u6765\u7684\u6570\u636e\uff0c\u4ea4\u7ed9TCP/IP\u534f\u8bae\u6808\u5904\u7406\u3002 \u5185\u6838\u7684TCP/IP\u534f\u8bae\u6808\u4ee3\u7801\u8fdb\u884c\u5904\u7406\u540e\uff0c\u66f4\u65b0\u534f\u8bae\u7684\u5404\u79cd\u72b6\u6001\uff0c\u7136\u540e\u4ea4\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7684socket buffer\u3002 \u7136\u540e\u5e94\u7528\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u901a\u8fc7read()\u7cfb\u7edf\u8c03\u7528\uff0c\u4ece\u5bf9\u5e94\u7684socket\u6587\u4ef6\u4e2d\uff0c\u8bfb\u53d6\u6570\u636e\u3002 \u5bf9\u5185\u6838\u6570\u636e\u5305\u63a5\u6536\u7684\u8def\u5f84\u505a\u4e00\u4e0b\u5206\u5c42\uff0c\u603b\u4f53\u53ef\u5206\u4e3a\u4e09\u5c42: \u7f51\u5361\u5c42\u9762 1.1 \u7f51\u5361\u63a5\u6536\u5230\u6570\u636e\u5305 1.2 \u5c06\u6570\u636e\u5305\u4ece\u7f51\u5361\u786c\u4ef6\u8f6c\u79fb\u5230\u4e3b\u673a\u5185\u5b58\u4e2d. \u5185\u6838\u5c42\u9762 2.1 TCP/IP \u534f\u8bae\u9010\u5c42\u5904\u7406 \u5e94\u7528\u7a0b\u5e8f\u5c42\u9762 3.1 \u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7read()\u7cfb\u7edf\u8c03\u7528,\u4ecesocket buffer\u8bfb\u53d6\u6570\u636e \u5982\u4e0b\u56fe: \u63a5\u4e0b\u6765\u89e3\u91ca\u4e00\u4e0b\u4ec0\u4e48\u662fNAPI","title":"\u4e00 Linux\u6570\u636e\u5305\u63a5\u6536\u8def\u5f84\u7684\u6574\u4f53\u8bf4\u660e"},{"location":"chapter_3/4_linux_kernel_net_v2/#napi","text":"\u7cfb\u7edf\u542f\u52a8\u65f6\u4f1a\u4e3a\u7f51\u5361\u5206\u914d Ring Buffer (\u73af\u5f62\u7f13\u51b2\u533a), Ring Buffer \u653e\u7684\u662f\u4e00\u4e2a\u4e2a Packet Descriptor\uff08\u6570\u636e\u5305\u63cf\u8ff0\u7b26\uff09,\u662f\u5b9e\u9645\u6570\u636e\u5305\u7684\u6307\u9488\u3002\u5b9e\u9645\u7684\u6570\u636e\u5305\u662f\u5b58\u653e\u5728\u53e6\u4e00\u5757\u5185\u5b58\u533a\u57df\u4e2d\uff08\u7531\u7f51\u5361Driver\u9884\u5148\u7533\u8bf7\u597d\uff09\uff0c\u79f0\u4e3ask_buffers, sk_buffers\u662f\u53ef\u4ee5\u7531 DMA \u76f4\u63a5\u8bbf\u95ee\u7684. Ring Buffer \u91cc\u7684Packet Descriptor \uff0c\u6709\u4e24\u79cd\u72b6\u6001\uff1a ready \u548c used \u3002\u521d\u59cb\u65f6 Descriptor \u662f\u7a7a\u7684\uff0c\u6307\u5411\u4e00\u4e2a\u7a7a\u7684 sk_buffer\uff0c\u5904\u5728 ready \u72b6\u6001\u3002\u5f53\u6709\u6570\u636e\u65f6\uff0cDMA\u8d1f\u8d23\u4ece NIC\u53d6\u6570\u636e\uff0c\u5e76\u5728 Ring Buffer \u4e0a\u6309\u987a\u5e8f\u627e\u5230\u4e0b\u4e00\u4e2a ready\u7684Descriptor\uff0c\u5c06\u6570\u636e\u5b58\u5165\u8be5 Descriptor \u6307\u5411\u7684sk_buffer \u4e2d\uff0c\u5e76\u6807\u8bb0Descriptor\u4e3aused\u3002\u56e0\u4e3a\u662f\u6309\u987a\u5e8f\u627eready\u7684Descriptor,\u6240\u4ee5Ring Buffer\u662f\u4e2aFIFO\u7684\u961f\u5217\u3002 \u5185\u6838\u91c7\u7528 struct sk_buffer \u6765\u63cf\u8ff0\u4e00\u4e2a\u6536\u5230\u7684\u6570\u636e\u5305, sk_buffer \u5185\u6709\u4e2adata\u6307\u9488\u4f1a\u6307\u5411\u5b9e\u9645\u7684\u7269\u7406\u5185\u5b58\u3002 \u5f53\u901a\u8fc7DMA \u673a\u5236\u5b58\u653e\u5b8c\u6570\u636e\u4e4b\u540e\uff0cNIC\u4f1a\u89e6\u53d1\u4e00\u4e2aIRQ(\u786c\u4ef6\u4e2d\u65ad)\u8ba9 CPU \u53bb\u5904\u7406\u6536\u5230\u7684\u6570\u636e\u3002\u56e0\u4e3a\u6bcf\u6b21\u89e6\u53d1 IRQ \u540e CPU \u90fd\u8981\u82b1\u8d39\u65f6\u95f4\u53bb\u5904\u7406 Interrupt Handler\uff0c\u5982\u679c NIC \u6bcf\u6536\u5230\u4e00\u4e2a Packet \u90fd\u89e6\u53d1\u4e00\u4e2a IRQ \u4f1a\u5bfc\u81f4 CPU \u82b1\u8d39\u5927\u91cf\u7684\u65f6\u95f4\u6267\u884c Interrupt Handler\uff0c\u800c\u6bcf\u6b21\u6267\u884c\u53ea\u80fd\u4ece Ring Buffer \u4e2d\u62ff\u51fa\u4e00\u4e2a Packet\uff0c\u867d\u7136 Interrupt Handler \u6267\u884c\u65f6\u95f4\u5f88\u77ed\uff0c\u4f46\u8fd9\u4e48\u505a\u975e\u5e38\u4f4e\u6548\uff0c\u5e76\u4f1a\u7ed9 CPU \u5e26\u6765\u5f88\u591a\u8d1f\u62c5\u3002\u6240\u4ee5\u76ee\u524d\u90fd\u662f\u91c7\u7528\u4e00\u4e2a\u53eb\u505a New API(NAPI) \u7684\u673a\u5236\uff0c\u53bb\u5bf9 IRQ \u505a\u5408\u5e76\u4ee5\u51cf\u5c11 IRQ \u6b21\u6570\uff0c\u76ee\u524d\u5927\u90e8\u5206\u7f51\u5361Driver \u90fd\u652f\u6301NAPI\u673a\u5236\u3002 NAPI\u673a\u5236\u662f\u5982\u4f55\u5408\u5e76\u548c\u51cf\u5c11IRQ\u6b21\u6570\u7684,\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a: \u4e2d\u65ad+\u8f6e\u8be2 \u3002\u5728\u6570\u636e\u91cf\u5927\u65f6\uff0c\u4e00\u6b21\u4e2d\u65ad\u540e\u901a\u8fc7\u8f6e\u8be2\u63a5\u6536\u4e00\u5b9a\u6570\u91cf\u6570\u636e\u5305\u518d\u8fd4\u56de\uff0c\u907f\u514d\u4ea7\u751f\u591a\u6b21\u4e2d\u65ad,\u5177\u4f53\u7ec6\u8282\u5927\u5bb6\u53ef\u4ee5\u53c2\u8003 \u8fd9\u7bc7\u6587\u7ae0 .","title":"\u4e8c  \u4ec0\u4e48\u662fNAPI"},{"location":"chapter_3/4_linux_kernel_net_v2/#_1","text":"\u9a71\u52a8\u7a0b\u5e8f\u4e8b\u5148\u5728\u5185\u5b58\u4e2d\u5206\u914d\u4e00\u7247\u7f13\u51b2\u533a\u6765\u63a5\u6536\u6570\u636e\u5305,\u53eb\u505ask_buffers. \u5c06\u4e0a\u8ff0\u7f13\u51b2\u533a\u7684\u5730\u5740\u548c\u5927\u5c0f\uff08\u5373\u6570\u636e\u5305\u63cf\u8ff0\u7b26\uff09\uff0c\u52a0\u5165\u5230rx ring buffer\u3002\u63cf\u8ff0\u7b26\u4e2d\u7684\u7f13\u51b2\u533a\u5730\u5740\u662fDMA\u4f7f\u7528\u7684\u7269\u7406\u5730\u5740; \u9a71\u52a8\u7a0b\u5e8f\u901a\u77e5\u7f51\u5361\u6709\u65b0\u7684\u63cf\u8ff0\u7b26(\u6216\u8005\u8bf4\u6709\u7a7a\u95f2\u53ef\u7528\u7684\u63cf\u8ff0\u7b26) \u7f51\u5361\u4ecerx ring buffer\u4e2d\u53d6\u51fa\u63cf\u8ff0\u7b26,\u4ece\u800c\u83b7\u53d6\u7f13\u51b2\u533a\u7684\u5730\u5740\u548c\u5927\u5c0f. \u5f53\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u5305\u5230\u8fbe\uff0c\u7f51\u5361(NIC)\u8c03\u7528DMA engine\uff0c\u628a\u6570\u636e\u5305\u653e\u5165sk_buffer. \u5982\u679c\u6574\u4e2a\u8fc7\u7a0b\u6b63\u5e38,\u7f51\u5361\u4f1a\u53d1\u8d77\u4e2d\u65ad\uff0c\u901a\u77e5\u5185\u6838\u7684\u4e2d\u65ad\u7a0b\u5e8f\u5c06\u6570\u636e\u5305\u4f20\u9012\u7ed9IP\u5c42\uff0c\u8fdb\u5165TCP/IP\u534f\u8bae\u6808\u5904\u7406\u3002 \u6bcf\u4e2a\u6570\u636e\u5305\u7ecf\u8fc7TCP\u5c42\u4e00\u7cfb\u5217\u590d\u6742\u7684\u6b65\u9aa4\uff0c\u66f4\u65b0TCP\u72b6\u6001\u673a\uff0c\u6700\u7ec8\u5230\u8fbesocket\u7684recv Buffer\uff0c\u7b49\u5f85\u88ab\u5e94\u7528\u7a0b\u5e8f\u63a5\u6536\u5904\u7406\u3002 \u7136\u540e,\u5185\u6838\u5e94\u8be5\u4f1a\u628a\u521a\u5360\u7528\u6389\u7684\u63cf\u8ff0\u7b26\u91cd\u65b0\u653e\u5165ring buffer\uff0c\u8fd9\u6837\u7f51\u5361\u5c31\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528\u63cf\u8ff0\u7b26\u4e86\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528ethtool\u547d\u4ee4\uff0c\u8fdb\u884cRing Buffer\u7684\u67e5\u770b\u548c\u8bbe\u7f6e. 1 \u67e5\u770b\u7f51\u5361\u5f53\u524d\u7684\u8bbe\u7f6e(\u5305\u62ecRing Buffer): ethtool -g eth1 2 \u6539\u53d8Ring Buffer\u5927\u5c0f: ethtool -G eth1 rx 4096 tx 4096","title":"\u4e09 \u6982\u62ec\u4e00\u4e0b\u7f51\u5361\u5c42\u9762\u6574\u4e2a\u6570\u636e\u5305\u7684\u63a5\u6536\u8fc7\u7a0b\uff1a"},{"location":"chapter_3/4_linux_kernel_net_v2/#_2","text":"\u6211\u4eec\u901a\u8fc7\u4e00\u5f20\u56fe\u6765\u8bf4\u660e\u4e0b, \u4e0a\u56fe\u4e2d\u6d89\u53ca\u5230\u975e\u5e38\u591a\u7684\u6280\u672f\u7ec6\u8282\uff0c\u9650\u4e8e\u7bc7\u5e45\u6211\u4eec\u53ea\u505a\u603b\u4f53\u7684\u8bf4\u660e: NIC\u53d1\u8d77\u7684\u786c\u4ef6\u4e2d\u65ad\uff08\u4e5f\u79f0\u4e3a\u4e2d\u65ad\u5904\u7406\u7684\u4e0a\u534a\u90e8\uff09,\u88ab\u5185\u6838\u6267\u884c\u4e4b\u540e\uff0c\u5f00\u542f\u4e86\u8f6f\u4e2d\u65ad\uff08\u4e2d\u65ad\u5904\u7406\u7684\u4e0b\u534a\u90e8\uff09\uff0c\u5e76\u9a6c\u4e0a\u9000\u51fa\u786c\u4ef6\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f,\u4ee5\u4fbf\u5176\u4ed6\u786c\u4ef6\u53ef\u4ee5\u7ee7\u7eed\u53d1\u8d77\u786c\u4ef6\u4e2d\u65ad. \u8f6f\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u4e2d\uff0c\u901a\u8fc7poll\u5faa\u73af\u628a\u6570\u636e\u4eceRing Buffer\u53d6\u8d70\uff0c\u4f20\u7ed9\u7f51\u7edc\u534f\u8bae\u5c42\u5904\u7406\uff0c\u7136\u540e\u91cd\u65b0\u5f00\u542f\u4e4b\u524d\u5df2\u7ecf\u7981\u7528\u7684\u7f51\u5361\u786c\u4ef6\u4e2d\u65ad. \u5f53\u6709\u65b0\u7684\u6570\u636e\u5305\u5230\u8fbe\u7f51\u5361\u65f6,\u56de\u5230\u7b2c1\u6b65. \u8fd9\u91cc\u6709\u51e0\u70b9\u9700\u8981\u989d\u5916\u8bf4\u660e:","title":"\u56db \u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5982\u4f55\u628a\u6570\u636e\u5305\u4f20\u9012\u7ed9\u7f51\u7edc\u534f\u8bae\u5c42"},{"location":"chapter_3/4_linux_kernel_net_v2/#_3","text":"\u6211\u4eec\u77e5\u9053\u4e2d\u65ad\u968f\u65f6\u53ef\u80fd\u53d1\u751f\uff0c\u56e0\u6b64\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u4e5f\u5c31\u968f\u65f6\u53ef\u80fd\u6267\u884c\u3002\u6240\u4ee5\u5fc5\u987b\u4fdd\u8bc1\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u80fd\u591f\u5feb\u901f\u6267\u884c\uff0c\u8fd9\u6837\u624d\u80fd\u5c3d\u5feb\u6062\u590d\u88ab\u4e2d\u65ad\u7684\u4ee3\u7801\u3002\u56e0\u6b64\u5c3d\u7ba1\u5bf9\u786c\u4ef6\u800c\u8a00\uff0c\u64cd\u4f5c\u7cfb\u7edf\u80fd\u8fc5\u901f\u5bf9\u5176\u4e2d\u65ad\u8fdb\u884c\u670d\u52a1\u975e\u5e38\u91cd\u8981\uff0c\u800c\u5bf9\u4e8e\u7cfb\u7edf\u5176\u4ed6\u90e8\u5206\u800c\u8a00\uff0c\u8ba9\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5c3d\u53ef\u80fd\u5728\u77ed\u65f6\u95f4\u5185\u5b8c\u6210\u8fd0\u884c\u4e5f\u540c\u6837\u91cd\u8981\u3002\u6240\u4ee5\u6211\u4eec\u4e00\u822c\u628a\u4e2d\u65ad\u5904\u7406\u5207\u4e3a2\u4e2a\u90e8\u5206\uff0c\u4e0a\u534a\u90e8\u5728\u63a5\u6536\u5230\u4e00\u4e2a\u4e2d\u65ad\u65f6\u7acb\u523b\u5f00\u59cb\u6267\u884c\uff0c\u4f46\u4ed6\u53ea\u505a\u5fc5\u8981\u7684\u5de5\u4f5c\uff0c\u4f8b\u5982\u5bf9\u63a5\u6536\u7684\u4e2d\u65ad\u8fdb\u884c\u5e94\u7b54\u6216\u590d\u4f4d\u786c\u4ef6\uff0c\u8fd9\u4e9b\u5de5\u4f5c\u90fd\u662f\u5728\u6240\u6709\u4e2d\u65ad\u88ab\u7981\u6b62\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u7684\u3002\u800c\u90a3\u4e9b\u5141\u8bb8\u88ab\u7a0d\u540e\u6267\u884c\u7684\u5de5\u4f5c\uff0c\u90fd\u4f1a\u63a8\u5230\u4e0b\u534a\u90e8\u53bb\uff0c\u4e0b\u534a\u90e8\u5e76\u4e0d\u4f1a\u9a6c\u4e0a\u6267\u884c\uff0c\u800c\u662f\u4f1a\u5728\u7a0d\u540e\u9002\u5f53\u7684\u65f6\u673a\u6267\u884c\u3002","title":"\u4ec0\u4e48\u662f\u4e2d\u65ad\u5904\u7406\u7684\u4e0a\u534a\u90e8\u548c\u4e0b\u534a\u90e8"},{"location":"chapter_3/4_linux_kernel_net_v2/#_4","text":"\u73b0\u5728\u7684\u7f51\u5361\u57fa\u672c\u90fd\u652f\u6301 RSS(Receive Side Scaling) \uff0c\u4e5f\u5c31\u662f\u591a\u5bf9\u5217\u6280\u672f\u3002\u4e00\u5f20\u7f51\u5361\u6709\u591a\u4e2a\u961f\u5217\uff0c\u6bcf\u4e2a\u961f\u5217\u90fd\u6709\u5404\u81ea\u7684IRQ\u53f7\u548cRing Buffer\uff0c\u4f46\u662f\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7f51\u5361\u7684\u8f6f\u4e2d\u65ad\u90fd\u662f\u5728CPU0\u4e0a\u5904\u7406\uff0c\u5728\u6d41\u91cf\u5927\u7684\u65f6\u5019\uff0c\u4f1a\u9020\u6210CPU0\u8d1f\u8f7d\u6253\u6ee1\uff0c\u5f15\u8d77\u4e22\u5305. \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 \u7ed1\u5b9a\u4e2d\u65ad\u548cCPU\u7684\u4eb2\u548c\u6027\uff0c\u628a\u4e2d\u65ad\u5904\u7406\u5747\u8861\u5230\u591a\u6838\u5fc3\u4e0a \uff0c\u63d0\u5347\u7cfb\u7edf\u6574\u4f53\u6027\u80fd.","title":"\u7f51\u5361\u7684\u8f6f\u4e2d\u65ad\u5904\u7406"},{"location":"chapter_3/4_linux_kernel_net_v2/#rps","text":"RPS \u5168\u79f0\u662f Receive Packet Steering,\u91c7\u7528\u8f6f\u4ef6\u6a21\u62df\u7684\u65b9\u5f0f\uff0c\u5b9e\u73b0\u4e86\u591a\u961f\u5217\u7f51\u5361\u6240\u63d0\u4f9b\u7684\u529f\u80fd\uff0c\u5206\u6563\u4e86\u5728\u591aCPU\u7cfb\u7edf\u4e0a\u6570\u636e\u63a5\u6536\u65f6\u7684\u8f6f\u4e2d\u65ad\u8d1f\u8f7d, \u628a\u8f6f\u4e2d\u65ad\u5206\u5230\u5404\u4e2aCPU\u5904\u7406\uff0c\u800c\u4e0d\u9700\u8981\u786c\u4ef6\u652f\u6301\uff0c\u5728\u591a\u6838CPU\u548c\u5355\u961f\u5217\u7f51\u5361\u7684\u60c5\u51b5\u4e0b\uff0c\u5f00\u542fRPS\u53ef\u4ee5\u5927\u5927\u63d0\u5347\u7f51\u7edc\u6027\u80fd. \u5982\u679c\u7cfb\u7edf\u5f00\u4e86RPS,\u6570\u636e\u5305\u4f1a\u88ab\u7f13\u51b2\u5728TCP\u5c42\u4e4b\u524d\u7684\u961f\u5217\u4e2d,\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7net.core.netdev_max_backlog\u9002\u5f53\u52a0\u5927\u8fd9\u4e2a\u961f\u5217\u7684\u957f\u5ea6\uff0c\u4ee5\u4fdd\u8bc1\u4e0a\u5c42\u7684\u5904\u7406\u65f6\u95f4.","title":"\u4ec0\u4e48\u662fRPS"},{"location":"chapter_3/4_linux_kernel_net_v2/#tcpip","text":"\u6b64\u65f6\u6570\u636e\u5305\u5df2\u7ecf\u63a5\u5165\u5185\u6838\u5904\u7406\u533a\u57df\uff0c\u7531\u5185\u6838\u7684TCP/IP\u534f\u8bae\u6808\u5904\u7406","title":"\u4e94 TCP/IP\u534f\u8bae\u6808\u5c42\u9762"},{"location":"chapter_3/4_linux_kernel_net_v2/#_5","text":"\u5927\u5bb6\u77e5\u9053\uff0c\u4e24\u4e2a\u57fa\u4e8etcp\u534f\u8bae\u7684socket\u8981\u901a\u4fe1\uff0c\u9996\u5148\u8981\u8fdb\u884c\u8fde\u63a5\u5efa\u7acb\u7684\u8fc7\u7a0b\uff0c\u7136\u540e\u624d\u662f\u6570\u636e\u4f20\u8f93\u7684\u8fc7\u7a0b\u3002 \u6211\u4eec\u5148\u7b80\u5355\u770b\u4e0b\u8fde\u63a5\u7684\u5efa\u7acb\u8fc7\u7a0b\uff0c\u5ba2\u6237\u7aef\u5411server\u53d1\u9001SYN\u5305\uff0cserver\u56de\u590dSYN\uff0bACK\uff0c\u540c\u65f6\u5c06\u8fd9\u4e2a\u5904\u4e8eSYN_RECV\u72b6\u6001\u7684\u8fde\u63a5\u4fdd\u5b58\u5230\u534a\u8fde\u63a5\u961f\u5217\u3002\u5ba2\u6237\u7aef\u8fd4\u56deACK\u5305\u5b8c\u6210\u4e09\u6b21\u63e1\u624b\uff0cserver\u5c06ESTABLISHED\u72b6\u6001\u7684\u8fde\u63a5\u79fb\u5165accept\u961f\u5217\uff0c\u7b49\u5f85\u5e94\u7528\u8c03\u7528accept()\u3002 \u53ef\u4ee5\u770b\u5230\u5efa\u7acb\u8fde\u63a5\u6d89\u53ca\u4e24\u4e2a\u961f\u5217\uff1a \u534a\u8fde\u63a5\u961f\u5217(SYN Queue): \u4fdd\u5b58SYN_RECV\u72b6\u6001\u7684\u8fde\u63a5\u3002\u961f\u5217\u957f\u5ea6\u7531net.ipv4.tcp_max_syn_backlog\u8bbe\u7f6e. \u5b8c\u6574\u8fde\u63a5\u961f\u5217(ACCEPT Queue):\u4fdd\u5b58ESTABLISHED\u72b6\u6001\u7684\u8fde\u63a5\u3002\u961f\u5217\u957f\u5ea6\u4e3amin(net.core.somaxconn, backlog)\u3002\u5176\u4e2dbacklog\u662f\u6211\u4eec\u521b\u5efaServerSocket(int port,int backlog)\u65f6\u6307\u5b9a\u7684\u53c2\u6570\uff0c\u6700\u7ec8\u4f1a\u4f20\u9012\u7ed9listen\u65b9\u6cd5\uff1a #include int listen(int sockfd, int backlog); \u5982\u679c\u6211\u4eec\u8bbe\u7f6e\u7684backlog\u5927\u4e8enet.core.somaxconn\uff0c\u5b8c\u6574\u8fde\u63a5\u961f\u5217\u7684\u957f\u5ea6\u5c06\u88ab\u8bbe\u7f6e\u4e3anet.core.somaxconn\u3002 \u6ce8\u610f\uff1a\u4e0d\u540c\u7684\u7f16\u7a0b\u8bed\u8a00\u90fd\u6709\u76f8\u5e94\u7684socket\u7533\u8bf7\u65b9\u6cd5,\u6bd4\u5982Python\u662fsocket\u6a21\u5757.\u5728\u670d\u52a1\u7aef\u76d1\u542c\u4e00\u4e2a\u7aef\u53e3\uff0c\u5e95\u5c42\u90fd\u8981\u7ecf\u8fc73\u4e2a\u6b65\u9aa4\uff1a \u7533\u8bf7socket\u3001bind\u76f8\u5e94\u7684IP\u548cport\u3001\u8c03\u7528listen\u65b9\u6cd5\u8fdb\u884c\u76d1\u542c\u3002\u8fd9\u4e2alisten\u65b9\u6cd5python\u4f1a\u8fdb\u884c\u5c01\u88c5\uff0c\u522b\u7684\u7f16\u7a0b\u8bed\u8a00\u4e5f\u4f1a\u8fdb\u884c\u5c01\u88c5\uff0c\u4f46\u6700\u7ec8\u90fd\u662f\u8c03\u7528\u7cfb\u7edf\u7684listen()\u8c03\u7528 \u6211\u4eec\u5bf9\u8fd9\u4e24\u4e2a\u961f\u5217\u505a\u4e00\u4e0b\u603b\u7ed3: \u961f\u5217\u540d\u79f0 \u8bf4\u660e \u6ce8\u610f\u70b9 \u534a\u8fde\u63a5\u961f\u5217(incomplete connection queue) Maximal number of remembered connection requests, which have not received an acknowledgment from connecting client. \u5373\u8fd8\u6ca1\u6709\u88ab\u5ba2\u6237\u7aef\u8fd4\u56deack\u7684\u5bf9\u5217\u7684\u957f\u5ea6\u3002 1 \u6700\u5927\u957f\u5ea6\u7531/proc/sys/net/ipv4/tcp_max_syn_backlog\u53c2\u6570\u51b3\u5b9a\uff0c\u7528\u6237\u7533\u8bf7socket\u65f6\u4e0d\u80fd\u63a7\u5236\u5176\u957f\u5ea6\u3002 2 \u7cfb\u7edf\u7ba1\u7406\u5458\u53ef\u4ee5\u5f00\u542fnet.ipv4.tcp_syncookies\uff0c\u9632\u8303\u5c11\u91cf\u7684tcp syn\u653b\u51fb\u3002 \u5b8c\u5168\u8fde\u63a5\u961f\u5217(complete connection queue) the queue length for completely established sockets waiting to be accepted\u3002\u5df2\u7ecf\u63e1\u624b\u5b8c\u6210\uff0c\u4f46\u8fd8\u6ca1\u6709\u88abaccepted\u7684\u961f\u5217. 1 \u666e\u901a\u7528\u6237\u7533\u8bf7socket\u65f6\u53ef\u4ee5\u63a7\u5236\u8fd9\u4e2a\u961f\u5217\u7684\u957f\u5ea6\uff0c\u4f46\u4e0d\u80fd\u8d85\u8fc7\u5185\u6838net.core.somaxconn\u7684\u8bbe\u5b9a 2.\u7cfb\u7edf\u7ba1\u7406\u5458\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u76f8\u5bf9\u8f83\u5927\u7684\u503c\uff0c\u4f8b\u598265535,\u65b9\u4fbf\u666e\u901a\u7528\u6237\u6309\u9700\u7533\u8bf7","title":"\uff08\u4e00\uff09 \u8fde\u63a5\u5efa\u7acb"},{"location":"chapter_3/4_linux_kernel_net_v2/#_6","text":"\u8fde\u63a5\u5efa\u7acb\u540e,\u5c31\u5230\u4e86socket\u6570\u636e\u4f20\u8f93\u7684\u5c42\u9762\u3002\u6b64\u65f6kernel\u80fd\u591f\u4e3a\u5e94\u7528\u7a0b\u5e8f\u505a\u7684\uff0c\u5c31\u662f\u901a\u8fc7socket Recv Buffer\u7f13\u5b58\u6570\u636e,\u5c3d\u91cf\u4fdd\u8bc1\u4e0a\u5c42\u5904\u7406\u65f6\u95f4.","title":"\uff08\u4e8c\uff09 \u6570\u636e\u4f20\u8f93"},{"location":"chapter_3/4_linux_kernel_net_v2/#1-recv-buffer","text":"kernel\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\uff0c\u81ea\u52a8\u8c03\u8282Recv Buffer\u7684\u5927\u5c0f,\u4ee5\u671f\u627e\u5230\u6027\u80fd\u548c\u8d44\u6e90\u7684\u5e73\u8861\u70b9. \u5f53net.ipv4.tcp_moderate_rcvbuf\u8bbe\u7f6e\u4e3a1\u65f6\uff0c\u81ea\u52a8\u8c03\u8282\u673a\u5236\u751f\u6548\uff0c\u6bcf\u4e2aTCP\u8fde\u63a5\u7684recv Buffer\u7531\u4e0b\u9762\u76843\u5143\u6570\u7ec4\u6307\u5b9a(min, default, max)\uff1a net.ipv4.tcp_rmem = 4096 87380 16777216 \u6700\u521dRecv Buffer\u88ab\u8bbe\u7f6e\u4e3a87380\uff0c\u540c\u65f6\u8fd9\u4e2a\u7f3a\u7701\u503c\u4f1a\u8986\u76d6net.core.rmem_default\u7684\u8bbe\u7f6e,\u968f\u540erecv buffer\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u5728\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u52a8\u6001\u8c03\u8282\u3002 \u5f53net.ipv4.tcp_moderate_rcvbuf\u88ab\u8bbe\u7f6e\u4e3a0\uff0c\u6216\u8005\u8bbe\u7f6e\u4e86socket\u9009\u9879SO_RCVBUF\uff0c\u7f13\u51b2\u7684\u52a8\u6001\u8c03\u8282\u673a\u5236\u88ab\u5173\u95ed\u3002 \u5982\u679c\u7f13\u51b2\u7684\u52a8\u6001\u8c03\u8282\u673a\u5236\u88ab\u5173\u95ed,\u540c\u65f6socket\u81ea\u5df1\u4e5f\u6ca1\u6709\u8bbe\u7f6eSO_RCVBUF\u9009\u9879\uff0c\u90a3\u4e48\u4e00\u4e2asocket\u7684\u9ed8\u8ba4Buffer \u5927\u5c0f\u5c06\u7531net.core.rmem_default\u51b3\u5b9a\uff0c\u4f46\u662f\u5e94\u7528\u7a0b\u5e8f\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7setsockopt()\u7cfb\u7edf\u8c03\u7528\uff0c\u52a0\u5927\u81ea\u5df1\u7684Recv Buffer,\u6700\u5927\u4e0d\u80fd\u8d85\u8fc7net.core.rmem_max\u7684\u8bbe\u5b9a. \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u5982\u4e0b\u603b\u7ed3: \u6ca1\u6709\u7279\u6b8a\u60c5\u51b5,\u5efa\u8bae\u6253\u5f00net.ipv4.tcp_moderate_rcvbuf=1,\u8fd9\u6837kernel\u4f1a\u81ea\u52a8\u8c03\u6574\u6bcf\u4e2asocket\u7684Recv Buffer \u6211\u4eec\u5e94\u8be5\u628anet.ipv4.tcp_rmem\u4e2dmax\u503c\u548cnet.core.rmem_max\u503c\u8bbe\u7f6e\u6210\u4e00\u81f4\uff0c\u8fd9\u6837\u5047\u8bbe\u5e94\u7528\u7a0b\u5e8f\u6ca1\u6709\u5173\u6ce8\u5230\u8fd9\u4e2a\u70b9\uff0c\u4ecd\u7136\u53ef\u4ee5\u7531kernel\u628a\u5b83\u81ea\u52a8\u8c03\u8282\u6210\u7cfb\u7edf\u6700\u5927\u7684Recv Buffer. Recv Buffer\u7684\u9ed8\u8ba4\u503c\u53ef\u4ee5\u9002\u5f53\u8fdb\u884c\u63d0\u9ad8,\u5305\u62ecnet.core.rmem_default\u548cnet.ipv4.tcp_rmem\u4e2d\u7684default\u8bbe\u7f6e,\u4ee5\u66f4\u52a0\u6fc0\u8fdb\u7684\u65b9\u5f0f\u4f20\u8f93\u6570\u636e.","title":"1  Recv Buffer\u81ea\u52a8\u8c03\u8282\u673a\u5236"},{"location":"chapter_3/4_linux_kernel_net_v2/#linux_1","text":"\u5e8f\u53f7 \u6570\u636e\u63a5\u6536\u9636\u6bb5 \u5e38\u7528\u4f18\u5316\u6280\u80fd 1 \u7f51\u5361Ring Buffer \u6839\u636e\u4e0d\u540c\u7684\u7f51\u5361\u7c7b\u578b\uff0c\u628aRing Buffer\u8bbe\u7f6e\u4e3a\u7f51\u5361\u652f\u6301\u7684\u6700\u5927\u503c. 2 \u7f51\u5361\u8f6f\u4e2d\u65ad \u624b\u5de5\u7ed1\u5b9a\u4e2d\u65ad\u5230\u591a\u6838CPU\uff0c\u907f\u514dCPU0\u7684\u6027\u80fd\u74f6\u9888, \u63d0\u5347\u7cfb\u7edf\u6574\u4f53\u6027\u80fd. 3 \u7f51\u5361\u7f13\u51b2\u533a\u5230TCP/IP\u6808\u4e4b\u95f4 \u9002\u5f53\u589e\u52a0net.core.netdev_max_backlog\u7684\u503c,\u8c03\u5927Input Packet Queue. 4 \u534a\u8fde\u63a5\u961f\u5217 \u5f00\u542fnet.ipv4.tcp_syncookies=1\uff0c\u9632\u8303\u5c11\u91cf\u7684tcp syn\u653b\u51fb. 6 \u5b8c\u6574\u8fde\u63a5\u961f\u5217 \u901a\u8fc7net.core.somaxconn,\u8c03\u5927\u5b8c\u6574\u961f\u5217\u7684\u4e0a\u9650,\u7ed9\u5e94\u7528\u7a0b\u5e8f\u4ee5\u66f4\u591a\u5904\u7406\u65f6\u95f4. 7 Socket Recv Buffer \u5f00\u542fnet.ipv4.tcp_moderate_rcvbuf=1,\u5e76\u4e14\u628anet.ipv4.tcp_rmem/net.core.rmem_max\u4e2d\u9ed8\u8ba4\u503c\u548c\u6700\u5927\u503c\u8c03\u5927.","title":"\u516d \u5173\u4e8eLinux\u63a5\u6536\u6570\u636e\u5305\u94fe\u8def\u4f18\u5316\u7684\u6574\u4f53\u603b\u7ed3"},{"location":"chapter_3/4_linux_kernel_net_v2/#_7","text":"linux\u7f51\u7edc\u4e4b\u6570\u636e\u5305\u7684\u63a5\u53d7\u8fc7\u7a0b https://www.jianshu.com/p/e6162bc984c8 Linux \u7f51\u7edc\u534f\u8bae\u6808\u6536\u6d88\u606f\u8fc7\u7a0b-Ring Buffer https://ylgrgyq.github.io/2017/07/23/linux-receive-packet-1/ Linux \u7f51\u7edc\u534f\u8bae\u6808\u6536\u6d88\u606f\u8fc7\u7a0b-Per CPU Backlog https://ylgrgyq.github.io/2017/07/24/linux-receive-packet-2/ \u7f51\u5361\u6536\u53d1\u5305\u603b\u7ed3 https://www.zybuluo.com/myecho/note/1068383 /proc/sys/net\u6587\u6863\u8bf4\u660e https://www.kernel.org/doc/Documentation/sysctl/net.txt NAPI https://wiki.linuxfoundation.org/networking/napi Linux\u6280\u5de7:\u591a\u6838\u4e0b\u7ed1\u5b9a\u7f51\u5361\u4e2d\u65ad\u5230\u4e0d\u540cCPU\uff08core\uff09\u603b\u7ed3 https://blog.csdn.net/benpaobagzb/article/details/51044420 Network interface controller https://en.wikipedia.org/wiki/Network_interface_controller#RSS","title":"\u4e03 \u53c2\u8003\u6587\u7ae0"},{"location":"chapter_3/5_conntrack/","text":"\u4e00 \u57fa\u7840\u77e5\u8bc6 (\u4e00) \u6a21\u5757\u4ecb\u7ecd nf_conntrack\u6a21\u5757\u5728kernel 2.6.15\uff082006-01-03\u53d1\u5e03\uff09 \u88ab\u5f15\u5165\uff0c\u652f\u6301ipv4\u548cipv6\uff0c\u53d6\u4ee3\u53ea\u652f\u6301ipv4\u7684ip_connktrack\uff0c\u7528\u4e8e\u8ddf\u8e2a\u8fde\u63a5\u7684\u72b6\u6001\uff0c\u4f9b\u5176\u4ed6\u6a21\u5757\u4f7f\u7528\u3002 \u6700\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f\u662f iptables \u7684 nat \u548c state \u6a21\u5757\uff1a nat \u6839\u636e\u8f6c\u53d1\u89c4\u5219\u4fee\u6539IP\u5305\u7684\u6e90/\u76ee\u6807\u5730\u5740\uff0c\u9760nf_conntrack\u7684\u8bb0\u5f55\u624d\u80fd\u8ba9\u8fd4\u56de\u7684\u5305\u80fd\u8def\u7531\u5230\u53d1\u8bf7\u6c42\u7684\u673a\u5668\u3002 state \u76f4\u63a5\u7528 nf_conntrack \u8bb0\u5f55\u7684\u8fde\u63a5\u72b6\u6001\uff08NEW/ESTABLISHED/RELATED/INVALID\uff09\u6765\u5339\u914d\u9632\u706b\u5899\u8fc7\u6ee4\u89c4\u5219\u3002 iptables \u7684 nat \u901a\u8fc7\u89c4\u5219\u6765\u4fee\u6539\u76ee\u7684/\u6e90\u5730\u5740,\u4f46\u5149\u4fee\u6539\u5730\u5740\u4e0d\u884c,\u6211\u4eec\u8fd8\u9700\u8981\u80fd\u8ba9\u56de\u6765\u7684\u5305\u80fd\u8def\u7531\u5230\u6700\u521d\u7684\u6765\u6e90\u4e3b\u673a\u3002\u8fd9\u5c31\u9700\u8981\u501f\u52a9 nf_conntrack \u6765\u627e\u5230\u539f\u6765\u90a3\u4e2a\u8fde\u63a5\u7684\u8bb0\u5f55\u624d\u884c\u3002\u800c state \u6a21\u5757\u5219\u662f\u76f4\u63a5\u4f7f\u7528 nf_conntrack \u91cc\u8bb0\u5f55\u7684\u8fde\u63a5\u7684\u72b6\u6001\u6765\u5339\u914d\u7528\u6237\u5b9a\u4e49\u7684\u76f8\u5173\u89c4\u5219\u3002\u4f8b\u5982\u4e0b\u9762\u8fd9\u6761 INPUT \u89c4\u5219\u7528\u4e8e\u653e\u884c 80 \u7aef\u53e3\u4e0a\u7684\u72b6\u6001\u4e3a NEW \u7684\u8fde\u63a5\u4e0a\u7684\u5305\u3002 iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT\u3002 iptables\u4e2d\u7684\u72b6\u6001\u68c0\u6d4b\u529f\u80fd\u662f\u7531state\u9009\u9879\u6765\u5b9e\u73b0iptable\u7684\u3002\u5bf9\u8fd9\u4e2a\u9009\u9879\uff0c\u5728iptables\u7684\u624b\u518c\u9875\u4e2d\u6709\u4ee5\u4e0b\u63cf\u8ff0\uff1a state \u8fd9\u4e2a\u6a21\u5757\u80fd\u591f\u8ddf\u8e2a\u5206\u7ec4\u7684\u8fde\u63a5\u72b6\u6001(\u5373\u72b6\u6001\u68c0\u6d4b)\u3002 \u683c\u5f0f\uff1a--state XXXXX \u8fd9\u91cc\uff0cstate\u662f\u4e00\u4e2a\u7528\u9017\u53f7\u5206\u5272\u7684\u5217\u8868\uff0c\u8868\u793a\u8981\u5339\u914d\u7684\u8fde\u63a5\u72b6\u6001\u3002 \u5728iptables\u4e2d\u6709\u56db\u79cd\u72b6\u6001\uff1aNEW\uff0cESTABLISHED\uff0cRELATED\uff0cINVALID\u3002 NEW\uff0c\u8868\u793a\u8fd9\u4e2a\u5206\u7ec4\u9700\u8981\u53d1\u8d77\u4e00\u4e2a\u8fde\u63a5\uff0c\u6216\u8005\u8bf4\uff0c\u5206\u7ec4\u5bf9\u5e94\u7684\u8fde\u63a5\u5728\u4e24\u4e2a\u65b9\u5411\u4e0a\u90fd\u6ca1\u6709\u8fdb\u884c\u8fc7\u5206\u7ec4\u4f20\u8f93\u3002NEW\u8bf4\u660e \u8fd9\u4e2a\u5305\u662f\u6211\u4eec\u770b\u5230\u7684\u7b2c\u4e00\u4e2a\u5305\u3002\u610f\u601d\u5c31\u662f\uff0c\u8fd9\u662fconntrack\u6a21\u5757\u770b\u5230\u7684\u67d0\u4e2a\u8fde\u63a5\u7b2c\u4e00\u4e2a\u5305\uff0c\u5b83\u5373\u5c06\u88ab\u5339\u914d\u4e86\u3002\u6bd4\u5982\uff0c\u6211\u4eec\u770b\u5230\u4e00\u4e2aSYN\u5305\uff0c\u662f\u6211\u4eec\u6240\u7559\u610f \u7684\u8fde\u63a5\u7684\u7b2c\u4e00\u4e2a\u5305\uff0c\u5c31\u8981\u5339\u914d\u5b83\u3002\u7b2c\u4e00\u4e2a\u5305\u4e5f\u53ef\u80fd\u4e0d\u662fSYN\u5305\uff0c\u4f46\u5b83\u4ecd\u4f1a\u88ab\u8ba4\u4e3a\u662fNEW\u72b6\u6001\u3002\u6bd4\u5982\u4e00\u4e2a\u7279\u610f\u53d1\u51fa\u7684\u63a2\u6d4b\u5305\uff0c\u53ef\u80fd\u53ea\u6709RST\u4f4d\uff0c\u4f46\u4ecd\u7136\u662f NEW\u3002 ESTABLISHED\uff0c\u8868\u793a\u5206\u7ec4\u5bf9\u5e94\u7684\u8fde\u63a5\u5df2\u7ecf\u8fdb\u884c\u4e86\u53cc\u5411\u7684\u5206\u7ec4\u4f20\u8f93\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fde\u63a5\u5df2\u7ecf\u5efa\u7acb\uff0c\u800c\u4e14\u4f1a\u7ee7\u7eed\u5339\u914d \u8fd9\u4e2a\u8fde\u63a5\u7684\u5305\u3002\u5904\u4e8eESTABLISHED\u72b6\u6001\u7684\u8fde\u63a5\u662f\u975e\u5e38\u5bb9\u6613\u7406\u89e3\u7684\u3002\u53ea\u8981\u53d1\u9001\u5e76\u63a5\u5230\u5e94\u7b54\uff0c\u8fde\u63a5\u5c31\u662fESTABLISHED\u7684\u4e86\u3002\u4e00\u4e2a\u8fde\u63a5\u8981\u4eceNEW\u53d8 \u4e3aESTABLISHED\uff0c\u53ea\u9700\u8981\u63a5\u5230\u5e94\u7b54\u5305\u5373\u53ef\uff0c\u4e0d\u7ba1\u8fd9\u4e2a\u5305\u662f\u53d1\u5f80\u9632\u706b\u5899\u7684\uff0c\u8fd8\u662f\u8981\u7531\u9632\u706b\u5899\u8f6c\u53d1\u7684\u3002ICMP\u7684\u9519\u8bef\u548c\u91cd\u5b9a\u5411\u7b49\u4fe1\u606f\u5305\u4e5f\u88ab\u770b\u4f5c\u662f ESTABLISHED\uff0c\u53ea\u8981\u5b83\u4eec\u662f\u6211\u4eec\u6240\u53d1\u51fa\u7684\u4fe1\u606f\u7684\u5e94\u7b54\u3002 RELATED\uff0c\u8868\u793a\u5206\u7ec4\u8981\u53d1\u8d77\u4e00\u4e2a\u65b0\u7684\u8fde\u63a5\uff0c\u4f46\u662f\u8fd9\u4e2a\u8fde\u63a5\u548c\u4e00\u4e2a\u73b0\u6709\u7684\u8fde\u63a5\u6709\u5173\uff0c\u4f8b\u5982\uff1aFTP\u7684\u6570\u636e\u4f20\u8f93\u8fde\u63a5 \u548c\u63a7\u5236\u8fde\u63a5\u4e4b\u95f4\u5c31\u662fRELATED\u5173\u7cfb\u3002RELATED\u662f\u4e2a\u6bd4\u8f83\u9ebb\u70e6\u7684\u72b6\u6001\u3002\u5f53\u4e00\u4e2a\u8fde\u63a5\u548c\u67d0\u4e2a\u5df2\u5904\u4e8eESTABLISHED\u72b6\u6001\u7684\u8fde\u63a5\u6709\u5173\u7cfb\u65f6\uff0c\u5c31\u88ab\u8ba4\u4e3a \u662fRELATED\u7684\u4e86\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e00\u4e2a\u8fde\u63a5\u8981\u60f3\u662fRELATED\u7684\uff0c\u9996\u5148\u8981\u6709\u4e00\u4e2aESTABLISHED\u7684\u8fde\u63a5\u3002\u8fd9\u4e2aESTABLISHED\u8fde\u63a5\u518d\u4ea7\u751f\u4e00 \u4e2a\u4e3b\u8fde\u63a5\u4e4b\u5916\u7684\u8fde\u63a5\uff0c\u8fd9\u4e2a\u65b0\u7684\u8fde\u63a5\u5c31\u662fRELATED\u7684\u4e86\uff0c\u5f53\u7136\u524d\u63d0\u662fconntrack\u6a21\u5757\u8981\u80fd\u7406\u89e3RELATED\u3002ftp\u662f\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\uff0cFTP- data\u8fde\u63a5\u5c31\u662f\u548cFTP-control\u6709RELATED\u7684\u3002\u8fd8\u6709\u5176\u4ed6\u7684\u4f8b\u5b50\uff0c INVAILD\uff0c\u8868\u793a\u5206\u7ec4\u5bf9\u5e94\u7684\u8fde\u63a5\u662f\u672a\u77e5\u7684\uff0c\u8bf4\u660e\u6570\u636e\u5305\u4e0d\u80fd\u88ab\u8bc6\u522b\u5c5e\u4e8e\u54ea\u4e2a\u8fde\u63a5\u6216\u6ca1\u6709\u4efb\u4f55\u72b6\u6001\u3002\u6709\u51e0\u4e2a\u539f\u56e0\u53ef\u4ee5\u4ea7\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u6bd4\u5982\uff0c\u5185\u5b58\u6ea2\u51fa\uff0c\u6536\u5230\u4e0d\u77e5\u5c5e\u4e8e\u54ea\u4e2a\u8fde\u63a5\u7684ICMP\u9519\u8bef\u4fe1\u606f\u3002\u4e00\u822c\u5730\uff0c\u6211\u4eecDROP\u8fd9\u4e2a\u72b6\u6001\u7684\u4efb\u4f55\u4e1c\u897f\u3002 \u5e76\u4e0d\u662f\u6240\u6709Linux\u53d1\u884c\u7248\u4f1a\u542f\u7528nf_conntrack\u6a21\u5757 nf_conntrack \u7ed3\u6784\u548c hashtable \u5728\u5185\u6838\u4e2d\uff0c\u8fde\u63a5\u8ddf\u8e2a\u8868\u662f\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u7ed3\u6784\u7684\u54c8\u5e0c\u8868(hash table)\uff0c\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u8bb0\u4f5cHASHSIZE\uff0c\u54c8\u5e0c\u8868\u7684\u6bcf\u4e00\u9879(hash table entry)\u79f0\u4f5cbucket\uff0c\u56e0\u6b64\u54c8\u5e0c\u8868\u4e2d\u6709HASHSIZE\u4e2abucket\u5b58\u5728\uff0c\u6bcf\u4e2abucket\u5305\u542b\u4e00\u4e2a\u94fe\u8868(linked list)\uff0c\u6bcf\u4e2a\u94fe\u8868\u80fd\u591f\u5b58\u653e\u82e5\u5e72\u4e2aconntrack\u6761\u76ee(bucket size)\u3002\u5bf9\u4e8e\u4e00\u4e2a\u65b0\u6536\u5230\u7684\u6570\u636e\u5305\uff0c\u5185\u6838\u4f7f\u7528\u5982\u4e0b\u6b65\u9aa4\u5224\u65ad\u5176\u662f\u5426\u5c5e\u4e8e\u4e00\u4e2a\u5df2\u6709\u8fde\u63a5\uff1a 1 \u5185\u6838\u63d0\u53d6\u6b64\u6570\u636e\u5305\u4fe1\u606f(\u6e90\u76eeIP\uff0cport\uff0c\u534f\u8bae\u53f7)\u8fdb\u884chash\u8ba1\u7b97\u5f97\u5230\u4e00\u4e2ahash\u503c\uff0c\u5728\u54c8\u5e0c\u8868\u4e2d\u4ee5\u6b64hash\u503c\u505a\u7d22\u5f15\uff0c\u7d22\u5f15\u7ed3\u679c\u4e3a\u6570\u636e\u5305\u6240\u5c5e\u7684bucket(\u94fe\u8868)\u3002\u8fd9\u4e00\u6b65hash\u8ba1\u7b97\u65f6\u95f4\u56fa\u5b9a\u5e76\u4e14\u5f88\u77ed 2 \u904d\u5386hash\u5f97\u5230\u7684bucket\uff0c\u67e5\u627e\u662f\u5426\u6709\u5339\u914d\u7684conntrack\u6761\u76ee\u3002\u8fd9\u4e00\u6b65\u662f\u6bd4\u8f83\u8017\u65f6\u7684\u64cd\u4f5c\uff0cbucket size\u8d8a\u5927\uff08bucket\u957f\u5ea6\u8d8a\u957f\uff09\uff0c\u904d\u5386\u65f6\u95f4\u8d8a\u957f CONNTRACK_MAX\u4ee3\u8868\u7cfb\u7edf\u6240\u6709\u8ffd\u8e2a\u7684\u94fe\u63a5\u6570 HASHSIZE\u4ee3\u8868\u54c8\u5e0c\u8868\u5927\u5c0f. \u56e0\u6b64CONNTRACK_MAX:HASHSIZE\u6700\u597d\u4e0d\u8981\u592a\u5927, \u901a\u5e38\u63a8\u83508:1\u6216\u80054:1 (\u4e8c) \u5185\u6838\u76f8\u5173\u53c2\u6570 net.netfilter.nf_conntrack_max=6000000 net.netfilter.nf_conntrack_buckets=1307648 # timeout\u503c\u4e0d\u53d8 net.netfilter.nf_conntrack_tcp_timeout_close = 10 net.netfilter.nf_conntrack_tcp_timeout_close_wait = 60 net.netfilter.nf_conntrack_tcp_timeout_established = 432000 net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 120 net.netfilter.nf_conntrack_tcp_timeout_last_ack = 30 net.netfilter.nf_conntrack_tcp_timeout_max_retrans = 300 net.netfilter.nf_conntrack_tcp_timeout_syn_recv = 60 net.netfilter.nf_conntrack_tcp_timeout_syn_sent = 120 net.netfilter.nf_conntrack_tcp_timeout_time_wait = 120 net.netfilter.nf_conntrack_tcp_timeout_unacknowledged = 300 \u5b98\u65b9\u8bf4\u660e: https://www.kernel.org/doc/Documentation/networking/nf_conntrack-sysctl.txt \u4e8c \u5e38\u7528\u64cd\u4f5c \u67e5\u770bnf_conntrack\u8868\u5f53\u524d\u8fde\u63a5\u6570 cat /proc/sys/net/netfilter/nf_conntrack_count \u67e5\u770bnf_conntrack\u8868\u6700\u5927\u8fde\u63a5\u6570 cat /proc/sys/net/netfilter/nf_conntrack_max \u901a\u8fc7dmesg\u53ef\u4ee5\u67e5\u770bnf_conntrack\u7684\u72b6\u51b5\uff1a dmesg |grep nf_conntrack # dmesg |grep nf_conntrack [ 44.139084] nf_conntrack version 0.5.0 (65536 buckets, 262144 max) \u8868\u793a\u5185\u6838\u542f\u52a8\u65f6\uff0cbucket\u6570\u91cf\u4e3a65536\uff0cconntrack\u7684\u6700\u5927\u8fde\u63a5\u6570\u4e3a262144 \u67e5\u770b\u5b58\u50a8conntrack\u6761\u76ee\u7684\u54c8\u5e0c\u8868\u5927\u5c0f,\u6b64\u4e3a\u53ea\u8bfb\u6587\u4ef6 cat /proc/sys/net/netfilter/nf_conntrack_buckets \u67e5\u770bnf_conntrack\u7684TCP\u8fde\u63a5\u8bb0\u5f55\u65f6\u95f4 cat /proc/sys/net/netfilter/nf_conntrack_tcp_timeout_established \u901a\u8fc7\u5185\u6838\u53c2\u6570\u67e5\u770b\u547d\u4ee4\uff0c\u67e5\u770b\u6240\u6709\u53c2\u6570\u914d\u7f6e sysctl -a | grep nf_conntrack \u901a\u8fc7conntrack\u547d\u4ee4\u884c\u5de5\u5177\u67e5\u770bconntrack\u7684\u5185\u5bb9 yum install -y conntrack / apt-get install -y conntrack conntrack -L \u4e09 \u4e0d\u540c\u5185\u5b58\u60c5\u51b5\u4e0b \uff0cnf_conntrack_max \u548c hashsize\u7684\u8bbe\u7f6e\u5efa\u8bae \u53ef\u4ee5\u589e\u5927 conntrack \u7684\u6761\u76ee(sessions, connection tracking entries) CONNTRACK_MAX \u6216\u8005\u589e\u52a0\u5b58\u50a8 conntrack \u6761\u76ee\u54c8\u5e0c\u8868\u7684\u5927\u5c0f HASHSIZE \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cCONNTRACK_MAX \u548c HASHSIZE \u4f1a\u6839\u636e\u7cfb\u7edf\u5185\u5b58\u5927\u5c0f\u8ba1\u7b97\u51fa\u4e00\u4e2a\u6bd4\u8f83\u5408\u7406\u7684\u503c\uff1a \u5bf9\u4e8e CONNTRACK_MAX\uff0c\u5176\u8ba1\u7b97\u516c\u5f0f\uff1a CONNTRACK_MAX = RAMSIZE (in bytes) / 16384 / (ARCH / 32) \u6bd4\u5982\u4e00\u4e2a 64 \u4f4d 48G \u7684\u673a\u5668\u53ef\u4ee5\u540c\u65f6\u5904\u7406 48*1024^3/16384/2 = 1572864 \u6761 netfilter \u8fde\u63a5\u3002\u5bf9\u4e8e\u5927\u4e8e 1G \u5185\u5b58\u7684\u7cfb\u7edf\uff0c\u9ed8\u8ba4\u7684 CONNTRACK_MAX \u662f 65535\u3002 \u5bf9\u4e8e HASHSIZE\uff0c\u9ed8\u8ba4\u7684\u6709\u8fd9\u6837\u7684\u8f6c\u6362\u5173\u7cfb\uff1a CONNTRACK_MAX = HASHSIZE * 8 \u8fd9\u8868\u793a\u6bcf\u4e2a\u94fe\u63a5\u5217\u8868\u91cc\u9762\u5e73\u5747\u6709 8 \u4e2a conntrack \u6761\u76ee\u3002\u5176\u771f\u6b63\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a HASHSIZE = CONNTRACK_MAX / 8 = RAMSIZE (in bytes) / 131072 / (ARCH / 32) \u6bd4\u5982\u4e00\u4e2a 64 \u4f4d 48G \u7684\u673a\u5668\u53ef\u4ee5\u5b58\u50a8 48*1024^3/131072/2 = 196608 \u7684buckets(\u8fde\u63a5\u5217\u8868)\u3002\u5bf9\u4e8e\u5927\u4e8e 1G \u5185\u5b58\u7684\u7cfb\u7edf\uff0c\u9ed8\u8ba4\u7684 HASHSIZE \u662f 8192\u3002 \u5e8f\u53f7 \u673a\u5668\u5185\u5b58 nf_conntrack_max\u4e0a\u9650 nf_conntrack_max\u548cHASHSIZE\u6bd4\u4f8b \u7ebf\u4e0a\u8bbe\u7f6e max_open_files 1 128G 4194304 4:1 2621440 100\u4e07 \u56db \u8d85\u5927\u8fde\u63a5\u6570\u573a\u666f,\u76f4\u63a5\u628a\u4e00\u4e9b\u7279\u5b9a\u7aef\u53e3\u7684\u8fde\u63a5\uff0c\u76f4\u63a5\u4e0d\u8ffd\u8e2a \u5982\u679c\u67d0\u4e00\u7aef\u53e3\u6216\u8005\u67d0\u4e9b\u7aef\u53e3\uff0c\u6709\u8d85\u5927\u91cf\u7684\u8fde\u63a5\uff0c\u90a3\u4e48\u53ef\u4ee5\u4fee\u6539raw\u8868 \uff0c\u4e0d\u8fdb\u884c\u8fde\u63a5\u8ffd\u8e2a *filter iptables -t filter -A INPUT -m state --state RELATED,ESTABLISHED, UNTRACKED -j ACCEPT *raw iptables -t raw -A PREROUTING -p tcp -m set --match-set ${project_port} dst -j NOTRACK iptables -t raw -A OUTPUT -p tcp -m set --match-set ${project_port} src -j NOTRACK \u6216\u8005 iptables -A INPUT -m state --state RELATED,ESTABLISHED,UNTRACKED -j ACCEPT iptables -t raw -A PREROUTING -p tcp -m multiport --dports 80,443 -j NOTRACK iptables -t raw -A OUTPUT -p tcp -m multiport --sports 80,443 -j NOTRACK \u53c2\u8003: https://clodfisher.github.io/2018/09/nf_conntrack/ https://testerhome.com/topics/7509","title":"\u7b2c\u4e94\u7bc7 conntrack\u7684\u5e38\u89c1\u5e94\u7528"},{"location":"chapter_3/5_conntrack/#_1","text":"","title":"\u4e00 \u57fa\u7840\u77e5\u8bc6"},{"location":"chapter_3/5_conntrack/#_2","text":"nf_conntrack\u6a21\u5757\u5728kernel 2.6.15\uff082006-01-03\u53d1\u5e03\uff09 \u88ab\u5f15\u5165\uff0c\u652f\u6301ipv4\u548cipv6\uff0c\u53d6\u4ee3\u53ea\u652f\u6301ipv4\u7684ip_connktrack\uff0c\u7528\u4e8e\u8ddf\u8e2a\u8fde\u63a5\u7684\u72b6\u6001\uff0c\u4f9b\u5176\u4ed6\u6a21\u5757\u4f7f\u7528\u3002 \u6700\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f\u662f iptables \u7684 nat \u548c state \u6a21\u5757\uff1a nat \u6839\u636e\u8f6c\u53d1\u89c4\u5219\u4fee\u6539IP\u5305\u7684\u6e90/\u76ee\u6807\u5730\u5740\uff0c\u9760nf_conntrack\u7684\u8bb0\u5f55\u624d\u80fd\u8ba9\u8fd4\u56de\u7684\u5305\u80fd\u8def\u7531\u5230\u53d1\u8bf7\u6c42\u7684\u673a\u5668\u3002 state \u76f4\u63a5\u7528 nf_conntrack \u8bb0\u5f55\u7684\u8fde\u63a5\u72b6\u6001\uff08NEW/ESTABLISHED/RELATED/INVALID\uff09\u6765\u5339\u914d\u9632\u706b\u5899\u8fc7\u6ee4\u89c4\u5219\u3002 iptables \u7684 nat \u901a\u8fc7\u89c4\u5219\u6765\u4fee\u6539\u76ee\u7684/\u6e90\u5730\u5740,\u4f46\u5149\u4fee\u6539\u5730\u5740\u4e0d\u884c,\u6211\u4eec\u8fd8\u9700\u8981\u80fd\u8ba9\u56de\u6765\u7684\u5305\u80fd\u8def\u7531\u5230\u6700\u521d\u7684\u6765\u6e90\u4e3b\u673a\u3002\u8fd9\u5c31\u9700\u8981\u501f\u52a9 nf_conntrack \u6765\u627e\u5230\u539f\u6765\u90a3\u4e2a\u8fde\u63a5\u7684\u8bb0\u5f55\u624d\u884c\u3002\u800c state \u6a21\u5757\u5219\u662f\u76f4\u63a5\u4f7f\u7528 nf_conntrack \u91cc\u8bb0\u5f55\u7684\u8fde\u63a5\u7684\u72b6\u6001\u6765\u5339\u914d\u7528\u6237\u5b9a\u4e49\u7684\u76f8\u5173\u89c4\u5219\u3002\u4f8b\u5982\u4e0b\u9762\u8fd9\u6761 INPUT \u89c4\u5219\u7528\u4e8e\u653e\u884c 80 \u7aef\u53e3\u4e0a\u7684\u72b6\u6001\u4e3a NEW \u7684\u8fde\u63a5\u4e0a\u7684\u5305\u3002 iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT\u3002 iptables\u4e2d\u7684\u72b6\u6001\u68c0\u6d4b\u529f\u80fd\u662f\u7531state\u9009\u9879\u6765\u5b9e\u73b0iptable\u7684\u3002\u5bf9\u8fd9\u4e2a\u9009\u9879\uff0c\u5728iptables\u7684\u624b\u518c\u9875\u4e2d\u6709\u4ee5\u4e0b\u63cf\u8ff0\uff1a state \u8fd9\u4e2a\u6a21\u5757\u80fd\u591f\u8ddf\u8e2a\u5206\u7ec4\u7684\u8fde\u63a5\u72b6\u6001(\u5373\u72b6\u6001\u68c0\u6d4b)\u3002 \u683c\u5f0f\uff1a--state XXXXX \u8fd9\u91cc\uff0cstate\u662f\u4e00\u4e2a\u7528\u9017\u53f7\u5206\u5272\u7684\u5217\u8868\uff0c\u8868\u793a\u8981\u5339\u914d\u7684\u8fde\u63a5\u72b6\u6001\u3002 \u5728iptables\u4e2d\u6709\u56db\u79cd\u72b6\u6001\uff1aNEW\uff0cESTABLISHED\uff0cRELATED\uff0cINVALID\u3002 NEW\uff0c\u8868\u793a\u8fd9\u4e2a\u5206\u7ec4\u9700\u8981\u53d1\u8d77\u4e00\u4e2a\u8fde\u63a5\uff0c\u6216\u8005\u8bf4\uff0c\u5206\u7ec4\u5bf9\u5e94\u7684\u8fde\u63a5\u5728\u4e24\u4e2a\u65b9\u5411\u4e0a\u90fd\u6ca1\u6709\u8fdb\u884c\u8fc7\u5206\u7ec4\u4f20\u8f93\u3002NEW\u8bf4\u660e \u8fd9\u4e2a\u5305\u662f\u6211\u4eec\u770b\u5230\u7684\u7b2c\u4e00\u4e2a\u5305\u3002\u610f\u601d\u5c31\u662f\uff0c\u8fd9\u662fconntrack\u6a21\u5757\u770b\u5230\u7684\u67d0\u4e2a\u8fde\u63a5\u7b2c\u4e00\u4e2a\u5305\uff0c\u5b83\u5373\u5c06\u88ab\u5339\u914d\u4e86\u3002\u6bd4\u5982\uff0c\u6211\u4eec\u770b\u5230\u4e00\u4e2aSYN\u5305\uff0c\u662f\u6211\u4eec\u6240\u7559\u610f \u7684\u8fde\u63a5\u7684\u7b2c\u4e00\u4e2a\u5305\uff0c\u5c31\u8981\u5339\u914d\u5b83\u3002\u7b2c\u4e00\u4e2a\u5305\u4e5f\u53ef\u80fd\u4e0d\u662fSYN\u5305\uff0c\u4f46\u5b83\u4ecd\u4f1a\u88ab\u8ba4\u4e3a\u662fNEW\u72b6\u6001\u3002\u6bd4\u5982\u4e00\u4e2a\u7279\u610f\u53d1\u51fa\u7684\u63a2\u6d4b\u5305\uff0c\u53ef\u80fd\u53ea\u6709RST\u4f4d\uff0c\u4f46\u4ecd\u7136\u662f NEW\u3002 ESTABLISHED\uff0c\u8868\u793a\u5206\u7ec4\u5bf9\u5e94\u7684\u8fde\u63a5\u5df2\u7ecf\u8fdb\u884c\u4e86\u53cc\u5411\u7684\u5206\u7ec4\u4f20\u8f93\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fde\u63a5\u5df2\u7ecf\u5efa\u7acb\uff0c\u800c\u4e14\u4f1a\u7ee7\u7eed\u5339\u914d \u8fd9\u4e2a\u8fde\u63a5\u7684\u5305\u3002\u5904\u4e8eESTABLISHED\u72b6\u6001\u7684\u8fde\u63a5\u662f\u975e\u5e38\u5bb9\u6613\u7406\u89e3\u7684\u3002\u53ea\u8981\u53d1\u9001\u5e76\u63a5\u5230\u5e94\u7b54\uff0c\u8fde\u63a5\u5c31\u662fESTABLISHED\u7684\u4e86\u3002\u4e00\u4e2a\u8fde\u63a5\u8981\u4eceNEW\u53d8 \u4e3aESTABLISHED\uff0c\u53ea\u9700\u8981\u63a5\u5230\u5e94\u7b54\u5305\u5373\u53ef\uff0c\u4e0d\u7ba1\u8fd9\u4e2a\u5305\u662f\u53d1\u5f80\u9632\u706b\u5899\u7684\uff0c\u8fd8\u662f\u8981\u7531\u9632\u706b\u5899\u8f6c\u53d1\u7684\u3002ICMP\u7684\u9519\u8bef\u548c\u91cd\u5b9a\u5411\u7b49\u4fe1\u606f\u5305\u4e5f\u88ab\u770b\u4f5c\u662f ESTABLISHED\uff0c\u53ea\u8981\u5b83\u4eec\u662f\u6211\u4eec\u6240\u53d1\u51fa\u7684\u4fe1\u606f\u7684\u5e94\u7b54\u3002 RELATED\uff0c\u8868\u793a\u5206\u7ec4\u8981\u53d1\u8d77\u4e00\u4e2a\u65b0\u7684\u8fde\u63a5\uff0c\u4f46\u662f\u8fd9\u4e2a\u8fde\u63a5\u548c\u4e00\u4e2a\u73b0\u6709\u7684\u8fde\u63a5\u6709\u5173\uff0c\u4f8b\u5982\uff1aFTP\u7684\u6570\u636e\u4f20\u8f93\u8fde\u63a5 \u548c\u63a7\u5236\u8fde\u63a5\u4e4b\u95f4\u5c31\u662fRELATED\u5173\u7cfb\u3002RELATED\u662f\u4e2a\u6bd4\u8f83\u9ebb\u70e6\u7684\u72b6\u6001\u3002\u5f53\u4e00\u4e2a\u8fde\u63a5\u548c\u67d0\u4e2a\u5df2\u5904\u4e8eESTABLISHED\u72b6\u6001\u7684\u8fde\u63a5\u6709\u5173\u7cfb\u65f6\uff0c\u5c31\u88ab\u8ba4\u4e3a \u662fRELATED\u7684\u4e86\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e00\u4e2a\u8fde\u63a5\u8981\u60f3\u662fRELATED\u7684\uff0c\u9996\u5148\u8981\u6709\u4e00\u4e2aESTABLISHED\u7684\u8fde\u63a5\u3002\u8fd9\u4e2aESTABLISHED\u8fde\u63a5\u518d\u4ea7\u751f\u4e00 \u4e2a\u4e3b\u8fde\u63a5\u4e4b\u5916\u7684\u8fde\u63a5\uff0c\u8fd9\u4e2a\u65b0\u7684\u8fde\u63a5\u5c31\u662fRELATED\u7684\u4e86\uff0c\u5f53\u7136\u524d\u63d0\u662fconntrack\u6a21\u5757\u8981\u80fd\u7406\u89e3RELATED\u3002ftp\u662f\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\uff0cFTP- data\u8fde\u63a5\u5c31\u662f\u548cFTP-control\u6709RELATED\u7684\u3002\u8fd8\u6709\u5176\u4ed6\u7684\u4f8b\u5b50\uff0c INVAILD\uff0c\u8868\u793a\u5206\u7ec4\u5bf9\u5e94\u7684\u8fde\u63a5\u662f\u672a\u77e5\u7684\uff0c\u8bf4\u660e\u6570\u636e\u5305\u4e0d\u80fd\u88ab\u8bc6\u522b\u5c5e\u4e8e\u54ea\u4e2a\u8fde\u63a5\u6216\u6ca1\u6709\u4efb\u4f55\u72b6\u6001\u3002\u6709\u51e0\u4e2a\u539f\u56e0\u53ef\u4ee5\u4ea7\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u6bd4\u5982\uff0c\u5185\u5b58\u6ea2\u51fa\uff0c\u6536\u5230\u4e0d\u77e5\u5c5e\u4e8e\u54ea\u4e2a\u8fde\u63a5\u7684ICMP\u9519\u8bef\u4fe1\u606f\u3002\u4e00\u822c\u5730\uff0c\u6211\u4eecDROP\u8fd9\u4e2a\u72b6\u6001\u7684\u4efb\u4f55\u4e1c\u897f\u3002 \u5e76\u4e0d\u662f\u6240\u6709Linux\u53d1\u884c\u7248\u4f1a\u542f\u7528nf_conntrack\u6a21\u5757","title":"(\u4e00) \u6a21\u5757\u4ecb\u7ecd"},{"location":"chapter_3/5_conntrack/#nf_conntrack-hashtable","text":"\u5728\u5185\u6838\u4e2d\uff0c\u8fde\u63a5\u8ddf\u8e2a\u8868\u662f\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u7ed3\u6784\u7684\u54c8\u5e0c\u8868(hash table)\uff0c\u54c8\u5e0c\u8868\u7684\u5927\u5c0f\u8bb0\u4f5cHASHSIZE\uff0c\u54c8\u5e0c\u8868\u7684\u6bcf\u4e00\u9879(hash table entry)\u79f0\u4f5cbucket\uff0c\u56e0\u6b64\u54c8\u5e0c\u8868\u4e2d\u6709HASHSIZE\u4e2abucket\u5b58\u5728\uff0c\u6bcf\u4e2abucket\u5305\u542b\u4e00\u4e2a\u94fe\u8868(linked list)\uff0c\u6bcf\u4e2a\u94fe\u8868\u80fd\u591f\u5b58\u653e\u82e5\u5e72\u4e2aconntrack\u6761\u76ee(bucket size)\u3002\u5bf9\u4e8e\u4e00\u4e2a\u65b0\u6536\u5230\u7684\u6570\u636e\u5305\uff0c\u5185\u6838\u4f7f\u7528\u5982\u4e0b\u6b65\u9aa4\u5224\u65ad\u5176\u662f\u5426\u5c5e\u4e8e\u4e00\u4e2a\u5df2\u6709\u8fde\u63a5\uff1a 1 \u5185\u6838\u63d0\u53d6\u6b64\u6570\u636e\u5305\u4fe1\u606f(\u6e90\u76eeIP\uff0cport\uff0c\u534f\u8bae\u53f7)\u8fdb\u884chash\u8ba1\u7b97\u5f97\u5230\u4e00\u4e2ahash\u503c\uff0c\u5728\u54c8\u5e0c\u8868\u4e2d\u4ee5\u6b64hash\u503c\u505a\u7d22\u5f15\uff0c\u7d22\u5f15\u7ed3\u679c\u4e3a\u6570\u636e\u5305\u6240\u5c5e\u7684bucket(\u94fe\u8868)\u3002\u8fd9\u4e00\u6b65hash\u8ba1\u7b97\u65f6\u95f4\u56fa\u5b9a\u5e76\u4e14\u5f88\u77ed 2 \u904d\u5386hash\u5f97\u5230\u7684bucket\uff0c\u67e5\u627e\u662f\u5426\u6709\u5339\u914d\u7684conntrack\u6761\u76ee\u3002\u8fd9\u4e00\u6b65\u662f\u6bd4\u8f83\u8017\u65f6\u7684\u64cd\u4f5c\uff0cbucket size\u8d8a\u5927\uff08bucket\u957f\u5ea6\u8d8a\u957f\uff09\uff0c\u904d\u5386\u65f6\u95f4\u8d8a\u957f CONNTRACK_MAX\u4ee3\u8868\u7cfb\u7edf\u6240\u6709\u8ffd\u8e2a\u7684\u94fe\u63a5\u6570 HASHSIZE\u4ee3\u8868\u54c8\u5e0c\u8868\u5927\u5c0f. \u56e0\u6b64CONNTRACK_MAX:HASHSIZE\u6700\u597d\u4e0d\u8981\u592a\u5927, \u901a\u5e38\u63a8\u83508:1\u6216\u80054:1","title":"nf_conntrack \u7ed3\u6784\u548c hashtable"},{"location":"chapter_3/5_conntrack/#_3","text":"net.netfilter.nf_conntrack_max=6000000 net.netfilter.nf_conntrack_buckets=1307648 # timeout\u503c\u4e0d\u53d8 net.netfilter.nf_conntrack_tcp_timeout_close = 10 net.netfilter.nf_conntrack_tcp_timeout_close_wait = 60 net.netfilter.nf_conntrack_tcp_timeout_established = 432000 net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 120 net.netfilter.nf_conntrack_tcp_timeout_last_ack = 30 net.netfilter.nf_conntrack_tcp_timeout_max_retrans = 300 net.netfilter.nf_conntrack_tcp_timeout_syn_recv = 60 net.netfilter.nf_conntrack_tcp_timeout_syn_sent = 120 net.netfilter.nf_conntrack_tcp_timeout_time_wait = 120 net.netfilter.nf_conntrack_tcp_timeout_unacknowledged = 300 \u5b98\u65b9\u8bf4\u660e: https://www.kernel.org/doc/Documentation/networking/nf_conntrack-sysctl.txt","title":"(\u4e8c) \u5185\u6838\u76f8\u5173\u53c2\u6570"},{"location":"chapter_3/5_conntrack/#_4","text":"\u67e5\u770bnf_conntrack\u8868\u5f53\u524d\u8fde\u63a5\u6570 cat /proc/sys/net/netfilter/nf_conntrack_count \u67e5\u770bnf_conntrack\u8868\u6700\u5927\u8fde\u63a5\u6570 cat /proc/sys/net/netfilter/nf_conntrack_max \u901a\u8fc7dmesg\u53ef\u4ee5\u67e5\u770bnf_conntrack\u7684\u72b6\u51b5\uff1a dmesg |grep nf_conntrack # dmesg |grep nf_conntrack [ 44.139084] nf_conntrack version 0.5.0 (65536 buckets, 262144 max) \u8868\u793a\u5185\u6838\u542f\u52a8\u65f6\uff0cbucket\u6570\u91cf\u4e3a65536\uff0cconntrack\u7684\u6700\u5927\u8fde\u63a5\u6570\u4e3a262144 \u67e5\u770b\u5b58\u50a8conntrack\u6761\u76ee\u7684\u54c8\u5e0c\u8868\u5927\u5c0f,\u6b64\u4e3a\u53ea\u8bfb\u6587\u4ef6 cat /proc/sys/net/netfilter/nf_conntrack_buckets \u67e5\u770bnf_conntrack\u7684TCP\u8fde\u63a5\u8bb0\u5f55\u65f6\u95f4 cat /proc/sys/net/netfilter/nf_conntrack_tcp_timeout_established \u901a\u8fc7\u5185\u6838\u53c2\u6570\u67e5\u770b\u547d\u4ee4\uff0c\u67e5\u770b\u6240\u6709\u53c2\u6570\u914d\u7f6e sysctl -a | grep nf_conntrack \u901a\u8fc7conntrack\u547d\u4ee4\u884c\u5de5\u5177\u67e5\u770bconntrack\u7684\u5185\u5bb9 yum install -y conntrack / apt-get install -y conntrack conntrack -L","title":"\u4e8c \u5e38\u7528\u64cd\u4f5c"},{"location":"chapter_3/5_conntrack/#nf_conntrack_max-hashsize","text":"\u53ef\u4ee5\u589e\u5927 conntrack \u7684\u6761\u76ee(sessions, connection tracking entries) CONNTRACK_MAX \u6216\u8005\u589e\u52a0\u5b58\u50a8 conntrack \u6761\u76ee\u54c8\u5e0c\u8868\u7684\u5927\u5c0f HASHSIZE \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cCONNTRACK_MAX \u548c HASHSIZE \u4f1a\u6839\u636e\u7cfb\u7edf\u5185\u5b58\u5927\u5c0f\u8ba1\u7b97\u51fa\u4e00\u4e2a\u6bd4\u8f83\u5408\u7406\u7684\u503c\uff1a \u5bf9\u4e8e CONNTRACK_MAX\uff0c\u5176\u8ba1\u7b97\u516c\u5f0f\uff1a CONNTRACK_MAX = RAMSIZE (in bytes) / 16384 / (ARCH / 32) \u6bd4\u5982\u4e00\u4e2a 64 \u4f4d 48G \u7684\u673a\u5668\u53ef\u4ee5\u540c\u65f6\u5904\u7406 48*1024^3/16384/2 = 1572864 \u6761 netfilter \u8fde\u63a5\u3002\u5bf9\u4e8e\u5927\u4e8e 1G \u5185\u5b58\u7684\u7cfb\u7edf\uff0c\u9ed8\u8ba4\u7684 CONNTRACK_MAX \u662f 65535\u3002 \u5bf9\u4e8e HASHSIZE\uff0c\u9ed8\u8ba4\u7684\u6709\u8fd9\u6837\u7684\u8f6c\u6362\u5173\u7cfb\uff1a CONNTRACK_MAX = HASHSIZE * 8 \u8fd9\u8868\u793a\u6bcf\u4e2a\u94fe\u63a5\u5217\u8868\u91cc\u9762\u5e73\u5747\u6709 8 \u4e2a conntrack \u6761\u76ee\u3002\u5176\u771f\u6b63\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a HASHSIZE = CONNTRACK_MAX / 8 = RAMSIZE (in bytes) / 131072 / (ARCH / 32) \u6bd4\u5982\u4e00\u4e2a 64 \u4f4d 48G \u7684\u673a\u5668\u53ef\u4ee5\u5b58\u50a8 48*1024^3/131072/2 = 196608 \u7684buckets(\u8fde\u63a5\u5217\u8868)\u3002\u5bf9\u4e8e\u5927\u4e8e 1G \u5185\u5b58\u7684\u7cfb\u7edf\uff0c\u9ed8\u8ba4\u7684 HASHSIZE \u662f 8192\u3002 \u5e8f\u53f7 \u673a\u5668\u5185\u5b58 nf_conntrack_max\u4e0a\u9650 nf_conntrack_max\u548cHASHSIZE\u6bd4\u4f8b \u7ebf\u4e0a\u8bbe\u7f6e max_open_files 1 128G 4194304 4:1 2621440 100\u4e07","title":"\u4e09 \u4e0d\u540c\u5185\u5b58\u60c5\u51b5\u4e0b \uff0cnf_conntrack_max \u548c hashsize\u7684\u8bbe\u7f6e\u5efa\u8bae"},{"location":"chapter_3/5_conntrack/#_5","text":"\u5982\u679c\u67d0\u4e00\u7aef\u53e3\u6216\u8005\u67d0\u4e9b\u7aef\u53e3\uff0c\u6709\u8d85\u5927\u91cf\u7684\u8fde\u63a5\uff0c\u90a3\u4e48\u53ef\u4ee5\u4fee\u6539raw\u8868 \uff0c\u4e0d\u8fdb\u884c\u8fde\u63a5\u8ffd\u8e2a *filter iptables -t filter -A INPUT -m state --state RELATED,ESTABLISHED, UNTRACKED -j ACCEPT *raw iptables -t raw -A PREROUTING -p tcp -m set --match-set ${project_port} dst -j NOTRACK iptables -t raw -A OUTPUT -p tcp -m set --match-set ${project_port} src -j NOTRACK \u6216\u8005 iptables -A INPUT -m state --state RELATED,ESTABLISHED,UNTRACKED -j ACCEPT iptables -t raw -A PREROUTING -p tcp -m multiport --dports 80,443 -j NOTRACK iptables -t raw -A OUTPUT -p tcp -m multiport --sports 80,443 -j NOTRACK \u53c2\u8003: https://clodfisher.github.io/2018/09/nf_conntrack/ https://testerhome.com/topics/7509","title":"\u56db \u8d85\u5927\u8fde\u63a5\u6570\u573a\u666f,\u76f4\u63a5\u628a\u4e00\u4e9b\u7279\u5b9a\u7aef\u53e3\u7684\u8fde\u63a5\uff0c\u76f4\u63a5\u4e0d\u8ffd\u8e2a"},{"location":"chapter_3/6_tcp/","text":"\u6982\u8ff0 \u505a\u4e86\u5f88\u591a\u5e74\u8fd0\u7ef4\u5de5\u4f5c, \u7f51\u4e0a\u4e5f\u770b\u4e86\u8bb8\u8bb8\u591a\u591a\u6280\u672f\u6587\u7ae0.\u81ea\u5df1\u9762\u8bd5\u522b\u4eba, \u4e5f\u5f88\u559c\u6b22\u95ee TCP \u76f8\u5173\u7684\u95ee\u9898. \u6709\u611f\u800c\u53d1, \u603b\u7ed3\u4e00\u4e0b TCP \u8fd9\u5757\u7684\u77e5\u8bc6, \u7ed9\u5927\u5bb6\u505a\u4e00\u4e2a\u53c2\u8003. \u5b66\u4e60 TCP \u7684\u56db\u4e2a\u91cd\u70b9\uff1a \u9762\u5411\u8fde\u63a5 \u3001 \u53ef\u9760\u4f20\u8f93\u539f\u7406 \u3001 \u6d41\u91cf\u63a7\u5236 \u548c \u62e5\u585e\u63a7\u5236 . TCP \u57fa\u7840\u90e8\u5206 \u5148\u6765\u770b\u4e00\u4e0b TCP \u62a5\u5934\u5427 \u6765\u4e24\u5f20\u56fe, \u7ed9\u5927\u5bb6\u4e00\u4e2a\u6e05\u6670\u7684\u8ba4\u8bc6. \u6bcf\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49\u8fd9\u91cc\u7c97\u7565\u4ecb\u7ecd\u4e0b \u6e90\u3001\u76ee\u6807\u7aef\u53e3\u53f7\u5b57\u6bb5\uff1a\u5404\u5360 16 \u6bd4\u7279\u3002TCP \u534f\u8bae\u901a\u8fc7\u4f7f\u7528 \u7aef\u53e3 \u6765\u6807\u8bc6\u6e90\u7aef\u548c\u76ee\u6807\u7aef\u7684\u5e94\u7528\u8fdb\u7a0b\u3002\u7aef\u53e3\u53f7\u53ef\u4ee5\u4f7f\u7528 0 \u5230 65535 \u4e4b\u95f4\u7684\u4efb\u4f55\u6570\u5b57\uff0c\u4f46\u662f\u8fd9\u4e9b\u7aef\u53e3\u53f7\u5df2\u7ecf\u88ab\u5206\u4e3a\u516c\u8ba4\u7aef\u53e3\u3001\u6ce8\u518c\u7aef\u53e3\u548c\u52a8\u6001/\u79c1\u6709\u7aef\u53e3. MSS \u548c MTU \u7684\u6982\u5ff5 MTU: Maxitum Transmission Unit \u6700\u5927\u4f20\u8f93\u5355\u5143. \u901a\u5e38\u662f 1500 \u5b57\u8282. MSS: Maxitum Segment Size \u6700\u5927\u5206\u6bb5\u5927\u5c0f \u7531\u4e8e\u4ee5\u592a\u7f51 EthernetII \u6700\u5927\u7684\u6570\u636e\u5e27\u662f 1518Bytes\uff0c\u5228\u53bb\u4ee5\u592a\u7f51\u5e27\u7684\u5e27\u5934\uff08DMAC \u76ee\u7684\u5730\u5740 MAC48bit=6Bytes+SMAC \u6e90 MAC \u5730\u5740 48bit=6Bytes+Type \u57df 2bytes\uff0914Bytes \u548c\u5e27\u5c3e CRC \u6821\u9a8c\u90e8\u5206 4Bytes\uff08\u8fd9\u4e2a\u90e8\u95e8\u6709\u65f6\u5019\u5927\u5bb6\u4e5f\u628a\u5b83\u53eb\u505a FCS\uff09\uff0c\u90a3\u4e48\u5269\u4e0b\u627f\u8f7d\u4e0a\u5c42\u534f\u8bae\u7684\u5730\u65b9\u4e5f\u5c31\u662f Data \u57df\u6700\u5927\u5c31\u53ea\u80fd\u6709 1500Bytes. \u8fd9\u4e2a\u503c\u6211\u4eec\u5c31\u628a\u5b83\u79f0\u4e4b\u4e3a MTU, \u4e5f\u5c31\u662f\u6570\u636e\u94fe\u8def\u5c42\u5355\u6b21\u6700\u591a\u80fd\u591f\u627f\u8f7d\u7684\u6570\u636e\u91cf\u4e3a 1500 \u5b57\u8282. MSS \u5c31\u662f TCP \u6570\u636e\u5305\u6bcf\u6b21\u80fd\u591f\u4f20\u8f93\u7684\u6700\u5927\u6570\u636e\u5206\u6bb5\u3002\u4e3a\u4e86\u8fbe\u5230\u6700\u4f73\u7684\u4f20\u8f93\u6548\u80fd TCP \u534f\u8bae\u5728\u5efa\u7acb\u8fde\u63a5\u7684\u65f6\u5019\u901a\u5e38\u8981\u534f\u5546\u53cc\u65b9\u7684 MSS \u503c\uff0c\u8fd9\u4e2a\u503c TCP \u534f\u8bae\u5728\u5b9e\u73b0\u7684\u65f6\u5019\u5f80\u5f80\u7528 MTU \u503c\u4ee3\u66ff\uff08\u9700\u8981\u51cf\u53bb IP \u6570\u636e\u5305\u5305\u5934\u7684\u5927\u5c0f 20Bytes \u548c TCP \u6570\u636e\u6bb5\u7684\u5305\u5934 20Bytes\uff09\u6240\u4ee5\u5f80\u5f80 MSS \u4e3a 1460. \u53ef\u9760\u4f20\u8f93\u539f\u7406 \u53ef\u9760\u4f20\u8f93\u539f\u7406\u7684\u91cd\u70b9\u603b\u7ed3\u4e00\u4e0b\u6709\uff1a\u8fde\u7eed ARQ\u3001\u6ed1\u52a8\u7a97\u53e3\u3001\u8d85\u65f6\u91cd\u4f20\u3001\u7d2f\u79ef\u786e\u8ba4\u3001\u9009\u62e9\u786e\u8ba4 \u901a\u8fc7\u8fde\u7eed ARQ \u534f\u8bae\u4e0e\u53d1\u9001-\u786e\u8ba4\u56de\u590d\u6a21\u5f0f\u6765\u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u6570\u636e\u5305\u90fd\u5230\u8fbe\u63a5\u6536\u65b9 \u901a\u8fc7\u7ed9\u5b57\u8282\u7f16\u53f7\u7684\u65b9\u6cd5\uff0c\u6765\u6807\u8bb0\u6bcf\u4e00\u4e2a\u6570\u636e\u662f\u5c5e\u4e8e\u91cd\u4f20\u8fd8\u662f\u65b0\u7684\u6570\u636e \u901a\u8fc7\u8d85\u65f6\u91cd\u4f20\u7684\u65b9\u5f0f\uff0c\u6765\u89e3\u51b3\u6570\u636e\u5305\u5728\u7f51\u7edc\u4e2d\u4e22\u5931\u7684\u95ee\u9898 \u901a\u8fc7\u6ed1\u52a8\u7a97\u53e3\u6765\u5b9e\u73b0\u6d41\u91cf\u63a7\u5236 \u901a\u8fc7\u7d2f\u79ef\u786e\u8ba4+\u9009\u62e9\u786e\u8ba4\u7684\u65b9\u6cd5\u6765\u63d0\u9ad8\u786e\u8ba4\u56de\u590d\u4e0e\u91cd\u4f20\u7684\u6548\u7387 \u53c2\u8003 \u6ed1\u52a8\u7a97\u53e3\u7684\u6982\u5ff5 1 tcp \u62a5\u6587\u5934\u90e8\u91cc\u9762\uff0c\u4e3a\u4ec0\u4e48\u51fa\u73b0 Window \u5b57\u6bb5? \u4e3a\u4e86\u63d0\u5347\u4f20\u8f93\u6548\u7387\uff0c\u672c\u6765\u53d1\u9001\u65b9\u53d1\u4e00\u4e2a\u62a5\u6587\uff0c\u63a5\u6536\u65b9\u786e\u8ba4\u4e4b\u540e\uff0c\u53d1\u9001\u65b9\u624d\u80fd\u7ee7\u7eed\u4e0b\u4e00\u4e2a\u62a5\u6587\u3002\u73b0\u5728\u63a5\u6536\u65b9\u6709\u4e86 buffer\uff0c\u53d1\u9001\u65b9\u53ef\u4ee5\u8fde\u7eed\u53d1\u9001\u51e0\u4e2a\u62a5\u6587\uff0c\u63a5\u6536\u65b9\u5148\u5b58\u5728 buffer \u91cc\u9762\uff0c \u518d\u7ed9\u53d1\u9001\u65b9\u4e00\u4e2a\u786e\u8ba4\u3002\u8fd9\u5c31\u662f\u8fde\u7eed ARQ, \u4f1a\u5927\u5927\u7684\u52a0\u5feb\u4f20\u8f93\u901f\u5ea6\u3002\u5f53\u7136 Window \u7684\u5927\u5c0f\u662f\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\uff0c\u968f\u65f6\u8fdb\u884c\u8c03\u6574\u7684\u3002 2 \u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0 Window Scaling(\u7a97\u53e3\u7f29\u653e\u6bd4\u4f8b)\uff1f\uff1f \u56e0\u4e3a\u968f\u7740\u7f51\u7edc\u7684\u53d1\u5c55\uff0c\u5e26\u5bbd\u8d8a\u6765\u8d8a\u5927\uff0c\u6700\u65e9\u7684 Window \u5b57\u6bb5\u53ea\u6709 16 \u4f4d, \u6700\u591a\u80fd\u591f\u8868\u793a 2^16 \u6b21\u65b9\uff0c\u5373 65535 \u5b57\u8282\u3002 \u5982\u679c\u63a5\u6536\u65b9\u7684 buffer \u5927\u5c0f\u8d85\u8fc7 65535 \u5b57\u8282\uff0c\u90a3\u4e48\u591a\u4f59\u7684\u90e8\u5206\u4e5f\u7528\u4e0d\u5230\uff0c\u56e0\u4e3a\u65e0\u6cd5\u544a\u77e5\u53d1\u9001\u65b9\u3002 \u56e0\u6b64\u51fa\u73b0\u4e86\u7f29\u653e\u6bd4\u4f8b\u5b57\u6bb5\uff0c\u7528\u6765\u544a\u77e5\u53d1\u9001\u65b9\uff0c\u6211\u7684 buffer \u5927\u5c0f\uff0c\u662f Window \u5b57\u6bb5\u7684\u591a\u5c11\u6bd4\u4f8b\uff08\u901a\u5e38\u662f\u51e0\u5341\u500d\u5230\u51e0\u767e\u500d\uff09 \u56e0\u6b64\uff0c\u6570\u636e\u4f20\u8f93\u5c31\u53ef\u4ee5\u5927\u5927\u52a0\u5feb\u4e86\u3002 3 Window Scaling \u7684\u503c\uff0c\u662f\u5728 SYN \u5305\u91cc\u9762\u6307\u5b9a\u7684\uff0c\u5e76\u4e14\u5728\u6574\u4e2a\u8fde\u63a5\u7684\u8fc7\u7a0b\u4e2d\uff0c\u65e0\u6cd5\u88ab\u6539\u53d8\u3002 Window Size \u7684\u503c\uff0c\u5728\u6574\u4e2a\u8fde\u63a5\u6301\u7eed\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u88ab\u6539\u53d8, \u800c\u4e14\u90fd\u662f\u64cd\u4f5c\u7cfb\u7edf\u81ea\u52a8\u505a\u7684\u4e8b\u60c5\u3002 \u4e5f\u5c31\u662f\u8bf4 Window Size * Window\u7f29\u653e\u6bd4\u4f8b \uff1d socket\u4f7f\u7528\u7684buffer\u5927\u5c0f \u3002 socket \u662f\u7528\u6237\u7a7a\u95f4\u8fdb\u7a0b\u7528\u7684\uff0c\u90a3\u4e48\u5b83\u81ea\u7136\u5927\u4e00\u4e9b\u597d\uff0c\u8ba9\u5e94\u7528\u5c42\u53ef\u4ee5\u6709\u66f4\u5145\u8db3\u7684\u65f6\u95f4\u5904\u7406\u3002\u5f53\u7136\u5b83\u53ef\u4ee5\u7533\u8bf7\u7684 buffer \u5927\u5c0f\uff0c\u5fc5\u7136\u8981\u53d7\u5230\u5185\u6838\u63a7\u5236\uff0c\u5185\u6838\u901a\u8fc7\u8bbe\u7f6e\u5185\u6838\u53c2\u6570\u53bb\u63a7\u5236\u3002 \u6211\u4eec\u6765\u770b\u4e0b\u63a5\u6536\u548c\u53d1\u9001\u65f6 Buffer \u5927\u5c0f\u76f8\u5173\u7684\u5185\u6838\u53c2\u6570. \u5185\u6838\u53c2\u6570 \u4e2d\u6587\u8bf4\u660e \u5e38\u7528\u4f18\u5316\u6280\u80fd net.core.rmem_default = 262144 socket \u7684\u63a5\u6536 buffer,\u9ed8\u8ba4\u4e3a 256KB net.core.rmem_max = 4194304 socket \u7684\u63a5\u6536 buffer,\u6700\u5927\u4e3a 4MB net.ipv4.tcp_rmem = 4096 87380 16777216 \u5185\u6838\u81ea\u52a8\u5e2e\u5fd9\u8c03\u6574\u7684\u63a5\u6536 buffer \u7684\u5927\u5c0f, \u6709 3 \u4e2a\u503c, \u6700\u5de6\u8fb9\u662f\u6700\u5c0f\u503c, \u4e2d\u95f4\u662f\u9ed8\u8ba4\u503c, \u53f3\u8fb9\u662f\u6700\u5927\u503c. \u5176\u4e2d\u4e2d\u95f4\u7684\u9ed8\u8ba4\u503c,\u4f1a\u88ab rmem_default \u8986\u76d6, \u53f3\u8fb9\u7684\u6700\u5927\u503c\u4f1a\u88ab rmem_max \u8986\u76d6 net.core.wmem_default = 2097152 socket \u7684\u53d1\u9001 buffer,\u9ed8\u8ba4\u4e3a 2MB net.core.wmem_max = 16777216 socket \u7684\u53d1\u9001 buffer,\u6700\u5927\u4e3a 16MB net.ipv4.tcp_wmem = 4096 65536 16777216 \u5185\u6838\u81ea\u52a8\u5e2e\u5fd9\u8c03\u6574\u7684\u53d1\u9001 buffer \u7684\u5927\u5c0f, \u6709 3 \u4e2a\u503c, \u6700\u5de6\u8fb9\u662f\u6700\u5c0f\u503c, \u4e2d\u95f4\u662f\u9ed8\u8ba4\u503c, \u53f3\u8fb9\u662f\u6700\u5927\u503c. \u5176\u4e2d\u4e2d\u95f4\u7684\u9ed8\u8ba4\u503c,\u4f1a\u88ab wmem_default \u8986\u76d6, \u53f3\u8fb9\u7684\u6700\u5927\u503c\u4f1a\u88ab wmem_max \u8986\u76d6 \u6d41\u91cf\u63a7\u5236 \u7528\u56fe\u8bf4\u660e\u4e0b\u6ed1\u52a8\u7a97\u53e3\u7684\u5de5\u4f5c\u8fc7\u7a0b. \u53d1\u9001\u65b9\u9700\u8981\u6839\u636e\u63a5\u6536\u65b9\u7684\u7f13\u51b2\u533a\u5927\u5c0f\uff0c\u8bbe\u7f6e\u81ea\u5df1\u7684\u53ef\u53d1\u9001\u7a97\u53e3\u5927\u5c0f\uff0c\u5904\u4e8e\u7a97\u53e3\u5185\u7684\u6570\u636e\u8868\u793a\u53ef\u53d1\u9001\uff0c\u4e4b\u5916\u7684\u6570\u636e\u4e0d\u53ef\u53d1\u9001\u3002 \u5f53\u7a97\u53e3\u5185\u7684\u6570\u636e\u63a5\u6536\u5230\u786e\u8ba4\u56de\u590d\u65f6\uff0c\u6574\u4e2a\u7a97\u53e3\u4f1a\u5f80\u524d\u79fb\u52a8\uff0c\u76f4\u5230\u53d1\u9001\u5b8c\u6210\u6240\u6709\u7684\u6570\u636e \u5728 TCP \u7684\u9996\u90e8\u6709\u4e00\u4e2a\u7a97\u53e3\u5927\u5c0f\u5b57\u6bb5\uff0c\u4ed6\u8868\u793a\u63a5\u6536\u65b9\u7684\u5269\u4f59\u7f13\u51b2\u533a\u5927\u5c0f\uff0c\u8ba9\u53d1\u9001\u65b9\u53ef\u4ee5\u8c03\u6574\u81ea\u5df1\u7684\u53d1\u9001\u7a97\u53e3\u5927\u5c0f\u3002\u901a\u8fc7\u6ed1\u52a8\u7a97\u53e3\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0 TCP \u7684\u6d41\u91cf\u63a7\u5236\uff0c\u4e0d\u81f3\u4e8e\u53d1\u9001\u592a\u5feb\uff0c\u5bfc\u81f4\u592a\u591a\u7684\u6570\u636e\u4e22\u5931\u3002 \u8fde\u7eed ARQ \u5e26\u6765\u7684\u7b2c\u4e8c\u4e2a\u95ee\u9898\u662f\uff1a\u7f51\u7edc\u4e2d\u5145\u65a5\u7740\u548c\u53d1\u9001\u6570\u636e\u5305\u4e00\u6837\u6570\u636e\u91cf\u7684\u786e\u8ba4\u56de\u590d\u62a5\u6587\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u53d1\u9001\u6570\u636e\u5305\uff0c\u5fc5\u987b\u5f97\u6709\u4e00\u4e2a\u786e\u8ba4\u56de\u590d\u3002\u63d0\u9ad8\u7f51\u7edc\u6548\u7387\u7684\u65b9\u6cd5\u662f\uff1a \u7d2f\u79ef\u786e\u8ba4 \u3002\u63a5\u6536\u65b9\u4e0d\u9700\u8981\u9010\u4e2a\u8fdb\u884c\u56de\u590d\uff0c\u800c\u662f\u7d2f\u79ef\u5230\u4e00\u5b9a\u91cf\u7684\u6570\u636e\u5305\u4e4b\u540e\uff0c\u544a\u8bc9\u53d1\u9001\u65b9\uff0c\u5728\u6b64\u6570\u636e\u5305\u4e4b\u524d\u7684\u6570\u636e\u5168\u90fd\u6536\u5230\u3002\u4f8b\u5982\uff0c\u6536\u5230 1234\uff0c\u63a5\u6536\u65b9\u53ea\u9700\u8981\u544a\u8bc9\u53d1\u9001\u65b9\u6211\u6536\u5230 4 \u4e86\uff0c\u90a3\u4e48\u53d1\u9001\u65b9\u5c31\u77e5\u9053 1234 \u90fd\u6536\u5230\u4e86\u3002 \u7b2c\u4e09\u4e2a\u95ee\u9898\u662f\uff1a\u5982\u4f55\u5904\u7406\u4e22\u5305\u60c5\u51b5\u3002\u5728\u505c\u6b62\u7b49\u5f85\u534f\u8bae\u4e2d\u5f88\u7b80\u5355\uff0c\u76f4\u63a5\u4e00\u4e2a\u8d85\u65f6\u91cd\u4f20\u5c31\u89e3\u51b3\u4e86\u3002\u4f46\uff0c\u8fde\u7eed ARQ \u4e2d\u4e0d\u592a\u4e00\u6837\u3002\u4f8b\u5982\uff1a\u63a5\u6536\u65b9\u6536\u5230\u4e86 123 567\uff0c\u516d\u4e2a\u5b57\u8282\uff0c\u7f16\u53f7\u4e3a 4 \u7684\u5b57\u8282\u4e22\u5931\u4e86\u3002\u6309\u7167\u7d2f\u79ef\u786e\u8ba4\u7684\u601d\u8def\uff0c\u53ea\u80fd\u53d1\u9001 3 \u7684\u786e\u8ba4\u56de\u590d\uff0c567 \u90fd\u5fc5\u987b\u4e22\u6389\uff0c\u56e0\u4e3a\u53d1\u9001\u65b9\u4f1a\u8fdb\u884c\u91cd\u4f20\u3002\u8fd9\u5c31\u662f GBN\uff08go-back-n) \u601d\u8def\u3002 \u4f46\u662f\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u53ea\u9700\u8981\u91cd\u4f20 4 \u5373\u53ef\uff0c\u8fd9\u6837\u4e0d\u662f\u5f88\u6d6a\u8d39\u8d44\u6e90\uff0c\u6240\u4ee5\u5c31\u6709\u4e86\uff1a \u9009\u62e9\u786e\u8ba4(SACK) \u3002\u5728 TCP \u62a5\u6587\u7684\u9009\u9879\u5b57\u6bb5\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u5df2\u7ecf\u6536\u5230\u7684\u62a5\u6587\u6bb5\uff0c\u6bcf\u4e00\u4e2a\u62a5\u6587\u6bb5\u9700\u8981\u4e24\u4e2a\u8fb9\u754c\u6765\u8fdb\u884c\u786e\u5b9a\u3002\u8fd9\u6837\u53d1\u9001\u65b9\uff0c\u5c31\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u9009\u9879\u5b57\u6bb5\u53ea\u91cd\u4f20\u4e22\u5931\u7684\u6570\u636e\u4e86\u3002 tcp \u8fde\u63a5\u5efa\u7acb\u548c\u65ad\u5f00\u8fc7\u7a0b \u6765\u4e00\u5f20\u56fe\u8bf4\u660e\u4e00\u4e0b\u8fde\u63a5\u5efa\u7acb\u548c\u65ad\u5f00\u7684\u8fc7\u7a0b\uff0c\u4ee5\u53ca 2 \u7aef Socket \u7684\u72b6\u6001\u53d8\u5316 Timewait \u72b6\u6001\u7684\u4f5c\u7528 \u9996\u5148\u660e\u786e Timewait \u72b6\u6001, \u662f\u4e3b\u52a8\u65ad\u5f00\u8fde\u63a5\u7684\u90a3\u4e00\u65b9\u4f1a\u51fa\u73b0\u7684, (Client \u6216\u8005 Server \u90fd\u53ef\u4ee5) MSL\uff08Max Segment Lifetime)\u4e3a\u6700\u5927\u62a5\u6587\u751f\u5b58\u65f6\u95f4, \u6839\u636e RFC 793 \u5b9a\u4e49, \u662f 2 \u5206\u949f. Timewait \u72b6\u6001\u6301\u7eed\u7684\u65f6\u95f4\u8981\u5927\u4e8e\u7b49\u4e8e 2 * MSL\u3002 1 \u7b2c\u4e00\u4e2a\u4f5c\u7528\u662f\u907f\u514d\u4e0a\u4e00\u4e2a\u8fde\u63a5\u5ef6\u8fdf\u5230\u8fbe\u7684\u6570\u636e\u5305\u88ab\u4e0b\u4e00\u4e2a\u8fde\u63a5\u9519\u8bef\u63a5\u6536\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u540c\u4e00\u4e2a client \u548c server, \u5728\u4e00\u6bb5\u65f6\u95f4\u5185 4 \u5143\u7ec4\u4e00\u6837 (client_ip,client_port,server_ip,server_port) \u5982\u679c\u6ca1\u6709 timewait \u72b6\u6001, \u6bcf\u6b21\u4e3b\u52a8\u65ad\u5f00\u8fde\u63a5\u7684\u90a3\u4e00\u65b9\u5f88\u5feb\u5c31\u5173\u95ed\u4e86\u8fde\u63a5, \u90a3\u4e48\u5047\u8bbe\u4e0b\u4e00\u6b21\u8fde\u63a5\u5904\u4e8e ESTABLISH \u72b6\u6001\u65f6\uff0c\u4e4b\u524d\u88ab\u4e22\u5931\u7684\u62a5\u6587\u4f20\u8fc7\u6765\u4e86,\u5c31\u6709\u53ef\u80fd\u88ab\u9519\u8bef\u5730\u63a5\u6536, \u4ece\u800c\u5f71\u54cd\u73b0\u6709\u8fde\u63a5. \u5982\u679c\u6709 timewait \u72b6\u6001, timewait \u662f\u8981\u5927\u4e8e\u7b49\u4e8e 2MSL \u7684, \u90a3\u4e48\u5c31\u4e0d\u53ef\u80fd\u6709\u62a5\u6587\u4f1a\u88ab\u65b0\u8fde\u63a5\u63a5\u6536. 2 \u7b2c\u4e8c\u4e2a\u4f5c\u7528: \u786e\u4fdd\u88ab\u52a8\u5173\u95ed\u7684\u90a3\u4e00\u65b9\u53ef\u4ee5\u6b63\u5e38\u5173\u95ed\u8fde\u63a5. \u5047\u8bbe\u4e3b\u52a8\u65ad\u5f00\u8fde\u63a5\u7684\u8fd9\u4e00\u65b9\uff0c\u53d1\u7ed9\u5bf9\u65b9\u7684\u6700\u540e\u4e00\u4e2a ACK \u4e22\u4e86, \u6b64\u65f6\u88ab\u52a8\u65ad\u5f00\u8fde\u63a5\u7684\u90a3\u4e00\u65b9\u4e00\u76f4\u5904\u4e8e LAST-ACK \u72b6\u6001, \u4ed6\u6ca1\u6709\u6536\u5230\u6700\u540e\u4e00\u4e2a ACK, \u8fc7\u6bb5\u65f6\u95f4\u4f1a\u91cd\u53d1\u4e4b\u524d\u7684 FIN \u62a5\u6587\u3002\u5982\u679c\u4e3b\u52a8\u65ad\u5f00\u7684\u8fd9\u4e00\u65b9\u6ca1\u6709 Timewait \u72b6\u6001\uff0c\u6b64\u65f6\u5df2\u7ecf\u662f CLOSED \u72b6\u6001\u4e86, \u90a3\u4e48\u4f1a\u76f4\u63a5\u56de\u590d\u4e00\u4e2a RST \u62a5\u6587, \u8fd9\u6837\u88ab\u52a8\u65ad\u5f00\u8fde\u63a5\u7684\u8fd9\u4e00\u65b9\u5c31\u4f1a\u6536\u5230\u4e00\u4e2a\u9519\u8bef. \u603b\u7ed3: 2 \u4e2a\u4f5c\u7528\uff0c\u4e00\u4e2a\u4f5c\u7528\u662f\u9632\u6b62\u6570\u636e\u5ef6\u8fdf\u800c\u5f15\u53d1\u9519\u8bef\uff0c\u53e6\u4e00\u4e2a\u4f5c\u7528\u662f\u9632\u6b62 ACK \u4e22\u5931\u800c\u5f15\u53d1\u9519\u8bef. Timewait \u5176\u4ed6\u5c0f\u77e5\u8bc6 Linux Socket \u7684 Timewait \u65f6\u95f4\u53ef\u4ee5\u4fee\u6539\u5417? \u4e0d\u53ef\u4ee5. \u56e0\u4e3a\u5728\u5185\u6838\u4ee3\u7801\u91cc\u5df2\u7ecf\u5199\u6b7b\u4e86\u8fd9\u4e2a\u65f6\u95f4\u4e3a 60 \u79d2. include/net/tcp.h 121:#define TCP_TIMEWAIT_LEN (60*HZ) /* how long to wait to destroy TIME-WAIT \u76f8\u5173\u7684\u5185\u6838\u53c2\u6570 \u5185\u6838\u53c2\u6570 \u8bf4\u660e \u5907\u6ce8 net.ipv4.tcp_fin_timeout=30 \u8868\u793a\u7684\u662f\u4e00\u4e2a Linux socket \u5bf9\u8c61\uff0c\u5904\u4e8e FIN-WAIT-2 \u72b6\u6001\u7684\u6700\u5927\u65f6\u95f4 \u53c2\u8003 net.ipv4.tcp_timestamps = 1(\u53ef\u9009\u503c:0\u30011\u30012) \u8be5\u53c2\u6570\u7528\u4e8e\u8bbe\u7f6e\u4f7f\u7528\u65f6\u95f4\u6233\u4f5c\u4e3a\u5e8f\u5217\u53f7\uff0c\u901a\u8fc7\u8fd9\u6837\u7684\u8bbe\u7f6e\u53ef\u4ee5\u907f\u514d\u5e8f\u5217\u53f7\u88ab\u91cd\u590d\u4f7f\u7528.(\u53c2\u8003 RFC 1323) \u5b98\u65b9\u6587\u6863\u8bf4\u660e net.ipv4.tcp_tw_reuse = 1 Allow to reuse TIME-WAIT sockets for new connections when it is safe from protocol viewpoint. Default value is 0. It should not be changed without advice/request of technical experts.(\u5141\u8bb8\u91cd\u7528\u5904\u4e8e Timewait \u72b6\u6001\u7684 socekt,\u6765\u65b0\u5efa tcp \u8fde\u63a5). \u53ea\u6709\u5f53 net.ipv4.tcp_timestamps = 1\uff0cnet.ipv4.tcp_tw_reuse = 1 \u4e24\u4e2a\u9009\u9879\u540c\u65f6\u5f00\u542f\u65f6\uff0ctcp_tw_reuse \u624d\u4f1a\u6709\u6548\uff0c\u5e76\u4e14\u53ea\u6709\u5f53 socket \u8ddd\u79bb\u4e0a\u6b21\u6536\u5230\u6570\u636e\u5305\u5df2\u7ecf\u8d85\u8fc7 1 \u79d2\u65f6\uff0c\u7aef\u53e3\u624d\u4f1a\u88ab\u91cd\u7528 \u8fd9\u4e2a\u53c2\u6570\u5982\u679c\u8981\u4ecb\u7ecd\u7684\u8bdd,\u53ef\u4ee5\u5199\u4e00\u6574\u7bc7\u6587\u6863\u4e86. \u53c2\u8003 \u4e3b\u8981\u4f5c\u7528\u662f\u672c\u5730\u7aef\u53e3\u4e0d\u591f\u7528\u65f6, \u590d\u7528\u5904\u4e8e Timewait \u72b6\u6001\u7684 socket. net.ipv4.tcp_tw_recycle = 1 Enable fast recycling TIME-WAIT sockets. Default value is 0. It should not be changed without advice/request of technical experts.\u4f1a\u5feb\u901f\u56de\u6536 TIME_WAIT \u72b6\u6001\u7684 socket \u3002\u6ce8\u610f\u53ea\u6709\u5f53 tcp_timestamps \u548c tcp_tw_recycle \u90fd\u5f00\u542f\u65f6\uff0c\u624d\u4f1a\u5feb\u901f\u56de\u6536 \u5185\u6838 4.12 \u7248\u672c\u53bb\u6389\u8fd9\u4e2a\u53c2\u6570 net.ipv4.ip_local_port_range = 32768 60999 \u4e3b\u52a8\u8fde\u63a5\u65b9\uff08\u5ba2\u6237\u7aef\uff09\u4f1a\u5360\u7528\u672c\u5730\u7aef\u53e3, \u53ef\u4ee5\u901a\u8fc7\u8c03\u6574\u8be5\u53c2\u6570\u6765\u589e\u52a0\u672c\u5730\u7aef\u53e3\u7684\u9009\u62e9\u8303\u56f4 Nagle\u2019s Algorithm(Nagle \u7b97\u6cd5) \u4e3a\u4ec0\u4e48\u4f1a\u6709 Nagle \u7b97\u6cd5 TCP/IP \u534f\u8bae\u4e2d\uff0c\u65e0\u8bba\u53d1\u9001\u591a\u5c11\u6570\u636e\uff0c\u603b\u662f\u8981\u5728\u6570\u636e\u524d\u9762\u52a0\u4e0a\u534f\u8bae\u5934, TCP header \u5360 20 bytes\uff0c IPv4 header \u5360 20 bytes\uff0c\u82e5\u50b3\u9001\u7684\u8cc7\u6599\u592a\u5c0f\uff0c TCP/IPv4 headers \u9020\u6210\u7684 overhead (40bytes) \u4e26\u4e0d\u5212\u7b97\u3002\u60f3\u50cf\u50b3\u9001\u8cc7\u6599\u53ea\u6709 1 byte\uff0c\u537b\u8981\u53e6\u5916\u50b3 40 bytes header\uff0c\u9019\u662f\u5f88\u5927\u7684\u6d6a\u8cbb\u3002\u82e5\u7db2\u8def\u4e0a\u6709\u5927\u91cf\u5c0f\u5c01\u5305\uff0c\u6703\u5360\u53bb\u7db2\u8def\u983b\u5bec\uff0c\u53ef\u80fd\u6703\u9020\u6210\u7db2\u8def\u64c1\u585e. \u65bc\u662f\u6709\u4e86 Nagle\u2019s Algorithm\uff0c\u7528\u4f86\u907f\u514d\u7522\u751f\u5927\u91cf\u7684\u5c0f\u5c01\u5305\u3002 Nagle \u7b97\u6cd5\u7684\u4e2d\u5fc3\u601d\u60f3 Nagle \u7b97\u6cd5\u7684\u57fa\u672c\u5b9a\u4e49\u662f \u4efb\u610f\u65f6\u523b\uff0c\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\u672a\u88ab\u786e\u8ba4\u7684\u5c0f\u6bb5 \u3002 \u6240\u8c13 \u5c0f\u6bb5 \uff0c\u6307\u7684\u662f\u5c0f\u4e8e MSS \u5c3a\u5bf8\u7684\u6570\u636e\u5757\uff0c\u6240\u8c13 \u672a\u88ab\u786e\u8ba4 \uff0c\u662f\u6307\u4e00\u4e2a\u6570\u636e\u5757\u53d1\u9001\u51fa\u53bb\u540e\uff0c\u6ca1\u6709\u6536\u5230\u5bf9\u65b9\u53d1\u9001\u7684 ACK \u786e\u8ba4\u8be5\u6570\u636e\u5df2\u6536\u5230\u3002 \u53c2\u8003 \u6587\u6863 1 , \u6587\u6863 2 TCP_NODELAY\u3001Delayed ACK \u673a\u5236\u3001TCP_NOPUSH TCP_NODELAY \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53d1\u9001\u6570\u636e\u91c7\u7528 Nagle \u7b97\u6cd5\u3002\u8fd9\u6837\u867d\u7136\u63d0\u9ad8\u4e86\u7f51\u7edc\u541e\u5410\u91cf\uff0c\u4f46\u662f\u5b9e\u65f6\u6027\u5374\u964d\u4f4e\u4e86\uff0c\u5728\u4e00\u4e9b\u4ea4\u4e92\u6027\u5f88\u5f3a\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\u662f\u4e0d\u5141\u8bb8\u7684\uff0c\u4f7f\u7528 TCP_NODELAY \u9009\u9879\u53ef\u4ee5\u7981\u6b62 Nagle \u7b97\u6cd5. \u6b64\u65f6\uff0c\u5e94\u7528\u7a0b\u5e8f\u5411\u5185\u6838\u9012\u4ea4\u7684\u6bcf\u4e2a\u6570\u636e\u5305\u90fd\u4f1a\u7acb\u5373\u53d1\u9001\u51fa\u53bb, \u4e5f\u5c31\u662f socket send buffer \u91cc\u7684\u6570\u636e\u4f1a\u88ab\u7acb\u5373\u53d1\u51fa. \u4e86\u89e3\u4e0b Nginx \u7684 TCP_NODELAY Delayed ACK \u673a\u5236 Nagle\u2019s Algorithm \u548c Delayed ACK \u673a\u5236\uff0c \u5728 Linux \u4e0a\u90fd\u662f\u9ed8\u8ba4\u5f00\u542f\u7684. Delayed ACK \u673a\u5236\u662f\u8fd9\u6837: \u67e5\u8be2 RFC1122 \u7684 4.2.3.2 When to Send an ACK Segment \u5f97\u77e5 ` 4.2.3.2 When to Send an ACK Segment A host that is receiving a stream of TCP data segments can increase efficiency in both the Internet and the hosts by sending fewer than one ACK (acknowledgment) segment per data segment received; this is known as a \"delayed ACK\" [TCP:5]. A TCP SHOULD implement a delayed ACK, but an ACK should not be excessively delayed; in particular, the delay MUST be less than 0.5 seconds, and in a stream of full-sized segments there SHOULD be an ACK for at least every second segment. ` This process, known as delayed ACKing [RFC1122] ,typically causes an ACK to be generated for every other received (full-sized) data packet. In the case of an isolated TCP packet (i.e., where a second TCP packet is not going to arrive anytime soon), the delayed ACK policy causes an acknowledgement for the data in the isolated packet to be delayed up to 200 milliseconds of the receipt of the isolated packet (the actual maximum time the acknowledgement can be delayed is 500ms [RFC1122], but most systems implement a maximum of 200ms \u91cd\u9ede: \u901a\u5e38\u6700\u591a\u5ef6\u9072 200ms\uff0cRFC \u898f\u5b9a\u4e0d\u80fd\u8d85\u904e 500ms\u3002 \u6bcf\u6536\u5230\u5169\u500b full-sized packet\uff0c\u4e00\u5b9a\u8981\u56de\u4e00\u6b21 ACK\u3002 Linux \u7684\u5b9e\u73b0\u662f\u5728 __tcp_ack_snd_check()\u51fd\u6570\uff0c\u898f\u5247\u662f\u4ee5\u4e0b\u5176\u4e2d\u4e00\u500b\u689d\u4ef6\u6eff\u8db3\u5c31\u6703\u9001\u51fa ACK \u6536\u5230\u4e14\u9084\u6c92 ACK \u7684\u8cc7\u6599\u8d85\u904e MSS (\u7528\u767c\u9001\u7aef\u7684 MSS \u8a08\u7b97)\uff0c\u4e26\u4e14\u61c9\u7528\u5c64\u8b80\u53d6\u8cc7\u6599\u901f\u5ea6\u5920\u5feb\u3002 \u5728 quickack mode: \u61c9\u7528\u5c64\u53ef\u4ee5\u5f37\u8feb\u555f\u7528\u9019\u500b\u6a21\u5f0f\u3002 \u6536\u5230 out-of-order \u8cc7\u6599\uff0c\u8981\u99ac\u4e0a\u901a\u77e5\u767c\u9001\u7aef\u6536\u5230\u7684\u90e8\u4efd (\u7528 SACK)\uff0c\u907f\u514d\u91cd\u50b3\u3002 Delayed ACK \u7684\u597d\u5904 \u8282\u7ea6\u53d1\u9001\u7684 ACK \u62a5\u6587\u6570\u91cf. Delayed ACK \u5982\u4f55\u5f71\u54cd TCP 4 \u6b21\u6325\u624b\u8fc7\u7a0b \u6b63\u5e38\u7684\u6325\u624b\u6d41\u7a0b\u662f\u8fd9\u6837\u7684 1 client: FIN (will not send more) 2 server: ACK (received the FIN) \u2026 server: sends more data\u2026, client ACKs these data 3 server: FIN (will not send more) 4 client: ACK (received the FIN) If the server has no more data to send it might close the connection also. In this case steps 2+3 can be merged, e.g. the server sends a FIN+ACK, where the ACK acknowledges the FIN received by the client. \u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u670d\u52a1\u5668\u7aef\u5728\u5ba2\u6237\u7aef\u53d1\u51fa FIN \u4ee5\u540e\uff0c\u5982\u679c\u6709\u6570\u636e\u8981\u53d1\u9001\uff0c\u9700\u8981\u5148 ACK \u8fd9\u4e2a FIN\uff0c\u7136\u540e\u518d\u8fdb\u884c\u6570\u636e\u53d1\u9001\u3002\u4f46\u662f\u5982\u679c\u670d\u52a1\u5668\u7aef\u6ca1\u6709\u66f4\u591a\u6570\u636e\u53d1\u9001\uff0c\u4e5f\u8981\u5173\u95ed\u8fde\u63a5\u7684\u60c5\u51b5\u4e0b\uff0c\u5f88\u53ef\u80fd ACK \u5305\u5c31\u8ddf\u968f FIN \u4e00\u8d77\u53d1\u51fa\u3002\u5176\u4e2d ACK \u4e3a\u786e\u8ba4\u5ba2\u6237\u7aef\u7684 FIN \u5305\u3002 Linux \u4e0a\u5982\u4f55\u5173\u95ed Delayed ACK \u673a\u5236 \u5f00\u542f TCP_QUICKACK \u9009\u9879 TCP_QUICKACK (since Linux 2.4.4) Enable quickack mode if set or disable quickack mode if cleared. In quickack mode, acks are sent immediately, rather than delayed if needed in accordance to normal TCP operation. This flag is not permanent, it only enables a switch to or from quickack mode. Subsequent operation of the TCP protocol will once again enter/leave quickack mode depending on internal protocol processing and factors such as delayed ack timeouts occurring and data transfer. This option should not be used in code intended to be portable. \u6ce8\u610f TCP_QUICKACK \u9009\u9879\u4ec5\u4ec5\u9002\u7528\u4e8e Linux \u5e73\u53f0, \u5176\u4ed6\u5e73\u53f0\u4e0d\u4e00\u5b9a\u652f\u6301. TCP_NOPUSH Linux\u672c\u8eab\u5e76\u6ca1\u6709\u63d0\u4f9bTCP_NOPUSH\u9009\u9879 , \u8be5\u9009\u9879\u662f NGINX \u5b98\u65b9\u7ed9\u51fa\u7684. \u56e0\u4e3a\u8fd9\u4e2a\u9009\u9879\u548c TCP_NOPUSH \u592a\u50cf\u4e86, \u6240\u4ee5\u653e\u5230\u8fd9\u91cc\u4e00\u8d77\u8bb2. \u5728 Nginx \u4e2d\uff0c \u5982\u679c\u4f60\u542f\u52a8\u7528\u4e86 Sendfile \u9009\u9879, \u5e76\u4e14\u5f00\u542f\u4e86 TCP_NOPUSH \u9009\u9879,\u90a3\u4e48\u4f1a\u4f7f\u5f97 sending the response header and the beginning of a file in one packet, on Linux and FreeBSD 4.*;(\u5934\u90e8\u4f7f\u7528\u4e00\u4e2a\u62a5\u6587) sending a file in full packets.(\u6587\u4ef6\u7684\u6570\u636e\u90e8\u5206\u91c7\u7528 MSS \u5927\u5c0f\u53d1\u9001) TCP \u62e5\u585e\u63a7\u5236 \u62e5\u585e\u63a7\u5236\u8003\u8651\u7684\u662f\uff1a \u907f\u514d\u7f51\u7edc\u8fc7\u5206\u62e5\u6324\u5bfc\u81f4\u4e22\u5305\u4e25\u91cd\uff0c\u7f51\u7edc\u6548\u7387\u964d\u4f4e . \u62e5\u585e\u63a7\u5236\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u6d41\u91cf\u63a7\u5236\uff0c\u6d41\u91cf\u63a7\u5236\u7684\u5b9e\u73b0\u662f\u6ed1\u52a8\u7a97\u53e3\uff0c\u6240\u4ee5 \u62e5\u585e\u63a7\u5236\u6700\u7ec8\u4e5f\u662f\u901a\u8fc7\u9650\u5236\u53d1\u9001\u65b9\u7684\u6ed1\u52a8\u7a97\u53e3\u5927\u5c0f\u6765\u9650\u5236\u6d41\u91cf \u3002\u5f53\u7136\uff0c\u62e5\u585e\u63a7\u5236\u7684\u624b\u6bb5\u4e0d\u53ea\u662f\u6d41\u91cf\u63a7\u5236\uff0c\u5bfc\u81f4\u62e5\u585e\u7684\u56e0\u7d20\u6709\uff1a\u8def\u7531\u5668\u7f13\u5b58\u3001\u5e26\u5bbd\u3001\u5904\u7406\u5668\u5904\u7406\u901f\u5ea6\u7b49\u7b49\u3002\u63d0\u5347\u786c\u4ef6\u80fd\u529b\uff08\u628a 4 \u8f66\u9053\u6539\u6210 8 \u8f66\u9053\uff09\u662f\u5176\u4e2d\u4e00\u4e2a\u65b9\u6cd5\uff0c\u4f46\u6bd5\u7adf\u786c\u4ef6\u63d0\u5347\u662f\u6709\u74f6\u9888\u7684\uff0c\u6ca1\u529e\u6cd5\u4e0d\u65ad\u63d0\u5347\uff0c\u8fd8\u662f\u9700\u8981\u4ece tcp \u672c\u8eab\u6765\u589e\u52a0\u7b97\u6cd5\uff0c\u89e3\u51b3\u62e5\u585e\u3002 \u62e5\u585e\u63a7\u5236\u7684\u91cd\u70b9\u6709 4 \u4e2a\uff1a \u6162\u5f00\u59cb \u3001 \u5feb\u6062\u590d \u3001 \u5feb\u91cd\u4f20 \u3001 \u62e5\u585e\u907f\u514d \u3002 Y \u8f74\u8868\u793a\u7684\u662f\u53d1\u9001\u65b9\u7a97\u53e3\u5927\u5c0f\uff0cX \u8f74\u8868\u793a\u7684\u662f\u53d1\u9001\u7684\u8f6e\u6b21\uff08\u4e0d\u662f\u5b57\u8282\u7f16\u53f7\uff09\u3002 \u6700\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u4f1a\u628a\u7a97\u53e3\u8bbe\u7f6e\u4e00\u4e2a\u8f83\u5c0f\u7684\u503c\uff0c\u7136\u540e\u6bcf\u8f6e\u53d8\u4e3a\u539f\u6765\u7684\u4e24\u500d\u3002\u8fd9\u662f\u6162\u5f00\u59cb\u3002 \u5f53\u7a97\u53e3\u503c\u5230\u8fbe ssthresh \u503c\uff0c\u8fd9\u4e2a\u503c\u662f\u9700\u8981\u901a\u8fc7\u5b9e\u65f6\u7f51\u7edc\u60c5\u51b5\u8bbe\u7f6e\u7684\u4e00\u4e2a\u7a97\u53e3\u9650\u5236\u503c\uff0c\u5f00\u59cb\u8fdb\u5165\u62e5\u585e\u907f\u514d\uff0c\u6bcf\u8f6e\u628a\u7a97\u53e3\u503c\u63d0\u5347 1\uff0c\u6162\u6162\u8bd5\u63a2\u7f51\u7edc\u7684\u5e95\u7ebf\u3002 \u5982\u679c\u53d1\u751f\u4e86\u6570\u636e\u8d85\u65f6\uff0c\u8868\u793a\u6781\u53ef\u80fd\u53d1\u751f\u4e86\u62e5\u585e\uff0c\u7136\u540e\u56de\u5230\u6162\u5f00\u59cb\uff0c\u91cd\u590d\u4e0a\u9762\u7684\u6b65\u9aa4\u3002 \u5982\u679c\u6536\u5230\u4e09\u4e2a\u76f8\u540c\u7684\u786e\u8ba4\u56de\u590d\uff0c\u8868\u793a\u73b0\u5728\u7f51\u7edc\u7684\u60c5\u51b5\u4e0d\u592a\u597d\uff0c\u628a ssthresh \u7684\u503c\u8bbe\u7f6e\u4e3a\u539f\u6765\u7684\u4e00\u534a\uff0c\u7ee7\u7eed\u62e5\u585e\u907f\u514d\u3002\u8fd9\u90e8\u5206\u79f0\u4e3a\u5feb\u6062\u590d\u3002 \u5982\u679c\u6536\u5230\u4e22\u5305\u4fe1\u606f\uff0c\u5e94\u8be5\u5c3d\u5feb\u628a\u4e22\u5931\u7684\u5305\u91cd\u4f20\u4e00\u6b21\uff0c\u8fd9\u662f\u5feb\u91cd\u4f20\u3002 \u5f53\u7136\uff0c\u7a97\u53e3\u7684\u6700\u7ec8\u4e0a\u9650\u662f\u4e0d\u80fd\u65e0\u9650\u4e0a\u6da8\u7684\uff0c\u4ed6\u4e0d\u80fd\u8d85\u8fc7\u63a5\u6536\u65b9\u7684\u7f13\u5b58\u533a\u5927\u5c0f\u3002 \u901a\u8fc7\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u5c31\u53ef\u4ee5\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\uff0c\u907f\u514d\u7f51\u7edc\u62e5\u6324\u3002 Linux \u4e0b\u5982\u4f55\u67e5\u770b\u5f53\u524d\u7684\u62e5\u585e\u63a7\u5236\u7b97\u6cd5(CCA) BBR \u7b97\u6cd5 \u4f20\u7edf TCP \u62e5\u585e\u7b97\u6cd5\u7684\u95ee\u9898 \u4f20\u7edf\u7684 TCP \u62e5\u585e\u7b97\u6cd5\u5df2\u7ecf\u975e\u5e38\u53e4\u8001\u4e86\uff0c\u73b0\u5728\u7684\u7f51\u7edc\u73af\u5883\u5df2\u7ecf\u548c\u6700\u521d\u8bbe\u8ba1\u7b97\u6cd5\u65f6\u7684\u7f51\u7edc\u73af\u5883\u5b8c\u5168\u4e0d\u540c\u4e86\uff0c\u56e0\u6b64\u7b97\u6cd5\u5df2\u7ecf\u8d8a\u6765\u8d8a\u4e0d\u9002\u5e94\u73b0\u5728\u7684\u73af\u5883\u3002\u6700\u4e3b\u8981\u7684\u51e0\u4e2a\u95ee\u9898\u5305\u62ec\uff1a \u6162\u542f\u52a8\u8fc7\u7a0b\u592a\u6162\u3002 \u6162\u542f\u52a8\u8fc7\u7a0b\u592a\u6162\uff0c\u5bfc\u81f4\u5c0f\u6587\u4ef6\u4f20\u8f93\uff08\u4f8b\u5982 HTTP \u7f51\u9875\u4f20\u8f93\uff09\u4e0d\u80fd\u5145\u5206\u5229\u7528\u5e26\u5bbd\u3002 \u5173\u4e8e\u6162\u542f\u52a8\u592a\u6162\u7684\u95ee\u9898\uff0c\u8fd9\u4e9b\u5e74\u6765\u7531 Google \u7275\u5934\u4e5f\u505a\u4e86\u4e0d\u5c11\u8c03\u6574\u3002 BBR \u5728\u6b64\u4e5f\u505a\u4e86\u4e00\u4e9b\u4f18\u5316\uff0c\u5c06\u6162\u542f\u52a8\u6539\u6210\u4e86\u4e24\u5206\u67e5\u627e\u6cd5\uff0c\u8fd9\u6837\u7406\u8bba\u4e0a\u80fd\u591f\u52a0\u5feb BBR \u7684\u6162\u542f\u52a8\u8fc7\u7a0b\u3002 \u4f7f\u7528\u4e22\u5305\u4f5c\u4e3a\u5224\u65ad\u62e5\u585e\u7684\u552f\u4e00\u4f9d\u636e\u3002 \u94fe\u8def\u5c42\u8d8a\u6765\u8d8a\u590d\u6742\uff0c\u79cd\u7c7b\u8d8a\u6765\u8d8a\u591a\uff08WiFi\uff0c4G \u7b49\u94fe\u8def\u5c42\u5728\u8fd9\u4e9b\u5e74\u8d8a\u6765\u8d8a\u666e\u904d\uff09\uff0c\u5e26\u5bbd\u8d8a\u6765\u8d8a\u5927\uff0c\u4f20\u8f93\u8ddd\u79bb\u8d8a\u6765\u8d8a\u8fdc\uff0c\u5bfc\u81f4\u975e\u62e5\u585e\u539f\u56e0\u5bfc\u81f4\u7684\u4e22\u5305\u8d8a\u6765\u8d8a\u591a\uff08\u4f8b\u5982\u4fe1\u53f7\u8870\u51cf\u5bfc\u81f4\u4e22\u5305\uff0c\u4f20\u8f93\u8fc7\u7a0b\u53d1\u751f\u9519\u8bef\u5305\u6821\u9a8c\u4e0d\u901a\u8fc7\u5bfc\u81f4\u4e22\u5305\u7b49\uff09\u3002 \u4f20\u7edf\u7684\u62e5\u585e\u7b97\u6cd5\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u9519\u8bef\u5730\u5c06\u6ed1\u52a8\u7a97\u53e3\u8c03\u5c0f\uff0c\u4e25\u91cd\u7684\u51cf\u6162\u5305\u91cd\u4f20\u7684\u901f\u7387\uff0c\u5bfc\u81f4\u4e22\u5305\u5bfc\u81f4\u7684\u7f51\u7edc\u8d28\u91cf\u52a3\u5316\u88ab\u6781\u5927\u5730\u653e\u5927\u3002 \u5982\u679c\u4e00\u4e2a\u7f51\u7edc\u56e0\u4e3a\u975e\u62e5\u585e\u539f\u56e0\uff08\u4f8b\u5982 4G \u4fe1\u53f7\u8f83\u5f31\uff09\u5bfc\u81f4\u4e22\u5305 10%\uff0c\u90a3\u4e48\u5c06\u4f1a\u6709 10% \u7684\u5305\u88ab\u91cd\u4f20\uff0c\u5982\u679c\u6ed1\u52a8\u7a97\u53e3\u4e0d\u53d8\u7684\u8bdd\u90a3\u4e48\u7406\u8bba\u4e0a\u6765\u8bf4\u4f20\u8f93\u901f\u5ea6\u4f1a\u53d8\u4e3a\u4e0d\u4e22\u5305\u7f51\u7edc\u7684 90% \u5de6\u53f3\u3002\u4f46\u662f\u5b9e\u9645\u4e0a\u7531\u4e8e\u6ed1\u52a8\u7a97\u53e3\u7684\u6539\u53d8\uff0c10% \u7684\u4e22\u5305\u5f80\u5f80\u4f1a\u5bfc\u81f4\u603b\u7684\u4f20\u8f93\u901f\u5ea6\u964d\u4f4e\u4e3a\u51e0\u4e4e\u4e3a\u96f6\uff0c\u7f51\u7edc\u8fd1\u4e4e\u4e8e\u4e0d\u53ef\u7528\u3002 \u8fd9\u4e2a\u95ee\u9898\u5728\u79fb\u52a8\u7f51\u7edc\u5f00\u59cb\u5e7f\u6cdb\u4f7f\u7528\uff08\u4e5f\u5c31\u662f\u6700\u8fd1\u51e0\u5e74\u7684\u65f6\u95f4\uff09\u624d\u53d8\u5f97\u8d8a\u6765\u8d8a\u4e25\u91cd\u3002\u4e4b\u524d\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u6700\u597d\u7684\u7b97\u6cd5\u662f Vegas \u548c LEDBAT\uff0c\u4f46\u662f\u8fd9\u4e24\u4e2a\u7b97\u6cd5\u6709\u4e2a\u5f88\u5927\u7684\u7f3a\u70b9\uff0c\u5c31\u662f\u5728\u548c\u57fa\u4e8e\u4e22\u5305\u7684\u7b97\u6cd5\u5171\u4eab\u7f51\u7edc\uff0c\u53d1\u751f\u7ade\u4e89\u7684\u60c5\u51b5\u4e0b\uff0c\u5f80\u5f80\u4f1a\u88ab\u997f\u6b7b\uff0c\u5bfc\u81f4\u65e0\u6cd5\u63a8\u5e7f\uff0c\u76ee\u524d\u4ec5\u4ec5\u7528\u4e8e\u4e00\u4e9b\u4f18\u5148\u7ea7\u8f83\u4f4e\u7684\u7f51\u7edc\u73af\u5883\u3002Vegas \u7b97\u6cd5\u76ee\u524d\u4e3b\u8981\u7528\u4e8e BT \u4f20\u8f93\uff0c\u82f9\u679c\u4f7f\u7528 LEDBAT \u7b97\u6cd5\u7528\u4e8e\u8f6f\u4ef6\u66f4\u65b0\u548c\u4e0b\u8f7d\u3002 \u6ca1\u6709\u8003\u8651\u5230\u94fe\u8def\u5c42 buffer \u7684\u95ee\u9898\u3002 \u5728\u94fe\u8def\u5c42\uff0c\u7f51\u7edc\u7684\u5e26\u5bbd\u5e76\u4e0d\u662f\u5e73\u7a33\u7684\u4e00\u6210\u4e0d\u53d8\u7684\uff0c\u800c\u662f\u65f6\u5e38\u4f1a\u51fa\u73b0\u77ac\u53d1\u7684\u4f20\u8f93\u9ad8\u5cf0\u3002\u4e3a\u4e86\u8fd9\u4e9b\u4f20\u8f93\u9ad8\u5cf0\u6269\u5927\u5e26\u5bbd\u662f\u6ca1\u6709\u6027\u4ef7\u6bd4\u7684\uff0c\u540c\u65f6\u589e\u52a0\u5c11\u91cf\u5ef6\u65f6\u5728\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u90fd\u6bd4\u4e22\u5305\u4ee3\u4ef7\u8981\u5c0f\u5f97\u591a\uff0c\u56e0\u6b64\u94fe\u8def\u5c42\u666e\u904d\u7684\u505a\u6cd5\u662f\u4f7f\u7528 buffer \u5c06\u8fd9\u4e9b\u9ad8\u5cf0\u62b9\u5e73\uff0c\u7528\u589e\u52a0\u8fd9\u4e9b\u9ad8\u5cf0\u5305\u7684\u5ef6\u65f6\u4e3a\u4ee3\u4ef7\uff0c\u907f\u514d\u4e22\u5305\u3002 \u4f46\u662f\u7531\u4e8e TCP \u7684\u62e5\u585e\u7b97\u6cd5\u4f7f\u7528\u4e22\u5305\u4f5c\u4e3a\u94fe\u8def\u662f\u5426\u62e5\u585e\u7684\u5224\u65ad\u4f9d\u636e\uff0cTCP \u4f20\u8f93\u8fc7\u7a0b\u4e2d\u4f1a\u4e0d\u65ad\u5730\u589e\u52a0\u5e26\u5bbd\u76f4\u5230\u94fe\u8def\u5c42\u7684 buffer \u88ab\u586b\u6ee1\u5f00\u59cb\u4e22\u5305\u4e3a\u6b62\u3002\u8fd9\u4f7f\u5f97\u94fe\u8def\u5c42\u7684 buffer \u5b8c\u5168\u5931\u53bb\u5176\u610f\u4e49\uff0c\u53ea\u5269\u4e0b\u4e86\u589e\u52a0\u6240\u6709\u4f20\u8f93\u5305\u7684\u5ef6\u65f6\u7684\u526f\u4f5c\u7528\u3002\u94fe\u8def\u5c42\u4e0d\u5f97\u4e0d\u51cf\u5c0f\u751a\u81f3\u5b8c\u5168\u4e0d\u4f7f\u7528 buffer\uff0c\u4ece\u800c\u4e0d\u80fd\u5f88\u597d\u5730\u5904\u7406\u6d41\u91cf\u7684\u7a81\u53d1\u9ad8\u5cf0\u3002\u8fd9\u88ab\u79f0\u4e3a\u662f bufferbloat \u95ee\u9898\uff0c\u8be5\u95ee\u9898\u5e7f\u6cdb\u5b58\u5728\u4e8e\u73b0\u5728\u7684\u51e0\u4e4e\u6240\u6709\u94fe\u8def\u5c42\u7f51\u7edc\u4e2d\u3002 \u5728 BBR \u51fa\u73b0\u4e4b\u524d\uff0c\u8fd8\u5b8c\u5168\u6ca1\u6709\u5728 TCP \u5c42\u9762\u8003\u8651\u548c\u89e3\u51b3 bufferbloat \u95ee\u9898\u7684\u5148\u4f8b\uff08\u867d\u7136\u8fd9\u4e2a\u95ee\u9898\u662f\u7531 TCP \u5f15\u8d77\u7684\uff09\u3002\u4e4b\u524d\u89e3\u51b3 bufferbloat\uff0c\u9664\u4e86\u51cf\u5c11 buffer \u5927\u5c0f\u4e4b\u5916\uff0c\u66f4\u4e3b\u8981\u7684\u662f\u5728\u94fe\u8def\u5c42\u89e3\u51b3\u95ee\u9898\uff1a\u60f3\u529e\u6cd5\u8bc6\u522b\u51fa\u5bfc\u81f4 bufferbloat \u7684 TCP \u6d41\uff0c\u9650\u5236\u8fd9\u4e9b\u6d41\u4e0d\u4f7f\u7528 buffer \u800c\u662f\u76f4\u63a5\u4e22\u5305\uff0c\u8feb\u4f7f TCP \u6d41\u8c03\u6574\u7a97\u53e3\u5927\u5c0f\u3002 \u5728\u94fe\u8def\u5c42\u89e3\u51b3 bufferbloat \u95ee\u9898\u7684\u6700\u5e38\u89c1\u7684\u4e24\u4e2a\u7b97\u6cd5\u4e3a RED \u548c fq_CoDel\u3002\u5176\u4e2d RED \u56e0\u4e3a\u8fc7\u4e8e\u7b80\u5355\u7c97\u66b4\uff08\u5b8c\u5168\u4e0d\u8bc6\u522b\u54ea\u4e9b\u6d41\u5bfc\u81f4\u4e86 bufferbloat \u800c\u662f\u5728\u53d1\u73b0 bufferbloat \u53d1\u751f\u7684\u65f6\u5019\u8fdb\u884c\u968f\u673a\u4e22\u5305\uff09\u6548\u679c\u4e0d\u597d\uff0c\u867d\u7136\u8def\u7531\u5668\u666e\u904d\u652f\u6301\u4f46\u662f\u5e76\u672a\u5f97\u5230\u5e7f\u6cdb\u5e94\u7528\u3002fq_CoDel \u5219\u662f\u6548\u679c\u975e\u5e38\u597d\u4f46\u662f\u7b97\u6cd5\u590d\u6742\uff0c\u76ee\u524d\u53ea\u6709 Linux \u5b9e\u73b0\uff083.12 \u4ee5\u4e0a\u5185\u6838\uff09\uff0c\u8def\u7531\u5668\u8bbe\u5907\u5c1a\u672a\u5b9e\u73b0\u8be5\u7b97\u6cd5\u3002 systemd 217 \u7248\u672c\u5f00\u59cb\u9ed8\u8ba4\u4f7f\u7528 fq_CoDel \u4ee3\u66ff\u94fe\u8def\u5c42\u4e4b\u524d\u7684\u9ed8\u8ba4\u7b97\u6cd5 pfifo_fast\uff0c\u56e0\u6b64\u4f7f\u7528 systemd \u7684\u53d1\u884c\u7248\uff0c\u4f8b\u5982 ArchLinux\uff0cFedora 22 \u7b49\uff0c\u9ed8\u8ba4\u4f7f\u7528 fq_CoDel\u3002\u4f46\u662f Debian 8 \u662f systemd 215 \u7248\u672c\u56e0\u6b64\u8fd8\u662f pfifo_fast\u3002 BBR \u7684\u51fa\u73b0\uff0c\u7406\u8bba\u4e0a\u53ef\u4ee5\u5927\u5927\u51cf\u5c11 bufferboloat \u95ee\u9898\uff0c\u56e0\u4e3a BBR \u4f1a\u7cbe\u786e\u8ba1\u7b97\u603b\u5e26\u5bbd\uff0c\u56e0\u6b64\u7edd\u5927\u591a\u6570\u65f6\u95f4\uff08\u9664\u4e86\u6162\u542f\u52a8\u8fc7\u7a0b\u4e2d\u7684\u4e00\u5c0f\u6bb5\u77ed\u6682\u65f6\u95f4\uff09\u4e0d\u4f1a\u7528\u5230 buffer\u3002 \u7f3a\u4e4f\u5bf9\u9ad8\u5e26\u5bbd\u65f6\u5ef6\u4e58\u79ef\u7f51\u7edc\u4e2d\u4e22\u5305\u7684\u4f18\u5316 \u5e26\u5bbd\u65f6\u5ef6\u4e58\u79ef\u8868\u793a\u5e26\u5bbd\u548c\u5ef6\u65f6\u7684\u4e58\u79ef\u3002\u9ad8\u5e26\u5bbd\u65f6\u5ef6\u4e58\u79ef\u7684\u7f51\u7edc\u88ab\u79f0\u4e3a\u957f\u80d6\u7f51\u7edc\u3002\u5178\u578b\u7684\u957f\u80d6\u7f51\u7edc\u5305\u62ec\u536b\u661f\u7f51\u7edc\uff0c\u4ee5\u53ca\u4e2d\u7f8e\u4e4b\u95f4\u7684\u6d77\u5e95\u5149\u7f06\u7b49\uff0c\u7279\u70b9\u662f\u5e26\u5bbd\u6781\u9ad8\u4f46\u662f\u5ef6\u65f6\u8f83\u5927\u3002 \u5982\u679c\u8981\u5408\u7406\u5229\u7528\u957f\u80d6\u7f51\u7edc\u7684\u9ad8\u5e26\u5bbd\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bfc\u81f4\u5df2\u7ecf\u53d1\u9001\u51fa\u53bb\u4f46\u662f\u8fd8\u6ca1\u6709\u6536\u5230 ACK \u7684\u5305\u975e\u5e38\u591a\uff0c\u4ece\u800c\u9700\u8981\u975e\u5e38\u5927\u7684\u7a97\u53e3\u5927\u5c0f\u3002Linux 2.6.8 \u5f00\u59cb\uff0c\u542f\u7528\u4e86 net.ipv4.tcp_window_scaling \u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898 \u4f46\u662f\u957f\u80d6\u7f51\u7edc\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u4e00\u76f4\u6ca1\u6709\u5f97\u5230\u5f88\u597d\u7684\u89e3\u51b3\uff0c\u90a3\u5c31\u662f\u4e00\u65e6\u51fa\u73b0\u4e22\u5305\uff0c\u7531\u4e8e\u9ad8\u65f6\u5ef6\u7684\u5f71\u54cd\uff0c\u4f1a\u4f7f\u5f97\u6ed1\u52a8\u7a97\u53e3\u4f1a\u7f29\u5c0f\u5f97\u8fc7\u5c0f\uff0c\u5b8c\u5168\u65e0\u6cd5\u5229\u7528\u5230\u9ad8\u5e26\u5bbd\u7684\u4f18\u52bf\u3002\u8fd9\u662f\u56e0\u4e3a\u4f20\u7edf\u7684\u62e5\u585e\u63a7\u5236\u7b97\u6cd5\u7684\u5e26\u5bbd\u589e\u52a0\u662f\u7ebf\u6027\u7684\uff0c\u800c\u5e26\u5bbd\u51cf\u5c11\u662f\u975e\u7ebf\u6027\u7684\uff0c\u9519\u8bef\u4e22\u5305\u7387\u548c\u53d1\u9001\u7a97\u53e3\u662f\u5e73\u65b9\u53cd\u6bd4\u5173\u7cfb\u3002\u8fd9\u4f7f\u5f97\u957f\u80d6\u7f51\u7edc\u4e0b\uff0c\u54ea\u6015\u5e26\u5bbd\u975e\u5e38\u5bcc\u88d5\uff0c\u53ea\u8981\u51fa\u73b0\u4e00\u70b9\u70b9\u4e22\u5305\uff0c\u901f\u5ea6\u5c31\u4f1a\u53d8\u5f97\u975e\u5e38\u6162\u3002 \u5173\u4e8e\u957f\u80d6\u7f51\u7edc\uff0c\u6700\u6838\u5fc3\u7684\u5728\u4e8e\u4f18\u5316\u6ed1\u52a8\u7a97\u53e3\u6536\u655b\u901f\u7387 \u3002\u9664\u4e86 BBR \u4e4b\u5916\uff0c\u76ee\u524d\u5927\u90e8\u5206\u8003\u8651\u5230\u7a97\u53e3\u6536\u655b\u901f\u7387\u4f18\u5316\u7684\u7b97\u6cd5\u90fd\u4f7f\u7528\u4e86\u4fe1\u53f7\uff0c\u56e0\u6b64\u975e\u5e38\u96be\u4ee5\u63a8\u5e7f\u3002 BBR \u7b97\u6cd5\u662f\u4ec0\u4e48 TCP \u62e5\u585e\u63a7\u5236\u7b97\u6cd5\u5728\u7f51\u7edc\u4e2d\u5360\u636e\u91cd\u8981\u5730\u4f4d\uff0c\u5728 BBR \u7b97\u6cd5\u51fa\u6765\u4e4b\u524d\uff0c\u5927\u90e8\u5206\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u7684\u62e5\u585e\u63a7\u5236\u7b97\u6cd5\u7ecf\u8fc7\u597d\u51e0\u4ee3\u7684\u66f4\u65b0\uff0c\u6700\u540e\u5927\u591a\u90fd\u662f\u91c7\u7528 Cubic . Bottleneck Bandwidth and Round-trip propagation time (BBR) is a CCA developed at Google in 2016.[25] While most CCAs are loss-based, in that they rely on packet loss to detect congestion and lower rates of transmission, BBR, like TCP Vegas, is model-based. The algorithm uses the maximum bandwidth and round-trip time at which the network delivered the most recent flight of outbound data packets to build a model of the network.(BBR \u662f\u4e00\u4e2a\u62e5\u585e\u63a7\u5236\u7b97\u6cd5 congestion control algorithm, 2016 \u7531 Google \u5f00\u53d1. \u5927\u591a\u6570 CCA \u662f\u57fa\u4e8e\u4e22\u5305\u7684\u88ab\u52a8\u63a2\u6d4b\u673a\u5236, \u800c BBR \u662f\u57fa\u4e8e\u6a21\u578b\u7684\u4e3b\u52a8\u63a2\u6d4b\u7b97\u6cd5, \u5f97\u5230\u6700\u5927\u5e26\u5bbd\u548c\u6700\u5c0f\u5ef6\u8fdf\u540e, \u628a 2 \u7740\u4e58\u79ef\u4f5c\u4e3a\u53d1\u9001\u7a97\u53e3) BBR \u5bf9 TCP \u6027\u80fd\u7684\u63d0\u5347\u662f\u5de8\u5927\u7684\uff0c\u5b83\u80fd\u66f4\u6709\u6548\u7684\u4f7f\u7528\u5f53\u4e0b\u7f51\u7edc\u73af\u5883\uff0cYoutube \u5e94\u7528\u540e\u5728\u541e\u5410\u91cf\u4e0a\u6709\u5e73\u5747 4%\u63d0\u5347\uff08\u5bf9\u4e8e\u65e5\u672c\u8fd9\u6837\u7684\u7f51\u7edc\u73af\u5883\u6709 14%\u4ee5\u4e0a\u7684\u63d0\u5347\uff09 \u5728 Linux4.19 \u5185\u6838\u4e2d\u5df2\u7ecf\u5c06\u62e5\u585e\u63a7\u5236\u7b97\u6cd5\u4ece CUBIC\uff08\u8be5\u7b97\u6cd5\u4ece 2.6.19 \u5185\u6838\u5c31\u5f15\u5165 Linux \u4e86\uff09\u6539\u4e3a BBR\uff0c\u57fa\u4e8e UDP \u7684 HTTP3 \u4e5f\u4f7f\u7528\u6b64\u7b97\u6cd5\u3002 BBR \u7b97\u6cd5\u7684\u4f18\u52bf BBR \u662f\u4e00\u4e2a\u5bf9\u957f\u80a5\u7f51\u7edc\u4e0b\u80fd\u591f\u5927\u5927\u63d0\u9ad8\u7f51\u7edc\u6027\u80fd\u7684\u62e5\u585e\u63a7\u5236\u7b97\u6cd5\uff0c\u975e\u5e38\u9002\u5408\u505a\u8de8\u56fd\u5927\u6587\u4ef6\u4e0b\u8f7d\u7684\u7528\u9014\uff0c\u5bf9\u4e8e\u6709\u5927\u91cf\u4e22\u5305\uff08\u4e0d\u80fd\u8d85\u8fc7 20% \u4e22\u5305\uff09\u7684\u73af\u5883\u4e0b\u4e5f\u80fd\u5927\u5927\u63d0\u9ad8\u7f51\u7edc\u901f\u5ea6\u3002 \u5176\u5ffd\u7565\u4e22\u5305\u7684\u7279\u6027\u5728\u9ad8\u4e22\u5305\uff0c\u9ad8\u65f6\u5ef6\u7684\u60c5\u51b5\u4e0b\uff0c\u80fd\u6781\u5176\u9ad8\u6548\u7684\u63d0\u5347\u5e26\u5bbd\u5229\u7528\u7387\uff0c\u7279\u522b\u662f\u5927\u6587\u4ef6\u3002 BBR \u662f\u4e0d\u4f7f\u7528\u4fe1\u53f7\u7684\u6240\u6709\u62e5\u585e\u63a7\u5236\u7b97\u6cd5\u4e2d\uff0c\u8f83\u597d\u7684\u4e00\u4e2a\u3002\u5176\u4f18\u70b9\u6709\uff1a \u4f18\u5316\u4e86\u6536\u655b\u901f\u7387\uff0c\u89e3\u51b3\u4e86\u957f\u80d6\u7f51\u7edc\u5e26\u5bbd\u6536\u655b\u4e3a\u8fc7\u5c0f\u7684\u95ee\u9898 \u5b8c\u5168\u4e0d\u4f7f\u7528\u4e22\u5305\u4f5c\u4e3a\u62e5\u585e\u5224\u65ad\u7684\u4f9d\u636e\uff0c\u7cbe\u51c6\u5730\u8ba1\u7b97\u548c\u5229\u7528\u53ef\u7528\u5e26\u5bbd \u89e3\u51b3\u4e86 bufferbloat \u95ee\u9898 \u975e\u62e5\u585e\u7684\u9ad8\u4e22\u5305\u94fe\u8def\u73af\u5883\u4e0b\uff0c\u4e0d\u51cf\u7a97\u53e3\uff0c\u5305\u53ef\u4ee5\u5feb\u901f\u91cd\u4f20\uff0c\u56e0\u6b64\u4f20\u8f93\u6548\u7387\u964d\u4f4e\u4e0d\u660e\u663e\u3002 \u53ef\u4ee5\u6bd4\u8f83\u5feb\u901f\u5730\u8bc6\u522b\u5230\u94fe\u8def\u73af\u5883\u4e0b\u53ef\u7528\u5e26\u5bbd\u6216\u8005\u5ef6\u65f6\u7684\u53d8\u5316\uff0c\u5feb\u901f\u8c03\u6574\u3002 \u540c\u4f20\u7edf\u7b97\u6cd5\u7ade\u4e89\u7f51\u7edc\u7684\u65f6\u5019\u4e0d\u5904\u4e8e\u52a3\u52bf \u66f4\u5feb\u7684\u6162\u542f\u52a8\u8fc7\u7a0b \u5728\u6570\u636e\u4e2d\u5fc3\u5185\u7f51\u60c5\u51b5\u4e0b\uff0c\u4f4e\u5ef6\u8fdf\uff0c\u51e0\u4e4e\u65e0\u4e22\u5305\u7684\u60c5\u51b5\u4e0b\uff0c\u8ddf cubic \u76f8\u6bd4\u57fa\u672c\u6ca1\u6709\u6548\u679c\uff0c\u4e14\u53ef\u80fd\u7531\u4e8e\u7b97\u6cd5\u95ee\u9898\uff0c\u5360\u7528\u8f83\u591a cpu. \u5982\u4f55\u5229\u7528 BBR \u7b97\u6cd5\u4f18\u52bf \u4fee\u6539\u5185\u6838\u53c2\u6570 \u5f00\u542f\uff1a sysctl -w net.core.default_qdisc=fq sysctl -w net.ipv4.tcp_congestion_control=bbr TFO \u4e00\u4e2a TCP \u4f18\u5316\u7b56\u7565\u53eb TCP Fast Open\uff08TFO\uff09, \u5141\u8bb8 tcp \u4e09\u6b21\u63e1\u624b\u65f6\uff0c\u7b2c\u4e09\u4e2a\u5305\u4e2d\uff0c\u76f4\u63a5\u5305\u542b\u5e94\u7528\u5c42\u7684\u6570\u636e, \u4f46\u662f\u4e0d\u5141\u8bb8\u8d85\u8fc7 MSS. TFO \u7684\u4f5c\u7528\u662f\u7528\u6765\u4f18\u5316 TCP \u63e1\u624b\u8fc7\u7a0b\u3002\u5ba2\u6237\u7aef\u7b2c\u4e00\u6b21\u5efa\u7acb\u8fde\u63a5\u8fd8\u662f\u8981\u8d70\u4e09\u6b21\u63e1\u624b\uff0c\u6240\u4e0d\u540c\u7684\u662f\u5ba2\u6237\u7aef\u5728\u7b2c\u4e00\u4e2a SYN \u4f1a\u8bbe\u7f6e\u4e00\u4e2a Fast Open \u6807\u8bc6\uff0c\u670d\u52a1\u7aef\u4f1a\u751f\u6210 Fast Open Cookie \u5e76\u653e\u5728 SYN-ACK \u91cc\uff0c\u7136\u540e\u5ba2\u6237\u7aef\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e2a Cookie \u5b58\u8d77\u6765\u4f9b\u4e4b\u540e\u7684 SYN \u7528\u3002\u4e0b\u9762\u8fd9\u4e2a\u56fe\u5f62\u8c61\u5730\u63cf\u8ff0\u4e86\u8fd9\u4e2a\u8fc7\u7a0b\uff1a \u5173\u4e8e TCP Fast Open \u7684\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u67e5\u770b RFC7413 . TSO/UFO/GSO/GRO TSO \u662f\u4ec0\u4e48 \u5e94\u7528\u573a\u666f \u7f51\u7edc\u5c42\u53d1\u9001\u548c\u63a5\u6536\u5927\u6570\u636e\u5305\u573a\u666f,\u5229\u7528\u7f51\u5361\u6765\u5bf9\u5927\u6570\u636e\u5305\u8fdb\u884c\u81ea\u52a8\u5206\u6bb5\uff0c\u964d\u4f4e CPU \u8d1f\u8f7d\u7684\u6280\u672f. \u5047\u8bbe\u6211\u4eec\u8981\u4f20\u8f93\u4e00\u4e2a 20M \u7684\u6570\u636e\uff0c\u56e0\u4e3a MTU \u7684\u5b58\u5728\uff0c\u6211\u4eec\u6bcf\u6b21\u6700\u591a\u4f20\u8f93 1500-20 = 1480 bytes\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5c06\u6570\u636e\u5206\u5272\u6210 N \u4efd 1480 bytes\uff0c\u90a3\u4e48\u5982\u679c\u8fd9\u4e2a\u5de5\u4f5c\u8ba9 CPU \u6765\u505a\uff0c\u6709\u70b9\u6d6a\u8d39 CPU \u7684\u8d44\u6e90\uff0c\u4e8e\u662f\u5c31\u51fa\u73b0\u4e86 TSO\uff0c\u76f4\u63a5\u5c06\u6570\u636e\u4ea4\u7ed9\u7f51\u5361\u9a71\u52a8\uff0c\u8ba9\u7f51\u5361\u9a71\u52a8\u53bb\u5b8c\u6210\u5206\u5272\u5de5\u4f5c\uff0c\u4ece\u800c\u8fbe\u5230\u51cf\u8f7b CPU \u5de5\u4f5c\u7684\u76ee\u7684. \u6b63\u89c4\u89e3\u91ca TSO(TCP Segmentation Offload)\uff0c\u662f\u4e00\u79cd\u5229\u7528\u7f51\u5361\u5bf9 TCP \u6570\u636e\u5305\u5206\u7247\uff0c\u51cf\u8f7b CPU \u8d1f\u8377\u7684\u4e00\u79cd\u6280\u672f\uff0c\u6709\u65f6\u4e5f\u88ab\u53eb\u505a LSO (Large segment offload) \uff0cTSO \u662f\u9488\u5bf9 TCP \u7684\uff0cUFO \u662f\u9488\u5bf9 UDP \u7684\u3002\u5982\u679c\u786c\u4ef6\u652f\u6301 TSO \u529f\u80fd\uff0c\u540c\u65f6\u4e5f\u9700\u8981\u786c\u4ef6\u652f\u6301\u7684 TCP \u6821\u9a8c\u8ba1\u7b97\u548c\u5206\u6563/\u805a\u96c6 (Scatter Gather) \u529f\u80fd\u3002 TSO \u9700\u8981\u7f51\u7edc\u8bbe\u5907\u786c\u4ef6\u652f\u6301, \u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u5ef6\u8fdf\u5206\u6bb5\u6280\u672f\uff0c\u5ef6\u8fdf\u5206\u6bb5\u4f1a\u51cf\u5c11\u53d1\u9001\u8def\u5f84\u4e0a\u7684\u6570\u636e\u62f7\u8d1d\u64cd\u4f5c\uff0c\u6240\u4ee5\u5373\u4f7f\u7f51\u7edc\u8bbe\u5907\u4e0d\u652f\u6301 TSO\uff0c\u53ea\u8981\u80fd\u591f\u5ef6\u8fdf\u5206\u6bb5\u4e5f\u662f\u6709\u6536\u76ca\u7684\uff0c\u800c\u4e14\u4e5f\u4e0d\u4ec5\u4ec5\u9650\u4e8e TCP\uff0c\u5bf9\u4e8e\u5176\u5b83 L4 \u534f\u8bae\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u8fd9\u5c31\u884d\u751f\u51fa\u4e86 GSO(Generic Segmentation Offload) GSO(Generic Segmentation Offload)\uff0c\u5b83\u6bd4 TSO \u66f4\u901a\u7528\uff0c\u57fa\u672c\u601d\u60f3\u5c31\u662f\u5c3d\u53ef\u80fd\u7684\u63a8\u8fdf\u6570\u636e\u5206\u7247\u76f4\u81f3\u53d1\u9001\u5230\u7f51\u5361\u9a71\u52a8\u4e4b\u524d\uff0c\u6b64\u65f6\u4f1a\u68c0\u67e5\u7f51\u5361\u662f\u5426\u652f\u6301\u5206\u7247\u529f\u80fd\uff08\u5982 TSO\u3001UFO\uff09,\u5982\u679c\u652f\u6301\u76f4\u63a5\u53d1\u9001\u5230\u7f51\u5361\uff0c\u5982\u679c\u4e0d\u652f\u6301\u5c31\u8fdb\u884c\u5206\u7247\u540e\u518d\u53d1\u5f80\u7f51\u5361\u3002\u8fd9\u6837\u5927\u6570\u636e\u5305\u53ea\u9700\u8d70\u4e00\u6b21\u534f\u8bae\u6808\uff0c\u800c\u4e0d\u662f\u88ab\u5206\u5272\u6210\u51e0\u4e2a\u6570\u636e\u5305\u5206\u522b\u8d70\uff0c\u8fd9\u5c31\u63d0\u9ad8\u4e86\u6548\u7387\u3002 UFO(Udp Fragmentation Offload), \u662f\u9488\u5bf9 UDP \u534f\u8bae\u7684\u5ef6\u8fdf\u5206\u6bb5\u6280\u672f, \u9700\u8981\u7f51\u5361\u652f\u6301. LRO(Large Receive Offload)\uff0c\u901a\u8fc7\u5c06\u63a5\u6536\u5230\u7684\u591a\u4e2a TCP \u6570\u636e\u805a\u5408\u6210\u4e00\u4e2a\u5927\u7684\u6570\u636e\u5305\uff0c\u7136\u540e\u4f20\u9012\u7ed9\u7f51\u7edc\u534f\u8bae\u6808\u5904\u7406\uff0c\u4ee5\u51cf\u5c11\u4e0a\u5c42\u534f\u8bae\u6808\u5904\u7406 \u5f00\u9500\uff0c\u63d0\u9ad8\u7cfb\u7edf\u63a5\u6536 TCP \u6570\u636e\u5305\u7684\u80fd\u529b\u3002 GRO(Generic Receive Offload)\uff0c\u57fa\u672c\u601d\u60f3\u8ddf LRO \u7c7b\u4f3c\uff0c\u514b\u670d\u4e86 LRO \u7684\u4e00\u4e9b\u7f3a\u70b9\uff0c\u66f4\u901a\u7528\u3002\u540e\u7eed\u7684\u9a71\u52a8\u90fd\u4f7f\u7528 GRO \u7684\u63a5\u53e3\uff0c\u800c\u4e0d\u662f LRO\u3002 \u5982\u4f55\u5f00\u542f\u548c\u5173\u95ed GSO/GRO \u5f00\u542f TSO root@liqiang.io:~# ethtool -K eth0 tso on root@liqiang.io:~# ethtool -K eth0 gso on \u6ce8\u610f\uff0c\u8fd9\u91cc\u6ca1\u6709\u5f00\u542f gso\uff0c\u53ea\u5f00\u542f tso \u662f\u6ca1\u7528\u7684\uff0c\u56e0\u4e3a\u53ea\u6709\u5f00\u542f\u4e86 gso \u624d\u4f1a\u68c0\u6d4b\u662f\u5426\u652f\u6301 tso\u3002 \u5173\u95ed TSO root@liqiang.io:~# ethtool -K eth0 tso off root@liqiang.io:~# ethtool -K eth0 gso off \u5f00\u542f\u4e86 TSO/TRO \u4e4b\u540e\uff0c\u6709\u4ec0\u4e48\u526f\u4f5c\u7528 \u597d\u5904\u662f\uff0c \u534f\u8bae\u6808\u8fd9\u4e00\u5c42\u65e0\u9700\u5206\u6bb5\uff0c\u7f51\u5361\u81ea\u52a8\u5e2e\u5fd9\u5206\u6bb5\uff0c\u964d\u4f4e\u4e86 CPU \u8d1f\u8f7d. \u574f\u5904\u662f\uff0ctcpdump \u65f6\uff0c\u770b\u5230\u7684\u6570\u636e\u5305\u4f1a\u53d8\u5c11. \u4e3a\u4ec0\u4e48\u4f1a\u53d8\u5c11, \u539f\u7406\u662f\u56e0\u4e3a\u5185\u6838\u6536\u5305\u8def\u5f84: netif_receve_skb(\u76f8\u5173\u7c7b\u4f3c\u51fd\u6570) \u2014> tcpdump\u5de5\u4f5c \u2014> deliver_skb \u2014> ip_rcv --> netfilter/iptables --> tcp_v4_rcv TCP \u5c42\u9762\u7684 keepalived \u673a\u5236 \u4ec0\u4e48\u662f keepalive \u5b9a\u65f6\u5668\uff1f 1 \u5728\u4e00\u4e2a\u5df2\u7ecf\u5b8c\u6210\u8fde\u63a5\u5efa\u7acb\u7684 tcp \u8fde\u63a5\u4e2d\uff0c\u5982\u679c 2 \u7aef\u6ca1\u6709\u4efb\u4f55\u6570\u636e\u4f20\u8f93\uff1b \u6b64\u65f6\u5b83\u662f\u4e00\u4e2a\u7a7a\u95f2\uff08idle\uff09\u7684 tcp \u8fde\u63a5\u3002\u4f46\u662f\u6b64\u65f6\u5ba2\u6237\u7aef\u53ef\u80fd\u7531\u4e8e\u5404\u79cd\u539f\u56e0\u6302\u4e86\uff0c\u6bd4\u5982\u4e2d\u95f4\u5c42\u7684\u8def\u7531\u5668\u6302\u4e86\uff0c\u6216\u8005\u5ba2\u6237\u7aef\u672c\u8eab\u610f\u5916\u9000\u51fa\u7b49\u7b49\uff0c\u6b64\u65f6\u670d\u52a1\u5668\u5e76\u4e0d\u77e5\u9053\u3002 2 \u5e94\u7528\u5c42\u6ca1\u6709\u63a2\u6d3b\u673a\u5236\uff1b \u4f46\u662f tcp \u5c42\u53ef\u4ee5\u6709\u63a2\u6d3b\u673a\u5236\uff0ckeepalive \u5b9a\u65f6\u5668\u5c31\u662f\u8fd9\u4e48\u4e2a\u63a2\u6d3b\u673a\u5236\uff1b \u6bd4\u5982\u670d\u52a1\u5668\u60f3\u77e5\u9053\u5ba2\u6237\u7aef\u662f\u5426\u8fd8\u5b58\u6d3b. Linux \u4e0b\u5982\u4f55\u5f00\u542f keepalive \u5728 socket()\u7cfb\u7edf\u8c03\u7528\u65f6\u5f00\u542f SO_KEEPALIVE \u9009\u9879 \u4f7f\u7528 setsockopt()\u7cfb\u7edf\u8c03\u7528\u5f00\u542f SO_KEEPALIVE \u6211\u4eec\u770b\u4e0b python \u4e0b\u7684\u5b9e\u73b0 import socket from socket import SO_KEEPALIVE,SOL_SOCKET sk = socket.socket() sk.setsockopt(SOL_SOCKET,SO_KEEPALIVE,1122) >>> sk.getsockopt(SOL_SOCKET,SO_KEEPALIVE) 1 \u2014> \u8fd9\u91cc\u8fd4\u56de\u503c\u662f 1\uff0c\u8868\u793a\u5f00\u542f\u4e86 SO_KEEPALIVE \u9009\u9879 \u76f8\u5173\u5185\u6838\u53c2\u6570 net.ipv4.tcp_keepalive_time = 180 \u8fd9\u4e2a\u5185\u6838\u53c2\u6570\u8868\u793a\uff0c\u4e00\u65e6 tcp \u8fde\u63a5\u5f00\u59cb\u7a7a\u95f2\uff0c\u90a3\u4e48\u591a\u5c11\u79d2\u4e4b\u540e\u5f00\u59cb\u53d1\u9001 keepalive \u6570\u636e\u5305\u3002 net.ipv4.tcp_keepalive_intvl = 10 \u8fd9\u4e2a\u5185\u6838\u53c2\u6570\u8868\u793a\uff0c\u7b2c\u4e00\u6b21\u6267\u884c keepalive \u63a2\u6d3b\u4e4b\u540e\uff0c\u5047\u8bbe\u5bf9\u65b9\u6ca1\u6709\u56de\u5e94\uff0c\u90a3\u4e48\u540e\u9762\u7684\u6267\u884c\u64cd\u4f5c\u9700\u8981\u95f4\u9694\u591a\u5c11\u79d2\uff1b\u8fd9\u91cc\u662f\u6bcf 10 \u79d2\u8fdb\u884c\u4e00\u6b21 tcp \u63a2\u6d3b net.ipv4.tcp_keepalive_probes = 9 \u8fd9\u4e2a\u5185\u6838\u53c2\u6570\u8868\u793a\uff0c\u5982\u679c\u672c\u673a\u53d1\u9001\u4e86 tcp \u63a2\u6d3b\u5305\uff0c\u5bf9\u65b9\u6ca1\u6709\u4efb\u4f55\u56de\u5e94\uff0c\u90a3\u4e48\u6700\u591a\u5c1d\u8bd5\u51e0\u6b21\u63a2\u6d3b\u3002\u8fd9\u91cc\u662f 9 \u6b21. \u4e5f\u662f\u5c31\u662f\u6fc0\u6d3b\u4e86 SO_KEEPALIVE \u9009\u9879\u540e\uff0c\u5982\u679c 2 \u8fb9\u6ca1\u6709\u6570\u636e\u4f20\u8f93\uff0c\u90a3\u4e48 180 \u79d2\u540e\uff0c\u5185\u6838\u5c31\u4f1a\u81ea\u52a8\u8fdb\u884c\u5b58\u6d3b\u63a2\u6d4b\uff0c\u5982\u679c\u7b2c\u4e00\u6b21\u6267\u884c keepalive \u63a2\u6d3b\u4e4b\u540e\uff0c\u5bf9\u65b9\u6ca1\u6709\u54cd\u5e94\uff0c\u90a3\u4e48\u4e4b\u540e\u662f\u6bcf\u95f4\u9694 10 \u79d2\u6267\u884c\u4e00\u6b21\uff0c\u5982\u679c 9 \u6b21\u63a2\u6d3b\u90fd\u5931\u8d25\u4e86\uff0c\u90a3\u4e48 kernel \u5c06\u5411\u5e94\u7528\u5c42\u53cd\u9988\uff0c\u5bf9\u65b9\u5df2\u7ecf\u6302\u4e86\u3002 \u5176\u4ed6\u6269\u5c55\u9605\u8bfb \u6700\u591a\u80fd\u5efa\u7acb\u591a\u5c11\u4e2a TCP \u8fde\u63a5 . \u4e00\u53f0 Linux \u670d\u52a1\u5668\u6700\u591a\u80fd\u652f\u6491\u591a\u5c11\u4e2a TCP \u8fde\u63a5 . Linux \u5185\u6838\u5c42\u9762 TCP \u5bf9\u8c61 1 inet_connection_sock struct inet_connection_sock \u4ee3\u8868\u4e00\u4e2a inet socket, \u5176 isck_accept_queue \u6210\u5458\u7528\u4e8e\u7ba1\u7406\u8be5 socket \u7684 \u5168\u8fde\u63a5\u961f\u5217 \u548c \u534a\u8fde\u63a5\u961f\u5217 isck_accept_queue \u6210\u5458\u7684\u5177\u4f53\u5b9e\u73b0\u662f struct request_sock_queue , \u5176\u4e2d struct request_sock \u5bf9\u8c61\u7ec4\u6210\u7684 \u94fe\u8868 \u5373 \u5168\u8fde\u63a5\u961f\u5217 struct lisen_sock \u5bf9\u8c61\u5373 \u534a\u8fde\u63a5\u961f\u5217","title":"\u7b2c\u516d\u7bc7 TCP\u534f\u8bae\u603b\u7ed3"},{"location":"chapter_3/6_tcp/#_1","text":"\u505a\u4e86\u5f88\u591a\u5e74\u8fd0\u7ef4\u5de5\u4f5c, \u7f51\u4e0a\u4e5f\u770b\u4e86\u8bb8\u8bb8\u591a\u591a\u6280\u672f\u6587\u7ae0.\u81ea\u5df1\u9762\u8bd5\u522b\u4eba, \u4e5f\u5f88\u559c\u6b22\u95ee TCP \u76f8\u5173\u7684\u95ee\u9898. \u6709\u611f\u800c\u53d1, \u603b\u7ed3\u4e00\u4e0b TCP \u8fd9\u5757\u7684\u77e5\u8bc6, \u7ed9\u5927\u5bb6\u505a\u4e00\u4e2a\u53c2\u8003. \u5b66\u4e60 TCP \u7684\u56db\u4e2a\u91cd\u70b9\uff1a \u9762\u5411\u8fde\u63a5 \u3001 \u53ef\u9760\u4f20\u8f93\u539f\u7406 \u3001 \u6d41\u91cf\u63a7\u5236 \u548c \u62e5\u585e\u63a7\u5236 .","title":"\u6982\u8ff0"},{"location":"chapter_3/6_tcp/#tcp","text":"","title":"TCP \u57fa\u7840\u90e8\u5206"},{"location":"chapter_3/6_tcp/#tcp_1","text":"\u6765\u4e24\u5f20\u56fe, \u7ed9\u5927\u5bb6\u4e00\u4e2a\u6e05\u6670\u7684\u8ba4\u8bc6. \u6bcf\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49\u8fd9\u91cc\u7c97\u7565\u4ecb\u7ecd\u4e0b \u6e90\u3001\u76ee\u6807\u7aef\u53e3\u53f7\u5b57\u6bb5\uff1a\u5404\u5360 16 \u6bd4\u7279\u3002TCP \u534f\u8bae\u901a\u8fc7\u4f7f\u7528 \u7aef\u53e3 \u6765\u6807\u8bc6\u6e90\u7aef\u548c\u76ee\u6807\u7aef\u7684\u5e94\u7528\u8fdb\u7a0b\u3002\u7aef\u53e3\u53f7\u53ef\u4ee5\u4f7f\u7528 0 \u5230 65535 \u4e4b\u95f4\u7684\u4efb\u4f55\u6570\u5b57\uff0c\u4f46\u662f\u8fd9\u4e9b\u7aef\u53e3\u53f7\u5df2\u7ecf\u88ab\u5206\u4e3a\u516c\u8ba4\u7aef\u53e3\u3001\u6ce8\u518c\u7aef\u53e3\u548c\u52a8\u6001/\u79c1\u6709\u7aef\u53e3.","title":"\u5148\u6765\u770b\u4e00\u4e0b TCP \u62a5\u5934\u5427"},{"location":"chapter_3/6_tcp/#mss-mtu","text":"MTU: Maxitum Transmission Unit \u6700\u5927\u4f20\u8f93\u5355\u5143. \u901a\u5e38\u662f 1500 \u5b57\u8282. MSS: Maxitum Segment Size \u6700\u5927\u5206\u6bb5\u5927\u5c0f \u7531\u4e8e\u4ee5\u592a\u7f51 EthernetII \u6700\u5927\u7684\u6570\u636e\u5e27\u662f 1518Bytes\uff0c\u5228\u53bb\u4ee5\u592a\u7f51\u5e27\u7684\u5e27\u5934\uff08DMAC \u76ee\u7684\u5730\u5740 MAC48bit=6Bytes+SMAC \u6e90 MAC \u5730\u5740 48bit=6Bytes+Type \u57df 2bytes\uff0914Bytes \u548c\u5e27\u5c3e CRC \u6821\u9a8c\u90e8\u5206 4Bytes\uff08\u8fd9\u4e2a\u90e8\u95e8\u6709\u65f6\u5019\u5927\u5bb6\u4e5f\u628a\u5b83\u53eb\u505a FCS\uff09\uff0c\u90a3\u4e48\u5269\u4e0b\u627f\u8f7d\u4e0a\u5c42\u534f\u8bae\u7684\u5730\u65b9\u4e5f\u5c31\u662f Data \u57df\u6700\u5927\u5c31\u53ea\u80fd\u6709 1500Bytes. \u8fd9\u4e2a\u503c\u6211\u4eec\u5c31\u628a\u5b83\u79f0\u4e4b\u4e3a MTU, \u4e5f\u5c31\u662f\u6570\u636e\u94fe\u8def\u5c42\u5355\u6b21\u6700\u591a\u80fd\u591f\u627f\u8f7d\u7684\u6570\u636e\u91cf\u4e3a 1500 \u5b57\u8282. MSS \u5c31\u662f TCP \u6570\u636e\u5305\u6bcf\u6b21\u80fd\u591f\u4f20\u8f93\u7684\u6700\u5927\u6570\u636e\u5206\u6bb5\u3002\u4e3a\u4e86\u8fbe\u5230\u6700\u4f73\u7684\u4f20\u8f93\u6548\u80fd TCP \u534f\u8bae\u5728\u5efa\u7acb\u8fde\u63a5\u7684\u65f6\u5019\u901a\u5e38\u8981\u534f\u5546\u53cc\u65b9\u7684 MSS \u503c\uff0c\u8fd9\u4e2a\u503c TCP \u534f\u8bae\u5728\u5b9e\u73b0\u7684\u65f6\u5019\u5f80\u5f80\u7528 MTU \u503c\u4ee3\u66ff\uff08\u9700\u8981\u51cf\u53bb IP \u6570\u636e\u5305\u5305\u5934\u7684\u5927\u5c0f 20Bytes \u548c TCP \u6570\u636e\u6bb5\u7684\u5305\u5934 20Bytes\uff09\u6240\u4ee5\u5f80\u5f80 MSS \u4e3a 1460.","title":"MSS \u548c MTU \u7684\u6982\u5ff5"},{"location":"chapter_3/6_tcp/#_2","text":"\u53ef\u9760\u4f20\u8f93\u539f\u7406\u7684\u91cd\u70b9\u603b\u7ed3\u4e00\u4e0b\u6709\uff1a\u8fde\u7eed ARQ\u3001\u6ed1\u52a8\u7a97\u53e3\u3001\u8d85\u65f6\u91cd\u4f20\u3001\u7d2f\u79ef\u786e\u8ba4\u3001\u9009\u62e9\u786e\u8ba4 \u901a\u8fc7\u8fde\u7eed ARQ \u534f\u8bae\u4e0e\u53d1\u9001-\u786e\u8ba4\u56de\u590d\u6a21\u5f0f\u6765\u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u6570\u636e\u5305\u90fd\u5230\u8fbe\u63a5\u6536\u65b9 \u901a\u8fc7\u7ed9\u5b57\u8282\u7f16\u53f7\u7684\u65b9\u6cd5\uff0c\u6765\u6807\u8bb0\u6bcf\u4e00\u4e2a\u6570\u636e\u662f\u5c5e\u4e8e\u91cd\u4f20\u8fd8\u662f\u65b0\u7684\u6570\u636e \u901a\u8fc7\u8d85\u65f6\u91cd\u4f20\u7684\u65b9\u5f0f\uff0c\u6765\u89e3\u51b3\u6570\u636e\u5305\u5728\u7f51\u7edc\u4e2d\u4e22\u5931\u7684\u95ee\u9898 \u901a\u8fc7\u6ed1\u52a8\u7a97\u53e3\u6765\u5b9e\u73b0\u6d41\u91cf\u63a7\u5236 \u901a\u8fc7\u7d2f\u79ef\u786e\u8ba4+\u9009\u62e9\u786e\u8ba4\u7684\u65b9\u6cd5\u6765\u63d0\u9ad8\u786e\u8ba4\u56de\u590d\u4e0e\u91cd\u4f20\u7684\u6548\u7387 \u53c2\u8003","title":"\u53ef\u9760\u4f20\u8f93\u539f\u7406"},{"location":"chapter_3/6_tcp/#_3","text":"1 tcp \u62a5\u6587\u5934\u90e8\u91cc\u9762\uff0c\u4e3a\u4ec0\u4e48\u51fa\u73b0 Window \u5b57\u6bb5? \u4e3a\u4e86\u63d0\u5347\u4f20\u8f93\u6548\u7387\uff0c\u672c\u6765\u53d1\u9001\u65b9\u53d1\u4e00\u4e2a\u62a5\u6587\uff0c\u63a5\u6536\u65b9\u786e\u8ba4\u4e4b\u540e\uff0c\u53d1\u9001\u65b9\u624d\u80fd\u7ee7\u7eed\u4e0b\u4e00\u4e2a\u62a5\u6587\u3002\u73b0\u5728\u63a5\u6536\u65b9\u6709\u4e86 buffer\uff0c\u53d1\u9001\u65b9\u53ef\u4ee5\u8fde\u7eed\u53d1\u9001\u51e0\u4e2a\u62a5\u6587\uff0c\u63a5\u6536\u65b9\u5148\u5b58\u5728 buffer \u91cc\u9762\uff0c \u518d\u7ed9\u53d1\u9001\u65b9\u4e00\u4e2a\u786e\u8ba4\u3002\u8fd9\u5c31\u662f\u8fde\u7eed ARQ, \u4f1a\u5927\u5927\u7684\u52a0\u5feb\u4f20\u8f93\u901f\u5ea6\u3002\u5f53\u7136 Window \u7684\u5927\u5c0f\u662f\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\uff0c\u968f\u65f6\u8fdb\u884c\u8c03\u6574\u7684\u3002 2 \u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0 Window Scaling(\u7a97\u53e3\u7f29\u653e\u6bd4\u4f8b)\uff1f\uff1f \u56e0\u4e3a\u968f\u7740\u7f51\u7edc\u7684\u53d1\u5c55\uff0c\u5e26\u5bbd\u8d8a\u6765\u8d8a\u5927\uff0c\u6700\u65e9\u7684 Window \u5b57\u6bb5\u53ea\u6709 16 \u4f4d, \u6700\u591a\u80fd\u591f\u8868\u793a 2^16 \u6b21\u65b9\uff0c\u5373 65535 \u5b57\u8282\u3002 \u5982\u679c\u63a5\u6536\u65b9\u7684 buffer \u5927\u5c0f\u8d85\u8fc7 65535 \u5b57\u8282\uff0c\u90a3\u4e48\u591a\u4f59\u7684\u90e8\u5206\u4e5f\u7528\u4e0d\u5230\uff0c\u56e0\u4e3a\u65e0\u6cd5\u544a\u77e5\u53d1\u9001\u65b9\u3002 \u56e0\u6b64\u51fa\u73b0\u4e86\u7f29\u653e\u6bd4\u4f8b\u5b57\u6bb5\uff0c\u7528\u6765\u544a\u77e5\u53d1\u9001\u65b9\uff0c\u6211\u7684 buffer \u5927\u5c0f\uff0c\u662f Window \u5b57\u6bb5\u7684\u591a\u5c11\u6bd4\u4f8b\uff08\u901a\u5e38\u662f\u51e0\u5341\u500d\u5230\u51e0\u767e\u500d\uff09 \u56e0\u6b64\uff0c\u6570\u636e\u4f20\u8f93\u5c31\u53ef\u4ee5\u5927\u5927\u52a0\u5feb\u4e86\u3002 3 Window Scaling \u7684\u503c\uff0c\u662f\u5728 SYN \u5305\u91cc\u9762\u6307\u5b9a\u7684\uff0c\u5e76\u4e14\u5728\u6574\u4e2a\u8fde\u63a5\u7684\u8fc7\u7a0b\u4e2d\uff0c\u65e0\u6cd5\u88ab\u6539\u53d8\u3002 Window Size \u7684\u503c\uff0c\u5728\u6574\u4e2a\u8fde\u63a5\u6301\u7eed\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u88ab\u6539\u53d8, \u800c\u4e14\u90fd\u662f\u64cd\u4f5c\u7cfb\u7edf\u81ea\u52a8\u505a\u7684\u4e8b\u60c5\u3002 \u4e5f\u5c31\u662f\u8bf4 Window Size * Window\u7f29\u653e\u6bd4\u4f8b \uff1d socket\u4f7f\u7528\u7684buffer\u5927\u5c0f \u3002 socket \u662f\u7528\u6237\u7a7a\u95f4\u8fdb\u7a0b\u7528\u7684\uff0c\u90a3\u4e48\u5b83\u81ea\u7136\u5927\u4e00\u4e9b\u597d\uff0c\u8ba9\u5e94\u7528\u5c42\u53ef\u4ee5\u6709\u66f4\u5145\u8db3\u7684\u65f6\u95f4\u5904\u7406\u3002\u5f53\u7136\u5b83\u53ef\u4ee5\u7533\u8bf7\u7684 buffer \u5927\u5c0f\uff0c\u5fc5\u7136\u8981\u53d7\u5230\u5185\u6838\u63a7\u5236\uff0c\u5185\u6838\u901a\u8fc7\u8bbe\u7f6e\u5185\u6838\u53c2\u6570\u53bb\u63a7\u5236\u3002 \u6211\u4eec\u6765\u770b\u4e0b\u63a5\u6536\u548c\u53d1\u9001\u65f6 Buffer \u5927\u5c0f\u76f8\u5173\u7684\u5185\u6838\u53c2\u6570. \u5185\u6838\u53c2\u6570 \u4e2d\u6587\u8bf4\u660e \u5e38\u7528\u4f18\u5316\u6280\u80fd net.core.rmem_default = 262144 socket \u7684\u63a5\u6536 buffer,\u9ed8\u8ba4\u4e3a 256KB net.core.rmem_max = 4194304 socket \u7684\u63a5\u6536 buffer,\u6700\u5927\u4e3a 4MB net.ipv4.tcp_rmem = 4096 87380 16777216 \u5185\u6838\u81ea\u52a8\u5e2e\u5fd9\u8c03\u6574\u7684\u63a5\u6536 buffer \u7684\u5927\u5c0f, \u6709 3 \u4e2a\u503c, \u6700\u5de6\u8fb9\u662f\u6700\u5c0f\u503c, \u4e2d\u95f4\u662f\u9ed8\u8ba4\u503c, \u53f3\u8fb9\u662f\u6700\u5927\u503c. \u5176\u4e2d\u4e2d\u95f4\u7684\u9ed8\u8ba4\u503c,\u4f1a\u88ab rmem_default \u8986\u76d6, \u53f3\u8fb9\u7684\u6700\u5927\u503c\u4f1a\u88ab rmem_max \u8986\u76d6 net.core.wmem_default = 2097152 socket \u7684\u53d1\u9001 buffer,\u9ed8\u8ba4\u4e3a 2MB net.core.wmem_max = 16777216 socket \u7684\u53d1\u9001 buffer,\u6700\u5927\u4e3a 16MB net.ipv4.tcp_wmem = 4096 65536 16777216 \u5185\u6838\u81ea\u52a8\u5e2e\u5fd9\u8c03\u6574\u7684\u53d1\u9001 buffer \u7684\u5927\u5c0f, \u6709 3 \u4e2a\u503c, \u6700\u5de6\u8fb9\u662f\u6700\u5c0f\u503c, \u4e2d\u95f4\u662f\u9ed8\u8ba4\u503c, \u53f3\u8fb9\u662f\u6700\u5927\u503c. \u5176\u4e2d\u4e2d\u95f4\u7684\u9ed8\u8ba4\u503c,\u4f1a\u88ab wmem_default \u8986\u76d6, \u53f3\u8fb9\u7684\u6700\u5927\u503c\u4f1a\u88ab wmem_max \u8986\u76d6","title":"\u6ed1\u52a8\u7a97\u53e3\u7684\u6982\u5ff5"},{"location":"chapter_3/6_tcp/#_4","text":"\u7528\u56fe\u8bf4\u660e\u4e0b\u6ed1\u52a8\u7a97\u53e3\u7684\u5de5\u4f5c\u8fc7\u7a0b. \u53d1\u9001\u65b9\u9700\u8981\u6839\u636e\u63a5\u6536\u65b9\u7684\u7f13\u51b2\u533a\u5927\u5c0f\uff0c\u8bbe\u7f6e\u81ea\u5df1\u7684\u53ef\u53d1\u9001\u7a97\u53e3\u5927\u5c0f\uff0c\u5904\u4e8e\u7a97\u53e3\u5185\u7684\u6570\u636e\u8868\u793a\u53ef\u53d1\u9001\uff0c\u4e4b\u5916\u7684\u6570\u636e\u4e0d\u53ef\u53d1\u9001\u3002 \u5f53\u7a97\u53e3\u5185\u7684\u6570\u636e\u63a5\u6536\u5230\u786e\u8ba4\u56de\u590d\u65f6\uff0c\u6574\u4e2a\u7a97\u53e3\u4f1a\u5f80\u524d\u79fb\u52a8\uff0c\u76f4\u5230\u53d1\u9001\u5b8c\u6210\u6240\u6709\u7684\u6570\u636e \u5728 TCP \u7684\u9996\u90e8\u6709\u4e00\u4e2a\u7a97\u53e3\u5927\u5c0f\u5b57\u6bb5\uff0c\u4ed6\u8868\u793a\u63a5\u6536\u65b9\u7684\u5269\u4f59\u7f13\u51b2\u533a\u5927\u5c0f\uff0c\u8ba9\u53d1\u9001\u65b9\u53ef\u4ee5\u8c03\u6574\u81ea\u5df1\u7684\u53d1\u9001\u7a97\u53e3\u5927\u5c0f\u3002\u901a\u8fc7\u6ed1\u52a8\u7a97\u53e3\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0 TCP \u7684\u6d41\u91cf\u63a7\u5236\uff0c\u4e0d\u81f3\u4e8e\u53d1\u9001\u592a\u5feb\uff0c\u5bfc\u81f4\u592a\u591a\u7684\u6570\u636e\u4e22\u5931\u3002 \u8fde\u7eed ARQ \u5e26\u6765\u7684\u7b2c\u4e8c\u4e2a\u95ee\u9898\u662f\uff1a\u7f51\u7edc\u4e2d\u5145\u65a5\u7740\u548c\u53d1\u9001\u6570\u636e\u5305\u4e00\u6837\u6570\u636e\u91cf\u7684\u786e\u8ba4\u56de\u590d\u62a5\u6587\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u53d1\u9001\u6570\u636e\u5305\uff0c\u5fc5\u987b\u5f97\u6709\u4e00\u4e2a\u786e\u8ba4\u56de\u590d\u3002\u63d0\u9ad8\u7f51\u7edc\u6548\u7387\u7684\u65b9\u6cd5\u662f\uff1a \u7d2f\u79ef\u786e\u8ba4 \u3002\u63a5\u6536\u65b9\u4e0d\u9700\u8981\u9010\u4e2a\u8fdb\u884c\u56de\u590d\uff0c\u800c\u662f\u7d2f\u79ef\u5230\u4e00\u5b9a\u91cf\u7684\u6570\u636e\u5305\u4e4b\u540e\uff0c\u544a\u8bc9\u53d1\u9001\u65b9\uff0c\u5728\u6b64\u6570\u636e\u5305\u4e4b\u524d\u7684\u6570\u636e\u5168\u90fd\u6536\u5230\u3002\u4f8b\u5982\uff0c\u6536\u5230 1234\uff0c\u63a5\u6536\u65b9\u53ea\u9700\u8981\u544a\u8bc9\u53d1\u9001\u65b9\u6211\u6536\u5230 4 \u4e86\uff0c\u90a3\u4e48\u53d1\u9001\u65b9\u5c31\u77e5\u9053 1234 \u90fd\u6536\u5230\u4e86\u3002 \u7b2c\u4e09\u4e2a\u95ee\u9898\u662f\uff1a\u5982\u4f55\u5904\u7406\u4e22\u5305\u60c5\u51b5\u3002\u5728\u505c\u6b62\u7b49\u5f85\u534f\u8bae\u4e2d\u5f88\u7b80\u5355\uff0c\u76f4\u63a5\u4e00\u4e2a\u8d85\u65f6\u91cd\u4f20\u5c31\u89e3\u51b3\u4e86\u3002\u4f46\uff0c\u8fde\u7eed ARQ \u4e2d\u4e0d\u592a\u4e00\u6837\u3002\u4f8b\u5982\uff1a\u63a5\u6536\u65b9\u6536\u5230\u4e86 123 567\uff0c\u516d\u4e2a\u5b57\u8282\uff0c\u7f16\u53f7\u4e3a 4 \u7684\u5b57\u8282\u4e22\u5931\u4e86\u3002\u6309\u7167\u7d2f\u79ef\u786e\u8ba4\u7684\u601d\u8def\uff0c\u53ea\u80fd\u53d1\u9001 3 \u7684\u786e\u8ba4\u56de\u590d\uff0c567 \u90fd\u5fc5\u987b\u4e22\u6389\uff0c\u56e0\u4e3a\u53d1\u9001\u65b9\u4f1a\u8fdb\u884c\u91cd\u4f20\u3002\u8fd9\u5c31\u662f GBN\uff08go-back-n) \u601d\u8def\u3002 \u4f46\u662f\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u53ea\u9700\u8981\u91cd\u4f20 4 \u5373\u53ef\uff0c\u8fd9\u6837\u4e0d\u662f\u5f88\u6d6a\u8d39\u8d44\u6e90\uff0c\u6240\u4ee5\u5c31\u6709\u4e86\uff1a \u9009\u62e9\u786e\u8ba4(SACK) \u3002\u5728 TCP \u62a5\u6587\u7684\u9009\u9879\u5b57\u6bb5\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u5df2\u7ecf\u6536\u5230\u7684\u62a5\u6587\u6bb5\uff0c\u6bcf\u4e00\u4e2a\u62a5\u6587\u6bb5\u9700\u8981\u4e24\u4e2a\u8fb9\u754c\u6765\u8fdb\u884c\u786e\u5b9a\u3002\u8fd9\u6837\u53d1\u9001\u65b9\uff0c\u5c31\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u9009\u9879\u5b57\u6bb5\u53ea\u91cd\u4f20\u4e22\u5931\u7684\u6570\u636e\u4e86\u3002","title":"\u6d41\u91cf\u63a7\u5236"},{"location":"chapter_3/6_tcp/#tcp_2","text":"\u6765\u4e00\u5f20\u56fe\u8bf4\u660e\u4e00\u4e0b\u8fde\u63a5\u5efa\u7acb\u548c\u65ad\u5f00\u7684\u8fc7\u7a0b\uff0c\u4ee5\u53ca 2 \u7aef Socket \u7684\u72b6\u6001\u53d8\u5316","title":"tcp \u8fde\u63a5\u5efa\u7acb\u548c\u65ad\u5f00\u8fc7\u7a0b"},{"location":"chapter_3/6_tcp/#timewait","text":"\u9996\u5148\u660e\u786e Timewait \u72b6\u6001, \u662f\u4e3b\u52a8\u65ad\u5f00\u8fde\u63a5\u7684\u90a3\u4e00\u65b9\u4f1a\u51fa\u73b0\u7684, (Client \u6216\u8005 Server \u90fd\u53ef\u4ee5) MSL\uff08Max Segment Lifetime)\u4e3a\u6700\u5927\u62a5\u6587\u751f\u5b58\u65f6\u95f4, \u6839\u636e RFC 793 \u5b9a\u4e49, \u662f 2 \u5206\u949f. Timewait \u72b6\u6001\u6301\u7eed\u7684\u65f6\u95f4\u8981\u5927\u4e8e\u7b49\u4e8e 2 * MSL\u3002 1 \u7b2c\u4e00\u4e2a\u4f5c\u7528\u662f\u907f\u514d\u4e0a\u4e00\u4e2a\u8fde\u63a5\u5ef6\u8fdf\u5230\u8fbe\u7684\u6570\u636e\u5305\u88ab\u4e0b\u4e00\u4e2a\u8fde\u63a5\u9519\u8bef\u63a5\u6536\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u540c\u4e00\u4e2a client \u548c server, \u5728\u4e00\u6bb5\u65f6\u95f4\u5185 4 \u5143\u7ec4\u4e00\u6837 (client_ip,client_port,server_ip,server_port) \u5982\u679c\u6ca1\u6709 timewait \u72b6\u6001, \u6bcf\u6b21\u4e3b\u52a8\u65ad\u5f00\u8fde\u63a5\u7684\u90a3\u4e00\u65b9\u5f88\u5feb\u5c31\u5173\u95ed\u4e86\u8fde\u63a5, \u90a3\u4e48\u5047\u8bbe\u4e0b\u4e00\u6b21\u8fde\u63a5\u5904\u4e8e ESTABLISH \u72b6\u6001\u65f6\uff0c\u4e4b\u524d\u88ab\u4e22\u5931\u7684\u62a5\u6587\u4f20\u8fc7\u6765\u4e86,\u5c31\u6709\u53ef\u80fd\u88ab\u9519\u8bef\u5730\u63a5\u6536, \u4ece\u800c\u5f71\u54cd\u73b0\u6709\u8fde\u63a5. \u5982\u679c\u6709 timewait \u72b6\u6001, timewait \u662f\u8981\u5927\u4e8e\u7b49\u4e8e 2MSL \u7684, \u90a3\u4e48\u5c31\u4e0d\u53ef\u80fd\u6709\u62a5\u6587\u4f1a\u88ab\u65b0\u8fde\u63a5\u63a5\u6536. 2 \u7b2c\u4e8c\u4e2a\u4f5c\u7528: \u786e\u4fdd\u88ab\u52a8\u5173\u95ed\u7684\u90a3\u4e00\u65b9\u53ef\u4ee5\u6b63\u5e38\u5173\u95ed\u8fde\u63a5. \u5047\u8bbe\u4e3b\u52a8\u65ad\u5f00\u8fde\u63a5\u7684\u8fd9\u4e00\u65b9\uff0c\u53d1\u7ed9\u5bf9\u65b9\u7684\u6700\u540e\u4e00\u4e2a ACK \u4e22\u4e86, \u6b64\u65f6\u88ab\u52a8\u65ad\u5f00\u8fde\u63a5\u7684\u90a3\u4e00\u65b9\u4e00\u76f4\u5904\u4e8e LAST-ACK \u72b6\u6001, \u4ed6\u6ca1\u6709\u6536\u5230\u6700\u540e\u4e00\u4e2a ACK, \u8fc7\u6bb5\u65f6\u95f4\u4f1a\u91cd\u53d1\u4e4b\u524d\u7684 FIN \u62a5\u6587\u3002\u5982\u679c\u4e3b\u52a8\u65ad\u5f00\u7684\u8fd9\u4e00\u65b9\u6ca1\u6709 Timewait \u72b6\u6001\uff0c\u6b64\u65f6\u5df2\u7ecf\u662f CLOSED \u72b6\u6001\u4e86, \u90a3\u4e48\u4f1a\u76f4\u63a5\u56de\u590d\u4e00\u4e2a RST \u62a5\u6587, \u8fd9\u6837\u88ab\u52a8\u65ad\u5f00\u8fde\u63a5\u7684\u8fd9\u4e00\u65b9\u5c31\u4f1a\u6536\u5230\u4e00\u4e2a\u9519\u8bef. \u603b\u7ed3: 2 \u4e2a\u4f5c\u7528\uff0c\u4e00\u4e2a\u4f5c\u7528\u662f\u9632\u6b62\u6570\u636e\u5ef6\u8fdf\u800c\u5f15\u53d1\u9519\u8bef\uff0c\u53e6\u4e00\u4e2a\u4f5c\u7528\u662f\u9632\u6b62 ACK \u4e22\u5931\u800c\u5f15\u53d1\u9519\u8bef.","title":"Timewait \u72b6\u6001\u7684\u4f5c\u7528"},{"location":"chapter_3/6_tcp/#timewait_1","text":"Linux Socket \u7684 Timewait \u65f6\u95f4\u53ef\u4ee5\u4fee\u6539\u5417? \u4e0d\u53ef\u4ee5. \u56e0\u4e3a\u5728\u5185\u6838\u4ee3\u7801\u91cc\u5df2\u7ecf\u5199\u6b7b\u4e86\u8fd9\u4e2a\u65f6\u95f4\u4e3a 60 \u79d2. include/net/tcp.h 121:#define TCP_TIMEWAIT_LEN (60*HZ) /* how long to wait to destroy TIME-WAIT","title":"Timewait \u5176\u4ed6\u5c0f\u77e5\u8bc6"},{"location":"chapter_3/6_tcp/#_5","text":"\u5185\u6838\u53c2\u6570 \u8bf4\u660e \u5907\u6ce8 net.ipv4.tcp_fin_timeout=30 \u8868\u793a\u7684\u662f\u4e00\u4e2a Linux socket \u5bf9\u8c61\uff0c\u5904\u4e8e FIN-WAIT-2 \u72b6\u6001\u7684\u6700\u5927\u65f6\u95f4 \u53c2\u8003 net.ipv4.tcp_timestamps = 1(\u53ef\u9009\u503c:0\u30011\u30012) \u8be5\u53c2\u6570\u7528\u4e8e\u8bbe\u7f6e\u4f7f\u7528\u65f6\u95f4\u6233\u4f5c\u4e3a\u5e8f\u5217\u53f7\uff0c\u901a\u8fc7\u8fd9\u6837\u7684\u8bbe\u7f6e\u53ef\u4ee5\u907f\u514d\u5e8f\u5217\u53f7\u88ab\u91cd\u590d\u4f7f\u7528.(\u53c2\u8003 RFC 1323) \u5b98\u65b9\u6587\u6863\u8bf4\u660e net.ipv4.tcp_tw_reuse = 1 Allow to reuse TIME-WAIT sockets for new connections when it is safe from protocol viewpoint. Default value is 0. It should not be changed without advice/request of technical experts.(\u5141\u8bb8\u91cd\u7528\u5904\u4e8e Timewait \u72b6\u6001\u7684 socekt,\u6765\u65b0\u5efa tcp \u8fde\u63a5). \u53ea\u6709\u5f53 net.ipv4.tcp_timestamps = 1\uff0cnet.ipv4.tcp_tw_reuse = 1 \u4e24\u4e2a\u9009\u9879\u540c\u65f6\u5f00\u542f\u65f6\uff0ctcp_tw_reuse \u624d\u4f1a\u6709\u6548\uff0c\u5e76\u4e14\u53ea\u6709\u5f53 socket \u8ddd\u79bb\u4e0a\u6b21\u6536\u5230\u6570\u636e\u5305\u5df2\u7ecf\u8d85\u8fc7 1 \u79d2\u65f6\uff0c\u7aef\u53e3\u624d\u4f1a\u88ab\u91cd\u7528 \u8fd9\u4e2a\u53c2\u6570\u5982\u679c\u8981\u4ecb\u7ecd\u7684\u8bdd,\u53ef\u4ee5\u5199\u4e00\u6574\u7bc7\u6587\u6863\u4e86. \u53c2\u8003 \u4e3b\u8981\u4f5c\u7528\u662f\u672c\u5730\u7aef\u53e3\u4e0d\u591f\u7528\u65f6, \u590d\u7528\u5904\u4e8e Timewait \u72b6\u6001\u7684 socket. net.ipv4.tcp_tw_recycle = 1 Enable fast recycling TIME-WAIT sockets. Default value is 0. It should not be changed without advice/request of technical experts.\u4f1a\u5feb\u901f\u56de\u6536 TIME_WAIT \u72b6\u6001\u7684 socket \u3002\u6ce8\u610f\u53ea\u6709\u5f53 tcp_timestamps \u548c tcp_tw_recycle \u90fd\u5f00\u542f\u65f6\uff0c\u624d\u4f1a\u5feb\u901f\u56de\u6536 \u5185\u6838 4.12 \u7248\u672c\u53bb\u6389\u8fd9\u4e2a\u53c2\u6570 net.ipv4.ip_local_port_range = 32768 60999 \u4e3b\u52a8\u8fde\u63a5\u65b9\uff08\u5ba2\u6237\u7aef\uff09\u4f1a\u5360\u7528\u672c\u5730\u7aef\u53e3, \u53ef\u4ee5\u901a\u8fc7\u8c03\u6574\u8be5\u53c2\u6570\u6765\u589e\u52a0\u672c\u5730\u7aef\u53e3\u7684\u9009\u62e9\u8303\u56f4","title":"\u76f8\u5173\u7684\u5185\u6838\u53c2\u6570"},{"location":"chapter_3/6_tcp/#nagles-algorithmnagle","text":"","title":"Nagle\u2019s Algorithm(Nagle \u7b97\u6cd5)"},{"location":"chapter_3/6_tcp/#nagle","text":"TCP/IP \u534f\u8bae\u4e2d\uff0c\u65e0\u8bba\u53d1\u9001\u591a\u5c11\u6570\u636e\uff0c\u603b\u662f\u8981\u5728\u6570\u636e\u524d\u9762\u52a0\u4e0a\u534f\u8bae\u5934, TCP header \u5360 20 bytes\uff0c IPv4 header \u5360 20 bytes\uff0c\u82e5\u50b3\u9001\u7684\u8cc7\u6599\u592a\u5c0f\uff0c TCP/IPv4 headers \u9020\u6210\u7684 overhead (40bytes) \u4e26\u4e0d\u5212\u7b97\u3002\u60f3\u50cf\u50b3\u9001\u8cc7\u6599\u53ea\u6709 1 byte\uff0c\u537b\u8981\u53e6\u5916\u50b3 40 bytes header\uff0c\u9019\u662f\u5f88\u5927\u7684\u6d6a\u8cbb\u3002\u82e5\u7db2\u8def\u4e0a\u6709\u5927\u91cf\u5c0f\u5c01\u5305\uff0c\u6703\u5360\u53bb\u7db2\u8def\u983b\u5bec\uff0c\u53ef\u80fd\u6703\u9020\u6210\u7db2\u8def\u64c1\u585e. \u65bc\u662f\u6709\u4e86 Nagle\u2019s Algorithm\uff0c\u7528\u4f86\u907f\u514d\u7522\u751f\u5927\u91cf\u7684\u5c0f\u5c01\u5305\u3002","title":"\u4e3a\u4ec0\u4e48\u4f1a\u6709 Nagle \u7b97\u6cd5"},{"location":"chapter_3/6_tcp/#nagle_1","text":"Nagle \u7b97\u6cd5\u7684\u57fa\u672c\u5b9a\u4e49\u662f \u4efb\u610f\u65f6\u523b\uff0c\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\u672a\u88ab\u786e\u8ba4\u7684\u5c0f\u6bb5 \u3002 \u6240\u8c13 \u5c0f\u6bb5 \uff0c\u6307\u7684\u662f\u5c0f\u4e8e MSS \u5c3a\u5bf8\u7684\u6570\u636e\u5757\uff0c\u6240\u8c13 \u672a\u88ab\u786e\u8ba4 \uff0c\u662f\u6307\u4e00\u4e2a\u6570\u636e\u5757\u53d1\u9001\u51fa\u53bb\u540e\uff0c\u6ca1\u6709\u6536\u5230\u5bf9\u65b9\u53d1\u9001\u7684 ACK \u786e\u8ba4\u8be5\u6570\u636e\u5df2\u6536\u5230\u3002 \u53c2\u8003 \u6587\u6863 1 , \u6587\u6863 2","title":"Nagle \u7b97\u6cd5\u7684\u4e2d\u5fc3\u601d\u60f3"},{"location":"chapter_3/6_tcp/#tcp_nodelaydelayed-ack-tcp_nopush","text":"","title":"TCP_NODELAY\u3001Delayed ACK \u673a\u5236\u3001TCP_NOPUSH"},{"location":"chapter_3/6_tcp/#tcp_nodelay","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53d1\u9001\u6570\u636e\u91c7\u7528 Nagle \u7b97\u6cd5\u3002\u8fd9\u6837\u867d\u7136\u63d0\u9ad8\u4e86\u7f51\u7edc\u541e\u5410\u91cf\uff0c\u4f46\u662f\u5b9e\u65f6\u6027\u5374\u964d\u4f4e\u4e86\uff0c\u5728\u4e00\u4e9b\u4ea4\u4e92\u6027\u5f88\u5f3a\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\u662f\u4e0d\u5141\u8bb8\u7684\uff0c\u4f7f\u7528 TCP_NODELAY \u9009\u9879\u53ef\u4ee5\u7981\u6b62 Nagle \u7b97\u6cd5. \u6b64\u65f6\uff0c\u5e94\u7528\u7a0b\u5e8f\u5411\u5185\u6838\u9012\u4ea4\u7684\u6bcf\u4e2a\u6570\u636e\u5305\u90fd\u4f1a\u7acb\u5373\u53d1\u9001\u51fa\u53bb, \u4e5f\u5c31\u662f socket send buffer \u91cc\u7684\u6570\u636e\u4f1a\u88ab\u7acb\u5373\u53d1\u51fa. \u4e86\u89e3\u4e0b Nginx \u7684 TCP_NODELAY","title":"TCP_NODELAY"},{"location":"chapter_3/6_tcp/#delayed-ack","text":"Nagle\u2019s Algorithm \u548c Delayed ACK \u673a\u5236\uff0c \u5728 Linux \u4e0a\u90fd\u662f\u9ed8\u8ba4\u5f00\u542f\u7684.","title":"Delayed ACK \u673a\u5236"},{"location":"chapter_3/6_tcp/#delayed-ack_1","text":"\u67e5\u8be2 RFC1122 \u7684 4.2.3.2 When to Send an ACK Segment \u5f97\u77e5 ` 4.2.3.2 When to Send an ACK Segment A host that is receiving a stream of TCP data segments can increase efficiency in both the Internet and the hosts by sending fewer than one ACK (acknowledgment) segment per data segment received; this is known as a \"delayed ACK\" [TCP:5]. A TCP SHOULD implement a delayed ACK, but an ACK should not be excessively delayed; in particular, the delay MUST be less than 0.5 seconds, and in a stream of full-sized segments there SHOULD be an ACK for at least every second segment. ` This process, known as delayed ACKing [RFC1122] ,typically causes an ACK to be generated for every other received (full-sized) data packet. In the case of an isolated TCP packet (i.e., where a second TCP packet is not going to arrive anytime soon), the delayed ACK policy causes an acknowledgement for the data in the isolated packet to be delayed up to 200 milliseconds of the receipt of the isolated packet (the actual maximum time the acknowledgement can be delayed is 500ms [RFC1122], but most systems implement a maximum of 200ms \u91cd\u9ede: \u901a\u5e38\u6700\u591a\u5ef6\u9072 200ms\uff0cRFC \u898f\u5b9a\u4e0d\u80fd\u8d85\u904e 500ms\u3002 \u6bcf\u6536\u5230\u5169\u500b full-sized packet\uff0c\u4e00\u5b9a\u8981\u56de\u4e00\u6b21 ACK\u3002 Linux \u7684\u5b9e\u73b0\u662f\u5728 __tcp_ack_snd_check()\u51fd\u6570\uff0c\u898f\u5247\u662f\u4ee5\u4e0b\u5176\u4e2d\u4e00\u500b\u689d\u4ef6\u6eff\u8db3\u5c31\u6703\u9001\u51fa ACK \u6536\u5230\u4e14\u9084\u6c92 ACK \u7684\u8cc7\u6599\u8d85\u904e MSS (\u7528\u767c\u9001\u7aef\u7684 MSS \u8a08\u7b97)\uff0c\u4e26\u4e14\u61c9\u7528\u5c64\u8b80\u53d6\u8cc7\u6599\u901f\u5ea6\u5920\u5feb\u3002 \u5728 quickack mode: \u61c9\u7528\u5c64\u53ef\u4ee5\u5f37\u8feb\u555f\u7528\u9019\u500b\u6a21\u5f0f\u3002 \u6536\u5230 out-of-order \u8cc7\u6599\uff0c\u8981\u99ac\u4e0a\u901a\u77e5\u767c\u9001\u7aef\u6536\u5230\u7684\u90e8\u4efd (\u7528 SACK)\uff0c\u907f\u514d\u91cd\u50b3\u3002","title":"Delayed ACK \u673a\u5236\u662f\u8fd9\u6837:"},{"location":"chapter_3/6_tcp/#delayed-ack_2","text":"\u8282\u7ea6\u53d1\u9001\u7684 ACK \u62a5\u6587\u6570\u91cf.","title":"Delayed ACK \u7684\u597d\u5904"},{"location":"chapter_3/6_tcp/#delayed-ack-tcp-4","text":"\u6b63\u5e38\u7684\u6325\u624b\u6d41\u7a0b\u662f\u8fd9\u6837\u7684 1 client: FIN (will not send more) 2 server: ACK (received the FIN) \u2026 server: sends more data\u2026, client ACKs these data 3 server: FIN (will not send more) 4 client: ACK (received the FIN) If the server has no more data to send it might close the connection also. In this case steps 2+3 can be merged, e.g. the server sends a FIN+ACK, where the ACK acknowledges the FIN received by the client. \u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u670d\u52a1\u5668\u7aef\u5728\u5ba2\u6237\u7aef\u53d1\u51fa FIN \u4ee5\u540e\uff0c\u5982\u679c\u6709\u6570\u636e\u8981\u53d1\u9001\uff0c\u9700\u8981\u5148 ACK \u8fd9\u4e2a FIN\uff0c\u7136\u540e\u518d\u8fdb\u884c\u6570\u636e\u53d1\u9001\u3002\u4f46\u662f\u5982\u679c\u670d\u52a1\u5668\u7aef\u6ca1\u6709\u66f4\u591a\u6570\u636e\u53d1\u9001\uff0c\u4e5f\u8981\u5173\u95ed\u8fde\u63a5\u7684\u60c5\u51b5\u4e0b\uff0c\u5f88\u53ef\u80fd ACK \u5305\u5c31\u8ddf\u968f FIN \u4e00\u8d77\u53d1\u51fa\u3002\u5176\u4e2d ACK \u4e3a\u786e\u8ba4\u5ba2\u6237\u7aef\u7684 FIN \u5305\u3002","title":"Delayed ACK \u5982\u4f55\u5f71\u54cd TCP 4 \u6b21\u6325\u624b\u8fc7\u7a0b"},{"location":"chapter_3/6_tcp/#linux-delayed-ack","text":"\u5f00\u542f TCP_QUICKACK \u9009\u9879 TCP_QUICKACK (since Linux 2.4.4) Enable quickack mode if set or disable quickack mode if cleared. In quickack mode, acks are sent immediately, rather than delayed if needed in accordance to normal TCP operation. This flag is not permanent, it only enables a switch to or from quickack mode. Subsequent operation of the TCP protocol will once again enter/leave quickack mode depending on internal protocol processing and factors such as delayed ack timeouts occurring and data transfer. This option should not be used in code intended to be portable. \u6ce8\u610f TCP_QUICKACK \u9009\u9879\u4ec5\u4ec5\u9002\u7528\u4e8e Linux \u5e73\u53f0, \u5176\u4ed6\u5e73\u53f0\u4e0d\u4e00\u5b9a\u652f\u6301.","title":"Linux \u4e0a\u5982\u4f55\u5173\u95ed Delayed ACK \u673a\u5236"},{"location":"chapter_3/6_tcp/#tcp_nopush","text":"Linux\u672c\u8eab\u5e76\u6ca1\u6709\u63d0\u4f9bTCP_NOPUSH\u9009\u9879 , \u8be5\u9009\u9879\u662f NGINX \u5b98\u65b9\u7ed9\u51fa\u7684. \u56e0\u4e3a\u8fd9\u4e2a\u9009\u9879\u548c TCP_NOPUSH \u592a\u50cf\u4e86, \u6240\u4ee5\u653e\u5230\u8fd9\u91cc\u4e00\u8d77\u8bb2. \u5728 Nginx \u4e2d\uff0c \u5982\u679c\u4f60\u542f\u52a8\u7528\u4e86 Sendfile \u9009\u9879, \u5e76\u4e14\u5f00\u542f\u4e86 TCP_NOPUSH \u9009\u9879,\u90a3\u4e48\u4f1a\u4f7f\u5f97 sending the response header and the beginning of a file in one packet, on Linux and FreeBSD 4.*;(\u5934\u90e8\u4f7f\u7528\u4e00\u4e2a\u62a5\u6587) sending a file in full packets.(\u6587\u4ef6\u7684\u6570\u636e\u90e8\u5206\u91c7\u7528 MSS \u5927\u5c0f\u53d1\u9001)","title":"TCP_NOPUSH"},{"location":"chapter_3/6_tcp/#tcp_3","text":"\u62e5\u585e\u63a7\u5236\u8003\u8651\u7684\u662f\uff1a \u907f\u514d\u7f51\u7edc\u8fc7\u5206\u62e5\u6324\u5bfc\u81f4\u4e22\u5305\u4e25\u91cd\uff0c\u7f51\u7edc\u6548\u7387\u964d\u4f4e . \u62e5\u585e\u63a7\u5236\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u6d41\u91cf\u63a7\u5236\uff0c\u6d41\u91cf\u63a7\u5236\u7684\u5b9e\u73b0\u662f\u6ed1\u52a8\u7a97\u53e3\uff0c\u6240\u4ee5 \u62e5\u585e\u63a7\u5236\u6700\u7ec8\u4e5f\u662f\u901a\u8fc7\u9650\u5236\u53d1\u9001\u65b9\u7684\u6ed1\u52a8\u7a97\u53e3\u5927\u5c0f\u6765\u9650\u5236\u6d41\u91cf \u3002\u5f53\u7136\uff0c\u62e5\u585e\u63a7\u5236\u7684\u624b\u6bb5\u4e0d\u53ea\u662f\u6d41\u91cf\u63a7\u5236\uff0c\u5bfc\u81f4\u62e5\u585e\u7684\u56e0\u7d20\u6709\uff1a\u8def\u7531\u5668\u7f13\u5b58\u3001\u5e26\u5bbd\u3001\u5904\u7406\u5668\u5904\u7406\u901f\u5ea6\u7b49\u7b49\u3002\u63d0\u5347\u786c\u4ef6\u80fd\u529b\uff08\u628a 4 \u8f66\u9053\u6539\u6210 8 \u8f66\u9053\uff09\u662f\u5176\u4e2d\u4e00\u4e2a\u65b9\u6cd5\uff0c\u4f46\u6bd5\u7adf\u786c\u4ef6\u63d0\u5347\u662f\u6709\u74f6\u9888\u7684\uff0c\u6ca1\u529e\u6cd5\u4e0d\u65ad\u63d0\u5347\uff0c\u8fd8\u662f\u9700\u8981\u4ece tcp \u672c\u8eab\u6765\u589e\u52a0\u7b97\u6cd5\uff0c\u89e3\u51b3\u62e5\u585e\u3002 \u62e5\u585e\u63a7\u5236\u7684\u91cd\u70b9\u6709 4 \u4e2a\uff1a \u6162\u5f00\u59cb \u3001 \u5feb\u6062\u590d \u3001 \u5feb\u91cd\u4f20 \u3001 \u62e5\u585e\u907f\u514d \u3002 Y \u8f74\u8868\u793a\u7684\u662f\u53d1\u9001\u65b9\u7a97\u53e3\u5927\u5c0f\uff0cX \u8f74\u8868\u793a\u7684\u662f\u53d1\u9001\u7684\u8f6e\u6b21\uff08\u4e0d\u662f\u5b57\u8282\u7f16\u53f7\uff09\u3002 \u6700\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u4f1a\u628a\u7a97\u53e3\u8bbe\u7f6e\u4e00\u4e2a\u8f83\u5c0f\u7684\u503c\uff0c\u7136\u540e\u6bcf\u8f6e\u53d8\u4e3a\u539f\u6765\u7684\u4e24\u500d\u3002\u8fd9\u662f\u6162\u5f00\u59cb\u3002 \u5f53\u7a97\u53e3\u503c\u5230\u8fbe ssthresh \u503c\uff0c\u8fd9\u4e2a\u503c\u662f\u9700\u8981\u901a\u8fc7\u5b9e\u65f6\u7f51\u7edc\u60c5\u51b5\u8bbe\u7f6e\u7684\u4e00\u4e2a\u7a97\u53e3\u9650\u5236\u503c\uff0c\u5f00\u59cb\u8fdb\u5165\u62e5\u585e\u907f\u514d\uff0c\u6bcf\u8f6e\u628a\u7a97\u53e3\u503c\u63d0\u5347 1\uff0c\u6162\u6162\u8bd5\u63a2\u7f51\u7edc\u7684\u5e95\u7ebf\u3002 \u5982\u679c\u53d1\u751f\u4e86\u6570\u636e\u8d85\u65f6\uff0c\u8868\u793a\u6781\u53ef\u80fd\u53d1\u751f\u4e86\u62e5\u585e\uff0c\u7136\u540e\u56de\u5230\u6162\u5f00\u59cb\uff0c\u91cd\u590d\u4e0a\u9762\u7684\u6b65\u9aa4\u3002 \u5982\u679c\u6536\u5230\u4e09\u4e2a\u76f8\u540c\u7684\u786e\u8ba4\u56de\u590d\uff0c\u8868\u793a\u73b0\u5728\u7f51\u7edc\u7684\u60c5\u51b5\u4e0d\u592a\u597d\uff0c\u628a ssthresh \u7684\u503c\u8bbe\u7f6e\u4e3a\u539f\u6765\u7684\u4e00\u534a\uff0c\u7ee7\u7eed\u62e5\u585e\u907f\u514d\u3002\u8fd9\u90e8\u5206\u79f0\u4e3a\u5feb\u6062\u590d\u3002 \u5982\u679c\u6536\u5230\u4e22\u5305\u4fe1\u606f\uff0c\u5e94\u8be5\u5c3d\u5feb\u628a\u4e22\u5931\u7684\u5305\u91cd\u4f20\u4e00\u6b21\uff0c\u8fd9\u662f\u5feb\u91cd\u4f20\u3002 \u5f53\u7136\uff0c\u7a97\u53e3\u7684\u6700\u7ec8\u4e0a\u9650\u662f\u4e0d\u80fd\u65e0\u9650\u4e0a\u6da8\u7684\uff0c\u4ed6\u4e0d\u80fd\u8d85\u8fc7\u63a5\u6536\u65b9\u7684\u7f13\u5b58\u533a\u5927\u5c0f\u3002 \u901a\u8fc7\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u5c31\u53ef\u4ee5\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\uff0c\u907f\u514d\u7f51\u7edc\u62e5\u6324\u3002","title":"TCP \u62e5\u585e\u63a7\u5236"},{"location":"chapter_3/6_tcp/#linux-cca","text":"","title":"Linux \u4e0b\u5982\u4f55\u67e5\u770b\u5f53\u524d\u7684\u62e5\u585e\u63a7\u5236\u7b97\u6cd5(CCA)"},{"location":"chapter_3/6_tcp/#bbr","text":"","title":"BBR \u7b97\u6cd5"},{"location":"chapter_3/6_tcp/#tcp_4","text":"\u4f20\u7edf\u7684 TCP \u62e5\u585e\u7b97\u6cd5\u5df2\u7ecf\u975e\u5e38\u53e4\u8001\u4e86\uff0c\u73b0\u5728\u7684\u7f51\u7edc\u73af\u5883\u5df2\u7ecf\u548c\u6700\u521d\u8bbe\u8ba1\u7b97\u6cd5\u65f6\u7684\u7f51\u7edc\u73af\u5883\u5b8c\u5168\u4e0d\u540c\u4e86\uff0c\u56e0\u6b64\u7b97\u6cd5\u5df2\u7ecf\u8d8a\u6765\u8d8a\u4e0d\u9002\u5e94\u73b0\u5728\u7684\u73af\u5883\u3002\u6700\u4e3b\u8981\u7684\u51e0\u4e2a\u95ee\u9898\u5305\u62ec\uff1a","title":"\u4f20\u7edf TCP \u62e5\u585e\u7b97\u6cd5\u7684\u95ee\u9898"},{"location":"chapter_3/6_tcp/#_6","text":"\u6162\u542f\u52a8\u8fc7\u7a0b\u592a\u6162\uff0c\u5bfc\u81f4\u5c0f\u6587\u4ef6\u4f20\u8f93\uff08\u4f8b\u5982 HTTP \u7f51\u9875\u4f20\u8f93\uff09\u4e0d\u80fd\u5145\u5206\u5229\u7528\u5e26\u5bbd\u3002 \u5173\u4e8e\u6162\u542f\u52a8\u592a\u6162\u7684\u95ee\u9898\uff0c\u8fd9\u4e9b\u5e74\u6765\u7531 Google \u7275\u5934\u4e5f\u505a\u4e86\u4e0d\u5c11\u8c03\u6574\u3002 BBR \u5728\u6b64\u4e5f\u505a\u4e86\u4e00\u4e9b\u4f18\u5316\uff0c\u5c06\u6162\u542f\u52a8\u6539\u6210\u4e86\u4e24\u5206\u67e5\u627e\u6cd5\uff0c\u8fd9\u6837\u7406\u8bba\u4e0a\u80fd\u591f\u52a0\u5feb BBR \u7684\u6162\u542f\u52a8\u8fc7\u7a0b\u3002","title":"\u6162\u542f\u52a8\u8fc7\u7a0b\u592a\u6162\u3002"},{"location":"chapter_3/6_tcp/#_7","text":"\u94fe\u8def\u5c42\u8d8a\u6765\u8d8a\u590d\u6742\uff0c\u79cd\u7c7b\u8d8a\u6765\u8d8a\u591a\uff08WiFi\uff0c4G \u7b49\u94fe\u8def\u5c42\u5728\u8fd9\u4e9b\u5e74\u8d8a\u6765\u8d8a\u666e\u904d\uff09\uff0c\u5e26\u5bbd\u8d8a\u6765\u8d8a\u5927\uff0c\u4f20\u8f93\u8ddd\u79bb\u8d8a\u6765\u8d8a\u8fdc\uff0c\u5bfc\u81f4\u975e\u62e5\u585e\u539f\u56e0\u5bfc\u81f4\u7684\u4e22\u5305\u8d8a\u6765\u8d8a\u591a\uff08\u4f8b\u5982\u4fe1\u53f7\u8870\u51cf\u5bfc\u81f4\u4e22\u5305\uff0c\u4f20\u8f93\u8fc7\u7a0b\u53d1\u751f\u9519\u8bef\u5305\u6821\u9a8c\u4e0d\u901a\u8fc7\u5bfc\u81f4\u4e22\u5305\u7b49\uff09\u3002 \u4f20\u7edf\u7684\u62e5\u585e\u7b97\u6cd5\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u9519\u8bef\u5730\u5c06\u6ed1\u52a8\u7a97\u53e3\u8c03\u5c0f\uff0c\u4e25\u91cd\u7684\u51cf\u6162\u5305\u91cd\u4f20\u7684\u901f\u7387\uff0c\u5bfc\u81f4\u4e22\u5305\u5bfc\u81f4\u7684\u7f51\u7edc\u8d28\u91cf\u52a3\u5316\u88ab\u6781\u5927\u5730\u653e\u5927\u3002 \u5982\u679c\u4e00\u4e2a\u7f51\u7edc\u56e0\u4e3a\u975e\u62e5\u585e\u539f\u56e0\uff08\u4f8b\u5982 4G \u4fe1\u53f7\u8f83\u5f31\uff09\u5bfc\u81f4\u4e22\u5305 10%\uff0c\u90a3\u4e48\u5c06\u4f1a\u6709 10% \u7684\u5305\u88ab\u91cd\u4f20\uff0c\u5982\u679c\u6ed1\u52a8\u7a97\u53e3\u4e0d\u53d8\u7684\u8bdd\u90a3\u4e48\u7406\u8bba\u4e0a\u6765\u8bf4\u4f20\u8f93\u901f\u5ea6\u4f1a\u53d8\u4e3a\u4e0d\u4e22\u5305\u7f51\u7edc\u7684 90% \u5de6\u53f3\u3002\u4f46\u662f\u5b9e\u9645\u4e0a\u7531\u4e8e\u6ed1\u52a8\u7a97\u53e3\u7684\u6539\u53d8\uff0c10% \u7684\u4e22\u5305\u5f80\u5f80\u4f1a\u5bfc\u81f4\u603b\u7684\u4f20\u8f93\u901f\u5ea6\u964d\u4f4e\u4e3a\u51e0\u4e4e\u4e3a\u96f6\uff0c\u7f51\u7edc\u8fd1\u4e4e\u4e8e\u4e0d\u53ef\u7528\u3002 \u8fd9\u4e2a\u95ee\u9898\u5728\u79fb\u52a8\u7f51\u7edc\u5f00\u59cb\u5e7f\u6cdb\u4f7f\u7528\uff08\u4e5f\u5c31\u662f\u6700\u8fd1\u51e0\u5e74\u7684\u65f6\u95f4\uff09\u624d\u53d8\u5f97\u8d8a\u6765\u8d8a\u4e25\u91cd\u3002\u4e4b\u524d\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u6700\u597d\u7684\u7b97\u6cd5\u662f Vegas \u548c LEDBAT\uff0c\u4f46\u662f\u8fd9\u4e24\u4e2a\u7b97\u6cd5\u6709\u4e2a\u5f88\u5927\u7684\u7f3a\u70b9\uff0c\u5c31\u662f\u5728\u548c\u57fa\u4e8e\u4e22\u5305\u7684\u7b97\u6cd5\u5171\u4eab\u7f51\u7edc\uff0c\u53d1\u751f\u7ade\u4e89\u7684\u60c5\u51b5\u4e0b\uff0c\u5f80\u5f80\u4f1a\u88ab\u997f\u6b7b\uff0c\u5bfc\u81f4\u65e0\u6cd5\u63a8\u5e7f\uff0c\u76ee\u524d\u4ec5\u4ec5\u7528\u4e8e\u4e00\u4e9b\u4f18\u5148\u7ea7\u8f83\u4f4e\u7684\u7f51\u7edc\u73af\u5883\u3002Vegas \u7b97\u6cd5\u76ee\u524d\u4e3b\u8981\u7528\u4e8e BT \u4f20\u8f93\uff0c\u82f9\u679c\u4f7f\u7528 LEDBAT \u7b97\u6cd5\u7528\u4e8e\u8f6f\u4ef6\u66f4\u65b0\u548c\u4e0b\u8f7d\u3002","title":"\u4f7f\u7528\u4e22\u5305\u4f5c\u4e3a\u5224\u65ad\u62e5\u585e\u7684\u552f\u4e00\u4f9d\u636e\u3002"},{"location":"chapter_3/6_tcp/#buffer","text":"\u5728\u94fe\u8def\u5c42\uff0c\u7f51\u7edc\u7684\u5e26\u5bbd\u5e76\u4e0d\u662f\u5e73\u7a33\u7684\u4e00\u6210\u4e0d\u53d8\u7684\uff0c\u800c\u662f\u65f6\u5e38\u4f1a\u51fa\u73b0\u77ac\u53d1\u7684\u4f20\u8f93\u9ad8\u5cf0\u3002\u4e3a\u4e86\u8fd9\u4e9b\u4f20\u8f93\u9ad8\u5cf0\u6269\u5927\u5e26\u5bbd\u662f\u6ca1\u6709\u6027\u4ef7\u6bd4\u7684\uff0c\u540c\u65f6\u589e\u52a0\u5c11\u91cf\u5ef6\u65f6\u5728\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u90fd\u6bd4\u4e22\u5305\u4ee3\u4ef7\u8981\u5c0f\u5f97\u591a\uff0c\u56e0\u6b64\u94fe\u8def\u5c42\u666e\u904d\u7684\u505a\u6cd5\u662f\u4f7f\u7528 buffer \u5c06\u8fd9\u4e9b\u9ad8\u5cf0\u62b9\u5e73\uff0c\u7528\u589e\u52a0\u8fd9\u4e9b\u9ad8\u5cf0\u5305\u7684\u5ef6\u65f6\u4e3a\u4ee3\u4ef7\uff0c\u907f\u514d\u4e22\u5305\u3002 \u4f46\u662f\u7531\u4e8e TCP \u7684\u62e5\u585e\u7b97\u6cd5\u4f7f\u7528\u4e22\u5305\u4f5c\u4e3a\u94fe\u8def\u662f\u5426\u62e5\u585e\u7684\u5224\u65ad\u4f9d\u636e\uff0cTCP \u4f20\u8f93\u8fc7\u7a0b\u4e2d\u4f1a\u4e0d\u65ad\u5730\u589e\u52a0\u5e26\u5bbd\u76f4\u5230\u94fe\u8def\u5c42\u7684 buffer \u88ab\u586b\u6ee1\u5f00\u59cb\u4e22\u5305\u4e3a\u6b62\u3002\u8fd9\u4f7f\u5f97\u94fe\u8def\u5c42\u7684 buffer \u5b8c\u5168\u5931\u53bb\u5176\u610f\u4e49\uff0c\u53ea\u5269\u4e0b\u4e86\u589e\u52a0\u6240\u6709\u4f20\u8f93\u5305\u7684\u5ef6\u65f6\u7684\u526f\u4f5c\u7528\u3002\u94fe\u8def\u5c42\u4e0d\u5f97\u4e0d\u51cf\u5c0f\u751a\u81f3\u5b8c\u5168\u4e0d\u4f7f\u7528 buffer\uff0c\u4ece\u800c\u4e0d\u80fd\u5f88\u597d\u5730\u5904\u7406\u6d41\u91cf\u7684\u7a81\u53d1\u9ad8\u5cf0\u3002\u8fd9\u88ab\u79f0\u4e3a\u662f bufferbloat \u95ee\u9898\uff0c\u8be5\u95ee\u9898\u5e7f\u6cdb\u5b58\u5728\u4e8e\u73b0\u5728\u7684\u51e0\u4e4e\u6240\u6709\u94fe\u8def\u5c42\u7f51\u7edc\u4e2d\u3002 \u5728 BBR \u51fa\u73b0\u4e4b\u524d\uff0c\u8fd8\u5b8c\u5168\u6ca1\u6709\u5728 TCP \u5c42\u9762\u8003\u8651\u548c\u89e3\u51b3 bufferbloat \u95ee\u9898\u7684\u5148\u4f8b\uff08\u867d\u7136\u8fd9\u4e2a\u95ee\u9898\u662f\u7531 TCP \u5f15\u8d77\u7684\uff09\u3002\u4e4b\u524d\u89e3\u51b3 bufferbloat\uff0c\u9664\u4e86\u51cf\u5c11 buffer \u5927\u5c0f\u4e4b\u5916\uff0c\u66f4\u4e3b\u8981\u7684\u662f\u5728\u94fe\u8def\u5c42\u89e3\u51b3\u95ee\u9898\uff1a\u60f3\u529e\u6cd5\u8bc6\u522b\u51fa\u5bfc\u81f4 bufferbloat \u7684 TCP \u6d41\uff0c\u9650\u5236\u8fd9\u4e9b\u6d41\u4e0d\u4f7f\u7528 buffer \u800c\u662f\u76f4\u63a5\u4e22\u5305\uff0c\u8feb\u4f7f TCP \u6d41\u8c03\u6574\u7a97\u53e3\u5927\u5c0f\u3002 \u5728\u94fe\u8def\u5c42\u89e3\u51b3 bufferbloat \u95ee\u9898\u7684\u6700\u5e38\u89c1\u7684\u4e24\u4e2a\u7b97\u6cd5\u4e3a RED \u548c fq_CoDel\u3002\u5176\u4e2d RED \u56e0\u4e3a\u8fc7\u4e8e\u7b80\u5355\u7c97\u66b4\uff08\u5b8c\u5168\u4e0d\u8bc6\u522b\u54ea\u4e9b\u6d41\u5bfc\u81f4\u4e86 bufferbloat \u800c\u662f\u5728\u53d1\u73b0 bufferbloat \u53d1\u751f\u7684\u65f6\u5019\u8fdb\u884c\u968f\u673a\u4e22\u5305\uff09\u6548\u679c\u4e0d\u597d\uff0c\u867d\u7136\u8def\u7531\u5668\u666e\u904d\u652f\u6301\u4f46\u662f\u5e76\u672a\u5f97\u5230\u5e7f\u6cdb\u5e94\u7528\u3002fq_CoDel \u5219\u662f\u6548\u679c\u975e\u5e38\u597d\u4f46\u662f\u7b97\u6cd5\u590d\u6742\uff0c\u76ee\u524d\u53ea\u6709 Linux \u5b9e\u73b0\uff083.12 \u4ee5\u4e0a\u5185\u6838\uff09\uff0c\u8def\u7531\u5668\u8bbe\u5907\u5c1a\u672a\u5b9e\u73b0\u8be5\u7b97\u6cd5\u3002 systemd 217 \u7248\u672c\u5f00\u59cb\u9ed8\u8ba4\u4f7f\u7528 fq_CoDel \u4ee3\u66ff\u94fe\u8def\u5c42\u4e4b\u524d\u7684\u9ed8\u8ba4\u7b97\u6cd5 pfifo_fast\uff0c\u56e0\u6b64\u4f7f\u7528 systemd \u7684\u53d1\u884c\u7248\uff0c\u4f8b\u5982 ArchLinux\uff0cFedora 22 \u7b49\uff0c\u9ed8\u8ba4\u4f7f\u7528 fq_CoDel\u3002\u4f46\u662f Debian 8 \u662f systemd 215 \u7248\u672c\u56e0\u6b64\u8fd8\u662f pfifo_fast\u3002 BBR \u7684\u51fa\u73b0\uff0c\u7406\u8bba\u4e0a\u53ef\u4ee5\u5927\u5927\u51cf\u5c11 bufferboloat \u95ee\u9898\uff0c\u56e0\u4e3a BBR \u4f1a\u7cbe\u786e\u8ba1\u7b97\u603b\u5e26\u5bbd\uff0c\u56e0\u6b64\u7edd\u5927\u591a\u6570\u65f6\u95f4\uff08\u9664\u4e86\u6162\u542f\u52a8\u8fc7\u7a0b\u4e2d\u7684\u4e00\u5c0f\u6bb5\u77ed\u6682\u65f6\u95f4\uff09\u4e0d\u4f1a\u7528\u5230 buffer\u3002","title":"\u6ca1\u6709\u8003\u8651\u5230\u94fe\u8def\u5c42 buffer \u7684\u95ee\u9898\u3002"},{"location":"chapter_3/6_tcp/#_8","text":"\u5e26\u5bbd\u65f6\u5ef6\u4e58\u79ef\u8868\u793a\u5e26\u5bbd\u548c\u5ef6\u65f6\u7684\u4e58\u79ef\u3002\u9ad8\u5e26\u5bbd\u65f6\u5ef6\u4e58\u79ef\u7684\u7f51\u7edc\u88ab\u79f0\u4e3a\u957f\u80d6\u7f51\u7edc\u3002\u5178\u578b\u7684\u957f\u80d6\u7f51\u7edc\u5305\u62ec\u536b\u661f\u7f51\u7edc\uff0c\u4ee5\u53ca\u4e2d\u7f8e\u4e4b\u95f4\u7684\u6d77\u5e95\u5149\u7f06\u7b49\uff0c\u7279\u70b9\u662f\u5e26\u5bbd\u6781\u9ad8\u4f46\u662f\u5ef6\u65f6\u8f83\u5927\u3002 \u5982\u679c\u8981\u5408\u7406\u5229\u7528\u957f\u80d6\u7f51\u7edc\u7684\u9ad8\u5e26\u5bbd\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bfc\u81f4\u5df2\u7ecf\u53d1\u9001\u51fa\u53bb\u4f46\u662f\u8fd8\u6ca1\u6709\u6536\u5230 ACK \u7684\u5305\u975e\u5e38\u591a\uff0c\u4ece\u800c\u9700\u8981\u975e\u5e38\u5927\u7684\u7a97\u53e3\u5927\u5c0f\u3002Linux 2.6.8 \u5f00\u59cb\uff0c\u542f\u7528\u4e86 net.ipv4.tcp_window_scaling \u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898 \u4f46\u662f\u957f\u80d6\u7f51\u7edc\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u4e00\u76f4\u6ca1\u6709\u5f97\u5230\u5f88\u597d\u7684\u89e3\u51b3\uff0c\u90a3\u5c31\u662f\u4e00\u65e6\u51fa\u73b0\u4e22\u5305\uff0c\u7531\u4e8e\u9ad8\u65f6\u5ef6\u7684\u5f71\u54cd\uff0c\u4f1a\u4f7f\u5f97\u6ed1\u52a8\u7a97\u53e3\u4f1a\u7f29\u5c0f\u5f97\u8fc7\u5c0f\uff0c\u5b8c\u5168\u65e0\u6cd5\u5229\u7528\u5230\u9ad8\u5e26\u5bbd\u7684\u4f18\u52bf\u3002\u8fd9\u662f\u56e0\u4e3a\u4f20\u7edf\u7684\u62e5\u585e\u63a7\u5236\u7b97\u6cd5\u7684\u5e26\u5bbd\u589e\u52a0\u662f\u7ebf\u6027\u7684\uff0c\u800c\u5e26\u5bbd\u51cf\u5c11\u662f\u975e\u7ebf\u6027\u7684\uff0c\u9519\u8bef\u4e22\u5305\u7387\u548c\u53d1\u9001\u7a97\u53e3\u662f\u5e73\u65b9\u53cd\u6bd4\u5173\u7cfb\u3002\u8fd9\u4f7f\u5f97\u957f\u80d6\u7f51\u7edc\u4e0b\uff0c\u54ea\u6015\u5e26\u5bbd\u975e\u5e38\u5bcc\u88d5\uff0c\u53ea\u8981\u51fa\u73b0\u4e00\u70b9\u70b9\u4e22\u5305\uff0c\u901f\u5ea6\u5c31\u4f1a\u53d8\u5f97\u975e\u5e38\u6162\u3002 \u5173\u4e8e\u957f\u80d6\u7f51\u7edc\uff0c\u6700\u6838\u5fc3\u7684\u5728\u4e8e\u4f18\u5316\u6ed1\u52a8\u7a97\u53e3\u6536\u655b\u901f\u7387 \u3002\u9664\u4e86 BBR \u4e4b\u5916\uff0c\u76ee\u524d\u5927\u90e8\u5206\u8003\u8651\u5230\u7a97\u53e3\u6536\u655b\u901f\u7387\u4f18\u5316\u7684\u7b97\u6cd5\u90fd\u4f7f\u7528\u4e86\u4fe1\u53f7\uff0c\u56e0\u6b64\u975e\u5e38\u96be\u4ee5\u63a8\u5e7f\u3002","title":"\u7f3a\u4e4f\u5bf9\u9ad8\u5e26\u5bbd\u65f6\u5ef6\u4e58\u79ef\u7f51\u7edc\u4e2d\u4e22\u5305\u7684\u4f18\u5316"},{"location":"chapter_3/6_tcp/#bbr_1","text":"TCP \u62e5\u585e\u63a7\u5236\u7b97\u6cd5\u5728\u7f51\u7edc\u4e2d\u5360\u636e\u91cd\u8981\u5730\u4f4d\uff0c\u5728 BBR \u7b97\u6cd5\u51fa\u6765\u4e4b\u524d\uff0c\u5927\u90e8\u5206\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u7684\u62e5\u585e\u63a7\u5236\u7b97\u6cd5\u7ecf\u8fc7\u597d\u51e0\u4ee3\u7684\u66f4\u65b0\uff0c\u6700\u540e\u5927\u591a\u90fd\u662f\u91c7\u7528 Cubic . Bottleneck Bandwidth and Round-trip propagation time (BBR) is a CCA developed at Google in 2016.[25] While most CCAs are loss-based, in that they rely on packet loss to detect congestion and lower rates of transmission, BBR, like TCP Vegas, is model-based. The algorithm uses the maximum bandwidth and round-trip time at which the network delivered the most recent flight of outbound data packets to build a model of the network.(BBR \u662f\u4e00\u4e2a\u62e5\u585e\u63a7\u5236\u7b97\u6cd5 congestion control algorithm, 2016 \u7531 Google \u5f00\u53d1. \u5927\u591a\u6570 CCA \u662f\u57fa\u4e8e\u4e22\u5305\u7684\u88ab\u52a8\u63a2\u6d4b\u673a\u5236, \u800c BBR \u662f\u57fa\u4e8e\u6a21\u578b\u7684\u4e3b\u52a8\u63a2\u6d4b\u7b97\u6cd5, \u5f97\u5230\u6700\u5927\u5e26\u5bbd\u548c\u6700\u5c0f\u5ef6\u8fdf\u540e, \u628a 2 \u7740\u4e58\u79ef\u4f5c\u4e3a\u53d1\u9001\u7a97\u53e3) BBR \u5bf9 TCP \u6027\u80fd\u7684\u63d0\u5347\u662f\u5de8\u5927\u7684\uff0c\u5b83\u80fd\u66f4\u6709\u6548\u7684\u4f7f\u7528\u5f53\u4e0b\u7f51\u7edc\u73af\u5883\uff0cYoutube \u5e94\u7528\u540e\u5728\u541e\u5410\u91cf\u4e0a\u6709\u5e73\u5747 4%\u63d0\u5347\uff08\u5bf9\u4e8e\u65e5\u672c\u8fd9\u6837\u7684\u7f51\u7edc\u73af\u5883\u6709 14%\u4ee5\u4e0a\u7684\u63d0\u5347\uff09 \u5728 Linux4.19 \u5185\u6838\u4e2d\u5df2\u7ecf\u5c06\u62e5\u585e\u63a7\u5236\u7b97\u6cd5\u4ece CUBIC\uff08\u8be5\u7b97\u6cd5\u4ece 2.6.19 \u5185\u6838\u5c31\u5f15\u5165 Linux \u4e86\uff09\u6539\u4e3a BBR\uff0c\u57fa\u4e8e UDP \u7684 HTTP3 \u4e5f\u4f7f\u7528\u6b64\u7b97\u6cd5\u3002","title":"BBR \u7b97\u6cd5\u662f\u4ec0\u4e48"},{"location":"chapter_3/6_tcp/#bbr_2","text":"BBR \u662f\u4e00\u4e2a\u5bf9\u957f\u80a5\u7f51\u7edc\u4e0b\u80fd\u591f\u5927\u5927\u63d0\u9ad8\u7f51\u7edc\u6027\u80fd\u7684\u62e5\u585e\u63a7\u5236\u7b97\u6cd5\uff0c\u975e\u5e38\u9002\u5408\u505a\u8de8\u56fd\u5927\u6587\u4ef6\u4e0b\u8f7d\u7684\u7528\u9014\uff0c\u5bf9\u4e8e\u6709\u5927\u91cf\u4e22\u5305\uff08\u4e0d\u80fd\u8d85\u8fc7 20% \u4e22\u5305\uff09\u7684\u73af\u5883\u4e0b\u4e5f\u80fd\u5927\u5927\u63d0\u9ad8\u7f51\u7edc\u901f\u5ea6\u3002 \u5176\u5ffd\u7565\u4e22\u5305\u7684\u7279\u6027\u5728\u9ad8\u4e22\u5305\uff0c\u9ad8\u65f6\u5ef6\u7684\u60c5\u51b5\u4e0b\uff0c\u80fd\u6781\u5176\u9ad8\u6548\u7684\u63d0\u5347\u5e26\u5bbd\u5229\u7528\u7387\uff0c\u7279\u522b\u662f\u5927\u6587\u4ef6\u3002 BBR \u662f\u4e0d\u4f7f\u7528\u4fe1\u53f7\u7684\u6240\u6709\u62e5\u585e\u63a7\u5236\u7b97\u6cd5\u4e2d\uff0c\u8f83\u597d\u7684\u4e00\u4e2a\u3002\u5176\u4f18\u70b9\u6709\uff1a \u4f18\u5316\u4e86\u6536\u655b\u901f\u7387\uff0c\u89e3\u51b3\u4e86\u957f\u80d6\u7f51\u7edc\u5e26\u5bbd\u6536\u655b\u4e3a\u8fc7\u5c0f\u7684\u95ee\u9898 \u5b8c\u5168\u4e0d\u4f7f\u7528\u4e22\u5305\u4f5c\u4e3a\u62e5\u585e\u5224\u65ad\u7684\u4f9d\u636e\uff0c\u7cbe\u51c6\u5730\u8ba1\u7b97\u548c\u5229\u7528\u53ef\u7528\u5e26\u5bbd \u89e3\u51b3\u4e86 bufferbloat \u95ee\u9898 \u975e\u62e5\u585e\u7684\u9ad8\u4e22\u5305\u94fe\u8def\u73af\u5883\u4e0b\uff0c\u4e0d\u51cf\u7a97\u53e3\uff0c\u5305\u53ef\u4ee5\u5feb\u901f\u91cd\u4f20\uff0c\u56e0\u6b64\u4f20\u8f93\u6548\u7387\u964d\u4f4e\u4e0d\u660e\u663e\u3002 \u53ef\u4ee5\u6bd4\u8f83\u5feb\u901f\u5730\u8bc6\u522b\u5230\u94fe\u8def\u73af\u5883\u4e0b\u53ef\u7528\u5e26\u5bbd\u6216\u8005\u5ef6\u65f6\u7684\u53d8\u5316\uff0c\u5feb\u901f\u8c03\u6574\u3002 \u540c\u4f20\u7edf\u7b97\u6cd5\u7ade\u4e89\u7f51\u7edc\u7684\u65f6\u5019\u4e0d\u5904\u4e8e\u52a3\u52bf \u66f4\u5feb\u7684\u6162\u542f\u52a8\u8fc7\u7a0b \u5728\u6570\u636e\u4e2d\u5fc3\u5185\u7f51\u60c5\u51b5\u4e0b\uff0c\u4f4e\u5ef6\u8fdf\uff0c\u51e0\u4e4e\u65e0\u4e22\u5305\u7684\u60c5\u51b5\u4e0b\uff0c\u8ddf cubic \u76f8\u6bd4\u57fa\u672c\u6ca1\u6709\u6548\u679c\uff0c\u4e14\u53ef\u80fd\u7531\u4e8e\u7b97\u6cd5\u95ee\u9898\uff0c\u5360\u7528\u8f83\u591a cpu.","title":"BBR \u7b97\u6cd5\u7684\u4f18\u52bf"},{"location":"chapter_3/6_tcp/#bbr_3","text":"\u4fee\u6539\u5185\u6838\u53c2\u6570 \u5f00\u542f\uff1a sysctl -w net.core.default_qdisc=fq sysctl -w net.ipv4.tcp_congestion_control=bbr","title":"\u5982\u4f55\u5229\u7528 BBR \u7b97\u6cd5\u4f18\u52bf"},{"location":"chapter_3/6_tcp/#tfo","text":"\u4e00\u4e2a TCP \u4f18\u5316\u7b56\u7565\u53eb TCP Fast Open\uff08TFO\uff09, \u5141\u8bb8 tcp \u4e09\u6b21\u63e1\u624b\u65f6\uff0c\u7b2c\u4e09\u4e2a\u5305\u4e2d\uff0c\u76f4\u63a5\u5305\u542b\u5e94\u7528\u5c42\u7684\u6570\u636e, \u4f46\u662f\u4e0d\u5141\u8bb8\u8d85\u8fc7 MSS. TFO \u7684\u4f5c\u7528\u662f\u7528\u6765\u4f18\u5316 TCP \u63e1\u624b\u8fc7\u7a0b\u3002\u5ba2\u6237\u7aef\u7b2c\u4e00\u6b21\u5efa\u7acb\u8fde\u63a5\u8fd8\u662f\u8981\u8d70\u4e09\u6b21\u63e1\u624b\uff0c\u6240\u4e0d\u540c\u7684\u662f\u5ba2\u6237\u7aef\u5728\u7b2c\u4e00\u4e2a SYN \u4f1a\u8bbe\u7f6e\u4e00\u4e2a Fast Open \u6807\u8bc6\uff0c\u670d\u52a1\u7aef\u4f1a\u751f\u6210 Fast Open Cookie \u5e76\u653e\u5728 SYN-ACK \u91cc\uff0c\u7136\u540e\u5ba2\u6237\u7aef\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e2a Cookie \u5b58\u8d77\u6765\u4f9b\u4e4b\u540e\u7684 SYN \u7528\u3002\u4e0b\u9762\u8fd9\u4e2a\u56fe\u5f62\u8c61\u5730\u63cf\u8ff0\u4e86\u8fd9\u4e2a\u8fc7\u7a0b\uff1a \u5173\u4e8e TCP Fast Open \u7684\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u67e5\u770b RFC7413 .","title":"TFO"},{"location":"chapter_3/6_tcp/#tsoufogsogro","text":"","title":"TSO/UFO/GSO/GRO"},{"location":"chapter_3/6_tcp/#tso","text":"","title":"TSO \u662f\u4ec0\u4e48"},{"location":"chapter_3/6_tcp/#_9","text":"\u7f51\u7edc\u5c42\u53d1\u9001\u548c\u63a5\u6536\u5927\u6570\u636e\u5305\u573a\u666f,\u5229\u7528\u7f51\u5361\u6765\u5bf9\u5927\u6570\u636e\u5305\u8fdb\u884c\u81ea\u52a8\u5206\u6bb5\uff0c\u964d\u4f4e CPU \u8d1f\u8f7d\u7684\u6280\u672f. \u5047\u8bbe\u6211\u4eec\u8981\u4f20\u8f93\u4e00\u4e2a 20M \u7684\u6570\u636e\uff0c\u56e0\u4e3a MTU \u7684\u5b58\u5728\uff0c\u6211\u4eec\u6bcf\u6b21\u6700\u591a\u4f20\u8f93 1500-20 = 1480 bytes\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5c06\u6570\u636e\u5206\u5272\u6210 N \u4efd 1480 bytes\uff0c\u90a3\u4e48\u5982\u679c\u8fd9\u4e2a\u5de5\u4f5c\u8ba9 CPU \u6765\u505a\uff0c\u6709\u70b9\u6d6a\u8d39 CPU \u7684\u8d44\u6e90\uff0c\u4e8e\u662f\u5c31\u51fa\u73b0\u4e86 TSO\uff0c\u76f4\u63a5\u5c06\u6570\u636e\u4ea4\u7ed9\u7f51\u5361\u9a71\u52a8\uff0c\u8ba9\u7f51\u5361\u9a71\u52a8\u53bb\u5b8c\u6210\u5206\u5272\u5de5\u4f5c\uff0c\u4ece\u800c\u8fbe\u5230\u51cf\u8f7b CPU \u5de5\u4f5c\u7684\u76ee\u7684.","title":"\u5e94\u7528\u573a\u666f"},{"location":"chapter_3/6_tcp/#_10","text":"TSO(TCP Segmentation Offload)\uff0c\u662f\u4e00\u79cd\u5229\u7528\u7f51\u5361\u5bf9 TCP \u6570\u636e\u5305\u5206\u7247\uff0c\u51cf\u8f7b CPU \u8d1f\u8377\u7684\u4e00\u79cd\u6280\u672f\uff0c\u6709\u65f6\u4e5f\u88ab\u53eb\u505a LSO (Large segment offload) \uff0cTSO \u662f\u9488\u5bf9 TCP \u7684\uff0cUFO \u662f\u9488\u5bf9 UDP \u7684\u3002\u5982\u679c\u786c\u4ef6\u652f\u6301 TSO \u529f\u80fd\uff0c\u540c\u65f6\u4e5f\u9700\u8981\u786c\u4ef6\u652f\u6301\u7684 TCP \u6821\u9a8c\u8ba1\u7b97\u548c\u5206\u6563/\u805a\u96c6 (Scatter Gather) \u529f\u80fd\u3002 TSO \u9700\u8981\u7f51\u7edc\u8bbe\u5907\u786c\u4ef6\u652f\u6301, \u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u5ef6\u8fdf\u5206\u6bb5\u6280\u672f\uff0c\u5ef6\u8fdf\u5206\u6bb5\u4f1a\u51cf\u5c11\u53d1\u9001\u8def\u5f84\u4e0a\u7684\u6570\u636e\u62f7\u8d1d\u64cd\u4f5c\uff0c\u6240\u4ee5\u5373\u4f7f\u7f51\u7edc\u8bbe\u5907\u4e0d\u652f\u6301 TSO\uff0c\u53ea\u8981\u80fd\u591f\u5ef6\u8fdf\u5206\u6bb5\u4e5f\u662f\u6709\u6536\u76ca\u7684\uff0c\u800c\u4e14\u4e5f\u4e0d\u4ec5\u4ec5\u9650\u4e8e TCP\uff0c\u5bf9\u4e8e\u5176\u5b83 L4 \u534f\u8bae\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u8fd9\u5c31\u884d\u751f\u51fa\u4e86 GSO(Generic Segmentation Offload) GSO(Generic Segmentation Offload)\uff0c\u5b83\u6bd4 TSO \u66f4\u901a\u7528\uff0c\u57fa\u672c\u601d\u60f3\u5c31\u662f\u5c3d\u53ef\u80fd\u7684\u63a8\u8fdf\u6570\u636e\u5206\u7247\u76f4\u81f3\u53d1\u9001\u5230\u7f51\u5361\u9a71\u52a8\u4e4b\u524d\uff0c\u6b64\u65f6\u4f1a\u68c0\u67e5\u7f51\u5361\u662f\u5426\u652f\u6301\u5206\u7247\u529f\u80fd\uff08\u5982 TSO\u3001UFO\uff09,\u5982\u679c\u652f\u6301\u76f4\u63a5\u53d1\u9001\u5230\u7f51\u5361\uff0c\u5982\u679c\u4e0d\u652f\u6301\u5c31\u8fdb\u884c\u5206\u7247\u540e\u518d\u53d1\u5f80\u7f51\u5361\u3002\u8fd9\u6837\u5927\u6570\u636e\u5305\u53ea\u9700\u8d70\u4e00\u6b21\u534f\u8bae\u6808\uff0c\u800c\u4e0d\u662f\u88ab\u5206\u5272\u6210\u51e0\u4e2a\u6570\u636e\u5305\u5206\u522b\u8d70\uff0c\u8fd9\u5c31\u63d0\u9ad8\u4e86\u6548\u7387\u3002 UFO(Udp Fragmentation Offload), \u662f\u9488\u5bf9 UDP \u534f\u8bae\u7684\u5ef6\u8fdf\u5206\u6bb5\u6280\u672f, \u9700\u8981\u7f51\u5361\u652f\u6301. LRO(Large Receive Offload)\uff0c\u901a\u8fc7\u5c06\u63a5\u6536\u5230\u7684\u591a\u4e2a TCP \u6570\u636e\u805a\u5408\u6210\u4e00\u4e2a\u5927\u7684\u6570\u636e\u5305\uff0c\u7136\u540e\u4f20\u9012\u7ed9\u7f51\u7edc\u534f\u8bae\u6808\u5904\u7406\uff0c\u4ee5\u51cf\u5c11\u4e0a\u5c42\u534f\u8bae\u6808\u5904\u7406 \u5f00\u9500\uff0c\u63d0\u9ad8\u7cfb\u7edf\u63a5\u6536 TCP \u6570\u636e\u5305\u7684\u80fd\u529b\u3002 GRO(Generic Receive Offload)\uff0c\u57fa\u672c\u601d\u60f3\u8ddf LRO \u7c7b\u4f3c\uff0c\u514b\u670d\u4e86 LRO \u7684\u4e00\u4e9b\u7f3a\u70b9\uff0c\u66f4\u901a\u7528\u3002\u540e\u7eed\u7684\u9a71\u52a8\u90fd\u4f7f\u7528 GRO \u7684\u63a5\u53e3\uff0c\u800c\u4e0d\u662f LRO\u3002","title":"\u6b63\u89c4\u89e3\u91ca"},{"location":"chapter_3/6_tcp/#gsogro","text":"\u5f00\u542f TSO root@liqiang.io:~# ethtool -K eth0 tso on root@liqiang.io:~# ethtool -K eth0 gso on \u6ce8\u610f\uff0c\u8fd9\u91cc\u6ca1\u6709\u5f00\u542f gso\uff0c\u53ea\u5f00\u542f tso \u662f\u6ca1\u7528\u7684\uff0c\u56e0\u4e3a\u53ea\u6709\u5f00\u542f\u4e86 gso \u624d\u4f1a\u68c0\u6d4b\u662f\u5426\u652f\u6301 tso\u3002 \u5173\u95ed TSO root@liqiang.io:~# ethtool -K eth0 tso off root@liqiang.io:~# ethtool -K eth0 gso off","title":"\u5982\u4f55\u5f00\u542f\u548c\u5173\u95ed GSO/GRO"},{"location":"chapter_3/6_tcp/#tsotro","text":"\u597d\u5904\u662f\uff0c \u534f\u8bae\u6808\u8fd9\u4e00\u5c42\u65e0\u9700\u5206\u6bb5\uff0c\u7f51\u5361\u81ea\u52a8\u5e2e\u5fd9\u5206\u6bb5\uff0c\u964d\u4f4e\u4e86 CPU \u8d1f\u8f7d. \u574f\u5904\u662f\uff0ctcpdump \u65f6\uff0c\u770b\u5230\u7684\u6570\u636e\u5305\u4f1a\u53d8\u5c11. \u4e3a\u4ec0\u4e48\u4f1a\u53d8\u5c11, \u539f\u7406\u662f\u56e0\u4e3a\u5185\u6838\u6536\u5305\u8def\u5f84: netif_receve_skb(\u76f8\u5173\u7c7b\u4f3c\u51fd\u6570) \u2014> tcpdump\u5de5\u4f5c \u2014> deliver_skb \u2014> ip_rcv --> netfilter/iptables --> tcp_v4_rcv","title":"\u5f00\u542f\u4e86 TSO/TRO \u4e4b\u540e\uff0c\u6709\u4ec0\u4e48\u526f\u4f5c\u7528"},{"location":"chapter_3/6_tcp/#tcp-keepalived","text":"","title":"TCP \u5c42\u9762\u7684 keepalived \u673a\u5236"},{"location":"chapter_3/6_tcp/#keepalive","text":"1 \u5728\u4e00\u4e2a\u5df2\u7ecf\u5b8c\u6210\u8fde\u63a5\u5efa\u7acb\u7684 tcp \u8fde\u63a5\u4e2d\uff0c\u5982\u679c 2 \u7aef\u6ca1\u6709\u4efb\u4f55\u6570\u636e\u4f20\u8f93\uff1b \u6b64\u65f6\u5b83\u662f\u4e00\u4e2a\u7a7a\u95f2\uff08idle\uff09\u7684 tcp \u8fde\u63a5\u3002\u4f46\u662f\u6b64\u65f6\u5ba2\u6237\u7aef\u53ef\u80fd\u7531\u4e8e\u5404\u79cd\u539f\u56e0\u6302\u4e86\uff0c\u6bd4\u5982\u4e2d\u95f4\u5c42\u7684\u8def\u7531\u5668\u6302\u4e86\uff0c\u6216\u8005\u5ba2\u6237\u7aef\u672c\u8eab\u610f\u5916\u9000\u51fa\u7b49\u7b49\uff0c\u6b64\u65f6\u670d\u52a1\u5668\u5e76\u4e0d\u77e5\u9053\u3002 2 \u5e94\u7528\u5c42\u6ca1\u6709\u63a2\u6d3b\u673a\u5236\uff1b \u4f46\u662f tcp \u5c42\u53ef\u4ee5\u6709\u63a2\u6d3b\u673a\u5236\uff0ckeepalive \u5b9a\u65f6\u5668\u5c31\u662f\u8fd9\u4e48\u4e2a\u63a2\u6d3b\u673a\u5236\uff1b \u6bd4\u5982\u670d\u52a1\u5668\u60f3\u77e5\u9053\u5ba2\u6237\u7aef\u662f\u5426\u8fd8\u5b58\u6d3b.","title":"\u4ec0\u4e48\u662f keepalive \u5b9a\u65f6\u5668\uff1f"},{"location":"chapter_3/6_tcp/#linux-keepalive","text":"\u5728 socket()\u7cfb\u7edf\u8c03\u7528\u65f6\u5f00\u542f SO_KEEPALIVE \u9009\u9879 \u4f7f\u7528 setsockopt()\u7cfb\u7edf\u8c03\u7528\u5f00\u542f SO_KEEPALIVE \u6211\u4eec\u770b\u4e0b python \u4e0b\u7684\u5b9e\u73b0 import socket from socket import SO_KEEPALIVE,SOL_SOCKET sk = socket.socket() sk.setsockopt(SOL_SOCKET,SO_KEEPALIVE,1122) >>> sk.getsockopt(SOL_SOCKET,SO_KEEPALIVE) 1 \u2014> \u8fd9\u91cc\u8fd4\u56de\u503c\u662f 1\uff0c\u8868\u793a\u5f00\u542f\u4e86 SO_KEEPALIVE \u9009\u9879","title":"Linux \u4e0b\u5982\u4f55\u5f00\u542f keepalive"},{"location":"chapter_3/6_tcp/#_11","text":"net.ipv4.tcp_keepalive_time = 180 \u8fd9\u4e2a\u5185\u6838\u53c2\u6570\u8868\u793a\uff0c\u4e00\u65e6 tcp \u8fde\u63a5\u5f00\u59cb\u7a7a\u95f2\uff0c\u90a3\u4e48\u591a\u5c11\u79d2\u4e4b\u540e\u5f00\u59cb\u53d1\u9001 keepalive \u6570\u636e\u5305\u3002 net.ipv4.tcp_keepalive_intvl = 10 \u8fd9\u4e2a\u5185\u6838\u53c2\u6570\u8868\u793a\uff0c\u7b2c\u4e00\u6b21\u6267\u884c keepalive \u63a2\u6d3b\u4e4b\u540e\uff0c\u5047\u8bbe\u5bf9\u65b9\u6ca1\u6709\u56de\u5e94\uff0c\u90a3\u4e48\u540e\u9762\u7684\u6267\u884c\u64cd\u4f5c\u9700\u8981\u95f4\u9694\u591a\u5c11\u79d2\uff1b\u8fd9\u91cc\u662f\u6bcf 10 \u79d2\u8fdb\u884c\u4e00\u6b21 tcp \u63a2\u6d3b net.ipv4.tcp_keepalive_probes = 9 \u8fd9\u4e2a\u5185\u6838\u53c2\u6570\u8868\u793a\uff0c\u5982\u679c\u672c\u673a\u53d1\u9001\u4e86 tcp \u63a2\u6d3b\u5305\uff0c\u5bf9\u65b9\u6ca1\u6709\u4efb\u4f55\u56de\u5e94\uff0c\u90a3\u4e48\u6700\u591a\u5c1d\u8bd5\u51e0\u6b21\u63a2\u6d3b\u3002\u8fd9\u91cc\u662f 9 \u6b21. \u4e5f\u662f\u5c31\u662f\u6fc0\u6d3b\u4e86 SO_KEEPALIVE \u9009\u9879\u540e\uff0c\u5982\u679c 2 \u8fb9\u6ca1\u6709\u6570\u636e\u4f20\u8f93\uff0c\u90a3\u4e48 180 \u79d2\u540e\uff0c\u5185\u6838\u5c31\u4f1a\u81ea\u52a8\u8fdb\u884c\u5b58\u6d3b\u63a2\u6d4b\uff0c\u5982\u679c\u7b2c\u4e00\u6b21\u6267\u884c keepalive \u63a2\u6d3b\u4e4b\u540e\uff0c\u5bf9\u65b9\u6ca1\u6709\u54cd\u5e94\uff0c\u90a3\u4e48\u4e4b\u540e\u662f\u6bcf\u95f4\u9694 10 \u79d2\u6267\u884c\u4e00\u6b21\uff0c\u5982\u679c 9 \u6b21\u63a2\u6d3b\u90fd\u5931\u8d25\u4e86\uff0c\u90a3\u4e48 kernel \u5c06\u5411\u5e94\u7528\u5c42\u53cd\u9988\uff0c\u5bf9\u65b9\u5df2\u7ecf\u6302\u4e86\u3002","title":"\u76f8\u5173\u5185\u6838\u53c2\u6570"},{"location":"chapter_3/6_tcp/#_12","text":"\u6700\u591a\u80fd\u5efa\u7acb\u591a\u5c11\u4e2a TCP \u8fde\u63a5 . \u4e00\u53f0 Linux \u670d\u52a1\u5668\u6700\u591a\u80fd\u652f\u6491\u591a\u5c11\u4e2a TCP \u8fde\u63a5 .","title":"\u5176\u4ed6\u6269\u5c55\u9605\u8bfb"},{"location":"chapter_3/6_tcp/#linux-tcp","text":"","title":"Linux \u5185\u6838\u5c42\u9762 TCP \u5bf9\u8c61"},{"location":"chapter_3/6_tcp/#1-inet_connection_sock","text":"struct inet_connection_sock \u4ee3\u8868\u4e00\u4e2a inet socket, \u5176 isck_accept_queue \u6210\u5458\u7528\u4e8e\u7ba1\u7406\u8be5 socket \u7684 \u5168\u8fde\u63a5\u961f\u5217 \u548c \u534a\u8fde\u63a5\u961f\u5217 isck_accept_queue \u6210\u5458\u7684\u5177\u4f53\u5b9e\u73b0\u662f struct request_sock_queue , \u5176\u4e2d struct request_sock \u5bf9\u8c61\u7ec4\u6210\u7684 \u94fe\u8868 \u5373 \u5168\u8fde\u63a5\u961f\u5217 struct lisen_sock \u5bf9\u8c61\u5373 \u534a\u8fde\u63a5\u961f\u5217","title":"1 inet_connection_sock"},{"location":"chapter_3/7_udp/","text":"\u6982\u8ff0 UDP\u662f\u4e00\u79cd\u4e0d\u53ef\u9760\u7684\u3001\u65e0\u8fde\u63a5\u7684\u6570\u636e\u62a5\u670d\u52a1\u3002\u6e90\u4e3b\u673a\u5728\u4f20\u9001\u6570\u636e\u524d\u4e0d\u9700\u8981\u548c\u76ee\u6807\u4e3b\u673a\u5efa\u7acb\u8fde\u63a5\u3002\u6570\u636e\u88ab\u51a0\u4ee5\u6e90\u3001\u76ee\u6807\u7aef\u53e3\u53f7\u7b49UDP\u62a5\u5934\u5b57\u6bb5\u540e\u76f4\u63a5\u53d1\u5f80\u76ee\u7684\u4e3b\u673a\u3002\u8fd9\u65f6\uff0c\u6bcf\u4e2a\u6570\u636e\u6bb5\u7684\u53ef\u9760\u6027\u4f9d\u9760\u4e0a\u5c42\u534f\u8bae\u6765\u4fdd\u8bc1\u3002 \u57fa\u7840 UDP\u62a5\u6587\u5934\u90e8 TCP\u548cUDP\u7684\u533a\u522b TCP/UDP\u90fd\u662f\u662f\u4f20\u8f93\u5c42\u534f\u8bae \uff0c\u4f46\u662f\u4e24\u8005\u5177\u6709\u4e0d\u540c\u7684\u7279\u6027\uff0c\u540c\u65f6\u4e5f\u5177\u6709\u4e0d\u540c\u7684\u5e94\u7528\u573a\u666f\uff0c\u4e0b\u9762\u4ee5\u56fe\u8868\u7684\u5f62\u5f0f\u5bf9\u6bd4\u5206\u6790\u3002 \u9762\u5411\u62a5\u6587 \u9762\u5411\u62a5\u6587\u7684\u4f20\u8f93\u65b9\u5f0f\u662f\u5e94\u7528\u5c42\u4ea4\u7ed9UDP\u591a\u957f\u7684\u62a5\u6587\uff0cUDP\u5c31\u7167\u6837\u53d1\u9001\uff0c\u5373\u4e00\u6b21\u53d1\u9001\u4e00\u4e2a\u62a5\u6587\u3002\u56e0\u6b64\uff0c\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u9009\u62e9\u5408\u9002\u5927\u5c0f\u7684\u62a5\u6587\u3002\u82e5\u62a5\u6587\u592a\u957f\uff0c\u5219IP\u5c42\u9700\u8981\u5206\u7247\uff0c\u964d\u4f4e\u6548\u7387\u3002\u82e5\u592a\u77ed\uff0c\u4f1a\u662fIP\u592a\u5c0f\u3002 \u9762\u5411\u5b57\u8282\u6d41 \u9762\u5411\u5b57\u8282\u6d41\u7684\u8bdd\uff0c\u867d\u7136\u5e94\u7528\u7a0b\u5e8f\u548cTCP\u7684\u4ea4\u4e92\u662f\u4e00\u6b21\u4e00\u4e2a\u6570\u636e\u5757\uff08\u5927\u5c0f\u4e0d\u7b49\uff09\uff0c\u4f46TCP\u628a\u5e94\u7528\u7a0b\u5e8f\u770b\u6210\u662f\u4e00\u8fde\u4e32\u7684\u65e0\u7ed3\u6784\u7684\u5b57\u8282\u6d41\u3002TCP\u6709\u4e00\u4e2a\u7f13\u51b2\uff0c\u5f53\u5e94\u7528\u7a0b\u5e8f\u4f20\u9001\u7684\u6570\u636e\u5757\u592a\u957f\uff0cTCP\u5c31\u53ef\u4ee5\u628a\u5b83\u5212\u5206\u77ed\u4e00\u4e9b\u518d\u4f20\u9001\u3002 RUDP(Reliable UDP) RUDP\u4ecb\u7ecd \u53ef\u9760\u6027UDP\u8bbe\u8ba1\u76ee\u7684\u662f\u89e3\u51b3\uff1a\u5ef6\u8fdf\u95ee\u9898. \u53ef\u9760UDP\u7684\u4e09\u8fb9\u5236\u7ea6\u5173\u7cfb: \u8d28\u91cf, \u65f6\u5ef6, \u6210\u672c .RUDP\u7684\u4e0d\u540c\u5b9e\u73b0\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u4fa7\u91cd\u504f\u5411 RUDP\u7684\u4e09\u4e2a\u5206\u7c7b: \u65e0\u5e8f\u53ef\u9760 \u6709\u5e8f\u53ef\u9760 \u5c3d\u529b\u53ef\u9760 RUDP\u5b9e\u73b0\u4e4bKCP KCP \u662f\u4e00\u4e2a\u5feb\u901f\u53ef\u9760\u4f20\u8f93ARQ(Automatic Repeat-reQuest)\u534f\u8bae\uff0c\u76f8\u6bd4\u4e8eTCP\uff0cKCP\u4ee5\u6d6a\u8d3910%-20%\u7684\u5e26\u5bbd\u4ee3\u4ef7\uff0c\u6362\u53d6\u6bd4TCP\u5feb30%-40%\u7684\u4f20\u8f93\u901f\u5ea6\uff0c\u5e76\u4e14\u6700\u5927\u5ef6\u8fdf\u964d\u4f4e\u4e09\u500d\u7684\u4f20\u8f93\u6548\u679c. KCP\u4e3b\u8981\u5e94\u7528\u573a\u666f: \u7f51\u7edc\u6e38\u620f \u5176\u4ed6\u5e94\u7528\u7ecf\u9a8c \u5feb\u901f\u5f00\u542f\u4e00\u4e2audp\u670d\u52a1 #!/usr/bin/env python # -*- coding: utf-8 -*- from socket import socket, AF_INET, SOCK_DGRAM import time import sys def time_server(address): sock = socket(AF_INET, SOCK_DGRAM) sock.bind(address) while True: msg, addr = sock.recvfrom(8192) print('Got message from', addr) resp = \"[\"+time.ctime()+\"]\" + \" recv msg: {}\".format(msg) print resp sock.sendto(resp.encode('ascii'), addr) if __name__ == '__main__': if len(sys.argv) == 2: time_server(('', int(sys.argv[1]))) else: time_server(('', 4000))","title":"\u7b2c\u4e03\u7bc7 UDP\u534f\u8bae\u603b\u7ed3\u4ee5\u53caTCP\u548cUDP\u7684\u533a\u522b"},{"location":"chapter_3/7_udp/#_1","text":"UDP\u662f\u4e00\u79cd\u4e0d\u53ef\u9760\u7684\u3001\u65e0\u8fde\u63a5\u7684\u6570\u636e\u62a5\u670d\u52a1\u3002\u6e90\u4e3b\u673a\u5728\u4f20\u9001\u6570\u636e\u524d\u4e0d\u9700\u8981\u548c\u76ee\u6807\u4e3b\u673a\u5efa\u7acb\u8fde\u63a5\u3002\u6570\u636e\u88ab\u51a0\u4ee5\u6e90\u3001\u76ee\u6807\u7aef\u53e3\u53f7\u7b49UDP\u62a5\u5934\u5b57\u6bb5\u540e\u76f4\u63a5\u53d1\u5f80\u76ee\u7684\u4e3b\u673a\u3002\u8fd9\u65f6\uff0c\u6bcf\u4e2a\u6570\u636e\u6bb5\u7684\u53ef\u9760\u6027\u4f9d\u9760\u4e0a\u5c42\u534f\u8bae\u6765\u4fdd\u8bc1\u3002","title":"\u6982\u8ff0"},{"location":"chapter_3/7_udp/#_2","text":"UDP\u62a5\u6587\u5934\u90e8","title":"\u57fa\u7840"},{"location":"chapter_3/7_udp/#tcpudp","text":"TCP/UDP\u90fd\u662f\u662f\u4f20\u8f93\u5c42\u534f\u8bae \uff0c\u4f46\u662f\u4e24\u8005\u5177\u6709\u4e0d\u540c\u7684\u7279\u6027\uff0c\u540c\u65f6\u4e5f\u5177\u6709\u4e0d\u540c\u7684\u5e94\u7528\u573a\u666f\uff0c\u4e0b\u9762\u4ee5\u56fe\u8868\u7684\u5f62\u5f0f\u5bf9\u6bd4\u5206\u6790\u3002","title":"TCP\u548cUDP\u7684\u533a\u522b"},{"location":"chapter_3/7_udp/#_3","text":"\u9762\u5411\u62a5\u6587\u7684\u4f20\u8f93\u65b9\u5f0f\u662f\u5e94\u7528\u5c42\u4ea4\u7ed9UDP\u591a\u957f\u7684\u62a5\u6587\uff0cUDP\u5c31\u7167\u6837\u53d1\u9001\uff0c\u5373\u4e00\u6b21\u53d1\u9001\u4e00\u4e2a\u62a5\u6587\u3002\u56e0\u6b64\uff0c\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u9009\u62e9\u5408\u9002\u5927\u5c0f\u7684\u62a5\u6587\u3002\u82e5\u62a5\u6587\u592a\u957f\uff0c\u5219IP\u5c42\u9700\u8981\u5206\u7247\uff0c\u964d\u4f4e\u6548\u7387\u3002\u82e5\u592a\u77ed\uff0c\u4f1a\u662fIP\u592a\u5c0f\u3002","title":"\u9762\u5411\u62a5\u6587"},{"location":"chapter_3/7_udp/#_4","text":"\u9762\u5411\u5b57\u8282\u6d41\u7684\u8bdd\uff0c\u867d\u7136\u5e94\u7528\u7a0b\u5e8f\u548cTCP\u7684\u4ea4\u4e92\u662f\u4e00\u6b21\u4e00\u4e2a\u6570\u636e\u5757\uff08\u5927\u5c0f\u4e0d\u7b49\uff09\uff0c\u4f46TCP\u628a\u5e94\u7528\u7a0b\u5e8f\u770b\u6210\u662f\u4e00\u8fde\u4e32\u7684\u65e0\u7ed3\u6784\u7684\u5b57\u8282\u6d41\u3002TCP\u6709\u4e00\u4e2a\u7f13\u51b2\uff0c\u5f53\u5e94\u7528\u7a0b\u5e8f\u4f20\u9001\u7684\u6570\u636e\u5757\u592a\u957f\uff0cTCP\u5c31\u53ef\u4ee5\u628a\u5b83\u5212\u5206\u77ed\u4e00\u4e9b\u518d\u4f20\u9001\u3002","title":"\u9762\u5411\u5b57\u8282\u6d41"},{"location":"chapter_3/7_udp/#rudpreliable-udp","text":"","title":"RUDP(Reliable UDP)"},{"location":"chapter_3/7_udp/#rudp","text":"\u53ef\u9760\u6027UDP\u8bbe\u8ba1\u76ee\u7684\u662f\u89e3\u51b3\uff1a\u5ef6\u8fdf\u95ee\u9898. \u53ef\u9760UDP\u7684\u4e09\u8fb9\u5236\u7ea6\u5173\u7cfb: \u8d28\u91cf, \u65f6\u5ef6, \u6210\u672c .RUDP\u7684\u4e0d\u540c\u5b9e\u73b0\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u4fa7\u91cd\u504f\u5411 RUDP\u7684\u4e09\u4e2a\u5206\u7c7b: \u65e0\u5e8f\u53ef\u9760 \u6709\u5e8f\u53ef\u9760 \u5c3d\u529b\u53ef\u9760","title":"RUDP\u4ecb\u7ecd"},{"location":"chapter_3/7_udp/#rudpkcp","text":"KCP \u662f\u4e00\u4e2a\u5feb\u901f\u53ef\u9760\u4f20\u8f93ARQ(Automatic Repeat-reQuest)\u534f\u8bae\uff0c\u76f8\u6bd4\u4e8eTCP\uff0cKCP\u4ee5\u6d6a\u8d3910%-20%\u7684\u5e26\u5bbd\u4ee3\u4ef7\uff0c\u6362\u53d6\u6bd4TCP\u5feb30%-40%\u7684\u4f20\u8f93\u901f\u5ea6\uff0c\u5e76\u4e14\u6700\u5927\u5ef6\u8fdf\u964d\u4f4e\u4e09\u500d\u7684\u4f20\u8f93\u6548\u679c. KCP\u4e3b\u8981\u5e94\u7528\u573a\u666f: \u7f51\u7edc\u6e38\u620f","title":"RUDP\u5b9e\u73b0\u4e4bKCP"},{"location":"chapter_3/7_udp/#_5","text":"\u5feb\u901f\u5f00\u542f\u4e00\u4e2audp\u670d\u52a1 #!/usr/bin/env python # -*- coding: utf-8 -*- from socket import socket, AF_INET, SOCK_DGRAM import time import sys def time_server(address): sock = socket(AF_INET, SOCK_DGRAM) sock.bind(address) while True: msg, addr = sock.recvfrom(8192) print('Got message from', addr) resp = \"[\"+time.ctime()+\"]\" + \" recv msg: {}\".format(msg) print resp sock.sendto(resp.encode('ascii'), addr) if __name__ == '__main__': if len(sys.argv) == 2: time_server(('', int(sys.argv[1]))) else: time_server(('', 4000))","title":"\u5176\u4ed6\u5e94\u7528\u7ecf\u9a8c"},{"location":"chapter_3/8_io_multiplexing/","text":"\u6982\u8ff0 IO \u591a\u8def\u590d\u7528\u6280\u672f\uff0c\u672c\u8d28\u4e0a\u662f\u8981\u89e3\u51b3\u5355\u8fdb\u7a0b\u5982\u4f55\u9ad8\u6548\u7684\u76d1\u542c\u591a\u4e2a socket \u8fd9\u4e2a\u95ee\u9898. IO multiplexing \u5c31\u662f\u6211\u4eec\u8bf4\u7684 select\uff0cpoll\uff0cepoll\uff0c\u6709\u4e9b\u5730\u65b9\u4e5f\u79f0\u8fd9\u79cd IO \u65b9\u5f0f\u4e3a event driven IO\u3002select/epoll \u7684\u597d\u5904\u5c31\u5728\u4e8e\u5355\u4e2a process \u5c31\u53ef\u4ee5\u540c\u65f6\u5904\u7406\u591a\u4e2a\u7f51\u7edc\u8fde\u63a5\u7684 IO\u3002\u5b83\u7684\u57fa\u672c\u539f\u7406\u5c31\u662f select\uff0cpoll\uff0cepoll \u8fd9\u4e2a function \u4f1a\u4e0d\u65ad\u7684\u8f6e\u8be2\u6240\u8d1f\u8d23\u7684\u6240\u6709 socket\uff0c\u5f53\u67d0\u4e2a socket \u6709\u6570\u636e\u5230\u8fbe\u4e86\uff0c\u5c31\u901a\u77e5\u7528\u6237\u8fdb\u7a0b\u3002( process blocks in call to select, waiting for one of possibly many sockets to become readable) \u591a\u8def \u662f\u6307\uff1f\u591a\u4e2a\u4e1a\u52a1\u65b9\uff08\u53e5\u67c4\uff09\u5e76\u53d1\u4e0b\u6765\u7684 IO \u590d\u7528 \u662f\u6307\uff1f\u590d\u7528\u8fd9\u4e00\u4e2a\u540e\u53f0\u5904\u7406\u7a0b\u5e8f,\u4e5f\u5c31\u662f\u5355\u7ebf\u7a0b. IO \u591a\u8def\u590d\u7528 \u5c31\u662f 1 \u4e2a\u7ebf\u7a0b\u5904\u7406 \u591a\u4e2a fd \u7684\u6a21\u5f0f \u3002\u6211\u4eec\u7684\u8981\u6c42\u662f\uff1a\u8fd9\u4e2a \u201c1\u201d \u5c31\u8981\u5c3d\u53ef\u80fd\u7684\u5feb\uff0c\u907f\u514d\u4e00\u5207\u65e0\u6548\u5de5\u4f5c\uff0c\u8981\u628a\u6240\u6709\u7684\u65f6\u95f4\u90fd\u7528\u5728\u5904\u7406\u53e5\u67c4\u7684 IO \u4e0a\uff0c\u4e0d\u80fd\u6709\u4efb\u4f55\u7a7a\u8f6c\u6216 sleep \u7684\u65f6\u95f4\u6d6a\u8d39\u3002 \u4e00 \u670d\u52a1\u7aef\u7f51\u7edc\u7f16\u7a0b\u6a21\u578b\u7684\u6f14\u53d8\u8fc7\u7a0b \uff08\u4e00\uff09 \u7b2c\u4e00\u9636\u6bb5 \u7528\u6237\u7a7a\u95f4\u8c03\u7528 fork,\u751f\u6210\u591a worker \u8fdb\u7a0b \u6bcf\u6b21\u90fd\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\u6216\u7ebf\u7a0b\uff0c\u53bb\u8c03\u7528 read \u51fd\u6570\uff0c\u5e76\u505a\u4e1a\u52a1\u5904\u7406\u3002 while(1) { connfd = accept(listenfd); // \u963b\u585e\u5efa\u7acb\u8fde\u63a5 pthread_create\uff08doWork); // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ebf\u7a0b } void doWork() { int n = read(connfd, buf); // \u963b\u585e\u8bfb\u6570\u636e doSomeThing(buf); // \u5229\u7528\u8bfb\u5230\u7684\u6570\u636e\u505a\u4e9b\u4ec0\u4e48 close(connfd); // \u5173\u95ed\u8fde\u63a5\uff0c\u5faa\u73af\u7b49\u5f85\u4e0b\u4e00\u4e2a\u8fde\u63a5 } \u95ee\u9898\u70b9: \u4e3a\u6bcf\u4e2a\u5ba2\u6237\u7aef\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u670d\u52a1\u5668\u7aef\u7684\u7ebf\u7a0b\u8d44\u6e90\u5f88\u5bb9\u6613\u88ab\u8017\u5149\u3002 \uff08\u4e8c\uff09 \u7b2c\u4e8c\u9636\u6bb5 IO \u591a\u8def\u590d\u7528\u4e4b Select select \u662f\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u7cfb\u7edf\u8c03\u7528\u51fd\u6570\uff0c\u901a\u8fc7\u5b83\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u6570\u7ec4\u53d1\u7ed9\u64cd\u4f5c\u7cfb\u7edf\uff0c \u8ba9\u64cd\u4f5c\u7cfb\u7edf\u53bb\u904d\u5386\uff0c\u786e\u5b9a\u54ea\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u4ee5\u8bfb\u5199\uff0c \u7136\u540e\u544a\u8bc9\u6211\u4eec\u53bb\u5904\u7406. select \u7cfb\u7edf\u8c03\u7528\u7684\u51fd\u6570\u5b9a\u4e49\u5982\u4e0b\u3002 int select( int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout); // nfds:\u76d1\u63a7\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\u91cc\u6700\u5927\u6587\u4ef6\u63cf\u8ff0\u7b26\u52a01 // readfds\uff1a\u76d1\u63a7\u6709\u8bfb\u6570\u636e\u5230\u8fbe\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\u5408\uff0c\u4f20\u5165\u4f20\u51fa\u53c2\u6570 // writefds\uff1a\u76d1\u63a7\u5199\u6570\u636e\u5230\u8fbe\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\u5408\uff0c\u4f20\u5165\u4f20\u51fa\u53c2\u6570 // exceptfds\uff1a\u76d1\u63a7\u5f02\u5e38\u53d1\u751f\u8fbe\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\u5408, \u4f20\u5165\u4f20\u51fa\u53c2\u6570 // timeout\uff1a\u5b9a\u65f6\u963b\u585e\u76d1\u63a7\u65f6\u95f4\uff0c3\u79cd\u60c5\u51b5 // 1.NULL\uff0c\u6c38\u8fdc\u7b49\u4e0b\u53bb // 2.\u8bbe\u7f6etimeval\uff0c\u7b49\u5f85\u56fa\u5b9a\u65f6\u95f4 // 3.\u8bbe\u7f6etimeval\u91cc\u65f6\u95f4\u5747\u4e3a0\uff0c\u68c0\u67e5\u63cf\u8ff0\u5b57\u540e\u7acb\u5373\u8fd4\u56de\uff0c\u8f6e\u8be2 \u4e00\u4e9b\u7ec6\u8282 select \u8c03\u7528\u9700\u8981\u4f20\u5165 fd \u6570\u7ec4\uff0c\u9700\u8981\u62f7\u8d1d\u4e00\u4efd\u5230\u5185\u6838\uff0c\u9ad8\u5e76\u53d1\u573a\u666f\u4e0b\u8fd9\u6837\u7684\u62f7\u8d1d\u6d88\u8017\u7684\u8d44\u6e90\u662f\u60ca\u4eba\u7684\u3002\uff08 \u53ef\u4f18\u5316\u4e3a\u4e0d\u590d\u5236 \uff09 select \u5728\u5185\u6838\u5c42\u4ecd\u7136\u662f\u901a\u8fc7\u904d\u5386\u7684\u65b9\u5f0f\u68c0\u67e5\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5c31\u7eea\u72b6\u6001\uff0c\u662f\u4e2a\u540c\u6b65\u8fc7\u7a0b\uff0c\u53ea\u4e0d\u8fc7\u65e0\u7cfb\u7edf\u8c03\u7528\u5207\u6362\u4e0a\u4e0b\u6587\u7684\u5f00\u9500\u3002\uff08 \u5185\u6838\u5c42\u53ef\u4f18\u5316\u4e3a\u5f02\u6b65\u4e8b\u4ef6\u901a\u77e5 \uff09 select \u4ec5\u4ec5\u8fd4\u56de\u53ef\u8bfb\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u4e2a\u6570\uff0c\u5177\u4f53\u54ea\u4e2a\u53ef\u8bfb\u8fd8\u662f\u8981\u7528\u6237\u81ea\u5df1\u904d\u5386\u3002\uff08 \u53ef\u4f18\u5316\u4e3a\u53ea\u8fd4\u56de\u7ed9\u7528\u6237\u5c31\u7eea\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u65e0\u9700\u7528\u6237\u505a\u65e0\u6548\u7684\u904d\u5386 \uff09 \u6574\u4e2a select \u7684\u6d41\u7a0b \u6d41\u7a0b\u56fe\u5982\u4e0b \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u79cd\u65b9\u5f0f\uff0c\u65e2\u505a\u5230\u4e86\u4e00\u4e2a\u7ebf\u7a0b\u5904\u7406\u591a\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5\uff08\u6587\u4ef6\u63cf\u8ff0\u7b26\uff09\uff0c\u53c8\u51cf\u5c11\u4e86\u7cfb\u7edf\u8c03\u7528\u7684\u5f00\u9500\uff08 \u591a\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ea\u6709\u4e00\u6b21 select \u7684\u7cfb\u7edf\u8c03\u7528 + n \u6b21\u5c31\u7eea\u72b6\u6001\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684 read \u7cfb\u7edf\u8c03\u7528 \uff09 select \u4f4e\u6548\u7684\u539f\u56e0 Select \u4f4e\u6548\u7684\u539f\u56e0\u4e4b\u4e00\u662f\u5c06\u201c\u7ef4\u62a4\u7b49\u5f85\u961f\u5217\u201d\u548c\u201c\u963b\u585e\u8fdb\u7a0b\u201d\u4e24\u4e2a\u6b65\u9aa4\u5408\u4e8c\u4e3a\u4e00\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u6bcf\u6b21\u8c03\u7528 Select \u90fd\u9700\u8981\u8fd9\u4e24\u6b65\u64cd\u4f5c\uff0c\u7136\u800c\u5927\u591a\u6570\u5e94\u7528\u573a\u666f\u4e2d\uff0c\u9700\u8981\u76d1\u89c6\u7684 Socket \u76f8\u5bf9\u56fa\u5b9a\uff0c\u5e76\u4e0d\u9700\u8981\u6bcf\u6b21\u90fd\u4fee\u6539\u3002 Epoll \u5c06\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u5206\u5f00\uff0c\u5148\u7528 epoll_ctl \u7ef4\u62a4\u7b49\u5f85\u961f\u5217\uff0c\u518d\u8c03\u7528 epoll_wait \u963b\u585e\u8fdb\u7a0b\u3002\u663e\u800c\u6613\u89c1\u5730\uff0c\u6548\u7387\u5c31\u80fd\u5f97\u5230\u63d0\u5347\u3002 Poll \uff08\u4e09\uff09 \u7b2c\u4e09\u9636\u6bb5 Epoll epoll \u662f\u6700\u7ec8\u7684\u5927 boss\uff0c\u5b83\u89e3\u51b3\u4e86 select \u548c poll \u7684\u4e00\u4e9b\u95ee\u9898\u3002 \u8fd8\u8bb0\u5f97\u4e0a\u9762\u8bf4\u7684 select \u7684\u4e09\u4e2a\u7ec6\u8282\u4e48\uff1f select \u8c03\u7528\u9700\u8981\u4f20\u5165 fd \u6570\u7ec4\uff0c\u9700\u8981\u62f7\u8d1d\u4e00\u4efd\u5230\u5185\u6838\uff0c\u9ad8\u5e76\u53d1\u573a\u666f\u4e0b\u8fd9\u6837\u7684\u62f7\u8d1d\u6d88\u8017\u7684\u8d44\u6e90\u662f\u60ca\u4eba\u7684\u3002\uff08\u53ef\u4f18\u5316\u4e3a\u4e0d\u590d\u5236\uff09 select \u5728\u5185\u6838\u5c42\u4ecd\u7136\u662f\u901a\u8fc7\u904d\u5386\u7684\u65b9\u5f0f\u68c0\u67e5\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5c31\u7eea\u72b6\u6001\uff0c\u662f\u4e2a\u540c\u6b65\u8fc7\u7a0b\uff0c\u53ea\u4e0d\u8fc7\u65e0\u7cfb\u7edf\u8c03\u7528\u5207\u6362\u4e0a\u4e0b\u6587\u7684\u5f00\u9500\u3002\uff08\u5185\u6838\u5c42\u53ef\u4f18\u5316\u4e3a\u5f02\u6b65\u4e8b\u4ef6\u901a\u77e5\uff09 select \u4ec5\u4ec5\u8fd4\u56de\u53ef\u8bfb\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u4e2a\u6570\uff0c\u5177\u4f53\u54ea\u4e2a\u53ef\u8bfb\u8fd8\u662f\u8981\u7528\u6237\u81ea\u5df1\u904d\u5386\u3002\uff08\u53ef\u4f18\u5316\u4e3a\u53ea\u8fd4\u56de\u7ed9\u7528\u6237\u5c31\u7eea\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u65e0\u9700\u7528\u6237\u505a\u65e0\u6548\u7684\u904d\u5386\uff09 \u6240\u4ee5 epoll \u4e3b\u8981\u5c31\u662f\u9488\u5bf9\u8fd9\u4e09\u70b9\u8fdb\u884c\u4e86\u6539\u8fdb\u3002 \u5185\u6838\u4e2d\u4fdd\u5b58\u4e00\u4efd\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\u5408\uff0c\u65e0\u9700\u7528\u6237\u6bcf\u6b21\u90fd\u91cd\u65b0\u4f20\u5165\uff0c\u53ea\u9700\u544a\u8bc9\u5185\u6838\u4fee\u6539\u7684\u90e8\u5206\u5373\u53ef\u3002 \u5185\u6838\u4e0d\u518d\u901a\u8fc7\u8f6e\u8be2\u7684\u65b9\u5f0f\u627e\u5230\u5c31\u7eea\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u800c\u662f\u901a\u8fc7\u5f02\u6b65 IO \u4e8b\u4ef6\u5524\u9192\u3002 \u5185\u6838\u4ec5\u4f1a\u5c06\u6709 IO \u4e8b\u4ef6\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u7528\u6237\u4e5f\u65e0\u9700\u904d\u5386\u6574\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\u5408\u3002 \u5177\u4f53\uff0c\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u4e86\u8fd9\u4e09\u4e2a\u51fd\u6570\u3002 \u7b2c\u4e00\u6b65\uff0c\u521b\u5efa\u4e00\u4e2a epoll \u53e5\u67c4(\u521b\u5efa Epoll \u5bf9\u8c61) int epoll_create(int size); \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5f53\u67d0\u4e2a\u8fdb\u7a0b\u8c03\u7528 epoll_create \u65b9\u6cd5\u65f6\uff0c\u5185\u6838\u4f1a\u521b\u5efa\u4e00\u4e2a eventpoll \u5bf9\u8c61 \uff08\u4e5f\u5c31\u662f\u7a0b\u5e8f\u4e2d Epfd \u6240\u4ee3\u8868\u7684\u5bf9\u8c61\uff09\u3002 eventpoll \u5bf9\u8c61 \u4e5f\u662f\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u4e00\u5458\uff0c\u548c Socket \u4e00\u6837\uff0c\u5b83\u4e5f\u4f1a\u6709\u7b49\u5f85\u961f\u5217\u3002 \u521b\u5efa\u4e00\u4e2a\u4ee3\u8868\u8be5 Epoll \u7684 eventpoll \u5bf9\u8c61\u662f\u5fc5\u987b\u7684\uff0c\u56e0\u4e3a\u5185\u6838\u8981\u7ef4\u62a4 \u5c31\u7eea\u5217\u8868 \u7b49\u6570\u636e\uff0c \u5c31\u7eea\u5217\u8868 \u53ef\u4ee5\u4f5c\u4e3a eventpoll \u7684\u6210\u5458\u3002 \u7b2c\u4e8c\u6b65\uff0c\u5411\u5185\u6838\u6dfb\u52a0\u3001\u4fee\u6539\u6216\u5220\u9664\u8981\u76d1\u63a7\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002 int epoll_ctl( int epfd, int op, int fd, struct epoll_event *event); \u521b\u5efa Epoll \u5bf9\u8c61 \u540e\uff0c\u53ef\u4ee5\u7528 epoll_ctl \u6dfb\u52a0\u6216\u5220\u9664\u6240\u8981\u76d1\u542c\u7684 Socket\u3002\u4ee5\u6dfb\u52a0 Socket \u4e3a\u4f8b\u3002 \u6dfb\u52a0\u6240\u8981\u76d1\u542c\u7684 Socket \u5982\u4e0a\u56fe\uff0c\u5982\u679c\u901a\u8fc7 epoll_ctl \u6dfb\u52a0 Sock1\u3001Sock2 \u548c Sock3 \u7684\u76d1\u89c6\uff0c\u5185\u6838\u4f1a\u5c06 eventpoll\u5bf9\u8c61 \uff08\u4e5f\u5c31\u662f\u7a0b\u5e8f\u4e2d Epfd \u6240\u4ee3\u8868\u7684\u5bf9\u8c61\uff09, \u6dfb\u52a0\u5230\u8fd9\u4e09\u4e2a Socket \u7684\u7b49\u5f85\u961f\u5217\u4e2d\u3002 \u5f53 Socket \u6536\u5230\u6570\u636e\u540e\uff0c\u4e2d\u65ad\u7a0b\u5e8f\u4f1a\u64cd\u4f5c eventpoll \u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u64cd\u4f5c\u8fdb\u7a0b \u3002 \u7b2c\u4e09\u6b65\uff0c\u7c7b\u4f3c\u53d1\u8d77\u4e86 select() \u8c03\u7528 int epoll_wait( int epfd, struct epoll_event *events, int max events, int timeout); \u5f53 Socket \u6536\u5230\u6570\u636e\u540e\uff0c\u4e2d\u65ad\u7a0b\u5e8f\u4f1a\u7ed9 eventpoll\u5bf9\u8c61 \uff08\u4e5f\u5c31\u662f\u7a0b\u5e8f\u4e2d Epfd \u6240\u4ee3\u8868\u7684\u5bf9\u8c61\uff09 \u7684 \u5c31\u7eea\u5217\u8868 \u6dfb\u52a0 Socket \u5f15\u7528\u3002 \u5982\u4e0a\u56fe\u5c55\u793a\u7684\u662f Sock2 \u548c Sock3 \u6536\u5230\u6570\u636e\u540e\uff0c \u4e2d\u65ad\u7a0b\u5e8f \u8ba9 Rdlist \u5f15\u7528\u8fd9\u4e24\u4e2a Socket\u3002 eventpoll \u5bf9\u8c61 \u76f8\u5f53\u4e8e Socket \u548c \u8fdb\u7a0b \u4e4b\u95f4\u7684\u4e2d\u4ecb\uff0c Socket \u7684\u6570\u636e\u63a5\u6536\u5e76\u4e0d\u76f4\u63a5\u5f71\u54cd\u8fdb\u7a0b\uff0c\u800c\u662f\u901a\u8fc7\u6539\u53d8 eventpoll\u5bf9\u8c61 \u7684 \u5c31\u7eea\u5217\u8868 \u6765\u6539\u53d8\u8fdb\u7a0b\u72b6\u6001\u3002 \u5f53\u7a0b\u5e8f\u6267\u884c\u5230 epoll_wait \u65f6\uff0c\u5982\u679c Rdlist \u5df2\u7ecf\u5f15\u7528\u4e86 Socket \uff0c\u90a3\u4e48 epoll_wait \u76f4\u63a5\u8fd4\u56de(\u5e76\u544a\u77e5\u5c31\u7eea\u7684 Socket \u5bf9\u8c61\u662f\u54ea\u4e9b,\u4e5f\u5c31\u662f\u5bf9\u5e94\u7684 FD,\u6bd4\u5982 FD 3 \u53f7\u548c 4 \u53f7\u662f Ready \u4e86,\u8fdb\u7a0b\u53ef\u4ee5\u76f4\u63a5 Read \u6570\u636e\u4e86)\uff0c\u5982\u679c Rdlist \u4e3a\u7a7a\uff0c\u963b\u585e\u8fdb\u7a0b\u3002 \u963b\u585e\u548c\u5524\u9192\u8fdb\u7a0b \u5047\u8bbe\u8ba1\u7b97\u673a\u4e2d\u6b63\u5728\u8fd0\u884c\u8fdb\u7a0b A \u548c\u8fdb\u7a0b B\uff0c\u5728\u67d0\u65f6\u523b\u8fdb\u7a0b A \u8fd0\u884c\u5230\u4e86 epoll_wait \u8bed\u53e5, epoll_wait \u4f1a\u963b\u585e\u8fdb\u7a0b. \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5185\u6838\u4f1a\u5c06\u8fdb\u7a0b A \u653e\u5165 eventpoll\u5bf9\u8c61\u7684\u7b49\u5f85\u961f\u5217 \u4e2d\uff0c\u963b\u585e\u8fdb\u7a0b\u3002 \u5f53 Socket \u63a5\u6536\u5230\u6570\u636e\uff0c\u4e2d\u65ad\u7a0b\u5e8f(\u4e3b\u8981\u662f\u8f6f\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f)\u4e00\u65b9\u9762\u4fee\u6539 Rdlist \uff0c\u53e6\u4e00\u65b9\u9762\u5524\u9192 eventpoll \u7b49\u5f85\u961f\u5217 \u4e2d\u7684\u8fdb\u7a0b\uff0c\u8fdb\u7a0b A \u518d\u6b21\u8fdb\u5165\u8fd0\u884c\u72b6\u6001\uff08\u5982\u4e0b\u56fe\uff09\u3002 \u4e5f\u56e0\u4e3a Rdlist \u7684\u5b58\u5728\uff0c\u8fdb\u7a0b A \u53ef\u4ee5\u77e5\u9053\u54ea\u4e9b Socket \u53d1\u751f\u4e86\u53d8\u5316\u3002 \u6574\u4f53\u6d41\u7a0b\u56fe \u5f02\u6b65 IO \u4e8b\u4ef6\u901a\u77e5\u673a\u5236 \u600e\u4e48\u624d\u80fd\u4fdd\u8bc1\u6570\u636e\u51c6\u5907\u597d\u4e4b\u540e\uff0c\u7acb\u9a6c\u611f\u77e5\u5462\uff1f \u8981\u6c42\u5bf9\u5e94\u7684 file \u7ed3\u6784\u4f53\uff0c\u5fc5\u987b\u8981\u6709 poll \u65b9\u6cd5. \u5047\u8bbe\u67d0\u4e2a socket \u6709\u53ef\u8bfb\u5199\u7684\u6570\u636e\u4e86, \u8f6f\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u8fd9\u8fb9\uff0c\u4f1a\u5524\u9192\u8be5 socket \u7684 \u7b49\u5f85\u961f\u5217 \u91cc\u9762\u7684 \u5bf9\u8c61 , \u8fd9\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u662f \u8fdb\u7a0b \uff0c\u4e5f\u53ef\u4ee5\u662f eventpoll\u5bf9\u8c61 \u5728 epoll_ctl \u7684\u5185\u90e8\u5b9e\u73b0\u4e2d\uff0c\u4e00\u4e2a\u6838\u5fc3\u6b65\u9aa4\u5c31\u662f\u8bbe\u7f6e poll \u56de\u8c03, \u7ed9 eventpoll\u5bf9\u8c61 \u8bbe\u7f6e\u597d poll \u56de\u8c03. \u5f53\u7136 epoll \u6c60\u53ef\u4ee5\u7ba1\u7406\u7684\u5bf9\u8c61\u5e76\u4e0d\u53ea\u662f socket fd\uff0c\u5176\u4ed6\u7c7b\u578b\u7684 fd \u4e5f\u53ef\u4ee5. \u601d\u8003\u6765\u4e86\uff1apoll \u56de\u8c03\u662f\u4ec0\u4e48\uff1f\u600e\u4e48\u8bbe\u7f6e\uff1f \u5148\u8bf4\u8bf4 file_operations->poll \u662f\u4ec0\u4e48\uff1f \u5728 \u6587\u4ef6\u63cf\u8ff0\u7b26 fd \u7a76\u7adf\u662f\u4ec0\u4e48 \u8bf4\u8fc7\uff0cLinux \u8bbe\u8ba1\u6210\u4e00\u5207\u7686\u662f\u6587\u4ef6\u7684\u67b6\u6784\uff0c\u8fd9\u4e2a\u4e0d\u662f\u8bf4\u8bf4\u800c\u5df2\uff0c\u800c\u662f\u968f\u5904\u53ef\u89c1\u3002\u5b9e\u73b0\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7684\u65f6\u5019\uff0c\u5c31\u8981\u5b9e\u73b0\u8fd9\u4e2a\u6587\u4ef6\u8c03\u7528\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7528 struct file_operations \u6765\u8868\u793a\u3002\u8fd9\u4e2a\u7ed3\u6784\u4f53\u6709\u975e\u5e38\u591a\u7684\u51fd\u6570\uff0c\u7cbe\u7b80\u4e86\u4e00\u4e9b\uff0c\u5982\u4e0b\uff1a struct file_operations { ssize_t (*read) (struct file *, char __user *, size_t, loff_t *); ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *); __poll_t (*poll) (struct file *, struct poll_table_struct *); int (*open) (struct inode *, struct file *); int (*fsync) (struct file *, loff_t, loff_t, int datasync); // .... }; \u4f60\u770b\u5230\u4e86 read \uff0c write \uff0c open \uff0c fsync \uff0c poll \u7b49\u7b49\uff0c\u8fd9\u4e9b\u90fd\u662f\u5bf9\u6587\u4ef6\u7684\u5b9a\u5236\u5904\u7406\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u6587\u4ef6\u7684\u64cd\u4f5c\u5176\u5b9e\u90fd\u662f\u5728\u8fd9\u4e2a\u6846\u67b6\u5185\u5b9e\u73b0\u903b\u8f91\u800c\u5df2\uff0c\u6bd4\u5982 ext2 \u5982\u679c\u6709\u5bf9 read/write \u505a\u5b9a\u5236\u5316\uff0c\u90a3\u4e48\u5c31\u4f1a\u662f ext2_read \uff0c ext2_write \uff0c ext4 \u5c31\u4f1a\u662f ext4_read \uff0c ext4_write \u3002\u5728 open \u5177\u4f53 \u6587\u4ef6 \u7684\u65f6\u5019\u4f1a\u8d4b\u503c\u5bf9\u5e94\u6587\u4ef6\u7cfb\u7edf\u7684 file_operations \u7ed9\u5230 file \u7ed3\u6784\u4f53 \u3002 \u90a3\u6211\u4eec\u5f88\u5bb9\u6613\u77e5\u9053 read \u662f\u6587\u4ef6\u7cfb\u7edf\u5b9a\u5236 fd \u8bfb\u7684\u884c\u4e3a\u8c03\u7528\uff0c write \u662f\u6587\u4ef6\u7cfb\u7edf\u5b9a\u5236 fd \u5199\u7684\u884c\u4e3a\u8c03\u7528\uff0c file_operations->poll \u5462\uff1f \u8fd9\u4e2a\u662f\u5b9a\u5236\u76d1\u542c\u4e8b\u4ef6\u7684\u673a\u5236\u5b9e\u73b0\u3002\u901a\u8fc7 poll \u673a\u5236\u8ba9\u4e0a\u5c42\u80fd\u76f4\u63a5\u544a\u8bc9\u5e95\u5c42\uff0c\u6211\u8fd9\u4e2a fd \u4e00\u65e6\u8bfb\u5199\u5c31\u7eea\u4e86\uff0c\u8bf7\u5e95\u5c42\u786c\u4ef6\uff08\u6bd4\u5982\u7f51\u5361\uff09\u56de\u8c03\u7684\u65f6\u5019\u81ea\u52a8\u628a\u8fd9\u4e2a fd \u76f8\u5173\u7684\u7ed3\u6784\u4f53\u653e\u5230\u6307\u5b9a\u961f\u5217\u4e2d\uff0c\u5e76\u4e14\u5524\u9192\u64cd\u4f5c\u7cfb\u7edf. file_operations \u7684 poll \u662f\u9a71\u52a8\u63d0\u4f9b\u7ed9\u5e94\u7528\u7a0b\u5e8f\u63a2\u6d4b\u8bbe\u5907\u6587\u4ef6\u662f\u5426\u6709\u6570\u636e\u53ef\u8bfb\u63a5\u53e3. \u4e3e\u4e2a\u4f8b\u5b50\uff1a\u7f51\u5361\u6536\u53d1\u5305\u5176\u5b9e\u8d70\u7684\u5f02\u6b65\u6d41\u7a0b\uff0c\u64cd\u4f5c\u7cfb\u7edf\u628a\u6570\u636e\u4e22\u5230\u4e00\u4e2a\u6307\u5b9a\u5730\u70b9\uff0c\u7f51\u5361\u4e0d\u65ad\u7684\u4ece\u8fd9\u4e2a\u6307\u5b9a\u5730\u70b9\u638f\u6570\u636e\u5904\u7406\u3002\u8bf7\u6c42\u54cd\u5e94\u901a\u8fc7\u4e2d\u65ad\u56de\u8c03\u6765\u5904\u7406\uff0c\u4e2d\u65ad\u4e00\u822c\u62c6\u5206\u6210\u4e24\u90e8\u5206\uff1a\u786c\u4e2d\u65ad\u548c\u8f6f\u4e2d\u65ad\u3002poll \u51fd\u6570\u5c31\u662f\u628a\u8fd9\u4e2a\u8f6f\u4e2d\u65ad\u56de\u6765\u7684\u8def\u4e0a\u518d\u52a0\u70b9\u6599\uff0c\u53ea\u8981\u8bfb\u5199\u4e8b\u4ef6\u89e6\u53d1\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u7acb\u9a6c\u901a\u77e5\u5230\u4e0a\u5c42\uff0c\u91c7\u7528\u8fd9\u79cd\u4e8b\u4ef6\u901a\u77e5\u7684\u5f62\u5f0f\u5c31\u80fd\u628a\u6d6a\u8d39\u7684\u65f6\u95f4\u7a97\u5c31\u5b8c\u5168\u6d88\u5931\u4e86\u3002 \u5212\u91cd\u70b9\uff1a\u8fd9\u4e2a poll \u4e8b\u4ef6\u56de\u8c03\u673a\u5236\u5219\u662f epoll \u6c60\u9ad8\u6548\u6700\u6838\u5fc3\u539f\u7406\u3002 \u5212\u91cd\u70b9\uff1a epoll \u6c60 \u7ba1\u7406\u7684 \u53e5\u67c4 \u53ea\u80fd\u662f\u652f\u6301\u4e86 file_operations->poll \u7684\u6587\u4ef6 fd\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u201c\u6587\u4ef6\u201d\u6240\u5728\u7684\u6587\u4ef6\u7cfb\u7edf\u6ca1\u6709\u5b9e\u73b0 poll \u63a5\u53e3\uff0c\u90a3\u4e48\u5c31\u7528\u4e0d\u4e86 epoll \u673a\u5236\u3002 \u4e8c \u603b\u7ed3 IO \u591a\u8def\u590d\u7528\u7684\u539f\u59cb\u5b9e\u73b0\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u4e00\u4e2a 1 \u5bf9\u591a\u7684\u670d\u52a1\u6a21\u5f0f\uff0c\u4e00\u4e2a loop \u5bf9\u5e94\u5904\u7406\u591a\u4e2a fd \uff1b IO \u591a\u8def\u590d\u7528\u60f3\u8981\u505a\u5230\u771f\u6b63\u7684\u9ad8\u6548\uff0c\u5fc5\u987b\u8981\u5185\u6838\u673a\u5236\u63d0\u4f9b\u3002\u56e0\u4e3a IO \u7684\u5904\u7406\u548c\u5b8c\u6210\u662f\u5728\u5185\u6838\uff0c\u5982\u679c\u5185\u6838\u4e0d\u5e2e\u5fd9\uff0c\u7528\u6237\u6001\u7684\u7a0b\u5e8f\u6839\u672c\u65e0\u6cd5\u7cbe\u786e\u7684\u6293\u5230\u5904\u7406\u65f6\u673a\uff1b fd \u8bb0\u5f97\u8981\u8bbe\u7f6e\u6210\u975e\u963b\u585e\u7684\u54e6\uff0c\u5207\u8bb0\uff1b epoll \u6c60\u901a\u8fc7\u9ad8\u6548\u7684\u5185\u90e8\u7ba1\u7406\u7ed3\u6784\uff0c\u5e76\u4e14\u7ed3\u5408\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684 poll \u4e8b\u4ef6\u6ce8\u518c\u673a\u5236\uff0c\u5b9e\u73b0\u4e86\u9ad8\u6548\u7684 fd \u4e8b\u4ef6\u7ba1\u7406\uff0c\u4e3a\u9ad8\u5e76\u53d1\u7684 IO \u5904\u7406\u63d0\u4f9b\u4e86\u524d\u63d0\u6761\u4ef6\uff1b epoll \u5168\u540d eventpoll\uff0c\u5728 Linux \u5185\u6838\u4e0b\u4ee5\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\u6a21\u5757\u7684\u5f62\u5f0f\u5b9e\u73b0\uff0c\u6240\u4ee5\u6709\u4eba\u5e38\u8bf4 epoll \u5176\u5b9e\u672c\u8eab\u5c31\u662f\u6587\u4ef6\u7cfb\u7edf\u4e5f\u662f\u5bf9\u7684\uff1b socketfd\uff0ceventfd\uff0ctimerfd \u8fd9\u4e09\u79cd\u201d\u6587\u4ef6\u201cfd \u5b9e\u73b0\u4e86 poll \u63a5\u53e3\uff0c\u6240\u4ee5\u7f51\u7edc fd\uff0c\u4e8b\u4ef6 fd\uff0c\u5b9a\u65f6\u5668 fd \u90fd\u53ef\u4ee5\u4f7f\u7528 epoll_ctl \u6ce8\u518c\u5230\u6c60\u5b50\u91cc\u3002\u6211\u4eec\u6700\u5e38\u89c1\u7684\u5c31\u662f\u7f51\u7edc fd \u7684\u591a\u8def\u590d\u7528\uff1b ext2\uff0cext4\uff0cxfs \u8fd9\u79cd\u771f\u6b63\u610f\u4e49\u7684\u6587\u4ef6\u7cfb\u7edf\u53cd\u5012\u6ca1\u6709\u63d0\u4f9b poll \u63a5\u53e3\u5b9e\u73b0\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528 epoll \u6c60\u6765\u7ba1\u7406\u5176\u53e5\u67c4\u3002\u90a3\u6587\u4ef6\u5c31\u65e0\u6cd5\u4f7f\u7528 epoll \u673a\u5236\u4e86\u5417\uff1f\u4e0d\u662f\u7684\uff0c\u6709\u4e00\u4e2a\u5e93\u53eb\u505a libaio \uff0c\u901a\u8fc7\u8fd9\u4e2a\u5e93\u6211\u4eec\u53ef\u4ee5\u95f4\u63a5\u7684\u8ba9\u6587\u4ef6\u4f7f\u7528 epoll \u901a\u77e5\u4e8b\u4ef6\uff0c \u4e09 epoll \u673a\u5236\u6838\u5fc3\u6570\u636e\u7ed3\u6784 1 struct eventpoll /* * This structure is stored inside the \"private_data\" member of the file * structure and represents the main data structure for the eventpoll * interface. */ struct eventpoll { /* Protect the access to this structure */ spinlock_t lock; /* * This mutex is used to ensure that files are not removed * while epoll is using them. This is held during the event * collection loop, the file cleanup path, the epoll file exit * code and the ctl operations. */ struct mutex mtx; /* Wait queue used by sys_epoll_wait() */ wait_queue_head_t wq; /* Wait queue used by file->poll() */ wait_queue_head_t poll_wait; /* List of ready file descriptors */ struct list_head rdllist; /* RB tree root used to store monitored fd structs */ struct rb_root rbr; /* * This is a single linked list that chains all the \"struct epitem\" that * happened while transferring ready events to userspace w/out * holding ->lock. */ struct epitem *ovflist; /* wakeup_source used when ep_scan_ready_list is running */ struct wakeup_source *ws; /* The user that created the eventpoll descriptor */ struct user_struct *user; struct file *file; /* used to optimize loop detection check */ int visited; struct list_head visited_list_link; }; 2 struct epitem /* * Each file descriptor added to the eventpoll interface will * have an entry of this type linked to the \"rbr\" RB tree. * Avoid increasing the size of this struct, there can be many thousands * of these on a server and we do not want this to take another cache line. */ struct epitem { union { /* RB tree node links this structure to the eventpoll RB tree */ struct rb_node rbn; /* Used to free the struct epitem */ struct rcu_head rcu; }; /* List header used to link this structure to the eventpoll ready list */ struct list_head rdllink; /* * Works together \"struct eventpoll\"->ovflist in keeping the * single linked chain of items. */ struct epitem *next; /* The file descriptor information this item refers to */ struct epoll_filefd ffd; /* Number of active wait queue attached to poll operations */ int nwait; /* List containing poll wait queues */ struct list_head pwqlist; /* The \"container\" of this item */ struct eventpoll *ep; /* List header used to link this item to the \"struct file\" items list */ struct list_head fllink; /* wakeup_source used when EPOLLWAKEUP is set */ struct wakeup_source __rcu *ws; /* The structure that describe the interested events and the source fd */ struct epoll_event event; }; 3 struct epoll_event \u4ee3\u8868\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5404\u79cd\u8bf8\u5982\u53ef\u8bfb\u53ef\u5199\u4e8b\u4ef6 \u9996\u5148\u4e86\u89e3\u4e00\u4e0b epoll_ctl \u51fd\u6570: int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event); \u8be5\u51fd\u6570\u662f epoll \u7684\u4e8b\u4ef6\u6ce8\u518c\u51fd\u6570\uff0c\u5b83\u4e0d\u540c\u4e0e select()\u662f\u5728\u76d1\u542c\u4e8b\u4ef6\u65f6\u544a\u8bc9\u5185\u6838\u8981\u76d1\u542c\u4ec0\u4e48\u7c7b\u578b\u7684\u4e8b\u4ef6\uff0c\u800c\u662f\u5728\u8fd9\u91cc\u5148\u6ce8\u518c\u8981\u76d1\u542c\u7684\u4e8b\u4ef6\u7c7b\u578b\u3002 \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f epoll_create()\u7684\u8fd4\u56de\u503c \u7b2c\u4e8c\u4e2a\u53c2\u6570\u8868\u793a\u52a8\u4f5c\uff0c\u7528\u4e09\u4e2a\u5b8f\u6765\u8868\u793a\uff1a EPOLL_CTL_ADD\uff1a\u6ce8\u518c\u65b0\u7684 fd \u5230 epfd \u4e2d\uff1b EPOLL_CTL_MOD\uff1a\u4fee\u6539\u5df2\u7ecf\u6ce8\u518c\u7684 fd \u7684\u76d1\u542c\u4e8b\u4ef6\uff1b EPOLL_CTL_DEL\uff1a\u4ece epfd \u4e2d\u5220\u9664\u4e00\u4e2a fd\uff1b \u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u9700\u8981\u76d1\u542c\u7684 fd\uff0c\u7b2c\u56db\u4e2a\u53c2\u6570\u662f\u544a\u8bc9\u5185\u6838\u9700\u8981\u76d1\u542c\u4ec0\u4e48\u4e8b\uff0cstruct epoll_event \u7ed3\u6784\u5982\u4e0b\uff1a typedef union epoll_data { void *ptr; int fd; __uint32_t u32; __uint64_t u64; } epoll_data_t; struct epoll_event { __uint32_t events; /* Epoll events */ epoll_data_t data; /* User data variable */ }; events \u53ef\u4ee5\u662f\u4ee5\u4e0b\u51e0\u4e2a\u5b8f\u7684\u96c6\u5408\uff1a EPOLLIN \uff1a\u8868\u793a\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u4ee5\u8bfb\uff08\u5305\u62ec\u5bf9\u7aef SOCKET \u6b63\u5e38\u5173\u95ed\uff09\uff1b EPOLLOUT\uff1a\u8868\u793a\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u4ee5\u5199\uff1b EPOLLPRI\uff1a\u8868\u793a\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6709\u7d27\u6025\u7684\u6570\u636e\u53ef\u8bfb\uff08\u8fd9\u91cc\u5e94\u8be5\u8868\u793a\u6709\u5e26\u5916\u6570\u636e\u5230\u6765\uff09\uff1b EPOLLERR\uff1a\u8868\u793a\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u53d1\u751f\u9519\u8bef\uff1b EPOLLHUP\uff1a\u8868\u793a\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u88ab\u6302\u65ad\uff1b EPOLLET\uff1a \u5c06 EPOLL \u8bbe\u4e3a\u8fb9\u7f18\u89e6\u53d1(Edge Triggered)\u6a21\u5f0f\uff0c\u8fd9\u662f\u76f8\u5bf9\u4e8e\u6c34\u5e73\u89e6\u53d1(Level Triggered)\u6765\u8bf4\u7684\u3002 EPOLLONESHOT\uff1a\u53ea\u76d1\u542c\u4e00\u6b21\u4e8b\u4ef6\uff0c\u5f53\u76d1\u542c\u5b8c\u8fd9\u6b21\u4e8b\u4ef6\u4e4b\u540e\uff0c\u5982\u679c\u8fd8\u9700\u8981\u7ee7\u7eed\u76d1\u542c\u8fd9\u4e2a socket \u7684\u8bdd\uff0c\u9700\u8981\u518d\u6b21\u628a\u8fd9\u4e2a socket \u52a0\u5165\u5230 EPOLL \u961f\u5217\u91cc 4 struct epoll_filefd struct epoll_filefd { struct file *file; int fd; } __packed; 5 struct ep_pqueue /* Wrapper struct used by poll queueing */ struct ep_pqueue { poll_table pt; struct epitem *epi; }; 6 struct poll_table struct poll_table_struct; /* * structures and helpers for f_op->poll implementations */ typedef void (*poll_queue_proc)(struct file *, wait_queue_head_t *, struct poll_table_struct *); /* * Do not touch the structure directly, use the access functions * poll_does_not_wait() and poll_requested_events() instead. */ typedef struct poll_table_struct { poll_queue_proc _qproc; unsigned long _key; } poll_table;","title":"\u7b2c\u516b\u7bc7 IO\u591a\u8def\u590d\u7528\u603b\u7ed3"},{"location":"chapter_3/8_io_multiplexing/#_1","text":"IO \u591a\u8def\u590d\u7528\u6280\u672f\uff0c\u672c\u8d28\u4e0a\u662f\u8981\u89e3\u51b3\u5355\u8fdb\u7a0b\u5982\u4f55\u9ad8\u6548\u7684\u76d1\u542c\u591a\u4e2a socket \u8fd9\u4e2a\u95ee\u9898. IO multiplexing \u5c31\u662f\u6211\u4eec\u8bf4\u7684 select\uff0cpoll\uff0cepoll\uff0c\u6709\u4e9b\u5730\u65b9\u4e5f\u79f0\u8fd9\u79cd IO \u65b9\u5f0f\u4e3a event driven IO\u3002select/epoll \u7684\u597d\u5904\u5c31\u5728\u4e8e\u5355\u4e2a process \u5c31\u53ef\u4ee5\u540c\u65f6\u5904\u7406\u591a\u4e2a\u7f51\u7edc\u8fde\u63a5\u7684 IO\u3002\u5b83\u7684\u57fa\u672c\u539f\u7406\u5c31\u662f select\uff0cpoll\uff0cepoll \u8fd9\u4e2a function \u4f1a\u4e0d\u65ad\u7684\u8f6e\u8be2\u6240\u8d1f\u8d23\u7684\u6240\u6709 socket\uff0c\u5f53\u67d0\u4e2a socket \u6709\u6570\u636e\u5230\u8fbe\u4e86\uff0c\u5c31\u901a\u77e5\u7528\u6237\u8fdb\u7a0b\u3002( process blocks in call to select, waiting for one of possibly many sockets to become readable) \u591a\u8def \u662f\u6307\uff1f\u591a\u4e2a\u4e1a\u52a1\u65b9\uff08\u53e5\u67c4\uff09\u5e76\u53d1\u4e0b\u6765\u7684 IO \u590d\u7528 \u662f\u6307\uff1f\u590d\u7528\u8fd9\u4e00\u4e2a\u540e\u53f0\u5904\u7406\u7a0b\u5e8f,\u4e5f\u5c31\u662f\u5355\u7ebf\u7a0b. IO \u591a\u8def\u590d\u7528 \u5c31\u662f 1 \u4e2a\u7ebf\u7a0b\u5904\u7406 \u591a\u4e2a fd \u7684\u6a21\u5f0f \u3002\u6211\u4eec\u7684\u8981\u6c42\u662f\uff1a\u8fd9\u4e2a \u201c1\u201d \u5c31\u8981\u5c3d\u53ef\u80fd\u7684\u5feb\uff0c\u907f\u514d\u4e00\u5207\u65e0\u6548\u5de5\u4f5c\uff0c\u8981\u628a\u6240\u6709\u7684\u65f6\u95f4\u90fd\u7528\u5728\u5904\u7406\u53e5\u67c4\u7684 IO \u4e0a\uff0c\u4e0d\u80fd\u6709\u4efb\u4f55\u7a7a\u8f6c\u6216 sleep \u7684\u65f6\u95f4\u6d6a\u8d39\u3002","title":"\u6982\u8ff0"},{"location":"chapter_3/8_io_multiplexing/#_2","text":"","title":"\u4e00 \u670d\u52a1\u7aef\u7f51\u7edc\u7f16\u7a0b\u6a21\u578b\u7684\u6f14\u53d8\u8fc7\u7a0b"},{"location":"chapter_3/8_io_multiplexing/#fork-worker","text":"\u6bcf\u6b21\u90fd\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\u6216\u7ebf\u7a0b\uff0c\u53bb\u8c03\u7528 read \u51fd\u6570\uff0c\u5e76\u505a\u4e1a\u52a1\u5904\u7406\u3002 while(1) { connfd = accept(listenfd); // \u963b\u585e\u5efa\u7acb\u8fde\u63a5 pthread_create\uff08doWork); // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ebf\u7a0b } void doWork() { int n = read(connfd, buf); // \u963b\u585e\u8bfb\u6570\u636e doSomeThing(buf); // \u5229\u7528\u8bfb\u5230\u7684\u6570\u636e\u505a\u4e9b\u4ec0\u4e48 close(connfd); // \u5173\u95ed\u8fde\u63a5\uff0c\u5faa\u73af\u7b49\u5f85\u4e0b\u4e00\u4e2a\u8fde\u63a5 } \u95ee\u9898\u70b9: \u4e3a\u6bcf\u4e2a\u5ba2\u6237\u7aef\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u670d\u52a1\u5668\u7aef\u7684\u7ebf\u7a0b\u8d44\u6e90\u5f88\u5bb9\u6613\u88ab\u8017\u5149\u3002","title":"\uff08\u4e00\uff09 \u7b2c\u4e00\u9636\u6bb5 \u7528\u6237\u7a7a\u95f4\u8c03\u7528 fork,\u751f\u6210\u591a worker \u8fdb\u7a0b"},{"location":"chapter_3/8_io_multiplexing/#io-select","text":"select \u662f\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u7cfb\u7edf\u8c03\u7528\u51fd\u6570\uff0c\u901a\u8fc7\u5b83\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u6570\u7ec4\u53d1\u7ed9\u64cd\u4f5c\u7cfb\u7edf\uff0c \u8ba9\u64cd\u4f5c\u7cfb\u7edf\u53bb\u904d\u5386\uff0c\u786e\u5b9a\u54ea\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u4ee5\u8bfb\u5199\uff0c \u7136\u540e\u544a\u8bc9\u6211\u4eec\u53bb\u5904\u7406. select \u7cfb\u7edf\u8c03\u7528\u7684\u51fd\u6570\u5b9a\u4e49\u5982\u4e0b\u3002 int select( int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout); // nfds:\u76d1\u63a7\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\u91cc\u6700\u5927\u6587\u4ef6\u63cf\u8ff0\u7b26\u52a01 // readfds\uff1a\u76d1\u63a7\u6709\u8bfb\u6570\u636e\u5230\u8fbe\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\u5408\uff0c\u4f20\u5165\u4f20\u51fa\u53c2\u6570 // writefds\uff1a\u76d1\u63a7\u5199\u6570\u636e\u5230\u8fbe\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\u5408\uff0c\u4f20\u5165\u4f20\u51fa\u53c2\u6570 // exceptfds\uff1a\u76d1\u63a7\u5f02\u5e38\u53d1\u751f\u8fbe\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\u5408, \u4f20\u5165\u4f20\u51fa\u53c2\u6570 // timeout\uff1a\u5b9a\u65f6\u963b\u585e\u76d1\u63a7\u65f6\u95f4\uff0c3\u79cd\u60c5\u51b5 // 1.NULL\uff0c\u6c38\u8fdc\u7b49\u4e0b\u53bb // 2.\u8bbe\u7f6etimeval\uff0c\u7b49\u5f85\u56fa\u5b9a\u65f6\u95f4 // 3.\u8bbe\u7f6etimeval\u91cc\u65f6\u95f4\u5747\u4e3a0\uff0c\u68c0\u67e5\u63cf\u8ff0\u5b57\u540e\u7acb\u5373\u8fd4\u56de\uff0c\u8f6e\u8be2","title":"\uff08\u4e8c\uff09 \u7b2c\u4e8c\u9636\u6bb5 IO \u591a\u8def\u590d\u7528\u4e4b Select"},{"location":"chapter_3/8_io_multiplexing/#_3","text":"select \u8c03\u7528\u9700\u8981\u4f20\u5165 fd \u6570\u7ec4\uff0c\u9700\u8981\u62f7\u8d1d\u4e00\u4efd\u5230\u5185\u6838\uff0c\u9ad8\u5e76\u53d1\u573a\u666f\u4e0b\u8fd9\u6837\u7684\u62f7\u8d1d\u6d88\u8017\u7684\u8d44\u6e90\u662f\u60ca\u4eba\u7684\u3002\uff08 \u53ef\u4f18\u5316\u4e3a\u4e0d\u590d\u5236 \uff09 select \u5728\u5185\u6838\u5c42\u4ecd\u7136\u662f\u901a\u8fc7\u904d\u5386\u7684\u65b9\u5f0f\u68c0\u67e5\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5c31\u7eea\u72b6\u6001\uff0c\u662f\u4e2a\u540c\u6b65\u8fc7\u7a0b\uff0c\u53ea\u4e0d\u8fc7\u65e0\u7cfb\u7edf\u8c03\u7528\u5207\u6362\u4e0a\u4e0b\u6587\u7684\u5f00\u9500\u3002\uff08 \u5185\u6838\u5c42\u53ef\u4f18\u5316\u4e3a\u5f02\u6b65\u4e8b\u4ef6\u901a\u77e5 \uff09 select \u4ec5\u4ec5\u8fd4\u56de\u53ef\u8bfb\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u4e2a\u6570\uff0c\u5177\u4f53\u54ea\u4e2a\u53ef\u8bfb\u8fd8\u662f\u8981\u7528\u6237\u81ea\u5df1\u904d\u5386\u3002\uff08 \u53ef\u4f18\u5316\u4e3a\u53ea\u8fd4\u56de\u7ed9\u7528\u6237\u5c31\u7eea\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u65e0\u9700\u7528\u6237\u505a\u65e0\u6548\u7684\u904d\u5386 \uff09","title":"\u4e00\u4e9b\u7ec6\u8282"},{"location":"chapter_3/8_io_multiplexing/#select","text":"\u6d41\u7a0b\u56fe\u5982\u4e0b \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u79cd\u65b9\u5f0f\uff0c\u65e2\u505a\u5230\u4e86\u4e00\u4e2a\u7ebf\u7a0b\u5904\u7406\u591a\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5\uff08\u6587\u4ef6\u63cf\u8ff0\u7b26\uff09\uff0c\u53c8\u51cf\u5c11\u4e86\u7cfb\u7edf\u8c03\u7528\u7684\u5f00\u9500\uff08 \u591a\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ea\u6709\u4e00\u6b21 select \u7684\u7cfb\u7edf\u8c03\u7528 + n \u6b21\u5c31\u7eea\u72b6\u6001\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684 read \u7cfb\u7edf\u8c03\u7528 \uff09","title":"\u6574\u4e2a select \u7684\u6d41\u7a0b"},{"location":"chapter_3/8_io_multiplexing/#select_1","text":"Select \u4f4e\u6548\u7684\u539f\u56e0\u4e4b\u4e00\u662f\u5c06\u201c\u7ef4\u62a4\u7b49\u5f85\u961f\u5217\u201d\u548c\u201c\u963b\u585e\u8fdb\u7a0b\u201d\u4e24\u4e2a\u6b65\u9aa4\u5408\u4e8c\u4e3a\u4e00\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u6bcf\u6b21\u8c03\u7528 Select \u90fd\u9700\u8981\u8fd9\u4e24\u6b65\u64cd\u4f5c\uff0c\u7136\u800c\u5927\u591a\u6570\u5e94\u7528\u573a\u666f\u4e2d\uff0c\u9700\u8981\u76d1\u89c6\u7684 Socket \u76f8\u5bf9\u56fa\u5b9a\uff0c\u5e76\u4e0d\u9700\u8981\u6bcf\u6b21\u90fd\u4fee\u6539\u3002 Epoll \u5c06\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u5206\u5f00\uff0c\u5148\u7528 epoll_ctl \u7ef4\u62a4\u7b49\u5f85\u961f\u5217\uff0c\u518d\u8c03\u7528 epoll_wait \u963b\u585e\u8fdb\u7a0b\u3002\u663e\u800c\u6613\u89c1\u5730\uff0c\u6548\u7387\u5c31\u80fd\u5f97\u5230\u63d0\u5347\u3002","title":"select \u4f4e\u6548\u7684\u539f\u56e0"},{"location":"chapter_3/8_io_multiplexing/#poll","text":"","title":"Poll"},{"location":"chapter_3/8_io_multiplexing/#epoll","text":"epoll \u662f\u6700\u7ec8\u7684\u5927 boss\uff0c\u5b83\u89e3\u51b3\u4e86 select \u548c poll \u7684\u4e00\u4e9b\u95ee\u9898\u3002 \u8fd8\u8bb0\u5f97\u4e0a\u9762\u8bf4\u7684 select \u7684\u4e09\u4e2a\u7ec6\u8282\u4e48\uff1f select \u8c03\u7528\u9700\u8981\u4f20\u5165 fd \u6570\u7ec4\uff0c\u9700\u8981\u62f7\u8d1d\u4e00\u4efd\u5230\u5185\u6838\uff0c\u9ad8\u5e76\u53d1\u573a\u666f\u4e0b\u8fd9\u6837\u7684\u62f7\u8d1d\u6d88\u8017\u7684\u8d44\u6e90\u662f\u60ca\u4eba\u7684\u3002\uff08\u53ef\u4f18\u5316\u4e3a\u4e0d\u590d\u5236\uff09 select \u5728\u5185\u6838\u5c42\u4ecd\u7136\u662f\u901a\u8fc7\u904d\u5386\u7684\u65b9\u5f0f\u68c0\u67e5\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5c31\u7eea\u72b6\u6001\uff0c\u662f\u4e2a\u540c\u6b65\u8fc7\u7a0b\uff0c\u53ea\u4e0d\u8fc7\u65e0\u7cfb\u7edf\u8c03\u7528\u5207\u6362\u4e0a\u4e0b\u6587\u7684\u5f00\u9500\u3002\uff08\u5185\u6838\u5c42\u53ef\u4f18\u5316\u4e3a\u5f02\u6b65\u4e8b\u4ef6\u901a\u77e5\uff09 select \u4ec5\u4ec5\u8fd4\u56de\u53ef\u8bfb\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u4e2a\u6570\uff0c\u5177\u4f53\u54ea\u4e2a\u53ef\u8bfb\u8fd8\u662f\u8981\u7528\u6237\u81ea\u5df1\u904d\u5386\u3002\uff08\u53ef\u4f18\u5316\u4e3a\u53ea\u8fd4\u56de\u7ed9\u7528\u6237\u5c31\u7eea\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u65e0\u9700\u7528\u6237\u505a\u65e0\u6548\u7684\u904d\u5386\uff09 \u6240\u4ee5 epoll \u4e3b\u8981\u5c31\u662f\u9488\u5bf9\u8fd9\u4e09\u70b9\u8fdb\u884c\u4e86\u6539\u8fdb\u3002 \u5185\u6838\u4e2d\u4fdd\u5b58\u4e00\u4efd\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\u5408\uff0c\u65e0\u9700\u7528\u6237\u6bcf\u6b21\u90fd\u91cd\u65b0\u4f20\u5165\uff0c\u53ea\u9700\u544a\u8bc9\u5185\u6838\u4fee\u6539\u7684\u90e8\u5206\u5373\u53ef\u3002 \u5185\u6838\u4e0d\u518d\u901a\u8fc7\u8f6e\u8be2\u7684\u65b9\u5f0f\u627e\u5230\u5c31\u7eea\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u800c\u662f\u901a\u8fc7\u5f02\u6b65 IO \u4e8b\u4ef6\u5524\u9192\u3002 \u5185\u6838\u4ec5\u4f1a\u5c06\u6709 IO \u4e8b\u4ef6\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u7528\u6237\u4e5f\u65e0\u9700\u904d\u5386\u6574\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\u5408\u3002 \u5177\u4f53\uff0c\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u4e86\u8fd9\u4e09\u4e2a\u51fd\u6570\u3002","title":"\uff08\u4e09\uff09 \u7b2c\u4e09\u9636\u6bb5 Epoll"},{"location":"chapter_3/8_io_multiplexing/#epoll-epoll","text":"int epoll_create(int size); \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5f53\u67d0\u4e2a\u8fdb\u7a0b\u8c03\u7528 epoll_create \u65b9\u6cd5\u65f6\uff0c\u5185\u6838\u4f1a\u521b\u5efa\u4e00\u4e2a eventpoll \u5bf9\u8c61 \uff08\u4e5f\u5c31\u662f\u7a0b\u5e8f\u4e2d Epfd \u6240\u4ee3\u8868\u7684\u5bf9\u8c61\uff09\u3002 eventpoll \u5bf9\u8c61 \u4e5f\u662f\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u4e00\u5458\uff0c\u548c Socket \u4e00\u6837\uff0c\u5b83\u4e5f\u4f1a\u6709\u7b49\u5f85\u961f\u5217\u3002 \u521b\u5efa\u4e00\u4e2a\u4ee3\u8868\u8be5 Epoll \u7684 eventpoll \u5bf9\u8c61\u662f\u5fc5\u987b\u7684\uff0c\u56e0\u4e3a\u5185\u6838\u8981\u7ef4\u62a4 \u5c31\u7eea\u5217\u8868 \u7b49\u6570\u636e\uff0c \u5c31\u7eea\u5217\u8868 \u53ef\u4ee5\u4f5c\u4e3a eventpoll \u7684\u6210\u5458\u3002","title":"\u7b2c\u4e00\u6b65\uff0c\u521b\u5efa\u4e00\u4e2a epoll \u53e5\u67c4(\u521b\u5efa Epoll \u5bf9\u8c61)"},{"location":"chapter_3/8_io_multiplexing/#_4","text":"int epoll_ctl( int epfd, int op, int fd, struct epoll_event *event); \u521b\u5efa Epoll \u5bf9\u8c61 \u540e\uff0c\u53ef\u4ee5\u7528 epoll_ctl \u6dfb\u52a0\u6216\u5220\u9664\u6240\u8981\u76d1\u542c\u7684 Socket\u3002\u4ee5\u6dfb\u52a0 Socket \u4e3a\u4f8b\u3002 \u6dfb\u52a0\u6240\u8981\u76d1\u542c\u7684 Socket \u5982\u4e0a\u56fe\uff0c\u5982\u679c\u901a\u8fc7 epoll_ctl \u6dfb\u52a0 Sock1\u3001Sock2 \u548c Sock3 \u7684\u76d1\u89c6\uff0c\u5185\u6838\u4f1a\u5c06 eventpoll\u5bf9\u8c61 \uff08\u4e5f\u5c31\u662f\u7a0b\u5e8f\u4e2d Epfd \u6240\u4ee3\u8868\u7684\u5bf9\u8c61\uff09, \u6dfb\u52a0\u5230\u8fd9\u4e09\u4e2a Socket \u7684\u7b49\u5f85\u961f\u5217\u4e2d\u3002 \u5f53 Socket \u6536\u5230\u6570\u636e\u540e\uff0c\u4e2d\u65ad\u7a0b\u5e8f\u4f1a\u64cd\u4f5c eventpoll \u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u64cd\u4f5c\u8fdb\u7a0b \u3002","title":"\u7b2c\u4e8c\u6b65\uff0c\u5411\u5185\u6838\u6dfb\u52a0\u3001\u4fee\u6539\u6216\u5220\u9664\u8981\u76d1\u63a7\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002"},{"location":"chapter_3/8_io_multiplexing/#select_2","text":"int epoll_wait( int epfd, struct epoll_event *events, int max events, int timeout); \u5f53 Socket \u6536\u5230\u6570\u636e\u540e\uff0c\u4e2d\u65ad\u7a0b\u5e8f\u4f1a\u7ed9 eventpoll\u5bf9\u8c61 \uff08\u4e5f\u5c31\u662f\u7a0b\u5e8f\u4e2d Epfd \u6240\u4ee3\u8868\u7684\u5bf9\u8c61\uff09 \u7684 \u5c31\u7eea\u5217\u8868 \u6dfb\u52a0 Socket \u5f15\u7528\u3002 \u5982\u4e0a\u56fe\u5c55\u793a\u7684\u662f Sock2 \u548c Sock3 \u6536\u5230\u6570\u636e\u540e\uff0c \u4e2d\u65ad\u7a0b\u5e8f \u8ba9 Rdlist \u5f15\u7528\u8fd9\u4e24\u4e2a Socket\u3002 eventpoll \u5bf9\u8c61 \u76f8\u5f53\u4e8e Socket \u548c \u8fdb\u7a0b \u4e4b\u95f4\u7684\u4e2d\u4ecb\uff0c Socket \u7684\u6570\u636e\u63a5\u6536\u5e76\u4e0d\u76f4\u63a5\u5f71\u54cd\u8fdb\u7a0b\uff0c\u800c\u662f\u901a\u8fc7\u6539\u53d8 eventpoll\u5bf9\u8c61 \u7684 \u5c31\u7eea\u5217\u8868 \u6765\u6539\u53d8\u8fdb\u7a0b\u72b6\u6001\u3002 \u5f53\u7a0b\u5e8f\u6267\u884c\u5230 epoll_wait \u65f6\uff0c\u5982\u679c Rdlist \u5df2\u7ecf\u5f15\u7528\u4e86 Socket \uff0c\u90a3\u4e48 epoll_wait \u76f4\u63a5\u8fd4\u56de(\u5e76\u544a\u77e5\u5c31\u7eea\u7684 Socket \u5bf9\u8c61\u662f\u54ea\u4e9b,\u4e5f\u5c31\u662f\u5bf9\u5e94\u7684 FD,\u6bd4\u5982 FD 3 \u53f7\u548c 4 \u53f7\u662f Ready \u4e86,\u8fdb\u7a0b\u53ef\u4ee5\u76f4\u63a5 Read \u6570\u636e\u4e86)\uff0c\u5982\u679c Rdlist \u4e3a\u7a7a\uff0c\u963b\u585e\u8fdb\u7a0b\u3002","title":"\u7b2c\u4e09\u6b65\uff0c\u7c7b\u4f3c\u53d1\u8d77\u4e86 select() \u8c03\u7528"},{"location":"chapter_3/8_io_multiplexing/#_5","text":"\u5047\u8bbe\u8ba1\u7b97\u673a\u4e2d\u6b63\u5728\u8fd0\u884c\u8fdb\u7a0b A \u548c\u8fdb\u7a0b B\uff0c\u5728\u67d0\u65f6\u523b\u8fdb\u7a0b A \u8fd0\u884c\u5230\u4e86 epoll_wait \u8bed\u53e5, epoll_wait \u4f1a\u963b\u585e\u8fdb\u7a0b. \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5185\u6838\u4f1a\u5c06\u8fdb\u7a0b A \u653e\u5165 eventpoll\u5bf9\u8c61\u7684\u7b49\u5f85\u961f\u5217 \u4e2d\uff0c\u963b\u585e\u8fdb\u7a0b\u3002 \u5f53 Socket \u63a5\u6536\u5230\u6570\u636e\uff0c\u4e2d\u65ad\u7a0b\u5e8f(\u4e3b\u8981\u662f\u8f6f\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f)\u4e00\u65b9\u9762\u4fee\u6539 Rdlist \uff0c\u53e6\u4e00\u65b9\u9762\u5524\u9192 eventpoll \u7b49\u5f85\u961f\u5217 \u4e2d\u7684\u8fdb\u7a0b\uff0c\u8fdb\u7a0b A \u518d\u6b21\u8fdb\u5165\u8fd0\u884c\u72b6\u6001\uff08\u5982\u4e0b\u56fe\uff09\u3002 \u4e5f\u56e0\u4e3a Rdlist \u7684\u5b58\u5728\uff0c\u8fdb\u7a0b A \u53ef\u4ee5\u77e5\u9053\u54ea\u4e9b Socket \u53d1\u751f\u4e86\u53d8\u5316\u3002","title":"\u963b\u585e\u548c\u5524\u9192\u8fdb\u7a0b"},{"location":"chapter_3/8_io_multiplexing/#_6","text":"","title":"\u6574\u4f53\u6d41\u7a0b\u56fe"},{"location":"chapter_3/8_io_multiplexing/#io","text":"\u600e\u4e48\u624d\u80fd\u4fdd\u8bc1\u6570\u636e\u51c6\u5907\u597d\u4e4b\u540e\uff0c\u7acb\u9a6c\u611f\u77e5\u5462\uff1f \u8981\u6c42\u5bf9\u5e94\u7684 file \u7ed3\u6784\u4f53\uff0c\u5fc5\u987b\u8981\u6709 poll \u65b9\u6cd5. \u5047\u8bbe\u67d0\u4e2a socket \u6709\u53ef\u8bfb\u5199\u7684\u6570\u636e\u4e86, \u8f6f\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u8fd9\u8fb9\uff0c\u4f1a\u5524\u9192\u8be5 socket \u7684 \u7b49\u5f85\u961f\u5217 \u91cc\u9762\u7684 \u5bf9\u8c61 , \u8fd9\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u662f \u8fdb\u7a0b \uff0c\u4e5f\u53ef\u4ee5\u662f eventpoll\u5bf9\u8c61 \u5728 epoll_ctl \u7684\u5185\u90e8\u5b9e\u73b0\u4e2d\uff0c\u4e00\u4e2a\u6838\u5fc3\u6b65\u9aa4\u5c31\u662f\u8bbe\u7f6e poll \u56de\u8c03, \u7ed9 eventpoll\u5bf9\u8c61 \u8bbe\u7f6e\u597d poll \u56de\u8c03. \u5f53\u7136 epoll \u6c60\u53ef\u4ee5\u7ba1\u7406\u7684\u5bf9\u8c61\u5e76\u4e0d\u53ea\u662f socket fd\uff0c\u5176\u4ed6\u7c7b\u578b\u7684 fd \u4e5f\u53ef\u4ee5.","title":"\u5f02\u6b65 IO \u4e8b\u4ef6\u901a\u77e5\u673a\u5236"},{"location":"chapter_3/8_io_multiplexing/#poll_1","text":"\u5148\u8bf4\u8bf4 file_operations->poll \u662f\u4ec0\u4e48\uff1f \u5728 \u6587\u4ef6\u63cf\u8ff0\u7b26 fd \u7a76\u7adf\u662f\u4ec0\u4e48 \u8bf4\u8fc7\uff0cLinux \u8bbe\u8ba1\u6210\u4e00\u5207\u7686\u662f\u6587\u4ef6\u7684\u67b6\u6784\uff0c\u8fd9\u4e2a\u4e0d\u662f\u8bf4\u8bf4\u800c\u5df2\uff0c\u800c\u662f\u968f\u5904\u53ef\u89c1\u3002\u5b9e\u73b0\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7684\u65f6\u5019\uff0c\u5c31\u8981\u5b9e\u73b0\u8fd9\u4e2a\u6587\u4ef6\u8c03\u7528\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7528 struct file_operations \u6765\u8868\u793a\u3002\u8fd9\u4e2a\u7ed3\u6784\u4f53\u6709\u975e\u5e38\u591a\u7684\u51fd\u6570\uff0c\u7cbe\u7b80\u4e86\u4e00\u4e9b\uff0c\u5982\u4e0b\uff1a struct file_operations { ssize_t (*read) (struct file *, char __user *, size_t, loff_t *); ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *); __poll_t (*poll) (struct file *, struct poll_table_struct *); int (*open) (struct inode *, struct file *); int (*fsync) (struct file *, loff_t, loff_t, int datasync); // .... }; \u4f60\u770b\u5230\u4e86 read \uff0c write \uff0c open \uff0c fsync \uff0c poll \u7b49\u7b49\uff0c\u8fd9\u4e9b\u90fd\u662f\u5bf9\u6587\u4ef6\u7684\u5b9a\u5236\u5904\u7406\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u6587\u4ef6\u7684\u64cd\u4f5c\u5176\u5b9e\u90fd\u662f\u5728\u8fd9\u4e2a\u6846\u67b6\u5185\u5b9e\u73b0\u903b\u8f91\u800c\u5df2\uff0c\u6bd4\u5982 ext2 \u5982\u679c\u6709\u5bf9 read/write \u505a\u5b9a\u5236\u5316\uff0c\u90a3\u4e48\u5c31\u4f1a\u662f ext2_read \uff0c ext2_write \uff0c ext4 \u5c31\u4f1a\u662f ext4_read \uff0c ext4_write \u3002\u5728 open \u5177\u4f53 \u6587\u4ef6 \u7684\u65f6\u5019\u4f1a\u8d4b\u503c\u5bf9\u5e94\u6587\u4ef6\u7cfb\u7edf\u7684 file_operations \u7ed9\u5230 file \u7ed3\u6784\u4f53 \u3002 \u90a3\u6211\u4eec\u5f88\u5bb9\u6613\u77e5\u9053 read \u662f\u6587\u4ef6\u7cfb\u7edf\u5b9a\u5236 fd \u8bfb\u7684\u884c\u4e3a\u8c03\u7528\uff0c write \u662f\u6587\u4ef6\u7cfb\u7edf\u5b9a\u5236 fd \u5199\u7684\u884c\u4e3a\u8c03\u7528\uff0c file_operations->poll \u5462\uff1f \u8fd9\u4e2a\u662f\u5b9a\u5236\u76d1\u542c\u4e8b\u4ef6\u7684\u673a\u5236\u5b9e\u73b0\u3002\u901a\u8fc7 poll \u673a\u5236\u8ba9\u4e0a\u5c42\u80fd\u76f4\u63a5\u544a\u8bc9\u5e95\u5c42\uff0c\u6211\u8fd9\u4e2a fd \u4e00\u65e6\u8bfb\u5199\u5c31\u7eea\u4e86\uff0c\u8bf7\u5e95\u5c42\u786c\u4ef6\uff08\u6bd4\u5982\u7f51\u5361\uff09\u56de\u8c03\u7684\u65f6\u5019\u81ea\u52a8\u628a\u8fd9\u4e2a fd \u76f8\u5173\u7684\u7ed3\u6784\u4f53\u653e\u5230\u6307\u5b9a\u961f\u5217\u4e2d\uff0c\u5e76\u4e14\u5524\u9192\u64cd\u4f5c\u7cfb\u7edf. file_operations \u7684 poll \u662f\u9a71\u52a8\u63d0\u4f9b\u7ed9\u5e94\u7528\u7a0b\u5e8f\u63a2\u6d4b\u8bbe\u5907\u6587\u4ef6\u662f\u5426\u6709\u6570\u636e\u53ef\u8bfb\u63a5\u53e3. \u4e3e\u4e2a\u4f8b\u5b50\uff1a\u7f51\u5361\u6536\u53d1\u5305\u5176\u5b9e\u8d70\u7684\u5f02\u6b65\u6d41\u7a0b\uff0c\u64cd\u4f5c\u7cfb\u7edf\u628a\u6570\u636e\u4e22\u5230\u4e00\u4e2a\u6307\u5b9a\u5730\u70b9\uff0c\u7f51\u5361\u4e0d\u65ad\u7684\u4ece\u8fd9\u4e2a\u6307\u5b9a\u5730\u70b9\u638f\u6570\u636e\u5904\u7406\u3002\u8bf7\u6c42\u54cd\u5e94\u901a\u8fc7\u4e2d\u65ad\u56de\u8c03\u6765\u5904\u7406\uff0c\u4e2d\u65ad\u4e00\u822c\u62c6\u5206\u6210\u4e24\u90e8\u5206\uff1a\u786c\u4e2d\u65ad\u548c\u8f6f\u4e2d\u65ad\u3002poll \u51fd\u6570\u5c31\u662f\u628a\u8fd9\u4e2a\u8f6f\u4e2d\u65ad\u56de\u6765\u7684\u8def\u4e0a\u518d\u52a0\u70b9\u6599\uff0c\u53ea\u8981\u8bfb\u5199\u4e8b\u4ef6\u89e6\u53d1\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u7acb\u9a6c\u901a\u77e5\u5230\u4e0a\u5c42\uff0c\u91c7\u7528\u8fd9\u79cd\u4e8b\u4ef6\u901a\u77e5\u7684\u5f62\u5f0f\u5c31\u80fd\u628a\u6d6a\u8d39\u7684\u65f6\u95f4\u7a97\u5c31\u5b8c\u5168\u6d88\u5931\u4e86\u3002 \u5212\u91cd\u70b9\uff1a\u8fd9\u4e2a poll \u4e8b\u4ef6\u56de\u8c03\u673a\u5236\u5219\u662f epoll \u6c60\u9ad8\u6548\u6700\u6838\u5fc3\u539f\u7406\u3002 \u5212\u91cd\u70b9\uff1a epoll \u6c60 \u7ba1\u7406\u7684 \u53e5\u67c4 \u53ea\u80fd\u662f\u652f\u6301\u4e86 file_operations->poll \u7684\u6587\u4ef6 fd\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u201c\u6587\u4ef6\u201d\u6240\u5728\u7684\u6587\u4ef6\u7cfb\u7edf\u6ca1\u6709\u5b9e\u73b0 poll \u63a5\u53e3\uff0c\u90a3\u4e48\u5c31\u7528\u4e0d\u4e86 epoll \u673a\u5236\u3002","title":"\u601d\u8003\u6765\u4e86\uff1apoll \u56de\u8c03\u662f\u4ec0\u4e48\uff1f\u600e\u4e48\u8bbe\u7f6e\uff1f"},{"location":"chapter_3/8_io_multiplexing/#_7","text":"IO \u591a\u8def\u590d\u7528\u7684\u539f\u59cb\u5b9e\u73b0\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u4e00\u4e2a 1 \u5bf9\u591a\u7684\u670d\u52a1\u6a21\u5f0f\uff0c\u4e00\u4e2a loop \u5bf9\u5e94\u5904\u7406\u591a\u4e2a fd \uff1b IO \u591a\u8def\u590d\u7528\u60f3\u8981\u505a\u5230\u771f\u6b63\u7684\u9ad8\u6548\uff0c\u5fc5\u987b\u8981\u5185\u6838\u673a\u5236\u63d0\u4f9b\u3002\u56e0\u4e3a IO \u7684\u5904\u7406\u548c\u5b8c\u6210\u662f\u5728\u5185\u6838\uff0c\u5982\u679c\u5185\u6838\u4e0d\u5e2e\u5fd9\uff0c\u7528\u6237\u6001\u7684\u7a0b\u5e8f\u6839\u672c\u65e0\u6cd5\u7cbe\u786e\u7684\u6293\u5230\u5904\u7406\u65f6\u673a\uff1b fd \u8bb0\u5f97\u8981\u8bbe\u7f6e\u6210\u975e\u963b\u585e\u7684\u54e6\uff0c\u5207\u8bb0\uff1b epoll \u6c60\u901a\u8fc7\u9ad8\u6548\u7684\u5185\u90e8\u7ba1\u7406\u7ed3\u6784\uff0c\u5e76\u4e14\u7ed3\u5408\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684 poll \u4e8b\u4ef6\u6ce8\u518c\u673a\u5236\uff0c\u5b9e\u73b0\u4e86\u9ad8\u6548\u7684 fd \u4e8b\u4ef6\u7ba1\u7406\uff0c\u4e3a\u9ad8\u5e76\u53d1\u7684 IO \u5904\u7406\u63d0\u4f9b\u4e86\u524d\u63d0\u6761\u4ef6\uff1b epoll \u5168\u540d eventpoll\uff0c\u5728 Linux \u5185\u6838\u4e0b\u4ee5\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\u6a21\u5757\u7684\u5f62\u5f0f\u5b9e\u73b0\uff0c\u6240\u4ee5\u6709\u4eba\u5e38\u8bf4 epoll \u5176\u5b9e\u672c\u8eab\u5c31\u662f\u6587\u4ef6\u7cfb\u7edf\u4e5f\u662f\u5bf9\u7684\uff1b socketfd\uff0ceventfd\uff0ctimerfd \u8fd9\u4e09\u79cd\u201d\u6587\u4ef6\u201cfd \u5b9e\u73b0\u4e86 poll \u63a5\u53e3\uff0c\u6240\u4ee5\u7f51\u7edc fd\uff0c\u4e8b\u4ef6 fd\uff0c\u5b9a\u65f6\u5668 fd \u90fd\u53ef\u4ee5\u4f7f\u7528 epoll_ctl \u6ce8\u518c\u5230\u6c60\u5b50\u91cc\u3002\u6211\u4eec\u6700\u5e38\u89c1\u7684\u5c31\u662f\u7f51\u7edc fd \u7684\u591a\u8def\u590d\u7528\uff1b ext2\uff0cext4\uff0cxfs \u8fd9\u79cd\u771f\u6b63\u610f\u4e49\u7684\u6587\u4ef6\u7cfb\u7edf\u53cd\u5012\u6ca1\u6709\u63d0\u4f9b poll \u63a5\u53e3\u5b9e\u73b0\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528 epoll \u6c60\u6765\u7ba1\u7406\u5176\u53e5\u67c4\u3002\u90a3\u6587\u4ef6\u5c31\u65e0\u6cd5\u4f7f\u7528 epoll \u673a\u5236\u4e86\u5417\uff1f\u4e0d\u662f\u7684\uff0c\u6709\u4e00\u4e2a\u5e93\u53eb\u505a libaio \uff0c\u901a\u8fc7\u8fd9\u4e2a\u5e93\u6211\u4eec\u53ef\u4ee5\u95f4\u63a5\u7684\u8ba9\u6587\u4ef6\u4f7f\u7528 epoll \u901a\u77e5\u4e8b\u4ef6\uff0c","title":"\u4e8c \u603b\u7ed3"},{"location":"chapter_3/8_io_multiplexing/#epoll_1","text":"","title":"\u4e09 epoll \u673a\u5236\u6838\u5fc3\u6570\u636e\u7ed3\u6784"},{"location":"chapter_3/8_io_multiplexing/#1-struct-eventpoll","text":"/* * This structure is stored inside the \"private_data\" member of the file * structure and represents the main data structure for the eventpoll * interface. */ struct eventpoll { /* Protect the access to this structure */ spinlock_t lock; /* * This mutex is used to ensure that files are not removed * while epoll is using them. This is held during the event * collection loop, the file cleanup path, the epoll file exit * code and the ctl operations. */ struct mutex mtx; /* Wait queue used by sys_epoll_wait() */ wait_queue_head_t wq; /* Wait queue used by file->poll() */ wait_queue_head_t poll_wait; /* List of ready file descriptors */ struct list_head rdllist; /* RB tree root used to store monitored fd structs */ struct rb_root rbr; /* * This is a single linked list that chains all the \"struct epitem\" that * happened while transferring ready events to userspace w/out * holding ->lock. */ struct epitem *ovflist; /* wakeup_source used when ep_scan_ready_list is running */ struct wakeup_source *ws; /* The user that created the eventpoll descriptor */ struct user_struct *user; struct file *file; /* used to optimize loop detection check */ int visited; struct list_head visited_list_link; };","title":"1 struct eventpoll"},{"location":"chapter_3/8_io_multiplexing/#2-struct-epitem","text":"/* * Each file descriptor added to the eventpoll interface will * have an entry of this type linked to the \"rbr\" RB tree. * Avoid increasing the size of this struct, there can be many thousands * of these on a server and we do not want this to take another cache line. */ struct epitem { union { /* RB tree node links this structure to the eventpoll RB tree */ struct rb_node rbn; /* Used to free the struct epitem */ struct rcu_head rcu; }; /* List header used to link this structure to the eventpoll ready list */ struct list_head rdllink; /* * Works together \"struct eventpoll\"->ovflist in keeping the * single linked chain of items. */ struct epitem *next; /* The file descriptor information this item refers to */ struct epoll_filefd ffd; /* Number of active wait queue attached to poll operations */ int nwait; /* List containing poll wait queues */ struct list_head pwqlist; /* The \"container\" of this item */ struct eventpoll *ep; /* List header used to link this item to the \"struct file\" items list */ struct list_head fllink; /* wakeup_source used when EPOLLWAKEUP is set */ struct wakeup_source __rcu *ws; /* The structure that describe the interested events and the source fd */ struct epoll_event event; };","title":"2 struct epitem"},{"location":"chapter_3/8_io_multiplexing/#3-struct-epoll_event","text":"\u9996\u5148\u4e86\u89e3\u4e00\u4e0b epoll_ctl \u51fd\u6570: int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event); \u8be5\u51fd\u6570\u662f epoll \u7684\u4e8b\u4ef6\u6ce8\u518c\u51fd\u6570\uff0c\u5b83\u4e0d\u540c\u4e0e select()\u662f\u5728\u76d1\u542c\u4e8b\u4ef6\u65f6\u544a\u8bc9\u5185\u6838\u8981\u76d1\u542c\u4ec0\u4e48\u7c7b\u578b\u7684\u4e8b\u4ef6\uff0c\u800c\u662f\u5728\u8fd9\u91cc\u5148\u6ce8\u518c\u8981\u76d1\u542c\u7684\u4e8b\u4ef6\u7c7b\u578b\u3002 \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f epoll_create()\u7684\u8fd4\u56de\u503c \u7b2c\u4e8c\u4e2a\u53c2\u6570\u8868\u793a\u52a8\u4f5c\uff0c\u7528\u4e09\u4e2a\u5b8f\u6765\u8868\u793a\uff1a EPOLL_CTL_ADD\uff1a\u6ce8\u518c\u65b0\u7684 fd \u5230 epfd \u4e2d\uff1b EPOLL_CTL_MOD\uff1a\u4fee\u6539\u5df2\u7ecf\u6ce8\u518c\u7684 fd \u7684\u76d1\u542c\u4e8b\u4ef6\uff1b EPOLL_CTL_DEL\uff1a\u4ece epfd \u4e2d\u5220\u9664\u4e00\u4e2a fd\uff1b \u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u9700\u8981\u76d1\u542c\u7684 fd\uff0c\u7b2c\u56db\u4e2a\u53c2\u6570\u662f\u544a\u8bc9\u5185\u6838\u9700\u8981\u76d1\u542c\u4ec0\u4e48\u4e8b\uff0cstruct epoll_event \u7ed3\u6784\u5982\u4e0b\uff1a typedef union epoll_data { void *ptr; int fd; __uint32_t u32; __uint64_t u64; } epoll_data_t; struct epoll_event { __uint32_t events; /* Epoll events */ epoll_data_t data; /* User data variable */ }; events \u53ef\u4ee5\u662f\u4ee5\u4e0b\u51e0\u4e2a\u5b8f\u7684\u96c6\u5408\uff1a EPOLLIN \uff1a\u8868\u793a\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u4ee5\u8bfb\uff08\u5305\u62ec\u5bf9\u7aef SOCKET \u6b63\u5e38\u5173\u95ed\uff09\uff1b EPOLLOUT\uff1a\u8868\u793a\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u4ee5\u5199\uff1b EPOLLPRI\uff1a\u8868\u793a\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6709\u7d27\u6025\u7684\u6570\u636e\u53ef\u8bfb\uff08\u8fd9\u91cc\u5e94\u8be5\u8868\u793a\u6709\u5e26\u5916\u6570\u636e\u5230\u6765\uff09\uff1b EPOLLERR\uff1a\u8868\u793a\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u53d1\u751f\u9519\u8bef\uff1b EPOLLHUP\uff1a\u8868\u793a\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u88ab\u6302\u65ad\uff1b EPOLLET\uff1a \u5c06 EPOLL \u8bbe\u4e3a\u8fb9\u7f18\u89e6\u53d1(Edge Triggered)\u6a21\u5f0f\uff0c\u8fd9\u662f\u76f8\u5bf9\u4e8e\u6c34\u5e73\u89e6\u53d1(Level Triggered)\u6765\u8bf4\u7684\u3002 EPOLLONESHOT\uff1a\u53ea\u76d1\u542c\u4e00\u6b21\u4e8b\u4ef6\uff0c\u5f53\u76d1\u542c\u5b8c\u8fd9\u6b21\u4e8b\u4ef6\u4e4b\u540e\uff0c\u5982\u679c\u8fd8\u9700\u8981\u7ee7\u7eed\u76d1\u542c\u8fd9\u4e2a socket \u7684\u8bdd\uff0c\u9700\u8981\u518d\u6b21\u628a\u8fd9\u4e2a socket \u52a0\u5165\u5230 EPOLL \u961f\u5217\u91cc","title":"3 struct epoll_event \u4ee3\u8868\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5404\u79cd\u8bf8\u5982\u53ef\u8bfb\u53ef\u5199\u4e8b\u4ef6"},{"location":"chapter_3/8_io_multiplexing/#4-struct-epoll_filefd","text":"struct epoll_filefd { struct file *file; int fd; } __packed;","title":"4 struct epoll_filefd"},{"location":"chapter_3/8_io_multiplexing/#5-struct-ep_pqueue","text":"/* Wrapper struct used by poll queueing */ struct ep_pqueue { poll_table pt; struct epitem *epi; };","title":"5 struct ep_pqueue"},{"location":"chapter_3/8_io_multiplexing/#6-struct-poll_table","text":"struct poll_table_struct; /* * structures and helpers for f_op->poll implementations */ typedef void (*poll_queue_proc)(struct file *, wait_queue_head_t *, struct poll_table_struct *); /* * Do not touch the structure directly, use the access functions * poll_does_not_wait() and poll_requested_events() instead. */ typedef struct poll_table_struct { poll_queue_proc _qproc; unsigned long _key; } poll_table;","title":"6 struct poll_table"},{"location":"chapter_3/9_linux_send_msg/","text":"\u6982\u8ff0 \u4e00 \u7f51\u7edc\u5b50\u7cfb\u7edf\u6838\u5fc3\u63cf\u8ff0\u7b26 struct msghdr struct socket VFS \u5c42\u9762\u7684 socket \u63cf\u8ff0\u7b26, \u6709\u5bf9\u5e94\u7684 struct socket_file_ops, \u7528\u4e8e\u5b58\u653e\u5bf9\u5e94\u7684 read,write,poll \u64cd\u4f5c struct sock \u534f\u8bae\u5c42\u9762\u7684 socket \u63cf\u8ff0\u7b26 struct proto \u534f\u8bae, \u6bd4\u5982 tcp \u534f\u8bae. \u6709\u5bf9\u5e94\u7684 struct proto_ops, \u53ef\u4ee5\u7528\u4e8e\u5b58\u653e\u534f\u8bae\u5bf9\u5e94\u7684 accept,poll,sendmsg,recvmsg \u51fd\u6570 1 sk_buff \u7ed3\u6784\u4f53 sk_buff \u662f Linux \u7f51\u7edc\u4e2d\u6700\u6838\u5fc3\u7684\u7ed3\u6784\u4f53\uff0c\u5b83\u7528\u6765\u7ba1\u7406\u548c\u63a7\u5236\u63a5\u6536\u6216\u53d1\u9001\u6570\u636e\u5305\u7684\u4fe1\u606f\u3002 \u5404\u5c42\u534f\u8bae\u90fd\u4f9d\u8d56\u4e8e sk_buff \u800c\u5b58\u5728\u3002 \u5185\u6838\u4e2d sk_buff \u7ed3\u6784\u4f53\u5728\u5404\u5c42\u534f\u8bae\u4e4b\u95f4\u4f20\u8f93\u4e0d\u662f\u7528\u62f7\u8d1d sk_buff \u7ed3\u6784\u4f53\uff0c\u800c\u662f\u901a\u8fc7\u589e\u52a0\u534f\u8bae\u5934\u548c\u79fb\u52a8\u6307\u9488\u6765\u64cd\u4f5c\u7684\u3002 \u5982\u679c\u662f\u4ece L4 \u4f20\u8f93\u5230 L2\uff0c\u5219\u662f\u901a\u8fc7\u5f80 sk_buff \u7ed3\u6784\u4f53\u4e2d\u589e\u52a0\u8be5\u5c42\u534f\u8bae\u5934\u6765\u64cd\u4f5c\uff1b\u5982\u679c\u662f\u4ece L4 \u5230 L2\uff0c\u5219\u662f\u901a\u8fc7\u79fb\u52a8 sk_buff \u7ed3\u6784\u4f53\u4e2d\u7684 data \u6307\u9488\u6765\u5b9e\u73b0\uff0c\u4e0d\u4f1a\u5220\u9664\u5404\u5c42\u534f\u8bae\u5934\u3002\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u63d0\u9ad8 CPU \u7684\u5de5\u4f5c\u6548\u7387\u3002 \u8be6\u7ec6\u4ee3\u7801 include/linux/skbuff.h (sk_buff \u7ed3\u6784\u5b9a\u4e49\u548c sk_buff \u5b8f) struct sk_buff { /* These two members must be first. */ struct sk_buff *next; struct sk_buff *prev; struct sock *sk; struct skb_timeval tstamp; struct net_device *dev; struct net_device *input_dev; union { struct tcphdr *th; struct udphdr *uh; struct icmphdr *icmph; struct igmphdr *igmph; struct iphdr *ipiph; struct ipv6hdr *ipv6h; unsigned char *raw; } h; union { struct iphdr *iph; struct ipv6hdr *ipv6h; struct arphdr *arph; unsigned char *raw; } nh; union { unsigned char *raw; } mac; struct dst_entry *dst; struct sec_path *sp; ....// \u66f4\u591a\u6210\u5458 } 2 struct proto tcp_prot \u5728\u53d1\u9001\u6570\u636e\u4e4b\u524d\uff0c\u6211\u4eec\u5f80\u5f80\u8fd8\u9700\u8981\u4e00\u4e2a\u5df2\u7ecf\u5efa\u7acb\u597d\u8fde\u63a5\u7684 socket\u3002 \u6211\u4eec\u5c31\u4ee5\u5f00\u7bc7\u670d\u52a1\u5668\u7f29\u5fae\u6e90\u4ee3\u7801\u4e2d\u63d0\u5230\u7684 accept \u4e3a\u4f8b\uff0c\u5f53 accept \u4e4b\u540e\uff0c\u8fdb\u7a0b\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 socket \u51fa\u6765\uff0c\u7136\u540e\u628a\u5b83\u653e\u5230\u5f53\u524d\u8fdb\u7a0b\u7684\u6253\u5f00\u6587\u4ef6\u5217\u8868\u4e2d\uff0c\u4e13\u95e8\u7528\u4e8e\u548c\u5bf9\u5e94\u7684\u5ba2\u6237\u7aef\u901a\u4fe1\u3002 \u5047\u8bbe\u670d\u52a1\u5668\u8fdb\u7a0b\u901a\u8fc7 accept \u548c\u5ba2\u6237\u7aef\u5efa\u7acb\u4e86\u4e24\u6761\u8fde\u63a5\uff0c\u6211\u4eec\u6765\u7b80\u5355\u770b\u4e00\u4e0b\u8fd9\u4e24\u6761\u8fde\u63a5\u548c\u8fdb\u7a0b\u7684\u5173\u8054\u5173\u7cfb\u3002 \u5176\u4e2d\u4ee3\u8868\u4e00\u6761\u8fde\u63a5\u7684 socket \u5185\u6838\u5bf9\u8c61\u66f4\u4e3a\u5177\u4f53\u4e00\u70b9\u7684\u7ed3\u6784\u56fe\u5982\u4e0b\u3002 \u4ece\u4e0a\u9762\u8fd9\u4e2a\u56fe\u5f97\u5230\u5982\u4e0b\u7ed3\u8bba: \u5185\u6838\u4e2d\u4e0d\u540c\u7684\u534f\u8bae\u662f\u4f7f\u7528 struct proto \u7ed3\u6784\u4f53\u8868\u793a\u7684, \u6bd4\u5982 tcp \u534f\u8bae\u662f\u4f7f\u7528 struct proto tcp_prot \u8868\u793a. \u6309\u7167\u7ecf\u5178\u7684 \u63cf\u8ff0\u7b26 + ops \u601d\u60f3, \u5bf9\u5e94\u534f\u8bae\u7684\u64cd\u4f5c\u80fd\u529b\u662f\u7528\u7ed3\u6784\u4f53 struct proto_ops \u8868\u793a, \u6bd4\u5982 tcp \u534f\u8bae\u7684\u4e00\u4e9b\u64cd\u4f5c\u662f\u7528 struct proto_ops inet_stream_ops \u7ed3\u6784\u4f53\u8868\u793a. struct proto udp_prot = { \u5b9a\u4e49\u5728 net/ipv4/udp.c:2650 struct proto tcp_prot = { \u5b9a\u4e49\u5728 net/ipv4/tcp_ipv4.c:2447 struct proto { \u5b9a\u4e49\u5728 include/net/sock.h:1048 3 \u7528\u6237\u7684 tcp \u53d1\u9001\u961f\u5217\u662f\u4e00\u4e2a\u94fe\u8868 skb \u662f struct sk_buff \u5bf9\u8c61\u7684\u7b80\u79f0\uff0c\u7528\u6237\u7684\u53d1\u9001\u961f\u5217\u5c31\u662f\u8be5\u5bf9\u8c61\u7ec4\u6210\u7684\u4e00\u4e2a\u94fe\u8868\u3002 4 struct sock \u8bb2\u89e3 struct socket \u662f\u5728\u865a\u62df\u6587\u4ef6\u7cfb\u7edf\u4e0a\u88ab\u521b\u5efa\u51fa\u6765\u7684\uff0c\u53ef\u4ee5\u628a\u5b83\u770b\u6210\u4e00\u4e2a\u6587\u4ef6\u3002 struct sock \u662f\u7f51\u7edc\u5c42\u5bf9\u4e8e socket \u7684\u8868\u793a\uff0c\u7ed3\u6784\u4f53\u6bd4\u8f83\u5e9e\u5927. socket \u548c sock \u662f\u540c\u4e00\u4e8b\u7269\u7684\u4e24\u4e2a\u4fa7\u9762\uff0c \u4e3a\u4ec0\u4e48\u4e0d\u628a\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\u5408\u5e76\u6210\u4e00\u4e2a\u5462? \u8fd9\u662f\u56e0\u4e3a socket \u662f inode \u7ed3\u6784\u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u5373\u628a inode \u7ed3 \u6784\u5185\u90e8\u7684\u4e00\u4e2a union \u7528\u4f5c socket \u7ed3\u6784\u3002\u7531\u4e8e\u63d2\u53e3\u64cd\u4f5c\u7684\u7279\u6b8a\u6027\uff0c\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u4e2d\u9700\u8981\u6709\u5927\u91cf\u7684\u7ed3\u6784\u6210\u5206\uff0c\u5982\u679c\u628a\u8fd9\u4e9b\u6210\u5206\u5168\u90e8\u653e\u5230 socket \u7ed3\u6784\u4e2d\uff0c\u5219 inode \u7ed3\u6784\u4e2d\u7684\u8fd9\u4e2a union \u5c31\u4f1a\u53d8\u5f97\u5f88\u5927\uff0c\u4ece\u800c inode \u7ed3\u6784\u4e5f\u4f1a\u53d8\u5f97\u5f88\u5927\uff0c\u800c\u5bf9\u4e8e\u5176\u4ed6\u6587\u4ef6\u7cfb\u7edf\u8fd9\u4e2a union \u662f\u4e0d\u9700\u8981\u8fd9\u4e48\u5927\u7684\uff0c \u6240\u4ee5\u4f1a\u9020\u6210\u5de8\u5927\u6d6a\u8d39\uff0c\u7cfb\u7edf\u4e2d\u4f7f\u7528 inode \u7ed3\u6784\u7684\u6570\u91cf\u8981\u8fdc\u8fdc\u8d85\u8fc7\u4f7f\u7528 socket \u7684\u6570\u91cf\uff0c\u6545\u89e3\u51b3\u7684\u529e\u6cd5\u5c31\u662f\u628a\u63d2\u53e3\u5206\u6210\u4e24\u90e8\u5206\uff0c\u628a\u4e0e\u6587\u4ef6\u7cfb \u7edf\u5173\u7cfb\u5bc6\u5207\u7684\u653e\u5728 socket \u7ed3\u6784\u4e2d\uff0c\u628a\u4e0e\u901a\u4fe1\u5173\u7cfb\u5bc6\u5207\u7684\u653e\u5728\u53e6\u4e00\u4e2a\u5355\u72ec\u7ed3\u6784 sock \u4e2d\uff1b struct inode { ..................... union { struct ext2_inode_info ext2_i; struct ext3_inode_info ext3_i; struct socket socket_i; ..................... } u; }; struct socket { socket_state state; // \u8be5state\u7528\u6765\u8868\u660e\u8be5socket\u7684\u5f53\u524d\u72b6\u6001 typedef enum { SS_FREE = 0, /* not allocated */ SS_UNCONNECTED, /* unconnected to any socket */ SS_CONNECTING, /* in process of connecting */ SS_CONNECTED, /* connected to socket */ SS_DISCONNECTING /* in process of disconnecting */ } socket_state; unsigned long flags; //\u8be5\u6210\u5458\u53ef\u80fd\u7684\u503c\u5982\u4e0b\uff0c\u8be5\u6807\u5fd7\u7528\u6765\u8bbe\u7f6esocket\u662f\u5426\u6b63\u5728\u5fd9\u788c #define SOCK_ASYNC_NOSPACE 0 #define SOCK_ASYNC_WAITDATA 1 #define SOCK_NOSPACE 2 struct proto_ops *ops; //\u4f9d\u636e\u534f\u8bae\u90a6\u5b9a\u5230\u8be5socket\u4e0a\u7684\u7279\u5b9a\u7684\u534f\u8bae\u65cf\u7684\u64cd\u4f5c\u51fd\u6570\u6307\u9488\uff0c\u4f8b\u5982IPv4 TCP\u5c31\u662finet_stream_ops struct inode *inode; //\u8868\u660e\u8be5socket\u6240\u5c5e\u7684inode struct fasync_struct *fasync_list; //\u5f02\u6b65\u5524\u9192\u961f\u5217 struct file *file; //file\u56de\u6307\u6307\u9488 struct sock *sk; //sock\u6307\u9488 wait_queue_head_t wait; //sock\u7684\u7b49\u5f85\u961f\u5217\uff0c\u5728TCP\u9700\u8981\u7b49\u5f85\u65f6\u5c31sleep\u5728\u8fd9\u4e2a\u961f\u5217\u4e0a short type; //\u8868\u793a\u8be5socket\u5728\u7279\u5b9a\u534f\u8bae\u65cf\u4e0b\u7684\u7c7b\u578b\u4f8b\u5982SOCK_STREAM, unsigned char passcred; //\u5728TCP\u5206\u6790\u4e2d\u65e0\u987b\u8003\u8651 }; 5 linux \u5b9e\u73b0\u8f6f\u4e2d\u65ad\u7684\u91cd\u8981\u6570\u636e\u7ed3\u6784 softnet_data \u662f\u7528\u4e8e\u5b9e\u73b0\u8f6f\u4e2d\u65ad\u7684\u91cd\u8981\u6570\u636e\u7ed3\u6784,softnet_data \u662f\u6bcf\u4e2a CPU \u90fd\u62e5\u6709\u7684\u4e00\u4e2a\u6570\u636e\u7ed3\u6784. \u4ee5\u4e0b\u662f\u57fa\u4e8e 2.6.32 \u7684\u6e90\u7801 struct softnet_data { struct Qdisc *output_queue; //\u53d1\u9001\u5e27\u961f\u5217 struct sk_buff_head input_pkt_queue; //\u63a5\u6536\u5e27\u961f\u5217\uff08\u5165\u53e3\u961f\u5217\uff09 struct list_head poll_list; //\u8fd9\u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868 struct sk_buff *completion_queue; struct napi_struct backlog; }; \u8bf4\u660e \uff1a \u53ef\u4ee5\u770b\u5230\u53d1\u9001\u5e27\u961f\u5217\u5e76\u4e0d\u662f skb \u7684\u94fe\u8868\uff0c\u800c\u662f Qdisc \u7684\u94fe\u8868\uff0c\u8fd9\u662f\u56e0\u4e3a\u53d1\u9001\u4e00\u822c\u9700\u8981 Qos \u6d41\u63a7\uff0c\u6240\u4ee5\u53d1\u9001\u5e27\u4f1a\u5b58\u5165\u76f8\u5e94 dev \u5173\u8054\u7684 Qdisc \u4e2d\uff08Qdisc \u4e2d\u6709 skb \u7684\u961f\u5217\uff09\uff0c\u8be6\u89c1\u201c\u540e\u9762\u94fe\u8def\u5c42\u6570\u636e\u5305\u53d1\u9001\u201d\u5206\u6790\u3002 poll_list \u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u662f\u4e00\u4e2a napi_struct \u7ed3\u6784\uff0c\u800c napi_struct \u53c8\u662f net_device \u7684\u6210\u5458\uff0c\u6240\u4ee5\u8fd9\u4e2a\u94fe\u8868\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a net_device \u94fe\u8868\uff0c\u8fd9\u4e9b net_device \u90fd\u5e26\u6709\u8f93\u5165\u5e27\u7b49\u7740\u88ab\u5904\u7406\u3002 input_pkt_queue \u662f\u8bbe\u5907\u9a71\u52a8\u5c06\u6570\u636e\u4ece\u7269\u7406\u4ecb\u8d28\u63a5\u6536\u540e\u5c01\u88c5\u6210 skb \u540e\u5b58\u653e\u7684\u7f13\u5b58\u961f\u5217\uff0c\u6240\u6709\u975e NAPI \u8bbe\u5907\u5171\u6709\u8fd9\u4e00\u4e2a\u8f93\u5165\u7f13\u5b58\u961f\u5217\uff0c\u800c NAPI \u8bbe\u5907\u6709\u81ea\u5df1\u7684\u79c1\u6709\u961f\u5217\u7528\u4e8e\u5b58\u653e\u8f93\u5165\u5305\u3002 \u4e00\u4e9b\u91cd\u8981\u6210\u5458 \u7f13\u51b2\u961f\u5217(\u53d1\u9001\u3001\u63a5\u6536) \u7f51\u5361\u786c\u4e2d\u65ad\u6d41\u7a0b \u6b65\u9aa4 \u51fd\u6570 \u662f\u5426\u5f00\u542f\u786c\u4e2d\u65ad 1 do_IRQ() 3 2 handle_IRQ_event() 3 3 \u9a71\u52a8\u7a0b\u5e8f\u63d0\u4f9b\u7684 rtc_interrupt 3 4 do_softirq 3 5 net_rx_action 3 Linux Net \u5b50\u7cfb\u7edf\u6838\u5fc3\u7ec4\u6210 1 \u5206\u5c42\u6a21\u578b 2 net_device_ops \u6838\u5fc3\u63cf\u8ff0\u7b26\u5185\u5305\u542b\u4e86\u9a71\u52a8\u7a0b\u5e8f\u586b\u5145\u7684\u5404\u7c7b\u51fd\u6570, \u5305\u62ec\u53d1\u9001\u3001\u63a5\u6536\u6570\u636e\u5305 \u4ee5 net/ethernet/intel/igb/igb_main.c (igb \u7f51\u5361\u9a71\u52a8) \u4e3a\u4f8b\u5b50, \u5305\u542b\u4e86 open , close , xmit , ioctl \u7b49\u5404\u79cd\u5b9e\u73b0 static const struct net_device_ops igb_netdev_ops = { .ndo_open = igb_open, .ndo_stop = igb_close, .ndo_start_xmit = igb_xmit_frame, .ndo_get_stats64 = igb_get_stats64, .ndo_set_rx_mode = igb_set_rx_mode, .ndo_set_mac_address = igb_set_mac, .ndo_change_mtu = igb_change_mtu, .ndo_do_ioctl = igb_ioctl, .ndo_tx_timeout = igb_tx_timeout, .ndo_validate_addr = eth_validate_addr, .ndo_vlan_rx_add_vid = igb_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = igb_vlan_rx_kill_vid, .ndo_set_vf_mac = igb_ndo_set_vf_mac, .ndo_set_vf_vlan = igb_ndo_set_vf_vlan, .ndo_set_vf_rate = igb_ndo_set_vf_bw, .ndo_set_vf_spoofchk = igb_ndo_set_vf_spoofchk, .ndo_get_vf_config = igb_ndo_get_vf_config, #ifdef CONFIG_NET_POLL_CONTROLLER .ndo_poll_controller = igb_netpoll, #endif .ndo_fix_features = igb_fix_features, .ndo_set_features = igb_set_features, }; 3 \u8f6f\u4e2d\u65ad\u7684\u5904\u7406\u51fd\u6570 net_rx_action() \u4e2d, \u8c03\u7528\u9a71\u52a8\u7a0b\u5e8f\u6ce8\u518c\u7684 poll\u51fd\u6570 . \u9a71\u52a8\u7a0b\u5e8f\u7684 poll\u51fd\u6570 \u662f\u6ce8\u518c\u5728 softnet_data \u6570\u636e\u7ed3\u6784\u7684 poll_list \u91cc\u7684 igb_open ---> __igb_open ---> igb_request_irq ---> igb_init_interrupt_scheme ---> igb_alloc_q_vectors ---> igb_alloc_q_vector ---> netif_napi_add ---> netif_napi_ad(adapter->netdev, &q_vector->napi,igb_poll, 64); \u8fdb\u884c\u4e86 igb_poll \u51fd\u6570\u7684\u6ce8\u518c. 4 \u786c\u4e2d\u65ad \u786c\u4e2d\u65ad\u4e5f\u662f\u7f51\u5361\u9a71\u52a8\u5411\u5185\u6838\u6ce8\u518c\u7684, igb_request_irq() \u91cc\u9762\u8c03\u7528\u5185\u6838 API request_irq() \u51fd\u6570 /** * igb_request_irq - initialize interrupts * @adapter: board private structure to initialize * * Attempts to configure interrupts using the best available * capabilities of the hardware and kernel. **/ static int igb_request_irq(struct igb_adapter *adapter) { struct net_device *netdev = adapter->netdev; struct pci_dev *pdev = adapter->pdev; int err = 0; if (adapter->flags & IGB_FLAG_HAS_MSIX) { err = igb_request_msix(adapter); if (!err) goto request_done; /* fall back to MSI */ igb_free_all_tx_resources(adapter); igb_free_all_rx_resources(adapter); igb_clear_interrupt_scheme(adapter); err = igb_init_interrupt_scheme(adapter, false); if (err) goto request_done; igb_setup_all_tx_resources(adapter); igb_setup_all_rx_resources(adapter); igb_configure(adapter); } igb_assign_vector(adapter->q_vector[0], 0); if (adapter->flags & IGB_FLAG_HAS_MSI) { err = request_irq(pdev->irq, igb_intr_msi, 0, netdev->name, adapter); if (!err) goto request_done; /* fall back to legacy interrupts */ igb_reset_interrupt_capability(adapter); adapter->flags &= ~IGB_FLAG_HAS_MSI; } err = request_irq(pdev->irq, igb_intr, IRQF_SHARED, netdev->name, adapter); if (err) dev_err(&pdev->dev, \"Error %d getting interrupt\\n\", err); request_done: return err; } 5 struct net \u7f51\u7edc\u547d\u540d\u7a7a\u95f4 struct net \u7ed3\u6784\u4f53\u8868\u793a\u7684\u5185\u6838\u4e2d\u7684\u7f51\u7edc\u547d\u540d\u7a7a\u95f4(net_namespace)\u3002\u5728 linux \u5185\u6838\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u7f51\u7edc\u8bbe\u5907(struct net_device)\u90fd\u6709\u4e00\u4e2a\u6240\u5c5e\u7684\u7f51\u7edc\u547d\u540d\u7a7a\u95f4 \u7f51\u7edc\u7cfb\u7edf\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u4f1a\u521d\u59cb\u5316\u4e00\u4e2a\u521d\u59cb\u7f51\u7edc\u547d\u540d\u7a7a\u95f4\uff0c\u5373 init_net \u547d\u540d\u7a7a\u95f4\u3002\u540e\u7eed\u521b\u5efa\u7684 net namespace \u547d\u540d\u7a7a\u95f4\u4f1a\u548c init_net \u4e00\u8d77\u901a\u8fc7 list \u9879\u7ec4\u7ec7\u8d77\u6765\uff0c\u4e14\u6bcf\u4e2a\u7f51\u7edc\u8bbe\u5907\u90fd\u5bf9\u5e94\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\uff0c\u540c\u4e00\u547d\u540d\u7a7a\u95f4\u4e0b\u7684\u7f51\u7edc\u8bbe\u5907\u901a\u8fc7 dev_base_head \u7ec4\u7ec7\u5728\u4e00\u8d77\u3002\u7ec4\u7ec7\u7ed3\u6784\u5982\u4e0b: struct net \u5185\u7684\u4e00\u4e9b\u91cd\u8981\u6210\u5458\uff1a struct net_device *loopback_dev; 6 struct net_device \u7f51\u7edc\u8bbe\u5907 \u5728 linux \u4e2d\u4f7f\u7528 struct net_device \u7ed3\u6784\u4f53\u6765\u63cf\u8ff0\u6bcf\u4e00\u4e2a\u7f51\u7edc\u8bbe\u5907\u3002\u540c\u65f6\u8fd9\u4e2a\u7528\u6765\u523b\u753b\u7f51\u7edc\u8bbe\u5907\u7684 struct net_device \u7ed3\u6784\u4f53\u5305\u542b\u7684\u5b57\u6bb5\u975e\u5e38\u7684\u591a\uff0c\u4ee5\u81f3\u4e8e\u5185\u6838\u7684\u5f00\u53d1\u8005\u90fd\u89c9\u5f97\u5728\u73b0\u5728\u7684 linux \u5185\u6838\u4e2d\uff0c\u8fd9\u4e2a struct net_device \u662f\u4e00\u4e2a\u5927\u7684\u9519\u8bef\u3002 \u5e76\u4e14\u6ce8\u518c net_device( register_netdev(struct net_device *dev) )\u662f\u6ce8\u518c\u5230\u4e00\u4e2a\u94fe\u8868\u4e2d struct net_device can be conceptually divided into two parts: visible and invisible. net_device \u7ed3\u6784\u4f53(\u6709\u4f17\u591a\u6210\u5458\uff0c\u603b\u4f53\u6765\u8bf4\u6210\u5458)\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a \u53ef\u89c1\u548c\u4e0d\u53ef\u89c1. ptype_base \u548c ptype_all ptype_base \u4e3a\u4e00\u4e2a hash \u8868,\u800c ptype_all \u4e3a\u4e00\u4e2a\u53cc\u5411\u94fe\u8868.\u6bcf\u4e00\u4e2a\u91cc\u9762\u6ce8\u518c\u7684\u534f\u8bae\u90fd\u7528\u4e00\u4e2a struct packet_type \u8868\u793a. packet_type \u6570\u636e\u7ed3\u6784\u5305\u542b\u534f\u8bae\u7c7b\u578b\u3001\u6307\u5411\u7f51\u7edc\u8bbe\u5907\u7684\u6307\u9488\u3001\u6307\u5411\u534f\u8bae\u7684\u63a5\u6536\u6570\u636e\u5904\u7406\u4f8b\u7a0b\u7684\u6307\u9488, \u5982\u4e0b\uff1a struct packet_type { unsigned short type; /*\u534f\u8bae\u7c7b\u578b*/ struct net_device *dev; int (*func) (struct sk_buff *, struct net_device *, struct packet_type *); void *data; /* Private to the packet type */ struct packet_type *next; }; func \u662f\u8be5\u7ed3\u6784\u4f53\u4e3b\u8981\u6210\u5458\uff0c\u6307\u5411\u7f51\u7edc\u5c42\u7684\u4e00\u4e2a\u51fd\u6570\u3002\u5982\u679c\u5206\u7ec4\u7684\u7c7b\u578b\u9002\u5f53\uff0c\u5c31\u5c06\u5176\u4f20\u7ed9\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570\uff0c\u5176\u4e2d ip \u5305\u7684\u5904\u7406\u51fd\u6570\u5c31\u662f ip_recv . netif_receive_skb() \u51fd\u6570\uff0c\u904d\u5386 ptype_all \u94fe\u8868\uff0c\u627e\u5230\u5408\u9002\u7684 packet_type , \u7136\u540e\u8c03\u7528\u5176 func \u6307\u9488\u6307\u5411\u7684\u5904\u7406\u51fd\u6570(\u6bd4\u5982 ip_recv() ) \u53c2\u8003\u6587\u6863 \u4e00\u4e07\u5b57\uff0c\u62c6\u89e3 Linux \u7f51\u7edc\u5305\u53d1\u9001\u8fc7\u7a0b \u56fe\u89e3 Linux \u7f51\u7edc\u5305\u63a5\u6536\u8fc7\u7a0b","title":"\u6982\u8ff0"},{"location":"chapter_3/9_linux_send_msg/#_1","text":"","title":"\u6982\u8ff0"},{"location":"chapter_3/9_linux_send_msg/#_2","text":"struct msghdr struct socket VFS \u5c42\u9762\u7684 socket \u63cf\u8ff0\u7b26, \u6709\u5bf9\u5e94\u7684 struct socket_file_ops, \u7528\u4e8e\u5b58\u653e\u5bf9\u5e94\u7684 read,write,poll \u64cd\u4f5c struct sock \u534f\u8bae\u5c42\u9762\u7684 socket \u63cf\u8ff0\u7b26 struct proto \u534f\u8bae, \u6bd4\u5982 tcp \u534f\u8bae. \u6709\u5bf9\u5e94\u7684 struct proto_ops, \u53ef\u4ee5\u7528\u4e8e\u5b58\u653e\u534f\u8bae\u5bf9\u5e94\u7684 accept,poll,sendmsg,recvmsg \u51fd\u6570","title":"\u4e00 \u7f51\u7edc\u5b50\u7cfb\u7edf\u6838\u5fc3\u63cf\u8ff0\u7b26"},{"location":"chapter_3/9_linux_send_msg/#1-sk_buff","text":"sk_buff \u662f Linux \u7f51\u7edc\u4e2d\u6700\u6838\u5fc3\u7684\u7ed3\u6784\u4f53\uff0c\u5b83\u7528\u6765\u7ba1\u7406\u548c\u63a7\u5236\u63a5\u6536\u6216\u53d1\u9001\u6570\u636e\u5305\u7684\u4fe1\u606f\u3002 \u5404\u5c42\u534f\u8bae\u90fd\u4f9d\u8d56\u4e8e sk_buff \u800c\u5b58\u5728\u3002 \u5185\u6838\u4e2d sk_buff \u7ed3\u6784\u4f53\u5728\u5404\u5c42\u534f\u8bae\u4e4b\u95f4\u4f20\u8f93\u4e0d\u662f\u7528\u62f7\u8d1d sk_buff \u7ed3\u6784\u4f53\uff0c\u800c\u662f\u901a\u8fc7\u589e\u52a0\u534f\u8bae\u5934\u548c\u79fb\u52a8\u6307\u9488\u6765\u64cd\u4f5c\u7684\u3002 \u5982\u679c\u662f\u4ece L4 \u4f20\u8f93\u5230 L2\uff0c\u5219\u662f\u901a\u8fc7\u5f80 sk_buff \u7ed3\u6784\u4f53\u4e2d\u589e\u52a0\u8be5\u5c42\u534f\u8bae\u5934\u6765\u64cd\u4f5c\uff1b\u5982\u679c\u662f\u4ece L4 \u5230 L2\uff0c\u5219\u662f\u901a\u8fc7\u79fb\u52a8 sk_buff \u7ed3\u6784\u4f53\u4e2d\u7684 data \u6307\u9488\u6765\u5b9e\u73b0\uff0c\u4e0d\u4f1a\u5220\u9664\u5404\u5c42\u534f\u8bae\u5934\u3002\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u63d0\u9ad8 CPU \u7684\u5de5\u4f5c\u6548\u7387\u3002","title":"1 sk_buff \u7ed3\u6784\u4f53"},{"location":"chapter_3/9_linux_send_msg/#_3","text":"include/linux/skbuff.h (sk_buff \u7ed3\u6784\u5b9a\u4e49\u548c sk_buff \u5b8f) struct sk_buff { /* These two members must be first. */ struct sk_buff *next; struct sk_buff *prev; struct sock *sk; struct skb_timeval tstamp; struct net_device *dev; struct net_device *input_dev; union { struct tcphdr *th; struct udphdr *uh; struct icmphdr *icmph; struct igmphdr *igmph; struct iphdr *ipiph; struct ipv6hdr *ipv6h; unsigned char *raw; } h; union { struct iphdr *iph; struct ipv6hdr *ipv6h; struct arphdr *arph; unsigned char *raw; } nh; union { unsigned char *raw; } mac; struct dst_entry *dst; struct sec_path *sp; ....// \u66f4\u591a\u6210\u5458 }","title":"\u8be6\u7ec6\u4ee3\u7801"},{"location":"chapter_3/9_linux_send_msg/#2-struct-proto-tcp_prot","text":"\u5728\u53d1\u9001\u6570\u636e\u4e4b\u524d\uff0c\u6211\u4eec\u5f80\u5f80\u8fd8\u9700\u8981\u4e00\u4e2a\u5df2\u7ecf\u5efa\u7acb\u597d\u8fde\u63a5\u7684 socket\u3002 \u6211\u4eec\u5c31\u4ee5\u5f00\u7bc7\u670d\u52a1\u5668\u7f29\u5fae\u6e90\u4ee3\u7801\u4e2d\u63d0\u5230\u7684 accept \u4e3a\u4f8b\uff0c\u5f53 accept \u4e4b\u540e\uff0c\u8fdb\u7a0b\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 socket \u51fa\u6765\uff0c\u7136\u540e\u628a\u5b83\u653e\u5230\u5f53\u524d\u8fdb\u7a0b\u7684\u6253\u5f00\u6587\u4ef6\u5217\u8868\u4e2d\uff0c\u4e13\u95e8\u7528\u4e8e\u548c\u5bf9\u5e94\u7684\u5ba2\u6237\u7aef\u901a\u4fe1\u3002 \u5047\u8bbe\u670d\u52a1\u5668\u8fdb\u7a0b\u901a\u8fc7 accept \u548c\u5ba2\u6237\u7aef\u5efa\u7acb\u4e86\u4e24\u6761\u8fde\u63a5\uff0c\u6211\u4eec\u6765\u7b80\u5355\u770b\u4e00\u4e0b\u8fd9\u4e24\u6761\u8fde\u63a5\u548c\u8fdb\u7a0b\u7684\u5173\u8054\u5173\u7cfb\u3002 \u5176\u4e2d\u4ee3\u8868\u4e00\u6761\u8fde\u63a5\u7684 socket \u5185\u6838\u5bf9\u8c61\u66f4\u4e3a\u5177\u4f53\u4e00\u70b9\u7684\u7ed3\u6784\u56fe\u5982\u4e0b\u3002 \u4ece\u4e0a\u9762\u8fd9\u4e2a\u56fe\u5f97\u5230\u5982\u4e0b\u7ed3\u8bba: \u5185\u6838\u4e2d\u4e0d\u540c\u7684\u534f\u8bae\u662f\u4f7f\u7528 struct proto \u7ed3\u6784\u4f53\u8868\u793a\u7684, \u6bd4\u5982 tcp \u534f\u8bae\u662f\u4f7f\u7528 struct proto tcp_prot \u8868\u793a. \u6309\u7167\u7ecf\u5178\u7684 \u63cf\u8ff0\u7b26 + ops \u601d\u60f3, \u5bf9\u5e94\u534f\u8bae\u7684\u64cd\u4f5c\u80fd\u529b\u662f\u7528\u7ed3\u6784\u4f53 struct proto_ops \u8868\u793a, \u6bd4\u5982 tcp \u534f\u8bae\u7684\u4e00\u4e9b\u64cd\u4f5c\u662f\u7528 struct proto_ops inet_stream_ops \u7ed3\u6784\u4f53\u8868\u793a. struct proto udp_prot = { \u5b9a\u4e49\u5728 net/ipv4/udp.c:2650 struct proto tcp_prot = { \u5b9a\u4e49\u5728 net/ipv4/tcp_ipv4.c:2447 struct proto { \u5b9a\u4e49\u5728 include/net/sock.h:1048","title":"2 struct proto tcp_prot"},{"location":"chapter_3/9_linux_send_msg/#3-tcp","text":"skb \u662f struct sk_buff \u5bf9\u8c61\u7684\u7b80\u79f0\uff0c\u7528\u6237\u7684\u53d1\u9001\u961f\u5217\u5c31\u662f\u8be5\u5bf9\u8c61\u7ec4\u6210\u7684\u4e00\u4e2a\u94fe\u8868\u3002","title":"3 \u7528\u6237\u7684 tcp \u53d1\u9001\u961f\u5217\u662f\u4e00\u4e2a\u94fe\u8868"},{"location":"chapter_3/9_linux_send_msg/#4-struct-sock","text":"struct socket \u662f\u5728\u865a\u62df\u6587\u4ef6\u7cfb\u7edf\u4e0a\u88ab\u521b\u5efa\u51fa\u6765\u7684\uff0c\u53ef\u4ee5\u628a\u5b83\u770b\u6210\u4e00\u4e2a\u6587\u4ef6\u3002 struct sock \u662f\u7f51\u7edc\u5c42\u5bf9\u4e8e socket \u7684\u8868\u793a\uff0c\u7ed3\u6784\u4f53\u6bd4\u8f83\u5e9e\u5927.","title":"4 struct sock \u8bb2\u89e3"},{"location":"chapter_3/9_linux_send_msg/#socket-sock","text":"\u8fd9\u662f\u56e0\u4e3a socket \u662f inode \u7ed3\u6784\u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u5373\u628a inode \u7ed3 \u6784\u5185\u90e8\u7684\u4e00\u4e2a union \u7528\u4f5c socket \u7ed3\u6784\u3002\u7531\u4e8e\u63d2\u53e3\u64cd\u4f5c\u7684\u7279\u6b8a\u6027\uff0c\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u4e2d\u9700\u8981\u6709\u5927\u91cf\u7684\u7ed3\u6784\u6210\u5206\uff0c\u5982\u679c\u628a\u8fd9\u4e9b\u6210\u5206\u5168\u90e8\u653e\u5230 socket \u7ed3\u6784\u4e2d\uff0c\u5219 inode \u7ed3\u6784\u4e2d\u7684\u8fd9\u4e2a union \u5c31\u4f1a\u53d8\u5f97\u5f88\u5927\uff0c\u4ece\u800c inode \u7ed3\u6784\u4e5f\u4f1a\u53d8\u5f97\u5f88\u5927\uff0c\u800c\u5bf9\u4e8e\u5176\u4ed6\u6587\u4ef6\u7cfb\u7edf\u8fd9\u4e2a union \u662f\u4e0d\u9700\u8981\u8fd9\u4e48\u5927\u7684\uff0c \u6240\u4ee5\u4f1a\u9020\u6210\u5de8\u5927\u6d6a\u8d39\uff0c\u7cfb\u7edf\u4e2d\u4f7f\u7528 inode \u7ed3\u6784\u7684\u6570\u91cf\u8981\u8fdc\u8fdc\u8d85\u8fc7\u4f7f\u7528 socket \u7684\u6570\u91cf\uff0c\u6545\u89e3\u51b3\u7684\u529e\u6cd5\u5c31\u662f\u628a\u63d2\u53e3\u5206\u6210\u4e24\u90e8\u5206\uff0c\u628a\u4e0e\u6587\u4ef6\u7cfb \u7edf\u5173\u7cfb\u5bc6\u5207\u7684\u653e\u5728 socket \u7ed3\u6784\u4e2d\uff0c\u628a\u4e0e\u901a\u4fe1\u5173\u7cfb\u5bc6\u5207\u7684\u653e\u5728\u53e6\u4e00\u4e2a\u5355\u72ec\u7ed3\u6784 sock \u4e2d\uff1b struct inode { ..................... union { struct ext2_inode_info ext2_i; struct ext3_inode_info ext3_i; struct socket socket_i; ..................... } u; }; struct socket { socket_state state; // \u8be5state\u7528\u6765\u8868\u660e\u8be5socket\u7684\u5f53\u524d\u72b6\u6001 typedef enum { SS_FREE = 0, /* not allocated */ SS_UNCONNECTED, /* unconnected to any socket */ SS_CONNECTING, /* in process of connecting */ SS_CONNECTED, /* connected to socket */ SS_DISCONNECTING /* in process of disconnecting */ } socket_state; unsigned long flags; //\u8be5\u6210\u5458\u53ef\u80fd\u7684\u503c\u5982\u4e0b\uff0c\u8be5\u6807\u5fd7\u7528\u6765\u8bbe\u7f6esocket\u662f\u5426\u6b63\u5728\u5fd9\u788c #define SOCK_ASYNC_NOSPACE 0 #define SOCK_ASYNC_WAITDATA 1 #define SOCK_NOSPACE 2 struct proto_ops *ops; //\u4f9d\u636e\u534f\u8bae\u90a6\u5b9a\u5230\u8be5socket\u4e0a\u7684\u7279\u5b9a\u7684\u534f\u8bae\u65cf\u7684\u64cd\u4f5c\u51fd\u6570\u6307\u9488\uff0c\u4f8b\u5982IPv4 TCP\u5c31\u662finet_stream_ops struct inode *inode; //\u8868\u660e\u8be5socket\u6240\u5c5e\u7684inode struct fasync_struct *fasync_list; //\u5f02\u6b65\u5524\u9192\u961f\u5217 struct file *file; //file\u56de\u6307\u6307\u9488 struct sock *sk; //sock\u6307\u9488 wait_queue_head_t wait; //sock\u7684\u7b49\u5f85\u961f\u5217\uff0c\u5728TCP\u9700\u8981\u7b49\u5f85\u65f6\u5c31sleep\u5728\u8fd9\u4e2a\u961f\u5217\u4e0a short type; //\u8868\u793a\u8be5socket\u5728\u7279\u5b9a\u534f\u8bae\u65cf\u4e0b\u7684\u7c7b\u578b\u4f8b\u5982SOCK_STREAM, unsigned char passcred; //\u5728TCP\u5206\u6790\u4e2d\u65e0\u987b\u8003\u8651 };","title":"socket \u548c sock \u662f\u540c\u4e00\u4e8b\u7269\u7684\u4e24\u4e2a\u4fa7\u9762\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u628a\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\u5408\u5e76\u6210\u4e00\u4e2a\u5462?"},{"location":"chapter_3/9_linux_send_msg/#5-linux-softnet_data","text":"\u662f\u7528\u4e8e\u5b9e\u73b0\u8f6f\u4e2d\u65ad\u7684\u91cd\u8981\u6570\u636e\u7ed3\u6784,softnet_data \u662f\u6bcf\u4e2a CPU \u90fd\u62e5\u6709\u7684\u4e00\u4e2a\u6570\u636e\u7ed3\u6784. \u4ee5\u4e0b\u662f\u57fa\u4e8e 2.6.32 \u7684\u6e90\u7801 struct softnet_data { struct Qdisc *output_queue; //\u53d1\u9001\u5e27\u961f\u5217 struct sk_buff_head input_pkt_queue; //\u63a5\u6536\u5e27\u961f\u5217\uff08\u5165\u53e3\u961f\u5217\uff09 struct list_head poll_list; //\u8fd9\u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868 struct sk_buff *completion_queue; struct napi_struct backlog; }; \u8bf4\u660e \uff1a \u53ef\u4ee5\u770b\u5230\u53d1\u9001\u5e27\u961f\u5217\u5e76\u4e0d\u662f skb \u7684\u94fe\u8868\uff0c\u800c\u662f Qdisc \u7684\u94fe\u8868\uff0c\u8fd9\u662f\u56e0\u4e3a\u53d1\u9001\u4e00\u822c\u9700\u8981 Qos \u6d41\u63a7\uff0c\u6240\u4ee5\u53d1\u9001\u5e27\u4f1a\u5b58\u5165\u76f8\u5e94 dev \u5173\u8054\u7684 Qdisc \u4e2d\uff08Qdisc \u4e2d\u6709 skb \u7684\u961f\u5217\uff09\uff0c\u8be6\u89c1\u201c\u540e\u9762\u94fe\u8def\u5c42\u6570\u636e\u5305\u53d1\u9001\u201d\u5206\u6790\u3002 poll_list \u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u662f\u4e00\u4e2a napi_struct \u7ed3\u6784\uff0c\u800c napi_struct \u53c8\u662f net_device \u7684\u6210\u5458\uff0c\u6240\u4ee5\u8fd9\u4e2a\u94fe\u8868\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a net_device \u94fe\u8868\uff0c\u8fd9\u4e9b net_device \u90fd\u5e26\u6709\u8f93\u5165\u5e27\u7b49\u7740\u88ab\u5904\u7406\u3002 input_pkt_queue \u662f\u8bbe\u5907\u9a71\u52a8\u5c06\u6570\u636e\u4ece\u7269\u7406\u4ecb\u8d28\u63a5\u6536\u540e\u5c01\u88c5\u6210 skb \u540e\u5b58\u653e\u7684\u7f13\u5b58\u961f\u5217\uff0c\u6240\u6709\u975e NAPI \u8bbe\u5907\u5171\u6709\u8fd9\u4e00\u4e2a\u8f93\u5165\u7f13\u5b58\u961f\u5217\uff0c\u800c NAPI \u8bbe\u5907\u6709\u81ea\u5df1\u7684\u79c1\u6709\u961f\u5217\u7528\u4e8e\u5b58\u653e\u8f93\u5165\u5305\u3002","title":"5 linux \u5b9e\u73b0\u8f6f\u4e2d\u65ad\u7684\u91cd\u8981\u6570\u636e\u7ed3\u6784 softnet_data"},{"location":"chapter_3/9_linux_send_msg/#_4","text":"\u7f13\u51b2\u961f\u5217(\u53d1\u9001\u3001\u63a5\u6536)","title":"\u4e00\u4e9b\u91cd\u8981\u6210\u5458"},{"location":"chapter_3/9_linux_send_msg/#_5","text":"\u6b65\u9aa4 \u51fd\u6570 \u662f\u5426\u5f00\u542f\u786c\u4e2d\u65ad 1 do_IRQ() 3 2 handle_IRQ_event() 3 3 \u9a71\u52a8\u7a0b\u5e8f\u63d0\u4f9b\u7684 rtc_interrupt 3 4 do_softirq 3 5 net_rx_action 3","title":"\u7f51\u5361\u786c\u4e2d\u65ad\u6d41\u7a0b"},{"location":"chapter_3/9_linux_send_msg/#linux-net","text":"1 \u5206\u5c42\u6a21\u578b 2 net_device_ops \u6838\u5fc3\u63cf\u8ff0\u7b26\u5185\u5305\u542b\u4e86\u9a71\u52a8\u7a0b\u5e8f\u586b\u5145\u7684\u5404\u7c7b\u51fd\u6570, \u5305\u62ec\u53d1\u9001\u3001\u63a5\u6536\u6570\u636e\u5305 \u4ee5 net/ethernet/intel/igb/igb_main.c (igb \u7f51\u5361\u9a71\u52a8) \u4e3a\u4f8b\u5b50, \u5305\u542b\u4e86 open , close , xmit , ioctl \u7b49\u5404\u79cd\u5b9e\u73b0 static const struct net_device_ops igb_netdev_ops = { .ndo_open = igb_open, .ndo_stop = igb_close, .ndo_start_xmit = igb_xmit_frame, .ndo_get_stats64 = igb_get_stats64, .ndo_set_rx_mode = igb_set_rx_mode, .ndo_set_mac_address = igb_set_mac, .ndo_change_mtu = igb_change_mtu, .ndo_do_ioctl = igb_ioctl, .ndo_tx_timeout = igb_tx_timeout, .ndo_validate_addr = eth_validate_addr, .ndo_vlan_rx_add_vid = igb_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = igb_vlan_rx_kill_vid, .ndo_set_vf_mac = igb_ndo_set_vf_mac, .ndo_set_vf_vlan = igb_ndo_set_vf_vlan, .ndo_set_vf_rate = igb_ndo_set_vf_bw, .ndo_set_vf_spoofchk = igb_ndo_set_vf_spoofchk, .ndo_get_vf_config = igb_ndo_get_vf_config, #ifdef CONFIG_NET_POLL_CONTROLLER .ndo_poll_controller = igb_netpoll, #endif .ndo_fix_features = igb_fix_features, .ndo_set_features = igb_set_features, }; 3 \u8f6f\u4e2d\u65ad\u7684\u5904\u7406\u51fd\u6570 net_rx_action() \u4e2d, \u8c03\u7528\u9a71\u52a8\u7a0b\u5e8f\u6ce8\u518c\u7684 poll\u51fd\u6570 . \u9a71\u52a8\u7a0b\u5e8f\u7684 poll\u51fd\u6570 \u662f\u6ce8\u518c\u5728 softnet_data \u6570\u636e\u7ed3\u6784\u7684 poll_list \u91cc\u7684 igb_open ---> __igb_open ---> igb_request_irq ---> igb_init_interrupt_scheme ---> igb_alloc_q_vectors ---> igb_alloc_q_vector ---> netif_napi_add ---> netif_napi_ad(adapter->netdev, &q_vector->napi,igb_poll, 64); \u8fdb\u884c\u4e86 igb_poll \u51fd\u6570\u7684\u6ce8\u518c. 4 \u786c\u4e2d\u65ad \u786c\u4e2d\u65ad\u4e5f\u662f\u7f51\u5361\u9a71\u52a8\u5411\u5185\u6838\u6ce8\u518c\u7684, igb_request_irq() \u91cc\u9762\u8c03\u7528\u5185\u6838 API request_irq() \u51fd\u6570 /** * igb_request_irq - initialize interrupts * @adapter: board private structure to initialize * * Attempts to configure interrupts using the best available * capabilities of the hardware and kernel. **/ static int igb_request_irq(struct igb_adapter *adapter) { struct net_device *netdev = adapter->netdev; struct pci_dev *pdev = adapter->pdev; int err = 0; if (adapter->flags & IGB_FLAG_HAS_MSIX) { err = igb_request_msix(adapter); if (!err) goto request_done; /* fall back to MSI */ igb_free_all_tx_resources(adapter); igb_free_all_rx_resources(adapter); igb_clear_interrupt_scheme(adapter); err = igb_init_interrupt_scheme(adapter, false); if (err) goto request_done; igb_setup_all_tx_resources(adapter); igb_setup_all_rx_resources(adapter); igb_configure(adapter); } igb_assign_vector(adapter->q_vector[0], 0); if (adapter->flags & IGB_FLAG_HAS_MSI) { err = request_irq(pdev->irq, igb_intr_msi, 0, netdev->name, adapter); if (!err) goto request_done; /* fall back to legacy interrupts */ igb_reset_interrupt_capability(adapter); adapter->flags &= ~IGB_FLAG_HAS_MSI; } err = request_irq(pdev->irq, igb_intr, IRQF_SHARED, netdev->name, adapter); if (err) dev_err(&pdev->dev, \"Error %d getting interrupt\\n\", err); request_done: return err; } 5 struct net \u7f51\u7edc\u547d\u540d\u7a7a\u95f4 struct net \u7ed3\u6784\u4f53\u8868\u793a\u7684\u5185\u6838\u4e2d\u7684\u7f51\u7edc\u547d\u540d\u7a7a\u95f4(net_namespace)\u3002\u5728 linux \u5185\u6838\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u7f51\u7edc\u8bbe\u5907(struct net_device)\u90fd\u6709\u4e00\u4e2a\u6240\u5c5e\u7684\u7f51\u7edc\u547d\u540d\u7a7a\u95f4 \u7f51\u7edc\u7cfb\u7edf\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u4f1a\u521d\u59cb\u5316\u4e00\u4e2a\u521d\u59cb\u7f51\u7edc\u547d\u540d\u7a7a\u95f4\uff0c\u5373 init_net \u547d\u540d\u7a7a\u95f4\u3002\u540e\u7eed\u521b\u5efa\u7684 net namespace \u547d\u540d\u7a7a\u95f4\u4f1a\u548c init_net \u4e00\u8d77\u901a\u8fc7 list \u9879\u7ec4\u7ec7\u8d77\u6765\uff0c\u4e14\u6bcf\u4e2a\u7f51\u7edc\u8bbe\u5907\u90fd\u5bf9\u5e94\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\uff0c\u540c\u4e00\u547d\u540d\u7a7a\u95f4\u4e0b\u7684\u7f51\u7edc\u8bbe\u5907\u901a\u8fc7 dev_base_head \u7ec4\u7ec7\u5728\u4e00\u8d77\u3002\u7ec4\u7ec7\u7ed3\u6784\u5982\u4e0b: struct net \u5185\u7684\u4e00\u4e9b\u91cd\u8981\u6210\u5458\uff1a struct net_device *loopback_dev; 6 struct net_device \u7f51\u7edc\u8bbe\u5907 \u5728 linux \u4e2d\u4f7f\u7528 struct net_device \u7ed3\u6784\u4f53\u6765\u63cf\u8ff0\u6bcf\u4e00\u4e2a\u7f51\u7edc\u8bbe\u5907\u3002\u540c\u65f6\u8fd9\u4e2a\u7528\u6765\u523b\u753b\u7f51\u7edc\u8bbe\u5907\u7684 struct net_device \u7ed3\u6784\u4f53\u5305\u542b\u7684\u5b57\u6bb5\u975e\u5e38\u7684\u591a\uff0c\u4ee5\u81f3\u4e8e\u5185\u6838\u7684\u5f00\u53d1\u8005\u90fd\u89c9\u5f97\u5728\u73b0\u5728\u7684 linux \u5185\u6838\u4e2d\uff0c\u8fd9\u4e2a struct net_device \u662f\u4e00\u4e2a\u5927\u7684\u9519\u8bef\u3002 \u5e76\u4e14\u6ce8\u518c net_device( register_netdev(struct net_device *dev) )\u662f\u6ce8\u518c\u5230\u4e00\u4e2a\u94fe\u8868\u4e2d struct net_device can be conceptually divided into two parts: visible and invisible. net_device \u7ed3\u6784\u4f53(\u6709\u4f17\u591a\u6210\u5458\uff0c\u603b\u4f53\u6765\u8bf4\u6210\u5458)\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a \u53ef\u89c1\u548c\u4e0d\u53ef\u89c1.","title":"Linux Net \u5b50\u7cfb\u7edf\u6838\u5fc3\u7ec4\u6210"},{"location":"chapter_3/9_linux_send_msg/#ptype_base-ptype_all","text":"ptype_base \u4e3a\u4e00\u4e2a hash \u8868,\u800c ptype_all \u4e3a\u4e00\u4e2a\u53cc\u5411\u94fe\u8868.\u6bcf\u4e00\u4e2a\u91cc\u9762\u6ce8\u518c\u7684\u534f\u8bae\u90fd\u7528\u4e00\u4e2a struct packet_type \u8868\u793a. packet_type \u6570\u636e\u7ed3\u6784\u5305\u542b\u534f\u8bae\u7c7b\u578b\u3001\u6307\u5411\u7f51\u7edc\u8bbe\u5907\u7684\u6307\u9488\u3001\u6307\u5411\u534f\u8bae\u7684\u63a5\u6536\u6570\u636e\u5904\u7406\u4f8b\u7a0b\u7684\u6307\u9488, \u5982\u4e0b\uff1a struct packet_type { unsigned short type; /*\u534f\u8bae\u7c7b\u578b*/ struct net_device *dev; int (*func) (struct sk_buff *, struct net_device *, struct packet_type *); void *data; /* Private to the packet type */ struct packet_type *next; }; func \u662f\u8be5\u7ed3\u6784\u4f53\u4e3b\u8981\u6210\u5458\uff0c\u6307\u5411\u7f51\u7edc\u5c42\u7684\u4e00\u4e2a\u51fd\u6570\u3002\u5982\u679c\u5206\u7ec4\u7684\u7c7b\u578b\u9002\u5f53\uff0c\u5c31\u5c06\u5176\u4f20\u7ed9\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570\uff0c\u5176\u4e2d ip \u5305\u7684\u5904\u7406\u51fd\u6570\u5c31\u662f ip_recv . netif_receive_skb() \u51fd\u6570\uff0c\u904d\u5386 ptype_all \u94fe\u8868\uff0c\u627e\u5230\u5408\u9002\u7684 packet_type , \u7136\u540e\u8c03\u7528\u5176 func \u6307\u9488\u6307\u5411\u7684\u5904\u7406\u51fd\u6570(\u6bd4\u5982 ip_recv() )","title":"ptype_base \u548c ptype_all"},{"location":"chapter_3/9_linux_send_msg/#_6","text":"\u4e00\u4e07\u5b57\uff0c\u62c6\u89e3 Linux \u7f51\u7edc\u5305\u53d1\u9001\u8fc7\u7a0b \u56fe\u89e3 Linux \u7f51\u7edc\u5305\u63a5\u6536\u8fc7\u7a0b","title":"\u53c2\u8003\u6587\u6863"},{"location":"chapter_4/10_linux_context_switch/","text":"\u6982\u8ff0 \u672c\u7bc7\u8bb2\u8ff0 context switch \u548c mode switch \u4e00 \u6bcf\u4e2a\u65b0\u7684 task_struct \u5185\u6838\u81f3\u5c11\u8981\u5173\u6ce8\u4e09\u4e2a\u6838\u5fc3\u6a21\u578b \u6bcf\u6b21\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 task_struct, \u5185\u6838\u5c42\u9762\u90fd\u81f3\u5c11\u521b\u5efa\u4e09\u4e2a\u6838\u5fc3\u6a21\u578b: \u5185\u6838\u6808 , task_struct \u7ed3\u6784\u4f53, thread_info \u7ed3\u6784\u4f53, \u6211\u4eec\u91cd\u70b9\u5173\u6ce8 \u5185\u6838\u6808 , task_struct \u7ed3\u6784\u4f53, thread_info \u7ed3\u6784\u4f53 \u5176\u4e2d \u7528\u6237\u6808 \u5c06\u5728\u672a\u6765\u8ba8\u8bba 1 thread_info \u7ed3\u6784\u4f53 A \u8fdb\u7a0b\u5e73\u53f0\u76f8\u5173\u4fe1\u606f--thread_info struct thread_info \u662f\u8bb0\u5f55\u90e8\u5206\u8fdb\u7a0b\u4fe1\u606f\u7684\u7ed3\u6784\u4f53(\u5177\u4f53\u6765\u8bf4\u662f\u5e73\u53f0\u76f8\u5173\u7684\u8fdb\u7a0b\u4fe1\u606f\uff0c\u8be5\u7ed3\u6784\u4f53\u662f\u5e73\u53f0\u76f8\u5173\u7684)\uff0c\u5176\u4e2d\u5305\u62ec\u4e86\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u4fe1\u606f: struct thread_info { unsigned long flags; /* low level flags */ int preempt_count; /* 0 => preemptable, <0 => bug */ mm_segment_t addr_limit; /* address limit */ struct task_struct *task; /* main task structure */ __u32 cpu; /* cpu */ __u32 cpu_domain; /* cpu domain */ ... struct cpu_context_save cpu_context; /* cpu context */ __u32 syscall; /* syscall number */ ... }; \u5173\u952e\u662f\u5176\u4e2d\u7684 task \u6210\u5458\uff0c\u6307\u5411\u7684\u662f\u6240\u521b\u5efa\u7684\u8fdb\u7a0b\u7684 struct task_struct \u7ed3\u6784\u4f53\u3002 B \u4e3a\u4ec0\u4e48\u9700\u8981 thread_info \u5185\u6838\u8fd8\u9700\u8981\u5b58\u50a8\u6bcf\u4e2a\u8fdb\u7a0b\u7684 PCB \u4fe1\u606f, linux \u5185\u6838\u662f\u652f\u6301\u4e0d\u540c\u4f53\u7cfb\u7684\u7684, \u4f46\u662f\u4e0d\u540c\u7684\u4f53\u7cfb\u7ed3\u6784\u53ef\u80fd\u8fdb\u7a0b\u9700\u8981\u5b58\u50a8\u7684\u4fe1\u606f\u4e0d\u5c3d\u76f8\u540c, \u8fd9\u5c31\u9700\u8981\u6211\u4eec\u5b9e\u73b0\u4e00\u79cd\u901a\u7528\u7684\u65b9\u5f0f, \u6211\u4eec\u5c06\u4f53\u7cfb\u7ed3\u6784\u76f8\u5173\u7684\u90e8\u5206\u548c\u65e0\u5173\u7684\u90e8\u95e8\u8fdb\u884c\u5206\u79bb\u3002 \u7528\u4e00\u79cd\u901a\u7528\u7684\u65b9\u5f0f\u6765\u63cf\u8ff0\u8fdb\u7a0b, \u8fd9\u5c31\u662f struct task_struct, \u800c thread_info \u5c31\u4fdd\u5b58\u4e86\u7279\u5b9a\u4f53\u7cfb\u7ed3\u6784\u7684\u6c47\u7f16\u4ee3\u7801\u6bb5\u9700\u8981\u8bbf\u95ee\u7684\u90a3\u90e8\u5206\u8fdb\u7a0b\u7684\u6570\u636e,\u6211\u4eec\u5728 thread_info \u4e2d\u5d4c\u5165\u6307\u5411 task_struct \u7684\u6307\u9488, \u5219\u6211\u4eec\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u901a\u8fc7 thread_info \u6765\u67e5\u627e task_struct\u3002 2 \u5185\u6838\u6808 \u5185\u6838\u6808\u901a\u5e38\u662f 2 \u4e2a page \u5927\u5c0f\u3002\u56e0\u4e3a 32 \u4f4d\u548c 64 \u4f4d\u4f53\u7cfb\u7ed3\u6784\u7684\u9875\u9762\u5927\u5c0f\u5206\u522b\u662f 4KB \u548c 8KB\uff0c\u6240\u4ee5\u901a\u5e38\u5b83\u4eec\u7684\u5185\u6838 \u6808 \u7684 \u5927\u5c0f \u5206 \u522b \u662f 8 K B \u548c 1 6 K B\u3002 \u5176\u4e2d \u5185\u6838\u6808 \u662f\u4f7f\u7528 thread_union \u7ed3\u6784\u4f53\u8868\u793a, \u5e76\u4e14 thread_info \u7ed3\u6784\u4f53\u4f4d\u4e8e\u6808\u5e95\u90e8. \u8fdb\u7a0b\u63cf\u8ff0\u7b26 task_struct \u4e2d\u6709\u4e00\u4e2a\u6210\u5458\uff1avoid *stack;\u5c31\u662f\u6307\u5411\u8be5\u8fdb\u7a0b\u5185\u6838\u6808\u7684 \u6808\u5e95 \u3002 union thread_union { #ifndef CONFIG_ARCH_TASK_STRUCT_ON_STACK struct task_struct task; #endif #ifndef CONFIG_THREAD_INFO_IN_TASK struct thread_info thread_info; #endif unsigned long stack[THREAD_SIZE/sizeof(long)]; }; 2.1 \u5185\u6838\u6808\u4f5c\u7528 \u5728\u9677\u5165\u5185\u6838\u540e\uff0c\u7cfb\u7edf\u8c03\u7528\u4e2d\u4e5f\u662f\u5b58\u5728\u51fd\u6570\u8c03\u7528\u548c\u81ea\u52a8\u53d8\u91cf\uff0c\u8fd9\u4e9b\u90fd\u9700\u8981\u6808\u652f\u6301\u3002\u7528\u6237\u7a7a\u95f4\u7684\u6808\u663e\u7136\u4e0d\u5b89\u5168\uff0c\u9700\u8981\u5185\u6838\u6808\u7684\u652f\u6301\u3002 2.2 \u4e3a\u4ec0\u4e48\u9700\u8981\u5355\u72ec\u7684\u8fdb\u7a0b\u5185\u6838\u6808\uff1f \u6240\u6709\u8fdb\u7a0b\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u90fd\u53ef\u80fd\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u9677\u5165\u5185\u6838\u6001\u7ee7\u7eed\u6267\u884c\u3002\u5047\u8bbe\u7b2c\u4e00\u4e2a\u8fdb\u7a0b A \u9677\u5165\u5185\u6838\u6001\u6267\u884c\u7684\u65f6\u5019\uff0c\u9700\u8981\u7b49\u5f85\u8bfb\u53d6\u7f51\u5361\u7684\u6570\u636e\uff0c\u4e3b\u52a8\u8c03\u7528 schedule() \u8ba9\u51fa CPU\uff1b\u6b64\u65f6\u8c03\u5ea6\u5668\u5524\u9192\u4e86\u53e6\u4e00\u4e2a\u8fdb\u7a0b B\uff0c\u78b0\u5de7\u8fdb\u7a0b B \u4e5f\u9700\u8981\u7cfb\u7edf\u8c03\u7528\u8fdb\u5165\u5185\u6838\u6001\u3002\u90a3\u95ee\u9898\u5c31\u6765\u4e86\uff0c\u5982\u679c\u5185\u6838\u6808\u53ea\u6709\u4e00\u4e2a\uff0c\u90a3\u8fdb\u7a0b B \u8fdb\u5165\u5185\u6838\u6001\u7684\u65f6\u5019\u4ea7\u751f\u7684\u538b\u6808\u64cd\u4f5c\uff0c\u5fc5\u7136\u4f1a\u7834\u574f\u6389\u8fdb\u7a0b A \u5df2\u6709\u7684\u5185\u6838\u6808\u6570\u636e\uff1b\u4e00\u4f46\u8fdb\u7a0b A \u7684\u5185\u6838\u6808\u6570\u636e\u88ab\u7834\u574f\uff0c\u5f88\u53ef\u80fd\u5bfc\u81f4\u8fdb\u7a0b A \u7684\u5185\u6838\u6001\u65e0\u6cd5\u6b63\u786e\u8fd4\u56de\u5230\u5bf9\u5e94\u7684\u7528\u6237\u6001\u4e86\u3002 \u4e8c context switch \u548c mode switch \u533a\u522b At a high level, there are two separate mechanisms to understand. The first is the kernel entry/exit mechanism: this switches a single running thread from running usermode code to running kernel code in the context of that thread, and back again. The second is the context switch mechanism itself, which switches in kernel mode from running in the context of one thread to another. So, when Thread A calls sched_yield() and is replaced by Thread B, what happens is: Thread A enters the kernel, changing from user mode to kernel mode; Thread A in the kernel context-switches to Thread B in the kernel; Thread B exits the kernel, changing from kernel mode back to user mode. Each user thread has both a user-mode stack and a kernel-mode stack. When a thread enters the kernel, the current value of the user-mode stack (SS:ESP) and instruction pointer (CS:EIP) are saved to the thread\u2019s kernel-mode stack, and the CPU switches to the kernel-mode stack \u2013 with the int $80 syscall mechanism, this is done by the CPU itself. The remaining register values and flags are then also saved to the kernel stack. When a thread returns from the kernel to user-mode, the register values and flags are popped from the kernel-mode stack, then the user-mode stack and instruction pointer values are restored from the saved values on the kernel-mode stack. When a thread context-switches, it calls into the scheduler (the scheduler does not run as a separate thread \u2013 it always runs in the context of the current thread). The scheduler code selects a process to run next, and calls the switchto() function. This function essentially just switches the kernel stacks \u2013 it saves the current value of the stack pointer into the TCB for the current thread (called struct taskstruct in Linux), and loads a previously-saved stack pointer from the TCB for the next thread. At this point it also saves and restores some other thread state that isn\u2019t usually used by the kernel \u2013 things like floating point/SSE registers. So you can see that the core user-mode state of a thread isn\u2019t saved and restored at context-switch time \u2013 it\u2019s saved and restored to the thread\u2019s kernel stack when you enter and leave the kernel. The context-switch code doesn\u2019t have to worry about clobbering the user-mode register values \u2013 those are already safely saved away in the kernel stack by that point. \u53c2\u8003 1 mode switch mode switch \u662f\u4e00\u4e2a\u8fd0\u884c\u7684 task \u4ece user-mode \u5207\u6362\u5230 kernel-mode\uff0c\u6216\u8005\u5207\u6362\u56de\u6765\u3002 2 context switch context switch \u4e00\u5b9a\u53d1\u751f\u5728 kernel mode\uff0c\u8fdb\u884c task \u7684\u5207\u6362\u3002\u56e0\u6b64 context switch \u65f6\uff0c\u4e0d\u7528\u62c5\u5fc3\u628a user-space \u7684\u6570\u636e\u5f04\u4e22\u3002 \u6bcf\u4e2a\u7528\u6237\u7684 task_struct \u6709\u4e00\u4e2a user-mode stack \u548c\u4e00\u4e2a kernel-mode stack\uff0c\u5f53\u4ece user-mode \u5207\u6362\u5230 kernel-mode \u65f6\uff0c\u5bc4\u5b58\u5668\u7684\u503c\u8981\u4fdd\u5b58\u5230 kernel-mode stack\uff0c\u53cd\u4e4b\uff0c\u4ece kernel-mode \u5207\u6362\u56de user-mode \u65f6\uff0c\u8981\u628a\u5bc4\u5b58\u5668\u7684\u503c\u6062\u590d\u51fa\u6765\u3002\u8fd9\u662f CPU \u81ea\u52a8\u505a\u7684\u3002(\u56e0\u6b64\u80af\u5b9a\u6bd4 context switch \u6210\u672c\u8981\u4f4e) \u8fdb\u884c\u201ccontext switch\u201d\u65f6\uff0cscheduler \u5c06\u5f53\u524d kernel-mode stack \u4e2d\u7684\u503c\u4fdd\u5b58\u5728 task_struct \u4e2d\uff0c\u5e76\u628a\u4e0b\u4e00\u4e2a\u5c06\u8981\u8fd0\u884c task \u7684 task_struct \u503c\u6062\u590d\u5230 kernel-mode stack \u4e2d\uff0c \uff08scheduler \u662f\u5185\u6838\u4ee3\u7801\uff09\u8fd9\u6837\uff0c\u4ece kernel-mode \u8fd4\u56de\u5230 user-mode\uff0c\uff08\u6b64\u65f6 CPU \u81ea\u52a8\u628a kernel-mode stack \u4e0a\u7684\u5185\u5bb9\u5168\u90e8\u590d\u5236\u5230\u4e86\u8be5 task_struct \u7684 user-mode stack\uff09\uff0c\u5c31\u4f1a\u8fd0\u884c\u53e6\u5916\u4e00\u4e2a task\u3002 3 \u4e00\u4e2a context \u4e00\u4e2a Context \u5305\u542b\u4e86\uff1a \u5b58\u50a8\u7a0b\u5e8f\u8fd0\u884c\u6240\u9700\u7684 CPU \u5bc4\u5b58\u5668 \u548c \u4e00\u4e2a\u6307\u4ee4\u8ba1\u6570\u5668,\u524d\u8005\u662f\u5728 CPU \u5185\u90e8\u7684\uff0c\u5b58\u50a8\u4e00\u4e9b\u53d8\u91cf\u7684\u5730\u5bc4\u5b58\u5668\uff0c \u540e\u8005\u662f\u7528\u4e8e\u8868\u793a CPU \u5f53\u524d\u6267\u884c\u7684\u6307\u4ee4\u6216\u8005\u4e0b\u4e00\u4e2a\u8981\u6267\u884c\u7684\u6307\u4ee4\u3002 \u4e09 \u5173\u4e8e context switch \u7684\u4e00\u4e9b\u5176\u4ed6\u89c1\u89e3 1 context switch \u5206\u4e3a\u54ea\u51e0\u79cd context swich \u5206\u4e3a 3 \u79cd\uff1a 1 \u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u7531 user mode \u8fdb\u5165 kernel mode\uff08\u53cd\u4e4b\u4f9d\u7136\uff09 2 \u540c\u4e00\u7684\u8fdb\u7a0b\u7684\u4e0d\u540c\u7ebf\u7a0b\u4e4b\u95f4 3 \u4e0d\u540c\u7684\u8fdb\u7a0b\u4e4b\u95f4 \u8fd9 3 \u79cd\u6d88\u8017\u4f9d\u6b21\u589e\u5927\uff1b \u7406\u8bba\u4e0a CPU \u7531 user mode \u8fdb\u5165 kernel mode \u6216\u8005 kernel mode \u8fdb\u5165 user mode \u79f0\u4e3a mode switch \u800c\u4e0d\u662f context switch ,\u7136\u800c\u5728\u4f7f\u7528 vmstat \u5de5\u5177\u8fdb\u884c\u76d1\u63a7\u65f6\uff0c\u660e\u663e\u53d1\u73b0\u628a mode switch \u4e5f\u7edf\u8ba1\u4e86\u8fdb\u53bb. \u6211\u4eec\u518d\u6765\u603b\u7ed3\u4e0b\uff0c\u4e3a\u4ec0\u4e48\u4e0a\u8ff0\u6d88\u8017\u4f9d\u6b21\u589e\u5927 Linux \u5185\u6838\u4e2d\uff0c\u6ca1\u6709\u8fdb\u7a0b\u548c\u7ebf\u7a0b\u7684\u533a\u522b\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u4e00\u4e2a task_struct \u7ed3\u6784\u4f53\u7684\u6982\u5ff5\uff0c\u7528\u4e8e\u7edf\u4e00\u8868\u793a CPU \u8981\u8fd0\u884c\u7684\u4efb\u52a1; \u6211\u4eec\u770b\u4e0b task_struct \u4e2d\u6709\u54ea\u4e9b\u91cd\u8981\u7684\u5b57\u6bb5: 1 \u5f53\u524d thread \u7684\u72b6\u6001 /* task_struct \u8a18\u9304\u8457\u76ee\u524d\u9019 Process \u7684\u72c0\u614b */ struct task_struct { volatile long state; // -1 unrunnable, 0 runnable, >0 stopped}; 2 \u5f53\u524d thread \u7684 mm_struct /* task_struct \u5c31\u6709\u4e00\u500b\u6307\u5411 mm_struct \u7684\u8b8a\u6578 */ struct task_struct { struct mm_struct *mm // point to memory descriptor}; \u5176\u5b9e\u4e5f\u5c31\u662f\u8bf4\uff0cProcess \u90fd\u6709\u81ea\u5df1\u7684 mm_struct,\u5982\u679c\u65b0\u751f\u6210\u51fa\u6765\u7684 task_struct \u6709\u81ea\u5df1\u72ec\u7acb\u7684 mm_struct\uff0c\u90a3\u4e48\u5b83\u5c31\u4ee3\u8868\u662f\u4e00\u4e2a\u65b0\u8fdb\u7a0b\uff1b\u5982\u679c\u6ca1\u6709 mm_struct\uff0c\u800c\u662f\u5171\u7528\u5b83\u7684\u7236\u8fdb\u7a0b\u7684 mm_struct,\u90a3\u4e48\u5b83\u5c31\u662f\u4e00\u4e2a\u7ebf\u7a0b, \u5982\u4e0b\u56fe\u6240\u793a: \u53e6\u5916\uff0c\u6bcf\u4e2a task_struct \u90fd\u6709\u81ea\u5df1\u7684 kernel stack \u548c user stack\uff1b kernel stack \u5982\u4e0b: linux\u4e2d\u8fdb\u7a0b\u4f7f\u7528task_struct\u6570\u636e\u7ed3\u6784\u63cf\u8ff0\uff0c\u5176\u4e2d\u6709\u4e00\u4e2astack\u6307\u9488 struct task_struct { // ... void *stack; // \u6307\u5411\u5185\u6838\u6808\u7684\u6307\u9488 // ... }; task_struct\u6570\u636e\u7ed3\u6784\u4e2d\u7684stack\u6210\u5458\u6307\u5411thread_union\u7ed3\u6784\uff08Linux\u5185\u6838\u901a\u8fc7thread_union\u8054\u5408\u4f53\u6765\u8868\u793a\u8fdb\u7a0b\u7684\u5185\u6838\u6808\uff09 \u6bcf\u500b task_structs \u90fd\u6703\u6709\u4e00\u500b kernel stack \uff0c\u63d0\u4f9b\u5728 Kernel mode \u6642\u9032\u884c\u904b\u7b97\u6642\uff0c\u53ef\u5b58\u653e\u81e8\u6642\u8b8a\u6578\u7684\u5730\u65b9\u3002 \u5728\u771f\u6b63 context switch \u65f6\uff0cCPU \u662f\u5982\u4f55\u5de5\u4f5c\u7684\u5462? Thread A enters the kernel, changing from user mode to kernel mode; Thread A in the kernel context-switches to Thread B in the kernel; Thread B exits the kernel, changing from kernel mode back to user mode. \u4e5f\u5c31\u662f\u8bf4\uff0cCPU \u8fdb\u5165 kernel mode\uff0c\u628a Thread A \u7684 user stack \u7684\u5185\u5bb9 copy \u5230\u81ea\u5df1\u7684 kernel stack\uff1b\u8c03\u5ea6\u4ee3\u7801\u5f00\u59cb\u6267\u884c(scheduler \u5f00\u59cb\u6267\u884c)\uff0cCPU \u5207\u6362\u81f3 Thread B \u7684 kernel stack\uff1b CPU \u628a Thead B \u7684 kernel stack copy \u5230 Thread B \u7684 user stack\uff0c\u5e76\u4e14\u8fdb\u5165 user mode\uff1b\u8fd9\u6837\u5c31\u4ece Thread A context switch \u5230 Thread B. \u6211\u4eec\u77e5\u9053 stack \u7684\u7279\u6027\uff1a1 \u4f53\u79ef\u5f88\u5c0f 2 \u6570\u91cf\u5145\u8db3 3 \u5728 CPU \u5185\u90e8 4 \u901f\u5ea6\u5f88\u5feb \u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u4e3a\u4ec0\u4e48 context switch \u7684\u6d88\u8017\u4f9d\u6b21\u589e\u5927\u4e86: 1 \u540c\u4e00\u4e2a\u7ebf\u7a0b\u5185\uff0cCPU \u7531 user mode \u8fdb\u5165 kernel mode\uff0c\u5e94\u8be5\u662f\u8981\u628a user stack \u7684\u5185\u5bb9 copy \u5230 kernel stack\uff0c\u7136\u540e\u5f00\u59cb\u8fd0\u884c system call \u6240\u6307\u5b9a\u7684\u90a3\u90e8\u5206\u4ee3\u7801. 2 \u540c\u4e00\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u4e0d\u540c\u7ebf\u7a0b\u4e4b\u95f4\u7684 context switch \uff0c\u65e0\u9700\u66ff\u6362\u5f53\u524d\u7684 mm_struct 3 \u4e0d\u540c\u8fdb\u7a0b\u4e4b\u95f4\u8fdb\u884c context switch\uff0c\u9664\u4e86\u4e0a\u8ff0\u6b65\u9aa4\u4e4b\u5916\uff0c\u4ecd\u9700\u66ff\u6362\u6574\u4e2a mm_struct,\u65b0\u8fdb\u7a0b\u7684 pagetable \u5e94\u8be5\u8981\u88ab\u88c5\u5165 MMU \u7ba1\u7406\u5355\u5143\u3002CPU \u53d1\u51fa\u7684\u5185\u5b58\u5730\u5740\u90fd\u662f\u865a\u62df\u673a\u5730\u5740\uff0c\u6709 MMU \u7ba1\u7406\u5355\u5143\uff08\u786c\u4ef6\uff09\u81ea\u52a8\u5b8c\u6210\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u7684\u8f6c\u5316 \u53c2\u8003 1 \u53c2\u8003 2","title":"\u7b2c\u5341\u7bc7 \u4f4e\u89c6\u89d2\u770bcontext switch"},{"location":"chapter_4/10_linux_context_switch/#_1","text":"\u672c\u7bc7\u8bb2\u8ff0 context switch \u548c mode switch","title":"\u6982\u8ff0"},{"location":"chapter_4/10_linux_context_switch/#task_struct","text":"\u6bcf\u6b21\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 task_struct, \u5185\u6838\u5c42\u9762\u90fd\u81f3\u5c11\u521b\u5efa\u4e09\u4e2a\u6838\u5fc3\u6a21\u578b: \u5185\u6838\u6808 , task_struct \u7ed3\u6784\u4f53, thread_info \u7ed3\u6784\u4f53, \u6211\u4eec\u91cd\u70b9\u5173\u6ce8 \u5185\u6838\u6808 , task_struct \u7ed3\u6784\u4f53, thread_info \u7ed3\u6784\u4f53 \u5176\u4e2d \u7528\u6237\u6808 \u5c06\u5728\u672a\u6765\u8ba8\u8bba","title":"\u4e00 \u6bcf\u4e2a\u65b0\u7684 task_struct \u5185\u6838\u81f3\u5c11\u8981\u5173\u6ce8\u4e09\u4e2a\u6838\u5fc3\u6a21\u578b"},{"location":"chapter_4/10_linux_context_switch/#1-thread_info","text":"","title":"1 thread_info \u7ed3\u6784\u4f53"},{"location":"chapter_4/10_linux_context_switch/#a-thread_info","text":"struct thread_info \u662f\u8bb0\u5f55\u90e8\u5206\u8fdb\u7a0b\u4fe1\u606f\u7684\u7ed3\u6784\u4f53(\u5177\u4f53\u6765\u8bf4\u662f\u5e73\u53f0\u76f8\u5173\u7684\u8fdb\u7a0b\u4fe1\u606f\uff0c\u8be5\u7ed3\u6784\u4f53\u662f\u5e73\u53f0\u76f8\u5173\u7684)\uff0c\u5176\u4e2d\u5305\u62ec\u4e86\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u4fe1\u606f: struct thread_info { unsigned long flags; /* low level flags */ int preempt_count; /* 0 => preemptable, <0 => bug */ mm_segment_t addr_limit; /* address limit */ struct task_struct *task; /* main task structure */ __u32 cpu; /* cpu */ __u32 cpu_domain; /* cpu domain */ ... struct cpu_context_save cpu_context; /* cpu context */ __u32 syscall; /* syscall number */ ... }; \u5173\u952e\u662f\u5176\u4e2d\u7684 task \u6210\u5458\uff0c\u6307\u5411\u7684\u662f\u6240\u521b\u5efa\u7684\u8fdb\u7a0b\u7684 struct task_struct \u7ed3\u6784\u4f53\u3002","title":"A \u8fdb\u7a0b\u5e73\u53f0\u76f8\u5173\u4fe1\u606f--thread_info"},{"location":"chapter_4/10_linux_context_switch/#b-thread_info","text":"\u5185\u6838\u8fd8\u9700\u8981\u5b58\u50a8\u6bcf\u4e2a\u8fdb\u7a0b\u7684 PCB \u4fe1\u606f, linux \u5185\u6838\u662f\u652f\u6301\u4e0d\u540c\u4f53\u7cfb\u7684\u7684, \u4f46\u662f\u4e0d\u540c\u7684\u4f53\u7cfb\u7ed3\u6784\u53ef\u80fd\u8fdb\u7a0b\u9700\u8981\u5b58\u50a8\u7684\u4fe1\u606f\u4e0d\u5c3d\u76f8\u540c, \u8fd9\u5c31\u9700\u8981\u6211\u4eec\u5b9e\u73b0\u4e00\u79cd\u901a\u7528\u7684\u65b9\u5f0f, \u6211\u4eec\u5c06\u4f53\u7cfb\u7ed3\u6784\u76f8\u5173\u7684\u90e8\u5206\u548c\u65e0\u5173\u7684\u90e8\u95e8\u8fdb\u884c\u5206\u79bb\u3002 \u7528\u4e00\u79cd\u901a\u7528\u7684\u65b9\u5f0f\u6765\u63cf\u8ff0\u8fdb\u7a0b, \u8fd9\u5c31\u662f struct task_struct, \u800c thread_info \u5c31\u4fdd\u5b58\u4e86\u7279\u5b9a\u4f53\u7cfb\u7ed3\u6784\u7684\u6c47\u7f16\u4ee3\u7801\u6bb5\u9700\u8981\u8bbf\u95ee\u7684\u90a3\u90e8\u5206\u8fdb\u7a0b\u7684\u6570\u636e,\u6211\u4eec\u5728 thread_info \u4e2d\u5d4c\u5165\u6307\u5411 task_struct \u7684\u6307\u9488, \u5219\u6211\u4eec\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u901a\u8fc7 thread_info \u6765\u67e5\u627e task_struct\u3002","title":"B \u4e3a\u4ec0\u4e48\u9700\u8981 thread_info"},{"location":"chapter_4/10_linux_context_switch/#2","text":"\u5185\u6838\u6808\u901a\u5e38\u662f 2 \u4e2a page \u5927\u5c0f\u3002\u56e0\u4e3a 32 \u4f4d\u548c 64 \u4f4d\u4f53\u7cfb\u7ed3\u6784\u7684\u9875\u9762\u5927\u5c0f\u5206\u522b\u662f 4KB \u548c 8KB\uff0c\u6240\u4ee5\u901a\u5e38\u5b83\u4eec\u7684\u5185\u6838 \u6808 \u7684 \u5927\u5c0f \u5206 \u522b \u662f 8 K B \u548c 1 6 K B\u3002 \u5176\u4e2d \u5185\u6838\u6808 \u662f\u4f7f\u7528 thread_union \u7ed3\u6784\u4f53\u8868\u793a, \u5e76\u4e14 thread_info \u7ed3\u6784\u4f53\u4f4d\u4e8e\u6808\u5e95\u90e8. \u8fdb\u7a0b\u63cf\u8ff0\u7b26 task_struct \u4e2d\u6709\u4e00\u4e2a\u6210\u5458\uff1avoid *stack;\u5c31\u662f\u6307\u5411\u8be5\u8fdb\u7a0b\u5185\u6838\u6808\u7684 \u6808\u5e95 \u3002 union thread_union { #ifndef CONFIG_ARCH_TASK_STRUCT_ON_STACK struct task_struct task; #endif #ifndef CONFIG_THREAD_INFO_IN_TASK struct thread_info thread_info; #endif unsigned long stack[THREAD_SIZE/sizeof(long)]; };","title":"2 \u5185\u6838\u6808"},{"location":"chapter_4/10_linux_context_switch/#21","text":"\u5728\u9677\u5165\u5185\u6838\u540e\uff0c\u7cfb\u7edf\u8c03\u7528\u4e2d\u4e5f\u662f\u5b58\u5728\u51fd\u6570\u8c03\u7528\u548c\u81ea\u52a8\u53d8\u91cf\uff0c\u8fd9\u4e9b\u90fd\u9700\u8981\u6808\u652f\u6301\u3002\u7528\u6237\u7a7a\u95f4\u7684\u6808\u663e\u7136\u4e0d\u5b89\u5168\uff0c\u9700\u8981\u5185\u6838\u6808\u7684\u652f\u6301\u3002","title":"2.1 \u5185\u6838\u6808\u4f5c\u7528"},{"location":"chapter_4/10_linux_context_switch/#22","text":"\u6240\u6709\u8fdb\u7a0b\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u90fd\u53ef\u80fd\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u9677\u5165\u5185\u6838\u6001\u7ee7\u7eed\u6267\u884c\u3002\u5047\u8bbe\u7b2c\u4e00\u4e2a\u8fdb\u7a0b A \u9677\u5165\u5185\u6838\u6001\u6267\u884c\u7684\u65f6\u5019\uff0c\u9700\u8981\u7b49\u5f85\u8bfb\u53d6\u7f51\u5361\u7684\u6570\u636e\uff0c\u4e3b\u52a8\u8c03\u7528 schedule() \u8ba9\u51fa CPU\uff1b\u6b64\u65f6\u8c03\u5ea6\u5668\u5524\u9192\u4e86\u53e6\u4e00\u4e2a\u8fdb\u7a0b B\uff0c\u78b0\u5de7\u8fdb\u7a0b B \u4e5f\u9700\u8981\u7cfb\u7edf\u8c03\u7528\u8fdb\u5165\u5185\u6838\u6001\u3002\u90a3\u95ee\u9898\u5c31\u6765\u4e86\uff0c\u5982\u679c\u5185\u6838\u6808\u53ea\u6709\u4e00\u4e2a\uff0c\u90a3\u8fdb\u7a0b B \u8fdb\u5165\u5185\u6838\u6001\u7684\u65f6\u5019\u4ea7\u751f\u7684\u538b\u6808\u64cd\u4f5c\uff0c\u5fc5\u7136\u4f1a\u7834\u574f\u6389\u8fdb\u7a0b A \u5df2\u6709\u7684\u5185\u6838\u6808\u6570\u636e\uff1b\u4e00\u4f46\u8fdb\u7a0b A \u7684\u5185\u6838\u6808\u6570\u636e\u88ab\u7834\u574f\uff0c\u5f88\u53ef\u80fd\u5bfc\u81f4\u8fdb\u7a0b A \u7684\u5185\u6838\u6001\u65e0\u6cd5\u6b63\u786e\u8fd4\u56de\u5230\u5bf9\u5e94\u7684\u7528\u6237\u6001\u4e86\u3002","title":"2.2 \u4e3a\u4ec0\u4e48\u9700\u8981\u5355\u72ec\u7684\u8fdb\u7a0b\u5185\u6838\u6808\uff1f"},{"location":"chapter_4/10_linux_context_switch/#context-switch-mode-switch","text":"At a high level, there are two separate mechanisms to understand. The first is the kernel entry/exit mechanism: this switches a single running thread from running usermode code to running kernel code in the context of that thread, and back again. The second is the context switch mechanism itself, which switches in kernel mode from running in the context of one thread to another. So, when Thread A calls sched_yield() and is replaced by Thread B, what happens is: Thread A enters the kernel, changing from user mode to kernel mode; Thread A in the kernel context-switches to Thread B in the kernel; Thread B exits the kernel, changing from kernel mode back to user mode. Each user thread has both a user-mode stack and a kernel-mode stack. When a thread enters the kernel, the current value of the user-mode stack (SS:ESP) and instruction pointer (CS:EIP) are saved to the thread\u2019s kernel-mode stack, and the CPU switches to the kernel-mode stack \u2013 with the int $80 syscall mechanism, this is done by the CPU itself. The remaining register values and flags are then also saved to the kernel stack. When a thread returns from the kernel to user-mode, the register values and flags are popped from the kernel-mode stack, then the user-mode stack and instruction pointer values are restored from the saved values on the kernel-mode stack. When a thread context-switches, it calls into the scheduler (the scheduler does not run as a separate thread \u2013 it always runs in the context of the current thread). The scheduler code selects a process to run next, and calls the switchto() function. This function essentially just switches the kernel stacks \u2013 it saves the current value of the stack pointer into the TCB for the current thread (called struct taskstruct in Linux), and loads a previously-saved stack pointer from the TCB for the next thread. At this point it also saves and restores some other thread state that isn\u2019t usually used by the kernel \u2013 things like floating point/SSE registers. So you can see that the core user-mode state of a thread isn\u2019t saved and restored at context-switch time \u2013 it\u2019s saved and restored to the thread\u2019s kernel stack when you enter and leave the kernel. The context-switch code doesn\u2019t have to worry about clobbering the user-mode register values \u2013 those are already safely saved away in the kernel stack by that point. \u53c2\u8003","title":"\u4e8c context switch \u548c mode switch \u533a\u522b"},{"location":"chapter_4/10_linux_context_switch/#1-mode-switch","text":"mode switch \u662f\u4e00\u4e2a\u8fd0\u884c\u7684 task \u4ece user-mode \u5207\u6362\u5230 kernel-mode\uff0c\u6216\u8005\u5207\u6362\u56de\u6765\u3002","title":"1 mode switch"},{"location":"chapter_4/10_linux_context_switch/#2-context-switch","text":"context switch \u4e00\u5b9a\u53d1\u751f\u5728 kernel mode\uff0c\u8fdb\u884c task \u7684\u5207\u6362\u3002\u56e0\u6b64 context switch \u65f6\uff0c\u4e0d\u7528\u62c5\u5fc3\u628a user-space \u7684\u6570\u636e\u5f04\u4e22\u3002 \u6bcf\u4e2a\u7528\u6237\u7684 task_struct \u6709\u4e00\u4e2a user-mode stack \u548c\u4e00\u4e2a kernel-mode stack\uff0c\u5f53\u4ece user-mode \u5207\u6362\u5230 kernel-mode \u65f6\uff0c\u5bc4\u5b58\u5668\u7684\u503c\u8981\u4fdd\u5b58\u5230 kernel-mode stack\uff0c\u53cd\u4e4b\uff0c\u4ece kernel-mode \u5207\u6362\u56de user-mode \u65f6\uff0c\u8981\u628a\u5bc4\u5b58\u5668\u7684\u503c\u6062\u590d\u51fa\u6765\u3002\u8fd9\u662f CPU \u81ea\u52a8\u505a\u7684\u3002(\u56e0\u6b64\u80af\u5b9a\u6bd4 context switch \u6210\u672c\u8981\u4f4e) \u8fdb\u884c\u201ccontext switch\u201d\u65f6\uff0cscheduler \u5c06\u5f53\u524d kernel-mode stack \u4e2d\u7684\u503c\u4fdd\u5b58\u5728 task_struct \u4e2d\uff0c\u5e76\u628a\u4e0b\u4e00\u4e2a\u5c06\u8981\u8fd0\u884c task \u7684 task_struct \u503c\u6062\u590d\u5230 kernel-mode stack \u4e2d\uff0c \uff08scheduler \u662f\u5185\u6838\u4ee3\u7801\uff09\u8fd9\u6837\uff0c\u4ece kernel-mode \u8fd4\u56de\u5230 user-mode\uff0c\uff08\u6b64\u65f6 CPU \u81ea\u52a8\u628a kernel-mode stack \u4e0a\u7684\u5185\u5bb9\u5168\u90e8\u590d\u5236\u5230\u4e86\u8be5 task_struct \u7684 user-mode stack\uff09\uff0c\u5c31\u4f1a\u8fd0\u884c\u53e6\u5916\u4e00\u4e2a task\u3002","title":"2 context switch"},{"location":"chapter_4/10_linux_context_switch/#3-context","text":"\u4e00\u4e2a Context \u5305\u542b\u4e86\uff1a \u5b58\u50a8\u7a0b\u5e8f\u8fd0\u884c\u6240\u9700\u7684 CPU \u5bc4\u5b58\u5668 \u548c \u4e00\u4e2a\u6307\u4ee4\u8ba1\u6570\u5668,\u524d\u8005\u662f\u5728 CPU \u5185\u90e8\u7684\uff0c\u5b58\u50a8\u4e00\u4e9b\u53d8\u91cf\u7684\u5730\u5bc4\u5b58\u5668\uff0c \u540e\u8005\u662f\u7528\u4e8e\u8868\u793a CPU \u5f53\u524d\u6267\u884c\u7684\u6307\u4ee4\u6216\u8005\u4e0b\u4e00\u4e2a\u8981\u6267\u884c\u7684\u6307\u4ee4\u3002","title":"3 \u4e00\u4e2a context"},{"location":"chapter_4/10_linux_context_switch/#context-switch","text":"","title":"\u4e09 \u5173\u4e8e context switch \u7684\u4e00\u4e9b\u5176\u4ed6\u89c1\u89e3"},{"location":"chapter_4/10_linux_context_switch/#1-context-switch","text":"context swich \u5206\u4e3a 3 \u79cd\uff1a 1 \u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u7531 user mode \u8fdb\u5165 kernel mode\uff08\u53cd\u4e4b\u4f9d\u7136\uff09 2 \u540c\u4e00\u7684\u8fdb\u7a0b\u7684\u4e0d\u540c\u7ebf\u7a0b\u4e4b\u95f4 3 \u4e0d\u540c\u7684\u8fdb\u7a0b\u4e4b\u95f4 \u8fd9 3 \u79cd\u6d88\u8017\u4f9d\u6b21\u589e\u5927\uff1b \u7406\u8bba\u4e0a CPU \u7531 user mode \u8fdb\u5165 kernel mode \u6216\u8005 kernel mode \u8fdb\u5165 user mode \u79f0\u4e3a mode switch \u800c\u4e0d\u662f context switch ,\u7136\u800c\u5728\u4f7f\u7528 vmstat \u5de5\u5177\u8fdb\u884c\u76d1\u63a7\u65f6\uff0c\u660e\u663e\u53d1\u73b0\u628a mode switch \u4e5f\u7edf\u8ba1\u4e86\u8fdb\u53bb. \u6211\u4eec\u518d\u6765\u603b\u7ed3\u4e0b\uff0c\u4e3a\u4ec0\u4e48\u4e0a\u8ff0\u6d88\u8017\u4f9d\u6b21\u589e\u5927 Linux \u5185\u6838\u4e2d\uff0c\u6ca1\u6709\u8fdb\u7a0b\u548c\u7ebf\u7a0b\u7684\u533a\u522b\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u4e00\u4e2a task_struct \u7ed3\u6784\u4f53\u7684\u6982\u5ff5\uff0c\u7528\u4e8e\u7edf\u4e00\u8868\u793a CPU \u8981\u8fd0\u884c\u7684\u4efb\u52a1; \u6211\u4eec\u770b\u4e0b task_struct \u4e2d\u6709\u54ea\u4e9b\u91cd\u8981\u7684\u5b57\u6bb5: 1 \u5f53\u524d thread \u7684\u72b6\u6001 /* task_struct \u8a18\u9304\u8457\u76ee\u524d\u9019 Process \u7684\u72c0\u614b */ struct task_struct { volatile long state; // -1 unrunnable, 0 runnable, >0 stopped}; 2 \u5f53\u524d thread \u7684 mm_struct /* task_struct \u5c31\u6709\u4e00\u500b\u6307\u5411 mm_struct \u7684\u8b8a\u6578 */ struct task_struct { struct mm_struct *mm // point to memory descriptor}; \u5176\u5b9e\u4e5f\u5c31\u662f\u8bf4\uff0cProcess \u90fd\u6709\u81ea\u5df1\u7684 mm_struct,\u5982\u679c\u65b0\u751f\u6210\u51fa\u6765\u7684 task_struct \u6709\u81ea\u5df1\u72ec\u7acb\u7684 mm_struct\uff0c\u90a3\u4e48\u5b83\u5c31\u4ee3\u8868\u662f\u4e00\u4e2a\u65b0\u8fdb\u7a0b\uff1b\u5982\u679c\u6ca1\u6709 mm_struct\uff0c\u800c\u662f\u5171\u7528\u5b83\u7684\u7236\u8fdb\u7a0b\u7684 mm_struct,\u90a3\u4e48\u5b83\u5c31\u662f\u4e00\u4e2a\u7ebf\u7a0b, \u5982\u4e0b\u56fe\u6240\u793a: \u53e6\u5916\uff0c\u6bcf\u4e2a task_struct \u90fd\u6709\u81ea\u5df1\u7684 kernel stack \u548c user stack\uff1b kernel stack \u5982\u4e0b: linux\u4e2d\u8fdb\u7a0b\u4f7f\u7528task_struct\u6570\u636e\u7ed3\u6784\u63cf\u8ff0\uff0c\u5176\u4e2d\u6709\u4e00\u4e2astack\u6307\u9488 struct task_struct { // ... void *stack; // \u6307\u5411\u5185\u6838\u6808\u7684\u6307\u9488 // ... }; task_struct\u6570\u636e\u7ed3\u6784\u4e2d\u7684stack\u6210\u5458\u6307\u5411thread_union\u7ed3\u6784\uff08Linux\u5185\u6838\u901a\u8fc7thread_union\u8054\u5408\u4f53\u6765\u8868\u793a\u8fdb\u7a0b\u7684\u5185\u6838\u6808\uff09 \u6bcf\u500b task_structs \u90fd\u6703\u6709\u4e00\u500b kernel stack \uff0c\u63d0\u4f9b\u5728 Kernel mode \u6642\u9032\u884c\u904b\u7b97\u6642\uff0c\u53ef\u5b58\u653e\u81e8\u6642\u8b8a\u6578\u7684\u5730\u65b9\u3002 \u5728\u771f\u6b63 context switch \u65f6\uff0cCPU \u662f\u5982\u4f55\u5de5\u4f5c\u7684\u5462? Thread A enters the kernel, changing from user mode to kernel mode; Thread A in the kernel context-switches to Thread B in the kernel; Thread B exits the kernel, changing from kernel mode back to user mode. \u4e5f\u5c31\u662f\u8bf4\uff0cCPU \u8fdb\u5165 kernel mode\uff0c\u628a Thread A \u7684 user stack \u7684\u5185\u5bb9 copy \u5230\u81ea\u5df1\u7684 kernel stack\uff1b\u8c03\u5ea6\u4ee3\u7801\u5f00\u59cb\u6267\u884c(scheduler \u5f00\u59cb\u6267\u884c)\uff0cCPU \u5207\u6362\u81f3 Thread B \u7684 kernel stack\uff1b CPU \u628a Thead B \u7684 kernel stack copy \u5230 Thread B \u7684 user stack\uff0c\u5e76\u4e14\u8fdb\u5165 user mode\uff1b\u8fd9\u6837\u5c31\u4ece Thread A context switch \u5230 Thread B. \u6211\u4eec\u77e5\u9053 stack \u7684\u7279\u6027\uff1a1 \u4f53\u79ef\u5f88\u5c0f 2 \u6570\u91cf\u5145\u8db3 3 \u5728 CPU \u5185\u90e8 4 \u901f\u5ea6\u5f88\u5feb \u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u4e3a\u4ec0\u4e48 context switch \u7684\u6d88\u8017\u4f9d\u6b21\u589e\u5927\u4e86: 1 \u540c\u4e00\u4e2a\u7ebf\u7a0b\u5185\uff0cCPU \u7531 user mode \u8fdb\u5165 kernel mode\uff0c\u5e94\u8be5\u662f\u8981\u628a user stack \u7684\u5185\u5bb9 copy \u5230 kernel stack\uff0c\u7136\u540e\u5f00\u59cb\u8fd0\u884c system call \u6240\u6307\u5b9a\u7684\u90a3\u90e8\u5206\u4ee3\u7801. 2 \u540c\u4e00\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u4e0d\u540c\u7ebf\u7a0b\u4e4b\u95f4\u7684 context switch \uff0c\u65e0\u9700\u66ff\u6362\u5f53\u524d\u7684 mm_struct 3 \u4e0d\u540c\u8fdb\u7a0b\u4e4b\u95f4\u8fdb\u884c context switch\uff0c\u9664\u4e86\u4e0a\u8ff0\u6b65\u9aa4\u4e4b\u5916\uff0c\u4ecd\u9700\u66ff\u6362\u6574\u4e2a mm_struct,\u65b0\u8fdb\u7a0b\u7684 pagetable \u5e94\u8be5\u8981\u88ab\u88c5\u5165 MMU \u7ba1\u7406\u5355\u5143\u3002CPU \u53d1\u51fa\u7684\u5185\u5b58\u5730\u5740\u90fd\u662f\u865a\u62df\u673a\u5730\u5740\uff0c\u6709 MMU \u7ba1\u7406\u5355\u5143\uff08\u786c\u4ef6\uff09\u81ea\u52a8\u5b8c\u6210\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u7684\u8f6c\u5316 \u53c2\u8003 1 \u53c2\u8003 2","title":"1 context switch \u5206\u4e3a\u54ea\u51e0\u79cd"},{"location":"chapter_4/11_linux_cpu_usage/","text":"\u6982\u8ff0 \u672c\u7bc7\u89e3\u91ca TOP \u547d\u4ee4\u4e2d CPU \u5229\u7528\u7387\u7edf\u8ba1 \u4e00 \u5185\u6838\u51fd\u6570 account_process_tick //file:kernel/sched/cputime.c void account_process_tick(struct task_struct *p, int user_tick) { cputime = TICK_NSEC; ... if (user_tick) //3.1 \u7edf\u8ba1\u7528\u6237\u6001\u65f6\u95f4 account_user_time(p, cputime); else if ((p != rq->idle) || (irq_count() != HARDIRQ_OFFSET)) //3.2 \u7edf\u8ba1\u5185\u6838\u6001\u65f6\u95f4 account_system_time(p, HARDIRQ_OFFSET, cputime); else //3.3 \u7edf\u8ba1\u7a7a\u95f2\u65f6\u95f4 account_idle_time(cputime); } \u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0c\u9996\u5148\u8bbe\u7f6e cputime = TICK_NSEC , \u4e00\u4e2a TICK_NSEC \u7684\u5b9a\u4e49\u662f\u4e00\u4e2a\u8282\u62cd\u6240\u5360\u7684\u7eb3\u79d2\u6570\u3002\u63a5\u4e0b\u6765\u6839\u636e\u5224\u65ad\u7ed3\u679c\u5206\u522b\u6267\u884c account_user_time \u3001 account_system_time \u548c account_idle_time \u6765\u7edf\u8ba1 \u7528\u6237\u6001 \u3001 \u5185\u6838\u6001 \u548c \u7a7a\u95f2\u65f6\u95f4 \u3002 1 \u7528\u6237\u6001\u65f6\u95f4\u5305\u62ec user \u548c nice //file:kernel/sched/cputime.c void account_user_time(struct task_struct *p, u64 cputime) { //\u5206\u4e24\u79cd\u79cd\u60c5\u51b5\u7edf\u8ba1\u7528\u6237\u6001 CPU \u7684\u4f7f\u7528\u60c5\u51b5 int index; index = (task_nice(p) > 0) ? CPUTIME_NICE : CPUTIME_USER; //\u5c06\u65f6\u95f4\u7d2f\u79ef\u5230 /proc/stat \u4e2d task_group_account_field(p, index, cputime); ...... } account_user_time \u51fd\u6570\u4e3b\u8981\u5206\u4e24\u79cd\u60c5\u51b5\u7edf\u8ba1\uff1a \u5982\u679c\u8fdb\u7a0b\u7684 nice \u503c\u5927\u4e8e 0\uff0c\u90a3\u4e48\u5c06\u4f1a\u589e\u52a0\u5230 CPU \u7edf\u8ba1\u7ed3\u6784\u7684 nice \u5b57\u6bb5\u4e2d\u3002 \u5982\u679c\u8fdb\u7a0b\u7684 nice \u503c\u5c0f\u4e8e\u7b49\u4e8e 0\uff0c\u90a3\u4e48\u589e\u52a0\u5230 CPU \u7edf\u8ba1\u7ed3\u6784\u7684 user \u5b57\u6bb5\u4e2d\u3002 \u6211\u4eec\u5e73\u65f6\u5982\u679c\u60f3\u8981\u89c2\u5bdf\u7cfb\u7edf\u7684\u7528\u6237\u6001\u6d88\u8017\u7684\u65f6\u95f4\u7684\u8bdd\uff0c\u5e94\u8be5\u662f\u5c06 top \u4e2d\u8f93\u51fa\u7684 user \u548c nice \u52a0\u8d77\u6765\u4e00\u5e76\u8003\u8651\uff0c\u800c\u4e0d\u662f\u53ea\u770b user\uff01 2 \u5185\u6838\u6001\u65f6\u95f4\u5305\u62ec IRQ \u548c SOFTIRQ \u548c SYSTEM \u6211\u4eec\u518d\u6765\u770b\u5185\u6838\u6001\u65f6\u95f4\u662f\u5982\u4f55\u7edf\u8ba1\u7684\uff0c\u627e\u5230 account_system_time \u7684\u4ee3\u7801\u3002 //file:kernel/sched/cputime.c void account_system_time(struct task_struct *p, int hardirq_offset, u64 cputime) { if (hardirq_count() - hardirq_offset) index = CPUTIME_IRQ; else if (in_serving_softirq()) index = CPUTIME_SOFTIRQ; else index = CPUTIME_SYSTEM; account_system_index_time(p, cputime, index); } \u5185\u6838\u6001\u7684\u65f6\u95f4\u4e3b\u8981\u5206 3 \u79cd\u60c5\u51b5\u8fdb\u884c\u7edf\u8ba1\u3002 \u5982\u679c\u5f53\u524d\u5904\u4e8e\u786c\u4e2d\u65ad\u6267\u884c\u4e0a\u4e0b\u6587, \u90a3\u4e48\u7edf\u8ba1\u5230 irq \u5b57\u6bb5\u4e2d \u5982\u679c\u5f53\u524d\u5904\u4e8e\u8f6f\u4e2d\u65ad\u6267\u884c\u4e0a\u4e0b\u6587, \u90a3\u4e48\u7edf\u8ba1\u5230 softirq \u5b57\u6bb5\u4e2d \u5426\u5219\u7edf\u8ba1\u5230 system \u5b57\u6bb5\u4e2d \u5224\u65ad\u597d\u8981\u52a0\u5230\u54ea\u4e2a\u7edf\u8ba1\u9879\u4e2d\u540e\uff0c\u4f9d\u6b21\u8c03\u7528 account_system_index_time\u3001task_group_account_field \u6765\u5c06\u8fd9\u6bb5\u65f6\u95f4\u52a0\u5230\u5185\u6838\u53d8\u91cf kernel_cpustat \u4e2d //file:kernel/sched/cputime.c static inline void task_group_account_field(struct task_struct *p, int index, u64 tmp) { __this_cpu_add(kernel_cpustat.cpustat[index], tmp); } 3 \u7a7a\u95f2\u65f6\u95f4\u5305\u62ec iowait \u548c idle \u5728\u5185\u6838\u53d8\u91cf kernel_cpustat \u4e2d\u4e0d\u4ec5\u4ec5\u662f\u7edf\u8ba1\u4e86\u5404\u79cd\u7528\u6237\u6001\u3001\u5185\u6838\u6001\u7684\u4f7f\u7528\u7edf\u8ba1\uff0c\u7a7a\u95f2\u4e5f\u4e00\u5e76\u7edf\u8ba1\u8d77\u6765\u4e86\u3002 \u5982\u679c\u5728\u91c7\u6837\u7684\u77ac\u95f4\uff0ccpu \u65e2\u4e0d\u5728\u5185\u6838\u6001\u4e5f\u4e0d\u5728\u7528\u6237\u6001\u7684\u8bdd\uff0c\u5c31\u5c06\u5f53\u524d\u8282\u62cd\u7684\u65f6\u95f4\u90fd\u7d2f\u52a0\u5230 idle \u4e2d\u3002 //file:kernel/sched/cputime.c void account_idle_time(u64 cputime) { u64 *cpustat = kcpustat_this_cpu->cpustat; struct rq *rq = this_rq(); if (atomic_read(&rq->nr_iowait) > 0) cpustat[CPUTIME_IOWAIT] += cputime; else cpustat[CPUTIME_IDLE] += cputime; } \u5728 cpu \u7a7a\u95f2\u7684\u60c5\u51b5\u4e0b\uff0c\u8fdb\u4e00\u6b65\u5224\u65ad\u5f53\u524d\u662f\u4e0d\u662f\u5728\u7b49\u5f85 IO\uff08\u4f8b\u5982\u78c1\u76d8 IO\uff09\uff0c\u5982\u679c\u662f\u7684\u8bdd\u8fd9\u6bb5\u7a7a\u95f2\u65f6\u95f4\u4f1a\u52a0\u5230 iowait \u4e2d\uff0c\u5426\u5219\u5c31\u52a0\u5230 idle \u4e2d\u3002\u4ece\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230 iowait \u5176\u5b9e\u662f cpu \u7684\u7a7a\u95f2\u65f6\u95f4\uff0c\u53ea\u4e0d\u8fc7\u662f\u5728\u7b49\u5f85 IO \u5b8c\u6210\u800c\u5df2\u3002 \u770b\u5230\u8fd9\u91cc\uff0c\u5f00\u7bc7\u95ee\u9898 3 \u4e5f\u6709\u975e\u5e38\u660e\u786e\u7684\u7b54\u6848\u4e86: io wait \u5176\u5b9e\u662f cpu \u5728\u7a7a\u95f2\u72b6\u6001\u7684\u4e00\u9879\u7edf\u8ba1\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u79cd\u72b6\u6001\u548c idle \u7684\u533a\u522b\u662f cpu \u662f\u56e0\u4e3a\u7b49\u5f85 io \u800c\u7a7a\u95f2\u3002 \u4e8c \u5176\u4ed6\u4e00\u4e9b\u8bf4\u660e 1 /proc/stat \u6587\u4ef6\u5b98\u65b9\u8bf4\u660e \u94fe\u63a5 2 \u6839\u636e falcon \u7684\u6e90\u4ee3\u7801 \u94fe\u63a5 \u4e09 \u53c2\u8003 \u53c2\u8003 1","title":"\u7b2c\u5341\u4e00\u7bc7 CPU\u5229\u7528\u7387\u7edf\u8ba1"},{"location":"chapter_4/11_linux_cpu_usage/#_1","text":"\u672c\u7bc7\u89e3\u91ca TOP \u547d\u4ee4\u4e2d CPU \u5229\u7528\u7387\u7edf\u8ba1","title":"\u6982\u8ff0"},{"location":"chapter_4/11_linux_cpu_usage/#_2","text":"account_process_tick //file:kernel/sched/cputime.c void account_process_tick(struct task_struct *p, int user_tick) { cputime = TICK_NSEC; ... if (user_tick) //3.1 \u7edf\u8ba1\u7528\u6237\u6001\u65f6\u95f4 account_user_time(p, cputime); else if ((p != rq->idle) || (irq_count() != HARDIRQ_OFFSET)) //3.2 \u7edf\u8ba1\u5185\u6838\u6001\u65f6\u95f4 account_system_time(p, HARDIRQ_OFFSET, cputime); else //3.3 \u7edf\u8ba1\u7a7a\u95f2\u65f6\u95f4 account_idle_time(cputime); } \u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0c\u9996\u5148\u8bbe\u7f6e cputime = TICK_NSEC , \u4e00\u4e2a TICK_NSEC \u7684\u5b9a\u4e49\u662f\u4e00\u4e2a\u8282\u62cd\u6240\u5360\u7684\u7eb3\u79d2\u6570\u3002\u63a5\u4e0b\u6765\u6839\u636e\u5224\u65ad\u7ed3\u679c\u5206\u522b\u6267\u884c account_user_time \u3001 account_system_time \u548c account_idle_time \u6765\u7edf\u8ba1 \u7528\u6237\u6001 \u3001 \u5185\u6838\u6001 \u548c \u7a7a\u95f2\u65f6\u95f4 \u3002","title":"\u4e00 \u5185\u6838\u51fd\u6570"},{"location":"chapter_4/11_linux_cpu_usage/#1-user-nice","text":"//file:kernel/sched/cputime.c void account_user_time(struct task_struct *p, u64 cputime) { //\u5206\u4e24\u79cd\u79cd\u60c5\u51b5\u7edf\u8ba1\u7528\u6237\u6001 CPU \u7684\u4f7f\u7528\u60c5\u51b5 int index; index = (task_nice(p) > 0) ? CPUTIME_NICE : CPUTIME_USER; //\u5c06\u65f6\u95f4\u7d2f\u79ef\u5230 /proc/stat \u4e2d task_group_account_field(p, index, cputime); ...... } account_user_time \u51fd\u6570\u4e3b\u8981\u5206\u4e24\u79cd\u60c5\u51b5\u7edf\u8ba1\uff1a \u5982\u679c\u8fdb\u7a0b\u7684 nice \u503c\u5927\u4e8e 0\uff0c\u90a3\u4e48\u5c06\u4f1a\u589e\u52a0\u5230 CPU \u7edf\u8ba1\u7ed3\u6784\u7684 nice \u5b57\u6bb5\u4e2d\u3002 \u5982\u679c\u8fdb\u7a0b\u7684 nice \u503c\u5c0f\u4e8e\u7b49\u4e8e 0\uff0c\u90a3\u4e48\u589e\u52a0\u5230 CPU \u7edf\u8ba1\u7ed3\u6784\u7684 user \u5b57\u6bb5\u4e2d\u3002 \u6211\u4eec\u5e73\u65f6\u5982\u679c\u60f3\u8981\u89c2\u5bdf\u7cfb\u7edf\u7684\u7528\u6237\u6001\u6d88\u8017\u7684\u65f6\u95f4\u7684\u8bdd\uff0c\u5e94\u8be5\u662f\u5c06 top \u4e2d\u8f93\u51fa\u7684 user \u548c nice \u52a0\u8d77\u6765\u4e00\u5e76\u8003\u8651\uff0c\u800c\u4e0d\u662f\u53ea\u770b user\uff01","title":"1 \u7528\u6237\u6001\u65f6\u95f4\u5305\u62ec user \u548c nice"},{"location":"chapter_4/11_linux_cpu_usage/#2-irq-softirq-system","text":"\u6211\u4eec\u518d\u6765\u770b\u5185\u6838\u6001\u65f6\u95f4\u662f\u5982\u4f55\u7edf\u8ba1\u7684\uff0c\u627e\u5230 account_system_time \u7684\u4ee3\u7801\u3002 //file:kernel/sched/cputime.c void account_system_time(struct task_struct *p, int hardirq_offset, u64 cputime) { if (hardirq_count() - hardirq_offset) index = CPUTIME_IRQ; else if (in_serving_softirq()) index = CPUTIME_SOFTIRQ; else index = CPUTIME_SYSTEM; account_system_index_time(p, cputime, index); } \u5185\u6838\u6001\u7684\u65f6\u95f4\u4e3b\u8981\u5206 3 \u79cd\u60c5\u51b5\u8fdb\u884c\u7edf\u8ba1\u3002 \u5982\u679c\u5f53\u524d\u5904\u4e8e\u786c\u4e2d\u65ad\u6267\u884c\u4e0a\u4e0b\u6587, \u90a3\u4e48\u7edf\u8ba1\u5230 irq \u5b57\u6bb5\u4e2d \u5982\u679c\u5f53\u524d\u5904\u4e8e\u8f6f\u4e2d\u65ad\u6267\u884c\u4e0a\u4e0b\u6587, \u90a3\u4e48\u7edf\u8ba1\u5230 softirq \u5b57\u6bb5\u4e2d \u5426\u5219\u7edf\u8ba1\u5230 system \u5b57\u6bb5\u4e2d \u5224\u65ad\u597d\u8981\u52a0\u5230\u54ea\u4e2a\u7edf\u8ba1\u9879\u4e2d\u540e\uff0c\u4f9d\u6b21\u8c03\u7528 account_system_index_time\u3001task_group_account_field \u6765\u5c06\u8fd9\u6bb5\u65f6\u95f4\u52a0\u5230\u5185\u6838\u53d8\u91cf kernel_cpustat \u4e2d //file:kernel/sched/cputime.c static inline void task_group_account_field(struct task_struct *p, int index, u64 tmp) { __this_cpu_add(kernel_cpustat.cpustat[index], tmp); }","title":"2 \u5185\u6838\u6001\u65f6\u95f4\u5305\u62ec IRQ \u548c SOFTIRQ \u548c SYSTEM"},{"location":"chapter_4/11_linux_cpu_usage/#3-iowait-idle","text":"\u5728\u5185\u6838\u53d8\u91cf kernel_cpustat \u4e2d\u4e0d\u4ec5\u4ec5\u662f\u7edf\u8ba1\u4e86\u5404\u79cd\u7528\u6237\u6001\u3001\u5185\u6838\u6001\u7684\u4f7f\u7528\u7edf\u8ba1\uff0c\u7a7a\u95f2\u4e5f\u4e00\u5e76\u7edf\u8ba1\u8d77\u6765\u4e86\u3002 \u5982\u679c\u5728\u91c7\u6837\u7684\u77ac\u95f4\uff0ccpu \u65e2\u4e0d\u5728\u5185\u6838\u6001\u4e5f\u4e0d\u5728\u7528\u6237\u6001\u7684\u8bdd\uff0c\u5c31\u5c06\u5f53\u524d\u8282\u62cd\u7684\u65f6\u95f4\u90fd\u7d2f\u52a0\u5230 idle \u4e2d\u3002 //file:kernel/sched/cputime.c void account_idle_time(u64 cputime) { u64 *cpustat = kcpustat_this_cpu->cpustat; struct rq *rq = this_rq(); if (atomic_read(&rq->nr_iowait) > 0) cpustat[CPUTIME_IOWAIT] += cputime; else cpustat[CPUTIME_IDLE] += cputime; } \u5728 cpu \u7a7a\u95f2\u7684\u60c5\u51b5\u4e0b\uff0c\u8fdb\u4e00\u6b65\u5224\u65ad\u5f53\u524d\u662f\u4e0d\u662f\u5728\u7b49\u5f85 IO\uff08\u4f8b\u5982\u78c1\u76d8 IO\uff09\uff0c\u5982\u679c\u662f\u7684\u8bdd\u8fd9\u6bb5\u7a7a\u95f2\u65f6\u95f4\u4f1a\u52a0\u5230 iowait \u4e2d\uff0c\u5426\u5219\u5c31\u52a0\u5230 idle \u4e2d\u3002\u4ece\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230 iowait \u5176\u5b9e\u662f cpu \u7684\u7a7a\u95f2\u65f6\u95f4\uff0c\u53ea\u4e0d\u8fc7\u662f\u5728\u7b49\u5f85 IO \u5b8c\u6210\u800c\u5df2\u3002 \u770b\u5230\u8fd9\u91cc\uff0c\u5f00\u7bc7\u95ee\u9898 3 \u4e5f\u6709\u975e\u5e38\u660e\u786e\u7684\u7b54\u6848\u4e86: io wait \u5176\u5b9e\u662f cpu \u5728\u7a7a\u95f2\u72b6\u6001\u7684\u4e00\u9879\u7edf\u8ba1\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u79cd\u72b6\u6001\u548c idle \u7684\u533a\u522b\u662f cpu \u662f\u56e0\u4e3a\u7b49\u5f85 io \u800c\u7a7a\u95f2\u3002","title":"3 \u7a7a\u95f2\u65f6\u95f4\u5305\u62ec iowait \u548c idle"},{"location":"chapter_4/11_linux_cpu_usage/#_3","text":"","title":"\u4e8c \u5176\u4ed6\u4e00\u4e9b\u8bf4\u660e"},{"location":"chapter_4/11_linux_cpu_usage/#1-procstat","text":"\u94fe\u63a5","title":"1 /proc/stat \u6587\u4ef6\u5b98\u65b9\u8bf4\u660e"},{"location":"chapter_4/11_linux_cpu_usage/#2-falcon","text":"\u94fe\u63a5","title":"2 \u6839\u636e falcon \u7684\u6e90\u4ee3\u7801"},{"location":"chapter_4/11_linux_cpu_usage/#_4","text":"\u53c2\u8003 1","title":"\u4e09 \u53c2\u8003"},{"location":"chapter_4/12_linux_preemption/","text":"\u6982\u8ff0 \u672c\u7bc7\u6c47\u603b\u4e00\u4e9b Linux \u5185\u6838\u62a2\u5360(preemption)\u7684 \u57fa\u7840\u77e5\u8bc6 , \u65b9\u4fbf\u5927\u5bb6\u7406\u89e3\u5185\u6838\u62a2\u5360 \u603b\u4f53\u601d\u8def\u4ecd\u7136\u662f: \u662f\u4ec0\u4e48 , \u6709\u5565\u597d , \u600e\u4e48\u529e \u901a\u8fc7 grep resched_curr \u53ef\u4ee5\u627e\u51fa\u5927\u591a\u6570\u6807\u8bb0\u62a2\u5360\u7684\u573a\u666f, \u8fd9\u4e2a\u6280\u80fd\u4e5f\u662f\u901a\u7528\uff1a \u6839\u636e\u5185\u6838 API \u6765\u627e\u573a\u666f. \u8fd9\u91cc\u5185\u6838 API resched_curr \u662f\u7528\u4e8e\u6807\u8bb0\u62a2\u5360\u7684, \u90a3\u4e48\u5bf9\u5185\u6838\u6e90\u7801\u8fdb\u884c grep resched_curr \u5c31\u53ef\u4ee5\u627e\u51fa\u5927\u591a\u6570\u6807\u8bb0\u62a2\u5360\u7684\u573a\u666f. \u4e00 \u4ec0\u4e48\u662f\u5185\u6838\u62a2\u5360\uff1f \u522b\u6025\uff0c\u54b1\u4eec\u6162\u6162\u6765\u3002 1 \u5148\u7406\u89e3\u62a2\u5360 (preemption) \u8fd9\u4e2a\u6982\u5ff5\uff1a involuntarily suspending a running process is called preemption \u593a\u53d6\u4e00\u4e2a\u8fdb\u7a0b\u7684 cpu \u4f7f\u7528\u6743\u7684\u884c\u4e3a\u5c31\u53eb\u505a\u62a2\u5360\u3002 2 \u6839\u636e\u662f\u5426\u53ef\u4ee5\u652f\u6301\u62a2\u5360\uff0c\u591a\u4efb\u52a1\u64cd\u4f5c\u7cfb\u7edf (multitasking operating system) \u5206\u4e3a 2 \u7c7b\uff1a 1\u3001cooperative multitasking os \u8fd9\u79cd os\uff0c\u8fdb\u7a0b\u4f1a\u4e00\u76f4\u8fd0\u884c\u76f4\u5230\u5b83\u81ea\u613f\u505c\u4e0b\u6765\u3002\u8fd9\u79cd\u81ea\u613f\u505c\u6b62\u8fd0\u884c\u81ea\u5df1\u7684\u884c\u4e3a\u79f0\u4e3a yielding\u3002\u534f\u4f5c\u5f0f\u591a\u4efb\u52a1\u7cfb\u7edf\uff0c\u4e00\u542c\u5c31\u77e5\u9053\u8fd9\u662f\u4e00\u4e2a\u4e4c\u6258\u90a6\u5f0f\u7684\u7cfb\u7edf\uff0c\u53ea\u6709\u5f53\u6240\u6709\u8fdb\u7a0b\u90fd\u5f88 nice \u5e76\u4e50\u610f\u7ecf\u5e38 yielding \u65f6\uff0c\u7cfb\u7edf\u624d\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002\u5982\u679c\u67d0\u4e2a\u8fdb\u7a0b\u592a\u50bb\u6216\u8005\u592a\u574f\uff0c\u7cfb\u7edf\u5f88\u5feb\u5c31\u5b8c\u86cb\u4e86\u3002 2\u3001preemptive multitasking os \u8fd9\u79cd os\uff0c\u4f1a\u6709\u4e00\u4e2a\u8c03\u5ea6\u5668 (scheduler\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u6bb5\u7528\u4e8e\u8c03\u5ea6\u8fdb\u7a0b\u7684\u7a0b\u5e8f)\uff0cscheduler \u51b3\u5b9a\u8fdb\u7a0b\u4f55\u65f6\u505c\u6b62\u8fd0\u884c\u4ee5\u53ca\u65b0\u8fdb\u7a0b\u4f55\u65f6\u5f00\u59cb\u8fd0\u884c\u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u7684 cpu \u4f7f\u7528\u6743\u88ab scheduler \u5206\u914d\u7ed9\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u65f6\uff0c\u5c31\u79f0\u524d\u4e00\u4e2a\u8fdb\u7a0b\u88ab\u62a2\u5360\u4e86\u3002 \u4f60\u53ef\u4ee5\u628a sheduler \u60f3\u8c61\u6210\u975e\u5e38\u667a\u80fd\u7684\u4ea4\u8b66\uff0c\u4ea4\u8b66\u6309\u7167\u4e00\u5b9a\u7684\u4ea4\u901a\u89c4\u5219\u3001\u5f53\u524d\u7684\u4ea4\u901a\u72b6\u51b5\u4ee5\u53ca\u8f66\u8f86\u7684\u4f18\u5148\u7ea7 (\u6551\u62a4\u8f66\u4e4b\u7c7b\u7684)\uff0c\u51b3\u5b9a\u4e86\u54ea\u4e9b\u8f66\u53ef\u4ee5\u884c\u9a76\u3001\u54ea\u4e9b\u8f66\u8981\u505c\u4e0b\u6765\u7b49\u5f85\u3002 \u5f88\u660e\u663e\uff0c\u73b0\u9636\u6bb5\uff0cpreemptive os \u4f18\u4e8e cooperative os\u3002\u6240\u4ee5 Linux \u88ab\u8bbe\u8ba1\u6210 preemptive\u3002 3 \u62a2\u5360\u7684\u6838\u5fc3\u64cd\u4f5c\u5305\u62ec 2 \u4e2a\u6b65\u9aa4\uff1a 1\u3001\u4ece\u7528\u6237\u6001\u9677\u5165\u5230\u5185\u6838\u6001 (trap kernel)\uff0c3 \u4e2a\u8def\u5f84\uff1a a. \u7cfb\u7edf\u8c03\u7528\uff0c\u672c\u8d28\u662f soft interrupt\uff0c\u901a\u5e38\u5c31\u662f\u4e00\u6761\u786c\u4ef6\u6307\u4ee4 (x86 \u7684 int 0x80)\u3002 b. \u786c\u4ef6\u4e2d\u65ad\uff0c\u6700\u5178\u578b\u7684\u5c31\u662f\u4f1a\u5468\u671f\u6027\u53d1\u751f\u7684 timer \u4e2d\u65ad\uff0c\u6216\u8005\u5176\u4ed6\u5404\u79cd\u5916\u8bbe\u4e2d\u65ad. c. exception\uff0c\u4f8b\u5982 page fault\u3001div 0\u3002 2\u3001\u9677\u5165\u5230\u5185\u6838\u6001\u540e\uff0c\u5728\u5408\u9002\u7684\u65f6\u673a\u4e0b\uff0c\u8c03\u7528 sheduler \u9009\u51fa\u4e00\u4e2a\u6700\u91cd\u8981\u7684\u8fdb\u7a0b\uff0c\u5982\u679c\u88ab\u9009\u4e2d\u7684\u4e0d\u662f\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u7684\u8bdd\uff0c\u5c31\u4f1a\u6267\u884c context switch \u5207\u6362\u5230\u65b0\u7684\u8fdb\u7a0b\u3002 4 \u6839\u636e\u62a2\u5360\u65f6\u673a\u70b9\u7684\u4e0d\u540c\uff0c\u62a2\u5360\u5206\u4e3a 2 \u79cd\u7c7b\u578b\uff1a 1\u3001user preemption \u8fd9\u91cc\u7684 user \u5e76\u4e0d\u662f\u6307\u5728 user-space \u91cc\u8fdb\u884c\u62a2\u5360\uff0c\u800c\u662f\u6307\u5728\u8fd4\u56de user-space \u524d\u8fdb\u884c\u62a2\u5360\uff0c\u5177\u4f53\u7684\uff1a When returning to user-space from a system call When returning to user-space from an interrupt handler \u5373\u4ece system call \u548c interrupt handler \u8fd4\u56de\u5230 user-space \u524d\u8fdb\u884c\u62a2\u5360\uff0c\u8fd9\u65f6\u4ecd\u7136\u662f\u5728 kernel-space \u91cc\uff0c\u62a2\u5360\u662f\u9700\u8981\u975e\u5e38\u9ad8\u7684\u6743\u9650\u7684\u4e8b\u60c5\uff0cuser-space \u6ca1\u6743\u5229\u4e5f\u4e0d\u5e94\u8be5\u5e72\u8fd9\u4e8b\u3002 2\u3001kernel preemption Linux 2.6 \u4e4b\u524d\u662f\u4e0d\u652f\u6301\u5185\u6838\u62a2\u5360\u7684\u3002\u8fd9\u610f\u5473\u7740\u5f53\u5904\u4e8e\u7528\u6237\u7a7a\u95f4\u7684\u8fdb\u7a0b\u8bf7\u6c42\u5185\u6838\u670d\u52a1\u65f6\uff0c\u5728\u8be5\u8fdb\u7a0b\u963b\u585e\uff08\u8fdb\u5165\u7761\u7720\uff09\u7b49\u5f85\u67d0\u4e8b\uff08\u901a\u5e38\u662f I/O\uff09\u6216\u7cfb\u7edf\u8c03\u7528\u5b8c\u6210\u4e4b\u524d\uff0c\u4e0d\u80fd\u8c03\u5ea6\u5176\u4ed6\u8fdb\u7a0b\u3002\u652f\u6301\u5185\u6838\u62a2\u5360\u610f\u5473\u7740\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u5728\u5185\u6838\u91cc\u8fd0\u884c\u65f6\uff0c\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u62a2\u5360\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u5e76\u88ab\u5141\u8bb8\u8fd0\u884c\uff0c\u5373\u4f7f\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u5c1a\u672a\u5b8c\u6210\u5176\u5728\u5185\u6838\u91cc\u7684\u5de5\u4f5c\u3002 \u652f\u6301\u5185\u6838\u62a2\u5360(\u5de6) vs \u4e0d\u652f\u6301\u5185\u6838\u62a2\u5360(\u53f3): \u4e3e\u4e2a\u4f8b\u5b50\uff1a \u5728\u4e0a\u56fe\u4e2d\uff0c\u8fdb\u7a0b A \u5df2\u7ecf\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u8fdb\u5165\u5185\u6838\uff0c\u4e5f\u8bb8\u662f\u5bf9\u8bbe\u5907\u6216\u6587\u4ef6\u7684 write() \u8c03\u7528\u3002\u5185\u6838\u4ee3\u8868\u8fdb\u7a0b A \u6267\u884c\u65f6\uff0c\u5177\u6709\u66f4\u9ad8\u4f18\u5148\u7ea7\u7684\u8fdb\u7a0b B \u88ab\u4e2d\u65ad\u5524\u9192\u3002\u5185\u6838\u62a2\u5360\u8fdb\u7a0b A \u5e76\u5c06 CPU \u5206\u914d\u7ed9\u8fdb\u7a0b B\uff0c\u5373\u4f7f\u8fdb\u7a0b A \u65e2\u6ca1\u6709\u963b\u585e\u4e5f\u6ca1\u6709\u5b8c\u6210\u5176\u5728\u5185\u6838\u91cc\u7684\u5de5\u4f5c\u3002 \u5185\u6838\u62a2\u5360\u7684\u65f6\u673a\uff1a When an interrupt handler exits, before returning to kernel-space When kernel code becomes preemptible again If a task in the kernel explicitly calls schedule() If a task in the kernel blocks (which results in a call to schedule() ) \u4e8c \u4e3a\u4ec0\u4e48\u8981\u5f15\u5165\u5185\u6838\u62a2\u5360\uff1f 1 \u6839\u672c\u539f\u56e0\uff1a trade-offs between latency and throughput \u5728\u7cfb\u7edf\u5ef6\u8fdf\u548c\u541e\u5410\u91cf\u4e4b\u95f4\u8fdb\u884c\u6743\u8861\u3002 \u5e76\u4e0d\u662f\u8bf4\u5185\u6838\u62a2\u5360\u5c31\u662f\u7edd\u5bf9\u7684\u597d\uff0c\u4f7f\u7528\u4ec0\u4e48\u62a2\u5360\u673a\u5236\u6700\u4f18\u662f\u8ddf\u4f60\u7684\u5e94\u7528\u573a\u666f\u6302\u94a9\u7684\u3002\u5982\u679c\u4e0d\u662f\u4e3a\u4e86\u6ee1\u8db3\u7528\u6237\uff0c\u5185\u6838\u5176\u5b9e\u662f\u5b8c\u5168\u4e0d\u60f3\u8fdb\u884c\u8fdb\u7a0b\u5207\u6362\u7684\uff0c\u56e0\u4e3a\u6bcf\u4e00\u6b21 context switch\uff0c\u90fd\u4f1a\u6709 overhead\uff0c\u8fd9\u4e9b overhead \u5c31\u662f\u5bf9 cpu \u7684\u6d6a\u8d39\uff0c\u610f\u5473\u7740\u541e\u5410\u91cf\u7684\u4e0b\u964d\u3002 \u4f46\u662f\uff0c\u5982\u679c\u4f60\u60f3\u8981\u7cfb\u7edf\u7684\u54cd\u5e94\u6027\u597d\u4e00\u70b9\uff0c\u5c31\u5f97\u5c3d\u91cf\u591a\u7684\u5141\u8bb8\u62a2\u5360\u7684\u53d1\u751f\uff0c\u8fd9\u662f Linux \u4f5c\u4e3a\u4e00\u4e2a\u901a\u7528\u64cd\u4f5c\u7cfb\u7edf\u6240\u5fc5\u987b\u652f\u6301\u7684\u3002\u5f53\u4f60\u7684\u7cfb\u7edf\u505a\u5230\u968f\u65f6\u90fd\u53ef\u4ee5\u53d1\u751f\u62a2\u5360\u65f6\uff0c\u7cfb\u7edf\u7684\u54cd\u5e94\u6027\u5c31\u4f1a\u975e\u5e38\u597d\u3002 2 \u4e3a\u4e86\u8ba9\u7528\u6237\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u8fdb\u884c\u914d\u7f6e\uff0cLinux \u63d0\u4f9b\u4e86 3 \u79cd Preemption Model\u3002 A CONFIG_PREEMPT_NONE=y\uff1a\u4e0d\u5141\u8bb8\u5185\u6838\u62a2\u5360\uff0c\u541e\u5410\u91cf\u6700\u5927\u7684 Model\uff0c\u4e00\u822c\u7528\u4e8e Server \u7cfb\u7edf\u3002 B CONFIG_PREEMPT_VOLUNTARY=y\uff1a\u5728\u4e00\u4e9b\u8017\u65f6\u8f83\u957f\u7684\u5185\u6838\u4ee3\u7801\u4e2d\u4e3b\u52a8\u8c03\u7528 cond_resched()\u8ba9\u51fa CPU\uff0c\u5bf9\u541e\u5410\u91cf\u6709\u8f7b\u5fae\u5f71\u54cd\uff0c\u4f46\u662f\u7cfb\u7edf\u54cd\u5e94\u4f1a\u7a0d\u5fae\u5feb\u4e00\u4e9b\u3002 C CONFIG_PREEMPT=y\uff1a\u9664\u4e86\u5904\u4e8e\u6301\u6709 spinlock \u65f6\u7684 critical section\uff0c\u5176\u4ed6\u65f6\u5019\u90fd\u5141\u8bb8\u5185\u6838\u62a2\u5360\uff0c\u54cd\u5e94\u901f\u5ea6\u8fdb\u4e00\u6b65\u63d0\u5347\uff0c\u541e\u5410\u91cf\u8fdb\u4e00\u6b65\u4e0b\u964d\uff0c\u4e00\u822c\u7528\u4e8e Desktop / Embedded \u7cfb\u7edf\u3002 D \u53e6\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u6ca1\u6709\u5408\u5e76\u8fdb\u4e3b\u7ebf\u5185\u6838\u7684 Model: CONFIG_PREEMPT_RT \u8fd9\u4e2a\u6a21\u5f0f\u51e0\u4e4e\u5c06\u6240\u6709\u7684 spinlock \u90fd\u6362\u6210\u4e86 preemptable mutex\uff0c\u53ea\u5269\u4e0b\u4e00\u4e9b\u6781\u5176\u6838\u5fc3\u7684\u5730\u65b9\u4ecd\u7136\u7528\u7981\u6b62\u62a2\u5360\u7684 spinlock\uff0c\u6240\u4ee5\u57fa\u672c\u53ef\u4ee5\u8ba4\u4e3a\u662f\u968f\u65f6\u53ef\u88ab\u62a2\u5360\u3002 \u4e09 \u600e\u4e48\u64cd\u4f5c? 1 \u62a2\u5360\u524d\u68c0\u67e5 \u8fd9\u91cc\u7684\u68c0\u67e5\u662f\u540c\u65f6\u9488\u5bf9\u6240\u6709\u7684 preemption \u7684\u3002\u5982\u679c\u4f60\u7406\u89e3\u4e86\u524d\u9762\u7684 4 \u79cd preempiton model \u7684\u8bdd\uff0c\u5e94\u8be5\u80fd\u611f\u89c9\u5230\u5176\u5b9e\u662f\u4e0d\u7528\u592a\u4e25\u683c\u533a\u5206 user / kernel preemption\uff0c\u6240\u6709\u62a2\u5360\u7684\u4f5c\u7528\u548c\u6027\u8d28\u90fd\u4e00\u6837\uff1a\u964d\u4f4e lantency\uff0c\u5b8c\u5168\u53ef\u4ee5\u5c06\u5b83\u4eec\u4e00\u89c6\u540c\u4ec1\u3002 \u62a2\u5360\u7684\u53d1\u751f\u8981\u540c\u65f6\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\uff1a \u9700\u8981\u62a2\u5360; \u80fd\u62a2\u5360; 1\u3001\u662f\u5426\u9700\u8981\u62a2\u5360\uff1f \u5224\u65ad\u662f\u5426\u9700\u8981\u62a2\u5360\u7684\u4f9d\u636e\u662f\uff1athread_info \u7684\u6210\u5458 flags \u662f\u5426\u8bbe\u7f6e\u4e86 TIF_NEED_RESCHED \u6807\u5fd7\u4f4d\u3002 \u76f8\u5173\u7684 API\uff1a set_tsk_need_resched() \u7528\u4e8e\u8bbe\u7f6e\u8be5 flag\u3002 tif_need_resched() \u88ab\u7528\u6765\u5224\u65ad\u8be5 flag \u662f\u5426\u7f6e\u4f4d\u3002 resched_curr(struct rq *rq)\uff0c\u6807\u8bb0\u5f53\u524d runqueue \u9700\u8981\u62a2\u5360\u3002 2\u3001\u662f\u5426\u80fd\u62a2\u5360\uff1f \u62a2\u5360\u53d1\u751f\u7684\u524d\u63d0\u662f\u8981\u786e\u4fdd\u6b64\u6b21\u62a2\u5360\u662f\u5b89\u5168\u7684 (preempt-safe)\u3002 \u4ec0\u4e48\u624d\u662f preempt-safe\uff1a \u4e0d\u4ea7\u751f race condition / deadlock\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u53ea\u6709 kernel preemption \u624d\u6709\u88ab\u7981\u6b62\u7684\u53ef\u80fd\uff0c\u800c user preemption \u603b\u662f\u88ab\u5141\u8bb8\uff0c\u56e0\u6b64\u8fd9\u65f6\u9a6c\u4e0a\u5c31\u8981\u8fd4\u56de user space \u4e86\uff0c\u80af\u5b9a\u662f\u5904\u4e8e\u4e00\u4e2a\u53ef\u62a2\u5360\u7684\u72b6\u6001\u4e86\u3002 \u5728\u5f15\u5165\u5185\u6838\u62a2\u5360\u673a\u5236\u7684\u540c\u65f6\u5f15\u5165\u4e86\u4e3a thread_info \u6dfb\u52a0\u4e86\u65b0\u7684\u6210\u5458\uff1apreempt_count \uff0c\u7528\u6765\u4fdd\u8bc1\u62a2\u5360\u7684\u5b89\u5168\u6027\uff0c\u83b7\u53d6\u9501\u65f6\u4f1a\u589e\u52a0 preempt_count\uff0c\u91ca\u653e\u9501\u65f6\u5219\u4f1a\u51cf\u5c11\u3002\u62a2\u5360\u524d\u4f1a\u68c0\u67e5 preempt_count \u662f\u5426\u4e3a 0\uff0c\u4e3a 0 \u624d\u5141\u8bb8\u62a2\u5360\u3002 \u76f8\u5173\u7684 API\uff1a preempt_enable()\uff0c\u4f7f\u80fd\u5185\u6838\u62a2\u5360\uff0c\u53ef\u5d4c\u5957\u8c03\u7528\u3002 preempt_disable()\uff0c\u5173\u95ed\u5185\u6838\u62a2\u5360\uff0c\u53ef\u5d4c\u5957\u8c03\u7528\u3002 preempt_count()\uff0c\u8fd4\u56de preempt_count\u3002 2 \u4ec0\u4e48\u573a\u666f\u4f1a\u8bbe\u7f6e\u9700\u8981\u62a2\u5360 (TIF_NEED_RESCHED = 1) \u901a\u8fc7 grep resched_curr \u53ef\u4ee5\u627e\u51fa\u5927\u591a\u6570\u6807\u8bb0\u62a2\u5360\u7684\u573a\u666f\u3002 \u4e0b\u9762\u5217\u4e3e\u7684\u662f\u51e0\u4e2a\u6211\u6bd4\u8f83\u5173\u5fc3\u7684\u573a\u666f\u3002 1\u3001\u5468\u671f\u6027\u7684\u65f6\u949f\u4e2d\u65ad \u65f6\u949f\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u4f1a\u8c03\u7528 scheduler_tick()\uff0c\u5b83\u901a\u8fc7\u8c03\u5ea6\u7c7b(scheduling class) \u7684 task_tick \u65b9\u6cd5 \u68c0\u67e5\u8fdb\u7a0b\u7684\u65f6\u95f4\u7247\u662f\u5426\u8017\u5c3d\uff0c\u5982\u679c\u8017\u5c3d\u5219\u6807\u8bb0\u9700\u8981\u62a2\u5360\uff1a // kernel/sched/core.c void scheduler_tick(void) { [...] curr->sched_class->task_tick(rq, curr, 0); [...] } Linux \u7684\u8c03\u5ea6\u7b56\u7565\u88ab\u5c01\u88c5\u6210\u8c03\u5ea6\u7c7b\uff0c\u4f8b\u5982 CFS\u3001Real-Time\u3002CFS \u8c03\u5ea6\u7c7b\u7684 task_tick() \u5982\u4e0b\uff1a // kernel/sched/fair.c task_tick_fair() -> entity_tick() -> resched_curr(rq_of(cfs_rq)); 2\u3001\u5524\u9192\u8fdb\u7a0b\u7684\u65f6\u5019 \u5f53\u8fdb\u7a0b\u88ab\u5524\u9192\u7684\u65f6\u5019\uff0c\u5982\u679c\u4f18\u5148\u7ea7\u9ad8\u4e8e CPU \u4e0a\u7684\u5f53\u524d\u8fdb\u7a0b\uff0c\u5c31\u4f1a\u89e6\u53d1\u62a2\u5360\u3002\u76f8\u5e94\u7684\u5185\u6838\u4ee3\u7801\u4e2d\uff0ctry_to_wake_up() \u6700\u7ec8\u901a\u8fc7 check_preempt_curr() \u68c0\u67e5\u662f\u5426\u6807\u8bb0\u9700\u8981\u62a2\u5360\uff1a // kernel/sched/core.c void check_preempt_curr(struct rq *rq, struct task_struct *p, int flags) { const struct sched_class *class; if (p->sched_class == rq->curr->sched_class) { rq->curr->sched_class->check_preempt_curr(rq, p, flags); } else { for_each_class(class) { if (class == rq->curr->sched_class) break; if (class == p->sched_class) { resched_curr(rq); break; } } } [...] } \u53c2\u6570 \"p\" \u6307\u5411\u88ab\u5524\u9192\u8fdb\u7a0b \"rq\" \u4ee3\u8868\u62a2\u5360\u7684 CPU\u3002 \u5982\u679c p \u7684\u8c03\u5ea6\u7c7b\u548c rq \u5f53\u524d\u7684\u8c03\u5ea6\u7c7b\u76f8\u540c\uff0c\u5219\u8c03\u7528 rq \u5f53\u524d\u7684\u8c03\u5ea6\u7c7b\u7684 check_preempt_curr() (\u4f8b\u5982 cfs \u7684 check_preempt_wakeup()) \u6765\u5224\u65ad\u662f\u5426\u8981\u6807\u8bb0\u9700\u8981\u62a2\u5360\u3002 \u5982\u679c p \u7684\u8c03\u5ea6\u7c7b > rq \u5f53\u524d\u7684\u8c03\u5ea6\u7c7b\uff0c\u5219\u7528 resched_curr() \u6807\u8bb0\u9700\u8981\u62a2\u5360\uff0c\u53cd\u4e4b\uff0c\u5219\u4e0d\u6807\u8bb0\u3002 3\u3001\u65b0\u8fdb\u7a0b\u521b\u5efa\u7684\u65f6\u5019 \u5982\u679c\u65b0\u8fdb\u7a0b\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e CPU \u4e0a\u7684\u5f53\u524d\u8fdb\u7a0b\uff0c\u4f1a\u9700\u8981\u89e6\u53d1\u62a2\u5360\u3002\u76f8\u5e94\u7684\u4ee3\u7801\u662f sched_fork()\uff0c\u5b83\u518d\u901a\u8fc7\u8c03\u5ea6\u7c7b\u7684 task_fork() \u6807\u8bb0\u9700\u8981\u62a2\u5360\uff1a // kernel/sched/core.c int sched_fork(unsigned long clone_flags, struct task_struct \\*p) { [...] if (p->sched_class->task_fork) p->sched_class->task_fork(p); [...] } // kernel/sched/fair.c static void task_fork_fair(struct task_struct \\*p) { \u3000[...] \u3000 if (sysctl_sched_child_runs_first && curr && entity_before(curr, se)) { \u3000\u3000 resched_curr(rq); } [...] } 4\u3001\u8fdb\u7a0b\u4fee\u6539 nice \u503c\u7684\u65f6\u5019 \u5982\u679c\u4fee\u6539\u8fdb\u7a0b nice \u503c\u5bfc\u81f4\u4f18\u5148\u7ea7\u9ad8\u4e8e CPU \u4e0a\u7684\u5f53\u524d\u8fdb\u7a0b\uff0c\u4e5f\u8981\u6807\u8bb0\u9700\u8981\u62a2\u5360\uff0c\u4ee3\u7801\u89c1 set_user_nice()\u3002 // kernel/sched/core.c void set_user_nice(struct task_struct \\*p, long nice) { [...] // If the task increased its priority or is running and lowered its priority, then reschedule its CPU if (delta < 0 || (delta > 0 && task_running(rq, p))) resched_curr(rq); } \u8fd8\u6709\u5f88\u591a\u573a\u666f\uff0c\u8fd9\u91cc\u5c31\u4e0d\u4e00\u4e00\u5217\u4e3e\u4e86\u3002 3 \u4ec0\u4e48\u573a\u666f\u4e0b\u8981\u7981\u6b62\u5185\u6838\u62a2\u5360 (preempt_count > 0) \u6709\u51e0\u79cd\u573a\u666f\u662f\u660e\u786e\u9700\u8981\u5173\u95ed\u5185\u6838\u62a2\u5360\u7684\u3002 1\u3001\u8bbf\u95ee Per-CPU data structures \u7684\u65f6\u5019 \u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff1a struct this_needs_locking tux[NR_CPUS]; tux[smp_processor_id()] = some_value; /_ task is preempted here... _/ something = tux[smp_processor_id()]; \u5982\u679c\u62a2\u5360\u53d1\u751f\u5728\u6ce8\u91ca\u6240\u5728\u7684\u90a3\u4e00\u884c\uff0c\u5f53\u8fdb\u7a0b\u518d\u6b21\u88ab\u8c03\u5ea6\u65f6\uff0csmp_processor_id() \u503c\u53ef\u80fd\u5df2\u7ecf\u53d1\u751f\u53d8\u5316\u4e86\uff0c\u8fd9\u79cd\u573a\u666f\u4e0b\u9700\u8981\u901a\u8fc7\u7981\u6b62\u5185\u6838\u62a2\u5360\u6765\u505a\u5230 preempt safe\u3002 2\u3001\u8bbf\u95ee CPU state \u7684\u65f6\u5019 \u8fd9\u4e2a\u5f88\u597d\u7406\u89e3\uff0c\u4f60\u6b63\u5728\u64cd\u4f5c CPU \u76f8\u5173\u7684\u5bc4\u5b58\u5668\u4ee5\u8fdb\u884c context switch \u65f6\uff0c\u80af\u5b9a\u662f\u4e0d\u80fd\u518d\u5141\u8bb8\u62a2\u5360\u3002 asmlinkage **visible void **sched schedule(void) { struct task_struct \\*tsk = current; sched_submit_work(tsk); do { // \u8c03\u5ea6\u524d\u7981\u6b62\u5185\u6838\u62a2\u5360 preempt_disable(); \\_\\_schedule(false); sched_preempt_enable_no_resched(); } while (need_resched()); sched_update_worker(tsk); } 3\u3001\u6301\u6709 spinlock \u7684\u65f6\u5019 \u652f\u6301\u5185\u6838\u62a2\u5360\uff0c\u8fd9\u610f\u5473\u7740\u8fdb\u7a0b\u6709\u53ef\u80fd\u4e0e\u88ab\u62a2\u5360\u7684\u8fdb\u7a0b\u5728\u76f8\u540c\u7684 critical section \u4e2d\u8fd0\u884c\u3002\u4e3a\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\uff0c\u5f53\u6301\u6709\u81ea\u65cb\u9501\u65f6\uff0c\u8981\u7981\u6b62\u5185\u6838\u62a2\u5360\u3002 static inline void \\__raw_spin_lock(raw_spinlock_t \\*lock) { preempt_disable(); spin_acquire(&lock->dep_map, 0, 0, \\_RET_IP_); LOCK_CONTENDED(lock, do_raw_spin_trylock, do_raw_spin_lock); } \u8fd8\u6709\u5f88\u591a\u573a\u666f\uff0c\u8fd9\u91cc\u5c31\u4e0d\u4e00\u4e00\u5217\u4e3e\u4e86\u3002 4 \u771f\u6b63\u6267\u884c\u62a2\u5360\u7684\u5730\u65b9 \u8fd9\u90e8\u5206\u662f platform \u76f8\u5173\u7684\uff0c\u4e0b\u9762\u4ee5 ARM64 Linux-5.4 \u4e3a\u4f8b\uff0c\u5feb\u901f\u770b\u4e0b\u6267\u884c\u62a2\u5360\u7684\u5177\u4f53\u4ee3\u7801\u3002 A \u6267\u884c user preemption a \u7cfb\u7edf\u8c03\u7528\u548c\u4e2d\u65ad\u8fd4\u56de\u7528\u6237\u7a7a\u95f4\u7684\u65f6\u5019\uff1a \u5b83\u4eec\u90fd\u662f\u5728 ret_to_user() \u91cc\u5224\u65ad\u662f\u5426\u6267\u884c\u7528\u6237\u62a2\u5360\u3002 // arch/arm64/kernel/entry.S ret_to_user() // \u8fd4\u56de\u5230\u7528\u6237\u7a7a\u95f4 work_pending() do_notify_resume() schedule() // arch/arm64/kernel/signal.c asmlinkage void do_notify_resume(struct pt_regs \\*regs, unsigned long thread_flags) { do { [...] // \u68c0\u67e5\u662f\u5426\u8981\u9700\u8981\u8c03\u5ea6 if (thread_flags & \\_TIF_NEED_RESCHED) { local_daif_restore(DAIF_PROCCTX_NOIRQ); schedule(); } else { [...] } while (thread_flags & \\_TIF_WORK_MASK); } B \u6267\u884c kernel preemption a \u4e2d\u65ad\u8fd4\u56de\u5185\u6838\u7a7a\u95f4\u7684\u65f6\u5019\uff1a // arch/arm64/kernel/entry.S el1_irq irq_handler arm64_preempt_schedule_irq preempt_schedule_irq \\_\\_schedule(true) // kernel/sched/core.c /_ This is the entry point to schedule() from kernel preemption _/ asmlinkage **visible void **sched preempt_schedule_irq(void) { [...] do { preempt_disable(); local_irq_enable(); \\_\\_schedule(true); local_irq_disable(); sched_preempt_enable_no_resched(); } while (need_resched()); exception_exit(prev_state); } b \u5185\u6838\u6062\u590d\u4e3a\u53ef\u62a2\u5360\u7684\u65f6\u5019\uff1a \u524d\u9762\u5217\u4e3e\u4e86\u96c6\u4e2d\u5173\u95ed\u62a2\u5360\u7684\u573a\u666f\uff0c\u5f53\u79bb\u5f00\u8fd9\u4e9b\u573a\u666f\u65f6\uff0c\u4f1a\u6062\u590d\u5185\u6838\u62a2\u5360\u3002 \u4f8b\u5982 spinlock unlock \u65f6\uff1a static inline void \\__raw_spin_unlock(raw_spinlock_t \\*lock) { spin_release(&lock->dep_map, 1, \\_RET_IP_); do_raw_spin_unlock(lock); preempt_enable(); // \u4f7f\u80fd\u62a2\u5360\u65f6\uff0c\u5982\u679c\u9700\u8981\uff0c\u5c31\u4f1a\u6267\u884c\u62a2\u5360 } // include/linux/preempt.h #define preempt_enable() \\ do { \\ barrier(); \\ if (unlikely(preempt_count_dec_and_test())) \\ \\_\\_preempt_schedule(); \\ } while (0) c \u5185\u6838\u663e\u5f0f\u5730\u8981\u6c42\u8c03\u5ea6\u7684\u65f6\u5019\uff1a \u5185\u6838\u91cc\u6709\u5927\u91cf\u7684\u5730\u65b9\u4f1a\u663e\u5f0f\u5730\u8981\u6c42\u8fdb\u884c\u8c03\u5ea6\uff0c\u6700\u5e38\u89c1\u7684\u662f\uff1acond_resched() \u548c sleep()\u7c7b\u51fd\u6570\uff0c\u5b83\u4eec\u6700\u7ec8\u90fd\u4f1a\u8c03\u7528\u5230 __schedule()\u3002 d \u5185\u6838\u963b\u585e\u7684\u65f6\u5019\uff1a \u4f8b\u5982 mutex\uff0csem\uff0cwaitqueue \u83b7\u53d6\u4e0d\u5230\u8d44\u6e90\uff0c\u6216\u8005\u662f\u7b49\u5f85 IO\u3002 \u8fd9\u79cd\u60c5\u51b5\u4e0b\u8fdb\u7a0b\u4f1a\u5c06\u81ea\u5df1\u7684\u72b6\u6001\u4ece\u3000 TASK_RUNNING \u4fee\u6539\u4e3a TASK_INTERRUPTIBLE\uff0c\u7136\u540e\u8c03\u7528 schedule() \u4e3b\u52a8\u8ba9\u51fa CPU \u5e76\u7b49\u5f85\u5524\u9192\u3002 // block/blk-core.c static struct request *get_request(struct request_queue *q, int op, int op_flags, struct bio \\*bio, gfp_t gfp_mask) { [...] prepare_to_wait_exclusive(&rl->wait[is_sync], &wait, TASK_UNINTERRUPTIBLE); io_schedule(); // \u4f1a\u8c03\u7528 schedule(); [...] }","title":"\u7b2c\u5341\u4e8c\u7bc7 \u5185\u6838\u62a2\u5360\u57fa\u7840\u7bc7"},{"location":"chapter_4/12_linux_preemption/#_1","text":"\u672c\u7bc7\u6c47\u603b\u4e00\u4e9b Linux \u5185\u6838\u62a2\u5360(preemption)\u7684 \u57fa\u7840\u77e5\u8bc6 , \u65b9\u4fbf\u5927\u5bb6\u7406\u89e3\u5185\u6838\u62a2\u5360 \u603b\u4f53\u601d\u8def\u4ecd\u7136\u662f: \u662f\u4ec0\u4e48 , \u6709\u5565\u597d , \u600e\u4e48\u529e \u901a\u8fc7 grep resched_curr \u53ef\u4ee5\u627e\u51fa\u5927\u591a\u6570\u6807\u8bb0\u62a2\u5360\u7684\u573a\u666f, \u8fd9\u4e2a\u6280\u80fd\u4e5f\u662f\u901a\u7528\uff1a \u6839\u636e\u5185\u6838 API \u6765\u627e\u573a\u666f. \u8fd9\u91cc\u5185\u6838 API resched_curr \u662f\u7528\u4e8e\u6807\u8bb0\u62a2\u5360\u7684, \u90a3\u4e48\u5bf9\u5185\u6838\u6e90\u7801\u8fdb\u884c grep resched_curr \u5c31\u53ef\u4ee5\u627e\u51fa\u5927\u591a\u6570\u6807\u8bb0\u62a2\u5360\u7684\u573a\u666f.","title":"\u6982\u8ff0"},{"location":"chapter_4/12_linux_preemption/#_2","text":"\u522b\u6025\uff0c\u54b1\u4eec\u6162\u6162\u6765\u3002","title":"\u4e00 \u4ec0\u4e48\u662f\u5185\u6838\u62a2\u5360\uff1f"},{"location":"chapter_4/12_linux_preemption/#1-preemption","text":"involuntarily suspending a running process is called preemption \u593a\u53d6\u4e00\u4e2a\u8fdb\u7a0b\u7684 cpu \u4f7f\u7528\u6743\u7684\u884c\u4e3a\u5c31\u53eb\u505a\u62a2\u5360\u3002","title":"1 \u5148\u7406\u89e3\u62a2\u5360 (preemption) \u8fd9\u4e2a\u6982\u5ff5\uff1a"},{"location":"chapter_4/12_linux_preemption/#2-multitasking-operating-system-2","text":"1\u3001cooperative multitasking os \u8fd9\u79cd os\uff0c\u8fdb\u7a0b\u4f1a\u4e00\u76f4\u8fd0\u884c\u76f4\u5230\u5b83\u81ea\u613f\u505c\u4e0b\u6765\u3002\u8fd9\u79cd\u81ea\u613f\u505c\u6b62\u8fd0\u884c\u81ea\u5df1\u7684\u884c\u4e3a\u79f0\u4e3a yielding\u3002\u534f\u4f5c\u5f0f\u591a\u4efb\u52a1\u7cfb\u7edf\uff0c\u4e00\u542c\u5c31\u77e5\u9053\u8fd9\u662f\u4e00\u4e2a\u4e4c\u6258\u90a6\u5f0f\u7684\u7cfb\u7edf\uff0c\u53ea\u6709\u5f53\u6240\u6709\u8fdb\u7a0b\u90fd\u5f88 nice \u5e76\u4e50\u610f\u7ecf\u5e38 yielding \u65f6\uff0c\u7cfb\u7edf\u624d\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002\u5982\u679c\u67d0\u4e2a\u8fdb\u7a0b\u592a\u50bb\u6216\u8005\u592a\u574f\uff0c\u7cfb\u7edf\u5f88\u5feb\u5c31\u5b8c\u86cb\u4e86\u3002 2\u3001preemptive multitasking os \u8fd9\u79cd os\uff0c\u4f1a\u6709\u4e00\u4e2a\u8c03\u5ea6\u5668 (scheduler\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u6bb5\u7528\u4e8e\u8c03\u5ea6\u8fdb\u7a0b\u7684\u7a0b\u5e8f)\uff0cscheduler \u51b3\u5b9a\u8fdb\u7a0b\u4f55\u65f6\u505c\u6b62\u8fd0\u884c\u4ee5\u53ca\u65b0\u8fdb\u7a0b\u4f55\u65f6\u5f00\u59cb\u8fd0\u884c\u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u7684 cpu \u4f7f\u7528\u6743\u88ab scheduler \u5206\u914d\u7ed9\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u65f6\uff0c\u5c31\u79f0\u524d\u4e00\u4e2a\u8fdb\u7a0b\u88ab\u62a2\u5360\u4e86\u3002 \u4f60\u53ef\u4ee5\u628a sheduler \u60f3\u8c61\u6210\u975e\u5e38\u667a\u80fd\u7684\u4ea4\u8b66\uff0c\u4ea4\u8b66\u6309\u7167\u4e00\u5b9a\u7684\u4ea4\u901a\u89c4\u5219\u3001\u5f53\u524d\u7684\u4ea4\u901a\u72b6\u51b5\u4ee5\u53ca\u8f66\u8f86\u7684\u4f18\u5148\u7ea7 (\u6551\u62a4\u8f66\u4e4b\u7c7b\u7684)\uff0c\u51b3\u5b9a\u4e86\u54ea\u4e9b\u8f66\u53ef\u4ee5\u884c\u9a76\u3001\u54ea\u4e9b\u8f66\u8981\u505c\u4e0b\u6765\u7b49\u5f85\u3002 \u5f88\u660e\u663e\uff0c\u73b0\u9636\u6bb5\uff0cpreemptive os \u4f18\u4e8e cooperative os\u3002\u6240\u4ee5 Linux \u88ab\u8bbe\u8ba1\u6210 preemptive\u3002","title":"2 \u6839\u636e\u662f\u5426\u53ef\u4ee5\u652f\u6301\u62a2\u5360\uff0c\u591a\u4efb\u52a1\u64cd\u4f5c\u7cfb\u7edf (multitasking operating system) \u5206\u4e3a 2 \u7c7b\uff1a"},{"location":"chapter_4/12_linux_preemption/#3-2","text":"1\u3001\u4ece\u7528\u6237\u6001\u9677\u5165\u5230\u5185\u6838\u6001 (trap kernel)\uff0c3 \u4e2a\u8def\u5f84\uff1a a. \u7cfb\u7edf\u8c03\u7528\uff0c\u672c\u8d28\u662f soft interrupt\uff0c\u901a\u5e38\u5c31\u662f\u4e00\u6761\u786c\u4ef6\u6307\u4ee4 (x86 \u7684 int 0x80)\u3002 b. \u786c\u4ef6\u4e2d\u65ad\uff0c\u6700\u5178\u578b\u7684\u5c31\u662f\u4f1a\u5468\u671f\u6027\u53d1\u751f\u7684 timer \u4e2d\u65ad\uff0c\u6216\u8005\u5176\u4ed6\u5404\u79cd\u5916\u8bbe\u4e2d\u65ad. c. exception\uff0c\u4f8b\u5982 page fault\u3001div 0\u3002 2\u3001\u9677\u5165\u5230\u5185\u6838\u6001\u540e\uff0c\u5728\u5408\u9002\u7684\u65f6\u673a\u4e0b\uff0c\u8c03\u7528 sheduler \u9009\u51fa\u4e00\u4e2a\u6700\u91cd\u8981\u7684\u8fdb\u7a0b\uff0c\u5982\u679c\u88ab\u9009\u4e2d\u7684\u4e0d\u662f\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u7684\u8bdd\uff0c\u5c31\u4f1a\u6267\u884c context switch \u5207\u6362\u5230\u65b0\u7684\u8fdb\u7a0b\u3002","title":"3 \u62a2\u5360\u7684\u6838\u5fc3\u64cd\u4f5c\u5305\u62ec 2 \u4e2a\u6b65\u9aa4\uff1a"},{"location":"chapter_4/12_linux_preemption/#4-2","text":"1\u3001user preemption \u8fd9\u91cc\u7684 user \u5e76\u4e0d\u662f\u6307\u5728 user-space \u91cc\u8fdb\u884c\u62a2\u5360\uff0c\u800c\u662f\u6307\u5728\u8fd4\u56de user-space \u524d\u8fdb\u884c\u62a2\u5360\uff0c\u5177\u4f53\u7684\uff1a When returning to user-space from a system call When returning to user-space from an interrupt handler \u5373\u4ece system call \u548c interrupt handler \u8fd4\u56de\u5230 user-space \u524d\u8fdb\u884c\u62a2\u5360\uff0c\u8fd9\u65f6\u4ecd\u7136\u662f\u5728 kernel-space \u91cc\uff0c\u62a2\u5360\u662f\u9700\u8981\u975e\u5e38\u9ad8\u7684\u6743\u9650\u7684\u4e8b\u60c5\uff0cuser-space \u6ca1\u6743\u5229\u4e5f\u4e0d\u5e94\u8be5\u5e72\u8fd9\u4e8b\u3002 2\u3001kernel preemption Linux 2.6 \u4e4b\u524d\u662f\u4e0d\u652f\u6301\u5185\u6838\u62a2\u5360\u7684\u3002\u8fd9\u610f\u5473\u7740\u5f53\u5904\u4e8e\u7528\u6237\u7a7a\u95f4\u7684\u8fdb\u7a0b\u8bf7\u6c42\u5185\u6838\u670d\u52a1\u65f6\uff0c\u5728\u8be5\u8fdb\u7a0b\u963b\u585e\uff08\u8fdb\u5165\u7761\u7720\uff09\u7b49\u5f85\u67d0\u4e8b\uff08\u901a\u5e38\u662f I/O\uff09\u6216\u7cfb\u7edf\u8c03\u7528\u5b8c\u6210\u4e4b\u524d\uff0c\u4e0d\u80fd\u8c03\u5ea6\u5176\u4ed6\u8fdb\u7a0b\u3002\u652f\u6301\u5185\u6838\u62a2\u5360\u610f\u5473\u7740\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u5728\u5185\u6838\u91cc\u8fd0\u884c\u65f6\uff0c\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u62a2\u5360\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u5e76\u88ab\u5141\u8bb8\u8fd0\u884c\uff0c\u5373\u4f7f\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u5c1a\u672a\u5b8c\u6210\u5176\u5728\u5185\u6838\u91cc\u7684\u5de5\u4f5c\u3002 \u652f\u6301\u5185\u6838\u62a2\u5360(\u5de6) vs \u4e0d\u652f\u6301\u5185\u6838\u62a2\u5360(\u53f3): \u4e3e\u4e2a\u4f8b\u5b50\uff1a \u5728\u4e0a\u56fe\u4e2d\uff0c\u8fdb\u7a0b A \u5df2\u7ecf\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u8fdb\u5165\u5185\u6838\uff0c\u4e5f\u8bb8\u662f\u5bf9\u8bbe\u5907\u6216\u6587\u4ef6\u7684 write() \u8c03\u7528\u3002\u5185\u6838\u4ee3\u8868\u8fdb\u7a0b A \u6267\u884c\u65f6\uff0c\u5177\u6709\u66f4\u9ad8\u4f18\u5148\u7ea7\u7684\u8fdb\u7a0b B \u88ab\u4e2d\u65ad\u5524\u9192\u3002\u5185\u6838\u62a2\u5360\u8fdb\u7a0b A \u5e76\u5c06 CPU \u5206\u914d\u7ed9\u8fdb\u7a0b B\uff0c\u5373\u4f7f\u8fdb\u7a0b A \u65e2\u6ca1\u6709\u963b\u585e\u4e5f\u6ca1\u6709\u5b8c\u6210\u5176\u5728\u5185\u6838\u91cc\u7684\u5de5\u4f5c\u3002 \u5185\u6838\u62a2\u5360\u7684\u65f6\u673a\uff1a When an interrupt handler exits, before returning to kernel-space When kernel code becomes preemptible again If a task in the kernel explicitly calls schedule() If a task in the kernel blocks (which results in a call to schedule() )","title":"4 \u6839\u636e\u62a2\u5360\u65f6\u673a\u70b9\u7684\u4e0d\u540c\uff0c\u62a2\u5360\u5206\u4e3a 2 \u79cd\u7c7b\u578b\uff1a"},{"location":"chapter_4/12_linux_preemption/#_3","text":"","title":"\u4e8c \u4e3a\u4ec0\u4e48\u8981\u5f15\u5165\u5185\u6838\u62a2\u5360\uff1f"},{"location":"chapter_4/12_linux_preemption/#1","text":"trade-offs between latency and throughput \u5728\u7cfb\u7edf\u5ef6\u8fdf\u548c\u541e\u5410\u91cf\u4e4b\u95f4\u8fdb\u884c\u6743\u8861\u3002 \u5e76\u4e0d\u662f\u8bf4\u5185\u6838\u62a2\u5360\u5c31\u662f\u7edd\u5bf9\u7684\u597d\uff0c\u4f7f\u7528\u4ec0\u4e48\u62a2\u5360\u673a\u5236\u6700\u4f18\u662f\u8ddf\u4f60\u7684\u5e94\u7528\u573a\u666f\u6302\u94a9\u7684\u3002\u5982\u679c\u4e0d\u662f\u4e3a\u4e86\u6ee1\u8db3\u7528\u6237\uff0c\u5185\u6838\u5176\u5b9e\u662f\u5b8c\u5168\u4e0d\u60f3\u8fdb\u884c\u8fdb\u7a0b\u5207\u6362\u7684\uff0c\u56e0\u4e3a\u6bcf\u4e00\u6b21 context switch\uff0c\u90fd\u4f1a\u6709 overhead\uff0c\u8fd9\u4e9b overhead \u5c31\u662f\u5bf9 cpu \u7684\u6d6a\u8d39\uff0c\u610f\u5473\u7740\u541e\u5410\u91cf\u7684\u4e0b\u964d\u3002 \u4f46\u662f\uff0c\u5982\u679c\u4f60\u60f3\u8981\u7cfb\u7edf\u7684\u54cd\u5e94\u6027\u597d\u4e00\u70b9\uff0c\u5c31\u5f97\u5c3d\u91cf\u591a\u7684\u5141\u8bb8\u62a2\u5360\u7684\u53d1\u751f\uff0c\u8fd9\u662f Linux \u4f5c\u4e3a\u4e00\u4e2a\u901a\u7528\u64cd\u4f5c\u7cfb\u7edf\u6240\u5fc5\u987b\u652f\u6301\u7684\u3002\u5f53\u4f60\u7684\u7cfb\u7edf\u505a\u5230\u968f\u65f6\u90fd\u53ef\u4ee5\u53d1\u751f\u62a2\u5360\u65f6\uff0c\u7cfb\u7edf\u7684\u54cd\u5e94\u6027\u5c31\u4f1a\u975e\u5e38\u597d\u3002","title":"1 \u6839\u672c\u539f\u56e0\uff1a"},{"location":"chapter_4/12_linux_preemption/#2-linux-3-preemption-model","text":"","title":"2 \u4e3a\u4e86\u8ba9\u7528\u6237\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u8fdb\u884c\u914d\u7f6e\uff0cLinux \u63d0\u4f9b\u4e86 3 \u79cd Preemption Model\u3002"},{"location":"chapter_4/12_linux_preemption/#a-config_preempt_noney-model-server","text":"","title":"A CONFIG_PREEMPT_NONE=y\uff1a\u4e0d\u5141\u8bb8\u5185\u6838\u62a2\u5360\uff0c\u541e\u5410\u91cf\u6700\u5927\u7684 Model\uff0c\u4e00\u822c\u7528\u4e8e Server \u7cfb\u7edf\u3002"},{"location":"chapter_4/12_linux_preemption/#b-config_preempt_voluntaryy-cond_resched-cpu","text":"","title":"B CONFIG_PREEMPT_VOLUNTARY=y\uff1a\u5728\u4e00\u4e9b\u8017\u65f6\u8f83\u957f\u7684\u5185\u6838\u4ee3\u7801\u4e2d\u4e3b\u52a8\u8c03\u7528 cond_resched()\u8ba9\u51fa CPU\uff0c\u5bf9\u541e\u5410\u91cf\u6709\u8f7b\u5fae\u5f71\u54cd\uff0c\u4f46\u662f\u7cfb\u7edf\u54cd\u5e94\u4f1a\u7a0d\u5fae\u5feb\u4e00\u4e9b\u3002"},{"location":"chapter_4/12_linux_preemption/#c-config_preempty-spinlock-critical-section-desktop-embedded","text":"","title":"C CONFIG_PREEMPT=y\uff1a\u9664\u4e86\u5904\u4e8e\u6301\u6709 spinlock \u65f6\u7684 critical section\uff0c\u5176\u4ed6\u65f6\u5019\u90fd\u5141\u8bb8\u5185\u6838\u62a2\u5360\uff0c\u54cd\u5e94\u901f\u5ea6\u8fdb\u4e00\u6b65\u63d0\u5347\uff0c\u541e\u5410\u91cf\u8fdb\u4e00\u6b65\u4e0b\u964d\uff0c\u4e00\u822c\u7528\u4e8e Desktop / Embedded \u7cfb\u7edf\u3002"},{"location":"chapter_4/12_linux_preemption/#d-model-config_preempt_rt","text":"\u8fd9\u4e2a\u6a21\u5f0f\u51e0\u4e4e\u5c06\u6240\u6709\u7684 spinlock \u90fd\u6362\u6210\u4e86 preemptable mutex\uff0c\u53ea\u5269\u4e0b\u4e00\u4e9b\u6781\u5176\u6838\u5fc3\u7684\u5730\u65b9\u4ecd\u7136\u7528\u7981\u6b62\u62a2\u5360\u7684 spinlock\uff0c\u6240\u4ee5\u57fa\u672c\u53ef\u4ee5\u8ba4\u4e3a\u662f\u968f\u65f6\u53ef\u88ab\u62a2\u5360\u3002","title":"D \u53e6\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u6ca1\u6709\u5408\u5e76\u8fdb\u4e3b\u7ebf\u5185\u6838\u7684 Model: CONFIG_PREEMPT_RT"},{"location":"chapter_4/12_linux_preemption/#_4","text":"","title":"\u4e09 \u600e\u4e48\u64cd\u4f5c?"},{"location":"chapter_4/12_linux_preemption/#1_1","text":"\u8fd9\u91cc\u7684\u68c0\u67e5\u662f\u540c\u65f6\u9488\u5bf9\u6240\u6709\u7684 preemption \u7684\u3002\u5982\u679c\u4f60\u7406\u89e3\u4e86\u524d\u9762\u7684 4 \u79cd preempiton model \u7684\u8bdd\uff0c\u5e94\u8be5\u80fd\u611f\u89c9\u5230\u5176\u5b9e\u662f\u4e0d\u7528\u592a\u4e25\u683c\u533a\u5206 user / kernel preemption\uff0c\u6240\u6709\u62a2\u5360\u7684\u4f5c\u7528\u548c\u6027\u8d28\u90fd\u4e00\u6837\uff1a\u964d\u4f4e lantency\uff0c\u5b8c\u5168\u53ef\u4ee5\u5c06\u5b83\u4eec\u4e00\u89c6\u540c\u4ec1\u3002","title":"1 \u62a2\u5360\u524d\u68c0\u67e5"},{"location":"chapter_4/12_linux_preemption/#_5","text":"\u9700\u8981\u62a2\u5360; \u80fd\u62a2\u5360;","title":"\u62a2\u5360\u7684\u53d1\u751f\u8981\u540c\u65f6\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\uff1a"},{"location":"chapter_4/12_linux_preemption/#1_2","text":"\u5224\u65ad\u662f\u5426\u9700\u8981\u62a2\u5360\u7684\u4f9d\u636e\u662f\uff1athread_info \u7684\u6210\u5458 flags \u662f\u5426\u8bbe\u7f6e\u4e86 TIF_NEED_RESCHED \u6807\u5fd7\u4f4d\u3002 \u76f8\u5173\u7684 API\uff1a set_tsk_need_resched() \u7528\u4e8e\u8bbe\u7f6e\u8be5 flag\u3002 tif_need_resched() \u88ab\u7528\u6765\u5224\u65ad\u8be5 flag \u662f\u5426\u7f6e\u4f4d\u3002 resched_curr(struct rq *rq)\uff0c\u6807\u8bb0\u5f53\u524d runqueue \u9700\u8981\u62a2\u5360\u3002","title":"1\u3001\u662f\u5426\u9700\u8981\u62a2\u5360\uff1f"},{"location":"chapter_4/12_linux_preemption/#2","text":"\u62a2\u5360\u53d1\u751f\u7684\u524d\u63d0\u662f\u8981\u786e\u4fdd\u6b64\u6b21\u62a2\u5360\u662f\u5b89\u5168\u7684 (preempt-safe)\u3002 \u4ec0\u4e48\u624d\u662f preempt-safe\uff1a \u4e0d\u4ea7\u751f race condition / deadlock\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u53ea\u6709 kernel preemption \u624d\u6709\u88ab\u7981\u6b62\u7684\u53ef\u80fd\uff0c\u800c user preemption \u603b\u662f\u88ab\u5141\u8bb8\uff0c\u56e0\u6b64\u8fd9\u65f6\u9a6c\u4e0a\u5c31\u8981\u8fd4\u56de user space \u4e86\uff0c\u80af\u5b9a\u662f\u5904\u4e8e\u4e00\u4e2a\u53ef\u62a2\u5360\u7684\u72b6\u6001\u4e86\u3002 \u5728\u5f15\u5165\u5185\u6838\u62a2\u5360\u673a\u5236\u7684\u540c\u65f6\u5f15\u5165\u4e86\u4e3a thread_info \u6dfb\u52a0\u4e86\u65b0\u7684\u6210\u5458\uff1apreempt_count \uff0c\u7528\u6765\u4fdd\u8bc1\u62a2\u5360\u7684\u5b89\u5168\u6027\uff0c\u83b7\u53d6\u9501\u65f6\u4f1a\u589e\u52a0 preempt_count\uff0c\u91ca\u653e\u9501\u65f6\u5219\u4f1a\u51cf\u5c11\u3002\u62a2\u5360\u524d\u4f1a\u68c0\u67e5 preempt_count \u662f\u5426\u4e3a 0\uff0c\u4e3a 0 \u624d\u5141\u8bb8\u62a2\u5360\u3002 \u76f8\u5173\u7684 API\uff1a preempt_enable()\uff0c\u4f7f\u80fd\u5185\u6838\u62a2\u5360\uff0c\u53ef\u5d4c\u5957\u8c03\u7528\u3002 preempt_disable()\uff0c\u5173\u95ed\u5185\u6838\u62a2\u5360\uff0c\u53ef\u5d4c\u5957\u8c03\u7528\u3002 preempt_count()\uff0c\u8fd4\u56de preempt_count\u3002","title":"2\u3001\u662f\u5426\u80fd\u62a2\u5360\uff1f"},{"location":"chapter_4/12_linux_preemption/#2-tif_need_resched-1","text":"\u901a\u8fc7 grep resched_curr \u53ef\u4ee5\u627e\u51fa\u5927\u591a\u6570\u6807\u8bb0\u62a2\u5360\u7684\u573a\u666f\u3002 \u4e0b\u9762\u5217\u4e3e\u7684\u662f\u51e0\u4e2a\u6211\u6bd4\u8f83\u5173\u5fc3\u7684\u573a\u666f\u3002","title":"2 \u4ec0\u4e48\u573a\u666f\u4f1a\u8bbe\u7f6e\u9700\u8981\u62a2\u5360 (TIF_NEED_RESCHED = 1)"},{"location":"chapter_4/12_linux_preemption/#1_3","text":"\u65f6\u949f\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u4f1a\u8c03\u7528 scheduler_tick()\uff0c\u5b83\u901a\u8fc7\u8c03\u5ea6\u7c7b(scheduling class) \u7684 task_tick \u65b9\u6cd5 \u68c0\u67e5\u8fdb\u7a0b\u7684\u65f6\u95f4\u7247\u662f\u5426\u8017\u5c3d\uff0c\u5982\u679c\u8017\u5c3d\u5219\u6807\u8bb0\u9700\u8981\u62a2\u5360\uff1a // kernel/sched/core.c void scheduler_tick(void) { [...] curr->sched_class->task_tick(rq, curr, 0); [...] } Linux \u7684\u8c03\u5ea6\u7b56\u7565\u88ab\u5c01\u88c5\u6210\u8c03\u5ea6\u7c7b\uff0c\u4f8b\u5982 CFS\u3001Real-Time\u3002CFS \u8c03\u5ea6\u7c7b\u7684 task_tick() \u5982\u4e0b\uff1a // kernel/sched/fair.c task_tick_fair() -> entity_tick() -> resched_curr(rq_of(cfs_rq));","title":"1\u3001\u5468\u671f\u6027\u7684\u65f6\u949f\u4e2d\u65ad"},{"location":"chapter_4/12_linux_preemption/#2_1","text":"\u5f53\u8fdb\u7a0b\u88ab\u5524\u9192\u7684\u65f6\u5019\uff0c\u5982\u679c\u4f18\u5148\u7ea7\u9ad8\u4e8e CPU \u4e0a\u7684\u5f53\u524d\u8fdb\u7a0b\uff0c\u5c31\u4f1a\u89e6\u53d1\u62a2\u5360\u3002\u76f8\u5e94\u7684\u5185\u6838\u4ee3\u7801\u4e2d\uff0ctry_to_wake_up() \u6700\u7ec8\u901a\u8fc7 check_preempt_curr() \u68c0\u67e5\u662f\u5426\u6807\u8bb0\u9700\u8981\u62a2\u5360\uff1a // kernel/sched/core.c void check_preempt_curr(struct rq *rq, struct task_struct *p, int flags) { const struct sched_class *class; if (p->sched_class == rq->curr->sched_class) { rq->curr->sched_class->check_preempt_curr(rq, p, flags); } else { for_each_class(class) { if (class == rq->curr->sched_class) break; if (class == p->sched_class) { resched_curr(rq); break; } } } [...] } \u53c2\u6570 \"p\" \u6307\u5411\u88ab\u5524\u9192\u8fdb\u7a0b \"rq\" \u4ee3\u8868\u62a2\u5360\u7684 CPU\u3002 \u5982\u679c p \u7684\u8c03\u5ea6\u7c7b\u548c rq \u5f53\u524d\u7684\u8c03\u5ea6\u7c7b\u76f8\u540c\uff0c\u5219\u8c03\u7528 rq \u5f53\u524d\u7684\u8c03\u5ea6\u7c7b\u7684 check_preempt_curr() (\u4f8b\u5982 cfs \u7684 check_preempt_wakeup()) \u6765\u5224\u65ad\u662f\u5426\u8981\u6807\u8bb0\u9700\u8981\u62a2\u5360\u3002 \u5982\u679c p \u7684\u8c03\u5ea6\u7c7b > rq \u5f53\u524d\u7684\u8c03\u5ea6\u7c7b\uff0c\u5219\u7528 resched_curr() \u6807\u8bb0\u9700\u8981\u62a2\u5360\uff0c\u53cd\u4e4b\uff0c\u5219\u4e0d\u6807\u8bb0\u3002","title":"2\u3001\u5524\u9192\u8fdb\u7a0b\u7684\u65f6\u5019"},{"location":"chapter_4/12_linux_preemption/#3","text":"\u5982\u679c\u65b0\u8fdb\u7a0b\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e CPU \u4e0a\u7684\u5f53\u524d\u8fdb\u7a0b\uff0c\u4f1a\u9700\u8981\u89e6\u53d1\u62a2\u5360\u3002\u76f8\u5e94\u7684\u4ee3\u7801\u662f sched_fork()\uff0c\u5b83\u518d\u901a\u8fc7\u8c03\u5ea6\u7c7b\u7684 task_fork() \u6807\u8bb0\u9700\u8981\u62a2\u5360\uff1a // kernel/sched/core.c int sched_fork(unsigned long clone_flags, struct task_struct \\*p) { [...] if (p->sched_class->task_fork) p->sched_class->task_fork(p); [...] } // kernel/sched/fair.c static void task_fork_fair(struct task_struct \\*p) { \u3000[...] \u3000 if (sysctl_sched_child_runs_first && curr && entity_before(curr, se)) { \u3000\u3000 resched_curr(rq); } [...] }","title":"3\u3001\u65b0\u8fdb\u7a0b\u521b\u5efa\u7684\u65f6\u5019"},{"location":"chapter_4/12_linux_preemption/#4-nice","text":"\u5982\u679c\u4fee\u6539\u8fdb\u7a0b nice \u503c\u5bfc\u81f4\u4f18\u5148\u7ea7\u9ad8\u4e8e CPU \u4e0a\u7684\u5f53\u524d\u8fdb\u7a0b\uff0c\u4e5f\u8981\u6807\u8bb0\u9700\u8981\u62a2\u5360\uff0c\u4ee3\u7801\u89c1 set_user_nice()\u3002 // kernel/sched/core.c void set_user_nice(struct task_struct \\*p, long nice) { [...] // If the task increased its priority or is running and lowered its priority, then reschedule its CPU if (delta < 0 || (delta > 0 && task_running(rq, p))) resched_curr(rq); } \u8fd8\u6709\u5f88\u591a\u573a\u666f\uff0c\u8fd9\u91cc\u5c31\u4e0d\u4e00\u4e00\u5217\u4e3e\u4e86\u3002","title":"4\u3001\u8fdb\u7a0b\u4fee\u6539 nice \u503c\u7684\u65f6\u5019"},{"location":"chapter_4/12_linux_preemption/#3-preempt_count-0","text":"\u6709\u51e0\u79cd\u573a\u666f\u662f\u660e\u786e\u9700\u8981\u5173\u95ed\u5185\u6838\u62a2\u5360\u7684\u3002","title":"3 \u4ec0\u4e48\u573a\u666f\u4e0b\u8981\u7981\u6b62\u5185\u6838\u62a2\u5360 (preempt_count &gt; 0)"},{"location":"chapter_4/12_linux_preemption/#1-per-cpu-data-structures","text":"\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff1a struct this_needs_locking tux[NR_CPUS]; tux[smp_processor_id()] = some_value; /_ task is preempted here... _/ something = tux[smp_processor_id()]; \u5982\u679c\u62a2\u5360\u53d1\u751f\u5728\u6ce8\u91ca\u6240\u5728\u7684\u90a3\u4e00\u884c\uff0c\u5f53\u8fdb\u7a0b\u518d\u6b21\u88ab\u8c03\u5ea6\u65f6\uff0csmp_processor_id() \u503c\u53ef\u80fd\u5df2\u7ecf\u53d1\u751f\u53d8\u5316\u4e86\uff0c\u8fd9\u79cd\u573a\u666f\u4e0b\u9700\u8981\u901a\u8fc7\u7981\u6b62\u5185\u6838\u62a2\u5360\u6765\u505a\u5230 preempt safe\u3002","title":"1\u3001\u8bbf\u95ee Per-CPU data structures \u7684\u65f6\u5019"},{"location":"chapter_4/12_linux_preemption/#2-cpu-state","text":"\u8fd9\u4e2a\u5f88\u597d\u7406\u89e3\uff0c\u4f60\u6b63\u5728\u64cd\u4f5c CPU \u76f8\u5173\u7684\u5bc4\u5b58\u5668\u4ee5\u8fdb\u884c context switch \u65f6\uff0c\u80af\u5b9a\u662f\u4e0d\u80fd\u518d\u5141\u8bb8\u62a2\u5360\u3002 asmlinkage **visible void **sched schedule(void) { struct task_struct \\*tsk = current; sched_submit_work(tsk); do { // \u8c03\u5ea6\u524d\u7981\u6b62\u5185\u6838\u62a2\u5360 preempt_disable(); \\_\\_schedule(false); sched_preempt_enable_no_resched(); } while (need_resched()); sched_update_worker(tsk); }","title":"2\u3001\u8bbf\u95ee CPU state \u7684\u65f6\u5019"},{"location":"chapter_4/12_linux_preemption/#3-spinlock","text":"\u652f\u6301\u5185\u6838\u62a2\u5360\uff0c\u8fd9\u610f\u5473\u7740\u8fdb\u7a0b\u6709\u53ef\u80fd\u4e0e\u88ab\u62a2\u5360\u7684\u8fdb\u7a0b\u5728\u76f8\u540c\u7684 critical section \u4e2d\u8fd0\u884c\u3002\u4e3a\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\uff0c\u5f53\u6301\u6709\u81ea\u65cb\u9501\u65f6\uff0c\u8981\u7981\u6b62\u5185\u6838\u62a2\u5360\u3002 static inline void \\__raw_spin_lock(raw_spinlock_t \\*lock) { preempt_disable(); spin_acquire(&lock->dep_map, 0, 0, \\_RET_IP_); LOCK_CONTENDED(lock, do_raw_spin_trylock, do_raw_spin_lock); } \u8fd8\u6709\u5f88\u591a\u573a\u666f\uff0c\u8fd9\u91cc\u5c31\u4e0d\u4e00\u4e00\u5217\u4e3e\u4e86\u3002","title":"3\u3001\u6301\u6709 spinlock \u7684\u65f6\u5019"},{"location":"chapter_4/12_linux_preemption/#4","text":"\u8fd9\u90e8\u5206\u662f platform \u76f8\u5173\u7684\uff0c\u4e0b\u9762\u4ee5 ARM64 Linux-5.4 \u4e3a\u4f8b\uff0c\u5feb\u901f\u770b\u4e0b\u6267\u884c\u62a2\u5360\u7684\u5177\u4f53\u4ee3\u7801\u3002","title":"4 \u771f\u6b63\u6267\u884c\u62a2\u5360\u7684\u5730\u65b9"},{"location":"chapter_4/12_linux_preemption/#a-user-preemption","text":"","title":"A \u6267\u884c user preemption"},{"location":"chapter_4/12_linux_preemption/#a","text":"\u5b83\u4eec\u90fd\u662f\u5728 ret_to_user() \u91cc\u5224\u65ad\u662f\u5426\u6267\u884c\u7528\u6237\u62a2\u5360\u3002 // arch/arm64/kernel/entry.S ret_to_user() // \u8fd4\u56de\u5230\u7528\u6237\u7a7a\u95f4 work_pending() do_notify_resume() schedule() // arch/arm64/kernel/signal.c asmlinkage void do_notify_resume(struct pt_regs \\*regs, unsigned long thread_flags) { do { [...] // \u68c0\u67e5\u662f\u5426\u8981\u9700\u8981\u8c03\u5ea6 if (thread_flags & \\_TIF_NEED_RESCHED) { local_daif_restore(DAIF_PROCCTX_NOIRQ); schedule(); } else { [...] } while (thread_flags & \\_TIF_WORK_MASK); }","title":"a \u7cfb\u7edf\u8c03\u7528\u548c\u4e2d\u65ad\u8fd4\u56de\u7528\u6237\u7a7a\u95f4\u7684\u65f6\u5019\uff1a"},{"location":"chapter_4/12_linux_preemption/#b-kernel-preemption","text":"","title":"B \u6267\u884c kernel preemption"},{"location":"chapter_4/12_linux_preemption/#a_1","text":"// arch/arm64/kernel/entry.S el1_irq irq_handler arm64_preempt_schedule_irq preempt_schedule_irq \\_\\_schedule(true) // kernel/sched/core.c /_ This is the entry point to schedule() from kernel preemption _/ asmlinkage **visible void **sched preempt_schedule_irq(void) { [...] do { preempt_disable(); local_irq_enable(); \\_\\_schedule(true); local_irq_disable(); sched_preempt_enable_no_resched(); } while (need_resched()); exception_exit(prev_state); }","title":"a \u4e2d\u65ad\u8fd4\u56de\u5185\u6838\u7a7a\u95f4\u7684\u65f6\u5019\uff1a"},{"location":"chapter_4/12_linux_preemption/#b","text":"\u524d\u9762\u5217\u4e3e\u4e86\u96c6\u4e2d\u5173\u95ed\u62a2\u5360\u7684\u573a\u666f\uff0c\u5f53\u79bb\u5f00\u8fd9\u4e9b\u573a\u666f\u65f6\uff0c\u4f1a\u6062\u590d\u5185\u6838\u62a2\u5360\u3002 \u4f8b\u5982 spinlock unlock \u65f6\uff1a static inline void \\__raw_spin_unlock(raw_spinlock_t \\*lock) { spin_release(&lock->dep_map, 1, \\_RET_IP_); do_raw_spin_unlock(lock); preempt_enable(); // \u4f7f\u80fd\u62a2\u5360\u65f6\uff0c\u5982\u679c\u9700\u8981\uff0c\u5c31\u4f1a\u6267\u884c\u62a2\u5360 } // include/linux/preempt.h #define preempt_enable() \\ do { \\ barrier(); \\ if (unlikely(preempt_count_dec_and_test())) \\ \\_\\_preempt_schedule(); \\ } while (0)","title":"b \u5185\u6838\u6062\u590d\u4e3a\u53ef\u62a2\u5360\u7684\u65f6\u5019\uff1a"},{"location":"chapter_4/12_linux_preemption/#c","text":"\u5185\u6838\u91cc\u6709\u5927\u91cf\u7684\u5730\u65b9\u4f1a\u663e\u5f0f\u5730\u8981\u6c42\u8fdb\u884c\u8c03\u5ea6\uff0c\u6700\u5e38\u89c1\u7684\u662f\uff1acond_resched() \u548c sleep()\u7c7b\u51fd\u6570\uff0c\u5b83\u4eec\u6700\u7ec8\u90fd\u4f1a\u8c03\u7528\u5230 __schedule()\u3002","title":"c \u5185\u6838\u663e\u5f0f\u5730\u8981\u6c42\u8c03\u5ea6\u7684\u65f6\u5019\uff1a"},{"location":"chapter_4/12_linux_preemption/#d","text":"\u4f8b\u5982 mutex\uff0csem\uff0cwaitqueue \u83b7\u53d6\u4e0d\u5230\u8d44\u6e90\uff0c\u6216\u8005\u662f\u7b49\u5f85 IO\u3002 \u8fd9\u79cd\u60c5\u51b5\u4e0b\u8fdb\u7a0b\u4f1a\u5c06\u81ea\u5df1\u7684\u72b6\u6001\u4ece\u3000 TASK_RUNNING \u4fee\u6539\u4e3a TASK_INTERRUPTIBLE\uff0c\u7136\u540e\u8c03\u7528 schedule() \u4e3b\u52a8\u8ba9\u51fa CPU \u5e76\u7b49\u5f85\u5524\u9192\u3002 // block/blk-core.c static struct request *get_request(struct request_queue *q, int op, int op_flags, struct bio \\*bio, gfp_t gfp_mask) { [...] prepare_to_wait_exclusive(&rl->wait[is_sync], &wait, TASK_UNINTERRUPTIBLE); io_schedule(); // \u4f1a\u8c03\u7528 schedule(); [...] }","title":"d \u5185\u6838\u963b\u585e\u7684\u65f6\u5019\uff1a"},{"location":"chapter_4/13_interrupt_handler_examples/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3\u4e00\u4e9b\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u4f8b\u5b50 \u4e00 \u7f51\u5361\u4e2d\u65ad handler \u7a0b\u5e8f \u4e8c \u770b\u95e8\u72d7\u786c\u4ef6\u4e2d\u65ad handler \u7a0b\u5e8f static irqreturn_t s3c2410wdt_irq(int irqno, void *param) { dev_info(wdt_dev, \"watchdog timer expired (irq)\\n\"); s3c2410wdt_keepalive(); return IRQ_HANDLED; } \u5176\u4e2d\u7684 s3c2410wdt_keepalive() \u51fd\u6570 static void s3c2410wdt_keepalive(void) { spin_lock(&wdt_lock); writel(wdt_count, wdt_base + S3C2410_WTCNT); //\u672c\u8d28\u4e0a\u5c31\u662f\u5f80\u4e00\u4e2aCount\u5bc4\u5b58\u5668\u5199\u4e00\u4e2aint\u503c spin_unlock(&wdt_lock); } \u9644\u5e26\u4fe1\u606f Linux \u5185\u6838\u4e2d\u7684 linux-2.6.29.4\\drivers\\watchdog\\s3c2410_wdt.c \u6587\u4ef6\u5b9e\u73b0\u4e86\u770b\u95e8\u72d7\u9a71\u52a8\u7a0b\u5e8f, \u5305\u542b IRQ \u6ce8\u518c\u4ee5\u53ca\u7f16\u5199\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f","title":"\u7b2c\u5341\u4e09\u7bc7 \u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u4f8b\u5b50"},{"location":"chapter_4/13_interrupt_handler_examples/#_1","text":"\u672c\u7bc7\u603b\u7ed3\u4e00\u4e9b\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u4f8b\u5b50","title":"\u6982\u8ff0"},{"location":"chapter_4/13_interrupt_handler_examples/#handler","text":"","title":"\u4e00 \u7f51\u5361\u4e2d\u65ad handler \u7a0b\u5e8f"},{"location":"chapter_4/13_interrupt_handler_examples/#handler_1","text":"static irqreturn_t s3c2410wdt_irq(int irqno, void *param) { dev_info(wdt_dev, \"watchdog timer expired (irq)\\n\"); s3c2410wdt_keepalive(); return IRQ_HANDLED; } \u5176\u4e2d\u7684 s3c2410wdt_keepalive() \u51fd\u6570 static void s3c2410wdt_keepalive(void) { spin_lock(&wdt_lock); writel(wdt_count, wdt_base + S3C2410_WTCNT); //\u672c\u8d28\u4e0a\u5c31\u662f\u5f80\u4e00\u4e2aCount\u5bc4\u5b58\u5668\u5199\u4e00\u4e2aint\u503c spin_unlock(&wdt_lock); }","title":"\u4e8c \u770b\u95e8\u72d7\u786c\u4ef6\u4e2d\u65ad handler \u7a0b\u5e8f"},{"location":"chapter_4/13_interrupt_handler_examples/#_2","text":"Linux \u5185\u6838\u4e2d\u7684 linux-2.6.29.4\\drivers\\watchdog\\s3c2410_wdt.c \u6587\u4ef6\u5b9e\u73b0\u4e86\u770b\u95e8\u72d7\u9a71\u52a8\u7a0b\u5e8f, \u5305\u542b IRQ \u6ce8\u518c\u4ee5\u53ca\u7f16\u5199\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f","title":"\u9644\u5e26\u4fe1\u606f"},{"location":"chapter_4/14_linux_kernel_tracing/","text":"\u6982\u8ff0 \u672c\u7bc7\u68b3\u7406 linux \u5185\u6838\u5404\u79cd tracing \u6280\u80fd \u4e3a\u4ec0\u4e48\u8981\u8fdb\u884c\u68b3\u7406? \u56e0\u4e3a Linux \u5b58\u5728\u4f17\u591a tracing tools\uff0c\u6bd4\u5982 ftrace\u3001perf\uff0c\u4ed6\u4eec\u53ef\u7528\u4e8e\u5185\u6838\u7684\u8c03\u8bd5\u3001\u63d0\u9ad8\u5185\u6838\u7684\u53ef\u89c2\u6d4b\u6027\u3002\u4f17\u591a\u7684\u5de5\u5177\u4e5f\u610f\u5473\u7740\u7e41\u6742\u7684\u6982\u5ff5\uff0c\u8bf8\u5982 tracepoint\u3001trace events\u3001kprobe\u3001eBPF \u7b49\uff0c\u751a\u81f3\u8ba9\u4eba\u641e\u4e0d\u6e05\u695a\u4ed6\u4eec\u5230\u5e95\u662f\u5e72\u4ec0\u4e48\u7684\u3002\u672c\u6587\u5c1d\u8bd5\u7406\u6e05\u8fd9\u4e9b\u6982\u5ff5\u3002 \u4e00 \u4ec0\u4e48\u662f\u6ce8\u5165 Probe \u673a\u5236 \u5982\u679c\u6211\u4eec\u60f3\u8981\u8ffd\u8e2a\u5185\u6838\u7684\u4e00\u4e2a\u51fd\u6570\u6216\u8005\u67d0\u4e00\u884c\u4ee3\u7801\uff0c\u67e5\u770b\u6267\u884c\u7684\u4e0a\u4e0b\u6587\u548c\u6267\u884c\u60c5\u51b5\uff0c\u901a\u7528\u7684\u505a\u6cd5\u662f\u5728\u4ee3\u7801\u6216\u51fd\u6570\u7684\u6267\u884c\u524d\u540e printk \u6253\u5370\u65e5\u5fd7\uff0c\u7136\u540e\u901a\u8fc7\u65e5\u5fd7\u6765\u67e5\u770b\u8ffd\u8e2a\u4fe1\u606f\u3002\u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\u5185\u6838\u5e76\u91cd\u542f\uff0c\u975e\u5e38\u9ebb\u70e6\u3002\u5982\u679c\u662f\u5728\u751f\u4ea7\u73af\u5883\u6392\u67e5\u95ee\u9898\uff0c\u8fd9\u79cd\u65b9\u5f0f\u4e5f\u662f\u65e0\u6cd5\u63a5\u53d7\u7684\u3002 \u4e00\u79cd\u6bd4\u8f83\u5408\u7406\u7684\u65b9\u5f0f\u662f\u5728\u5185\u6838\u6b63\u5e38\u8fd0\u884c\u65f6\uff0c\u81ea\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u6ce8\u5165\u5230\u6211\u4eec\u60f3\u8981\u8ffd\u8e2a\u7684\u5185\u6838\u51fd\u6570\u6267\u884c\u524d\u540e\uff0c\u5f53\u5185\u6838\u51fd\u6570\u6267\u884c\u65f6\u89e6\u53d1\u6211\u4eec\u5b9a\u4e49\u7684\u51fd\u6570\uff0c\u6211\u4eec\u5728\u51fd\u6570\u4e2d\u5b9e\u73b0\u83b7\u53d6\u6211\u4eec\u60f3\u8981\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u5e76\u4fdd\u5b58\u4e0b\u6765\u3002\u540c\u65f6\u56e0\u4e3a\u589e\u52a0\u4e86\u5185\u6838\u51fd\u6570\u7684\u6267\u884c\u6d41\u7a0b\uff0c\u6211\u4eec\u5b9a\u4e49\u7684\u51fd\u6570\u6700\u597d\u662f\u9700\u8981\u7684\u65f6\u5019\u5f00\u542f\uff0c\u4e0d\u9700\u8981\u7684\u65f6\u5019\u5173\u95ed\uff0c\u907f\u514d\u5bf9\u5185\u6838\u51fd\u6570\u9020\u6210\u5f71\u54cd\u3002 \u8fd9\u4e2a\u81ea\u5b9a\u4e49\u7684\u51fd\u6570\u5c31\u662f probe handler \uff0c \u6ce8\u5165 probe handler \u7684\u5730\u65b9\u88ab\u79f0\u4e3a\u63a2\u6d4b\u70b9\u6216\u8005 Hook \u70b9 \uff0c\u5728\u63a2\u6d4b\u70b9\u524d\u6267\u884c\u7684 probe handler \u53eb pre handler, \u6267\u884c\u540e\u7684\u53eb post handler\uff0c\u6ce8\u5165 probe handler \u7684\u65b9\u5f0f\u88ab\u79f0\u4e3a\u201c\u63d2\u6869\u201d\uff0c\u5185\u6838\u63d0\u4f9b\u4e86\u591a\u79cd probe handler \u6ce8\u5165\u673a\u5236\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u804a\u4e00\u804a\u4ed6\u4eec\u662f\u5982\u4f55\u5b9e\u73b0\u5728\u5185\u6838\u8fd0\u884c\u65f6\u6ce8\u5165 probe handler\u3002 \u4e8c \u5404\u79cd\u6ce8\u5165 probe handler \u7684\u6280\u80fd (\u4e00) Kprobes \u673a\u5236 (\u4e8c) Uprobes \u673a\u5236 (\u4e09) Tracepoint \u4e09 perf \u5de5\u5177\u8be6\u89e3 \uff08\u4e00\uff09 \u662f\u4ec0\u4e48 \u5386\u53f2 Perf \u662f\u4e00\u4e2a Linux \u4e0b\u7684\u6027\u80fd\u5206\u6790\u5de5\u5177\u7684\u96c6\u5408\uff0c\u6700\u521d\u7531\u82f1\u7279\u5c14\u516c\u53f8\u7684 Andi Kleen \u5f00\u53d1\uff0c\u4e8e 2008 \u5e74\u9996\u6b21\u53d1\u5e03\u3002Perf \u8bbe\u8ba1\u4e4b\u521d\u662f\u4e3a\u4e86\u89e3\u51b3\u82f1\u7279\u5c14\u5904\u7406\u5668\u6027\u80fd\u5206\u6790\u5de5\u5177\u96c6\uff08Intel Performance Tuning Utilities\uff09\u5728 Linux \u4e0a\u7684\u79fb\u690d\u95ee\u9898\u800c\u5f00\u53d1\u7684\uff0c\u5b83\u53ef\u4ee5\u5229\u7528\u82f1\u7279\u5c14\u7684\u786c\u4ef6\u6027\u80fd\u76d1\u89c6\u5668\uff08Hardware Performance Monitoring\uff09\u6765\u5bf9 CPU \u6027\u80fd\u8fdb\u884c\u91c7\u6837\u548c\u5206\u6790\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0cPerf \u9010\u6e10\u6210\u4e3a\u4e86\u4e00\u4e2a\u901a\u7528\u7684\u6027\u80fd\u5206\u6790\u5de5\u5177\uff0c\u4e5f\u652f\u6301\u5185\u6838\u8ffd\u8e2a\u3002 \u5185\u6838\u76f8\u5173 Perf \u662f\u5185\u7f6e\u4e8e Linux \u5185\u6838\u6e90\u7801\u6811\u4e2d\u7684\u6027\u80fd\u5256\u6790(profiling)\u5de5\u5177\u3002\u5b83\u57fa\u4e8e\u4e8b\u4ef6\u91c7\u6837\u539f\u7406\uff0c\u4ee5\u6027\u80fd\u4e8b\u4ef6\u4e3a\u57fa\u7840\uff0c\u652f\u6301\u9488\u5bf9\u5904\u7406\u5668\u76f8\u5173\u6027\u80fd\u6307\u6807\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u76f8\u5173\u6027 \u80fd\u6307\u6807\u7684\u6027\u80fd\u5256\u6790\u3002\u53ef\u7528\u4e8e\u6027\u80fd\u74f6\u9888\u7684\u67e5\u627e\u4e0e\u70ed\u70b9\u4ee3\u7801\u7684\u5b9a\u4f4d\u3002 \u539f\u7406 \u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\uff0c\u5c31\u5728\u6240\u6709 CPU \u4e0a\u4ea7\u751f\u4e00\u4e2a\u4e2d\u65ad\uff0c\u67e5\u770b\u5f53\u524d\u662f\u54ea\u4e2a pid\uff0c\u54ea\u4e2a\u51fd\u6570\u5728\u6267\u884c\uff0c\u5e76\u5c06 pid/func \u6784\u5efa\u6210\u4e00\u4e2a event \u505a\u7edf\u8ba1\uff0c\u5728\u91c7\u6837\u7ed3\u675f\u540e\uff0c\u6211\u4eec\u5c31\u80fd\u77e5\u9053 CPU \u5927\u90e8\u5206\u65f6\u95f4\u8017\u5728\u54ea\u4e2a pid/func \u4e0a\u3002 \u77e5\u8bc6\u70b9\u68b3\u7406: \u786c\u4ef6\u6027\u80fd\u8ba1\u6570\u5668(PMC: Performance Monitoring Counter) PMI (Performance Monitoring Interrupt)\u4e2d\u65ad PMU \u91c7\u6837(Sample): \u89e6\u53d1\u4e2d\u65ad\u65f6\u7684\u6307\u4ee4\u5730\u5740(Register IP:Instruction Pointer)\uff0c\u5f53\u524d \u65f6\u95f4\u6233\u4ee5\u53ca\u5f53\u524d\u8fdb\u7a0b\u7684 PID\uff0cTID\uff0ccomm \u7b49\u4fe1\u606f\u3002\u6211\u4eec\u628a\u8fd9\u4e9b\u4fe1\u606f\u7edf\u79f0\u4e3a\u4e00\u4e2a\u91c7 \u6837(sample) \u548c\u7528\u6237\u7a7a\u95f4\u901a\u4fe1 Ring Buffer \u7b26\u53f7\u8868: perf \u6839\u636e pid\uff0ccomm \u7b49\u4fe1\u606f\u53ef\u4ee5\u627e\u5230\u5bf9\u5e94\u7684\u8fdb\u7a0b\u3002\u6839\u636e IP \u4e0e ELF \u6587\u4ef6\u4e2d\u7684 \u7b26\u53f7\u8868\u53ef\u4ee5\u67e5\u5230\u89e6\u53d1 PMI \u4e2d\u65ad\u7684\u6307\u4ee4\u6240\u5728\u7684\u51fd\u6570\u3002\u4e3a\u4e86\u80fd\u591f\u4f7f perf \u8bfb\u5230\u51fd\u6570\u540d\uff0c \u6211\u4eec\u7684\u76ee\u6807\u7a0b\u5e8f\u5fc5\u987b\u5177\u5907\u7b26\u53f7\u8868\u3002","title":"\u7b2c\u5341\u56db\u7bc7 \u7406\u89e3\u5185\u6838\u8ffd\u8e2a\u673a\u5236"},{"location":"chapter_4/14_linux_kernel_tracing/#_1","text":"\u672c\u7bc7\u68b3\u7406 linux \u5185\u6838\u5404\u79cd tracing \u6280\u80fd \u4e3a\u4ec0\u4e48\u8981\u8fdb\u884c\u68b3\u7406? \u56e0\u4e3a Linux \u5b58\u5728\u4f17\u591a tracing tools\uff0c\u6bd4\u5982 ftrace\u3001perf\uff0c\u4ed6\u4eec\u53ef\u7528\u4e8e\u5185\u6838\u7684\u8c03\u8bd5\u3001\u63d0\u9ad8\u5185\u6838\u7684\u53ef\u89c2\u6d4b\u6027\u3002\u4f17\u591a\u7684\u5de5\u5177\u4e5f\u610f\u5473\u7740\u7e41\u6742\u7684\u6982\u5ff5\uff0c\u8bf8\u5982 tracepoint\u3001trace events\u3001kprobe\u3001eBPF \u7b49\uff0c\u751a\u81f3\u8ba9\u4eba\u641e\u4e0d\u6e05\u695a\u4ed6\u4eec\u5230\u5e95\u662f\u5e72\u4ec0\u4e48\u7684\u3002\u672c\u6587\u5c1d\u8bd5\u7406\u6e05\u8fd9\u4e9b\u6982\u5ff5\u3002","title":"\u6982\u8ff0"},{"location":"chapter_4/14_linux_kernel_tracing/#probe","text":"\u5982\u679c\u6211\u4eec\u60f3\u8981\u8ffd\u8e2a\u5185\u6838\u7684\u4e00\u4e2a\u51fd\u6570\u6216\u8005\u67d0\u4e00\u884c\u4ee3\u7801\uff0c\u67e5\u770b\u6267\u884c\u7684\u4e0a\u4e0b\u6587\u548c\u6267\u884c\u60c5\u51b5\uff0c\u901a\u7528\u7684\u505a\u6cd5\u662f\u5728\u4ee3\u7801\u6216\u51fd\u6570\u7684\u6267\u884c\u524d\u540e printk \u6253\u5370\u65e5\u5fd7\uff0c\u7136\u540e\u901a\u8fc7\u65e5\u5fd7\u6765\u67e5\u770b\u8ffd\u8e2a\u4fe1\u606f\u3002\u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\u5185\u6838\u5e76\u91cd\u542f\uff0c\u975e\u5e38\u9ebb\u70e6\u3002\u5982\u679c\u662f\u5728\u751f\u4ea7\u73af\u5883\u6392\u67e5\u95ee\u9898\uff0c\u8fd9\u79cd\u65b9\u5f0f\u4e5f\u662f\u65e0\u6cd5\u63a5\u53d7\u7684\u3002 \u4e00\u79cd\u6bd4\u8f83\u5408\u7406\u7684\u65b9\u5f0f\u662f\u5728\u5185\u6838\u6b63\u5e38\u8fd0\u884c\u65f6\uff0c\u81ea\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u6ce8\u5165\u5230\u6211\u4eec\u60f3\u8981\u8ffd\u8e2a\u7684\u5185\u6838\u51fd\u6570\u6267\u884c\u524d\u540e\uff0c\u5f53\u5185\u6838\u51fd\u6570\u6267\u884c\u65f6\u89e6\u53d1\u6211\u4eec\u5b9a\u4e49\u7684\u51fd\u6570\uff0c\u6211\u4eec\u5728\u51fd\u6570\u4e2d\u5b9e\u73b0\u83b7\u53d6\u6211\u4eec\u60f3\u8981\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u5e76\u4fdd\u5b58\u4e0b\u6765\u3002\u540c\u65f6\u56e0\u4e3a\u589e\u52a0\u4e86\u5185\u6838\u51fd\u6570\u7684\u6267\u884c\u6d41\u7a0b\uff0c\u6211\u4eec\u5b9a\u4e49\u7684\u51fd\u6570\u6700\u597d\u662f\u9700\u8981\u7684\u65f6\u5019\u5f00\u542f\uff0c\u4e0d\u9700\u8981\u7684\u65f6\u5019\u5173\u95ed\uff0c\u907f\u514d\u5bf9\u5185\u6838\u51fd\u6570\u9020\u6210\u5f71\u54cd\u3002 \u8fd9\u4e2a\u81ea\u5b9a\u4e49\u7684\u51fd\u6570\u5c31\u662f probe handler \uff0c \u6ce8\u5165 probe handler \u7684\u5730\u65b9\u88ab\u79f0\u4e3a\u63a2\u6d4b\u70b9\u6216\u8005 Hook \u70b9 \uff0c\u5728\u63a2\u6d4b\u70b9\u524d\u6267\u884c\u7684 probe handler \u53eb pre handler, \u6267\u884c\u540e\u7684\u53eb post handler\uff0c\u6ce8\u5165 probe handler \u7684\u65b9\u5f0f\u88ab\u79f0\u4e3a\u201c\u63d2\u6869\u201d\uff0c\u5185\u6838\u63d0\u4f9b\u4e86\u591a\u79cd probe handler \u6ce8\u5165\u673a\u5236\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u804a\u4e00\u804a\u4ed6\u4eec\u662f\u5982\u4f55\u5b9e\u73b0\u5728\u5185\u6838\u8fd0\u884c\u65f6\u6ce8\u5165 probe handler\u3002","title":"\u4e00 \u4ec0\u4e48\u662f\u6ce8\u5165 Probe \u673a\u5236"},{"location":"chapter_4/14_linux_kernel_tracing/#probe-handler","text":"","title":"\u4e8c \u5404\u79cd\u6ce8\u5165 probe handler \u7684\u6280\u80fd"},{"location":"chapter_4/14_linux_kernel_tracing/#kprobes","text":"","title":"(\u4e00) Kprobes \u673a\u5236"},{"location":"chapter_4/14_linux_kernel_tracing/#uprobes","text":"","title":"(\u4e8c) Uprobes \u673a\u5236"},{"location":"chapter_4/14_linux_kernel_tracing/#tracepoint","text":"","title":"(\u4e09) Tracepoint"},{"location":"chapter_4/14_linux_kernel_tracing/#perf","text":"","title":"\u4e09 perf \u5de5\u5177\u8be6\u89e3"},{"location":"chapter_4/14_linux_kernel_tracing/#_2","text":"","title":"\uff08\u4e00\uff09 \u662f\u4ec0\u4e48"},{"location":"chapter_4/14_linux_kernel_tracing/#_3","text":"Perf \u662f\u4e00\u4e2a Linux \u4e0b\u7684\u6027\u80fd\u5206\u6790\u5de5\u5177\u7684\u96c6\u5408\uff0c\u6700\u521d\u7531\u82f1\u7279\u5c14\u516c\u53f8\u7684 Andi Kleen \u5f00\u53d1\uff0c\u4e8e 2008 \u5e74\u9996\u6b21\u53d1\u5e03\u3002Perf \u8bbe\u8ba1\u4e4b\u521d\u662f\u4e3a\u4e86\u89e3\u51b3\u82f1\u7279\u5c14\u5904\u7406\u5668\u6027\u80fd\u5206\u6790\u5de5\u5177\u96c6\uff08Intel Performance Tuning Utilities\uff09\u5728 Linux \u4e0a\u7684\u79fb\u690d\u95ee\u9898\u800c\u5f00\u53d1\u7684\uff0c\u5b83\u53ef\u4ee5\u5229\u7528\u82f1\u7279\u5c14\u7684\u786c\u4ef6\u6027\u80fd\u76d1\u89c6\u5668\uff08Hardware Performance Monitoring\uff09\u6765\u5bf9 CPU \u6027\u80fd\u8fdb\u884c\u91c7\u6837\u548c\u5206\u6790\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0cPerf \u9010\u6e10\u6210\u4e3a\u4e86\u4e00\u4e2a\u901a\u7528\u7684\u6027\u80fd\u5206\u6790\u5de5\u5177\uff0c\u4e5f\u652f\u6301\u5185\u6838\u8ffd\u8e2a\u3002","title":"\u5386\u53f2"},{"location":"chapter_4/14_linux_kernel_tracing/#_4","text":"Perf \u662f\u5185\u7f6e\u4e8e Linux \u5185\u6838\u6e90\u7801\u6811\u4e2d\u7684\u6027\u80fd\u5256\u6790(profiling)\u5de5\u5177\u3002\u5b83\u57fa\u4e8e\u4e8b\u4ef6\u91c7\u6837\u539f\u7406\uff0c\u4ee5\u6027\u80fd\u4e8b\u4ef6\u4e3a\u57fa\u7840\uff0c\u652f\u6301\u9488\u5bf9\u5904\u7406\u5668\u76f8\u5173\u6027\u80fd\u6307\u6807\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u76f8\u5173\u6027 \u80fd\u6307\u6807\u7684\u6027\u80fd\u5256\u6790\u3002\u53ef\u7528\u4e8e\u6027\u80fd\u74f6\u9888\u7684\u67e5\u627e\u4e0e\u70ed\u70b9\u4ee3\u7801\u7684\u5b9a\u4f4d\u3002","title":"\u5185\u6838\u76f8\u5173"},{"location":"chapter_4/14_linux_kernel_tracing/#_5","text":"\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\uff0c\u5c31\u5728\u6240\u6709 CPU \u4e0a\u4ea7\u751f\u4e00\u4e2a\u4e2d\u65ad\uff0c\u67e5\u770b\u5f53\u524d\u662f\u54ea\u4e2a pid\uff0c\u54ea\u4e2a\u51fd\u6570\u5728\u6267\u884c\uff0c\u5e76\u5c06 pid/func \u6784\u5efa\u6210\u4e00\u4e2a event \u505a\u7edf\u8ba1\uff0c\u5728\u91c7\u6837\u7ed3\u675f\u540e\uff0c\u6211\u4eec\u5c31\u80fd\u77e5\u9053 CPU \u5927\u90e8\u5206\u65f6\u95f4\u8017\u5728\u54ea\u4e2a pid/func \u4e0a\u3002","title":"\u539f\u7406"},{"location":"chapter_4/14_linux_kernel_tracing/#_6","text":"\u786c\u4ef6\u6027\u80fd\u8ba1\u6570\u5668(PMC: Performance Monitoring Counter) PMI (Performance Monitoring Interrupt)\u4e2d\u65ad PMU \u91c7\u6837(Sample): \u89e6\u53d1\u4e2d\u65ad\u65f6\u7684\u6307\u4ee4\u5730\u5740(Register IP:Instruction Pointer)\uff0c\u5f53\u524d \u65f6\u95f4\u6233\u4ee5\u53ca\u5f53\u524d\u8fdb\u7a0b\u7684 PID\uff0cTID\uff0ccomm \u7b49\u4fe1\u606f\u3002\u6211\u4eec\u628a\u8fd9\u4e9b\u4fe1\u606f\u7edf\u79f0\u4e3a\u4e00\u4e2a\u91c7 \u6837(sample) \u548c\u7528\u6237\u7a7a\u95f4\u901a\u4fe1 Ring Buffer \u7b26\u53f7\u8868: perf \u6839\u636e pid\uff0ccomm \u7b49\u4fe1\u606f\u53ef\u4ee5\u627e\u5230\u5bf9\u5e94\u7684\u8fdb\u7a0b\u3002\u6839\u636e IP \u4e0e ELF \u6587\u4ef6\u4e2d\u7684 \u7b26\u53f7\u8868\u53ef\u4ee5\u67e5\u5230\u89e6\u53d1 PMI \u4e2d\u65ad\u7684\u6307\u4ee4\u6240\u5728\u7684\u51fd\u6570\u3002\u4e3a\u4e86\u80fd\u591f\u4f7f perf \u8bfb\u5230\u51fd\u6570\u540d\uff0c \u6211\u4eec\u7684\u76ee\u6807\u7a0b\u5e8f\u5fc5\u987b\u5177\u5907\u7b26\u53f7\u8868\u3002","title":"\u77e5\u8bc6\u70b9\u68b3\u7406:"},{"location":"chapter_4/15_task_struct/","text":"\u6982\u8ff0 \u672c\u7bc7\u518d\u6b21\u603b\u7ed3 task_struct \u7ed3\u6784\u4f53 \u5728 Linux \u91cc\u9762\uff0c\u65e0\u8bba\u662f\u8fdb\u7a0b\uff0c\u8fd8\u662f\u7ebf\u7a0b\uff0c\u5230\u4e86\u5185\u6838\u91cc\u9762\uff0c\u6211\u4eec\u7edf\u4e00\u90fd\u53eb\u4efb\u52a1\uff08Task\uff09\uff0c\u7531\u4e00\u4e2a\u7edf\u4e00\u7684\u7ed3\u6784 task_struct \u8fdb\u884c\u7ba1\u7406\u3002 \u8fd9\u4e2a\u7ed3\u6784\u975e\u5e38\u590d\u6742\uff0c\u672c\u6587\u5c06\u7ec6\u7ec6\u5206\u6790 task_struct \u7ed3\u6784\u3002\u4e3b\u8981\u5206\u6790\u987a\u5e8f\u4f1a\u6309\u7167\u8be5\u67b6\u6784\u4f53\u4e2d\u7684\u6210\u5458\u53d8\u91cf\u548c\u51fd\u6570\u7684\u4f5c\u7528\u8fdb\u884c\u5206\u7c7b\uff0c\u4e3b\u8981\u5305\u62ec\uff1a \u4efb\u52a1 ID \u4eb2\u7f18\u5173\u7cfb \u4efb\u52a1\u72b6\u6001 \u4efb\u52a1\u6743\u9650 \u8fd0\u884c\u7edf\u8ba1 \u8fdb\u7a0b\u8c03\u5ea6 \u4fe1\u53f7\u5904\u7406 \u5185\u5b58\u7ba1\u7406 \u6587\u4ef6\u4e0e\u6587\u4ef6\u7cfb\u7edf \u5185\u6838\u6808 \u4eb2\u5c5e\u5173\u7cfb task_struct \u7ed3\u6784\u4f53\u7684 struct task_struct real_parent \u548c struct task_struct parent \u6210\u5458\u7528\u4e8e\u8868\u793a\u8fdb\u7a0b\u7684\u4eb2\u5c5e\u5173\u7cfb\u3002 real_parent: \u8868\u793a\u5b9e\u9645\u7236\u8fdb\u7a0b\uff08\u771f\u6b63\u7684\u7236\u8fdb\u7a0b\uff09\uff0c\u5373\u521b\u5efa\u5f53\u524d\u8fdb\u7a0b\u7684\u76f4\u63a5\u7236\u8fdb\u7a0b\u3002 parent: \u8868\u793a\u5f53\u524d\u8fdb\u7a0b\u7684\u666e\u901a\u7236\u8fdb\u7a0b\uff0c\u5373\u8c03\u7528 fork()\u6216 clone()\u51fd\u6570\u521b\u5efa\u5f53\u524d\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u3002 \u8fd9\u4e24\u4e2a\u6210\u5458\u90fd\u662f\u6307\u5411 task_struct \u7ed3\u6784\u4f53\u7684\u6307\u9488\uff0c\u901a\u8fc7\u5b83\u4eec\u53ef\u4ee5\u904d\u5386\u6574\u4e2a\u8fdb\u7a0b\u6811\u6765\u67e5\u627e\u548c\u5904\u7406\u4e0e\u4eb2\u5c5e\u5173\u7cfb\u76f8\u5173\u7684\u64cd\u4f5c\u3002\u901a\u8fc7\u8bbf\u95ee\u8fd9\u4e9b\u6210\u5458\uff0c\u53ef\u4ee5\u786e\u5b9a\u4e00\u4e2a\u8fdb\u7a0b\u7684\u76f4\u63a5\u7236\u5b50\u5173\u7cfb\uff0c\u5e76\u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406\u3002 \u5728 Linux \u7cfb\u7edf\u4e2d\uff0c\u6240\u6709\u8fdb\u7a0b\u4e4b\u95f4\u90fd\u6709\u7740\u76f4\u63a5\u6216\u95f4\u63a5\u5730\u8054\u7cfb\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u5176\u7236\u8fdb\u7a0b\uff0c\u4e5f\u53ef\u80fd\u6709\u96f6\u4e2a\u6216\u591a\u4e2a\u5b50\u8fdb\u7a0b\u3002\u62e5\u6709\u540c\u4e00\u7236\u8fdb\u7a0b\u7684\u6240\u6709\u8fdb\u7a0b\u5177\u6709\u5144\u5f1f\u5173\u7cfb\u3002 \u5b57\u6bb5 \u63cf\u8ff0 real_parent \u6307\u5411\u5176\u7236\u8fdb\u7a0b\uff0c\u5982\u679c\u521b\u5efa\u5b83\u7684\u7236\u8fdb\u7a0b\u4e0d\u518d\u5b58\u5728\uff0c\u5219\u6307\u5411 PID \u4e3a 1 \u7684 init \u8fdb\u7a0b parent \u6307\u5411\u5176\u7236\u8fdb\u7a0b\uff0c\u5f53\u5b83\u7ec8\u6b62\u65f6\uff0c\u5fc5\u987b\u5411\u5b83\u7684\u7236\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f7\u3002\u5b83\u7684\u503c\u901a\u5e38\u4e0e real_parent \u76f8\u540c children \u8868\u793a\u94fe\u8868\u7684\u5934\u90e8\uff0c\u94fe\u8868\u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u662f\u5b83\u7684\u5b50\u8fdb\u7a0b sibling \u7528\u4e8e\u628a\u5f53\u524d\u8fdb\u7a0b\u63d2\u5165\u5230\u5144\u5f1f\u94fe\u8868\u4e2d group_leader \u6307\u5411\u5176\u6240\u5728\u8fdb\u7a0b\u7ec4\u7684\u9886\u5934\u8fdb\u7a0b \u8fdb\u7a0b\u5185\u6838\u6808 void *stack; \u5728 Linux \u5185\u6838\u4e2d\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e00\u4e2a\u4e13\u7528\u7684\u5185\u6838\u6808\uff0c\u7528\u4e8e\u4fdd\u5b58\u8fdb\u7a0b\u5728\u5185\u6838\u6001\u6267\u884c\u65f6\u7684\u4e34\u65f6\u6570\u636e\u548c\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002\u8fd9\u4e2a\u5185\u6838\u6808\u662f\u5728\u8fdb\u7a0b\u521b\u5efa\u8fc7\u7a0b\u4e2d\u88ab\u5206\u914d\u7684\u3002 \u8fdb\u7a0b\u7684\u5185\u6838\u6808\u901a\u5e38\u662f\u901a\u8fc7\u7ed3\u6784\u4f53 task_struct \u7684\u6210\u5458\u53d8\u91cf stack \u6765\u8868\u793a\u3002stack \u662f\u4e00\u4e2a\u6307\u5411 void \u7c7b\u578b\u7684\u6307\u9488\uff0c\u5728\u8fd0\u884c\u65f6\u4f1a\u6307\u5411\u5b9e\u9645\u5206\u914d\u7ed9\u8be5\u8fdb\u7a0b\u7684\u5185\u5b58\u533a\u57df\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u5f53\u521b\u5efa\u65b0\u8fdb\u7a0b\u65f6\uff0cLinux \u5185\u6838\u4f1a\u4e3a\u5176\u5206\u914d\u4e00\u4e2a\u5408\u9002\u5927\u5c0f\u7684\u5185\u6838\u6808\u7a7a\u95f4\uff0c\u5e76\u5c06\u5176\u5730\u5740\u8d4b\u7ed9 task_struct \u4e2d\u7684 stack \u6210\u5458\u3002\u8fd9\u4e2a\u5185\u5b58\u533a\u57df\u4f4d\u4e8e\u7ebf\u6027\u5730\u5740\u7a7a\u95f4\u6700\u9ad8\u7aef\uff08\u5411\u4f4e\u5730\u5740\u6269\u5c55\uff09\u6216\u8005\u662f\u7279\u5b9a\u7684\u56fa\u5b9a\u4f4d\u7f6e\uff08\u5982 x86 \u67b6\u6784\u4e2d\u4f7f\u7528\u4e86\u56fa\u5b9a\u4f4d\u7f6e\uff09\u3002\u7136\u540e\uff0c\u5728\u8fdb\u5165\u5185\u6838\u6001\u6267\u884c\u65f6\uff0c\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u5c06\u5207\u6362\u5230\u81ea\u5df1\u7684\u5185\u6838\u6808\u4e0a\u8fdb\u884c\u64cd\u4f5c\u3002 \u8fdb\u7a0b\u6807\u8bb0 unsigned int flags; /* per process flags, defined below */ unsigned int flags \u662f task_struct \u7ed3\u6784\u4f53\u7684\u4e00\u4e2a\u5b57\u6bb5\uff0c\u7528\u4e8e\u8bb0\u5f55\u8fdb\u7a0b\u7684\u6807\u8bb0\u6216\u72b6\u6001\u4fe1\u606f\u3002\u8fd9\u4e2a\u5b57\u6bb5\u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u6570\u7c7b\u578b\uff0c\u901a\u5e38\u4f7f\u7528\u4f4d\u63a9\u7801\u6765\u8868\u793a\u4e0d\u540c\u7684\u6807\u8bb0\u3002\u8fd9\u4e2a\u5b57\u6bb5\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u9700\u6c42\u548c\u5185\u6838\u7248\u672c\u5b9a\u4e49\u5404\u79cd\u6807\u8bb0\uff0c\u4ee5\u4fbf\u5bf9\u8fdb\u7a0b\u8fdb\u884c\u6807\u8bc6\u548c\u7ba1\u7406\u3002\u4e00\u4e9b\u5e38\u89c1\u7684\u6807\u8bb0\u53ef\u80fd\u5305\u62ec\uff1a \u4efb\u52a1\u72b6\u6001\uff1a\u4f8b\u5982\u662f\u5426\u6b63\u5728\u8fd0\u884c\u3001\u505c\u6b62\u3001\u50f5\u5c38\u7b49\u3002 \u8c03\u5ea6\u5668\u76f8\u5173\uff1a\u4f8b\u5982\u8c03\u5ea6\u7b56\u7565\u3001\u4f18\u5148\u7ea7\u7b49\u3002 \u4fe1\u53f7\u5904\u7406\uff1a\u4f8b\u5982\u6302\u8d77\u4fe1\u53f7\u96c6\u3001\u672a\u51b3\u4fe1\u53f7\u96c6\u7b49\u3002 \u8fdb\u7a0b\u7279\u6027\uff1a\u4f8b\u5982\u662f\u5426\u4e3a\u5b88\u62a4\u8fdb\u7a0b\u3001\u662f\u5426\u5141\u8bb8\u88ab\u8ffd\u8e2a\u7b49\u3002 \u53cd\u5e94\u8fdb\u7a0b\u72b6\u6001\u7684\u4fe1\u606f\uff0c\u4f46\u4e0d\u662f\u8fd0\u884c\u72b6\u6001\uff0c\u7528\u4e8e\u5185\u6838\u8bc6\u522b\u8fdb\u7a0b\u5f53\u524d\u7684\u72b6\u6001\uff0c\u4ee5\u5907\u4e0b\u4e00\u6b65\u64cd\u4f5c flags \u6210\u5458\u7684\u53ef\u80fd\u53d6\u503c\u5982\u4e0b\uff0c\u8fd9\u4e9b\u5b8f\u4ee5 PF(ProcessFlag)\u5f00\u5934 /* * Per process flags */ #define PF_EXITING 0x00000004 /* getting shut down */ #define PF_EXITPIDONE 0x00000008 /* pi exit done on shut down */ #define PF_VCPU 0x00000010 /* I'm a virtual CPU */ #define PF_WQ_WORKER 0x00000020 /* I'm a workqueue worker */ #define PF_FORKNOEXEC 0x00000040 /* forked but didn't exec */ #define PF_MCE_PROCESS 0x00000080 /* process policy on mce errors */ #define PF_SUPERPRIV 0x00000100 /* used super-user privileges */ #define PF_DUMPCORE 0x00000200 /* dumped core */ #define PF_SIGNALED 0x00000400 /* killed by a signal */ #define PF_MEMALLOC 0x00000800 /* Allocating memory */ #define PF_NPROC_EXCEEDED 0x00001000 /* set_user noticed that RLIMIT_NPROC was exceeded */ #define PF_USED_MATH 0x00002000 /* if unset the fpu must be initialized before use */ #define PF_USED_ASYNC 0x00004000 /* used async_schedule*(), used by module init */ #define PF_NOFREEZE 0x00008000 /* this thread should not be frozen */ #define PF_FROZEN 0x00010000 /* frozen for system suspend */ #define PF_FSTRANS 0x00020000 /* inside a filesystem transaction */ #define PF_KSWAPD 0x00040000 /* I am kswapd */ #define PF_MEMALLOC_NOIO 0x00080000 /* Allocating memory without IO involved */ #define PF_LESS_THROTTLE 0x00100000 /* Throttle me less: I clean memory */ #define PF_KTHREAD 0x00200000 /* I am a kernel thread */ #define PF_RANDOMIZE 0x00400000 /* randomize virtual address space */ #define PF_SWAPWRITE 0x00800000 /* Allowed to write to swap */ #define PF_NO_SETAFFINITY 0x04000000 /* Userland is not allowed to meddle with cpus_allowed */ #define PF_MCE_EARLY 0x08000000 /* Early kill for mce process policy */ #define PF_MUTEX_TESTER 0x20000000 /* Thread belongs to the rt mutex tester */ #define PF_FREEZER_SKIP 0x40000000 /* Freezer should not count it as freezable */ #define PF_SUSPEND_TASK 0x80000000 /* this thread called freeze_processes and should not be frozen */ \u53c2\u8003 \u6df1\u5165\u7406\u89e3 Linux \u5185\u6838 task_struct \u7ed3\u6784","title":"\u7b2c\u5341\u4e94\u7bc7 task_struct\u7ed3\u6784\u4f53\u603b\u7ed3"},{"location":"chapter_4/15_task_struct/#_1","text":"\u672c\u7bc7\u518d\u6b21\u603b\u7ed3 task_struct \u7ed3\u6784\u4f53 \u5728 Linux \u91cc\u9762\uff0c\u65e0\u8bba\u662f\u8fdb\u7a0b\uff0c\u8fd8\u662f\u7ebf\u7a0b\uff0c\u5230\u4e86\u5185\u6838\u91cc\u9762\uff0c\u6211\u4eec\u7edf\u4e00\u90fd\u53eb\u4efb\u52a1\uff08Task\uff09\uff0c\u7531\u4e00\u4e2a\u7edf\u4e00\u7684\u7ed3\u6784 task_struct \u8fdb\u884c\u7ba1\u7406\u3002 \u8fd9\u4e2a\u7ed3\u6784\u975e\u5e38\u590d\u6742\uff0c\u672c\u6587\u5c06\u7ec6\u7ec6\u5206\u6790 task_struct \u7ed3\u6784\u3002\u4e3b\u8981\u5206\u6790\u987a\u5e8f\u4f1a\u6309\u7167\u8be5\u67b6\u6784\u4f53\u4e2d\u7684\u6210\u5458\u53d8\u91cf\u548c\u51fd\u6570\u7684\u4f5c\u7528\u8fdb\u884c\u5206\u7c7b\uff0c\u4e3b\u8981\u5305\u62ec\uff1a \u4efb\u52a1 ID \u4eb2\u7f18\u5173\u7cfb \u4efb\u52a1\u72b6\u6001 \u4efb\u52a1\u6743\u9650 \u8fd0\u884c\u7edf\u8ba1 \u8fdb\u7a0b\u8c03\u5ea6 \u4fe1\u53f7\u5904\u7406 \u5185\u5b58\u7ba1\u7406 \u6587\u4ef6\u4e0e\u6587\u4ef6\u7cfb\u7edf \u5185\u6838\u6808","title":"\u6982\u8ff0"},{"location":"chapter_4/15_task_struct/#_2","text":"task_struct \u7ed3\u6784\u4f53\u7684 struct task_struct real_parent \u548c struct task_struct parent \u6210\u5458\u7528\u4e8e\u8868\u793a\u8fdb\u7a0b\u7684\u4eb2\u5c5e\u5173\u7cfb\u3002 real_parent: \u8868\u793a\u5b9e\u9645\u7236\u8fdb\u7a0b\uff08\u771f\u6b63\u7684\u7236\u8fdb\u7a0b\uff09\uff0c\u5373\u521b\u5efa\u5f53\u524d\u8fdb\u7a0b\u7684\u76f4\u63a5\u7236\u8fdb\u7a0b\u3002 parent: \u8868\u793a\u5f53\u524d\u8fdb\u7a0b\u7684\u666e\u901a\u7236\u8fdb\u7a0b\uff0c\u5373\u8c03\u7528 fork()\u6216 clone()\u51fd\u6570\u521b\u5efa\u5f53\u524d\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u3002 \u8fd9\u4e24\u4e2a\u6210\u5458\u90fd\u662f\u6307\u5411 task_struct \u7ed3\u6784\u4f53\u7684\u6307\u9488\uff0c\u901a\u8fc7\u5b83\u4eec\u53ef\u4ee5\u904d\u5386\u6574\u4e2a\u8fdb\u7a0b\u6811\u6765\u67e5\u627e\u548c\u5904\u7406\u4e0e\u4eb2\u5c5e\u5173\u7cfb\u76f8\u5173\u7684\u64cd\u4f5c\u3002\u901a\u8fc7\u8bbf\u95ee\u8fd9\u4e9b\u6210\u5458\uff0c\u53ef\u4ee5\u786e\u5b9a\u4e00\u4e2a\u8fdb\u7a0b\u7684\u76f4\u63a5\u7236\u5b50\u5173\u7cfb\uff0c\u5e76\u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406\u3002 \u5728 Linux \u7cfb\u7edf\u4e2d\uff0c\u6240\u6709\u8fdb\u7a0b\u4e4b\u95f4\u90fd\u6709\u7740\u76f4\u63a5\u6216\u95f4\u63a5\u5730\u8054\u7cfb\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u5176\u7236\u8fdb\u7a0b\uff0c\u4e5f\u53ef\u80fd\u6709\u96f6\u4e2a\u6216\u591a\u4e2a\u5b50\u8fdb\u7a0b\u3002\u62e5\u6709\u540c\u4e00\u7236\u8fdb\u7a0b\u7684\u6240\u6709\u8fdb\u7a0b\u5177\u6709\u5144\u5f1f\u5173\u7cfb\u3002 \u5b57\u6bb5 \u63cf\u8ff0 real_parent \u6307\u5411\u5176\u7236\u8fdb\u7a0b\uff0c\u5982\u679c\u521b\u5efa\u5b83\u7684\u7236\u8fdb\u7a0b\u4e0d\u518d\u5b58\u5728\uff0c\u5219\u6307\u5411 PID \u4e3a 1 \u7684 init \u8fdb\u7a0b parent \u6307\u5411\u5176\u7236\u8fdb\u7a0b\uff0c\u5f53\u5b83\u7ec8\u6b62\u65f6\uff0c\u5fc5\u987b\u5411\u5b83\u7684\u7236\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f7\u3002\u5b83\u7684\u503c\u901a\u5e38\u4e0e real_parent \u76f8\u540c children \u8868\u793a\u94fe\u8868\u7684\u5934\u90e8\uff0c\u94fe\u8868\u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u662f\u5b83\u7684\u5b50\u8fdb\u7a0b sibling \u7528\u4e8e\u628a\u5f53\u524d\u8fdb\u7a0b\u63d2\u5165\u5230\u5144\u5f1f\u94fe\u8868\u4e2d group_leader \u6307\u5411\u5176\u6240\u5728\u8fdb\u7a0b\u7ec4\u7684\u9886\u5934\u8fdb\u7a0b","title":"\u4eb2\u5c5e\u5173\u7cfb"},{"location":"chapter_4/15_task_struct/#_3","text":"void *stack; \u5728 Linux \u5185\u6838\u4e2d\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e00\u4e2a\u4e13\u7528\u7684\u5185\u6838\u6808\uff0c\u7528\u4e8e\u4fdd\u5b58\u8fdb\u7a0b\u5728\u5185\u6838\u6001\u6267\u884c\u65f6\u7684\u4e34\u65f6\u6570\u636e\u548c\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002\u8fd9\u4e2a\u5185\u6838\u6808\u662f\u5728\u8fdb\u7a0b\u521b\u5efa\u8fc7\u7a0b\u4e2d\u88ab\u5206\u914d\u7684\u3002 \u8fdb\u7a0b\u7684\u5185\u6838\u6808\u901a\u5e38\u662f\u901a\u8fc7\u7ed3\u6784\u4f53 task_struct \u7684\u6210\u5458\u53d8\u91cf stack \u6765\u8868\u793a\u3002stack \u662f\u4e00\u4e2a\u6307\u5411 void \u7c7b\u578b\u7684\u6307\u9488\uff0c\u5728\u8fd0\u884c\u65f6\u4f1a\u6307\u5411\u5b9e\u9645\u5206\u914d\u7ed9\u8be5\u8fdb\u7a0b\u7684\u5185\u5b58\u533a\u57df\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u5f53\u521b\u5efa\u65b0\u8fdb\u7a0b\u65f6\uff0cLinux \u5185\u6838\u4f1a\u4e3a\u5176\u5206\u914d\u4e00\u4e2a\u5408\u9002\u5927\u5c0f\u7684\u5185\u6838\u6808\u7a7a\u95f4\uff0c\u5e76\u5c06\u5176\u5730\u5740\u8d4b\u7ed9 task_struct \u4e2d\u7684 stack \u6210\u5458\u3002\u8fd9\u4e2a\u5185\u5b58\u533a\u57df\u4f4d\u4e8e\u7ebf\u6027\u5730\u5740\u7a7a\u95f4\u6700\u9ad8\u7aef\uff08\u5411\u4f4e\u5730\u5740\u6269\u5c55\uff09\u6216\u8005\u662f\u7279\u5b9a\u7684\u56fa\u5b9a\u4f4d\u7f6e\uff08\u5982 x86 \u67b6\u6784\u4e2d\u4f7f\u7528\u4e86\u56fa\u5b9a\u4f4d\u7f6e\uff09\u3002\u7136\u540e\uff0c\u5728\u8fdb\u5165\u5185\u6838\u6001\u6267\u884c\u65f6\uff0c\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u5c06\u5207\u6362\u5230\u81ea\u5df1\u7684\u5185\u6838\u6808\u4e0a\u8fdb\u884c\u64cd\u4f5c\u3002","title":"\u8fdb\u7a0b\u5185\u6838\u6808"},{"location":"chapter_4/15_task_struct/#_4","text":"unsigned int flags; /* per process flags, defined below */ unsigned int flags \u662f task_struct \u7ed3\u6784\u4f53\u7684\u4e00\u4e2a\u5b57\u6bb5\uff0c\u7528\u4e8e\u8bb0\u5f55\u8fdb\u7a0b\u7684\u6807\u8bb0\u6216\u72b6\u6001\u4fe1\u606f\u3002\u8fd9\u4e2a\u5b57\u6bb5\u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u6570\u7c7b\u578b\uff0c\u901a\u5e38\u4f7f\u7528\u4f4d\u63a9\u7801\u6765\u8868\u793a\u4e0d\u540c\u7684\u6807\u8bb0\u3002\u8fd9\u4e2a\u5b57\u6bb5\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u9700\u6c42\u548c\u5185\u6838\u7248\u672c\u5b9a\u4e49\u5404\u79cd\u6807\u8bb0\uff0c\u4ee5\u4fbf\u5bf9\u8fdb\u7a0b\u8fdb\u884c\u6807\u8bc6\u548c\u7ba1\u7406\u3002\u4e00\u4e9b\u5e38\u89c1\u7684\u6807\u8bb0\u53ef\u80fd\u5305\u62ec\uff1a \u4efb\u52a1\u72b6\u6001\uff1a\u4f8b\u5982\u662f\u5426\u6b63\u5728\u8fd0\u884c\u3001\u505c\u6b62\u3001\u50f5\u5c38\u7b49\u3002 \u8c03\u5ea6\u5668\u76f8\u5173\uff1a\u4f8b\u5982\u8c03\u5ea6\u7b56\u7565\u3001\u4f18\u5148\u7ea7\u7b49\u3002 \u4fe1\u53f7\u5904\u7406\uff1a\u4f8b\u5982\u6302\u8d77\u4fe1\u53f7\u96c6\u3001\u672a\u51b3\u4fe1\u53f7\u96c6\u7b49\u3002 \u8fdb\u7a0b\u7279\u6027\uff1a\u4f8b\u5982\u662f\u5426\u4e3a\u5b88\u62a4\u8fdb\u7a0b\u3001\u662f\u5426\u5141\u8bb8\u88ab\u8ffd\u8e2a\u7b49\u3002 \u53cd\u5e94\u8fdb\u7a0b\u72b6\u6001\u7684\u4fe1\u606f\uff0c\u4f46\u4e0d\u662f\u8fd0\u884c\u72b6\u6001\uff0c\u7528\u4e8e\u5185\u6838\u8bc6\u522b\u8fdb\u7a0b\u5f53\u524d\u7684\u72b6\u6001\uff0c\u4ee5\u5907\u4e0b\u4e00\u6b65\u64cd\u4f5c flags \u6210\u5458\u7684\u53ef\u80fd\u53d6\u503c\u5982\u4e0b\uff0c\u8fd9\u4e9b\u5b8f\u4ee5 PF(ProcessFlag)\u5f00\u5934 /* * Per process flags */ #define PF_EXITING 0x00000004 /* getting shut down */ #define PF_EXITPIDONE 0x00000008 /* pi exit done on shut down */ #define PF_VCPU 0x00000010 /* I'm a virtual CPU */ #define PF_WQ_WORKER 0x00000020 /* I'm a workqueue worker */ #define PF_FORKNOEXEC 0x00000040 /* forked but didn't exec */ #define PF_MCE_PROCESS 0x00000080 /* process policy on mce errors */ #define PF_SUPERPRIV 0x00000100 /* used super-user privileges */ #define PF_DUMPCORE 0x00000200 /* dumped core */ #define PF_SIGNALED 0x00000400 /* killed by a signal */ #define PF_MEMALLOC 0x00000800 /* Allocating memory */ #define PF_NPROC_EXCEEDED 0x00001000 /* set_user noticed that RLIMIT_NPROC was exceeded */ #define PF_USED_MATH 0x00002000 /* if unset the fpu must be initialized before use */ #define PF_USED_ASYNC 0x00004000 /* used async_schedule*(), used by module init */ #define PF_NOFREEZE 0x00008000 /* this thread should not be frozen */ #define PF_FROZEN 0x00010000 /* frozen for system suspend */ #define PF_FSTRANS 0x00020000 /* inside a filesystem transaction */ #define PF_KSWAPD 0x00040000 /* I am kswapd */ #define PF_MEMALLOC_NOIO 0x00080000 /* Allocating memory without IO involved */ #define PF_LESS_THROTTLE 0x00100000 /* Throttle me less: I clean memory */ #define PF_KTHREAD 0x00200000 /* I am a kernel thread */ #define PF_RANDOMIZE 0x00400000 /* randomize virtual address space */ #define PF_SWAPWRITE 0x00800000 /* Allowed to write to swap */ #define PF_NO_SETAFFINITY 0x04000000 /* Userland is not allowed to meddle with cpus_allowed */ #define PF_MCE_EARLY 0x08000000 /* Early kill for mce process policy */ #define PF_MUTEX_TESTER 0x20000000 /* Thread belongs to the rt mutex tester */ #define PF_FREEZER_SKIP 0x40000000 /* Freezer should not count it as freezable */ #define PF_SUSPEND_TASK 0x80000000 /* this thread called freeze_processes and should not be frozen */","title":"\u8fdb\u7a0b\u6807\u8bb0"},{"location":"chapter_4/15_task_struct/#_5","text":"\u6df1\u5165\u7406\u89e3 Linux \u5185\u6838 task_struct \u7ed3\u6784","title":"\u53c2\u8003"},{"location":"chapter_4/16_init_call/","text":"\u6982\u8ff0 linux \u4ee5\u53ca\u5d4c\u5165\u5f0f\u4e00\u4e9b\u4ee3\u7801\uff0c\u6211\u4eec\u770b\u5230 core_initcall\u3001device_initcall\u3001fs_initcall \u7b49\u7b49\u9700\u8981\u94fe\u63a5\u5668\u5206\u914d\u5404\u4e2a section\uff0c\u5e76\u4e14\u5728\u542f\u52a8\u8be5\u6a21\u5757\u65f6\u5019\u6267\u884c\u3002\u4e0b\u9762\u6211\u4eec\u8be6\u7ec6\u8ffd\u6eaf\u4e00\u4e0b\u6267\u884c\u8fc7\u7a0b\u3002 \u95ee\u9898\u70b9 \u5404\u79cd initcall \u7684\u5148\u540e\u987a\u5e8f\u662f\u600e\u4e48\u6837\u7684\uff1f \u95ee\u9898\u70b9 \u5185\u6838\u662f\u600e\u4e48\u5b9e\u73b0\u7684? \u4e3e\u4f8b\u5b50 1 core_initcall \u5728 net/socket.c \u4e0b static int __init sock_init(void) { int err; /* * Initialize the network sysctl infrastructure. */ err = net_sysctl_init(); if (err) goto out; /* * Initialize skbuff SLAB cache */ skb_init(); /* * Initialize the protocols module. */ init_inodecache(); err = register_filesystem(&sock_fs_type); if (err) goto out_fs; sock_mnt = kern_mount(&sock_fs_type); if (IS_ERR(sock_mnt)) { err = PTR_ERR(sock_mnt); goto out_mount; } /* The real protocol initialization is performed in later initcalls. */ #ifdef CONFIG_NETFILTER err = netfilter_init(); if (err) goto out; #endif ptp_classifier_init(); out: return err; out_mount: unregister_filesystem(&sock_fs_type); out_fs: goto out; } core_initcall(sock_init); /* early initcall */ 2 fs_initcall \u5728 /linux-3.16.51/fs/anon_inodes.c \u4e0b static int __init anon_inode_init(void) { anon_inode_mnt = kern_mount(&anon_inode_fs_type); if (IS_ERR(anon_inode_mnt)) panic(\"anon_inode_init() kernel mount failed (%ld)\\n\", PTR_ERR(anon_inode_mnt)); anon_inode_inode = alloc_anon_inode(anon_inode_mnt->mnt_sb); if (IS_ERR(anon_inode_inode)) panic(\"anon_inode_init() inode allocation failed (%ld)\\n\", PTR_ERR(anon_inode_inode)); return 0; } fs_initcall(anon_inode_init); 3 early_initcall //file: kernel/softirq.c static struct smp_hotplug_thread softirq_threads = { .store = &ksoftirqd, .thread_should_run = ksoftirqd_should_run, .thread_fn = run_ksoftirqd, .thread_comm = \"ksoftirqd/%u\",}; static __init int spawn_ksoftirqd(void){ register_cpu_notifier(&cpu_nfb); BUG_ON(smpboot_register_percpu_thread(&softirq_threads)); return 0; } early_initcall(spawn_ksoftirqd); 4 subsys_initcall //file: net/core/dev.c static int __init net_dev_init(void){ ...... for_each_possible_cpu(i) { struct softnet_data *sd = &per_cpu(softnet_data, i); memset(sd, 0, sizeof(*sd)); skb_queue_head_init(&sd->input_pkt_queue); skb_queue_head_init(&sd->process_queue); sd->completion_queue = NULL; INIT_LIST_HEAD(&sd->poll_list); ...... } ...... open_softirq(NET_TX_SOFTIRQ, net_tx_action); open_softirq(NET_RX_SOFTIRQ, net_rx_action); } subsys_initcall(net_dev_init); \u95ee\u9898 1 \u5404\u79cd initcall \u4e4b\u95f4\u7684\u987a\u5e8f \u6e90\u7801\u8def\u5f84: include/linux/init.h /* initcalls are now grouped by functionality into separate * subsections. Ordering inside the subsections is determined * by link order. * For backwards compatibility, initcall() puts the call in * the device init subsection. * * The `id' arg to __define_initcall() is needed so that multiple initcalls * can point at the same handler without causing duplicate-symbol build errors. */ #define __define_initcall(fn, id) \\ static initcall_t __initcall_##fn##id __used \\ __attribute__((__section__(\".initcall\" #id \".init\"))) = fn; \\ LTO_REFERENCE_INITCALL(__initcall_##fn##id) /* * Early initcalls run before initializing SMP. * * Only for built-in code, not modules. */ #define early_initcall(fn) __define_initcall(fn, early) /* * A \"pure\" initcall has no dependencies on anything else, and purely * initializes variables that couldn't be statically initialized. * * This only exists for built-in code, not for modules. * Keep main.c:initcall_level_names[] in sync. */ #define pure_initcall(fn) __define_initcall(fn, 0) #define core_initcall(fn) __define_initcall(fn, 1) #define core_initcall_sync(fn) __define_initcall(fn, 1s) #define postcore_initcall(fn) __define_initcall(fn, 2) #define postcore_initcall_sync(fn) __define_initcall(fn, 2s) #define arch_initcall(fn) __define_initcall(fn, 3) #define arch_initcall_sync(fn) __define_initcall(fn, 3s) #define subsys_initcall(fn) __define_initcall(fn, 4) #define subsys_initcall_sync(fn) __define_initcall(fn, 4s) #define fs_initcall(fn) __define_initcall(fn, 5) #define fs_initcall_sync(fn) __define_initcall(fn, 5s) #define rootfs_initcall(fn) __define_initcall(fn, rootfs) #define device_initcall(fn) __define_initcall(fn, 6) #define device_initcall_sync(fn) __define_initcall(fn, 6s) #define late_initcall(fn) __define_initcall(fn, 7) #define late_initcall_sync(fn) __define_initcall(fn, 7s) \u867d\u7136\u4e0d\u5b8c\u5168\u61c2\uff0c\u4f46\u662f\u5927\u81f4\u4e0a\u660e\u767d\u5148\u540e\u987a\u5e8f: early_initcall > pure_initcall > core_initcall > fs_initcall > device_initcall \u53c2\u8003 linux \u5185\u6838 initcall \u653e\u7f6e\u5728\u5404\u4e2a section \u4e2d\u51fd\u6570\u6267\u884c\u6d41\u7a0b","title":"\u7b2c\u5341\u516d\u7bc7 Linux\u5404\u7c7binitcall\u603b\u7ed3"},{"location":"chapter_4/16_init_call/#_1","text":"linux \u4ee5\u53ca\u5d4c\u5165\u5f0f\u4e00\u4e9b\u4ee3\u7801\uff0c\u6211\u4eec\u770b\u5230 core_initcall\u3001device_initcall\u3001fs_initcall \u7b49\u7b49\u9700\u8981\u94fe\u63a5\u5668\u5206\u914d\u5404\u4e2a section\uff0c\u5e76\u4e14\u5728\u542f\u52a8\u8be5\u6a21\u5757\u65f6\u5019\u6267\u884c\u3002\u4e0b\u9762\u6211\u4eec\u8be6\u7ec6\u8ffd\u6eaf\u4e00\u4e0b\u6267\u884c\u8fc7\u7a0b\u3002 \u95ee\u9898\u70b9 \u5404\u79cd initcall \u7684\u5148\u540e\u987a\u5e8f\u662f\u600e\u4e48\u6837\u7684\uff1f \u95ee\u9898\u70b9 \u5185\u6838\u662f\u600e\u4e48\u5b9e\u73b0\u7684?","title":"\u6982\u8ff0"},{"location":"chapter_4/16_init_call/#_2","text":"","title":"\u4e3e\u4f8b\u5b50"},{"location":"chapter_4/16_init_call/#1-core_initcall","text":"\u5728 net/socket.c \u4e0b static int __init sock_init(void) { int err; /* * Initialize the network sysctl infrastructure. */ err = net_sysctl_init(); if (err) goto out; /* * Initialize skbuff SLAB cache */ skb_init(); /* * Initialize the protocols module. */ init_inodecache(); err = register_filesystem(&sock_fs_type); if (err) goto out_fs; sock_mnt = kern_mount(&sock_fs_type); if (IS_ERR(sock_mnt)) { err = PTR_ERR(sock_mnt); goto out_mount; } /* The real protocol initialization is performed in later initcalls. */ #ifdef CONFIG_NETFILTER err = netfilter_init(); if (err) goto out; #endif ptp_classifier_init(); out: return err; out_mount: unregister_filesystem(&sock_fs_type); out_fs: goto out; } core_initcall(sock_init); /* early initcall */","title":"1 core_initcall"},{"location":"chapter_4/16_init_call/#2-fs_initcall","text":"\u5728 /linux-3.16.51/fs/anon_inodes.c \u4e0b static int __init anon_inode_init(void) { anon_inode_mnt = kern_mount(&anon_inode_fs_type); if (IS_ERR(anon_inode_mnt)) panic(\"anon_inode_init() kernel mount failed (%ld)\\n\", PTR_ERR(anon_inode_mnt)); anon_inode_inode = alloc_anon_inode(anon_inode_mnt->mnt_sb); if (IS_ERR(anon_inode_inode)) panic(\"anon_inode_init() inode allocation failed (%ld)\\n\", PTR_ERR(anon_inode_inode)); return 0; } fs_initcall(anon_inode_init);","title":"2 fs_initcall"},{"location":"chapter_4/16_init_call/#3-early_initcall","text":"//file: kernel/softirq.c static struct smp_hotplug_thread softirq_threads = { .store = &ksoftirqd, .thread_should_run = ksoftirqd_should_run, .thread_fn = run_ksoftirqd, .thread_comm = \"ksoftirqd/%u\",}; static __init int spawn_ksoftirqd(void){ register_cpu_notifier(&cpu_nfb); BUG_ON(smpboot_register_percpu_thread(&softirq_threads)); return 0; } early_initcall(spawn_ksoftirqd);","title":"3 early_initcall"},{"location":"chapter_4/16_init_call/#4-subsys_initcall","text":"//file: net/core/dev.c static int __init net_dev_init(void){ ...... for_each_possible_cpu(i) { struct softnet_data *sd = &per_cpu(softnet_data, i); memset(sd, 0, sizeof(*sd)); skb_queue_head_init(&sd->input_pkt_queue); skb_queue_head_init(&sd->process_queue); sd->completion_queue = NULL; INIT_LIST_HEAD(&sd->poll_list); ...... } ...... open_softirq(NET_TX_SOFTIRQ, net_tx_action); open_softirq(NET_RX_SOFTIRQ, net_rx_action); } subsys_initcall(net_dev_init);","title":"4 subsys_initcall"},{"location":"chapter_4/16_init_call/#1-initcall","text":"\u6e90\u7801\u8def\u5f84: include/linux/init.h /* initcalls are now grouped by functionality into separate * subsections. Ordering inside the subsections is determined * by link order. * For backwards compatibility, initcall() puts the call in * the device init subsection. * * The `id' arg to __define_initcall() is needed so that multiple initcalls * can point at the same handler without causing duplicate-symbol build errors. */ #define __define_initcall(fn, id) \\ static initcall_t __initcall_##fn##id __used \\ __attribute__((__section__(\".initcall\" #id \".init\"))) = fn; \\ LTO_REFERENCE_INITCALL(__initcall_##fn##id) /* * Early initcalls run before initializing SMP. * * Only for built-in code, not modules. */ #define early_initcall(fn) __define_initcall(fn, early) /* * A \"pure\" initcall has no dependencies on anything else, and purely * initializes variables that couldn't be statically initialized. * * This only exists for built-in code, not for modules. * Keep main.c:initcall_level_names[] in sync. */ #define pure_initcall(fn) __define_initcall(fn, 0) #define core_initcall(fn) __define_initcall(fn, 1) #define core_initcall_sync(fn) __define_initcall(fn, 1s) #define postcore_initcall(fn) __define_initcall(fn, 2) #define postcore_initcall_sync(fn) __define_initcall(fn, 2s) #define arch_initcall(fn) __define_initcall(fn, 3) #define arch_initcall_sync(fn) __define_initcall(fn, 3s) #define subsys_initcall(fn) __define_initcall(fn, 4) #define subsys_initcall_sync(fn) __define_initcall(fn, 4s) #define fs_initcall(fn) __define_initcall(fn, 5) #define fs_initcall_sync(fn) __define_initcall(fn, 5s) #define rootfs_initcall(fn) __define_initcall(fn, rootfs) #define device_initcall(fn) __define_initcall(fn, 6) #define device_initcall_sync(fn) __define_initcall(fn, 6s) #define late_initcall(fn) __define_initcall(fn, 7) #define late_initcall_sync(fn) __define_initcall(fn, 7s) \u867d\u7136\u4e0d\u5b8c\u5168\u61c2\uff0c\u4f46\u662f\u5927\u81f4\u4e0a\u660e\u767d\u5148\u540e\u987a\u5e8f: early_initcall > pure_initcall > core_initcall > fs_initcall > device_initcall","title":"\u95ee\u9898 1 \u5404\u79cd initcall \u4e4b\u95f4\u7684\u987a\u5e8f"},{"location":"chapter_4/16_init_call/#_3","text":"linux \u5185\u6838 initcall \u653e\u7f6e\u5728\u5404\u4e2a section \u4e2d\u51fd\u6570\u6267\u884c\u6d41\u7a0b","title":"\u53c2\u8003"},{"location":"chapter_4/1_process_ulimit/","text":"\u4e00\u4e2a\u8fdb\u7a0b Max open files \u7684\u6765\u6e90 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4ed6\u7684 ulimit \u76f8\u5173\u8bbe\u7f6e\u7ee7\u627f\u81ea\u4ed6\u7684\u7236\u8fdb\u7a0b\uff0c\u6240\u4ee5\u4ed6\u7684 Max open files \u4e5f\u7ee7\u627f\u81ea\u7236\u8fdb\u7a0b \u89e6\u53d1\u8fc7 PAM \u673a\u5236(\u4f7f\u7528\u4e86 pam_limits.so)\u800c\u4ea7\u751f\u7684\u8fdb\u7a0b\uff0c\u4ee5\u53ca\u4ed6\u4eec\u7684\u5b50\u8fdb\u7a0b\uff0c\uff08\u6bd4\u5982 su,sudo,login \u7b49\u7b49\u7a0b\u5e8f\u4ea7\u751f\u7684\u5b50\u8fdb\u7a0b\uff09\u8fd8\u4f1a\u53d7\u5230/etc/security/limits.* \u4e0b\u76f8\u5173\u7684\u8bbe\u7f6e\uff0c\u8fd9\u4e2a\u5927\u5bb6\u90fd\u61c2 \u91cd\u70b9\u6765\u4e86\uff0c\u6240\u6709\u8fdb\u7a0b\u90fd\u662f init \u8fdb\u7a0b\u7684\u540e\u4ee3\uff0c\u90a3\u4e48 init \u8fdb\u7a0b\u7684 RLIMITS \u662f\u5728\u54ea\u91cc\u5b9a\u4e49\u7684\u5462\uff1f \u7ee7\u7eed\u4ee5 Max open files \u4e3a\u4f8b\u5b50\uff0c\u8fdb\u884c\u63a2\u7d22 \u4e00 \u5185\u6838\u6e90\u7801\u4e2d RELIMITS \u7684\u9ed8\u8ba4\u8bbe\u7f6e ./linux-3.16.51/include/asm-generic/resource.h \u5de6\u8fb9\u7684\u662f soft limit\uff0c\u53f3\u8fb9\u7684\u662f hard limit\uff0c \u5176\u4e2d [RLIMIT_NOFILE] = { INR_OPEN_CUR, INR_OPEN_MAX }, INT_OPEN_CUR,INT_OPEN_MAX \u5b9a\u4e49\u5728\u54ea\u91cc\u5462\uff1f ./linux-3.16.51/include/uapi/linux/fs.h \u6240\u4ee5 init \u8fdb\u7a0b\u4e00\u5f00\u59cb\u7684\u9ed8\u8ba4\u503c\uff0c\u5c31\u662f 1024 \u548c 4096\u3002 \u9a8c\u8bc1 \u4e00 \u4f7f\u7528 2.6 \u7cfb\u5217\u5185\u6838\u7684 centos6 \u4e8c \u4f7f\u7528 3.16 \u5185\u6838\u7684 debian8 \u4e09 \u4f7f\u7528 systemd \u7684\u7cfb\u7edf\u4e0a\uff0c\u5374\u4e0d\u662f 1024 \u548c 4096 \u53e6\u5916\uff0c \u6bcf\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528 setrlimit \u8bbe\u7f6e\u81ea\u5df1\u7684 RLIMTS\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 getrlimit \u7cfb\u7edf\u8c03\u7528\u67e5\u770b\u81ea\u5df1\u7684 RLIMITS.\u5176\u4e2d root \u7528\u6237\u53ef\u4ee5\u8c03\u5927\u81ea\u5df1\u7684 RLIMITS\uff0c\u975e root \u7528\u6237\u53ea\u80fd\u8c03\u5c0f\u3002systemd \u8fdb\u7a0b\u7684\u7528\u6237\u662f root\uff0c\u53ef\u4ee5\u901a\u8fc7 setrlimit \u8c03\u7528\uff0c\u63d0\u9ad8\u81ea\u5df1\u7684 RLIMITS\u3002 \u731c\u60f3\uff1a \u5e94\u8be5\u662f systemd \u8fdb\u7a0b\u81ea\u5df1\u8fdb\u884c\u4e86 setrlimit \u8c03\u7528\u3002\u4e8e\u662f\u67e5\u770b systemd \u7684\u6e90\u4ee3\u7801\uff1a 1 \u5728 src/core/main.c 1162 \u884c\uff0c\u8bbe\u7f6e\u81ea\u5df1\u7684\u6700\u5927 fd 2 \u518d\u770b\u4e0b read_nr_open \u51fd\u6570\u7684\u5b9a\u4e49\uff1a \u5728 src/basic/fd-util.c 956 \u884c \u8bfb\u53d6 kernel \u5141\u8bb8\u7684\u5355\u8fdb\u7a0b\u6700\u5927\u7684 fd\uff0c\u5982\u679c\u8bfb\u53d6\u5931\u8d25\uff0c\u9ed8\u8ba4\u8fd4\u56de 1024*1024 r = read_one_line_file(\"/proc/sys/fs/nr_open\", &nr_open); \u6211\u4eec\u90fd\u77e5\u9053\uff0clinux \u4e0a\u5355\u8fdb\u7a0b\u80fd\u6253\u5f00\u7684\u6700\u5927\u6587\u4ef6\u6570\u53d6\u51b3\u4e8e/proc/sys/fs/nr_open \u7684\u8bbe\u7f6e\u3002 \u5f53\u7136\uff0csystemd \u751f\u6210\u7684\u5b50\u8fdb\u7a0b\uff0c\u5b83\u9ed8\u8ba4\u7684 RLIMITS \u4e5f\u4e0d\u662f\u7ee7\u627f\u81ea\u5df1\u7684\u8bbe\u7f6e\uff0c\u800c\u662f\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6/etc/systemd/system.conf \u91cc\u76f8\u5173\u8bbe\u7f6e \u603b\u7ed3 1 \u5173\u4e8e\u9ed8\u8ba4\u503c \u4e00\u4e2a\u8fdb\u7a0b\u7684 Max open files \u9ed8\u8ba4\u7ee7\u627f\u81ea\u4ed6\u7684\u7236\u8fdb\u7a0b \u4f7f\u7528\u4e86 pam_limits.so \u800c\u4ea7\u751f\u7684\u5b50\u8fdb\u7a0b\uff0c\u4f1a\u53d7\u5230/etc/security/limits.*\u914d\u7f6e\u7684\u5f71\u54cd. \u800c\u6211\u4eec\u7ebf\u4e0a\u7684 sshd \u670d\u52a1\uff0c\u9ed8\u8ba4\u662f\u5ffd\u7565 PAM \u8bbe\u7f6e\u7684\uff0c\u53ef\u4ee5\u67e5\u770b\u914d\u7f6e\u6587\u4ef6 \u5bfc\u81f4\u7531 sshd \u4ea7\u751f\u7684\u5b50\u8fdb\u7a0b\uff0c\u9ed8\u8ba4\u90fd\u7ee7\u627f\u4e86 sshd \u8fdb\u7a0b\u7684 ulimit \u8bbe\u7f6e \u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7 setrlimit \u7cfb\u7edf\u8c03\u7528\u8fdb\u884c\u8c03\u6574\u3001\u901a\u8fc7 getrlimit \u8fdb\u884c\u67e5\u770b\u81ea\u5df1\u7684 RLIMITS\u3002shell \u7684 ulimit \u547d\u4ee4\uff0c\u5176\u5b9e\u5e95\u5c42\u4e5f\u662f\u8c03\u7528 setrlimit \u548c getrlimit \u8001\u7248\u672c\u7684 init \u8fdb\u7a0b\uff08SysVinit \u548c Upstart\uff09\uff0c\u662f\u91c7\u53d6 kernel \u9ed8\u8ba4\u7ed9\u7684 RLIMITS \u8bbe\u7f6e \u65b0\u7248\u672c\u7684 init \u8fdb\u7a0b\uff0c\u4e5f\u5c31\u662f systemd\uff0c\u662f\u81ea\u5df1\u8bfb\u53d6\u4e86/proc/sys/fs/nr_open \u7684\u8bbe\u7f6e 2 \u5173\u4e8e\u9650\u5236 a. \u6240\u6709\u8fdb\u7a0b\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6570\u4e0d\u80fd\u8d85\u8fc7/proc/sys/fs/file-max ( \u64cd\u4f5c\u7cfb\u7edf\u8303\u56f4\u5185\u7684\u9650\u5236, debian12 \u9ed8\u8ba4\u5df2\u7ecf\u662f 9223372036854775807, \u662f\u4e00\u4e2a\u8d85\u7ea7\u5927\u7684\u6570\u5b57 ) b. \u5355\u4e2a\u8fdb\u7a0b\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6570\u4e0d\u80fd\u8d85\u8fc7 user limit \u4e2d nofile \u7684 soft limit c. nofile \u7684 soft limit \u4e0d\u80fd\u8d85\u8fc7\u5176 hard limit d. nofile \u7684 hard limit \u4e0d\u80fd\u8d85\u8fc7 /proc/sys/fs/nr_open \uff0c /proc/sys/fs/nr_open \u662f\u5185\u6838\u5c42\u9762\uff0c\u7ed9 hard limit \u7684\u6700\u5927\u503c\u8bbe\u7f6e\u7684\u4e00\u4e2a\u9650\u5b9a\u3002\u4e5f\u5c31\u662f\u8bf4\u5355\u4e2a\u8fdb\u7a0b\u4e0d\u80fd\u6253\u5f00\u8d85\u8fc7 /proc/sysc/fs/nr_open \u6240\u8bbe\u5b9a\u7684\u6587\u4ef6\u6570, \u9ed8\u8ba4\u662f 1048576 \u8865\u5145\uff0c\u5982\u4f55\u5728\u7ebf\u4fee\u6539\u7ebf\u4e0a\u670d\u52a1\u7684 rlimit\uff08\u4e0d\u91cd\u542f\u5e94\u7528\uff09 \u672c\u8d28\u80fd\u529b\uff1a root \u7528\u6237+prlimit()\u7cfb\u7edf\u8c03\u7528 \u5176\u4e2d\uff0cprlimit \u662f\u4e00\u4e2a\u7528\u6237\u7a7a\u95f4\u5de5\u5177\uff0c\u53ef\u4ee5\u4f7f\u7528 prilimit()\u7cfb\u7edf\u8c03\u7528 \u4e00 \u4f7f\u7528 prlimit \u5de5\u5177 #\u4f7f\u7528prlimit\u547d\u4ee4\u4fee\u6539core\u6587\u4ef6\u5927\u5c0f\u9650\u5236 root@VM-131-5-ubuntu:/etc/security# prlimit -p 6034 --core=unlimited: #\u518d\u6b21\u67e5\u770b\u8be5nginx\u8fdb\u7a0b\u7684core\u6587\u4ef6\u5927\u5c0f\u9650\u5236 root@VM-131-5-ubuntu:/etc/security# cat /proc/6034/limits |grep core Max core file size unlimited unlimited bytes prlimit -p 26281 --nofile=1000000 \u4e8c python + resource \u6a21\u5757 #\u5229\u7528python3 resource\u6a21\u5757\u4fee\u6539core\u6587\u4ef6\u5927\u5c0f\u9650\u5236 root@VM-131-5-ubuntu:/etc/security# python3 Python 3.4.3 (default, Nov 12 2018, 22:25:49) [GCC 4.8.4] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import resource >>> resource.prlimit(16436,resource.RLIMIT_CORE,(-1,-1)) (0, -1) >>> exit() #\u518d\u6b21\u67e5\u770b\u8be5nginx\u8fdb\u7a0b\u7684core\u6587\u4ef6\u5927\u5c0f\u9650\u5236 root@VM-131-5-ubuntu:/etc/security# cat /proc/16436/limits |grep core Max core file size unlimited unlimited bytes","title":"\u7b2c\u4e00\u7bc7 \u8fdb\u7a0bMax open files\u7684\u8bbe\u7f6e"},{"location":"chapter_4/1_process_ulimit/#max-open-files","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4ed6\u7684 ulimit \u76f8\u5173\u8bbe\u7f6e\u7ee7\u627f\u81ea\u4ed6\u7684\u7236\u8fdb\u7a0b\uff0c\u6240\u4ee5\u4ed6\u7684 Max open files \u4e5f\u7ee7\u627f\u81ea\u7236\u8fdb\u7a0b \u89e6\u53d1\u8fc7 PAM \u673a\u5236(\u4f7f\u7528\u4e86 pam_limits.so)\u800c\u4ea7\u751f\u7684\u8fdb\u7a0b\uff0c\u4ee5\u53ca\u4ed6\u4eec\u7684\u5b50\u8fdb\u7a0b\uff0c\uff08\u6bd4\u5982 su,sudo,login \u7b49\u7b49\u7a0b\u5e8f\u4ea7\u751f\u7684\u5b50\u8fdb\u7a0b\uff09\u8fd8\u4f1a\u53d7\u5230/etc/security/limits.* \u4e0b\u76f8\u5173\u7684\u8bbe\u7f6e\uff0c\u8fd9\u4e2a\u5927\u5bb6\u90fd\u61c2","title":"\u4e00\u4e2a\u8fdb\u7a0b Max open files \u7684\u6765\u6e90"},{"location":"chapter_4/1_process_ulimit/#init-init-rlimits","text":"\u7ee7\u7eed\u4ee5 Max open files \u4e3a\u4f8b\u5b50\uff0c\u8fdb\u884c\u63a2\u7d22","title":"\u91cd\u70b9\u6765\u4e86\uff0c\u6240\u6709\u8fdb\u7a0b\u90fd\u662f init \u8fdb\u7a0b\u7684\u540e\u4ee3\uff0c\u90a3\u4e48 init \u8fdb\u7a0b\u7684 RLIMITS \u662f\u5728\u54ea\u91cc\u5b9a\u4e49\u7684\u5462\uff1f"},{"location":"chapter_4/1_process_ulimit/#relimits","text":"./linux-3.16.51/include/asm-generic/resource.h \u5de6\u8fb9\u7684\u662f soft limit\uff0c\u53f3\u8fb9\u7684\u662f hard limit\uff0c \u5176\u4e2d [RLIMIT_NOFILE] = { INR_OPEN_CUR, INR_OPEN_MAX }, INT_OPEN_CUR,INT_OPEN_MAX \u5b9a\u4e49\u5728\u54ea\u91cc\u5462\uff1f ./linux-3.16.51/include/uapi/linux/fs.h \u6240\u4ee5 init \u8fdb\u7a0b\u4e00\u5f00\u59cb\u7684\u9ed8\u8ba4\u503c\uff0c\u5c31\u662f 1024 \u548c 4096\u3002","title":"\u4e00 \u5185\u6838\u6e90\u7801\u4e2d RELIMITS \u7684\u9ed8\u8ba4\u8bbe\u7f6e"},{"location":"chapter_4/1_process_ulimit/#_1","text":"","title":"\u9a8c\u8bc1"},{"location":"chapter_4/1_process_ulimit/#26-centos6","text":"","title":"\u4e00 \u4f7f\u7528 2.6 \u7cfb\u5217\u5185\u6838\u7684 centos6"},{"location":"chapter_4/1_process_ulimit/#316-debian8","text":"","title":"\u4e8c \u4f7f\u7528 3.16 \u5185\u6838\u7684 debian8"},{"location":"chapter_4/1_process_ulimit/#systemd-1024-4096","text":"\u53e6\u5916\uff0c \u6bcf\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528 setrlimit \u8bbe\u7f6e\u81ea\u5df1\u7684 RLIMTS\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 getrlimit \u7cfb\u7edf\u8c03\u7528\u67e5\u770b\u81ea\u5df1\u7684 RLIMITS.\u5176\u4e2d root \u7528\u6237\u53ef\u4ee5\u8c03\u5927\u81ea\u5df1\u7684 RLIMITS\uff0c\u975e root \u7528\u6237\u53ea\u80fd\u8c03\u5c0f\u3002systemd \u8fdb\u7a0b\u7684\u7528\u6237\u662f root\uff0c\u53ef\u4ee5\u901a\u8fc7 setrlimit \u8c03\u7528\uff0c\u63d0\u9ad8\u81ea\u5df1\u7684 RLIMITS\u3002 \u731c\u60f3\uff1a \u5e94\u8be5\u662f systemd \u8fdb\u7a0b\u81ea\u5df1\u8fdb\u884c\u4e86 setrlimit \u8c03\u7528\u3002\u4e8e\u662f\u67e5\u770b systemd \u7684\u6e90\u4ee3\u7801\uff1a 1 \u5728 src/core/main.c 1162 \u884c\uff0c\u8bbe\u7f6e\u81ea\u5df1\u7684\u6700\u5927 fd 2 \u518d\u770b\u4e0b read_nr_open \u51fd\u6570\u7684\u5b9a\u4e49\uff1a \u5728 src/basic/fd-util.c 956 \u884c \u8bfb\u53d6 kernel \u5141\u8bb8\u7684\u5355\u8fdb\u7a0b\u6700\u5927\u7684 fd\uff0c\u5982\u679c\u8bfb\u53d6\u5931\u8d25\uff0c\u9ed8\u8ba4\u8fd4\u56de 1024*1024 r = read_one_line_file(\"/proc/sys/fs/nr_open\", &nr_open); \u6211\u4eec\u90fd\u77e5\u9053\uff0clinux \u4e0a\u5355\u8fdb\u7a0b\u80fd\u6253\u5f00\u7684\u6700\u5927\u6587\u4ef6\u6570\u53d6\u51b3\u4e8e/proc/sys/fs/nr_open \u7684\u8bbe\u7f6e\u3002","title":"\u4e09 \u4f7f\u7528 systemd \u7684\u7cfb\u7edf\u4e0a\uff0c\u5374\u4e0d\u662f 1024 \u548c 4096"},{"location":"chapter_4/1_process_ulimit/#systemd-rlimits-etcsystemdsystemconf","text":"","title":"\u5f53\u7136\uff0csystemd \u751f\u6210\u7684\u5b50\u8fdb\u7a0b\uff0c\u5b83\u9ed8\u8ba4\u7684 RLIMITS \u4e5f\u4e0d\u662f\u7ee7\u627f\u81ea\u5df1\u7684\u8bbe\u7f6e\uff0c\u800c\u662f\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6/etc/systemd/system.conf \u91cc\u76f8\u5173\u8bbe\u7f6e"},{"location":"chapter_4/1_process_ulimit/#_2","text":"","title":"\u603b\u7ed3"},{"location":"chapter_4/1_process_ulimit/#1","text":"\u4e00\u4e2a\u8fdb\u7a0b\u7684 Max open files \u9ed8\u8ba4\u7ee7\u627f\u81ea\u4ed6\u7684\u7236\u8fdb\u7a0b \u4f7f\u7528\u4e86 pam_limits.so \u800c\u4ea7\u751f\u7684\u5b50\u8fdb\u7a0b\uff0c\u4f1a\u53d7\u5230/etc/security/limits.*\u914d\u7f6e\u7684\u5f71\u54cd. \u800c\u6211\u4eec\u7ebf\u4e0a\u7684 sshd \u670d\u52a1\uff0c\u9ed8\u8ba4\u662f\u5ffd\u7565 PAM \u8bbe\u7f6e\u7684\uff0c\u53ef\u4ee5\u67e5\u770b\u914d\u7f6e\u6587\u4ef6 \u5bfc\u81f4\u7531 sshd \u4ea7\u751f\u7684\u5b50\u8fdb\u7a0b\uff0c\u9ed8\u8ba4\u90fd\u7ee7\u627f\u4e86 sshd \u8fdb\u7a0b\u7684 ulimit \u8bbe\u7f6e \u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7 setrlimit \u7cfb\u7edf\u8c03\u7528\u8fdb\u884c\u8c03\u6574\u3001\u901a\u8fc7 getrlimit \u8fdb\u884c\u67e5\u770b\u81ea\u5df1\u7684 RLIMITS\u3002shell \u7684 ulimit \u547d\u4ee4\uff0c\u5176\u5b9e\u5e95\u5c42\u4e5f\u662f\u8c03\u7528 setrlimit \u548c getrlimit \u8001\u7248\u672c\u7684 init \u8fdb\u7a0b\uff08SysVinit \u548c Upstart\uff09\uff0c\u662f\u91c7\u53d6 kernel \u9ed8\u8ba4\u7ed9\u7684 RLIMITS \u8bbe\u7f6e \u65b0\u7248\u672c\u7684 init \u8fdb\u7a0b\uff0c\u4e5f\u5c31\u662f systemd\uff0c\u662f\u81ea\u5df1\u8bfb\u53d6\u4e86/proc/sys/fs/nr_open \u7684\u8bbe\u7f6e","title":"1 \u5173\u4e8e\u9ed8\u8ba4\u503c"},{"location":"chapter_4/1_process_ulimit/#2","text":"a. \u6240\u6709\u8fdb\u7a0b\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6570\u4e0d\u80fd\u8d85\u8fc7/proc/sys/fs/file-max ( \u64cd\u4f5c\u7cfb\u7edf\u8303\u56f4\u5185\u7684\u9650\u5236, debian12 \u9ed8\u8ba4\u5df2\u7ecf\u662f 9223372036854775807, \u662f\u4e00\u4e2a\u8d85\u7ea7\u5927\u7684\u6570\u5b57 ) b. \u5355\u4e2a\u8fdb\u7a0b\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6570\u4e0d\u80fd\u8d85\u8fc7 user limit \u4e2d nofile \u7684 soft limit c. nofile \u7684 soft limit \u4e0d\u80fd\u8d85\u8fc7\u5176 hard limit d. nofile \u7684 hard limit \u4e0d\u80fd\u8d85\u8fc7 /proc/sys/fs/nr_open \uff0c /proc/sys/fs/nr_open \u662f\u5185\u6838\u5c42\u9762\uff0c\u7ed9 hard limit \u7684\u6700\u5927\u503c\u8bbe\u7f6e\u7684\u4e00\u4e2a\u9650\u5b9a\u3002\u4e5f\u5c31\u662f\u8bf4\u5355\u4e2a\u8fdb\u7a0b\u4e0d\u80fd\u6253\u5f00\u8d85\u8fc7 /proc/sysc/fs/nr_open \u6240\u8bbe\u5b9a\u7684\u6587\u4ef6\u6570, \u9ed8\u8ba4\u662f 1048576","title":"2 \u5173\u4e8e\u9650\u5236"},{"location":"chapter_4/1_process_ulimit/#rlimit","text":"\u672c\u8d28\u80fd\u529b\uff1a root \u7528\u6237+prlimit()\u7cfb\u7edf\u8c03\u7528 \u5176\u4e2d\uff0cprlimit \u662f\u4e00\u4e2a\u7528\u6237\u7a7a\u95f4\u5de5\u5177\uff0c\u53ef\u4ee5\u4f7f\u7528 prilimit()\u7cfb\u7edf\u8c03\u7528","title":"\u8865\u5145\uff0c\u5982\u4f55\u5728\u7ebf\u4fee\u6539\u7ebf\u4e0a\u670d\u52a1\u7684 rlimit\uff08\u4e0d\u91cd\u542f\u5e94\u7528\uff09"},{"location":"chapter_4/1_process_ulimit/#prlimit","text":"#\u4f7f\u7528prlimit\u547d\u4ee4\u4fee\u6539core\u6587\u4ef6\u5927\u5c0f\u9650\u5236 root@VM-131-5-ubuntu:/etc/security# prlimit -p 6034 --core=unlimited: #\u518d\u6b21\u67e5\u770b\u8be5nginx\u8fdb\u7a0b\u7684core\u6587\u4ef6\u5927\u5c0f\u9650\u5236 root@VM-131-5-ubuntu:/etc/security# cat /proc/6034/limits |grep core Max core file size unlimited unlimited bytes prlimit -p 26281 --nofile=1000000","title":"\u4e00 \u4f7f\u7528 prlimit \u5de5\u5177"},{"location":"chapter_4/1_process_ulimit/#python-resource","text":"#\u5229\u7528python3 resource\u6a21\u5757\u4fee\u6539core\u6587\u4ef6\u5927\u5c0f\u9650\u5236 root@VM-131-5-ubuntu:/etc/security# python3 Python 3.4.3 (default, Nov 12 2018, 22:25:49) [GCC 4.8.4] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import resource >>> resource.prlimit(16436,resource.RLIMIT_CORE,(-1,-1)) (0, -1) >>> exit() #\u518d\u6b21\u67e5\u770b\u8be5nginx\u8fdb\u7a0b\u7684core\u6587\u4ef6\u5927\u5c0f\u9650\u5236 root@VM-131-5-ubuntu:/etc/security# cat /proc/16436/limits |grep core Max core file size unlimited unlimited bytes","title":"\u4e8c python + resource \u6a21\u5757"},{"location":"chapter_4/2_pid_max/","text":"\u4e00 \u9ed8\u8ba4\u60c5\u51b5\u4e0b \u9ed8\u8ba4\u662f32768 \uff0c\u4ee3\u8868\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7cfb\u7edf\u5185\u6700\u591a\u670932768\u4e2a\u8fdb\u7a0b\u3002 \u4e8c \u5e38\u89c1\u4f18\u5316\u624b\u6bb5 sysctl -w kernel.pid_max=65535 \u4e09 \u90a3\u4e48\u5b83\u7684\u4e0a\u9650\u662f\u591a\u5c11\u5462\uff1f \u5b9a\u4e49\u5728 ./include/linux/threads.h \u6700\u5927\u503c\u662f4 * 1024 * 1024 \uff0c\u4e5f\u5c31\u662f4194304 \u5f53\u6211\u4eec\u624b\u5de5\u8bbe\u7f6e\u8d85\u8fc7\u8fd9\u4e2a\u503c\u65f6\uff0c\u4f1a\u62a5\u9519\u3002 \u56db \u5982\u679c\u6ca1\u6709\u8c03\u6574\u8fc7/proc/sys/kernel/pid_max,\u90a3\u4e48\u5b83\u7684\u9ed8\u8ba4\u503c\u662f\u591a\u5c11\u5462 0x8000\uff0c\u5c31\u662f10\u8fdb\u5236\u768432678 \u4e94 \u5185\u6838\u4e2d2\u4e2a\u5e38\u91cf PID_MAX_LIMIT \u4ee3\u8868\u7cfb\u7edf\u6700\u5927\u53ef\u4ee5\u5206\u914d\u7684PID\u4e0a\u9650\uff0c\u7528\u6237\u7a7a\u95f4\u901a\u8fc7/proc/sys/kernel/pid_max\u600e\u4e48\u4fee\u6539\u90fd\u53ef\u4ee5\uff0c\u4f46\u4e0d\u80fd\u8d85\u8fc7PID_MAX_LIMIT, \u56e0\u6b64\u5b83\u5c31\u662f4\u767e\u4e07 PID_MAX_DEFAULT \uff0c\u662f32678 \u516d Linux\u7cfb\u7edf\u4e2d\u53ef\u4ee5\u5b58\u5728\u7684\u6700\u5927\u7ebf\u7a0b\u6570 kernel.threads-max\u5b98\u65b9\u8bf4\u660e /proc/sys/kernel/threads-max (since Linux 2.3.11) This file specifies the system-wide limit on the number of threads (tasks) that can be created on the system. Since Linux 4.1, the value that can be written to threads-max is bounded. The minimum value that can be written is 20. The maximum value that can be written is given by the constant FUTEX_TID_MASK (0x3fffffff). If a value outside of this range is written to threads-max, the error EINVAL occurs. The value written is checked against the available RAM pages. If the thread structures would occupy too much (more than 1/8th) of the available RAM pages, threads-max is reduced accordingly. Linux doesn't have a separate threads per process limit, just a limit on the total number of processes on the system (threads are essentially just processes with a shared address space on Linux) which you can view like this: cat /proc/sys/kernel/threads-max The default is the number of memory pages/4. You can increase this like: echo 100000 > /proc/sys/kernel/threads-max There is also a limit on the number of processes (and hence threads) that a single user may create, see ulimit/getrlimit for details regarding these limits. \u5c0f\u7ed3: Linux\u6709\u7cfb\u7edf\u5c42\u9762\u7684\u6700\u5927\u7ebf\u7a0b\u6570\u9650\u5236,\u7cfb\u7edf\u4e2d\u5b58\u5728\u7684task_struct\u6570\u91cf,\u65e0\u6cd5\u8d85\u8fc7kernel.threads-max Linux\u6709\u7cfb\u7edf\u5c42\u9762\u6700\u5927\u7684PID\u503c\u9650\u5236,\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2atask_struct\u7684pid\u53ef\u4ee5\u5927\u4e8ekernel.pid_max \u540c\u65f6\u6bcf\u4e2a\u7528\u6237\u53ef\u4ee5\u521b\u5efa\u7684\u6700\u5927\u8fdb\u7a0b\u6570\u4e5f\u662f\u6709\u9650\u5236\u7684,\u901a\u8fc7ulimit\u8bbe\u7f6e","title":"\u7b2c\u4e8c\u7bc7 kernel\u6e90\u7801\u4e2dpid\u7684\u6700\u5927\u503c"},{"location":"chapter_4/2_pid_max/#_1","text":"\u9ed8\u8ba4\u662f32768 \uff0c\u4ee3\u8868\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7cfb\u7edf\u5185\u6700\u591a\u670932768\u4e2a\u8fdb\u7a0b\u3002","title":"\u4e00 \u9ed8\u8ba4\u60c5\u51b5\u4e0b"},{"location":"chapter_4/2_pid_max/#_2","text":"sysctl -w kernel.pid_max=65535","title":"\u4e8c \u5e38\u89c1\u4f18\u5316\u624b\u6bb5"},{"location":"chapter_4/2_pid_max/#_3","text":"\u5b9a\u4e49\u5728 ./include/linux/threads.h \u6700\u5927\u503c\u662f4 * 1024 * 1024 \uff0c\u4e5f\u5c31\u662f4194304 \u5f53\u6211\u4eec\u624b\u5de5\u8bbe\u7f6e\u8d85\u8fc7\u8fd9\u4e2a\u503c\u65f6\uff0c\u4f1a\u62a5\u9519\u3002","title":"\u4e09 \u90a3\u4e48\u5b83\u7684\u4e0a\u9650\u662f\u591a\u5c11\u5462\uff1f"},{"location":"chapter_4/2_pid_max/#procsyskernelpid_max","text":"0x8000\uff0c\u5c31\u662f10\u8fdb\u5236\u768432678","title":"\u56db \u5982\u679c\u6ca1\u6709\u8c03\u6574\u8fc7/proc/sys/kernel/pid_max,\u90a3\u4e48\u5b83\u7684\u9ed8\u8ba4\u503c\u662f\u591a\u5c11\u5462"},{"location":"chapter_4/2_pid_max/#2","text":"PID_MAX_LIMIT \u4ee3\u8868\u7cfb\u7edf\u6700\u5927\u53ef\u4ee5\u5206\u914d\u7684PID\u4e0a\u9650\uff0c\u7528\u6237\u7a7a\u95f4\u901a\u8fc7/proc/sys/kernel/pid_max\u600e\u4e48\u4fee\u6539\u90fd\u53ef\u4ee5\uff0c\u4f46\u4e0d\u80fd\u8d85\u8fc7PID_MAX_LIMIT, \u56e0\u6b64\u5b83\u5c31\u662f4\u767e\u4e07 PID_MAX_DEFAULT \uff0c\u662f32678","title":"\u4e94  \u5185\u6838\u4e2d2\u4e2a\u5e38\u91cf"},{"location":"chapter_4/2_pid_max/#linux","text":"","title":"\u516d Linux\u7cfb\u7edf\u4e2d\u53ef\u4ee5\u5b58\u5728\u7684\u6700\u5927\u7ebf\u7a0b\u6570"},{"location":"chapter_4/2_pid_max/#kernelthreads-max","text":"/proc/sys/kernel/threads-max (since Linux 2.3.11) This file specifies the system-wide limit on the number of threads (tasks) that can be created on the system. Since Linux 4.1, the value that can be written to threads-max is bounded. The minimum value that can be written is 20. The maximum value that can be written is given by the constant FUTEX_TID_MASK (0x3fffffff). If a value outside of this range is written to threads-max, the error EINVAL occurs. The value written is checked against the available RAM pages. If the thread structures would occupy too much (more than 1/8th) of the available RAM pages, threads-max is reduced accordingly. Linux doesn't have a separate threads per process limit, just a limit on the total number of processes on the system (threads are essentially just processes with a shared address space on Linux) which you can view like this: cat /proc/sys/kernel/threads-max The default is the number of memory pages/4. You can increase this like: echo 100000 > /proc/sys/kernel/threads-max There is also a limit on the number of processes (and hence threads) that a single user may create, see ulimit/getrlimit for details regarding these limits.","title":"kernel.threads-max\u5b98\u65b9\u8bf4\u660e"},{"location":"chapter_4/2_pid_max/#_4","text":"Linux\u6709\u7cfb\u7edf\u5c42\u9762\u7684\u6700\u5927\u7ebf\u7a0b\u6570\u9650\u5236,\u7cfb\u7edf\u4e2d\u5b58\u5728\u7684task_struct\u6570\u91cf,\u65e0\u6cd5\u8d85\u8fc7kernel.threads-max Linux\u6709\u7cfb\u7edf\u5c42\u9762\u6700\u5927\u7684PID\u503c\u9650\u5236,\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2atask_struct\u7684pid\u53ef\u4ee5\u5927\u4e8ekernel.pid_max \u540c\u65f6\u6bcf\u4e2a\u7528\u6237\u53ef\u4ee5\u521b\u5efa\u7684\u6700\u5927\u8fdb\u7a0b\u6570\u4e5f\u662f\u6709\u9650\u5236\u7684,\u901a\u8fc7ulimit\u8bbe\u7f6e","title":"\u5c0f\u7ed3:"},{"location":"chapter_4/3_interrupt_one/","text":"\u6982\u8ff0 \u672c\u7bc7\u6587\u6863\u603b\u7ed3\u548c\u68b3\u7406 \u786c\u4e2d\u65ad \u65f6\u949f\u4e2d\u65ad(0 \u53f7\u4e2d\u65ad) \u7f3a\u9875\u4e2d\u65ad \u64cd\u4f5c\u7cfb\u7edf\u7684\u672c\u8d28 \u6574\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u5c31\u662f\u4e00\u4e2a\u4e2d\u65ad\u9a71\u52a8\u7684\u6b7b\u5faa\u73af\uff0c\u64cd\u4f5c\u7cfb\u7edf\u539f\u7406\u5982\u679c\u7528\u4e00\u884c\u4ee3\u7801\u89e3\u91ca\uff0c\u4e0b\u9762\u8fd9\u6837\u518d\u5408\u9002\u4e0d\u8fc7\u4e86\u3002 while(true) { doNothing(); } \u5176\u4ed6\u6240\u6709\u4e8b\u60c5\u90fd\u662f\u7531\u64cd\u4f5c\u7cfb\u7edf\u63d0\u524d\u6ce8\u518c\u7684\u4e2d\u65ad\u673a\u5236\u548c\u5176\u5bf9\u5e94\u7684\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u5b8c\u6210\uff0c\u6211\u4eec\u70b9\u51fb\u4e00\u4e0b\u9f20\u6807\uff0c\u6572\u51fb\u4e00\u4e0b\u952e\u76d8\uff0c\u6267\u884c\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u90fd\u662f\u7528\u4e2d\u65ad\u7684\u65b9\u5f0f\u6765\u901a\u77e5\u64cd\u4f5c\u7cfb\u7edf\u5e2e\u6211\u4eec\u5904\u7406\u8fd9\u4e9b\u4e8b\u4ef6\uff0c\u5f53\u6ca1\u6709\u4efb\u4f55\u9700\u8981\u64cd\u4f5c\u7cfb\u7edf\u5904\u7406\u7684\u4e8b\u4ef6\u65f6\uff0c\u5b83\u5c31\u4e56\u4e56\u505c\u5728\u6b7b\u5faa\u73af\u91cc\u4e0d\u51fa\u6765\u3002 \u4e2d\u65ad\u7684\u5206\u7c7b \u4e2d\u65ad\u53ef\u4ee5\u5206\u4e3a\u4e2d\u65ad\u548c\u5f02\u5e38, \u5f02\u5e38\u53c8\u53ef\u4ee5\u5206\u4e3a\u6545\u969c\u3001\u9677\u9631\u3001\u4e2d\u6b62. CPU \u63d0\u4f9b\u4e86\u4e24\u79cd\u4e2d\u65ad\u7a0b\u5e8f\u6267\u884c\u7684\u673a\u5236\uff0c\u4e2d\u65ad\u548c\u5f02\u5e38 \u3002\u7b2c\u4e00\u4e2a\u4e2d\u65ad\u662f\u4e2a\u52a8\u8bcd\uff0c\u7b2c\u4e8c\u4e2a\u4e2d\u65ad\u624d\u662f\u771f\u6b63\u7684\u673a\u5236\u79cd\u7c7b\u3002 An interrupt is an asynchronous event that is typically triggered by an I/O device. \u5148\u8bf4\u7b2c\u4e00\u4e2a\u673a\u5236\u4e2d\u65ad\uff08interrupt\uff09\uff0c\u4e2d\u65ad\u662f\u4e00\u4e2a\u5f02\u6b65\u4e8b\u4ef6\uff0c\u901a\u5e38\u7531 IO \u8bbe\u5907\u89e6\u53d1\u3002\u6bd4\u5982\u70b9\u51fb\u4e00\u4e0b\u9f20\u6807\u3001\u6572\u51fb\u4e00\u4e0b\u952e\u76d8\u7b49\u3002 An exception is a synchronous event that is generated when the processor detects one or more predefined conditions while executing an instruction. \u518d\u8bf4\u7b2c\u4e8c\u4e2a\u673a\u5236\u5f02\u5e38\uff08exception\uff09\uff0c\u5f02\u5e38\u662f\u4e00\u4e2a\u540c\u6b65\u4e8b\u4ef6\uff0c\u662f CPU \u5728\u6267\u884c\u6307\u4ee4\u65f6\u68c0\u6d4b\u5230\u7684\u53cd\u5e38\u6761\u4ef6\u3002\u6bd4\u5982\u9664\u6cd5\u5f02\u5e38\u3001\u9519\u8bef\u6307\u4ee4\u5f02\u5e38\uff0c\u7f3a\u9875\u5f02\u5e38\u7b49\u3002 \u8fd9\u4e24\u4e2a\u673a\u5236\uff0c\u6b8a\u9014\u540c\u5f52\uff0c\u90fd\u662f\u8ba9 CPU \u6536\u5230\u4e00\u4e2a\u4e2d\u65ad\u53f7\uff0c\u81f3\u4e8e CPU \u6536\u5230\u8fd9\u4e2a\u4e2d\u65ad\u53f7\u4e4b\u540e\u5e72\u561b\uff0c\u6211\u4eec\u6682\u4e14\u4e0d\u7ba1\u3002 \u4e2d\u65ad\u4fe1\u53f7\u4f20\u9012\u5230 CPU \u7684 3 \u79cd\u65b9\u5f0f. \u4e2d\u65ad(interrupt), \u662f\u901a\u8fc7 \u53ef\u7f16\u7a0b\u4e2d\u65ad\u63a7\u5236\u5668 \u53d1\u9001\u7ed9 CPU \u7684. \u6bd4\u5982\u6309\u4e0b\u952e\u76d8\u7684\u4e00\u4e2a\u6309\u952e\uff0c\u6700\u7ec8\u4f1a\u7ed9\u5230 CPU \u4e00\u4e2a 0x21 \u4e2d\u65ad\u53f7. \u5f02\u5e38(exception), \u662f CPU \u81ea\u5df1\u7ed9\u81ea\u5df1\u53d1\u7684\u4fe1\u53f7. \u6bd4\u5982 CPU \u6267\u884c\u5230\u4e86\u4e00\u4e2a\u65e0\u6548\u7684\u6307\u4ee4\uff0c\u5219\u81ea\u5df1\u7ed9\u81ea\u5df1\u4e00\u4e2a\u4e2d\u65ad\u53f7 0x06\uff0c\u8fd9\u4e2a\u4e2d\u65ad\u53f7\u662f Intel \u7684 CPU \u63d0\u524d\u5c31\u89c4\u5b9a\u597d\u5199\u6b7b\u4e86\u7684\u786c\u5e03\u7ebf\u903b\u8f91 int \u6307\u4ee4(\u6bd4\u5982\u5927\u540d\u9f0e\u9f0e\u7684 int 0x80 \u6307\u4ee4) \u518d\u5f80\u540e\uff0cCPU \u4ee5\u5404\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u6536\u5230\u7684\u8fd9\u4e9b 0x21 0x06 0x80\uff0c\u90fd\u4f1a\u4e00\u89c6\u540c\u4ec1\uff0c\u505a\u540c\u6837\u7684\u540e\u7eed\u5904\u7406\u6d41\u7a0b\uff0c\u6240\u4ee5\u4ece\u73b0\u5728\u5f00\u59cb\uff0c\u524d\u9762\u7684\u4e8b\u60c5\u5c31\u4e0d\u7528\u518d\u7ba1\u4e86\uff0c\u8fd9\u4e5f\u4f53\u73b0\u4e86\u5206\u5c42\u7684\u597d\u5904\u3002 \u5982\u4f55\u5904\u7406\u4e2d\u65ad\u4fe1\u53f7 \u5148\u7528\u4e00\u53e5\u4e0d\u592a\u51c6\u786e\u7684\u8bdd\u603b\u7ed3\uff0cCPU \u6536\u5230\u4e00\u4e2a\u4e2d\u65ad\u53f7 n \u540e\uff0c\u4f1a\u53bb \u4e2d\u65ad\u5411\u91cf\u8868 \u4e2d\u5bfb\u627e\u7b2c n \u4e2a \u4e2d\u65ad\u63cf\u8ff0\u7b26 \uff0c\u4ece \u4e2d\u65ad\u63cf\u8ff0\u7b26 \u4e2d\u627e\u5230 \u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f \u7684\u5730\u5740\uff0c\u7136\u540e\u8df3\u8fc7\u53bb\u6267\u884c\u3002 \u4ec0\u4e48\u662f\u4e2d\u65ad\u5411\u91cf\u8868 \u4e2d\u65ad\u5411\u91cf\u8868\u5c31\u662f\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868. \u662f\u4e00\u4e2a\u6570\u7ec4. \u5c31\u662f\u4e00\u4e2a\u5728\u5185\u5b58\u4e2d\u7684\u6570\u7ec4\u800c\u5df2\uff0c\u64cd\u4f5c\u7cfb\u7edf\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\uff0c\u6709\u5f88\u591a\u7ed3\u6784\u90fd\u79f0\u4e4b\u4e3a XXX \u8868\uff0c\u5176\u5b9e\u5c31\u662f\u4e2a\u6570\u7ec4\u7f62\u4e86\u3002 \u4ee5 linux-2.6.0 \u6e90\u7801\u4e3a\u4f8b\uff0c\u5c31\u5f88\u76f4\u89c2\u4e86\u3002 struct desc_struct idt_table[256] = { {0, 0}, }; \u4f60\u770b\uff0c\u662f\u4e00\u4e2a\u5927\u5c0f\u4e3a 256 \u7684\u6570\u7ec4\u3002 idt_table \u8fd9\u4e2a\u540d\u5b57\u5c31\u662f Interrupt Descriptor Table \uff0c\u9010\u5b57\u7ffb\u8bd1\u8fc7\u6765\u786e\u5b9e\u5c31\u662f\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868. \u4e2d\u65ad\u5411\u91cf\u8868\u91cc\uff0c\u5b58\u653e\u7684\u5c31\u662f \u4e2d\u65ad\u63cf\u8ff0\u7b26 , \u91cc\u9762\u5c31\u5b58\u6709\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u5730\u5740. \u7ec6\u8282\u5c31\u4e0d\u5c55\u5f00\u4e86. Linux \u5982\u4f55\u5f80\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\u91cc\u6dfb\u52a0\u6761\u76ee \u5728 Linux-2.6.0 \u5185\u6838\u6e90\u7801\u7684 traps.c \u6587\u4ef6\u4e2d\uff0c\u6709\u8fd9\u6837\u4e00\u6bb5\u4ee3\u7801\u3002 void __init trap_init(void) { set_trap_gate(0, &divide_error); ... set_trap_gate(6, &invalid_op); ... set_intr_gate(14, &page_fault); ... set_system_gate(0x80, &system_call); } \u4f60\u770b\uff0c\u6211\u4eec\u521a\u521a\u63d0\u5230\u7684 \u9664\u6cd5\u5f02\u5e38 \u3001 \u975e\u6cd5\u6307\u4ee4\u5f02\u5e38 \u3001 \u7f3a\u9875\u5f02\u5e38 \uff0c\u4ee5\u53ca\u4e4b\u540e\u53ef\u80fd\u901a\u8fc7 INT 0x80 \u89e6\u53d1\u7cfb\u7edf\u8c03\u7528\u7684\u4e2d\u65ad\u5904\u7406\u51fd\u6570 system_call\uff0c\u5c31\u662f\u8fd9\u6837\u88ab\u5199\u5230\u4e86\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\u91cc\u3002 CPU \u5982\u4f55\u627e\u5230\u4e2d\u65ad\u5411\u91cf\u8868 \u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\u5b58\u50a8\u5728\u5185\u5b58\u91cc. CPU \u63d0\u524d\u9884\u7559\u4e86\u4e00\u4e2a\u5bc4\u5b58\u5668\u53eb IDTR \u5bc4\u5b58\u5668 \uff0c\u8fd9\u91cc\u9762\u5b58\u653e\u7684\u5c31\u662f\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\u7684\u8d77\u59cb\u5730\u5740\uff0c\u4ee5\u53ca\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\u7684\u5927\u5c0f. \u64cd\u4f5c\u7cfb\u7edf\u7684\u4ee3\u7801\u53ef\u4ee5\u901a\u8fc7 LIDT \u6307\u4ee4 \uff0c\u5c06\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\u7684\u5730\u5740\u653e\u5728\u8fd9\u4e2a\u5bc4\u5b58\u5668\u91cc. \u786c\u4e2d\u65ad\u3001\u8f6f\u4e2d\u65ad\u7684\u533a\u522b \u4ec0\u4e48\u662f\u786c\u4e2d\u65ad? \u662f Intel CPU \u8fd9\u4e2a\u786c\u4ef6\u5b9e\u73b0\u7684\u4e2d\u65ad\u673a\u5236\uff0c\u6ce8\u610f\u8fd9\u91cc\u662f\u5b9e\u73b0\u673a\u5236\uff0c\u5e76\u4e0d\u662f\u89e6\u53d1\u673a\u5236\uff0c\u56e0\u4e3a\u89e6\u53d1\u53ef\u4ee5\u901a\u8fc7\u5916\u90e8\u786c\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8f6f\u4ef6\u7684 INT \u6307\u4ee4. \u4ec0\u4e48\u662f\u8f6f\u4e2d\u65ad? \u8f6f\u4e2d\u65ad\u662f\u7eaf\u7cb9\u7531\u8f6f\u4ef6\u5b9e\u73b0\u7684\u4e00\u79cd\u7c7b\u4f3c\u4e2d\u65ad\u7684\u673a\u5236\uff0c\u5b9e\u9645\u4e0a\u5b83\u5c31\u662f\u6a21\u4eff\u786c\u4ef6\uff0c\u5728\u5185\u5b58\u4e2d\u6709\u4e00\u4e2a\u5730\u65b9\u5b58\u50a8\u7740\u8f6f\u4e2d\u65ad\u7684\u6807\u5fd7\u4f4d\uff0c\u7136\u540e\u7531\u5185\u6838\u7684\u4e00\u4e2a\u7ebf\u7a0b\u4e0d\u65ad\u8f6e\u8be2\u8fd9\u4e9b\u6807\u5fd7\u4f4d\uff0c\u5982\u679c\u6709\u54ea\u4e2a\u6807\u5fd7\u4f4d\u6709\u6548\uff0c\u5219\u518d\u53bb\u53e6\u4e00\u4e2a\u5730\u65b9\u5bfb\u627e\u8fd9\u4e2a\u8f6f\u4e2d\u65ad\u5bf9\u5e94\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u3002 \u4e3a\u4ec0\u4e48\u8c03\u5ea6\u5668\u80fd\u591f\u4e00\u76f4\u8fd0\u884c \u65f6\u949f\u4e2d\u65ad \u65f6\u949f\u4e2d\u65ad Linux \u7684 0 \u53f7\u4e2d\u65ad\u662f\u4e00\u4e2a\u5b9a\u65f6\u5668\u4e2d\u65ad\u3002\u5728\u56fa\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u90fd\u53d1\u751f\u4e00\u6b21\u4e2d\u65ad\uff0c\u4e5f\u662f\u8bf4\u6bcf\u79d2\u53d1\u751f\u8be5\u4e2d\u65ad\u7684\u9891\u7387\u90fd\u662f\u56fa\u5b9a\u7684\u3002\u8be5\u9891\u7387\u662f\u5e38\u91cf HZ\uff0c\u8be5\u503c\u4e00\u822c\u662f\u5728 100 ~ 1000 \u4e4b\u95f4 , \u4e5f\u5c31\u662f\u6bcf ms \u4e00\u6b21\u6216\u8005\u6bcf 10ms \u4e00\u6b21. \u65f6\u949f\u4e2d\u65ad\u7684\u5468\u671f\uff0c\u6211\u4eec\u53eb\u505a \u6ef4\u7b54 \uff08tick\uff09. \u8be5\u4e2d\u65ad\u7684\u4f5c\u7528 \u5b9a\u65f6\u66f4\u65b0\u7cfb\u7edf\u65e5\u671f\u548c\u65f6\u95f4\uff0c\u4f7f\u7cfb\u7edf\u65f6\u95f4\u4e0d\u65ad\u5730\u5f97\u5230\u8df3\u8f6c\u3002 \u9700\u8981\u66f4\u65b0\u672c\u5730 CPU \u7edf\u8ba1\u6570, \u8c03\u7528 scheduler_tick \u9012\u51cf\u8fdb\u7a0b\u7684\u65f6\u95f4\u7247\uff0c\u82e5\u8fdb\u7a0b\u7684\u65f6\u95f4\u7247\u9012\u51cf\u5230 0\uff0c\u8fdb\u7a0b\u5219\u88ab\u8c03\u5ea6\u51fa\u53bb\u800c\u653e\u5f03 CPU \u4f7f\u7528\u6743\u3002 \u5982\u4f55\u5b9e\u73b0\u65f6\u949f\u4e2d\u65ad \u53ef\u7f16\u7a0b\u5b9a\u65f6/\u8ba1\u6570\u5668(8259A)\u4ea7\u751f\u7684\u8f93\u51fa\u8109\u51b2\uff0c\u8fd9\u4e2a\u8109\u51b2\u9001\u5165 CPU\uff0c\u5c31\u53ef\u4ee5\u5f15\u53d1\u4e00\u4e2a\u4e2d\u65ad\u8bf7\u6c42\u4fe1\u53f7\uff0c\u6211\u4eec\u5c31\u628a\u5b83\u53eb\u505a\u65f6\u949f\u4e2d\u65ad\u3002 \u65f6\u949f\u4e2d\u65ad \u662f\u7279\u522b\u91cd\u8981\u7684\u4e00\u4e2a\u4e2d\u65ad\uff0c\u56e0\u4e3a\u6574\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u7684\u6d3b\u52a8\u90fd\u53d7\u5230\u5b83\u7684\u6fc0\u52b1\u3002\u7cfb\u7edf\u5229\u7528\u65f6\u949f\u4e2d\u65ad\u7ef4\u6301\u7cfb\u7edf\u65f6\u95f4\u3001\u4fc3\u4f7f\u73af\u5883\u7684\u5207\u6362\uff0c\u4ee5\u4fdd\u8bc1\u6240\u6709\u8fdb\u7a0b\u5171\u4eab CPU\uff1b\u5229\u7528\u65f6\u949f\u4e2d\u65ad\u8fdb\u884c\u8bb0\u5e10\u3001\u76d1\u7763\u7cfb\u7edf\u5de5\u4f5c\u4ee5\u53ca\u786e\u5b9a\u672a\u6765\u7684\u8c03\u5ea6\u4f18\u5148\u7ea7\u7b49\u5de5\u4f5c\u3002\u53ef\u4ee5\u8bf4\uff0c\u201c\u65f6\u949f\u4e2d\u65ad\u201d\u662f\u6574\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u7684\u8109\u640f\u3002 \u7b80\u5355\u4e00\u4e9b\u56fe: \u8ba1\u7b97\u673a\u4e2d\u6709\u4e00\u4e2a\u8bbe\u5907\uff0c\u53eb\u5b9a\u65f6\u5668\uff0c\u51c6\u786e\u8bf4\u53eb\u53ef\u7f16\u7a0b\u5b9a\u65f6/\u8ba1\u6570\u5668\u3002 \u8fd9\u4e2a\u5b9a\u65f6\u5668 \u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u5c31\u4f1a\u5411 CPU \u53d1\u8d77\u4e00\u4e2a\u4e2d\u65ad\u4fe1\u53f7 \u3002 \u53d1\u8d77\u7684\u4e2d\u65ad\u53eb\u65f6\u949f\u4e2d\u65ad\uff0c\u5176\u4e2d\u65ad\u5411\u91cf\u53f7\u88ab\u8bbe\u7f6e\u4e3a\u4e86 0x20. Linux \u63d0\u524d\u8bbe\u7f6e\u597d\u4e86\u4e2d\u65ad\u5411\u91cf\u8868\u3002 schedule.c set_intr_gate(0x20, &timer_interrupt); \u8fd9\u6837\uff0c\u5f53\u65f6\u949f\u4e2d\u65ad\uff0c\u4e5f\u5c31\u662f 0x20 \u53f7\u4e2d\u65ad\u6765\u4e34\u65f6\uff0cCPU \u4f1a\u67e5\u627e\u4e2d\u65ad\u5411\u91cf\u8868\u4e2d 0x20 \u5904\u7684\u51fd\u6570\u5730\u5740\uff0c\u8fd9\u4e2a\u51fd\u6570\u5730\u5740\u5373\u4e2d\u65ad\u5904\u7406\u51fd\u6570\uff0c\u5e76\u8df3\u8f6c\u8fc7\u53bb\u6267\u884c. \u8fd9\u4e2a\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u5c31\u662f timer_interrupt\uff0c\u662f\u7528\u6c47\u7f16\u8bed\u8a00\u5199\u7684\u3002 system_call.s _timer_interrupt: ... // \u589e\u52a0\u7cfb\u7edf\u6ef4\u7b54\u6570 incl _jiffies ... // \u8c03\u7528\u51fd\u6570 do_timer call _do_timer ... \u8fd9\u4e2a\u51fd\u6570\u505a\u4e86\u4e24\u4ef6\u4e8b\uff0c\u4e00\u4e2a\u662f\u5c06\u7cfb\u7edf\u6ef4\u7b54\u6570\u8fd9\u4e2a\u53d8\u91cf jiffies \u52a0\u4e00\uff0c\u4e00\u4e2a\u662f\u8c03\u7528\u4e86\u53e6\u4e00\u4e2a\u51fd\u6570 do_timer\u3002do_timer \u51fd\u6570\u91cc\u9762, \u5c31\u4f1a\u8fdb\u884c\u4e00\u4e9b\u7edf\u8ba1\u5de5\u4f5c\u3001\u5e76\u4e14\u8fd0\u884c \u5468\u671f\u6027\u8c03\u5ea6\u5668 . \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8c03\u5ea6\u5668\u80fd\u591f\u4e00\u76f4\u8fd0\u884c\u7684\u539f\u56e0. \u590d\u6742\u4e00\u4e9b\u7684\u539f\u7406\u56fe \u591a\u6838 CPU \u60c5\u51b5\u4e0b\u7684\u65f6\u949f\u4e2d\u65ad \u5728\u5355\u5904\u7406\u5668\u7cfb\u7edf\u4e2d\uff0c\u6bcf\u4e2a tick \u53ea\u53d1\u751f\u4e00\u6b21\u65f6\u949f\u4e2d\u65ad\u3002\u5728\u5bf9\u5e94\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u4e2d\u5b8c\u6210\u66f4\u65b0\u7cfb\u7edf\u65f6\u95f4\u3001\u7edf\u8ba1\u3001\u5b9a\u65f6\u5668\u3001\u7b49\u5168\u90e8\u529f\u80fd\uff1b \u800c\u5728\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e0b\uff0c\u65f6\u949f\u4e2d\u65ad\u5b9e\u9645\u4e0a\u662f\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff1a 1\u3001\u5168\u5c40\u65f6\u949f\u4e2d\u65ad\uff0c\u7cfb\u7edf\u4e2d\u6bcf\u4e2a tick \u53ea\u53d1\u751f\u4e00\u6b21\u3002\u5bf9\u5e94\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7528\u4e8e\u66f4\u65b0\u7cfb\u7edf\u65f6\u95f4\u548c\u7edf\u8ba1\u7cfb\u7edf\u8d1f\u8f7d\uff1b 2\u3001\u672c\u5730\u65f6\u949f\u4e2d\u65ad\uff0c\u7cfb\u7edf\u4e2d\u6bcf\u4e2a tick \u5728\u6bcf\u4e2a CPU \u4e0a\u53d1\u751f\u4e00\u6b21\u3002\u5bf9\u5e94\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7528\u4e8e\u7edf\u8ba1\u5bf9\u5e94 CPU \u548c\u8fd0\u884c\u4e8e\u8be5 CPU \u4e0a\u7684\u8fdb\u7a0b\u7684\u65f6\u95f4\uff0c\u4ee5\u53ca\u89e6\u53d1\u5bf9\u5e94 CPU \u4e0a\u7684\u5b9a\u65f6\u5668\uff1b \u4e8e\u662f\uff0c\u5728\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e0b\uff0c\u6bcf\u4e2a tick\uff0c\u6bcf\u4e2a CPU \u8981\u5904\u7406\u4e00\u6b21\u672c\u5730\u65f6\u949f\u4e2d\u65ad\uff1b\u53e6\u5916\uff0c\u5176\u4e2d\u4e00\u4e2a CPU \u8fd8\u8981\u5904\u7406\u4e00\u6b21\u5168\u5c40\u65f6\u949f\u4e2d\u65ad\u3002 \u7f3a\u9875\u4e2d\u65ad \u9875\u7f3a\u5931\uff08\u82f1\u8bed\uff1aPage fault\uff0c\u53c8\u540d\u786c\u9519\u8bef\u3001\u786c\u4e2d\u65ad\u3001\u5206\u9875\u9519\u8bef\u3001\u5bfb\u9875\u7f3a\u5931\u3001\u7f3a\u9875\u4e2d\u65ad\u3001\u9875\u6545\u969c\u7b49\uff09\u6307\u7684\u662f\u5f53\u8f6f\u4ef6\u8bd5\u56fe\u8bbf\u95ee\u5df2\u6620\u5c04\u5728\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e2d\uff0c\u4f46\u662f\u5e76\u672a\u88ab\u52a0\u8f7d\u5728\u7269\u7406\u5185\u5b58\u4e2d\u7684\u4e00\u4e2a\u5206\u9875(struct page)\u65f6\uff0c\u7531\u4e2d\u592e\u5904\u7406\u5668\u7684 \u5185\u5b58\u7ba1\u7406\u5355\u5143(MMU) \u6240\u53d1\u51fa\u7684\u4e2d\u65ad. \u5982\u4f55\u89c2\u5bdf\u7f3a\u9875\u4e2d\u65ad\u7684\u6b21\u6570 \u7528 ps -o majflt,minflt -C program \u547d\u4ee4\u67e5\u770b\u3002 majflt \u4ee3\u8868 major fault ,\u4e2d\u6587\u540d\u53eb\u5927\u9519\u8bef; minflt \u4ee3\u8868 minor fault ,\u4e2d\u6587\u540d\u53eb\u5c0f\u9519\u8bef\u3002 \u8fd9\u4e24\u4e2a\u6570\u503c\u8868\u793a\u4e00\u4e2a\u8fdb\u7a0b\u81ea\u542f\u52a8\u4ee5\u6765\u6240\u53d1\u751f\u7684\u7f3a\u9875\u4e2d\u65ad\u7684\u6b21\u6570\u3002 \u5f53\u4e00\u4e2a\u8fdb\u7a0b\u53d1\u751f\u7f3a\u9875\u4e2d\u65ad\u7684\u65f6\u5019\uff0c\u8fdb\u7a0b\u4f1a\u9677\u5165\u5185\u6838\u6001\uff0c\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a 1\u3001\u68c0\u67e5\u8981\u8bbf\u95ee\u7684\u865a\u62df\u5730\u5740\u662f\u5426\u5408\u6cd5 2\u3001\u67e5\u627e/\u5206\u914d\u4e00\u4e2a\u7269\u7406\u9875 3\u3001\u586b\u5145\u7269\u7406\u9875\u5185\u5bb9\uff08\u8bfb\u53d6\u78c1\u76d8\uff0c\u6216\u8005\u76f4\u63a5\u7f6e 0\uff0c\u6216\u8005\u5565\u4e5f\u4e0d\u5e72\uff09 4\u3001\u5efa\u7acb\u6620\u5c04\u5173\u7cfb\uff08\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\uff09 5\u3001\u91cd\u65b0\u6267\u884c\u53d1\u751f\u7f3a\u9875\u4e2d\u65ad\u7684\u90a3\u6761\u6307\u4ee4 \u5982\u679c\u7b2c 3 \u6b65\uff0c\u9700\u8981\u8bfb\u53d6\u78c1\u76d8\uff0c\u90a3\u4e48\u8fd9\u6b21\u7f3a\u9875\u4e2d\u65ad\u5c31\u662f majflt \uff0c\u5426\u5219\u5c31\u662f minflt . \u4e2d\u65ad\u7684\u4e0a\u534a\u90e8\u548c\u4e0b\u534a\u90e8 \u4e0a\u534a\u90e8 \u662f \u5728\u67d0\u4e00\u4e2a IRQ \u53f7\u5b8c\u5168\u7981\u6b62\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u7684 1 \u6bd4\u5982\u952e\u76d8\u4e2d\u65ad\uff0c\u6240\u6709 CPU \u6838\u4e0a\u90fd\u88ab\u7981\u6b62\u4e86\uff0c\u5728\u67d0\u4e00\u4e2a CPU \u4e0a\u8fd0\u884c\u8be5\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u3002 2 \u4e2d\u65ad\u4e0d\u4f1a\u4e22\uff0c\u4e2d\u65ad\u4fe1\u53f7\u7531\u786c\u4ef6\u53d1\u8d77\uff0c\u4f20\u8f93\u5230\u4e2d\u65ad\u63a7\u5236\u5668\uff088295A\uff09\uff0c\u7531\u4e2d\u65ad\u63a7\u5236\u5668\u4f20\u7ed9 CPU \uff08\u5f53\u7136\u522b\u7684\u4e2d\u65ad\u53f7\uff0c\u4f8b\u5982\u7f51\u5361\u4e2d\u65ad\uff0c\u53ef\u4ee5\u6253\u65ad\u952e\u76d8\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\uff09 \u4e0a\u534a\u90e8\u6838\u5fc3\u662f do_irq() \u51fd\u6570,\u6bcf\u6b21\u8c03\u7528 do_irq() \u51fd\u6570\u65f6\uff0c\u4f20\u5165\u4e86 CPU \u5f53\u524d\u5bc4\u5b58\u5668\u7684\u72b6\u6001. unsigned do_IRQ(struct pt_regs regs)","title":"\u7b2c\u4e09\u7bc7 \u786c\u4e2d\u65ad"},{"location":"chapter_4/3_interrupt_one/#_1","text":"\u672c\u7bc7\u6587\u6863\u603b\u7ed3\u548c\u68b3\u7406 \u786c\u4e2d\u65ad \u65f6\u949f\u4e2d\u65ad(0 \u53f7\u4e2d\u65ad) \u7f3a\u9875\u4e2d\u65ad","title":"\u6982\u8ff0"},{"location":"chapter_4/3_interrupt_one/#_2","text":"\u6574\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u5c31\u662f\u4e00\u4e2a\u4e2d\u65ad\u9a71\u52a8\u7684\u6b7b\u5faa\u73af\uff0c\u64cd\u4f5c\u7cfb\u7edf\u539f\u7406\u5982\u679c\u7528\u4e00\u884c\u4ee3\u7801\u89e3\u91ca\uff0c\u4e0b\u9762\u8fd9\u6837\u518d\u5408\u9002\u4e0d\u8fc7\u4e86\u3002 while(true) { doNothing(); } \u5176\u4ed6\u6240\u6709\u4e8b\u60c5\u90fd\u662f\u7531\u64cd\u4f5c\u7cfb\u7edf\u63d0\u524d\u6ce8\u518c\u7684\u4e2d\u65ad\u673a\u5236\u548c\u5176\u5bf9\u5e94\u7684\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u5b8c\u6210\uff0c\u6211\u4eec\u70b9\u51fb\u4e00\u4e0b\u9f20\u6807\uff0c\u6572\u51fb\u4e00\u4e0b\u952e\u76d8\uff0c\u6267\u884c\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u90fd\u662f\u7528\u4e2d\u65ad\u7684\u65b9\u5f0f\u6765\u901a\u77e5\u64cd\u4f5c\u7cfb\u7edf\u5e2e\u6211\u4eec\u5904\u7406\u8fd9\u4e9b\u4e8b\u4ef6\uff0c\u5f53\u6ca1\u6709\u4efb\u4f55\u9700\u8981\u64cd\u4f5c\u7cfb\u7edf\u5904\u7406\u7684\u4e8b\u4ef6\u65f6\uff0c\u5b83\u5c31\u4e56\u4e56\u505c\u5728\u6b7b\u5faa\u73af\u91cc\u4e0d\u51fa\u6765\u3002","title":"\u64cd\u4f5c\u7cfb\u7edf\u7684\u672c\u8d28"},{"location":"chapter_4/3_interrupt_one/#_3","text":"\u4e2d\u65ad\u53ef\u4ee5\u5206\u4e3a\u4e2d\u65ad\u548c\u5f02\u5e38, \u5f02\u5e38\u53c8\u53ef\u4ee5\u5206\u4e3a\u6545\u969c\u3001\u9677\u9631\u3001\u4e2d\u6b62. CPU \u63d0\u4f9b\u4e86\u4e24\u79cd\u4e2d\u65ad\u7a0b\u5e8f\u6267\u884c\u7684\u673a\u5236\uff0c\u4e2d\u65ad\u548c\u5f02\u5e38 \u3002\u7b2c\u4e00\u4e2a\u4e2d\u65ad\u662f\u4e2a\u52a8\u8bcd\uff0c\u7b2c\u4e8c\u4e2a\u4e2d\u65ad\u624d\u662f\u771f\u6b63\u7684\u673a\u5236\u79cd\u7c7b\u3002 An interrupt is an asynchronous event that is typically triggered by an I/O device. \u5148\u8bf4\u7b2c\u4e00\u4e2a\u673a\u5236\u4e2d\u65ad\uff08interrupt\uff09\uff0c\u4e2d\u65ad\u662f\u4e00\u4e2a\u5f02\u6b65\u4e8b\u4ef6\uff0c\u901a\u5e38\u7531 IO \u8bbe\u5907\u89e6\u53d1\u3002\u6bd4\u5982\u70b9\u51fb\u4e00\u4e0b\u9f20\u6807\u3001\u6572\u51fb\u4e00\u4e0b\u952e\u76d8\u7b49\u3002 An exception is a synchronous event that is generated when the processor detects one or more predefined conditions while executing an instruction. \u518d\u8bf4\u7b2c\u4e8c\u4e2a\u673a\u5236\u5f02\u5e38\uff08exception\uff09\uff0c\u5f02\u5e38\u662f\u4e00\u4e2a\u540c\u6b65\u4e8b\u4ef6\uff0c\u662f CPU \u5728\u6267\u884c\u6307\u4ee4\u65f6\u68c0\u6d4b\u5230\u7684\u53cd\u5e38\u6761\u4ef6\u3002\u6bd4\u5982\u9664\u6cd5\u5f02\u5e38\u3001\u9519\u8bef\u6307\u4ee4\u5f02\u5e38\uff0c\u7f3a\u9875\u5f02\u5e38\u7b49\u3002 \u8fd9\u4e24\u4e2a\u673a\u5236\uff0c\u6b8a\u9014\u540c\u5f52\uff0c\u90fd\u662f\u8ba9 CPU \u6536\u5230\u4e00\u4e2a\u4e2d\u65ad\u53f7\uff0c\u81f3\u4e8e CPU \u6536\u5230\u8fd9\u4e2a\u4e2d\u65ad\u53f7\u4e4b\u540e\u5e72\u561b\uff0c\u6211\u4eec\u6682\u4e14\u4e0d\u7ba1\u3002","title":"\u4e2d\u65ad\u7684\u5206\u7c7b"},{"location":"chapter_4/3_interrupt_one/#cpu-3","text":"\u4e2d\u65ad(interrupt), \u662f\u901a\u8fc7 \u53ef\u7f16\u7a0b\u4e2d\u65ad\u63a7\u5236\u5668 \u53d1\u9001\u7ed9 CPU \u7684. \u6bd4\u5982\u6309\u4e0b\u952e\u76d8\u7684\u4e00\u4e2a\u6309\u952e\uff0c\u6700\u7ec8\u4f1a\u7ed9\u5230 CPU \u4e00\u4e2a 0x21 \u4e2d\u65ad\u53f7. \u5f02\u5e38(exception), \u662f CPU \u81ea\u5df1\u7ed9\u81ea\u5df1\u53d1\u7684\u4fe1\u53f7. \u6bd4\u5982 CPU \u6267\u884c\u5230\u4e86\u4e00\u4e2a\u65e0\u6548\u7684\u6307\u4ee4\uff0c\u5219\u81ea\u5df1\u7ed9\u81ea\u5df1\u4e00\u4e2a\u4e2d\u65ad\u53f7 0x06\uff0c\u8fd9\u4e2a\u4e2d\u65ad\u53f7\u662f Intel \u7684 CPU \u63d0\u524d\u5c31\u89c4\u5b9a\u597d\u5199\u6b7b\u4e86\u7684\u786c\u5e03\u7ebf\u903b\u8f91 int \u6307\u4ee4(\u6bd4\u5982\u5927\u540d\u9f0e\u9f0e\u7684 int 0x80 \u6307\u4ee4) \u518d\u5f80\u540e\uff0cCPU \u4ee5\u5404\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u6536\u5230\u7684\u8fd9\u4e9b 0x21 0x06 0x80\uff0c\u90fd\u4f1a\u4e00\u89c6\u540c\u4ec1\uff0c\u505a\u540c\u6837\u7684\u540e\u7eed\u5904\u7406\u6d41\u7a0b\uff0c\u6240\u4ee5\u4ece\u73b0\u5728\u5f00\u59cb\uff0c\u524d\u9762\u7684\u4e8b\u60c5\u5c31\u4e0d\u7528\u518d\u7ba1\u4e86\uff0c\u8fd9\u4e5f\u4f53\u73b0\u4e86\u5206\u5c42\u7684\u597d\u5904\u3002","title":"\u4e2d\u65ad\u4fe1\u53f7\u4f20\u9012\u5230 CPU \u7684 3 \u79cd\u65b9\u5f0f."},{"location":"chapter_4/3_interrupt_one/#_4","text":"\u5148\u7528\u4e00\u53e5\u4e0d\u592a\u51c6\u786e\u7684\u8bdd\u603b\u7ed3\uff0cCPU \u6536\u5230\u4e00\u4e2a\u4e2d\u65ad\u53f7 n \u540e\uff0c\u4f1a\u53bb \u4e2d\u65ad\u5411\u91cf\u8868 \u4e2d\u5bfb\u627e\u7b2c n \u4e2a \u4e2d\u65ad\u63cf\u8ff0\u7b26 \uff0c\u4ece \u4e2d\u65ad\u63cf\u8ff0\u7b26 \u4e2d\u627e\u5230 \u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f \u7684\u5730\u5740\uff0c\u7136\u540e\u8df3\u8fc7\u53bb\u6267\u884c\u3002","title":"\u5982\u4f55\u5904\u7406\u4e2d\u65ad\u4fe1\u53f7"},{"location":"chapter_4/3_interrupt_one/#_5","text":"\u4e2d\u65ad\u5411\u91cf\u8868\u5c31\u662f\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868. \u662f\u4e00\u4e2a\u6570\u7ec4. \u5c31\u662f\u4e00\u4e2a\u5728\u5185\u5b58\u4e2d\u7684\u6570\u7ec4\u800c\u5df2\uff0c\u64cd\u4f5c\u7cfb\u7edf\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\uff0c\u6709\u5f88\u591a\u7ed3\u6784\u90fd\u79f0\u4e4b\u4e3a XXX \u8868\uff0c\u5176\u5b9e\u5c31\u662f\u4e2a\u6570\u7ec4\u7f62\u4e86\u3002 \u4ee5 linux-2.6.0 \u6e90\u7801\u4e3a\u4f8b\uff0c\u5c31\u5f88\u76f4\u89c2\u4e86\u3002 struct desc_struct idt_table[256] = { {0, 0}, }; \u4f60\u770b\uff0c\u662f\u4e00\u4e2a\u5927\u5c0f\u4e3a 256 \u7684\u6570\u7ec4\u3002 idt_table \u8fd9\u4e2a\u540d\u5b57\u5c31\u662f Interrupt Descriptor Table \uff0c\u9010\u5b57\u7ffb\u8bd1\u8fc7\u6765\u786e\u5b9e\u5c31\u662f\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868. \u4e2d\u65ad\u5411\u91cf\u8868\u91cc\uff0c\u5b58\u653e\u7684\u5c31\u662f \u4e2d\u65ad\u63cf\u8ff0\u7b26 , \u91cc\u9762\u5c31\u5b58\u6709\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u5730\u5740. \u7ec6\u8282\u5c31\u4e0d\u5c55\u5f00\u4e86.","title":"\u4ec0\u4e48\u662f\u4e2d\u65ad\u5411\u91cf\u8868"},{"location":"chapter_4/3_interrupt_one/#linux","text":"\u5728 Linux-2.6.0 \u5185\u6838\u6e90\u7801\u7684 traps.c \u6587\u4ef6\u4e2d\uff0c\u6709\u8fd9\u6837\u4e00\u6bb5\u4ee3\u7801\u3002 void __init trap_init(void) { set_trap_gate(0, &divide_error); ... set_trap_gate(6, &invalid_op); ... set_intr_gate(14, &page_fault); ... set_system_gate(0x80, &system_call); } \u4f60\u770b\uff0c\u6211\u4eec\u521a\u521a\u63d0\u5230\u7684 \u9664\u6cd5\u5f02\u5e38 \u3001 \u975e\u6cd5\u6307\u4ee4\u5f02\u5e38 \u3001 \u7f3a\u9875\u5f02\u5e38 \uff0c\u4ee5\u53ca\u4e4b\u540e\u53ef\u80fd\u901a\u8fc7 INT 0x80 \u89e6\u53d1\u7cfb\u7edf\u8c03\u7528\u7684\u4e2d\u65ad\u5904\u7406\u51fd\u6570 system_call\uff0c\u5c31\u662f\u8fd9\u6837\u88ab\u5199\u5230\u4e86\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\u91cc\u3002","title":"Linux \u5982\u4f55\u5f80\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\u91cc\u6dfb\u52a0\u6761\u76ee"},{"location":"chapter_4/3_interrupt_one/#cpu","text":"\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\u5b58\u50a8\u5728\u5185\u5b58\u91cc. CPU \u63d0\u524d\u9884\u7559\u4e86\u4e00\u4e2a\u5bc4\u5b58\u5668\u53eb IDTR \u5bc4\u5b58\u5668 \uff0c\u8fd9\u91cc\u9762\u5b58\u653e\u7684\u5c31\u662f\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\u7684\u8d77\u59cb\u5730\u5740\uff0c\u4ee5\u53ca\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\u7684\u5927\u5c0f. \u64cd\u4f5c\u7cfb\u7edf\u7684\u4ee3\u7801\u53ef\u4ee5\u901a\u8fc7 LIDT \u6307\u4ee4 \uff0c\u5c06\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\u7684\u5730\u5740\u653e\u5728\u8fd9\u4e2a\u5bc4\u5b58\u5668\u91cc.","title":"CPU \u5982\u4f55\u627e\u5230\u4e2d\u65ad\u5411\u91cf\u8868"},{"location":"chapter_4/3_interrupt_one/#_6","text":"\u4ec0\u4e48\u662f\u786c\u4e2d\u65ad? \u662f Intel CPU \u8fd9\u4e2a\u786c\u4ef6\u5b9e\u73b0\u7684\u4e2d\u65ad\u673a\u5236\uff0c\u6ce8\u610f\u8fd9\u91cc\u662f\u5b9e\u73b0\u673a\u5236\uff0c\u5e76\u4e0d\u662f\u89e6\u53d1\u673a\u5236\uff0c\u56e0\u4e3a\u89e6\u53d1\u53ef\u4ee5\u901a\u8fc7\u5916\u90e8\u786c\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8f6f\u4ef6\u7684 INT \u6307\u4ee4. \u4ec0\u4e48\u662f\u8f6f\u4e2d\u65ad? \u8f6f\u4e2d\u65ad\u662f\u7eaf\u7cb9\u7531\u8f6f\u4ef6\u5b9e\u73b0\u7684\u4e00\u79cd\u7c7b\u4f3c\u4e2d\u65ad\u7684\u673a\u5236\uff0c\u5b9e\u9645\u4e0a\u5b83\u5c31\u662f\u6a21\u4eff\u786c\u4ef6\uff0c\u5728\u5185\u5b58\u4e2d\u6709\u4e00\u4e2a\u5730\u65b9\u5b58\u50a8\u7740\u8f6f\u4e2d\u65ad\u7684\u6807\u5fd7\u4f4d\uff0c\u7136\u540e\u7531\u5185\u6838\u7684\u4e00\u4e2a\u7ebf\u7a0b\u4e0d\u65ad\u8f6e\u8be2\u8fd9\u4e9b\u6807\u5fd7\u4f4d\uff0c\u5982\u679c\u6709\u54ea\u4e2a\u6807\u5fd7\u4f4d\u6709\u6548\uff0c\u5219\u518d\u53bb\u53e6\u4e00\u4e2a\u5730\u65b9\u5bfb\u627e\u8fd9\u4e2a\u8f6f\u4e2d\u65ad\u5bf9\u5e94\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u3002","title":"\u786c\u4e2d\u65ad\u3001\u8f6f\u4e2d\u65ad\u7684\u533a\u522b"},{"location":"chapter_4/3_interrupt_one/#_7","text":"\u65f6\u949f\u4e2d\u65ad","title":"\u4e3a\u4ec0\u4e48\u8c03\u5ea6\u5668\u80fd\u591f\u4e00\u76f4\u8fd0\u884c"},{"location":"chapter_4/3_interrupt_one/#_8","text":"Linux \u7684 0 \u53f7\u4e2d\u65ad\u662f\u4e00\u4e2a\u5b9a\u65f6\u5668\u4e2d\u65ad\u3002\u5728\u56fa\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u90fd\u53d1\u751f\u4e00\u6b21\u4e2d\u65ad\uff0c\u4e5f\u662f\u8bf4\u6bcf\u79d2\u53d1\u751f\u8be5\u4e2d\u65ad\u7684\u9891\u7387\u90fd\u662f\u56fa\u5b9a\u7684\u3002\u8be5\u9891\u7387\u662f\u5e38\u91cf HZ\uff0c\u8be5\u503c\u4e00\u822c\u662f\u5728 100 ~ 1000 \u4e4b\u95f4 , \u4e5f\u5c31\u662f\u6bcf ms \u4e00\u6b21\u6216\u8005\u6bcf 10ms \u4e00\u6b21. \u65f6\u949f\u4e2d\u65ad\u7684\u5468\u671f\uff0c\u6211\u4eec\u53eb\u505a \u6ef4\u7b54 \uff08tick\uff09. \u8be5\u4e2d\u65ad\u7684\u4f5c\u7528 \u5b9a\u65f6\u66f4\u65b0\u7cfb\u7edf\u65e5\u671f\u548c\u65f6\u95f4\uff0c\u4f7f\u7cfb\u7edf\u65f6\u95f4\u4e0d\u65ad\u5730\u5f97\u5230\u8df3\u8f6c\u3002 \u9700\u8981\u66f4\u65b0\u672c\u5730 CPU \u7edf\u8ba1\u6570, \u8c03\u7528 scheduler_tick \u9012\u51cf\u8fdb\u7a0b\u7684\u65f6\u95f4\u7247\uff0c\u82e5\u8fdb\u7a0b\u7684\u65f6\u95f4\u7247\u9012\u51cf\u5230 0\uff0c\u8fdb\u7a0b\u5219\u88ab\u8c03\u5ea6\u51fa\u53bb\u800c\u653e\u5f03 CPU \u4f7f\u7528\u6743\u3002","title":"\u65f6\u949f\u4e2d\u65ad"},{"location":"chapter_4/3_interrupt_one/#_9","text":"\u53ef\u7f16\u7a0b\u5b9a\u65f6/\u8ba1\u6570\u5668(8259A)\u4ea7\u751f\u7684\u8f93\u51fa\u8109\u51b2\uff0c\u8fd9\u4e2a\u8109\u51b2\u9001\u5165 CPU\uff0c\u5c31\u53ef\u4ee5\u5f15\u53d1\u4e00\u4e2a\u4e2d\u65ad\u8bf7\u6c42\u4fe1\u53f7\uff0c\u6211\u4eec\u5c31\u628a\u5b83\u53eb\u505a\u65f6\u949f\u4e2d\u65ad\u3002 \u65f6\u949f\u4e2d\u65ad \u662f\u7279\u522b\u91cd\u8981\u7684\u4e00\u4e2a\u4e2d\u65ad\uff0c\u56e0\u4e3a\u6574\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u7684\u6d3b\u52a8\u90fd\u53d7\u5230\u5b83\u7684\u6fc0\u52b1\u3002\u7cfb\u7edf\u5229\u7528\u65f6\u949f\u4e2d\u65ad\u7ef4\u6301\u7cfb\u7edf\u65f6\u95f4\u3001\u4fc3\u4f7f\u73af\u5883\u7684\u5207\u6362\uff0c\u4ee5\u4fdd\u8bc1\u6240\u6709\u8fdb\u7a0b\u5171\u4eab CPU\uff1b\u5229\u7528\u65f6\u949f\u4e2d\u65ad\u8fdb\u884c\u8bb0\u5e10\u3001\u76d1\u7763\u7cfb\u7edf\u5de5\u4f5c\u4ee5\u53ca\u786e\u5b9a\u672a\u6765\u7684\u8c03\u5ea6\u4f18\u5148\u7ea7\u7b49\u5de5\u4f5c\u3002\u53ef\u4ee5\u8bf4\uff0c\u201c\u65f6\u949f\u4e2d\u65ad\u201d\u662f\u6574\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u7684\u8109\u640f\u3002","title":"\u5982\u4f55\u5b9e\u73b0\u65f6\u949f\u4e2d\u65ad"},{"location":"chapter_4/3_interrupt_one/#_10","text":"\u8ba1\u7b97\u673a\u4e2d\u6709\u4e00\u4e2a\u8bbe\u5907\uff0c\u53eb\u5b9a\u65f6\u5668\uff0c\u51c6\u786e\u8bf4\u53eb\u53ef\u7f16\u7a0b\u5b9a\u65f6/\u8ba1\u6570\u5668\u3002 \u8fd9\u4e2a\u5b9a\u65f6\u5668 \u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u5c31\u4f1a\u5411 CPU \u53d1\u8d77\u4e00\u4e2a\u4e2d\u65ad\u4fe1\u53f7 \u3002 \u53d1\u8d77\u7684\u4e2d\u65ad\u53eb\u65f6\u949f\u4e2d\u65ad\uff0c\u5176\u4e2d\u65ad\u5411\u91cf\u53f7\u88ab\u8bbe\u7f6e\u4e3a\u4e86 0x20. Linux \u63d0\u524d\u8bbe\u7f6e\u597d\u4e86\u4e2d\u65ad\u5411\u91cf\u8868\u3002 schedule.c set_intr_gate(0x20, &timer_interrupt); \u8fd9\u6837\uff0c\u5f53\u65f6\u949f\u4e2d\u65ad\uff0c\u4e5f\u5c31\u662f 0x20 \u53f7\u4e2d\u65ad\u6765\u4e34\u65f6\uff0cCPU \u4f1a\u67e5\u627e\u4e2d\u65ad\u5411\u91cf\u8868\u4e2d 0x20 \u5904\u7684\u51fd\u6570\u5730\u5740\uff0c\u8fd9\u4e2a\u51fd\u6570\u5730\u5740\u5373\u4e2d\u65ad\u5904\u7406\u51fd\u6570\uff0c\u5e76\u8df3\u8f6c\u8fc7\u53bb\u6267\u884c. \u8fd9\u4e2a\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u5c31\u662f timer_interrupt\uff0c\u662f\u7528\u6c47\u7f16\u8bed\u8a00\u5199\u7684\u3002 system_call.s _timer_interrupt: ... // \u589e\u52a0\u7cfb\u7edf\u6ef4\u7b54\u6570 incl _jiffies ... // \u8c03\u7528\u51fd\u6570 do_timer call _do_timer ... \u8fd9\u4e2a\u51fd\u6570\u505a\u4e86\u4e24\u4ef6\u4e8b\uff0c\u4e00\u4e2a\u662f\u5c06\u7cfb\u7edf\u6ef4\u7b54\u6570\u8fd9\u4e2a\u53d8\u91cf jiffies \u52a0\u4e00\uff0c\u4e00\u4e2a\u662f\u8c03\u7528\u4e86\u53e6\u4e00\u4e2a\u51fd\u6570 do_timer\u3002do_timer \u51fd\u6570\u91cc\u9762, \u5c31\u4f1a\u8fdb\u884c\u4e00\u4e9b\u7edf\u8ba1\u5de5\u4f5c\u3001\u5e76\u4e14\u8fd0\u884c \u5468\u671f\u6027\u8c03\u5ea6\u5668 . \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8c03\u5ea6\u5668\u80fd\u591f\u4e00\u76f4\u8fd0\u884c\u7684\u539f\u56e0.","title":"\u7b80\u5355\u4e00\u4e9b\u56fe:"},{"location":"chapter_4/3_interrupt_one/#_11","text":"","title":"\u590d\u6742\u4e00\u4e9b\u7684\u539f\u7406\u56fe"},{"location":"chapter_4/3_interrupt_one/#cpu_1","text":"\u5728\u5355\u5904\u7406\u5668\u7cfb\u7edf\u4e2d\uff0c\u6bcf\u4e2a tick \u53ea\u53d1\u751f\u4e00\u6b21\u65f6\u949f\u4e2d\u65ad\u3002\u5728\u5bf9\u5e94\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u4e2d\u5b8c\u6210\u66f4\u65b0\u7cfb\u7edf\u65f6\u95f4\u3001\u7edf\u8ba1\u3001\u5b9a\u65f6\u5668\u3001\u7b49\u5168\u90e8\u529f\u80fd\uff1b \u800c\u5728\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e0b\uff0c\u65f6\u949f\u4e2d\u65ad\u5b9e\u9645\u4e0a\u662f\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff1a 1\u3001\u5168\u5c40\u65f6\u949f\u4e2d\u65ad\uff0c\u7cfb\u7edf\u4e2d\u6bcf\u4e2a tick \u53ea\u53d1\u751f\u4e00\u6b21\u3002\u5bf9\u5e94\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7528\u4e8e\u66f4\u65b0\u7cfb\u7edf\u65f6\u95f4\u548c\u7edf\u8ba1\u7cfb\u7edf\u8d1f\u8f7d\uff1b 2\u3001\u672c\u5730\u65f6\u949f\u4e2d\u65ad\uff0c\u7cfb\u7edf\u4e2d\u6bcf\u4e2a tick \u5728\u6bcf\u4e2a CPU \u4e0a\u53d1\u751f\u4e00\u6b21\u3002\u5bf9\u5e94\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7528\u4e8e\u7edf\u8ba1\u5bf9\u5e94 CPU \u548c\u8fd0\u884c\u4e8e\u8be5 CPU \u4e0a\u7684\u8fdb\u7a0b\u7684\u65f6\u95f4\uff0c\u4ee5\u53ca\u89e6\u53d1\u5bf9\u5e94 CPU \u4e0a\u7684\u5b9a\u65f6\u5668\uff1b \u4e8e\u662f\uff0c\u5728\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e0b\uff0c\u6bcf\u4e2a tick\uff0c\u6bcf\u4e2a CPU \u8981\u5904\u7406\u4e00\u6b21\u672c\u5730\u65f6\u949f\u4e2d\u65ad\uff1b\u53e6\u5916\uff0c\u5176\u4e2d\u4e00\u4e2a CPU \u8fd8\u8981\u5904\u7406\u4e00\u6b21\u5168\u5c40\u65f6\u949f\u4e2d\u65ad\u3002","title":"\u591a\u6838 CPU \u60c5\u51b5\u4e0b\u7684\u65f6\u949f\u4e2d\u65ad"},{"location":"chapter_4/3_interrupt_one/#_12","text":"\u9875\u7f3a\u5931\uff08\u82f1\u8bed\uff1aPage fault\uff0c\u53c8\u540d\u786c\u9519\u8bef\u3001\u786c\u4e2d\u65ad\u3001\u5206\u9875\u9519\u8bef\u3001\u5bfb\u9875\u7f3a\u5931\u3001\u7f3a\u9875\u4e2d\u65ad\u3001\u9875\u6545\u969c\u7b49\uff09\u6307\u7684\u662f\u5f53\u8f6f\u4ef6\u8bd5\u56fe\u8bbf\u95ee\u5df2\u6620\u5c04\u5728\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e2d\uff0c\u4f46\u662f\u5e76\u672a\u88ab\u52a0\u8f7d\u5728\u7269\u7406\u5185\u5b58\u4e2d\u7684\u4e00\u4e2a\u5206\u9875(struct page)\u65f6\uff0c\u7531\u4e2d\u592e\u5904\u7406\u5668\u7684 \u5185\u5b58\u7ba1\u7406\u5355\u5143(MMU) \u6240\u53d1\u51fa\u7684\u4e2d\u65ad. \u5982\u4f55\u89c2\u5bdf\u7f3a\u9875\u4e2d\u65ad\u7684\u6b21\u6570 \u7528 ps -o majflt,minflt -C program \u547d\u4ee4\u67e5\u770b\u3002 majflt \u4ee3\u8868 major fault ,\u4e2d\u6587\u540d\u53eb\u5927\u9519\u8bef; minflt \u4ee3\u8868 minor fault ,\u4e2d\u6587\u540d\u53eb\u5c0f\u9519\u8bef\u3002 \u8fd9\u4e24\u4e2a\u6570\u503c\u8868\u793a\u4e00\u4e2a\u8fdb\u7a0b\u81ea\u542f\u52a8\u4ee5\u6765\u6240\u53d1\u751f\u7684\u7f3a\u9875\u4e2d\u65ad\u7684\u6b21\u6570\u3002 \u5f53\u4e00\u4e2a\u8fdb\u7a0b\u53d1\u751f\u7f3a\u9875\u4e2d\u65ad\u7684\u65f6\u5019\uff0c\u8fdb\u7a0b\u4f1a\u9677\u5165\u5185\u6838\u6001\uff0c\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a 1\u3001\u68c0\u67e5\u8981\u8bbf\u95ee\u7684\u865a\u62df\u5730\u5740\u662f\u5426\u5408\u6cd5 2\u3001\u67e5\u627e/\u5206\u914d\u4e00\u4e2a\u7269\u7406\u9875 3\u3001\u586b\u5145\u7269\u7406\u9875\u5185\u5bb9\uff08\u8bfb\u53d6\u78c1\u76d8\uff0c\u6216\u8005\u76f4\u63a5\u7f6e 0\uff0c\u6216\u8005\u5565\u4e5f\u4e0d\u5e72\uff09 4\u3001\u5efa\u7acb\u6620\u5c04\u5173\u7cfb\uff08\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\uff09 5\u3001\u91cd\u65b0\u6267\u884c\u53d1\u751f\u7f3a\u9875\u4e2d\u65ad\u7684\u90a3\u6761\u6307\u4ee4 \u5982\u679c\u7b2c 3 \u6b65\uff0c\u9700\u8981\u8bfb\u53d6\u78c1\u76d8\uff0c\u90a3\u4e48\u8fd9\u6b21\u7f3a\u9875\u4e2d\u65ad\u5c31\u662f majflt \uff0c\u5426\u5219\u5c31\u662f minflt .","title":"\u7f3a\u9875\u4e2d\u65ad"},{"location":"chapter_4/3_interrupt_one/#_13","text":"\u4e0a\u534a\u90e8 \u662f \u5728\u67d0\u4e00\u4e2a IRQ \u53f7\u5b8c\u5168\u7981\u6b62\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u7684 1 \u6bd4\u5982\u952e\u76d8\u4e2d\u65ad\uff0c\u6240\u6709 CPU \u6838\u4e0a\u90fd\u88ab\u7981\u6b62\u4e86\uff0c\u5728\u67d0\u4e00\u4e2a CPU \u4e0a\u8fd0\u884c\u8be5\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u3002 2 \u4e2d\u65ad\u4e0d\u4f1a\u4e22\uff0c\u4e2d\u65ad\u4fe1\u53f7\u7531\u786c\u4ef6\u53d1\u8d77\uff0c\u4f20\u8f93\u5230\u4e2d\u65ad\u63a7\u5236\u5668\uff088295A\uff09\uff0c\u7531\u4e2d\u65ad\u63a7\u5236\u5668\u4f20\u7ed9 CPU \uff08\u5f53\u7136\u522b\u7684\u4e2d\u65ad\u53f7\uff0c\u4f8b\u5982\u7f51\u5361\u4e2d\u65ad\uff0c\u53ef\u4ee5\u6253\u65ad\u952e\u76d8\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\uff09 \u4e0a\u534a\u90e8\u6838\u5fc3\u662f do_irq() \u51fd\u6570,\u6bcf\u6b21\u8c03\u7528 do_irq() \u51fd\u6570\u65f6\uff0c\u4f20\u5165\u4e86 CPU \u5f53\u524d\u5bc4\u5b58\u5668\u7684\u72b6\u6001. unsigned do_IRQ(struct pt_regs regs)","title":"\u4e2d\u65ad\u7684\u4e0a\u534a\u90e8\u548c\u4e0b\u534a\u90e8"},{"location":"chapter_4/4_process_thread_coroutine/","text":"\u6982\u8ff0 \u672c\u7bc7\u6587\u6863\u603b\u7ed3\u8fdb\u7a0b\u3001\u7ebf\u7a0b\u3001\u534f\u7a0b\u7684\u8054\u7cfb\u548c\u533a\u522b \u4e00 \u57fa\u7840\u77e5\u8bc6 1 \u5185\u6838\u4e2d\u7684\u7ed3\u6784\u4f53 Linux \u5185\u6838\u4e2d, \u8fdb\u7a0b\u548c\u7ebf\u7a0b\u90fd\u7528\u540c\u4e00\u4e2a\u7ed3\u6784\u4f53\u8868\u793a, \u5373 task_struct \u540c\u4e00\u4e2a\u8fdb\u7a0b\u5185, \u4e0d\u540c\u7ebf\u7a0b\u7684 task_struct \u4e0d\u540c, \u4f46\u662f\u5176 mm_struct \u76f8\u540c 2 \u8fdb\u7a0b\u72b6\u6001 \u5f53\u8fdb\u7a0b\u521b\u5efa\u540e\u8fdb\u5165 TASK_RUNNING \u72b6\u6001\uff0c\u8868\u793a\u53ef\u8fd0\u884c\u7b49\u5f85\u72b6\u6001\uff1b\u540e\u9762\u88ab CPU \u8c03\u5ea6\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u8fdb\u5165\u7761\u7720\u963b\u585e\u72b6\u6001\uff1b\u6ee1\u8db3\u6761\u4ef6\u540e\u88ab\u5524\u9192\u53c8\u8fdb\u5165\u53ef\u8fd0\u884c\u72b6\u6001\uff1b\u76f4\u5230\u6700\u540e exit \u7ec8\u6b62\u3002 \u4e8c \u533a\u522b 1 \u8fdb\u7a0b\u662f\u7cfb\u7edf\u8d44\u6e90(CPU \u8d44\u6e90)\u5206\u914d\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u7ebf\u7a0b\u662f\u72ec\u7acb\u8fd0\u884c\u548c\u72ec\u7acb\u8c03\u5ea6\u7684\u57fa\u672c\u5355\u4f4d\uff08CPU \u4e0a\u771f\u6b63\u8fd0\u884c\u7684\u662f\u7ebf\u7a0b), \u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u8c03\u5ea6\u5b9e\u4f53\u3002 2 \u8fdb\u7a0b\u62e5\u6709\u81ea\u5df1\u7684\u8d44\u6e90\u7a7a\u95f4\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u5305\u542b\u82e5\u5e72\u4e2a\u7ebf\u7a0b\uff0c\u7ebf\u7a0b\u4e0e CPU \u8d44\u6e90\u5206\u914d\u65e0\u5173\uff0c\u591a\u4e2a\u7ebf\u7a0b\u5171\u4eab\u540c\u4e00\u8fdb\u7a0b\u5185\u7684\u8d44\u6e90\u3002 3 \u7ebf\u7a0b\u7684\u8c03\u5ea6\u4e0e\u5207\u6362\u6bd4\u8fdb\u7a0b\u5feb\u5f88\u591a\u3002 \u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u4e0d\u540c\u8fdb\u7a0b\u5207\u6362\u9700\u8981\u5207\u6362\u5176 \u9875\u8868 , \u800c\u540c\u4e00\u4e2a\u8fdb\u7a0b\u5185\u4e0d\u540c\u7ebf\u7a0b\u5207\u6362\u65e0\u9700\u5207\u6362 \u9875\u8868 . \u9875\u8868 \u5728 Linux \u91cc\u9762\u5c31\u7528 mm_struct \u8868\u793a \u4e09 \u534f\u7a0b \u534f\u7a0b(coroutine), \u662f\u4e00\u79cd \u7528\u6237\u6001\u7684\u8f7b\u91cf\u7ea7\u7ebf\u7a0b ,\u600e\u4e48\u8c03\u5ea6\u7531\u7528\u6237\u7a7a\u95f4\u81ea\u4e3b\u63a7\u5236. \u5185\u6838\u611f\u77e5\u4e0d\u5230\u534f\u7a0b\u7684\u5b58\u5728, \u5bf9\u5185\u6838\u7a7a\u95f4\u6765\u8bf4\u5c31\u662f\u5355\u7528\u6237\u7ebf\u7a0b\u5728\u8fd0\u884c. \u534f\u7a0b\u662f\u4e00\u79cd\u5f02\u6b65 IO \u6280\u672f. 1 \u534f\u7a0b\u6bd4\u591a\u7ebf\u7a0b\u597d\u5728\u54ea\u5462\uff1f \u7ebf\u7a0b\u7684\u63a7\u5236\u6743\u5728\u64cd\u4f5c\u7cfb\u7edf\u624b\u4e2d\uff0c\u800c \u534f\u7a0b\u7684\u63a7\u5236\u6743\u5b8c\u5168\u638c\u63e1\u5728\u7528\u6237\u81ea\u5df1\u624b\u4e2d \uff0c\u56e0\u6b64\u5229\u7528\u534f\u7a0b\u53ef\u4ee5\u51cf\u5c11\u7a0b\u5e8f\u8fd0\u884c\u65f6\u7684\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u6709\u6548\u63d0\u9ad8\u7a0b\u5e8f\u8fd0\u884c\u6548\u7387\u3002 \u5efa\u7acb\u7ebf\u7a0b\u65f6\uff0c\u7cfb\u7edf\u9ed8\u8ba4\u5206\u914d\u7ed9\u7ebf\u7a0b\u7684 \u6808 \u5927\u5c0f\u662f 1 M\uff0c\u800c\u534f\u7a0b\u66f4\u8f7b\u91cf\uff0c\u63a5\u8fd1 1 K \u3002\u56e0\u6b64\u53ef\u4ee5\u5728\u76f8\u540c\u7684\u5185\u5b58\u4e2d\u5f00\u542f\u66f4\u591a\u7684\u534f\u7a0b\u3002 \u7531\u4e8e\u534f\u7a0b\u7684\u672c\u8d28\u4e0d\u662f\u591a\u7ebf\u7a0b\u800c\u662f\u5355\u7ebf\u7a0b\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u591a\u7ebf\u7a0b\u7684\u9501\u673a\u5236\u3002\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u4e5f\u4e0d\u5b58\u5728\u540c\u65f6\u5199\u53d8\u91cf\u800c\u5f15\u8d77\u7684\u51b2\u7a81\u3002\u5728\u534f\u7a0b\u4e2d\u63a7\u5236\u5171\u4eab\u8d44\u6e90\u4e0d\u9700\u8981\u52a0\u9501\uff0c\u53ea\u9700\u8981\u5224\u65ad\u72b6\u6001\u5373\u53ef\u3002\u6240\u4ee5\u534f\u7a0b\u7684\u6267\u884c\u6548\u7387\u6bd4\u591a\u7ebf\u7a0b\u9ad8\u5f88\u591a\uff0c\u540c\u65f6\u4e5f\u6709\u6548\u907f\u514d\u4e86\u591a\u7ebf\u7a0b\u4e2d\u7684\u7ade\u4e89\u5173\u7cfb\u3002 2 \u534f\u7a0b\u7684\u9002\u7528 & \u4e0d\u9002\u7528\u573a\u666f \u9002\u7528\u573a\u666f\uff1a\u534f\u7a0b\u9002\u7528\u4e8e\u88ab\u963b\u585e\u7684\uff0c\u4e14\u9700\u8981\u5927\u91cf\u5e76\u53d1\u7684\u573a\u666f\u3002 \u4e0d\u9002\u7528\u573a\u666f\uff1a\u534f\u7a0b\u4e0d\u9002\u7528\u4e8e\u5b58\u5728\u5927\u91cf CPU \u5bc6\u96c6\u578b\u7684\u573a\u666f\uff08\u56e0\u4e3a\u534f\u7a0b\u7684\u672c\u8d28\u662f\u5355\u7ebf\u7a0b\u6765\u56de\u5207\u6362, \u65e0\u6cd5\u5229\u7528\u591a\u6838 CPU \u8fdb\u884c\u5927\u91cf\u8ba1\u7b97), \u5982\u679c\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\uff0c\u8fd8\u662f\u5e94\u8be5\u4f7f\u7528\u5176\u4ed6\u624b\u6bb5\u53bb\u89e3\u51b3\u3002","title":"\u7b2c\u4e94\u7bc7 \u8fdb\u7a0b\u3001\u7ebf\u7a0b\u3001\u534f\u7a0b"},{"location":"chapter_4/4_process_thread_coroutine/#_1","text":"\u672c\u7bc7\u6587\u6863\u603b\u7ed3\u8fdb\u7a0b\u3001\u7ebf\u7a0b\u3001\u534f\u7a0b\u7684\u8054\u7cfb\u548c\u533a\u522b","title":"\u6982\u8ff0"},{"location":"chapter_4/4_process_thread_coroutine/#_2","text":"","title":"\u4e00 \u57fa\u7840\u77e5\u8bc6"},{"location":"chapter_4/4_process_thread_coroutine/#1","text":"Linux \u5185\u6838\u4e2d, \u8fdb\u7a0b\u548c\u7ebf\u7a0b\u90fd\u7528\u540c\u4e00\u4e2a\u7ed3\u6784\u4f53\u8868\u793a, \u5373 task_struct \u540c\u4e00\u4e2a\u8fdb\u7a0b\u5185, \u4e0d\u540c\u7ebf\u7a0b\u7684 task_struct \u4e0d\u540c, \u4f46\u662f\u5176 mm_struct \u76f8\u540c","title":"1 \u5185\u6838\u4e2d\u7684\u7ed3\u6784\u4f53"},{"location":"chapter_4/4_process_thread_coroutine/#2","text":"\u5f53\u8fdb\u7a0b\u521b\u5efa\u540e\u8fdb\u5165 TASK_RUNNING \u72b6\u6001\uff0c\u8868\u793a\u53ef\u8fd0\u884c\u7b49\u5f85\u72b6\u6001\uff1b\u540e\u9762\u88ab CPU \u8c03\u5ea6\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u8fdb\u5165\u7761\u7720\u963b\u585e\u72b6\u6001\uff1b\u6ee1\u8db3\u6761\u4ef6\u540e\u88ab\u5524\u9192\u53c8\u8fdb\u5165\u53ef\u8fd0\u884c\u72b6\u6001\uff1b\u76f4\u5230\u6700\u540e exit \u7ec8\u6b62\u3002","title":"2 \u8fdb\u7a0b\u72b6\u6001"},{"location":"chapter_4/4_process_thread_coroutine/#_3","text":"1 \u8fdb\u7a0b\u662f\u7cfb\u7edf\u8d44\u6e90(CPU \u8d44\u6e90)\u5206\u914d\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u7ebf\u7a0b\u662f\u72ec\u7acb\u8fd0\u884c\u548c\u72ec\u7acb\u8c03\u5ea6\u7684\u57fa\u672c\u5355\u4f4d\uff08CPU \u4e0a\u771f\u6b63\u8fd0\u884c\u7684\u662f\u7ebf\u7a0b), \u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u8c03\u5ea6\u5b9e\u4f53\u3002 2 \u8fdb\u7a0b\u62e5\u6709\u81ea\u5df1\u7684\u8d44\u6e90\u7a7a\u95f4\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u5305\u542b\u82e5\u5e72\u4e2a\u7ebf\u7a0b\uff0c\u7ebf\u7a0b\u4e0e CPU \u8d44\u6e90\u5206\u914d\u65e0\u5173\uff0c\u591a\u4e2a\u7ebf\u7a0b\u5171\u4eab\u540c\u4e00\u8fdb\u7a0b\u5185\u7684\u8d44\u6e90\u3002 3 \u7ebf\u7a0b\u7684\u8c03\u5ea6\u4e0e\u5207\u6362\u6bd4\u8fdb\u7a0b\u5feb\u5f88\u591a\u3002 \u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u4e0d\u540c\u8fdb\u7a0b\u5207\u6362\u9700\u8981\u5207\u6362\u5176 \u9875\u8868 , \u800c\u540c\u4e00\u4e2a\u8fdb\u7a0b\u5185\u4e0d\u540c\u7ebf\u7a0b\u5207\u6362\u65e0\u9700\u5207\u6362 \u9875\u8868 . \u9875\u8868 \u5728 Linux \u91cc\u9762\u5c31\u7528 mm_struct \u8868\u793a","title":"\u4e8c \u533a\u522b"},{"location":"chapter_4/4_process_thread_coroutine/#_4","text":"\u534f\u7a0b(coroutine), \u662f\u4e00\u79cd \u7528\u6237\u6001\u7684\u8f7b\u91cf\u7ea7\u7ebf\u7a0b ,\u600e\u4e48\u8c03\u5ea6\u7531\u7528\u6237\u7a7a\u95f4\u81ea\u4e3b\u63a7\u5236. \u5185\u6838\u611f\u77e5\u4e0d\u5230\u534f\u7a0b\u7684\u5b58\u5728, \u5bf9\u5185\u6838\u7a7a\u95f4\u6765\u8bf4\u5c31\u662f\u5355\u7528\u6237\u7ebf\u7a0b\u5728\u8fd0\u884c. \u534f\u7a0b\u662f\u4e00\u79cd\u5f02\u6b65 IO \u6280\u672f.","title":"\u4e09 \u534f\u7a0b"},{"location":"chapter_4/4_process_thread_coroutine/#1_1","text":"\u7ebf\u7a0b\u7684\u63a7\u5236\u6743\u5728\u64cd\u4f5c\u7cfb\u7edf\u624b\u4e2d\uff0c\u800c \u534f\u7a0b\u7684\u63a7\u5236\u6743\u5b8c\u5168\u638c\u63e1\u5728\u7528\u6237\u81ea\u5df1\u624b\u4e2d \uff0c\u56e0\u6b64\u5229\u7528\u534f\u7a0b\u53ef\u4ee5\u51cf\u5c11\u7a0b\u5e8f\u8fd0\u884c\u65f6\u7684\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u6709\u6548\u63d0\u9ad8\u7a0b\u5e8f\u8fd0\u884c\u6548\u7387\u3002 \u5efa\u7acb\u7ebf\u7a0b\u65f6\uff0c\u7cfb\u7edf\u9ed8\u8ba4\u5206\u914d\u7ed9\u7ebf\u7a0b\u7684 \u6808 \u5927\u5c0f\u662f 1 M\uff0c\u800c\u534f\u7a0b\u66f4\u8f7b\u91cf\uff0c\u63a5\u8fd1 1 K \u3002\u56e0\u6b64\u53ef\u4ee5\u5728\u76f8\u540c\u7684\u5185\u5b58\u4e2d\u5f00\u542f\u66f4\u591a\u7684\u534f\u7a0b\u3002 \u7531\u4e8e\u534f\u7a0b\u7684\u672c\u8d28\u4e0d\u662f\u591a\u7ebf\u7a0b\u800c\u662f\u5355\u7ebf\u7a0b\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u591a\u7ebf\u7a0b\u7684\u9501\u673a\u5236\u3002\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u4e5f\u4e0d\u5b58\u5728\u540c\u65f6\u5199\u53d8\u91cf\u800c\u5f15\u8d77\u7684\u51b2\u7a81\u3002\u5728\u534f\u7a0b\u4e2d\u63a7\u5236\u5171\u4eab\u8d44\u6e90\u4e0d\u9700\u8981\u52a0\u9501\uff0c\u53ea\u9700\u8981\u5224\u65ad\u72b6\u6001\u5373\u53ef\u3002\u6240\u4ee5\u534f\u7a0b\u7684\u6267\u884c\u6548\u7387\u6bd4\u591a\u7ebf\u7a0b\u9ad8\u5f88\u591a\uff0c\u540c\u65f6\u4e5f\u6709\u6548\u907f\u514d\u4e86\u591a\u7ebf\u7a0b\u4e2d\u7684\u7ade\u4e89\u5173\u7cfb\u3002","title":"1 \u534f\u7a0b\u6bd4\u591a\u7ebf\u7a0b\u597d\u5728\u54ea\u5462\uff1f"},{"location":"chapter_4/4_process_thread_coroutine/#2_1","text":"\u9002\u7528\u573a\u666f\uff1a\u534f\u7a0b\u9002\u7528\u4e8e\u88ab\u963b\u585e\u7684\uff0c\u4e14\u9700\u8981\u5927\u91cf\u5e76\u53d1\u7684\u573a\u666f\u3002 \u4e0d\u9002\u7528\u573a\u666f\uff1a\u534f\u7a0b\u4e0d\u9002\u7528\u4e8e\u5b58\u5728\u5927\u91cf CPU \u5bc6\u96c6\u578b\u7684\u573a\u666f\uff08\u56e0\u4e3a\u534f\u7a0b\u7684\u672c\u8d28\u662f\u5355\u7ebf\u7a0b\u6765\u56de\u5207\u6362, \u65e0\u6cd5\u5229\u7528\u591a\u6838 CPU \u8fdb\u884c\u5927\u91cf\u8ba1\u7b97), \u5982\u679c\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\uff0c\u8fd8\u662f\u5e94\u8be5\u4f7f\u7528\u5176\u4ed6\u624b\u6bb5\u53bb\u89e3\u51b3\u3002","title":"2 \u534f\u7a0b\u7684\u9002\u7528 &amp; \u4e0d\u9002\u7528\u573a\u666f"},{"location":"chapter_4/5_soft_irq/","text":"\u6982\u8ff0 \u672c\u7bc7\u6587\u6863\u603b\u7ed3 \u8f6f\u4e2d\u65ad\u76f8\u5173\u77e5\u8bc6 \u8f6f\u4e2d\u65ad\u548c\u786c\u4e2d\u65ad\u7684\u533a\u522b \u786c\u4e2d\u65ad \u5305\u62ec \u4e2d\u65ad \u3001 \u5f02\u5e38 \u4ee5\u53ca INT \u6307\u4ee4 \u8fd9\u79cd\u8f6f\u4ef6\u4e2d\u65ad\uff0c\u6574\u4e2a\u4e2d\u65ad\u673a\u5236\u662f\u7eaf\u786c\u4ef6\u5b9e\u73b0\u7684\u903b\u8f91\uff0c\u522b\u7ba1\u89e6\u53d1\u5b83\u7684\u662f\u8c01\uff0c\u6240\u4ee5\u901a\u901a\u53eb\u786c\u4e2d\u65ad\u3002 \u5b8f\u89c2\u5c42\u9762 \u8f6f\u4e2d\u65ad \u662f\u7eaf\u8f6f\u4ef6\u5b9e\u73b0\u7684\uff0c\u5b8f\u89c2\u6548\u679c\u770b\u4e0a\u53bb\u548c\u4e2d\u65ad\u5dee\u4e0d\u591a\u7684\u4e00\u79cd\u65b9\u5f0f\u3002 \u4ec0\u4e48\u53eb\u5b8f\u89c2\u6548\u679c\u5462\uff1f\u610f\u601d\u5c31\u662f\u8bf4\uff0c\u4e2d\u65ad\u5728\u5b8f\u89c2\u5c42\u9762\u770b\u6765\uff0c\u5c31\u662f \u6253\u65ad\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u7a0b\u5e8f\uff0c\u8f6c\u800c\u53bb\u6267\u884c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\uff0c\u6267\u884c\u5b8c\u4e4b\u540e\u518d\u8fd4\u56de\u539f\u7a0b\u5e8f \u3002 \u4ece\u8fd9\u4e2a\u5c42\u9762\u770b\uff0c\u786c\u4e2d\u65ad\u53ef\u4ee5\u8fbe\u5230\u8fd9\u4e2a\u6548\u679c\uff0c\u8f6f\u4e2d\u65ad\u4e5f\u53ef\u4ee5\u8fbe\u5230\u8fd9\u4e2a\u6548\u679c\uff0c\u6240\u4ee5\u8bf4\u5b8f\u89c2\u6548\u679c\u4e00\u6837\u3002 \u90a3\u5fae\u89c2\u5c42\u9762\u5462\uff1f\u5c31\u662f\u6211\u4eec\u9700\u8981\u4e86\u89e3\u7684\u539f\u7406\u5566\u3002 \u5fae\u89c2\u5c42\u9762 \u786c\u4e2d\u65ad\u7684\u5fae\u89c2\u5c42\u9762\uff0c\u5c31\u662f CPU \u5728\u6bcf\u4e00\u4e2a\u6307\u4ee4\u5468\u671f\u7684\u6700\u540e\uff0c\u90fd\u4f1a\u7559\u4e00\u4e2a CPU \u5468\u671f\u53bb\u67e5\u770b\u662f\u5426\u6709\u4e2d\u65ad\uff0c\u5982\u679c\u6709\uff0c\u5c31\u628a\u4e2d\u65ad\u53f7\u53d6\u51fa\uff0c\u53bb\u4e2d\u65ad\u5411\u91cf\u8868\u4e2d\u5bfb\u627e\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\uff0c\u7136\u540e\u8df3\u8fc7\u53bb\u3002 \u8f6f\u4e2d\u65ad\u7684\u5fae\u89c2\u5c42\u9762\uff0c\u7b80\u5355\u8bf4\u5c31\u662f\u6709\u4e00\u4e2a\u5355\u72ec\u7684\u5b88\u62a4\u8fdb\u7a0b\uff0c\u4e0d\u65ad\u8f6e\u8be2\u4e00\u7ec4 \u6807\u5fd7\u4f4d \uff0c\u5982\u679c\u54ea\u4e2a\u6807\u5fd7\u4f4d\u6709\u503c\u4e86\uff0c\u90a3\u53bb\u8fd9\u4e2a\u6807\u5fd7\u4f4d\u5bf9\u5e94\u7684 \u8f6f\u4e2d\u65ad\u5411\u91cf\u8868\u6570\u7ec4 \u7684\u76f8\u5e94\u4f4d\u7f6e\uff0c\u627e\u5230 \u8f6f\u4e2d\u65ad\u5904\u7406\u51fd\u6570 \uff0c\u7136\u540e\u8df3\u8fc7\u53bb\u3002 \u8f6f\u4e2d\u65ad\u5b9e\u73b0\u539f\u7406 \u65e2\u7136\u662f\u5185\u6838\u5b88\u62a4\u7ebf\u7a0b\u6765\u8fd0\u884c\u8f6f\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f, \u90a3\u4e48\u9996\u5148\u8981\u5f00\u542f\u5185\u6838\u7ebf\u7a0b\u3002 \u540d\u5b57\u901a\u5e38\u4e3a\u300cksoftirqd/CPU \u7f16\u53f7\u300d, \u6bd4\u5982 0 \u53f7 CPU \u5bf9\u5e94\u7684\u8f6f\u4e2d\u65ad\u5185\u6838\u7ebf\u7a0b\u7684\u540d\u5b57\u662f ksoftirqd/0 \u5f00\u542f\u5185\u6838\u8f6f\u4e2d\u65ad\u5904\u7406\u7684\u5b88\u62a4\u7ebf\u7a0b \u8fd9\u4e2a\u662f\u6211\u4e4b\u524d\u5728\u8bb2\u89e3\u81ea\u5236\u64cd\u4f5c\u7cfb\u7edf\u65f6\u7684\u56fe\uff0c\u653e\u5728\u8fd9\u91cc\u5b8c\u5168\u6ca1\u6709\u95ee\u9898\uff0c\u8fd9\u5c31\u662f Linux \u7684\u542f\u52a8\u8fc7\u7a0b\uff0c\u6587\u4ef6\u540d\u90fd\u4e00\u6837\u3002 \u552f\u4e00\u4e0d\u540c\u7684\u662f\uff0c\u6211\u4eec\u8fd9\u91cc\u5185\u6838\u4e3b\u65b9\u6cd5\u53eb kernel_start \uff0cLinux-2.6.0 \u91cc\u53eb start_kernel , \u6548\u679c\u90fd\u4e00\u6837. \u63a5\u4e0b\u6765\u770b\u8fd9\u4e2a\u5165\u53e3\u65b9\u6cd5\u3002 asmlinkage void __init start_kernel(void) { ... trap_init(); sched_init(); time_init(); ... rest_init(); } \u7701\u7565\u4e86\u5f88\u591a\u90e8\u5206\uff0c\u4f46\u53ef\u4ee5\u770b\u51fa\u8fd9\u4e2a\u65b9\u6cd5\u91cc\u5c31\u662f \u5404\u79cd\u521d\u59cb\u5316 \u3002 \u63a5\u7740\u770b rest_init() \u8fd9\u4e2a\u65b9\u6cd5\u3002 static void rest_init(void) { kernel_thread(init, NULL, CLONE_KERNEL); } static int init(void * unused) { do_pre_smp_initcalls(); } static void do_pre_smp_initcalls(void) { spawn_ksoftirqd(); } \u770b\u5230\u4e00\u4e2a spawn_ksoftirqd() \uff0c\u7ffb\u8bd1\u8fc7\u6765\u5c31\u662f spawn kernel soft irt daemon \uff0c\u5f00\u542f\u5185\u6838\u8f6f\u4e2d\u65ad\u5b88\u62a4\u8fdb\u7a0b\uff0c\u8fd9\u540d\u5b57\u592a\u76f4\u89c2\u4e86\uff0c\u90fd\u4e0d\u7528\u6211\u8bb2\u4e86\uff01 \u518d\u5f80\u91cc\u8ddf\u3002\u5f88\u957f\uff0c\u4f46\u6709\u7528\u7684\u4fe1\u606f\u5f88\u5c11\u3002 __init int spawn_ksoftirqd(void) { cpu_callback(&cpu_nfb, CPU_ONLINE, (void *)(long)smp_processor_id()); register_cpu_notifier(&cpu_nfb); return 0; } static int __devinit cpu_callback(...) { kernel_thread(ksoftirqd, hcpu, CLONE_KERNEL); } static int ksoftirqd(void * __bind_cpu) { for (;;) { while (local_softirq_pending()) { do_softirq(); cond_resched(); } } } asmlinkage void do_softirq(void) { h = softirq_vec; pending = local_softirq_pending(); do { if (pending & 1) { h->action(h); h++; pending >>= 1; } while (pending); } \u524d\u9762\u7684\u4e0d\u7528\u7ba1\uff0c\u76f4\u63a5\u770b\u6700\u540e\u4e00\u4e2a\u65b9\u6cd5\uff0c do_softirq() \uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5c55\u793a\u4e86\u8f6f\u4e2d\u65ad\u5904\u7406\u5b88\u62a4\u8fdb\u7a0b\u6240\u505a\u7684\u4e8b\u60c5\u7684\u7cbe\u9ad3\uff0c\u6211\u7ed9\u7ffb\u8bd1\u4e00\u4e0b\u3002 // \u8fd9\u5c31\u662f\u8f6f\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u8868\uff08\u8f6f\u4e2d\u65ad\u5411\u91cf\u8868\uff09 // \u548c\u786c\u4e2d\u65ad\u7684\u4e2d\u65ad\u5411\u91cf\u8868\u4e00\u6837 static struct softirq_action softirq_vec[32]; asmlinkage void do_softirq(void) { // h = \u8f6f\u4e2d\u65ad\u5411\u91cf\u8868\u8d77\u59cb\u5730\u5740\u6307\u9488 h = softirq_vec; // \u8fd9\u4e2a\u662f\u8f6f\u4e2d\u65ad\u6807\u5fd7\u4f4d\u4eec\uff0c\u4e00\u6b21\u6027\u62ff\u5230\u6240\u6709\u7684\u8f6f\u4e2d\u65ad\u6807\u5fd7\u4f4d pending = local_softirq_pending(); do { // \u6b64\u65f6\u7684\u8f6f\u4e2d\u65ad\u6807\u5fd7\u4f4d\u6709\u503c\uff08\u8bf4\u660e\u6709\u8f6f\u4e2d\u65ad\uff09 if (pending & 1) { // \u53bb\u5bf9\u5e94\u7684\u8f6f\u4e2d\u65ad\u5411\u91cf\u8868\u6267\u884c\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570 h->action(h); // \u8f6f\u4e2d\u65ad\u5411\u91cf\u8868\u6307\u9488\u5411\u540e\u79fb\u52a8 h++; // \u540c\u65f6\u8f6f\u4e2d\u65ad\u5904\u7406\u6807\u5fd7\u4f4d\u4e5f\u5411\u540e\u79fb\u52a8 pending >>= 1; } while (pending); } \u8fd9\u7ffb\u8bd1\u8fd8\u6ca1\u770b\u660e\u767d\uff0c\u90a3\u6211\u6765\u51e0\u4e2a\u56fe\u4f60\u5c31\u61c2\u4e86\u3002 \u9996\u5148 h \u4ee3\u8868 \u8f6f\u4e2d\u65ad\u5411\u91cf\u8868 softirq_vec \uff0c\u548c\u786c\u4e2d\u65ad\u7684\u4e2d\u65ad\u5411\u91cf\u8868\u7684\u5b58\u5728\u662f\u4e00\u4e2a\u76ee\u7684\uff0c\u5c31\u662f\u4e2a \u6570\u7ec4 \u561b\uff0c\u7136\u540e\u91cc\u9762\u7684\u5143\u7d20\u5b58\u50a8\u7740 \u8f6f\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u5730\u5740\u6307\u9488 \uff0c\u5728 action \u4e2d\u3002 \u7136\u540e pending \u4ee3\u8868\u8f6f \u4e2d\u65ad\u6807\u5fd7\u4f4d\uff08\u4eec\uff09 \u3002 \u8fd9\u91cc\u5b8c\u5168\u7531\u4e8e Linux \u91cc\u7528\u4e86\u597d\u591a C \u8bed\u8a00\u7684\u5b8f\u5b9a\u4e49\u641e\u5f97\u5f88\u7ed5\uff0c\u6211\u5148\u653e\u51fa\u6765\uff0c\u522b\u62c5\u5fc3\u3002 typedef struct { unsigned int __softirq_pending; unsigned long idle_timestamp; unsigned int __nmi_count; /* arch dependent */ unsigned int apic_timer_irqs; /* arch dependent */ } irq_cpustat_t; extern irq_cpustat_t irq_stat[]; /* defined in asm/hardirq.h */ #define __IRQ_STAT(cpu, member) (irq_stat[cpu].member) #define __IRQ_STAT(cpu, member) ((void)(cpu), irq_stat[0].member) #define softirq_pending(cpu) __IRQ_STAT((cpu), __softirq_pending) #define local_softirq_pending() softirq_pending(smp_processor_id()) pending = local_softirq_pending(); \u628a\u8fd9\u4e9b\u5b8f\u5b9a\u4e49\u90fd\u7ffb\u8bd1\u8fc7\u6765\uff0c\u518d\u53bb\u6389\u591a\u5904\u7406\u5668\u7684\u903b\u8f91\uff0c\u5c31\u5f53\u53ea\u6709\u4e00\u4e2a\u6838\u5fc3\uff0c\u5c31\u53d8\u5f97\u5f88\u7b80\u5355\u4e86\u3002 pending = irq_stat[0].__softirq_pending; \u5b83\u5c31\u662f\u4e2a int \u503c\u800c\u5df2\uff0c 32 \u4f4d \u3002 \u56de\u8fc7\u5934\u770b\u4e4b\u524d\u7684\uff0c pending\uff08\u8f6f\u4e2d\u65ad\u6807\u5fd7\u4f4d\uff09 \u4e0e h\uff08\u8f6f\u4e2d\u65ad\u5411\u91cf\u8868\uff09 \u7684\u5411\u540e\u79fb\u52a8\u7684\u6b65\u957f\u3002 // \u8f6f\u4e2d\u65ad\u5411\u91cf\u8868\u6307\u9488\u5411\u540e\u79fb\u52a8 h++; // \u540c\u65f6\u8f6f\u4e2d\u65ad\u5904\u7406\u6807\u5fd7\u4f4d\u4e5f\u5411\u540e\u79fb\u52a8 pending >>= 1; \u53ef\u4ee5\u770b\u51fa \u8f6f\u4e2d\u65ad\u6807\u5fd7\u4f4d\u7684\u4e00\u4f4d \u5bf9\u5e94\u7740 \u8f6f\u4e2d\u65ad\u5411\u91cf\u8868\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20 \uff0c\u8fd9\u5c31\u4e0d\u96be\u7406\u89e3\u4e3a\u4ec0\u4e48\u4e2d\u65ad\u5411\u91cf\u8868\u8fd9\u4e2a\u6570\u7ec4\u5927\u5c0f\u662f 32 \u4f4d \u4e86\u3002 \u597d\u4e86\uff0c\u8fd9\u6837\u8fd9\u4e2a\u5185\u6838\u8f6f\u4e2d\u65ad\u5904\u7406\u8fd9\u4e2a\u5b88\u62a4\u8fdb\u7a0b\u505a\u7684\u4e8b\uff0c\u5c31\u5b8c\u5168\u641e\u61c2\u4e86\u3002 \u5c31\u662f \u4e0d\u65ad\u904d\u5386 pending \u8fd9\u4e2a\u8f6f\u4e2d\u65ad\u6807\u5fd7\u4f4d\u7684\u6bcf\u4e00\u4f4d\uff0c\u5982\u679c\u662f 0 \u5c31\u5ffd\u7565\uff0c\u5982\u679c\u662f 1\uff0c\u90a3\u4ece\u4e0a\u9762\u7684 h \u8f6f\u4e2d\u65ad\u5411\u91cf\u8868\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u5143\u7d20\uff0c\u7136\u540e\u6267\u884c action \u65b9\u6cd5\uff0caction \u5c31\u5bf9\u5e94\u7740\u4e0d\u540c\u7684\u8f6f\u4e2d\u65ad\u5904\u7406\u51fd\u6570 \u3002 \u800c\u4e14\u4e5f\u80fd\u770b\u5230\uff0c\u5185\u6838\u8f6f\u4e2d\u65ad\u5904\u7406\u5b88\u62a4\u8fdb\u7a0b\uff0c\u5728 Linux \u542f\u52a8\u540e\uff0c\u4f1a\u81ea\u52a8\u8dd1\u8d77\u6765\uff0c\u90a3\u4e5f\u5c31\u4ee3\u8868\u4e86\uff0c\u8f6f\u4e2d\u65ad\u673a\u5236\u751f\u6548\u4e86\u3002 \u5982\u679c\u8ba9\u4f60\u4f7f\u7528\u8fd9\u4e2a\u5185\u6838\u529f\u80fd\uff0c\u505a\u8f6f\u4e2d\u65ad\u7684\u4e8b\u60c5\uff0c\u90a3\u4e0d\u96be\u60f3\u8c61\uff0c\u5f88\u7b80\u5355\u3002 \u7b2c\u4e00\u6b65\uff0c \u6ce8\u518c\u8f6f\u4e2d\u65ad\u5411\u91cf\u8868 \uff0c\u5176\u5b9e\u5c31\u662f\u628a\u8f6f\u4e2d\u65ad\u5411\u91cf\u8868\u7684\u6bcf\u4e2a action \u53d8\u91cf\u8d4b\u503c\uff0c\u76f8\u5f53\u4e8e\u786c\u4e2d\u65ad\u4e2d\u6ce8\u518c\u4e2d\u65ad\u5411\u91cf\u8868\u7684\u8fc7\u7a0b\u3002 \u7b2c\u4e8c\u6b65\uff0c \u89e6\u53d1\u4e00\u4e2a\u8f6f\u4e2d\u65ad \uff0c\u5176\u5b9e\u5c31\u662f\u4fee\u6539 pending \u7684\u67d0\u4e2a\u6807\u5fd7\u4f4d\uff0c\u89e6\u53d1\u4e00\u6b21\u8f6f\u4e2d\u65ad\uff0c\u76f8\u5f53\u4e8e\u786c\u4e2d\u65ad\u4e2d\u7531\u5916\u90e8\u786c\u4ef6\u3001\u5f02\u5e38\u3001\u6216\u8005 INT \u6307\u4ee4\u6765\u89e6\u53d1\u786c\u4e2d\u65ad\u4e00\u6837\u3002 \u800c\u5b9e\u9645\u4e0a\uff0cLinux \u5c31\u662f\u8fd9\u6837\u505a\u7684\uff0c\u548c\u6211\u4eec\u731c\u7684\u4e00\u6837\uff0c\u6211\u4eec\u4e00\u6b65\u6b65\u770b\u3002 \u6ce8\u518c\u4e2d\u65ad\u5411\u91cf\u8868 \u5c31\u662f\u7ed9 softirq_vec \u8fd9\u4e2a\u8f6f\u4e2d\u65ad\u5411\u91cf\u8868 \uff0c\u4e5f\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u91cc\u9762\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684 action \u9644\u4e0a\u503c\uff0c\u8d4b\u7684\u5c31\u662f\u8f6f\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u7684\u51fd\u6570\u5730\u5740\u3002 \u8fd9\u4ee3\u7801\u5f88\u5bb9\u6613\u5c31\u53ef\u4ee5\u60f3\u5230\uff0c\u592a\u597d\u5199\u4e86\uff0c\u5c31\u8fd9\u6837\u5457\u3002 softirq_vec[0].action = NULL; softirq_vec[1].action = run_timer_softirq; softirq_vec[2].action = net_tx_action; ... softirq_vec[31].action = xxx; \u6ca1\u9519\uff0c\u5c31\u662f\u8fd9\u6837\uff0c\u4e0d\u8981\u4ee5\u4e3a Linux \u6709\u5565\u795e\u5947\u7684\u64cd\u4f5c\uff0c\u4e5f\u662f\u5f97\u8fd9\u6837\u8001\u8001\u5b9e\u5b9e\u7ed9\u4ed6\u4eec\u8d4b\u503c\u3002 \u6bd4\u5982\uff0c \u7f51\u7edc\u5b50\u7cfb\u7edf\u7684\u521d\u59cb\u5316 \uff0c\u6709\u4e00\u6b65\u5c31\u9700\u8981 \u6ce8\u518c\u7f51\u7edc\u7684\u8f6f\u4e2d\u65ad\u5904\u7406\u51fd\u6570 \u3002 subsys_initcall(net_dev_init); static int __init net_dev_init(void) { ... // \u7f51\u7edc\u53d1\u5305\u7684\u5904\u7406\u51fd\u6570 open_softirq(NET_TX_SOFTIRQ, net_tx_action, NULL); // \u7f51\u7edc\u6536\u5305\u7684\u5904\u7406\u51fd\u6570 open_softirq(NET_RX_SOFTIRQ, net_rx_action, NULL); ... } void open_softirq(int nr, void (*action)(struct softirq_action*), void *data) { softirq_vec[nr].data = data; // \u7b80\u76f4\u5b8c\u5168\u4e00\u6837 softirq_vec[nr].action = action; } \u8fd9\u548c\u6211\u4eec\u5199\u7684\u4e0d\u80fd\u8bf4\u662f\u76f8\u4f3c\uff0c\u7b80\u76f4\u5b8c\u5168\u662f\u4e00\u6837\u5440\uff0c\u53ea\u662f\u591a\u5305\u88c5\u4e86\u4e00\u5c42\u51fd\u6570\u53eb open_softirq \u65b9\u4fbf\u8c03\u7528\u7f62\u4e86\u3002 NET_TX_SOFTIRQ \u8fd9\u4e9b\u662f\u679a\u4e3e\u503c\uff0c\u5177\u4f53\u770b\u8fd9\u4e9b\u679a\u4e3e\u4e5f\u4f1a\u53d1\u73b0 Linux-2.6.0 \u4e2d\u4e5f\u4e0d\u591a\u3002 enum { HI_SOFTIRQ=0, TIMER_SOFTIRQ, NET_TX_SOFTIRQ, NET_RX_SOFTIRQ, SCSI_SOFTIRQ, TASKLET_SOFTIRQ }; \u597d\u5947\u7ffb\u4e86\u4e0b Linux-5.11\uff0c\u53d1\u73b0\u4e5f\u4e0d\u591a enum { HI_SOFTIRQ=0, TIMER_SOFTIRQ, NET_TX_SOFTIRQ, NET_RX_SOFTIRQ, BLOCK_SOFTIRQ, IRQ_POLL_SOFTIRQ, TASKLET_SOFTIRQ, SCHED_SOFTIRQ, HRTIMER_SOFTIRQ, RCU_SOFTIRQ, NR_SOFTIRQS }; \u89e6\u53d1\u4e00\u6b21\u8f6f\u4e2d\u65ad \u540c\u4e0a\uff0c\u8fd9\u4ee3\u7801\u4e5f\u5f88\u5bb9\u6613\u5c31\u53ef\u4ee5\u60f3\u5230\uff0c\u5c31\u8fd9\u6837\u5457\u3002 \u4f60\u770b\uff0c\u8868\u793a\u8f6f\u4e2d\u65ad\u6807\u5fd7\u4f4d\u7684 p \u4e0d\u662f\u8fd9\u6837\u53d6\u503c\u7684\u4e48\u3002 pending = local_softirq_pending(); \u53d6\u51fa\u6765\u7684\u662f\u4e2a 32 \u4f4d\u7684 int \u503c\u3002 \u90a3\u53ea\u9700\u8981\u628a local_softirq_pending() \u5bf9\u5e94\u7684\u6807\u5fd7\u4f4d\u6539\u6210 1 \u5c31\u89e6\u53d1\u4e86\u8f6f\u4e2d\u65ad\u4e86\uff0c\u6bd4\u5982\u6211\u4eec\u60f3\u89e6\u53d1\u4e00\u4e2a 2 \u53f7\u8f6f\u4e2d\u65ad\uff0c\u5c31\u50cf\u8fd9\u6837\u3002 \u4ee3\u7801\u8fd9\u4e48\u5199\u5c31\u884c\u4e86\u3002 local_softirq_pending() |= 1UL << 2; \u800c Linux \u5c45\u7136\u4e5f\u662f\u8fd9\u4e48\u505a\u7684\uff0c\u6211\u4eec\u770b\u7f51\u7edc\u6570\u636e\u5305\u5230\u6765\u4e4b\u540e\uff0c\u6709\u4e00\u6bb5\u4ee3\u7801\u3002 #define __raise_softirq_irqoff(nr) \\ do { local_softirq_pending() |= 1UL << (nr); } while (0) static inline void __netif_rx_schedule(struct net_device *dev) { list_add_tail(&dev->poll_list, &__get_cpu_var(softnet_data).poll_list); // \u53d1\u51fa\u8f6f\u4e2d\u65ad __raise_softirq_irqoff(NET_RX_SOFTIRQ); } \u5982\u679c\u628a do while(0) \u8fd9\u79cd C \u8bed\u8a00\u5b8f\u5b9a\u4e49\u7684\u4e00\u79cd\u73a9\u6cd5\u53bb\u6389\uff0c\u5176\u5b9e\u5c31\u548c\u6211\u4eec\u7684\u5b8c\u5168\u4e00\u6837\u4e86\uff0c\u8fd9\u56de\u53ef\u771f\u7684\u662f\u5b8c\u5168\u4e00\u6837\u3002 static inline void __netif_rx_schedule(struct net_device *dev) { list_add_tail(&dev->poll_list, &__get_cpu_var(softnet_data).poll_list); // \u53d1\u51fa\u8f6f\u4e2d\u65ad local_softirq_pending() |= 1UL << (NET_RX_SOFTIRQ) } \u6240\u4ee5\u6211\u4e4b\u524d\u603b\u662f\u8bf4\uff0c\u5f53\u4f60\u771f\u7684\u53bb\u63a5\u89e6\u8fd9\u4e2a\u4e1c\u897f\u7684\u65f6\u5019\uff0c\u4e00\u4e2a\u4e2a\u7ec6\u8282\u9010\u6b65\u62e8\u5f00\u540e\uff0c\u4f1a\u53d1\u73b0\u4e00\u70b9\u4e5f\u4e0d\u96be\uff0c\u800c\u4e14\u90fd\u662f\u987a\u7406\u6210\u7ae0\uff0c\u548c\u6211\u4eec\u731c\u6d4b\u7684\u4e5f\u4e00\u6837\u3002 \u5c0f\u7ed3 \u8f6f\u4e2d\u65ad\u6ca1\u4ec0\u4e48\u795e\u5947\u7684\u9a9a\u64cd\u4f5c\uff0c \u5c31\u662f\u4e00\u7ec4\u4e00\u4f4d\u4e00\u4f4d\u7684\u8f6f\u4e2d\u65ad\u6807\u5fd7\u4f4d\uff0c\u5bf9\u5e94\u7740\u8f6f\u4e2d\u65ad\u5411\u91cf\u8868\u4e2d\u4e00\u4e2a\u4e00\u4e2a\u7684\u4e2d\u65ad\u5904\u7406\u51fd\u6570\uff0c\u7136\u540e\u6709\u4e2a\u5185\u6838\u5b88\u62a4\u8fdb\u7a0b\u4e0d\u65ad\u53bb\u5faa\u73af\u5224\u65ad\u8c03\u7528 \uff0c\u800c\u5df2\u3002 \u7136\u540e\uff0c\u7531\u5404\u4e2a\u5b50\u7cfb\u7edf\u8c03\u7528 open_softirq \u8d1f\u8d23\u628a\u8f6f\u4e2d\u65ad\u5411\u91cf\u8868\u9644\u4e0a\u503c\u3002 \u518d\u7531\u5404\u4e2a\u9700\u8981\u89e6\u53d1\u8f6f\u4e2d\u65ad\u7684\u5730\u65b9\u8c03\u7528 raise_softirq_irqoff \u4fee\u6539\u4e2d\u65ad\u6807\u5fd7\u4f4d\u7684\u503c\u3002 \u540e\u9762\u7684\u5de5\u4f5c\u5c31\u4ea4\u7ed9\u5185\u6838\u90a3\u4e2a\u8f6f\u4e2d\u65ad\u5b88\u62a4\u8fdb\u7a0b\uff0c\u53bb\u89e6\u53d1\u8fd9\u4e2a\u8f6f\u4e2d\u65ad\u4e86\uff0c\u5176\u5b9e\u5c31\u662f\u4e2a\u904d\u5386\u5e76\u67e5\u627e\u5bf9\u5e94\u51fd\u6570\u7684\u7b80\u5355\u8fc7\u7a0b\u3002 \u4e2d\u65ad\u7684\u4e0a\u534a\u90e8\u548c\u4e0b\u534a\u90e8\u8bf4\u660e \u4e2d\u65ad\u7684\u4e0a\u534a\u90e8\u662f\u5728\u5177\u4f53 irq \u53f7\u5b8c\u5168\u7981\u6b62\u7684\u72b6\u6001\u4e0b\u6267\u884c\u7684, \u4e0b\u534a\u90e8\u5219\u4e0d\u662f. \u4e0b\u534a\u90e8\u7531\u591a\u79cd\u5b9e\u73b0\u65b9\u5f0f, \u4f8b\u5982: \u8f6f\u4e2d\u65ad \u3001 tasklet \u3001 workqueue , \u53ea\u6709 workqueue \u662f\u5728\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u4e2d\u6267\u884c, \u53ef\u4ee5\u7761\u7720\u548c\u88ab\u91cd\u65b0\u8c03\u5ea6, \u800c\u8f6f\u4e2d\u65ad\u548c tasklet \u662f\u4e0d\u80fd\u7761\u7720\u7684, \u56e0\u4e3a\u4ed6\u662f\u5728\u4e2d\u65ad\u4e0a\u4e0b\u6587\u4e2d\u6267\u884c. \u4e0a\u534a\u90e8\u6838\u5fc3\u51fd\u6570\u662f do_irq() \u51fd\u6570,\u6bcf\u6b21\u8c03\u7528 do_irq() \u51fd\u6570\u65f6\uff0c\u4f20\u5165\u4e86 CPU \u5f53\u524d\u5bc4\u5b58\u5668\u7684\u72b6\u6001. unsigned do_IRQ(struct pt_regs regs) \u4e0b\u534a\u90e8\u8fd0\u884c\u65f6\uff0c\u5141\u8bb8\u786c\u4e2d\u65ad\uff08\u4f8b\u5982\u7f51\u5361\u4e0b\u534a\u90e8\u8fd0\u884c\u65f6\uff0c\u53c8\u5141\u8bb8\u5176\u4ed6\u786c\u4e2d\u65ad\u4e86\uff09 \u4e0a\u534a\u90e8\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u4e2d\uff0c\u89e6\u53d1\u4e86\u4e0b\u534a\u90e8\u7a0b\u5e8f. \u4e0b\u534a\u90e8\u7a0b\u5e8f\u90fd\u662f\u5728 do_softirq()\u51fd\u6570\u4e2d\u8fd0\u884c. \u90a3\u4e48\u89e6\u53d1\u540e\uff0c\u5177\u4f53\u4f55\u65f6\u8fd0\u884c\u5462\uff1f \u5728\u4e0a\u534a\u90e8\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u6216\u8005\u5728 ksoftirqd \u7ebf\u7a0b\u91cc \u5bf9\u4e8e\u786c\u4ef6\u9a71\u52a8\u7684\u7814\u53d1\u4eba\u5458\uff0c\u53ef\u4ee5\u7528 1 request_irq()\u51fd\u6570 \u2014> \u6ce8\u518c\u4e0a\u534a\u90e8\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f 2 \u53ef\u4ee5\u7528 open_irq()\u51fd\u6570 \u2014> \u6ce8\u518c\u4e0b\u534a\u90e8\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f \u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u4e0a\u90e8\u5206\u548c\u4e0b\u534a\u90e8\u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a \u4e0a\u534a\u90e8\u76f4\u63a5\u5904\u7406\u786c\u4ef6\u8bf7\u6c42\uff0c\u4e5f\u5c31\u662f\u786c\u4e2d\u65ad\uff0c\u4e3b\u8981\u662f\u8d1f\u8d23\u8017\u65f6\u77ed\u7684\u5de5\u4f5c\uff0c\u7279\u70b9\u662f\u5feb\u901f\u6267\u884c\uff1b \u4e0b\u534a\u90e8\u662f\u7531\u5185\u6838\u89e6\u53d1\uff0c\u4e5f\u5c31\u8bf4\u8f6f\u4e2d\u65ad\uff0c\u4e3b\u8981\u662f\u8d1f\u8d23\u4e0a\u534a\u90e8\u672a\u5b8c\u6210\u7684\u5de5\u4f5c\uff0c\u901a\u5e38\u90fd\u662f\u8017\u65f6\u6bd4\u8f83\u957f\u7684\u4e8b\u60c5\uff0c\u7279\u70b9\u662f\u5ef6\u8fdf\u6267\u884c\uff1b\u3002Linux \u4e2d\u7684\u8f6f\u4e2d\u65ad\u5305\u62ec\u7f51\u7edc\u6536\u53d1\u3001\u5b9a\u65f6\u3001\u8c03\u5ea6\u3001RCU \u9501\u7b49\u5404\u79cd\u7c7b\u578b\u3002 \u8f6f\u4e2d\u65ad\u6267\u884c\u7684\u65f6\u673a \u5728\u4e0b\u5217\u5730\u65b9\uff0c\u5f85\u5904\u7406\u7684\u8f6f\u4e2d\u65ad\u4f1a\u88ab\u68c0\u67e5\u548c\u6267\u884c\uff1a a. \u4ece\u4e00\u4e2a\u786c\u4ef6\u4e2d\u65ad\u4ee3\u7801\u5904\u8fd4\u56de\u65f6 b. \u5728 ksoftirqd \u5185\u6838\u7ebf\u7a0b\u4e2d c. \u5728\u90a3\u4e9b\u663e\u793a\u68c0\u67e5\u548c\u6267\u884c\u5f85\u5904\u7406\u7684\u8f6f\u4e2d\u65ad\u7684\u4ee3\u7801\u4e2d\uff0c\u5982\u7f51\u7edc\u5b50\u7cfb\u7edf\u4e2d \u8f6f\u4e2d\u65ad\u7684\u5e38\u7528\u4f18\u5316\u6280\u80fd 1 \u7cfb\u7edf\u91cc\u6709\u54ea\u4e9b\u8f6f\u4e2d\u65ad\uff1f \u5728 Linux \u7cfb\u7edf\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b /proc/softirqs \u7684 \u5185\u5bb9\u6765\u77e5\u6653\u300c\u8f6f\u4e2d\u65ad\u300d\u7684\u8fd0\u884c\u60c5\u51b5\uff0c\u4ee5\u53ca /proc/interrupts \u7684 \u5185\u5bb9\u6765\u77e5\u6653\u300c\u786c\u4e2d\u65ad\u300d\u7684\u8fd0\u884c\u60c5\u51b5\u3002 \u63a5\u4e0b\u6765\uff0c\u5c31\u6765\u7b80\u5355\u7684\u89e3\u6790\u4e0b /proc/softirqs \u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u5728\u6211\u670d\u52a1\u5668\u4e0a\u67e5\u770b\u5230\u7684\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a \u4f60\u53ef\u4ee5\u770b\u5230\uff0c\u6bcf\u4e00\u4e2a CPU \u90fd\u6709\u81ea\u5df1\u5bf9\u5e94\u7684\u4e0d\u540c\u7c7b\u578b\u8f6f\u4e2d\u65ad\u7684\u7d2f\u8ba1\u8fd0\u884c\u6b21\u6570\uff0c\u6709 3 \u70b9\u9700\u8981\u6ce8\u610f\u4e0b\u3002 \u7b2c\u4e00\u70b9\uff0c\u8981\u6ce8\u610f\u7b2c\u4e00\u5217\u7684\u5185\u5bb9\uff0c\u5b83\u662f\u4ee3\u8868\u7740\u8f6f\u4e2d\u65ad\u7684\u7c7b\u578b\uff0c\u5728\u6211\u7684\u7cfb\u7edf\u91cc\uff0c\u8f6f\u4e2d\u65ad\u5305\u62ec\u4e86 10 \u4e2a\u7c7b\u578b\uff0c\u5206\u522b\u5bf9\u5e94\u4e0d\u540c\u7684\u5de5\u4f5c\u7c7b\u578b\uff0c\u6bd4\u5982 NET_RX \u8868\u793a\u7f51\u7edc\u63a5\u6536\u4e2d\u65ad\uff0cNET_TX \u8868\u793a\u7f51\u7edc\u53d1\u9001\u4e2d\u65ad\u3001TIMER \u8868\u793a\u5b9a\u65f6\u4e2d\u65ad\u3001RCU \u8868\u793a RCU \u9501\u4e2d\u65ad\u3001SCHED \u8868\u793a\u5185\u6838\u8c03\u5ea6\u4e2d\u65ad\u3002 \u7b2c\u4e8c\u70b9\uff0c\u8981\u6ce8\u610f\u540c\u4e00\u79cd\u7c7b\u578b\u7684\u8f6f\u4e2d\u65ad\u5728\u4e0d\u540c CPU \u7684\u5206\u5e03\u60c5\u51b5\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u540c\u4e00\u79cd\u4e2d\u65ad\u5728\u4e0d\u540c CPU \u4e0a\u7684\u7d2f\u8ba1\u6b21\u6570\u76f8\u5dee\u4e0d\u591a\uff0c\u6bd4\u5982\u6211\u7684\u7cfb\u7edf\u91cc\uff0cNET_RX \u5728 CPU0 \u3001CPU1\u3001CPU2\u3001CPU3 \u4e0a\u7684\u4e2d\u65ad\u6b21\u6570\u57fa\u672c\u662f\u540c\u4e00\u4e2a\u6570\u91cf\u7ea7\uff0c\u76f8\u5dee\u4e0d\u591a\u3002 \u7b2c\u4e09\u70b9\uff0c\u8fd9\u4e9b\u6570\u503c\u662f\u7cfb\u7edf\u8fd0\u884c\u4ee5\u6765\u7684\u7d2f\u8ba1\u4e2d\u65ad\u6b21\u6570\uff0c\u6570\u503c\u7684\u5927\u5c0f\u6ca1\u4ec0\u4e48\u53c2\u8003\u610f\u4e49\uff0c\u4f46\u662f\u7cfb\u7edf\u7684\u4e2d\u65ad\u6b21\u6570\u7684\u53d8\u5316\u901f\u7387\u624d\u662f\u6211\u4eec\u8981\u5173\u6ce8\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 watch -d cat /proc/softirqs \u547d\u4ee4\u67e5\u770b\u4e2d\u65ad\u6b21\u6570\u7684\u53d8\u5316\u901f\u7387\u3002 2 \u5e38\u7528\u7684\u4e00\u4e9b\u4f18\u5316\u7ecf\u9a8c \u5f53\u4f60\u53d1\u73b0\u8f6f\u4e2d\u65ad\u5360\u7528\u7684 CPU \u5229\u7528\u7387\u6bd4\u8f83\u9ad8\u65f6\uff0c\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\u6392\u67e5 \u7f51\u5361\u8f6f\u4e2d\u65ad\u7684\u4f18\u5316,\u628a\u4e2d\u65ad\u4fe1\u53f7\u53d1\u7ed9\u4e0d\u540c\u7684 CPU\uff0c\u56e0\u4e3a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6240\u6709\u4e2d\u65ad\u90fd\u53d1\u7ed9\u4e86 CPU0\uff0c\u5bfc\u81f4 CPU0 \u88ab\u6253\u6ee1\u3002\u628a\u4e2d\u65ad\u4fe1\u53f7\u53d1\u7ed9\u4e0d\u540c\u7684 CPU \u4e4b\u540e\uff0c\u591a\u4e2a CPU \u80af\u5b9a\u6bd4\u5355\u4e2a CPU \u5904\u7406\u8d77\u6765\u5feb\uff0c\u56e0\u6b64\u6027\u80fd\u80fd\u591f\u663e\u8457\u63d0\u5347\u3002 \u786c\u4ef6 CPU \u529f\u7387\u662f\u5426\u5f00\u542f\u6700\u5927\u6027\u80fd\u6a21\u5f0f. \u5982\u679c\u4e00\u53f0\u673a\u5668\u662f\u8282\u80fd\u6a21\u5f0f\u3001\u4e00\u53f0\u662f MaxPerformance \u6a21\u5f0f, \u90a3\u4e48\u5728\u76f8\u540c\u4e1a\u52a1\u91cf\u7684\u60c5\u51b5\u4e0b, \u8282\u80fd\u6a21\u5f0f\u90a3\u53f0\u7684 CPU soft irq \u5c31\u4f1a\u9ad8. \u9ad8\u6d41\u91cf redis \u670d\u52a1\u5668\uff0c\u5e76\u6ca1\u6709\u628a\u7f51\u5361\u8f6f\u4e2d\u65ad\u8d1f\u8f7d\u5747\u8861\u5230\u6240\u6709 CPU \u4e0a\uff0c\u800c\u662f\u628a\u7f51\u5361\u8f6f\u4e2d\u65ad\u7ed1\u5b9a\u7684 NUMA \u67b6\u6784\u4e2d\u7684\u5176\u4e2d\u4e00\u4e2a\u8282\u70b9\uff08\u4f8b\u5982\u8be5\u8282\u70b9\u662f 4 \u6838 CPU\uff09\uff0c\u7136\u540e\u628a redis \u8fdb\u7a0b\u7ed1\u5b9a\u7684 NUMA \u67b6\u6784\u4e2d\u7684\u5176\u4ed6\u8282\u70b9\uff08\u4f8b\u5982\u5176\u4ed6 1 \u4e2a\u8282\u70b9\uff09 3 \u5982\u4f55\u5b9a\u4f4d\u8f6f\u4e2d\u65ad CPU \u4f7f\u7528\u7387\u8fc7\u9ad8\u7684\u95ee\u9898\uff1f \u8981\u60f3\u77e5\u9053\u5f53\u524d\u7684\u7cfb\u7edf\u7684\u8f6f\u4e2d\u65ad\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 top \u547d\u4ee4\u67e5\u770b\uff0c\u4e0b\u9762\u662f\u4e00\u53f0\u670d\u52a1\u5668\u4e0a\u7684 top \u7684\u6570\u636e\uff1a \u4e0a\u56fe\u4e2d\u7684\u9ec4\u8272\u90e8\u5206 si\uff0c\u5c31\u662f CPU \u5728\u8f6f\u4e2d\u65ad\u4e0a\u7684\u4f7f\u7528\u7387\uff0c\u800c\u4e14\u53ef\u4ee5\u53d1\u73b0\uff0c\u6bcf\u4e2a CPU \u4f7f\u7528\u7387\u90fd\u4e0d\u9ad8\uff0c\u4e24\u4e2a CPU \u7684\u4f7f\u7528\u7387\u867d\u7136\u53ea\u6709 3% \u548c 4% \u5de6\u53f3\uff0c\u4f46\u662f\u90fd\u662f\u7528\u5728\u8f6f\u4e2d\u65ad\u4e0a\u4e86\u3002 \u53e6\u5916\uff0c\u4e5f\u53ef\u4ee5\u770b\u5230 CPU \u4f7f\u7528\u7387\u6700\u9ad8\u7684\u8fdb\u7a0b\u4e5f\u662f\u8f6f\u4e2d\u65ad ksoftirqd\uff0c\u56e0\u6b64\u53ef\u4ee5\u8ba4\u4e3a\u6b64\u65f6\u7cfb\u7edf\u7684\u5f00\u9500\u4e3b\u8981\u6765\u6e90\u4e8e\u8f6f\u4e2d\u65ad\u3002 \u5982\u679c\u8981\u77e5\u9053\u662f\u54ea\u79cd\u8f6f\u4e2d\u65ad\u7c7b\u578b\u5bfc\u81f4\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 watch -d cat /proc/softirqs \u547d\u4ee4\u67e5\u770b\u6bcf\u4e2a\u8f6f\u4e2d\u65ad\u7c7b\u578b\u7684\u4e2d\u65ad\u6b21\u6570\u7684\u53d8\u5316\u901f\u7387\u3002 \u8fdb\u800c\u786e\u5b9a\u95ee\u9898\u6240\u5728. \u4e2d\u65ad\u4e0b\u534a\u90e8\u4e09\u79cd\u673a\u5236\u7684\u533a\u522b\u548c\u57fa\u7840\u4f7f\u7528 \u4e2d\u65ad\u4e0b\u534a\u90e8\u6709\u54ea 3 \u79cd\u673a\u5236? softirq , tasklet , workqueue 3 \u79cd\u4e0b\u534a\u90e8\u673a\u5236\u7684\u533a\u522b \u8f6f\u4e2d\u65ad\u4f7f\u7528\u7684\u51e0\u4e2a\u8981\u70b9\uff1a \u4e00\u4e2a\u8f6f\u4e2d\u65ad\u4e0d\u4f1a\u62a2\u5360\u53e6\u5916\u4e00\u4e2a\u8f6f\u4e2d\u65ad\u3002 \u60df\u4e00\u53ef\u4ee5\u62a2\u5360\u8f6f\u4e2d\u65ad\u7684\u662f\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u3002 \u5176\u4ed6\u7684\u8f6f\u4e2d\u65ad\u53ef\u4ee5\u5728\u5176\u4ed6\u5904\u7406\u5668\u4e0a\u540c\u65f6\u6267\u884c 1 softirq \u6838\u5fc3\u6570\u636e\u7ed3\u6784\u548c\u4f7f\u7528 softirq \u5373\u8f6f\u4e2d\u65ad\uff0c\u4ee3\u7801\u4f4d\u4e8e kernel/softirq.c \u6587\u4ef6\u4e2d\uff1b \u6bcf\u4e2a\u8f6f\u4e2d\u65ad\u7531 softirq_action \u7ed3\u6784\u8868\u793a\uff1a \u5728 softirq.c \u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8f6f\u4e2d\u65ad\u5411\u91cf\u6570\u7ec4 softirq_vec \uff1a static struct softirq_action softirq_vec[NR_SOFTIRQS] __cacheline_aligned_in_smp; enum { HI_SOFTIRQ=0, /*\u7528\u4e8e\u9ad8\u4f18\u5148\u7ea7\u7684tasklet*/ TIMER_SOFTIRQ, /*\u7528\u4e8e\u5b9a\u65f6\u5668\u7684\u4e0b\u534a\u90e8*/ NET_TX_SOFTIRQ, /*\u7528\u4e8e\u7f51\u7edc\u5c42\u53d1\u5305*/ NET_RX_SOFTIRQ, /*\u7528\u4e8e\u7f51\u7edc\u5c42\u6536\u62a5*/ BLOCK_SOFTIRQ, BLOCK_IOPOLL_SOFTIRQ, TASKLET_SOFTIRQ, /*\u7528\u4e8e\u4f4e\u4f18\u5148\u7ea7\u7684tasklet*/ SCHED_SOFTIRQ, HRTIMER_SOFTIRQ, RCU_SOFTIRQ, /* Preferable RCU should always be the last softirq */ NR_SOFTIRQS }; \u6570\u7ec4\u7684\u6210\u5458\u6570\u7531 NR_SOFTIRQS \u51b3\u5b9a\uff0c\u662f\u4e00\u4e2a\u679a\u4e3e\u5e38\u91cf\u3002 \u65b0\u589e\u4e00\u4e2a\u8f6f\u4e2d\u65ad\u65f6\uff0c\u9700\u8981\u5728\u6587\u4ef6 include/linux/interrupt.h \u4e2d\u6dfb\u52a0\u4e00\u4e2a\u679a\u4e3e\u5e38\u91cf\u3002 \u76f8\u5173\u63a5\u53e3 \u6ce8\u518c\u8f6f\u4e2d\u65ad void open_softirq(int nr, void (*action)(struct softirq_action *)) \u5373\u6ce8\u518c\u5bf9\u5e94\u7c7b\u578b\u7684\u5904\u7406\u51fd\u6570\u5230\u5168\u5c40\u6570\u7ec4 softirq_vec \u4e2d\u3002 \u89e6\u53d1\u8f6f\u4e2d\u65ad void raise_softirq(unsigned int nr) \u5b9e\u9645\u4e0a\u5373\u4ee5\u8f6f\u4e2d\u65ad\u7c7b\u578b nr \u4f5c\u4e3a\u504f\u79fb\u91cf\u4f1a\u7f6e\u4f4d irq_stat[cpu_id] \u7684\u6210\u5458\u53d8\u91cf __softirq_pending . __softirq_pending \u5b57\u6bb5\u4e2d\u7684\u6bcf\u4e00\u4e2a bit\uff0c\u5bf9\u5e94\u7740\u67d0\u4e00\u4e2a\u8f6f\u4e2d\u65ad\uff0c\u67d0\u4e2a bit \u88ab\u7f6e\u4f4d\uff0c\u8bf4\u660e\u6709\u76f8\u5e94\u7684\u8f6f\u4e2d\u65ad\u7b49\u5f85\u5904\u7406\u3002 \u8fd9\u4e5f\u662f\u540c\u4e00\u7c7b\u578b\u8f6f\u4e2d\u65ad\u53ef\u4ee5\u5728\u591a\u4e2a cpu \u4e0a\u5e76\u884c\u8fd0\u884c\u7684\u6839\u672c\u539f\u56e0\u3002 \u8f6f\u4e2d\u65ad\u5b9e\u4f8b \u4ee5\u4e00\u4e2a \u6309\u952e\u9a71\u52a8\u7684\u4e2d\u65ad\u5904\u7406 \u4e3a\u4f8b\uff0c\u5c06\u6309\u952e\u9a71\u52a8\u7684\u4e2d\u65ad\u5904\u7406\u5206\u6210\u4e0a\u4e0b\u4e24\u90e8\u5206\uff1a \u4e0a\u534a\u90e8\uff1a\u8bfb\u53d6\u952e\u503c\uff0c\u89e6\u53d1\u8f6f\u4e2d\u65ad \u4e0b\u534a\u90e8\uff1a\u5524\u9192\u8fdb\u7a0b \u8f6f\u4e2d\u65ad\u7684\u6ce8\u518c\uff0c\u5728\u9a71\u52a8\u7684\u5165\u53e3\u51fd\u6570\uff0c\u6ce8\u518c\u8f6f\u4e2d\u65ad\uff1a \u6dfb\u52a0\u7684\u679a\u4e3e\u5e38\u91cf\uff1a \u53ef\u4ee5\u770b\u5230\uff0c\u4f7f\u7528\u8f6f\u4e2d\u65ad\u662f\u9700\u8981\u4fee\u6539\u5185\u6838\uff0c\u6dfb\u52a0\u4e00\u4e2a\u679a\u4e3e\u7684\uff0c\u6709\u4e9b\u7e41\u7410\u3002 \u6240\u4ee5\uff0c\u901a\u5e38\u6211\u4eec \u4e0d\u5efa\u8bae\u64c5\u81ea\u589e\u52a0\u8f6f\u4e2d\u65ad\u7684\u6570\u91cf \uff0c\u5982\u679c\u9700\u8981\u65b0\u7684\u8f6f\u4e2d\u65ad\uff0c\u5c3d\u53ef\u80fd\u628a\u5b83\u4eec\u5b9e\u73b0\u4e3a \u57fa\u4e8e\u8f6f\u4e2d\u65ad\u7684 tasklet \u5f62\u5f0f \u3002 2 tasklet \u6838\u5fc3\u6570\u636e\u7ed3\u6784\u548c\u4f7f\u7528 tasklet \u662f\u5229\u7528 \u8f6f\u4e2d\u65ad \u5b9e\u73b0\u7684\u4e00\u79cd \u4e0b\u534a\u90e8\u673a\u5236 \u3002 \u90a3\u662f\u7528 \u8f6f\u4e2d\u65ad \u8fd8\u662f tasklet \u597d\u5462\uff1f \u9009\u62e9\u5230\u5e95\u662f\u7528 \u8f6f\u4e2d\u65ad \u8fd8\u662f tasklet \u5176\u5b9e\u5f88\u7b80\u5355\uff1a \u901a\u5e38\u4f60\u5e94\u8be5\u7528 tasklet \u3002\u5c31\u50cf\u6211\u4eec\u5728\u524d\u9762\u770b\u5230\u7684\uff0c\u8f6f\u4e2d\u65ad\u8d44\u6e90\u6709\u9650\uff0c\u4e5f\u9ebb\u70e6\uff0c\u800c\u4e14\u8f6f\u4e2d\u65ad\u7684\u4f7f\u7528\u8005\u5c48\u6307\u53ef\u6570\u3002\u5b83\u53ea\u5728\u90a3\u4e9b\u6267\u884c\u9891\u7387\u5f88\u9ad8\u548c\u8fde\u7eed\u6027\u8981\u6c42\u5f88\u9ad8\u7684\u60c5\u51b5\u4e0b\u624d\u9700\u8981\u3002 \u53ea\u6709 \u7f51\u7edc \u548c SCSI 2 \u4e2a\u5b50\u7cfb\u7edf\u76f4\u63a5\u4f7f\u7528\u8f6f\u4e2d\u65ad \u800c tasklet \u5374\u6709\u66f4\u5e7f\u6cdb\u7684\u7528\u9014 \u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u7528 tasklet \u6548\u679c\u90fd\u4e0d\u9519\uff0c\u800c\u4e14\u5b83\u4eec\u8fd8\u975e\u5e38\u5bb9\u6613\u4f7f\u7528\u3002 \u56e0\u4e3a tasklet \u662f\u901a\u8fc7\u8f6f\u4e2d\u65ad\u5b9e\u73b0\u7684\uff0c\u6240\u4ee5\u5b83\u4eec \u672c\u8eab\u4e5f\u662f\u8f6f\u4e2d\u65ad \u3002 tasklet \u4f7f\u7528 tasklet \u7684\u4f7f\u7528\u6b65\u9aa4\u5982\u4e0b\uff1a 1\u3001\u7f16\u5199 tasklet \u5904\u7406\u51fd\u6570\uff08\u4e0b\u534a\u90e8\uff09 void my_tasklet_fun (unsigned long data) 2\u3001\u58f0\u660e tasklet //\u9759\u6001 DECLARE_TASKLET(my_tasklet,my_tasklet_fun,data); //\u52a8\u6001 struct tasklet_struct xxx; tasklet_init(&xxx,tasklet_handler,dev) 3\u3001\u8c03\u5ea6 tasklet tasklet_schedule(&my_tasklet); \u767b\u8bb0 my_tasklet, \u7136\u540e\u5141\u8bb8\u7cfb\u7edf\u5728\u5408\u9002\u7684\u65f6\u95f4\u8c03\u5ea6\u5b83\u3002 tasklet \u5b9e\u4f8b \u4ee5\u6309\u952e\u4e2d\u65ad\u9a71\u52a8\u4e3a\u4f8b\uff1a \u5148\u4f7f\u7528 DECLARE_TASKLET \u9759\u6001\u58f0\u660e\u4e00\u4e2a tasklet \uff0c\u6307\u5b9a\u5176\u4e0b\u534a\u90e8\u51fd\u6570\u4e3a btn_tasklet_func \uff0c\u5728\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\uff08\u4e0a\u534a\u90e8\uff09\u83b7\u53d6\u6309\u952e\u503c\u540e\uff0c\u8c03\u7528 tasklet_schedule \u8c03\u5ea6\u3002 3 workqueue \u6838\u5fc3\u6570\u636e\u7ed3\u6784\u548c\u4f7f\u7528 work queue \u5373 \u5de5\u4f5c\u961f\u5217 \uff0c\u4e5f\u662f\u4e2d\u65ad\u4e0b\u534a\u90e8\u7684\u4e00\u79cd\u3002 work queue \u5c06\u4e0b\u534a\u90e8\u5de5\u4f5c\u63a8\u8fdf\u7ed9\u4e00\u4e2a \u5185\u6838\u7ebf\u7a0b \u53bb\u6267\u884c \u2014\u2014work \u603b\u662f\u8fd0\u884c\u4e8e\u8fdb\u7a0b\u4e0a\u4e0b\u6587. \u4e24\u4e2a\u8981\u70b9\uff1a \u5982\u679c\u63a8\u8fdf\u7684\u5de5\u4f5c\u9700\u8981 \u7761\u7720 \uff0c\u5219\u4f7f\u7528 work queue \u3002\u5426\u5219\u4f7f\u7528 softirq \u6216 tasklet . work queue \u9002\u7528\u4e8e\u9700\u8981\u5206\u914d\u5927\u91cf\u7684\u5185\u5b58\uff0c\u83b7\u5f97\u4e00\u4e2a\u4fe1\u53f7\u91cf\uff0c\u6216\u8005\u6267\u884c\u963b\u585e\u7684 I/O \u7684\u60c5\u51b5. \u5de5\u4f5c\u961f\u5217\u7684\u76f8\u5173\u63a5\u53e3\u51fd\u6570\uff1a \u5728\u4f7f\u7528\u4e0a\uff0c \u5de5\u4f5c\u961f\u5217 \u4e0e tasklet \u662f\u7c7b\u4f3c\u7684\uff1a \u786c\u4e2d\u65ad\u3001\u8f6f\u4e2d\u65ad\u3001\u7528\u6237\u8fdb\u7a0b\u4e4b\u95f4\u7684\u4f18\u5148\u7ea7 \u6211\u4eec\u77e5\u9053\u6309\u7167\u4f18\u5148\u7ea7\u6765\u8bf4\uff0c \u4e2d\u65ad>\u8f6f\u4e2d\u65ad>\u7528\u6237\u8fdb\u7a0b \uff0c\u4e5f\u5c31\u662f\u8bf4\u4e2d\u65ad\u53ef\u4ee5\u6253\u65ad\u8f6f\u4e2d\u65ad\uff0c\u800c\u8f6f\u4e2d\u65ad\u53c8\u53ef\u4ee5\u6253\u65ad\u7528\u6237\u8fdb\u7a0b\u3002 1 \u4e3a\u4ec0\u4e48\u51fa\u73b0 ksoftirqd \u7ebf\u7a0b \u95ee\u9898\u662f\u4ec0\u4e48? \u5982\u679c\u8f6f\u4e2d\u65ad\u5168\u90e8\u5728 ksoftirqd \u7ebf\u7a0b\u4e2d\u6267\u884c, \u90a3\u4e48\u5b83\u80af\u5b9a\u662f\u53ef\u4ee5\u518d\u8c03\u5ea6\u7684, \u9664\u975e ksoftirqd \u7ebf\u7a0b\u4e00\u76f4\u662f\u6240\u6709\u7ebf\u7a0b\u4e2d\u6700\u9ad8\u4f18\u5148\u7ea7\u7684 \u4e8b\u5b9e\u662f\u4ec0\u4e48? \u5982\u679c\u8f6f\u4e2d\u65ad\u672c\u8eab\u51fa\u73b0\u7684\u9891\u7387\u8f83\u9ad8\uff0c\u518d\u52a0\u4e0a\u4ed6\u4eec\u53c8\u6709\u5c06\u81ea\u5df1\u91cd\u65b0\u8bbe\u7f6e\u4e3a\u53ef\u6267\u884c\u72b6\u6001\u7684\u80fd\u529b\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bfc\u81f4\u7528\u6237\u7a7a\u95f4\u7684\u8fdb\u7a0b\u65e0\u6cd5\u83b7\u5f97\u8db3\u591f\u7684\u5904\u7406\u65f6\u95f4\uff0c\u56e0\u800c\u5904\u4e8e\u9965\u997f\u72b6\u6001\u3002\u4e3a\u4e86\u907f\u514d\u7528\u6237\u8fdb\u7a0b\u7684\u9965\u997f\u3002\u5185\u6838\u5f00\u53d1\u8005\u505a\u4e86\u4e00\u4e9b\u6298\u4e2d\uff0c\u6700\u7ec8\u5728\u5185\u6838\u7684\u5b9e\u73b0\u65b9\u6848\u4e2d\u662f\u4e0d\u4f1a\u7acb\u5373\u5904\u7406\u7531\u8f6f\u4e2d\u65ad\u81ea\u8eab\u91cd\u65b0\u89e6\u53d1\u7684\u8f6f\u4e2d\u65ad\uff08\u4e0d\u5141\u8bb8\u8f6f\u4e2d\u65ad\u5d4c\u5957\uff09\u3002\u800c\u4f5c\u4e3a\u6539\u8fdb\uff0c \u5185\u6838\u4f1a\u5524\u9192\u4e00\u7ec4\u5185\u6838\u7ebf\u7a0b\u6765\u5904\u7406\u8fd9\u4e9b\u8fc7\u591a\u7684\u8f6f\u4e2d\u65ad \uff0c\u8fd9\u4e9b\u5185\u6838\u7ebf\u7a0b\u5728\u6700\u4f4e\u4f18\u5148\u7ea7\u4e0a\u8fd0\u884c\uff08nice \u503c\u662f 19\uff09\uff0c\u8fd9\u80fd\u907f\u514d\u5b83\u4eec\u8ddf\u5176\u4ed6\u91cd\u8981\u7684\u4efb\u52a1\u62a2\u593a\u8d44\u6e90\uff0c\u4f46\u5b83\u4eec\u6700\u7ec8\u80af\u5b9a\u4f1a\u88ab\u6267\u884c\uff0c\u6240\u4ee5\u8fd9\u4e2a\u65b9\u6848\u80fd\u591f\u4fdd\u8bc1\u8f6f\u4e2d\u65ad\u8d1f\u8f7d\u5f88\u91cd\u7684\u65f6\u5019\uff0c\u7528\u6237\u8fdb\u7a0b\u4e0d\u4f1a\u56e0\u4e3a\u5f97\u4e0d\u5230\u5904\u7406\u65f6\u95f4\u800c\u5904\u4e8e\u9965\u997f\u72b6\u6001\uff0c\u76f8\u5e94\u7684\uff0c\u4e5f\u80fd\u4fdd\u8bc1\u8fc7\u91cf\u7684\u8f6f\u4e2d\u65ad\u7ec8\u7a76\u4f1a\u5f97\u5230\u5904\u7406\u3002 \u8bfb\u8005\u53ef\u80fd\u4f1a\u5bf9\u7cfb\u7edf\u4e0a\u8fd0\u884c\u7684 ksoftirqd \u611f\u5230\u7591\u60d1\uff0c\u8be5\u8fdb\u7a0b\u4e3b\u8981\u7528\u4e8e \u5728\u7cfb\u7edf\u7684\u8f6f\u4e2d\u65ad\u8d1f\u8f7d\u8fc7\u9ad8\u65f6\u964d\u4f4e\u8f6f\u4e2d\u65ad\u7684\u5904\u7406 \u3002\u6b63\u89c4\u5904\u7406\u4e2d\uff0c\u5982\u679c\u5185\u8054\u7684\u8f6f\u4e2d\u65ad\u8fdb\u7a0b\u4ee3\u7801\u5728\u5faa\u73af\u5904\u7406 10 \u6b21\u4e4b\u540e\uff0c\u53d1\u73b0\u8fd8\u9700\u8981\u5904\u7406\u66f4\u591a\u7684\u8f6f\u4e2d\u65ad(\u7531\u4e8e\u4e0d\u65ad\u4ea7\u751f\u4e2d\u65ad)\uff0c\u6b64\u65f6\u4e2d\u65ad\u8fdb\u7a0b\u4f1a\u5524\u9192\u5408\u9002\u7684 ksoftirqd (\u6bcf\u4e2a CPU \u90fd\u6709\u4e00\u4e2a ksoftirqd \u8fdb\u7a0b)\u8fdb\u7a0b\u5e76\u9000\u51fa\uff0c\u540e\u7eed\u7531 ksoftirqd \u8fdb\u7a0b\u5904\u7406\u8f6f\u4e2d\u65ad\u3002Ksoftirqd \u53ef\u4ee5\u88ab(\u786c\u4ef6\u6216\u8f6f\u4ef6)\u4e2d\u65ad\u4e0a\u4e0b\u6587\u4e4b\u5916\u7684\u8f6f\u4e2d\u65ad\u6253\u65ad\uff0c\u8fd9\u79cd\u5904\u7406\u662f\u5fc5\u8981\u7684\uff0c\u5426\u5219 Ksoftirqd \u5728\u5904\u7406\u4e0b\u4e00\u4e2a\u8f6f\u4e2d\u65ad\u524d\u53ef\u4ee5\u8fd0\u884c\u4efb\u610f\u65f6\u95f4\u3002\u5728\u8001\u7684\u5185\u6838\u4e2d\uff0cKsoftirqd \u8fdb\u7a0b\u4ee5\u6700\u4f4e\u7684\u4f18\u5148\u7ea7\u8fd0\u884c\uff0c\u5373\u5bf9\u8f6f\u4e2d\u65ad\u7684\u5904\u7406\u53d6\u51b3\u4e8e\u8be5\u8fdb\u7a0b\u662f\u7cfb\u7edf\u4e0a\u7684\u6700\u9ad8\u4f18\u5148\u7ea7\u8fd8\u662f\u6700\u4f4e\u4f18\u5148\u7ea7\u3002\u4ece 2.6.23 \u5f00\u59cb\uff0cKsoftirqd \u9ed8\u8ba4\u4f7f\u7528\u666e\u901a\u7528\u6237\u4f18\u5148\u7ea7\u8fd0\u884c\u3002 \u4e5f\u5c31\u662f\u8bf4 \u8f6f\u4e2d\u65ad \u9ed8\u8ba4\u662f\u5728\u786c\u4e2d\u65ad\u5904\u7406\u7ed3\u675f\u4e4b\u540e\u5c31\u6267\u884c, \u4f46\u662f\u4e07\u4e00\u7cfb\u7edf\u4e0a\u6709\u592a\u591a \u8f6f\u4e2d\u65ad \u8981\u5904\u7406, \u4e3a\u4e86\u907f\u514d\u7528\u6237\u8fdb\u7a0b\u9965\u997f, \u5c31\u628a\u8f6f\u4e2d\u65ad\u653e\u5230 ksoftirqd \u8fdb\u7a0b\u53bb\u6267\u884c. Linux \u7cfb\u7edf\u4e2d\u7684\u77e5\u540d\u5185\u6838\u7ebf\u7a0b(1)\u2014\u2014ksoftirqd \u548c events \u8f6f\u4e2d\u65ad\u548c\u5b9e\u65f6\u6027 2 \u5982\u4f55\u4f7f\u7528 ksoftirqd\uff08\u8fdb\u7a0b\u4e0a\u4e0b\u6587\uff09\u6765\u8fd0\u884c softirq\uff08\u4e2d\u65ad\u4e0a\u4e0b\u6587\uff09 I find it quite puzzling and difficult to think how ksoftirqd ( process context ) is employed in order to run softirqs ( interrupt context ) \"ksoftirqd is implemented as a set of threads, each of which is constrained to only run on a specific CPU. They are scheduled (at a very high priority) by the normal task scheduler. This implementation has the advantage that the time spent executing the bottom halves is accounted to a system task. It is thus possible for the user to see that the machine is overloaded with interrupt processing, and maybe take remedial action. Although the work is now being done in process context rather than bottom half context, ksoftirqd sets up an environment identical to that found in bottom half context. Specifically, it executes the softirq handlers with local interrupts enabled and bottom halves disabled locally. Code which runs as a bottom half does not need to change for ksoftirqd to run it.\" ksoftirqd \u8bbe\u7f6e\u4e86\u4e00\u4e2a\u4e0e\u4e0b\u534a\u90e8\u5206\u4e0a\u4e0b\u6587\u4e2d\u76f8\u540c\u7684\u73af\u5883 , \u4e5f\u5c31\u662f\u8bf4 ksoftirqd \u8fdb\u7a0b\u8bbe\u7f6e\u4e86 \u4e0b\u534a\u90e8\u73af\u5883 3 \u8f6f\u4e2d\u65ad\u6267\u884c\u7684\u4e09\u4e2a\u573a\u666f The previous section has described how software interrupts are handled in interrupt context on the return path from hardware interrupt handling, but there is also a kernel thread (in fact, one per CPU) dedicated to handling software interrupts. This thread is woken up when the load of software interrupts becomes too great to handle in interrupt context (it would take too many machine cycles from the current process). \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff08\u7b2c\u4e00\u79cd\uff09\uff0c\u786c\u4e2d\u65ad\u8fd4\u56de\u7684\u65f6\u5019\u5c31\u5f00\u59cb\u6267\u884c\u8f6f\u4e2d\u65ad. \u5982\u679c\u8f6f\u4e2d\u65ad\u592a\u591a, \u5219\u8fdb\u5165\u7b2c\u4e8c\u79cd \u7b2c\u4e8c\u79cd\uff0c \u5728 softirqd \u5185\u6838\u7ebf\u7a0b\u4e0b \u7b2c\u4e09\u79cd, \u663e\u5f0f\u8c03\u7528\u8f6f\u4e2d\u65ad\u7684\u5185\u6838\u4ee3\u7801 \u7b2c\u4e00\u79cd kernel/softirq.c /* * Exit an interrupt context. Process softirqs if needed and possible: */ void irq_exit(void) { #ifndef __ARCH_IRQ_EXIT_IRQS_DISABLED local_irq_disable(); #else WARN_ON_ONCE(!irqs_disabled()); #endif account_irq_exit_time(current); preempt_count_sub(HARDIRQ_OFFSET); if (!in_interrupt() && local_softirq_pending()) invoke_softirq(); tick_irq_exit(); rcu_irq_exit(); trace_hardirq_exit(); /* must be last! */ } static inline void invoke_softirq(void) { if (!force_irqthreads) { #ifdef CONFIG_HAVE_IRQ_EXIT_ON_IRQ_STACK /* * We can safely execute softirq on the current stack if * it is the irq stack, because it should be near empty * at this stage. */ __do_softirq(); #else /* * Otherwise, irq_exit() is called on the task stack that can * be potentially deep already. So call softirq in its own stack * to prevent from any overrun. */ do_softirq_own_stack(); #endif } else { wakeup_softirqd(); } } \u7efc\u4e0a\u6240\u8ff0, irq_exit() ---> invoke_softirq() ---> __do_softirq() 4 \u6269\u5c55 Which Context are softirq and tasklet in? The softirq and tasklet are both kind of bottom-halves mechanism. Sleep is not allowed becuase they run under interrupt context not process context. If sleep is allowed, then the linux cannot schedule them and finally cause a kernel panic with a dequeue_task error. The interrupt context does not even have a data structure describing the register info, so they can never be scheduled by linux. If it is designed to have that structure and can be scheduled, the performance for interrupt handling process will be effected. In What Context Kernel Thread Runs In Linux What context does the scheduler code run in Softirqs and Tasklets","title":"\u7b2c\u56db\u7bc7 \u8f6f\u4e2d\u65ad"},{"location":"chapter_4/5_soft_irq/#_1","text":"\u672c\u7bc7\u6587\u6863\u603b\u7ed3 \u8f6f\u4e2d\u65ad\u76f8\u5173\u77e5\u8bc6","title":"\u6982\u8ff0"},{"location":"chapter_4/5_soft_irq/#_2","text":"\u786c\u4e2d\u65ad \u5305\u62ec \u4e2d\u65ad \u3001 \u5f02\u5e38 \u4ee5\u53ca INT \u6307\u4ee4 \u8fd9\u79cd\u8f6f\u4ef6\u4e2d\u65ad\uff0c\u6574\u4e2a\u4e2d\u65ad\u673a\u5236\u662f\u7eaf\u786c\u4ef6\u5b9e\u73b0\u7684\u903b\u8f91\uff0c\u522b\u7ba1\u89e6\u53d1\u5b83\u7684\u662f\u8c01\uff0c\u6240\u4ee5\u901a\u901a\u53eb\u786c\u4e2d\u65ad\u3002","title":"\u8f6f\u4e2d\u65ad\u548c\u786c\u4e2d\u65ad\u7684\u533a\u522b"},{"location":"chapter_4/5_soft_irq/#_3","text":"\u8f6f\u4e2d\u65ad \u662f\u7eaf\u8f6f\u4ef6\u5b9e\u73b0\u7684\uff0c\u5b8f\u89c2\u6548\u679c\u770b\u4e0a\u53bb\u548c\u4e2d\u65ad\u5dee\u4e0d\u591a\u7684\u4e00\u79cd\u65b9\u5f0f\u3002 \u4ec0\u4e48\u53eb\u5b8f\u89c2\u6548\u679c\u5462\uff1f\u610f\u601d\u5c31\u662f\u8bf4\uff0c\u4e2d\u65ad\u5728\u5b8f\u89c2\u5c42\u9762\u770b\u6765\uff0c\u5c31\u662f \u6253\u65ad\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u7a0b\u5e8f\uff0c\u8f6c\u800c\u53bb\u6267\u884c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\uff0c\u6267\u884c\u5b8c\u4e4b\u540e\u518d\u8fd4\u56de\u539f\u7a0b\u5e8f \u3002 \u4ece\u8fd9\u4e2a\u5c42\u9762\u770b\uff0c\u786c\u4e2d\u65ad\u53ef\u4ee5\u8fbe\u5230\u8fd9\u4e2a\u6548\u679c\uff0c\u8f6f\u4e2d\u65ad\u4e5f\u53ef\u4ee5\u8fbe\u5230\u8fd9\u4e2a\u6548\u679c\uff0c\u6240\u4ee5\u8bf4\u5b8f\u89c2\u6548\u679c\u4e00\u6837\u3002 \u90a3\u5fae\u89c2\u5c42\u9762\u5462\uff1f\u5c31\u662f\u6211\u4eec\u9700\u8981\u4e86\u89e3\u7684\u539f\u7406\u5566\u3002","title":"\u5b8f\u89c2\u5c42\u9762"},{"location":"chapter_4/5_soft_irq/#_4","text":"\u786c\u4e2d\u65ad\u7684\u5fae\u89c2\u5c42\u9762\uff0c\u5c31\u662f CPU \u5728\u6bcf\u4e00\u4e2a\u6307\u4ee4\u5468\u671f\u7684\u6700\u540e\uff0c\u90fd\u4f1a\u7559\u4e00\u4e2a CPU \u5468\u671f\u53bb\u67e5\u770b\u662f\u5426\u6709\u4e2d\u65ad\uff0c\u5982\u679c\u6709\uff0c\u5c31\u628a\u4e2d\u65ad\u53f7\u53d6\u51fa\uff0c\u53bb\u4e2d\u65ad\u5411\u91cf\u8868\u4e2d\u5bfb\u627e\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\uff0c\u7136\u540e\u8df3\u8fc7\u53bb\u3002 \u8f6f\u4e2d\u65ad\u7684\u5fae\u89c2\u5c42\u9762\uff0c\u7b80\u5355\u8bf4\u5c31\u662f\u6709\u4e00\u4e2a\u5355\u72ec\u7684\u5b88\u62a4\u8fdb\u7a0b\uff0c\u4e0d\u65ad\u8f6e\u8be2\u4e00\u7ec4 \u6807\u5fd7\u4f4d \uff0c\u5982\u679c\u54ea\u4e2a\u6807\u5fd7\u4f4d\u6709\u503c\u4e86\uff0c\u90a3\u53bb\u8fd9\u4e2a\u6807\u5fd7\u4f4d\u5bf9\u5e94\u7684 \u8f6f\u4e2d\u65ad\u5411\u91cf\u8868\u6570\u7ec4 \u7684\u76f8\u5e94\u4f4d\u7f6e\uff0c\u627e\u5230 \u8f6f\u4e2d\u65ad\u5904\u7406\u51fd\u6570 \uff0c\u7136\u540e\u8df3\u8fc7\u53bb\u3002","title":"\u5fae\u89c2\u5c42\u9762"},{"location":"chapter_4/5_soft_irq/#_5","text":"\u65e2\u7136\u662f\u5185\u6838\u5b88\u62a4\u7ebf\u7a0b\u6765\u8fd0\u884c\u8f6f\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f, \u90a3\u4e48\u9996\u5148\u8981\u5f00\u542f\u5185\u6838\u7ebf\u7a0b\u3002 \u540d\u5b57\u901a\u5e38\u4e3a\u300cksoftirqd/CPU \u7f16\u53f7\u300d, \u6bd4\u5982 0 \u53f7 CPU \u5bf9\u5e94\u7684\u8f6f\u4e2d\u65ad\u5185\u6838\u7ebf\u7a0b\u7684\u540d\u5b57\u662f ksoftirqd/0","title":"\u8f6f\u4e2d\u65ad\u5b9e\u73b0\u539f\u7406"},{"location":"chapter_4/5_soft_irq/#_6","text":"\u8fd9\u4e2a\u662f\u6211\u4e4b\u524d\u5728\u8bb2\u89e3\u81ea\u5236\u64cd\u4f5c\u7cfb\u7edf\u65f6\u7684\u56fe\uff0c\u653e\u5728\u8fd9\u91cc\u5b8c\u5168\u6ca1\u6709\u95ee\u9898\uff0c\u8fd9\u5c31\u662f Linux \u7684\u542f\u52a8\u8fc7\u7a0b\uff0c\u6587\u4ef6\u540d\u90fd\u4e00\u6837\u3002 \u552f\u4e00\u4e0d\u540c\u7684\u662f\uff0c\u6211\u4eec\u8fd9\u91cc\u5185\u6838\u4e3b\u65b9\u6cd5\u53eb kernel_start \uff0cLinux-2.6.0 \u91cc\u53eb start_kernel , \u6548\u679c\u90fd\u4e00\u6837. \u63a5\u4e0b\u6765\u770b\u8fd9\u4e2a\u5165\u53e3\u65b9\u6cd5\u3002 asmlinkage void __init start_kernel(void) { ... trap_init(); sched_init(); time_init(); ... rest_init(); } \u7701\u7565\u4e86\u5f88\u591a\u90e8\u5206\uff0c\u4f46\u53ef\u4ee5\u770b\u51fa\u8fd9\u4e2a\u65b9\u6cd5\u91cc\u5c31\u662f \u5404\u79cd\u521d\u59cb\u5316 \u3002 \u63a5\u7740\u770b rest_init() \u8fd9\u4e2a\u65b9\u6cd5\u3002 static void rest_init(void) { kernel_thread(init, NULL, CLONE_KERNEL); } static int init(void * unused) { do_pre_smp_initcalls(); } static void do_pre_smp_initcalls(void) { spawn_ksoftirqd(); } \u770b\u5230\u4e00\u4e2a spawn_ksoftirqd() \uff0c\u7ffb\u8bd1\u8fc7\u6765\u5c31\u662f spawn kernel soft irt daemon \uff0c\u5f00\u542f\u5185\u6838\u8f6f\u4e2d\u65ad\u5b88\u62a4\u8fdb\u7a0b\uff0c\u8fd9\u540d\u5b57\u592a\u76f4\u89c2\u4e86\uff0c\u90fd\u4e0d\u7528\u6211\u8bb2\u4e86\uff01 \u518d\u5f80\u91cc\u8ddf\u3002\u5f88\u957f\uff0c\u4f46\u6709\u7528\u7684\u4fe1\u606f\u5f88\u5c11\u3002 __init int spawn_ksoftirqd(void) { cpu_callback(&cpu_nfb, CPU_ONLINE, (void *)(long)smp_processor_id()); register_cpu_notifier(&cpu_nfb); return 0; } static int __devinit cpu_callback(...) { kernel_thread(ksoftirqd, hcpu, CLONE_KERNEL); } static int ksoftirqd(void * __bind_cpu) { for (;;) { while (local_softirq_pending()) { do_softirq(); cond_resched(); } } } asmlinkage void do_softirq(void) { h = softirq_vec; pending = local_softirq_pending(); do { if (pending & 1) { h->action(h); h++; pending >>= 1; } while (pending); } \u524d\u9762\u7684\u4e0d\u7528\u7ba1\uff0c\u76f4\u63a5\u770b\u6700\u540e\u4e00\u4e2a\u65b9\u6cd5\uff0c do_softirq() \uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5c55\u793a\u4e86\u8f6f\u4e2d\u65ad\u5904\u7406\u5b88\u62a4\u8fdb\u7a0b\u6240\u505a\u7684\u4e8b\u60c5\u7684\u7cbe\u9ad3\uff0c\u6211\u7ed9\u7ffb\u8bd1\u4e00\u4e0b\u3002 // \u8fd9\u5c31\u662f\u8f6f\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u8868\uff08\u8f6f\u4e2d\u65ad\u5411\u91cf\u8868\uff09 // \u548c\u786c\u4e2d\u65ad\u7684\u4e2d\u65ad\u5411\u91cf\u8868\u4e00\u6837 static struct softirq_action softirq_vec[32]; asmlinkage void do_softirq(void) { // h = \u8f6f\u4e2d\u65ad\u5411\u91cf\u8868\u8d77\u59cb\u5730\u5740\u6307\u9488 h = softirq_vec; // \u8fd9\u4e2a\u662f\u8f6f\u4e2d\u65ad\u6807\u5fd7\u4f4d\u4eec\uff0c\u4e00\u6b21\u6027\u62ff\u5230\u6240\u6709\u7684\u8f6f\u4e2d\u65ad\u6807\u5fd7\u4f4d pending = local_softirq_pending(); do { // \u6b64\u65f6\u7684\u8f6f\u4e2d\u65ad\u6807\u5fd7\u4f4d\u6709\u503c\uff08\u8bf4\u660e\u6709\u8f6f\u4e2d\u65ad\uff09 if (pending & 1) { // \u53bb\u5bf9\u5e94\u7684\u8f6f\u4e2d\u65ad\u5411\u91cf\u8868\u6267\u884c\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570 h->action(h); // \u8f6f\u4e2d\u65ad\u5411\u91cf\u8868\u6307\u9488\u5411\u540e\u79fb\u52a8 h++; // \u540c\u65f6\u8f6f\u4e2d\u65ad\u5904\u7406\u6807\u5fd7\u4f4d\u4e5f\u5411\u540e\u79fb\u52a8 pending >>= 1; } while (pending); } \u8fd9\u7ffb\u8bd1\u8fd8\u6ca1\u770b\u660e\u767d\uff0c\u90a3\u6211\u6765\u51e0\u4e2a\u56fe\u4f60\u5c31\u61c2\u4e86\u3002 \u9996\u5148 h \u4ee3\u8868 \u8f6f\u4e2d\u65ad\u5411\u91cf\u8868 softirq_vec \uff0c\u548c\u786c\u4e2d\u65ad\u7684\u4e2d\u65ad\u5411\u91cf\u8868\u7684\u5b58\u5728\u662f\u4e00\u4e2a\u76ee\u7684\uff0c\u5c31\u662f\u4e2a \u6570\u7ec4 \u561b\uff0c\u7136\u540e\u91cc\u9762\u7684\u5143\u7d20\u5b58\u50a8\u7740 \u8f6f\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u5730\u5740\u6307\u9488 \uff0c\u5728 action \u4e2d\u3002 \u7136\u540e pending \u4ee3\u8868\u8f6f \u4e2d\u65ad\u6807\u5fd7\u4f4d\uff08\u4eec\uff09 \u3002 \u8fd9\u91cc\u5b8c\u5168\u7531\u4e8e Linux \u91cc\u7528\u4e86\u597d\u591a C \u8bed\u8a00\u7684\u5b8f\u5b9a\u4e49\u641e\u5f97\u5f88\u7ed5\uff0c\u6211\u5148\u653e\u51fa\u6765\uff0c\u522b\u62c5\u5fc3\u3002 typedef struct { unsigned int __softirq_pending; unsigned long idle_timestamp; unsigned int __nmi_count; /* arch dependent */ unsigned int apic_timer_irqs; /* arch dependent */ } irq_cpustat_t; extern irq_cpustat_t irq_stat[]; /* defined in asm/hardirq.h */ #define __IRQ_STAT(cpu, member) (irq_stat[cpu].member) #define __IRQ_STAT(cpu, member) ((void)(cpu), irq_stat[0].member) #define softirq_pending(cpu) __IRQ_STAT((cpu), __softirq_pending) #define local_softirq_pending() softirq_pending(smp_processor_id()) pending = local_softirq_pending(); \u628a\u8fd9\u4e9b\u5b8f\u5b9a\u4e49\u90fd\u7ffb\u8bd1\u8fc7\u6765\uff0c\u518d\u53bb\u6389\u591a\u5904\u7406\u5668\u7684\u903b\u8f91\uff0c\u5c31\u5f53\u53ea\u6709\u4e00\u4e2a\u6838\u5fc3\uff0c\u5c31\u53d8\u5f97\u5f88\u7b80\u5355\u4e86\u3002 pending = irq_stat[0].__softirq_pending; \u5b83\u5c31\u662f\u4e2a int \u503c\u800c\u5df2\uff0c 32 \u4f4d \u3002 \u56de\u8fc7\u5934\u770b\u4e4b\u524d\u7684\uff0c pending\uff08\u8f6f\u4e2d\u65ad\u6807\u5fd7\u4f4d\uff09 \u4e0e h\uff08\u8f6f\u4e2d\u65ad\u5411\u91cf\u8868\uff09 \u7684\u5411\u540e\u79fb\u52a8\u7684\u6b65\u957f\u3002 // \u8f6f\u4e2d\u65ad\u5411\u91cf\u8868\u6307\u9488\u5411\u540e\u79fb\u52a8 h++; // \u540c\u65f6\u8f6f\u4e2d\u65ad\u5904\u7406\u6807\u5fd7\u4f4d\u4e5f\u5411\u540e\u79fb\u52a8 pending >>= 1; \u53ef\u4ee5\u770b\u51fa \u8f6f\u4e2d\u65ad\u6807\u5fd7\u4f4d\u7684\u4e00\u4f4d \u5bf9\u5e94\u7740 \u8f6f\u4e2d\u65ad\u5411\u91cf\u8868\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20 \uff0c\u8fd9\u5c31\u4e0d\u96be\u7406\u89e3\u4e3a\u4ec0\u4e48\u4e2d\u65ad\u5411\u91cf\u8868\u8fd9\u4e2a\u6570\u7ec4\u5927\u5c0f\u662f 32 \u4f4d \u4e86\u3002 \u597d\u4e86\uff0c\u8fd9\u6837\u8fd9\u4e2a\u5185\u6838\u8f6f\u4e2d\u65ad\u5904\u7406\u8fd9\u4e2a\u5b88\u62a4\u8fdb\u7a0b\u505a\u7684\u4e8b\uff0c\u5c31\u5b8c\u5168\u641e\u61c2\u4e86\u3002 \u5c31\u662f \u4e0d\u65ad\u904d\u5386 pending \u8fd9\u4e2a\u8f6f\u4e2d\u65ad\u6807\u5fd7\u4f4d\u7684\u6bcf\u4e00\u4f4d\uff0c\u5982\u679c\u662f 0 \u5c31\u5ffd\u7565\uff0c\u5982\u679c\u662f 1\uff0c\u90a3\u4ece\u4e0a\u9762\u7684 h \u8f6f\u4e2d\u65ad\u5411\u91cf\u8868\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u5143\u7d20\uff0c\u7136\u540e\u6267\u884c action \u65b9\u6cd5\uff0caction \u5c31\u5bf9\u5e94\u7740\u4e0d\u540c\u7684\u8f6f\u4e2d\u65ad\u5904\u7406\u51fd\u6570 \u3002 \u800c\u4e14\u4e5f\u80fd\u770b\u5230\uff0c\u5185\u6838\u8f6f\u4e2d\u65ad\u5904\u7406\u5b88\u62a4\u8fdb\u7a0b\uff0c\u5728 Linux \u542f\u52a8\u540e\uff0c\u4f1a\u81ea\u52a8\u8dd1\u8d77\u6765\uff0c\u90a3\u4e5f\u5c31\u4ee3\u8868\u4e86\uff0c\u8f6f\u4e2d\u65ad\u673a\u5236\u751f\u6548\u4e86\u3002 \u5982\u679c\u8ba9\u4f60\u4f7f\u7528\u8fd9\u4e2a\u5185\u6838\u529f\u80fd\uff0c\u505a\u8f6f\u4e2d\u65ad\u7684\u4e8b\u60c5\uff0c\u90a3\u4e0d\u96be\u60f3\u8c61\uff0c\u5f88\u7b80\u5355\u3002 \u7b2c\u4e00\u6b65\uff0c \u6ce8\u518c\u8f6f\u4e2d\u65ad\u5411\u91cf\u8868 \uff0c\u5176\u5b9e\u5c31\u662f\u628a\u8f6f\u4e2d\u65ad\u5411\u91cf\u8868\u7684\u6bcf\u4e2a action \u53d8\u91cf\u8d4b\u503c\uff0c\u76f8\u5f53\u4e8e\u786c\u4e2d\u65ad\u4e2d\u6ce8\u518c\u4e2d\u65ad\u5411\u91cf\u8868\u7684\u8fc7\u7a0b\u3002 \u7b2c\u4e8c\u6b65\uff0c \u89e6\u53d1\u4e00\u4e2a\u8f6f\u4e2d\u65ad \uff0c\u5176\u5b9e\u5c31\u662f\u4fee\u6539 pending \u7684\u67d0\u4e2a\u6807\u5fd7\u4f4d\uff0c\u89e6\u53d1\u4e00\u6b21\u8f6f\u4e2d\u65ad\uff0c\u76f8\u5f53\u4e8e\u786c\u4e2d\u65ad\u4e2d\u7531\u5916\u90e8\u786c\u4ef6\u3001\u5f02\u5e38\u3001\u6216\u8005 INT \u6307\u4ee4\u6765\u89e6\u53d1\u786c\u4e2d\u65ad\u4e00\u6837\u3002 \u800c\u5b9e\u9645\u4e0a\uff0cLinux \u5c31\u662f\u8fd9\u6837\u505a\u7684\uff0c\u548c\u6211\u4eec\u731c\u7684\u4e00\u6837\uff0c\u6211\u4eec\u4e00\u6b65\u6b65\u770b\u3002","title":"\u5f00\u542f\u5185\u6838\u8f6f\u4e2d\u65ad\u5904\u7406\u7684\u5b88\u62a4\u7ebf\u7a0b"},{"location":"chapter_4/5_soft_irq/#_7","text":"\u5c31\u662f\u7ed9 softirq_vec \u8fd9\u4e2a\u8f6f\u4e2d\u65ad\u5411\u91cf\u8868 \uff0c\u4e5f\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u91cc\u9762\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684 action \u9644\u4e0a\u503c\uff0c\u8d4b\u7684\u5c31\u662f\u8f6f\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u7684\u51fd\u6570\u5730\u5740\u3002 \u8fd9\u4ee3\u7801\u5f88\u5bb9\u6613\u5c31\u53ef\u4ee5\u60f3\u5230\uff0c\u592a\u597d\u5199\u4e86\uff0c\u5c31\u8fd9\u6837\u5457\u3002 softirq_vec[0].action = NULL; softirq_vec[1].action = run_timer_softirq; softirq_vec[2].action = net_tx_action; ... softirq_vec[31].action = xxx; \u6ca1\u9519\uff0c\u5c31\u662f\u8fd9\u6837\uff0c\u4e0d\u8981\u4ee5\u4e3a Linux \u6709\u5565\u795e\u5947\u7684\u64cd\u4f5c\uff0c\u4e5f\u662f\u5f97\u8fd9\u6837\u8001\u8001\u5b9e\u5b9e\u7ed9\u4ed6\u4eec\u8d4b\u503c\u3002 \u6bd4\u5982\uff0c \u7f51\u7edc\u5b50\u7cfb\u7edf\u7684\u521d\u59cb\u5316 \uff0c\u6709\u4e00\u6b65\u5c31\u9700\u8981 \u6ce8\u518c\u7f51\u7edc\u7684\u8f6f\u4e2d\u65ad\u5904\u7406\u51fd\u6570 \u3002 subsys_initcall(net_dev_init); static int __init net_dev_init(void) { ... // \u7f51\u7edc\u53d1\u5305\u7684\u5904\u7406\u51fd\u6570 open_softirq(NET_TX_SOFTIRQ, net_tx_action, NULL); // \u7f51\u7edc\u6536\u5305\u7684\u5904\u7406\u51fd\u6570 open_softirq(NET_RX_SOFTIRQ, net_rx_action, NULL); ... } void open_softirq(int nr, void (*action)(struct softirq_action*), void *data) { softirq_vec[nr].data = data; // \u7b80\u76f4\u5b8c\u5168\u4e00\u6837 softirq_vec[nr].action = action; } \u8fd9\u548c\u6211\u4eec\u5199\u7684\u4e0d\u80fd\u8bf4\u662f\u76f8\u4f3c\uff0c\u7b80\u76f4\u5b8c\u5168\u662f\u4e00\u6837\u5440\uff0c\u53ea\u662f\u591a\u5305\u88c5\u4e86\u4e00\u5c42\u51fd\u6570\u53eb open_softirq \u65b9\u4fbf\u8c03\u7528\u7f62\u4e86\u3002 NET_TX_SOFTIRQ \u8fd9\u4e9b\u662f\u679a\u4e3e\u503c\uff0c\u5177\u4f53\u770b\u8fd9\u4e9b\u679a\u4e3e\u4e5f\u4f1a\u53d1\u73b0 Linux-2.6.0 \u4e2d\u4e5f\u4e0d\u591a\u3002 enum { HI_SOFTIRQ=0, TIMER_SOFTIRQ, NET_TX_SOFTIRQ, NET_RX_SOFTIRQ, SCSI_SOFTIRQ, TASKLET_SOFTIRQ }; \u597d\u5947\u7ffb\u4e86\u4e0b Linux-5.11\uff0c\u53d1\u73b0\u4e5f\u4e0d\u591a enum { HI_SOFTIRQ=0, TIMER_SOFTIRQ, NET_TX_SOFTIRQ, NET_RX_SOFTIRQ, BLOCK_SOFTIRQ, IRQ_POLL_SOFTIRQ, TASKLET_SOFTIRQ, SCHED_SOFTIRQ, HRTIMER_SOFTIRQ, RCU_SOFTIRQ, NR_SOFTIRQS };","title":"\u6ce8\u518c\u4e2d\u65ad\u5411\u91cf\u8868"},{"location":"chapter_4/5_soft_irq/#_8","text":"\u540c\u4e0a\uff0c\u8fd9\u4ee3\u7801\u4e5f\u5f88\u5bb9\u6613\u5c31\u53ef\u4ee5\u60f3\u5230\uff0c\u5c31\u8fd9\u6837\u5457\u3002 \u4f60\u770b\uff0c\u8868\u793a\u8f6f\u4e2d\u65ad\u6807\u5fd7\u4f4d\u7684 p \u4e0d\u662f\u8fd9\u6837\u53d6\u503c\u7684\u4e48\u3002 pending = local_softirq_pending(); \u53d6\u51fa\u6765\u7684\u662f\u4e2a 32 \u4f4d\u7684 int \u503c\u3002 \u90a3\u53ea\u9700\u8981\u628a local_softirq_pending() \u5bf9\u5e94\u7684\u6807\u5fd7\u4f4d\u6539\u6210 1 \u5c31\u89e6\u53d1\u4e86\u8f6f\u4e2d\u65ad\u4e86\uff0c\u6bd4\u5982\u6211\u4eec\u60f3\u89e6\u53d1\u4e00\u4e2a 2 \u53f7\u8f6f\u4e2d\u65ad\uff0c\u5c31\u50cf\u8fd9\u6837\u3002 \u4ee3\u7801\u8fd9\u4e48\u5199\u5c31\u884c\u4e86\u3002 local_softirq_pending() |= 1UL << 2; \u800c Linux \u5c45\u7136\u4e5f\u662f\u8fd9\u4e48\u505a\u7684\uff0c\u6211\u4eec\u770b\u7f51\u7edc\u6570\u636e\u5305\u5230\u6765\u4e4b\u540e\uff0c\u6709\u4e00\u6bb5\u4ee3\u7801\u3002 #define __raise_softirq_irqoff(nr) \\ do { local_softirq_pending() |= 1UL << (nr); } while (0) static inline void __netif_rx_schedule(struct net_device *dev) { list_add_tail(&dev->poll_list, &__get_cpu_var(softnet_data).poll_list); // \u53d1\u51fa\u8f6f\u4e2d\u65ad __raise_softirq_irqoff(NET_RX_SOFTIRQ); } \u5982\u679c\u628a do while(0) \u8fd9\u79cd C \u8bed\u8a00\u5b8f\u5b9a\u4e49\u7684\u4e00\u79cd\u73a9\u6cd5\u53bb\u6389\uff0c\u5176\u5b9e\u5c31\u548c\u6211\u4eec\u7684\u5b8c\u5168\u4e00\u6837\u4e86\uff0c\u8fd9\u56de\u53ef\u771f\u7684\u662f\u5b8c\u5168\u4e00\u6837\u3002 static inline void __netif_rx_schedule(struct net_device *dev) { list_add_tail(&dev->poll_list, &__get_cpu_var(softnet_data).poll_list); // \u53d1\u51fa\u8f6f\u4e2d\u65ad local_softirq_pending() |= 1UL << (NET_RX_SOFTIRQ) } \u6240\u4ee5\u6211\u4e4b\u524d\u603b\u662f\u8bf4\uff0c\u5f53\u4f60\u771f\u7684\u53bb\u63a5\u89e6\u8fd9\u4e2a\u4e1c\u897f\u7684\u65f6\u5019\uff0c\u4e00\u4e2a\u4e2a\u7ec6\u8282\u9010\u6b65\u62e8\u5f00\u540e\uff0c\u4f1a\u53d1\u73b0\u4e00\u70b9\u4e5f\u4e0d\u96be\uff0c\u800c\u4e14\u90fd\u662f\u987a\u7406\u6210\u7ae0\uff0c\u548c\u6211\u4eec\u731c\u6d4b\u7684\u4e5f\u4e00\u6837\u3002","title":"\u89e6\u53d1\u4e00\u6b21\u8f6f\u4e2d\u65ad"},{"location":"chapter_4/5_soft_irq/#_9","text":"\u8f6f\u4e2d\u65ad\u6ca1\u4ec0\u4e48\u795e\u5947\u7684\u9a9a\u64cd\u4f5c\uff0c \u5c31\u662f\u4e00\u7ec4\u4e00\u4f4d\u4e00\u4f4d\u7684\u8f6f\u4e2d\u65ad\u6807\u5fd7\u4f4d\uff0c\u5bf9\u5e94\u7740\u8f6f\u4e2d\u65ad\u5411\u91cf\u8868\u4e2d\u4e00\u4e2a\u4e00\u4e2a\u7684\u4e2d\u65ad\u5904\u7406\u51fd\u6570\uff0c\u7136\u540e\u6709\u4e2a\u5185\u6838\u5b88\u62a4\u8fdb\u7a0b\u4e0d\u65ad\u53bb\u5faa\u73af\u5224\u65ad\u8c03\u7528 \uff0c\u800c\u5df2\u3002 \u7136\u540e\uff0c\u7531\u5404\u4e2a\u5b50\u7cfb\u7edf\u8c03\u7528 open_softirq \u8d1f\u8d23\u628a\u8f6f\u4e2d\u65ad\u5411\u91cf\u8868\u9644\u4e0a\u503c\u3002 \u518d\u7531\u5404\u4e2a\u9700\u8981\u89e6\u53d1\u8f6f\u4e2d\u65ad\u7684\u5730\u65b9\u8c03\u7528 raise_softirq_irqoff \u4fee\u6539\u4e2d\u65ad\u6807\u5fd7\u4f4d\u7684\u503c\u3002 \u540e\u9762\u7684\u5de5\u4f5c\u5c31\u4ea4\u7ed9\u5185\u6838\u90a3\u4e2a\u8f6f\u4e2d\u65ad\u5b88\u62a4\u8fdb\u7a0b\uff0c\u53bb\u89e6\u53d1\u8fd9\u4e2a\u8f6f\u4e2d\u65ad\u4e86\uff0c\u5176\u5b9e\u5c31\u662f\u4e2a\u904d\u5386\u5e76\u67e5\u627e\u5bf9\u5e94\u51fd\u6570\u7684\u7b80\u5355\u8fc7\u7a0b\u3002","title":"\u5c0f\u7ed3"},{"location":"chapter_4/5_soft_irq/#_10","text":"\u4e2d\u65ad\u7684\u4e0a\u534a\u90e8\u662f\u5728\u5177\u4f53 irq \u53f7\u5b8c\u5168\u7981\u6b62\u7684\u72b6\u6001\u4e0b\u6267\u884c\u7684, \u4e0b\u534a\u90e8\u5219\u4e0d\u662f. \u4e0b\u534a\u90e8\u7531\u591a\u79cd\u5b9e\u73b0\u65b9\u5f0f, \u4f8b\u5982: \u8f6f\u4e2d\u65ad \u3001 tasklet \u3001 workqueue , \u53ea\u6709 workqueue \u662f\u5728\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u4e2d\u6267\u884c, \u53ef\u4ee5\u7761\u7720\u548c\u88ab\u91cd\u65b0\u8c03\u5ea6, \u800c\u8f6f\u4e2d\u65ad\u548c tasklet \u662f\u4e0d\u80fd\u7761\u7720\u7684, \u56e0\u4e3a\u4ed6\u662f\u5728\u4e2d\u65ad\u4e0a\u4e0b\u6587\u4e2d\u6267\u884c. \u4e0a\u534a\u90e8\u6838\u5fc3\u51fd\u6570\u662f do_irq() \u51fd\u6570,\u6bcf\u6b21\u8c03\u7528 do_irq() \u51fd\u6570\u65f6\uff0c\u4f20\u5165\u4e86 CPU \u5f53\u524d\u5bc4\u5b58\u5668\u7684\u72b6\u6001. unsigned do_IRQ(struct pt_regs regs) \u4e0b\u534a\u90e8\u8fd0\u884c\u65f6\uff0c\u5141\u8bb8\u786c\u4e2d\u65ad\uff08\u4f8b\u5982\u7f51\u5361\u4e0b\u534a\u90e8\u8fd0\u884c\u65f6\uff0c\u53c8\u5141\u8bb8\u5176\u4ed6\u786c\u4e2d\u65ad\u4e86\uff09 \u4e0a\u534a\u90e8\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u4e2d\uff0c\u89e6\u53d1\u4e86\u4e0b\u534a\u90e8\u7a0b\u5e8f. \u4e0b\u534a\u90e8\u7a0b\u5e8f\u90fd\u662f\u5728 do_softirq()\u51fd\u6570\u4e2d\u8fd0\u884c. \u90a3\u4e48\u89e6\u53d1\u540e\uff0c\u5177\u4f53\u4f55\u65f6\u8fd0\u884c\u5462\uff1f \u5728\u4e0a\u534a\u90e8\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u6216\u8005\u5728 ksoftirqd \u7ebf\u7a0b\u91cc \u5bf9\u4e8e\u786c\u4ef6\u9a71\u52a8\u7684\u7814\u53d1\u4eba\u5458\uff0c\u53ef\u4ee5\u7528 1 request_irq()\u51fd\u6570 \u2014> \u6ce8\u518c\u4e0a\u534a\u90e8\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f 2 \u53ef\u4ee5\u7528 open_irq()\u51fd\u6570 \u2014> \u6ce8\u518c\u4e0b\u534a\u90e8\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f","title":"\u4e2d\u65ad\u7684\u4e0a\u534a\u90e8\u548c\u4e0b\u534a\u90e8\u8bf4\u660e"},{"location":"chapter_4/5_soft_irq/#_11","text":"\u4e0a\u534a\u90e8\u76f4\u63a5\u5904\u7406\u786c\u4ef6\u8bf7\u6c42\uff0c\u4e5f\u5c31\u662f\u786c\u4e2d\u65ad\uff0c\u4e3b\u8981\u662f\u8d1f\u8d23\u8017\u65f6\u77ed\u7684\u5de5\u4f5c\uff0c\u7279\u70b9\u662f\u5feb\u901f\u6267\u884c\uff1b \u4e0b\u534a\u90e8\u662f\u7531\u5185\u6838\u89e6\u53d1\uff0c\u4e5f\u5c31\u8bf4\u8f6f\u4e2d\u65ad\uff0c\u4e3b\u8981\u662f\u8d1f\u8d23\u4e0a\u534a\u90e8\u672a\u5b8c\u6210\u7684\u5de5\u4f5c\uff0c\u901a\u5e38\u90fd\u662f\u8017\u65f6\u6bd4\u8f83\u957f\u7684\u4e8b\u60c5\uff0c\u7279\u70b9\u662f\u5ef6\u8fdf\u6267\u884c\uff1b\u3002Linux \u4e2d\u7684\u8f6f\u4e2d\u65ad\u5305\u62ec\u7f51\u7edc\u6536\u53d1\u3001\u5b9a\u65f6\u3001\u8c03\u5ea6\u3001RCU \u9501\u7b49\u5404\u79cd\u7c7b\u578b\u3002","title":"\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u4e0a\u90e8\u5206\u548c\u4e0b\u534a\u90e8\u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a"},{"location":"chapter_4/5_soft_irq/#_12","text":"\u5728\u4e0b\u5217\u5730\u65b9\uff0c\u5f85\u5904\u7406\u7684\u8f6f\u4e2d\u65ad\u4f1a\u88ab\u68c0\u67e5\u548c\u6267\u884c\uff1a a. \u4ece\u4e00\u4e2a\u786c\u4ef6\u4e2d\u65ad\u4ee3\u7801\u5904\u8fd4\u56de\u65f6 b. \u5728 ksoftirqd \u5185\u6838\u7ebf\u7a0b\u4e2d c. \u5728\u90a3\u4e9b\u663e\u793a\u68c0\u67e5\u548c\u6267\u884c\u5f85\u5904\u7406\u7684\u8f6f\u4e2d\u65ad\u7684\u4ee3\u7801\u4e2d\uff0c\u5982\u7f51\u7edc\u5b50\u7cfb\u7edf\u4e2d","title":"\u8f6f\u4e2d\u65ad\u6267\u884c\u7684\u65f6\u673a"},{"location":"chapter_4/5_soft_irq/#_13","text":"","title":"\u8f6f\u4e2d\u65ad\u7684\u5e38\u7528\u4f18\u5316\u6280\u80fd"},{"location":"chapter_4/5_soft_irq/#1","text":"\u5728 Linux \u7cfb\u7edf\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b /proc/softirqs \u7684 \u5185\u5bb9\u6765\u77e5\u6653\u300c\u8f6f\u4e2d\u65ad\u300d\u7684\u8fd0\u884c\u60c5\u51b5\uff0c\u4ee5\u53ca /proc/interrupts \u7684 \u5185\u5bb9\u6765\u77e5\u6653\u300c\u786c\u4e2d\u65ad\u300d\u7684\u8fd0\u884c\u60c5\u51b5\u3002 \u63a5\u4e0b\u6765\uff0c\u5c31\u6765\u7b80\u5355\u7684\u89e3\u6790\u4e0b /proc/softirqs \u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u5728\u6211\u670d\u52a1\u5668\u4e0a\u67e5\u770b\u5230\u7684\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a \u4f60\u53ef\u4ee5\u770b\u5230\uff0c\u6bcf\u4e00\u4e2a CPU \u90fd\u6709\u81ea\u5df1\u5bf9\u5e94\u7684\u4e0d\u540c\u7c7b\u578b\u8f6f\u4e2d\u65ad\u7684\u7d2f\u8ba1\u8fd0\u884c\u6b21\u6570\uff0c\u6709 3 \u70b9\u9700\u8981\u6ce8\u610f\u4e0b\u3002 \u7b2c\u4e00\u70b9\uff0c\u8981\u6ce8\u610f\u7b2c\u4e00\u5217\u7684\u5185\u5bb9\uff0c\u5b83\u662f\u4ee3\u8868\u7740\u8f6f\u4e2d\u65ad\u7684\u7c7b\u578b\uff0c\u5728\u6211\u7684\u7cfb\u7edf\u91cc\uff0c\u8f6f\u4e2d\u65ad\u5305\u62ec\u4e86 10 \u4e2a\u7c7b\u578b\uff0c\u5206\u522b\u5bf9\u5e94\u4e0d\u540c\u7684\u5de5\u4f5c\u7c7b\u578b\uff0c\u6bd4\u5982 NET_RX \u8868\u793a\u7f51\u7edc\u63a5\u6536\u4e2d\u65ad\uff0cNET_TX \u8868\u793a\u7f51\u7edc\u53d1\u9001\u4e2d\u65ad\u3001TIMER \u8868\u793a\u5b9a\u65f6\u4e2d\u65ad\u3001RCU \u8868\u793a RCU \u9501\u4e2d\u65ad\u3001SCHED \u8868\u793a\u5185\u6838\u8c03\u5ea6\u4e2d\u65ad\u3002 \u7b2c\u4e8c\u70b9\uff0c\u8981\u6ce8\u610f\u540c\u4e00\u79cd\u7c7b\u578b\u7684\u8f6f\u4e2d\u65ad\u5728\u4e0d\u540c CPU \u7684\u5206\u5e03\u60c5\u51b5\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u540c\u4e00\u79cd\u4e2d\u65ad\u5728\u4e0d\u540c CPU \u4e0a\u7684\u7d2f\u8ba1\u6b21\u6570\u76f8\u5dee\u4e0d\u591a\uff0c\u6bd4\u5982\u6211\u7684\u7cfb\u7edf\u91cc\uff0cNET_RX \u5728 CPU0 \u3001CPU1\u3001CPU2\u3001CPU3 \u4e0a\u7684\u4e2d\u65ad\u6b21\u6570\u57fa\u672c\u662f\u540c\u4e00\u4e2a\u6570\u91cf\u7ea7\uff0c\u76f8\u5dee\u4e0d\u591a\u3002 \u7b2c\u4e09\u70b9\uff0c\u8fd9\u4e9b\u6570\u503c\u662f\u7cfb\u7edf\u8fd0\u884c\u4ee5\u6765\u7684\u7d2f\u8ba1\u4e2d\u65ad\u6b21\u6570\uff0c\u6570\u503c\u7684\u5927\u5c0f\u6ca1\u4ec0\u4e48\u53c2\u8003\u610f\u4e49\uff0c\u4f46\u662f\u7cfb\u7edf\u7684\u4e2d\u65ad\u6b21\u6570\u7684\u53d8\u5316\u901f\u7387\u624d\u662f\u6211\u4eec\u8981\u5173\u6ce8\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 watch -d cat /proc/softirqs \u547d\u4ee4\u67e5\u770b\u4e2d\u65ad\u6b21\u6570\u7684\u53d8\u5316\u901f\u7387\u3002","title":"1 \u7cfb\u7edf\u91cc\u6709\u54ea\u4e9b\u8f6f\u4e2d\u65ad\uff1f"},{"location":"chapter_4/5_soft_irq/#2","text":"\u5f53\u4f60\u53d1\u73b0\u8f6f\u4e2d\u65ad\u5360\u7528\u7684 CPU \u5229\u7528\u7387\u6bd4\u8f83\u9ad8\u65f6\uff0c\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\u6392\u67e5 \u7f51\u5361\u8f6f\u4e2d\u65ad\u7684\u4f18\u5316,\u628a\u4e2d\u65ad\u4fe1\u53f7\u53d1\u7ed9\u4e0d\u540c\u7684 CPU\uff0c\u56e0\u4e3a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6240\u6709\u4e2d\u65ad\u90fd\u53d1\u7ed9\u4e86 CPU0\uff0c\u5bfc\u81f4 CPU0 \u88ab\u6253\u6ee1\u3002\u628a\u4e2d\u65ad\u4fe1\u53f7\u53d1\u7ed9\u4e0d\u540c\u7684 CPU \u4e4b\u540e\uff0c\u591a\u4e2a CPU \u80af\u5b9a\u6bd4\u5355\u4e2a CPU \u5904\u7406\u8d77\u6765\u5feb\uff0c\u56e0\u6b64\u6027\u80fd\u80fd\u591f\u663e\u8457\u63d0\u5347\u3002 \u786c\u4ef6 CPU \u529f\u7387\u662f\u5426\u5f00\u542f\u6700\u5927\u6027\u80fd\u6a21\u5f0f. \u5982\u679c\u4e00\u53f0\u673a\u5668\u662f\u8282\u80fd\u6a21\u5f0f\u3001\u4e00\u53f0\u662f MaxPerformance \u6a21\u5f0f, \u90a3\u4e48\u5728\u76f8\u540c\u4e1a\u52a1\u91cf\u7684\u60c5\u51b5\u4e0b, \u8282\u80fd\u6a21\u5f0f\u90a3\u53f0\u7684 CPU soft irq \u5c31\u4f1a\u9ad8. \u9ad8\u6d41\u91cf redis \u670d\u52a1\u5668\uff0c\u5e76\u6ca1\u6709\u628a\u7f51\u5361\u8f6f\u4e2d\u65ad\u8d1f\u8f7d\u5747\u8861\u5230\u6240\u6709 CPU \u4e0a\uff0c\u800c\u662f\u628a\u7f51\u5361\u8f6f\u4e2d\u65ad\u7ed1\u5b9a\u7684 NUMA \u67b6\u6784\u4e2d\u7684\u5176\u4e2d\u4e00\u4e2a\u8282\u70b9\uff08\u4f8b\u5982\u8be5\u8282\u70b9\u662f 4 \u6838 CPU\uff09\uff0c\u7136\u540e\u628a redis \u8fdb\u7a0b\u7ed1\u5b9a\u7684 NUMA \u67b6\u6784\u4e2d\u7684\u5176\u4ed6\u8282\u70b9\uff08\u4f8b\u5982\u5176\u4ed6 1 \u4e2a\u8282\u70b9\uff09","title":"2 \u5e38\u7528\u7684\u4e00\u4e9b\u4f18\u5316\u7ecf\u9a8c"},{"location":"chapter_4/5_soft_irq/#3-cpu","text":"\u8981\u60f3\u77e5\u9053\u5f53\u524d\u7684\u7cfb\u7edf\u7684\u8f6f\u4e2d\u65ad\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 top \u547d\u4ee4\u67e5\u770b\uff0c\u4e0b\u9762\u662f\u4e00\u53f0\u670d\u52a1\u5668\u4e0a\u7684 top \u7684\u6570\u636e\uff1a \u4e0a\u56fe\u4e2d\u7684\u9ec4\u8272\u90e8\u5206 si\uff0c\u5c31\u662f CPU \u5728\u8f6f\u4e2d\u65ad\u4e0a\u7684\u4f7f\u7528\u7387\uff0c\u800c\u4e14\u53ef\u4ee5\u53d1\u73b0\uff0c\u6bcf\u4e2a CPU \u4f7f\u7528\u7387\u90fd\u4e0d\u9ad8\uff0c\u4e24\u4e2a CPU \u7684\u4f7f\u7528\u7387\u867d\u7136\u53ea\u6709 3% \u548c 4% \u5de6\u53f3\uff0c\u4f46\u662f\u90fd\u662f\u7528\u5728\u8f6f\u4e2d\u65ad\u4e0a\u4e86\u3002 \u53e6\u5916\uff0c\u4e5f\u53ef\u4ee5\u770b\u5230 CPU \u4f7f\u7528\u7387\u6700\u9ad8\u7684\u8fdb\u7a0b\u4e5f\u662f\u8f6f\u4e2d\u65ad ksoftirqd\uff0c\u56e0\u6b64\u53ef\u4ee5\u8ba4\u4e3a\u6b64\u65f6\u7cfb\u7edf\u7684\u5f00\u9500\u4e3b\u8981\u6765\u6e90\u4e8e\u8f6f\u4e2d\u65ad\u3002 \u5982\u679c\u8981\u77e5\u9053\u662f\u54ea\u79cd\u8f6f\u4e2d\u65ad\u7c7b\u578b\u5bfc\u81f4\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 watch -d cat /proc/softirqs \u547d\u4ee4\u67e5\u770b\u6bcf\u4e2a\u8f6f\u4e2d\u65ad\u7c7b\u578b\u7684\u4e2d\u65ad\u6b21\u6570\u7684\u53d8\u5316\u901f\u7387\u3002 \u8fdb\u800c\u786e\u5b9a\u95ee\u9898\u6240\u5728.","title":"3 \u5982\u4f55\u5b9a\u4f4d\u8f6f\u4e2d\u65ad CPU \u4f7f\u7528\u7387\u8fc7\u9ad8\u7684\u95ee\u9898\uff1f"},{"location":"chapter_4/5_soft_irq/#_14","text":"\u4e2d\u65ad\u4e0b\u534a\u90e8\u6709\u54ea 3 \u79cd\u673a\u5236? softirq , tasklet , workqueue","title":"\u4e2d\u65ad\u4e0b\u534a\u90e8\u4e09\u79cd\u673a\u5236\u7684\u533a\u522b\u548c\u57fa\u7840\u4f7f\u7528"},{"location":"chapter_4/5_soft_irq/#3","text":"\u8f6f\u4e2d\u65ad\u4f7f\u7528\u7684\u51e0\u4e2a\u8981\u70b9\uff1a \u4e00\u4e2a\u8f6f\u4e2d\u65ad\u4e0d\u4f1a\u62a2\u5360\u53e6\u5916\u4e00\u4e2a\u8f6f\u4e2d\u65ad\u3002 \u60df\u4e00\u53ef\u4ee5\u62a2\u5360\u8f6f\u4e2d\u65ad\u7684\u662f\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u3002 \u5176\u4ed6\u7684\u8f6f\u4e2d\u65ad\u53ef\u4ee5\u5728\u5176\u4ed6\u5904\u7406\u5668\u4e0a\u540c\u65f6\u6267\u884c","title":"3 \u79cd\u4e0b\u534a\u90e8\u673a\u5236\u7684\u533a\u522b"},{"location":"chapter_4/5_soft_irq/#1-softirq","text":"softirq \u5373\u8f6f\u4e2d\u65ad\uff0c\u4ee3\u7801\u4f4d\u4e8e kernel/softirq.c \u6587\u4ef6\u4e2d\uff1b \u6bcf\u4e2a\u8f6f\u4e2d\u65ad\u7531 softirq_action \u7ed3\u6784\u8868\u793a\uff1a \u5728 softirq.c \u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8f6f\u4e2d\u65ad\u5411\u91cf\u6570\u7ec4 softirq_vec \uff1a static struct softirq_action softirq_vec[NR_SOFTIRQS] __cacheline_aligned_in_smp; enum { HI_SOFTIRQ=0, /*\u7528\u4e8e\u9ad8\u4f18\u5148\u7ea7\u7684tasklet*/ TIMER_SOFTIRQ, /*\u7528\u4e8e\u5b9a\u65f6\u5668\u7684\u4e0b\u534a\u90e8*/ NET_TX_SOFTIRQ, /*\u7528\u4e8e\u7f51\u7edc\u5c42\u53d1\u5305*/ NET_RX_SOFTIRQ, /*\u7528\u4e8e\u7f51\u7edc\u5c42\u6536\u62a5*/ BLOCK_SOFTIRQ, BLOCK_IOPOLL_SOFTIRQ, TASKLET_SOFTIRQ, /*\u7528\u4e8e\u4f4e\u4f18\u5148\u7ea7\u7684tasklet*/ SCHED_SOFTIRQ, HRTIMER_SOFTIRQ, RCU_SOFTIRQ, /* Preferable RCU should always be the last softirq */ NR_SOFTIRQS }; \u6570\u7ec4\u7684\u6210\u5458\u6570\u7531 NR_SOFTIRQS \u51b3\u5b9a\uff0c\u662f\u4e00\u4e2a\u679a\u4e3e\u5e38\u91cf\u3002 \u65b0\u589e\u4e00\u4e2a\u8f6f\u4e2d\u65ad\u65f6\uff0c\u9700\u8981\u5728\u6587\u4ef6 include/linux/interrupt.h \u4e2d\u6dfb\u52a0\u4e00\u4e2a\u679a\u4e3e\u5e38\u91cf\u3002","title":"1 softirq \u6838\u5fc3\u6570\u636e\u7ed3\u6784\u548c\u4f7f\u7528"},{"location":"chapter_4/5_soft_irq/#_15","text":"\u6ce8\u518c\u8f6f\u4e2d\u65ad void open_softirq(int nr, void (*action)(struct softirq_action *)) \u5373\u6ce8\u518c\u5bf9\u5e94\u7c7b\u578b\u7684\u5904\u7406\u51fd\u6570\u5230\u5168\u5c40\u6570\u7ec4 softirq_vec \u4e2d\u3002 \u89e6\u53d1\u8f6f\u4e2d\u65ad void raise_softirq(unsigned int nr) \u5b9e\u9645\u4e0a\u5373\u4ee5\u8f6f\u4e2d\u65ad\u7c7b\u578b nr \u4f5c\u4e3a\u504f\u79fb\u91cf\u4f1a\u7f6e\u4f4d irq_stat[cpu_id] \u7684\u6210\u5458\u53d8\u91cf __softirq_pending . __softirq_pending \u5b57\u6bb5\u4e2d\u7684\u6bcf\u4e00\u4e2a bit\uff0c\u5bf9\u5e94\u7740\u67d0\u4e00\u4e2a\u8f6f\u4e2d\u65ad\uff0c\u67d0\u4e2a bit \u88ab\u7f6e\u4f4d\uff0c\u8bf4\u660e\u6709\u76f8\u5e94\u7684\u8f6f\u4e2d\u65ad\u7b49\u5f85\u5904\u7406\u3002 \u8fd9\u4e5f\u662f\u540c\u4e00\u7c7b\u578b\u8f6f\u4e2d\u65ad\u53ef\u4ee5\u5728\u591a\u4e2a cpu \u4e0a\u5e76\u884c\u8fd0\u884c\u7684\u6839\u672c\u539f\u56e0\u3002","title":"\u76f8\u5173\u63a5\u53e3"},{"location":"chapter_4/5_soft_irq/#_16","text":"\u4ee5\u4e00\u4e2a \u6309\u952e\u9a71\u52a8\u7684\u4e2d\u65ad\u5904\u7406 \u4e3a\u4f8b\uff0c\u5c06\u6309\u952e\u9a71\u52a8\u7684\u4e2d\u65ad\u5904\u7406\u5206\u6210\u4e0a\u4e0b\u4e24\u90e8\u5206\uff1a \u4e0a\u534a\u90e8\uff1a\u8bfb\u53d6\u952e\u503c\uff0c\u89e6\u53d1\u8f6f\u4e2d\u65ad \u4e0b\u534a\u90e8\uff1a\u5524\u9192\u8fdb\u7a0b \u8f6f\u4e2d\u65ad\u7684\u6ce8\u518c\uff0c\u5728\u9a71\u52a8\u7684\u5165\u53e3\u51fd\u6570\uff0c\u6ce8\u518c\u8f6f\u4e2d\u65ad\uff1a \u6dfb\u52a0\u7684\u679a\u4e3e\u5e38\u91cf\uff1a \u53ef\u4ee5\u770b\u5230\uff0c\u4f7f\u7528\u8f6f\u4e2d\u65ad\u662f\u9700\u8981\u4fee\u6539\u5185\u6838\uff0c\u6dfb\u52a0\u4e00\u4e2a\u679a\u4e3e\u7684\uff0c\u6709\u4e9b\u7e41\u7410\u3002 \u6240\u4ee5\uff0c\u901a\u5e38\u6211\u4eec \u4e0d\u5efa\u8bae\u64c5\u81ea\u589e\u52a0\u8f6f\u4e2d\u65ad\u7684\u6570\u91cf \uff0c\u5982\u679c\u9700\u8981\u65b0\u7684\u8f6f\u4e2d\u65ad\uff0c\u5c3d\u53ef\u80fd\u628a\u5b83\u4eec\u5b9e\u73b0\u4e3a \u57fa\u4e8e\u8f6f\u4e2d\u65ad\u7684 tasklet \u5f62\u5f0f \u3002","title":"\u8f6f\u4e2d\u65ad\u5b9e\u4f8b"},{"location":"chapter_4/5_soft_irq/#2-tasklet","text":"tasklet \u662f\u5229\u7528 \u8f6f\u4e2d\u65ad \u5b9e\u73b0\u7684\u4e00\u79cd \u4e0b\u534a\u90e8\u673a\u5236 \u3002 \u90a3\u662f\u7528 \u8f6f\u4e2d\u65ad \u8fd8\u662f tasklet \u597d\u5462\uff1f \u9009\u62e9\u5230\u5e95\u662f\u7528 \u8f6f\u4e2d\u65ad \u8fd8\u662f tasklet \u5176\u5b9e\u5f88\u7b80\u5355\uff1a \u901a\u5e38\u4f60\u5e94\u8be5\u7528 tasklet \u3002\u5c31\u50cf\u6211\u4eec\u5728\u524d\u9762\u770b\u5230\u7684\uff0c\u8f6f\u4e2d\u65ad\u8d44\u6e90\u6709\u9650\uff0c\u4e5f\u9ebb\u70e6\uff0c\u800c\u4e14\u8f6f\u4e2d\u65ad\u7684\u4f7f\u7528\u8005\u5c48\u6307\u53ef\u6570\u3002\u5b83\u53ea\u5728\u90a3\u4e9b\u6267\u884c\u9891\u7387\u5f88\u9ad8\u548c\u8fde\u7eed\u6027\u8981\u6c42\u5f88\u9ad8\u7684\u60c5\u51b5\u4e0b\u624d\u9700\u8981\u3002 \u53ea\u6709 \u7f51\u7edc \u548c SCSI 2 \u4e2a\u5b50\u7cfb\u7edf\u76f4\u63a5\u4f7f\u7528\u8f6f\u4e2d\u65ad \u800c tasklet \u5374\u6709\u66f4\u5e7f\u6cdb\u7684\u7528\u9014 \u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u7528 tasklet \u6548\u679c\u90fd\u4e0d\u9519\uff0c\u800c\u4e14\u5b83\u4eec\u8fd8\u975e\u5e38\u5bb9\u6613\u4f7f\u7528\u3002 \u56e0\u4e3a tasklet \u662f\u901a\u8fc7\u8f6f\u4e2d\u65ad\u5b9e\u73b0\u7684\uff0c\u6240\u4ee5\u5b83\u4eec \u672c\u8eab\u4e5f\u662f\u8f6f\u4e2d\u65ad \u3002","title":"2 tasklet \u6838\u5fc3\u6570\u636e\u7ed3\u6784\u548c\u4f7f\u7528"},{"location":"chapter_4/5_soft_irq/#tasklet","text":"tasklet \u7684\u4f7f\u7528\u6b65\u9aa4\u5982\u4e0b\uff1a 1\u3001\u7f16\u5199 tasklet \u5904\u7406\u51fd\u6570\uff08\u4e0b\u534a\u90e8\uff09 void my_tasklet_fun (unsigned long data) 2\u3001\u58f0\u660e tasklet //\u9759\u6001 DECLARE_TASKLET(my_tasklet,my_tasklet_fun,data); //\u52a8\u6001 struct tasklet_struct xxx; tasklet_init(&xxx,tasklet_handler,dev) 3\u3001\u8c03\u5ea6 tasklet tasklet_schedule(&my_tasklet); \u767b\u8bb0 my_tasklet, \u7136\u540e\u5141\u8bb8\u7cfb\u7edf\u5728\u5408\u9002\u7684\u65f6\u95f4\u8c03\u5ea6\u5b83\u3002","title":"tasklet \u4f7f\u7528"},{"location":"chapter_4/5_soft_irq/#tasklet_1","text":"\u4ee5\u6309\u952e\u4e2d\u65ad\u9a71\u52a8\u4e3a\u4f8b\uff1a \u5148\u4f7f\u7528 DECLARE_TASKLET \u9759\u6001\u58f0\u660e\u4e00\u4e2a tasklet \uff0c\u6307\u5b9a\u5176\u4e0b\u534a\u90e8\u51fd\u6570\u4e3a btn_tasklet_func \uff0c\u5728\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\uff08\u4e0a\u534a\u90e8\uff09\u83b7\u53d6\u6309\u952e\u503c\u540e\uff0c\u8c03\u7528 tasklet_schedule \u8c03\u5ea6\u3002","title":"tasklet \u5b9e\u4f8b"},{"location":"chapter_4/5_soft_irq/#3-workqueue","text":"work queue \u5373 \u5de5\u4f5c\u961f\u5217 \uff0c\u4e5f\u662f\u4e2d\u65ad\u4e0b\u534a\u90e8\u7684\u4e00\u79cd\u3002 work queue \u5c06\u4e0b\u534a\u90e8\u5de5\u4f5c\u63a8\u8fdf\u7ed9\u4e00\u4e2a \u5185\u6838\u7ebf\u7a0b \u53bb\u6267\u884c \u2014\u2014work \u603b\u662f\u8fd0\u884c\u4e8e\u8fdb\u7a0b\u4e0a\u4e0b\u6587. \u4e24\u4e2a\u8981\u70b9\uff1a \u5982\u679c\u63a8\u8fdf\u7684\u5de5\u4f5c\u9700\u8981 \u7761\u7720 \uff0c\u5219\u4f7f\u7528 work queue \u3002\u5426\u5219\u4f7f\u7528 softirq \u6216 tasklet . work queue \u9002\u7528\u4e8e\u9700\u8981\u5206\u914d\u5927\u91cf\u7684\u5185\u5b58\uff0c\u83b7\u5f97\u4e00\u4e2a\u4fe1\u53f7\u91cf\uff0c\u6216\u8005\u6267\u884c\u963b\u585e\u7684 I/O \u7684\u60c5\u51b5. \u5de5\u4f5c\u961f\u5217\u7684\u76f8\u5173\u63a5\u53e3\u51fd\u6570\uff1a \u5728\u4f7f\u7528\u4e0a\uff0c \u5de5\u4f5c\u961f\u5217 \u4e0e tasklet \u662f\u7c7b\u4f3c\u7684\uff1a","title":"3 workqueue \u6838\u5fc3\u6570\u636e\u7ed3\u6784\u548c\u4f7f\u7528"},{"location":"chapter_4/5_soft_irq/#_17","text":"\u6211\u4eec\u77e5\u9053\u6309\u7167\u4f18\u5148\u7ea7\u6765\u8bf4\uff0c \u4e2d\u65ad>\u8f6f\u4e2d\u65ad>\u7528\u6237\u8fdb\u7a0b \uff0c\u4e5f\u5c31\u662f\u8bf4\u4e2d\u65ad\u53ef\u4ee5\u6253\u65ad\u8f6f\u4e2d\u65ad\uff0c\u800c\u8f6f\u4e2d\u65ad\u53c8\u53ef\u4ee5\u6253\u65ad\u7528\u6237\u8fdb\u7a0b\u3002","title":"\u786c\u4e2d\u65ad\u3001\u8f6f\u4e2d\u65ad\u3001\u7528\u6237\u8fdb\u7a0b\u4e4b\u95f4\u7684\u4f18\u5148\u7ea7"},{"location":"chapter_4/5_soft_irq/#1-ksoftirqd","text":"\u95ee\u9898\u662f\u4ec0\u4e48? \u5982\u679c\u8f6f\u4e2d\u65ad\u5168\u90e8\u5728 ksoftirqd \u7ebf\u7a0b\u4e2d\u6267\u884c, \u90a3\u4e48\u5b83\u80af\u5b9a\u662f\u53ef\u4ee5\u518d\u8c03\u5ea6\u7684, \u9664\u975e ksoftirqd \u7ebf\u7a0b\u4e00\u76f4\u662f\u6240\u6709\u7ebf\u7a0b\u4e2d\u6700\u9ad8\u4f18\u5148\u7ea7\u7684 \u4e8b\u5b9e\u662f\u4ec0\u4e48? \u5982\u679c\u8f6f\u4e2d\u65ad\u672c\u8eab\u51fa\u73b0\u7684\u9891\u7387\u8f83\u9ad8\uff0c\u518d\u52a0\u4e0a\u4ed6\u4eec\u53c8\u6709\u5c06\u81ea\u5df1\u91cd\u65b0\u8bbe\u7f6e\u4e3a\u53ef\u6267\u884c\u72b6\u6001\u7684\u80fd\u529b\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bfc\u81f4\u7528\u6237\u7a7a\u95f4\u7684\u8fdb\u7a0b\u65e0\u6cd5\u83b7\u5f97\u8db3\u591f\u7684\u5904\u7406\u65f6\u95f4\uff0c\u56e0\u800c\u5904\u4e8e\u9965\u997f\u72b6\u6001\u3002\u4e3a\u4e86\u907f\u514d\u7528\u6237\u8fdb\u7a0b\u7684\u9965\u997f\u3002\u5185\u6838\u5f00\u53d1\u8005\u505a\u4e86\u4e00\u4e9b\u6298\u4e2d\uff0c\u6700\u7ec8\u5728\u5185\u6838\u7684\u5b9e\u73b0\u65b9\u6848\u4e2d\u662f\u4e0d\u4f1a\u7acb\u5373\u5904\u7406\u7531\u8f6f\u4e2d\u65ad\u81ea\u8eab\u91cd\u65b0\u89e6\u53d1\u7684\u8f6f\u4e2d\u65ad\uff08\u4e0d\u5141\u8bb8\u8f6f\u4e2d\u65ad\u5d4c\u5957\uff09\u3002\u800c\u4f5c\u4e3a\u6539\u8fdb\uff0c \u5185\u6838\u4f1a\u5524\u9192\u4e00\u7ec4\u5185\u6838\u7ebf\u7a0b\u6765\u5904\u7406\u8fd9\u4e9b\u8fc7\u591a\u7684\u8f6f\u4e2d\u65ad \uff0c\u8fd9\u4e9b\u5185\u6838\u7ebf\u7a0b\u5728\u6700\u4f4e\u4f18\u5148\u7ea7\u4e0a\u8fd0\u884c\uff08nice \u503c\u662f 19\uff09\uff0c\u8fd9\u80fd\u907f\u514d\u5b83\u4eec\u8ddf\u5176\u4ed6\u91cd\u8981\u7684\u4efb\u52a1\u62a2\u593a\u8d44\u6e90\uff0c\u4f46\u5b83\u4eec\u6700\u7ec8\u80af\u5b9a\u4f1a\u88ab\u6267\u884c\uff0c\u6240\u4ee5\u8fd9\u4e2a\u65b9\u6848\u80fd\u591f\u4fdd\u8bc1\u8f6f\u4e2d\u65ad\u8d1f\u8f7d\u5f88\u91cd\u7684\u65f6\u5019\uff0c\u7528\u6237\u8fdb\u7a0b\u4e0d\u4f1a\u56e0\u4e3a\u5f97\u4e0d\u5230\u5904\u7406\u65f6\u95f4\u800c\u5904\u4e8e\u9965\u997f\u72b6\u6001\uff0c\u76f8\u5e94\u7684\uff0c\u4e5f\u80fd\u4fdd\u8bc1\u8fc7\u91cf\u7684\u8f6f\u4e2d\u65ad\u7ec8\u7a76\u4f1a\u5f97\u5230\u5904\u7406\u3002 \u8bfb\u8005\u53ef\u80fd\u4f1a\u5bf9\u7cfb\u7edf\u4e0a\u8fd0\u884c\u7684 ksoftirqd \u611f\u5230\u7591\u60d1\uff0c\u8be5\u8fdb\u7a0b\u4e3b\u8981\u7528\u4e8e \u5728\u7cfb\u7edf\u7684\u8f6f\u4e2d\u65ad\u8d1f\u8f7d\u8fc7\u9ad8\u65f6\u964d\u4f4e\u8f6f\u4e2d\u65ad\u7684\u5904\u7406 \u3002\u6b63\u89c4\u5904\u7406\u4e2d\uff0c\u5982\u679c\u5185\u8054\u7684\u8f6f\u4e2d\u65ad\u8fdb\u7a0b\u4ee3\u7801\u5728\u5faa\u73af\u5904\u7406 10 \u6b21\u4e4b\u540e\uff0c\u53d1\u73b0\u8fd8\u9700\u8981\u5904\u7406\u66f4\u591a\u7684\u8f6f\u4e2d\u65ad(\u7531\u4e8e\u4e0d\u65ad\u4ea7\u751f\u4e2d\u65ad)\uff0c\u6b64\u65f6\u4e2d\u65ad\u8fdb\u7a0b\u4f1a\u5524\u9192\u5408\u9002\u7684 ksoftirqd (\u6bcf\u4e2a CPU \u90fd\u6709\u4e00\u4e2a ksoftirqd \u8fdb\u7a0b)\u8fdb\u7a0b\u5e76\u9000\u51fa\uff0c\u540e\u7eed\u7531 ksoftirqd \u8fdb\u7a0b\u5904\u7406\u8f6f\u4e2d\u65ad\u3002Ksoftirqd \u53ef\u4ee5\u88ab(\u786c\u4ef6\u6216\u8f6f\u4ef6)\u4e2d\u65ad\u4e0a\u4e0b\u6587\u4e4b\u5916\u7684\u8f6f\u4e2d\u65ad\u6253\u65ad\uff0c\u8fd9\u79cd\u5904\u7406\u662f\u5fc5\u8981\u7684\uff0c\u5426\u5219 Ksoftirqd \u5728\u5904\u7406\u4e0b\u4e00\u4e2a\u8f6f\u4e2d\u65ad\u524d\u53ef\u4ee5\u8fd0\u884c\u4efb\u610f\u65f6\u95f4\u3002\u5728\u8001\u7684\u5185\u6838\u4e2d\uff0cKsoftirqd \u8fdb\u7a0b\u4ee5\u6700\u4f4e\u7684\u4f18\u5148\u7ea7\u8fd0\u884c\uff0c\u5373\u5bf9\u8f6f\u4e2d\u65ad\u7684\u5904\u7406\u53d6\u51b3\u4e8e\u8be5\u8fdb\u7a0b\u662f\u7cfb\u7edf\u4e0a\u7684\u6700\u9ad8\u4f18\u5148\u7ea7\u8fd8\u662f\u6700\u4f4e\u4f18\u5148\u7ea7\u3002\u4ece 2.6.23 \u5f00\u59cb\uff0cKsoftirqd \u9ed8\u8ba4\u4f7f\u7528\u666e\u901a\u7528\u6237\u4f18\u5148\u7ea7\u8fd0\u884c\u3002 \u4e5f\u5c31\u662f\u8bf4 \u8f6f\u4e2d\u65ad \u9ed8\u8ba4\u662f\u5728\u786c\u4e2d\u65ad\u5904\u7406\u7ed3\u675f\u4e4b\u540e\u5c31\u6267\u884c, \u4f46\u662f\u4e07\u4e00\u7cfb\u7edf\u4e0a\u6709\u592a\u591a \u8f6f\u4e2d\u65ad \u8981\u5904\u7406, \u4e3a\u4e86\u907f\u514d\u7528\u6237\u8fdb\u7a0b\u9965\u997f, \u5c31\u628a\u8f6f\u4e2d\u65ad\u653e\u5230 ksoftirqd \u8fdb\u7a0b\u53bb\u6267\u884c. Linux \u7cfb\u7edf\u4e2d\u7684\u77e5\u540d\u5185\u6838\u7ebf\u7a0b(1)\u2014\u2014ksoftirqd \u548c events \u8f6f\u4e2d\u65ad\u548c\u5b9e\u65f6\u6027","title":"1 \u4e3a\u4ec0\u4e48\u51fa\u73b0 ksoftirqd \u7ebf\u7a0b"},{"location":"chapter_4/5_soft_irq/#2-ksoftirqd-softirq","text":"I find it quite puzzling and difficult to think how ksoftirqd ( process context ) is employed in order to run softirqs ( interrupt context ) \"ksoftirqd is implemented as a set of threads, each of which is constrained to only run on a specific CPU. They are scheduled (at a very high priority) by the normal task scheduler. This implementation has the advantage that the time spent executing the bottom halves is accounted to a system task. It is thus possible for the user to see that the machine is overloaded with interrupt processing, and maybe take remedial action. Although the work is now being done in process context rather than bottom half context, ksoftirqd sets up an environment identical to that found in bottom half context. Specifically, it executes the softirq handlers with local interrupts enabled and bottom halves disabled locally. Code which runs as a bottom half does not need to change for ksoftirqd to run it.\" ksoftirqd \u8bbe\u7f6e\u4e86\u4e00\u4e2a\u4e0e\u4e0b\u534a\u90e8\u5206\u4e0a\u4e0b\u6587\u4e2d\u76f8\u540c\u7684\u73af\u5883 , \u4e5f\u5c31\u662f\u8bf4 ksoftirqd \u8fdb\u7a0b\u8bbe\u7f6e\u4e86 \u4e0b\u534a\u90e8\u73af\u5883","title":"2 \u5982\u4f55\u4f7f\u7528 ksoftirqd\uff08\u8fdb\u7a0b\u4e0a\u4e0b\u6587\uff09\u6765\u8fd0\u884c softirq\uff08\u4e2d\u65ad\u4e0a\u4e0b\u6587\uff09"},{"location":"chapter_4/5_soft_irq/#3_1","text":"The previous section has described how software interrupts are handled in interrupt context on the return path from hardware interrupt handling, but there is also a kernel thread (in fact, one per CPU) dedicated to handling software interrupts. This thread is woken up when the load of software interrupts becomes too great to handle in interrupt context (it would take too many machine cycles from the current process). \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff08\u7b2c\u4e00\u79cd\uff09\uff0c\u786c\u4e2d\u65ad\u8fd4\u56de\u7684\u65f6\u5019\u5c31\u5f00\u59cb\u6267\u884c\u8f6f\u4e2d\u65ad. \u5982\u679c\u8f6f\u4e2d\u65ad\u592a\u591a, \u5219\u8fdb\u5165\u7b2c\u4e8c\u79cd \u7b2c\u4e8c\u79cd\uff0c \u5728 softirqd \u5185\u6838\u7ebf\u7a0b\u4e0b \u7b2c\u4e09\u79cd, \u663e\u5f0f\u8c03\u7528\u8f6f\u4e2d\u65ad\u7684\u5185\u6838\u4ee3\u7801 \u7b2c\u4e00\u79cd kernel/softirq.c /* * Exit an interrupt context. Process softirqs if needed and possible: */ void irq_exit(void) { #ifndef __ARCH_IRQ_EXIT_IRQS_DISABLED local_irq_disable(); #else WARN_ON_ONCE(!irqs_disabled()); #endif account_irq_exit_time(current); preempt_count_sub(HARDIRQ_OFFSET); if (!in_interrupt() && local_softirq_pending()) invoke_softirq(); tick_irq_exit(); rcu_irq_exit(); trace_hardirq_exit(); /* must be last! */ } static inline void invoke_softirq(void) { if (!force_irqthreads) { #ifdef CONFIG_HAVE_IRQ_EXIT_ON_IRQ_STACK /* * We can safely execute softirq on the current stack if * it is the irq stack, because it should be near empty * at this stage. */ __do_softirq(); #else /* * Otherwise, irq_exit() is called on the task stack that can * be potentially deep already. So call softirq in its own stack * to prevent from any overrun. */ do_softirq_own_stack(); #endif } else { wakeup_softirqd(); } } \u7efc\u4e0a\u6240\u8ff0, irq_exit() ---> invoke_softirq() ---> __do_softirq()","title":"3 \u8f6f\u4e2d\u65ad\u6267\u884c\u7684\u4e09\u4e2a\u573a\u666f"},{"location":"chapter_4/5_soft_irq/#4","text":"Which Context are softirq and tasklet in? The softirq and tasklet are both kind of bottom-halves mechanism. Sleep is not allowed becuase they run under interrupt context not process context. If sleep is allowed, then the linux cannot schedule them and finally cause a kernel panic with a dequeue_task error. The interrupt context does not even have a data structure describing the register info, so they can never be scheduled by linux. If it is designed to have that structure and can be scheduled, the performance for interrupt handling process will be effected. In What Context Kernel Thread Runs In Linux What context does the scheduler code run in Softirqs and Tasklets","title":"4 \u6269\u5c55"},{"location":"chapter_4/6_cpu_famous_register/","text":"\u6982\u8ff0 \u672c\u7bc7\u5185\u5bb9\u6982\u8ff0 1 \u7528\u4e8e\u68b3\u7406CPU\u4e2d\u7684\u4e00\u4e9b\u8457\u540d\u7684\u5bc4\u5b58\u5668. 2 \u8bb2\u89e3\u4e00\u4e2a\u786c\u6838\u7684\u8ba1\u7b97\u673a\u542f\u52a8\u8fc7\u7a0b 3 \u8bb2\u89e3\u901a\u7528\u7684Linux\u7cfb\u7edf\u542f\u52a8\u8fc7\u7a0b \u5bc4\u5b58\u5668 IP: Instruction Pointer(\u6307\u4ee4\u6307\u9488\u5bc4\u5b58\u5668), \u6307\u5411CPU\u5f53\u524d\u6b63\u5728\u6267\u884c\u6216\u8005\u4e0b\u4e00\u6761\u8981\u6267\u884c\u7684\u6307\u4ee4. CS: \u4ee3\u7801\u6bb5\u5bc4\u5b58\u5668 SS: \u5806\u6808\u6bb5\u5bc4\u5b58\u5668 DS: \u6570\u636e\u6bb5\u5bc4\u5b58\u5668. \u5728\u5185\u5b58\u5bfb\u5740\u65f6\u5145\u5f53\u6bb5\u57fa\u5740\u7684\u4f5c\u7528 idtr\uff0c\u5b58\u653e\u4e2d\u65ad\u5411\u91cf\u8868\u7684\u5bc4\u5b58\u5668. IDT(Interrupt Descriptor Table). gdtr: \u5168\u5c40\u6bb5\u63cf\u8ff0\u7b26\u5bc4\u5b58\u5668, GDT\uff08Global Descriptor Table \uff09\u662f\u5b58\u653e\u5728\u4e3b\u5b58\u4e2d\u3002 GDT\u7684\u5730\u5740\u5b58\u653e\u5728gdtr\u5bc4\u5b58\u5668\u4e2d cr3: \u6307\u5411\u5f53\u524d\u8fdb\u7a0b\u7684\u9875\u8868(Page Table) eax: \u7528\u6237\u8fdb\u7a0b\u53d1\u8d77\u7cfb\u7edf\u8c03\u7528\u65f6\u5fc5\u987b\u4f20\u9012\u7cfb\u7edf\u8c03\u7528\u53f7(System Call Number). eax\u5bc4\u5b58\u5668\u5c31\u662f\u4e13\u95e8\u5b58\u653e\u8be5\u7cfb\u7edf\u8c03\u7528\u53f7. \u8457\u540d\u7684\u6c47\u7f16\u8bed\u8a00\u6307\u4ee4 1 int\u6307\u4ee4\uff0c int\u6307\u4ee4\u5141\u8bb8\u7528\u6237\u6001\u8fdb\u7a0b\u53d1\u51fa\u4e00\u4e2a\u4e2d\u65ad\u4fe1\u53f7\uff0c\u5176\u503c\u53ef\u4ee5\u662f0 \uff5e 255\u4e4b\u95f4\u7684\u4efb\u610f\u6570\u5b57. \u8457\u540d\u7684\u5c31\u662fint 0x80\u6307\u4ee4\uff0c\u53ef\u4ee5\u53d1\u8d77\u7cfb\u7edf\u8c03\u7528 2 systener\u6307\u4ee4 \uff0c\u662fint 0x80\u6307\u4ee4\u7684\u66ff\u4ee3\u8005 3 \u8fd8\u6709\u5176\u4ed6\u7684\u8bf8\u5982 call,mov,jmp \u7b49 CPU\u65f6\u95f4\u7684\u611f\u77e5 1Ghz \u7684 CPU \u9891\u7387\u7406\u8bba\u4e0a 1ns \u53ef\u4ee5\u6267\u884c\u4e00\u4e2a cycle\uff0c\u5373\u6267\u884c\u4e00\u6761\u6307\u4ee4\u3002 \u4e00\u4e2a\u7ecf\u5178\u7684\u65f6\u95f4\u56fe\uff1a \u4e00\u6b21system call\u6d88\u8017\u65f6\u95f4\u4e3a76ns \u8ba1\u7b97\u673a\u7684\u542f\u52a8\u8fc7\u7a0b BIOS \u6309\u7167\u201c\u542f\u52a8\u987a\u5e8f\u201d\uff0c\u628a\u63a7\u5236\u6743\u8f6c\u4ea4\u7ed9\u6392\u5728\u7b2c\u4e00\u4f4d\u7684\u5b58\u50a8\u8bbe\u5907\uff1a\u786c\u76d8\u3002\u7136\u540e\u5728\u786c\u76d8\u91cc\u5bfb\u627e\u4e3b\u5f15\u5bfc\u8bb0\u5f55\u7684\u5206\u533a\uff0c\u8fd9\u4e2a\u5206\u533a\u544a\u8bc9\u7535\u8111\u64cd\u4f5c\u7cfb\u7edf\u5728\u54ea\u91cc\uff0c\u5e76\u628a\u64cd\u4f5c\u7cfb\u7edf\u88ab\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u4f60\u5c31\u80fd\u770b\u5230\u7ecf\u5178\u7684\u542f\u52a8\u754c\u9762\u4e86\uff0c\u8fd9\u4e2a\u5f00\u673a\u8fc7\u7a0b\u4e5f\u5c31\u5b8c\u6210\u4e86\u3002 \u4e3a\u4ec0\u4e48\u662fBIOS\u4e3b\u5bfc? \u90fd\u8bf4\u5f00\u673a\u540e\uff0cBIOS \u5c31\u5f00\u59cb\u8fd0\u884c\u81ea\u5df1\u7684\u7a0b\u5e8f\u4e86\uff0c\u53c8\u786c\u4ef6\u81ea\u68c0\uff0c\u53c8\u52a0\u8f7d\u542f\u52a8\u533a\u7684\u3002\u6211\u5c31\u4e0d\u670d\u4e86\uff0c\u4e3a\u4ec0\u4e48\u5f00\u673a\u540e\u662f\u6267\u884c BIOS \u91cc\u7684\u7a0b\u5e8f\uff1f\u4e3a\u5565\u4e0d\u662f\u5185\u5b58\u91cc\u7684\uff1f\u4e3a\u5565\u4e0d\u662f\u786c\u76d8\u91cc\u7684\uff1f \u597d\u7684\uff0c\u4e0d\u8981\u6000\u7591\u524d\u7f6e\u77e5\u8bc6\uff0cCPU \u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u5c31\u662f\u4e0d\u65ad\u4ece\u5185\u5b58\u4e2d\u53d6\u6307\u4ee4\u5e76\u6267\u884c\uff0c\u90a3\u4e3a\u4ec0\u4e48\u4f1a\u8bf4\u662f\u6267\u884c BIOS \u91cc\u7684\u7a0b\u5e8f\u5462\uff1f\u8fd9\u5c31\u4e0d\u5f97\u4e0d\u8bf4\u8bf4 \u5185\u5b58\u6620\u5c04 \u4e86\u3002 \u5185\u5b58\u6620\u5c04 CPU \u5730\u5740\u603b\u7ebf\u7684\u5bbd\u5ea6\u51b3\u5b9a\u4e86\u53ef\u8bbf\u95ee\u7684\u5185\u5b58\u7a7a\u95f4\u7684\u5927\u5c0f. \u6bd4\u5982 16 \u4f4d\u7684 CPU \u5730\u5740\u603b\u7ebf\u5bbd\u5ea6\u4e3a 20 \u4f4d\uff0c\u5730\u5740\u8303\u56f4\u662f 1M\u300232 \u4f4d\u7684 CPU \u5730\u5740\u603b\u7ebf\u5bbd\u5ea6\u4e3a 32 \u4f4d\uff0c\u5730\u5740\u8303\u56f4\u662f 4G\u3002 \u53ef\u8bbf\u95ee\u7684\u5185\u5b58\u7a7a\u95f4\u8fd9\u4e48\u5927\uff0c\u5e76\u4e0d\u7b49\u4e8e\u8bf4\u5168\u90fd\u7ed9\u5185\u5b58\u4f7f\u7528\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bfb\u5740\u7684\u5bf9\u8c61\u4e0d\u53ea\u6709\u5185\u5b58\uff0c\u8fd8\u6709\u4e00\u4e9b\u5916\u8bbe\u4e5f\u8981\u901a\u8fc7\u5730\u5740\u603b\u7ebf\u7684\u65b9\u5f0f\u53bb\u8bbf\u95ee\uff0c\u90a3\u600e\u4e48\u53bb\u8bbf\u95ee\u8fd9\u4e9b\u5916\u8bbe\u5462\uff1f\u5c31\u662f\u5728\u5730\u5740\u8303\u56f4\u4e2d\u5212\u51fa\u4e00\u7247\u7247\u7684\u533a\u57df\uff0c\u8fd9\u5757\u7ed9\u663e\u5b58\u4f7f\u7528\uff0c\u90a3\u5757\u7ed9\u786c\u76d8\u63a7\u5236\u5668\u4f7f\u7528\uff0c\u7b49\u7b49 \u3002 \u5185\u5b58\u6620\u5c04 \u6280\u672f\u5c31\u662f\u628a\u5185\u5b58\u4e2d\u76f8\u5e94\u7684\u5730\u5740\u8303\u56f4\u6620\u5c04\u5230\u5916\u56f4\u8bbe\u5907, \u5c31\u662f\u5185\u5b58\u4e2d\u7684\u8fd9\u5757\u4f4d\u7f6e\u5c31\u662f\u663e\u5b58\uff0c\u90a3\u5757\u4f4d\u7f6e\u5c31\u662f\u786c\u76d8\u63a7\u5236\u5668\u3002\u6211\u4eec\u5728\u76f8\u5e94\u7684\u4f4d\u7f6e\u4e0a\u8bfb\u53d6\u6216\u8005\u5199\u5165\uff0c\u5c31\u76f8\u5f53\u4e8e\u5728\u663e\u5b58\u7b49\u5916\u8bbe\u7684\u76f8\u5e94\u4f4d\u7f6e\u4e0a\u8bfb\u53d6\u6216\u8005\u5199\u5165\uff0c\u5c31\u597d\u50cf\u8fd9\u4e9b\u5916\u8bbe\u7684\u5b58\u50a8\u533a\u57df\uff0c\u88ab\u6620\u5c04\u5230\u4e86\u5185\u5b58\u4e2d\u7684\u67d0\u4e00\u7247\u533a\u57df\u4e00\u6837\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u4e0d\u7528\u7ba1\u90a3\u4e9b\u5916\u8bbe\u5566\uff0c\u5173\u6ce8\u70b9\u4ecd\u7136\u662f\u4e00\u4e2a\u7b80\u7b80\u5355\u5355\u7684\u5185\u5b58\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684 \u5185\u5b58\u6620\u5c04 \u3002 \u5b9e\u6a21\u5f0f\u4e0b\u7684\u5185\u5b58\u5206\u5e03 \u4ec0\u4e48\u662f\u5b9e\u6a21\u5f0f \u548c \u4fdd\u62a4\u6a21\u5f0f \u5b9e\u6a21\u5f0f: \u5b9e\u6a21\u5f0f\u662fIntel 80286\u548c\u4e4b\u540e\u768480X86\u517c\u5bb9CPU\u7684\u64cd\u4f5c\u6a21\u5f0f\u3002\u5b9e\u6a21\u5f0f\u5b58\u5728\u7684\u4e3b\u8981\u539f\u56e0\u662f\u8981\u7ef4\u6301\u5904\u7406\u5668\u4e0e\u65e9\u671f\u6a21\u578b\u517c\u5bb9\uff0c\u5e76\u8ba9\u64cd\u4f5c\u7cfb\u7edf\u81ea\u4e3e\u3002 \u5b9e\u6a21\u5f0f\u7684\u7279\u6027\u662f\u4e00\u4e2a20\u4f4d\u7684\u5b58\u50a8\u5668\u5730\u5740\u7a7a\u95f4\uff082^20 = 1048576 , \u53731MB\u7684\u5b58\u50a8\u5668\u53ef\u88ab\u5bfb\u5740\uff09\uff0c\u53ef\u4ee5\u76f4\u63a5\u8f6f\u4ef6\u8bbf\u95eeBIOS\u4ee5\u53ca\u5468\u8fb9\u786c\u4ef6\uff0c\u6ca1\u6709\u786c\u4ef6\u652f\u6301\u7684\u53ef\u5206\u9875\u673a\u5236\u548c\u5b9e\u65f6\u591a\u4efb\u52a1\u6982\u5ff5\u3002\u4ece80286\u5f00\u59cb\uff0c\u6240\u6709\u768480X86 CPU\u7684\u5f00\u673a\u72b6\u6001\u90fd\u662f\u5b9e\u6a21\u5f0f\uff1b8086\u7b49\u65e9\u671f\u7684CPU\u53ea\u6709\u4e00\u79cd\u64cd\u4f5c\u6a21\u5f0f\uff0c\u7c7b\u4f3c\u4e8e\u5b9e\u6a21\u5f0f\u3002 \u65e9\u671fCPU\uff08\u59828086\uff09\u662f16\u4f4d\u7684CPU\uff0c\u5bc4\u5b58\u5668\u662f16\u4f4d\u7684\uff0c\u6570\u636e\u603b\u7ebf\u662f16\u4f4d\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u57288086\u5185\u90e8\uff0c\u80fd\u591f\u4e00\u6b21\u6027\u5904\u7406\u4e0e\u4f20\u8f93\u7684\u6570\u636e\u6700\u957f\u4e3a16\u4f4d\u6bd4\u7279\uff0c\u90a3\u4e48\u5b83\u7684\u5bfb\u5740\u80fd\u529b\u4ec5\u4e3a2^16=64 KB\u3002\u4f46\u662f\u5730\u5740\u603b\u7ebf\u5374\u662f20\u4f4d\u7684\uff0c\u5373\u5176\u5bfb\u5740\u80fd\u529b\u4e3a2^20=1 MB\u3002 \u4e3a\u4e86\u89e3\u51b3\u5bfb\u5740\u80fd\u529b\u4e0d\u5339\u914d\u8fd9\u4e00\u95ee\u9898\uff0c\u5f15\u5165\u4e86 \u5730\u5740\u52a0\u6cd5\u5668 \uff0c\u4ee5\u5982\u4e0b\u516c\u5f0f\u8fdb\u884c\u5730\u5740\u7684\u6362\u7b97\uff1a \u5185\u5b58\u5730\u5740 = (\u6bb5\u5730\u5740 << 4) + \u6bb5\u5185\u504f\u79fb\u5730\u5740 \u3002 \u7531\u4e8e\u5bc4\u5b58\u5668\u4e3a16\u4f4d\uff0c\u5219\u5176\u4e2d\u5b58\u7684\u6bb5\u5730\u5740/\u6bb5\u5185\u504f\u79fb\u5730\u5740\u4e3a16\u4f4d\uff0c\u6bb5\u5730\u5740\u5411\u5de6\u504f\u79fb4\u4f4d\u5373\u5f9720\u4f4d\u7684\u5730\u5740\uff0c\u518d\u52a0\u4e0a\u6bb5\u5185\u504f\u79fb\u5373\u53ef\u5f97\u5230\u5185\u5b58\u4e2d\u5b9e\u9645\u7684\u7269\u7406\u5730\u5740\u3002 \u8fd9\u6837\u7684\u5bfb\u5740\u65b9\u5f0f\u662f\u5f88\u76f4\u63a5\u7684\uff0c\u76f8\u5f53\u4e8e\u7269\u7406\u5730\u5740\u76f4\u63a5\u66b4\u9732\u5728\u7a0b\u5e8f\u5458\u9762\u524d\uff0c\u7a0b\u5e8f\u5458\u53ef\u4ee5\u968f\u610f\u7684\u4fee\u6539\u5185\u5b58\u5404\u5904\u7684\u5185\u5bb9\uff0c\u6709\u7740\u8f83\u5927\u7684\u5b89\u5168\u9690\u60a3\u3002\u6216\u8bb8\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u53eb\u505a \u5b9e\u6a21\u5f0f \u5427\u3002 \u53e6\u5916\uff0c\u8fd8\u6709\u4e00\u70b9\u503c\u5f97\u6ce8\u610f\uff1a \u6bb5\u5730\u5740+\u6bb5\u5185\u504f\u79fb\u5730\u5740 \u8fd9\u6837\u7684\u5bfb\u5740\u65b9\u5f0f\u5bf9\u4e8e16\u4f4dCPU\u800c\u8a00\u662f\u53ef\u4ee5\u201c\u8d8a\u754c\u201d\u7684\u3002\u5bf9\u4e8e16\u4f4d\u800c\u8a00\uff0c\u6700\u5927\u5730\u5740\u5373\u4e3aFFFF\uff0c\u56e0\u6b64\u53ef\u53d6\u5f97\u5185\u5b58\u5730\u5740\uff1a \u82e5\u60f3\u8bbf\u95ee\u523010FFEF\uff0c\u9700\u898121\u6839\u5730\u5740\u603b\u7ebf\uff0c\u4f46\u662f\u5b9e\u9645\u5730\u5740\u603b\u7ebf\u4ec5\u670920\u6839\uff0c\u5185\u5b58\u5730\u5740\u5b9e\u9645\u6700\u5927\u4ec5\u4e3a100000 < 10FFEF\uff0c\u8d8a\u754c\u4e86\u3002\u4f46\u662f\u7cfb\u7edf\u5e76\u4e0d\u8ba4\u4e3a\u5176\u8bbf\u95ee\u8d8a\u754c\u800c\u629b\u51fa\u5f02\u5e38\uff0c\u800c\u662f\u5c06\u8bbf\u95ee\u5927\u4e8e\u7b49\u4e8e100000\u7684\u5730\u5740\u5747\u5bf9100000\u53d6\u6a21\uff0c\u56e0\u6b64\u6b64\u65f6\u8bbf\u95ee\u5230\u7684\u5c31\u662f\u8f83\u5c0f\u7684\u5185\u5b58\u5730\u5740\u4e86\u3002 \u518d\u540e\u6765\uff0cCPU\u53d1\u5c55\u5230\u4e8680286\uff0c\u6b64\u65f6\u5730\u5740\u603b\u7ebf\u5df2\u670924\u6839\uff0c\u90a3\u4e4810FFEF\u5c31\u662f\u53ef\u4ee5\u8bbf\u95ee\u5230\u7684\u4e86\uff0c\u4f46\u662f\u5728 \u5b9e\u6a21\u5f0f \u4e0b\uff0c\u4e3a\u4e86\u5411\u4e0b\u517c\u5bb9\uff0c\u7cfb\u7edf\u8868\u73b0\u7684\u884c\u4e3a\u53c8\u5e94\u540c8086\u4e00\u6837\uff0c\u5373\u4eff\u4f5b\u201c\u53ea\u670920\u6839\u5730\u5740\u603b\u7ebf\u201d\u3002\u4e3a\u4e86\u80fd\u591f\u81ea\u7531\u9009\u62e9 \u5b9e\u6a21\u5f0f \u4e0b\u5bfb\u5740\u80fd\u529b\u7684\u5927\u5c0f\uff0c\u4fbf\u51fa\u73b0\u4e86A20 Gate\u3002 A20 Gate A20 Gate\u662f\u7b2c21\u6839\u5730\u5740\u603b\u7ebf\uff0c\u5b83\u6709\u4e00\u4e2a\u5f00\u5173\uff0c\u5bf9\u4e8e\u5b9e\u6a21\u5f0f\u800c\u8a00\uff1a \u5f00\u5173\u6253\u5f00\u65f6\uff0c\u8fd9\u6839\u5730\u5740\u603b\u7ebf\u53ef\u7528\uff0c\u7a0b\u5e8f\u5458\u53ef\u4ee5\u8bbf\u95ee\u5230100000\uff5e10FFEF\u7684\u5730\u5740 \u5f00\u5173\u5173\u95ed\u65f6\uff0c\u8fd9\u6839\u5730\u5740\u603b\u7ebf\u4e0d\u53ef\u7528\uff0c\u7a0b\u5e8f\u5458\u4e0d\u53ef\u4ee5\u8bbf\u95ee\u5230100000\uff5e10FFEF\u7684\u5730\u5740 \u56e0\u6b64\u5728\u5b9e\u6a21\u5f0f\u4e0b\u8981\u60f3\u8bbf\u95ee\u9ad8\u7aef\u5185\u5b58\u533a\uff0c\u8fd9\u4e2a\u5f00\u5173\u5fc5\u987b\u6253\u5f00\u3002\u5728\u4fdd\u62a4\u6a21\u5f0f\u4e0b\uff0c\u5982\u679cA20\u5173\u95ed\uff0c\u90a3\u4e48\u7cfb\u7edf\u53ea\u80fd\u8bbf\u95ee\u5947\u6570\u5146\u7684\u5185\u5b58\uff0c\u5373\u53ea\u80fd\u8bbf\u95ee0\uff5e1M\u30012\uff5e3M\u2026\u2026\uff0c\u6240\u4ee5\u5728\u4fdd\u62a4\u6a21\u5f0f\u4e0b\uff0c\u8fd9\u4e2a\u5f00\u5173\u4e00\u822c\u4e5f\u4f1a\u6253\u5f00\u3002 \u4fdd\u62a4\u6a21\u5f0f: \u5728\u540e\u7eed\u66f4\u9ad8\u7cfb\u5217\u7684CPU\u4e2d\uff0c\u5373\u4f7fA20 Gate\u88ab\u6253\u5f00\uff0c\u5728\u5b9e\u6a21\u5f0f\u4e0b\u6240\u80fd\u591f\u8bbf\u95ee\u7684\u5185\u5b58\u6700\u5927\u4e5f\u53ea\u80fd\u4e3a10FFEF\uff0c\u800c\u5185\u5b58\u7684\u5bfb\u5740\u80fd\u529b\u8fdc\u4e0d\u6b62\u5982\u6b64\u3002\u4e3a\u4e86\u80fd\u591f\u8bbf\u95ee\u66f4\u5927\u7684\u5730\u5740\uff0c\u5219\u5fc5\u987b\u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\u3002 \u867d\u7136\u540e\u7eed\u4e00\u822c\u5bc4\u5b58\u5668\u548c\u5730\u5740\u603b\u7ebf\u90fd\u6709\u7740\u76f8\u540c\u7684\u4f4d\u6570\uff0c\u4f46\u7cfb\u7edf\u5e76\u6ca1\u6709\u4f7f\u7528\u5bc4\u5b58\u5668\u76f4\u63a5\u6307\u5b9a\u5185\u5b58\u5730\u5740\uff0c\u800c\u662f\u6cbf\u7528\u4e86 \u6bb5\u5730\u5740+\u6bb5\u5185\u504f\u79fb\u5730\u5740 \u7684\u5bfb\u5740\u65b9\u5f0f\u3002\u6bb5\u503c\u5b58\u5165\u6bb5\u5bc4\u5b58\u5668\uff0c\u800c\u8be5\u503c\u4f5c\u4e3a\u7d22\u5f15\uff0c\u7528\u4e8e\u5728 \u5168\u5c40\u63cf\u8ff0\u7b26\u8868\uff08GDT\uff09 \u4e2d\u5bfb\u627e\u5230\u5bf9\u5e94\u7684\u4e00\u4e2a\u8868\u9879\uff08 \u6bb5\u63cf\u8ff0\u7b26 \uff09\uff0c\u8be5\u8868\u9879\u4e2d\u542b\u6709\u6bb5\u5730\u5740\u3001\u6bb5\u5927\u5c0f\u3001\u8bbf\u95ee\u63a7\u5236\u7b49\u4fe1\u606f\uff0c\u5f97\u5230\u5176\u4e2d\u7684\u6bb5\u5730\u5740\u540e\u518d\u52a0\u4e0a\u5408\u6cd5\u7684\u6bb5\u5185\u504f\u79fb\uff0c\u5373\u53ef\u8bbf\u95ee\u5230\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\u3002 GDT\u6761\u76ee\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a \u7efc\u4e0a\u53ef\u77e5\uff0c\u5728\u4fdd\u62a4\u6a21\u5f0f\u4e0b\uff0c\u7269\u7406\u5730\u5740\u5e76\u4e0d\u662f\u76f4\u63a5\u66b4\u9732\u5728\u7a0b\u5e8f\u5458\u9762\u524d\u4e86\uff0c\u5bfb\u5740\u6709\u4e86\u66f4\u591a\u7684\u68c0\u67e5\u6b65\u9aa4\uff0c\u8fd9\u662f\u5c5e\u4e8e\u865a\u62df\u5185\u5b58\u7684\u8303\u7574. \u5c0f\u7ed3: \u5b9e\u6a21\u5f0f\u4e0b, CPU\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u5230\u7269\u7406\u5730\u5740\uff0c\u800c\u4e1416\u4f4d\u7684CPU\u5176\u5bfb\u5740\u8303\u56f4\u4f4d0 \uff5e 1MB. \u4fdd\u62a4\u6a21\u5f0f\u662f80286\u4ee5\u53ca\u4e4b\u540e\u7684CPU\u624d\u6709\u7684\u76f8\u5bf9\u66f4\u52a0\u9ad8\u7ea7\u7684\u529f\u80fd, \u5e76\u4e14\u5f3a\u5236\u8981\u6c42\u7a0b\u5e8f\u5458\u4f7f\u7528 \u6bb5\u5730\u5740+\u6bb5\u5185\u504f\u79fb\u5730\u5740 \u7684\u5bfb\u5740\u65b9\u5f0f. \u7ee7\u7eed\u5b9e\u6a21\u5f0f\u4e0b\u7684\u5185\u5b58\u5206\u5e03 \u6211\u4eec\u5047\u8bbe\u542f\u52a8\u7684\u65f6\u5019, \u5c31\u662f\u65e9\u671f\u7684\u5b9e\u6a21\u5f0f\u60c5\u51b5. \u521a\u521a\u8bf4\u5230\u5185\u5b58\u4e2d\u5212\u5206\u51fa\u4e86\u4e00\u7247\u4e00\u7247\u533a\u57df\u7ed9\u5404\u79cd\u5916\u8bbe\uff0c\u90a3\u4e48\u95ee\u9898\u81ea\u7136\u5c31\u6765\u4e86\uff0c\u54ea\u5757\u533a\u57df\uff0c\u5206\u7ed9\u4e86\u54ea\u5757\u5916\u8bbe\u4e86\u5462\uff1f\u5982\u679c\u662f\u89c4\u5b9a\uff0c\u90a3\u5e94\u8be5\u6709\u4e00\u5f20\u8868\u6bd4\u8f83\u597d\u5427\u3002\u55ef\u6ca1\u9519\uff0c\u8fd8\u771f\u6709\uff0c\u5b83\u5c31\u662f\u5b9e\u6a21\u5f0f\u4e0b\u7684\u5185\u5b58\u5206\u5e03\uff0c\u7b14\u8005\u7ed9\u5b83\u753b\u4e86\u4e00\u5f20\u56fe(0 ~ 1MB-1)\uff1a \u6211\u4eec\u770b\u5230\uff0c\u5185\u5b58\u88ab\u5404\u79cd\u5916\u8bbe\u74dc\u5206\u4e86\uff0c\u5373\u6620\u5c04\u5728\u4e86\u5185\u5b58\u4e2d\u3002BIOS \u66f4\u72e0\uff0c\u4e0d\u4f46\u5176\u7a7a\u95f4\u88ab\u6620\u5c04\u5230\u4e86\u5185\u5b58 0xC0000 - 0xFFFFF \u4f4d\u7f6e\uff0c\u5176\u91cc\u9762\u7684\u7a0b\u5e8f\u8fd8\u5360\u7528\u4e86\u5f00\u5934\u7684\u4e00\u4e9b\u533a\u57df\uff0c\u6bd4\u5982\u628a\u4e2d\u65ad\u5411\u91cf\u8868\u5199\u5728\u4e86\u5185\u5b58\u5f00\u59cb\u7684\u4f4d\u7f6e. \u600e\u4e48\u5c31\u4ece BIOS \u91cc\u7684\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u4e86 \u597d\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u77e5\u9053 BIOS \u91cc\u7684\u4fe1\u606f\u88ab\u6620\u5c04\u5230\u4e86\u5185\u5b58 0xC0000 - 0xFFFFF \u4f4d\u7f6e\uff0c\u5176\u4e2d\u6700\u4e3a\u5173\u952e\u7684\u7cfb\u7edf BIOS \u88ab\u6620\u5c04\u5230\u4e86 0xF0000 - 0xFFFFF \u4f4d\u7f6e\u3002 CPU \u4ece\u5185\u5b58\u7684\u54ea\u4e2a\u4f4d\u7f6e\u53d6\u51fa\u6267\u884c\u5e76\u6267\u884c\u5462\uff1f\u662f PC \u5bc4\u5b58\u5668\u4e2d\u7684\u5730\u5740\u503c \u3002BIOS \u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740\u4e5f\u5c31\u662f\u5f00\u59cb\u5730\u5740\u662f 0xFFFF0\uff08\u4eba\u5bb6\u5c31\u90a3\u4e48\u5199\u7684\uff09 \uff0c\u4e5f\u5c31\u662f\u5f00\u673a\u952e\u4e00\u6309\u4e0b\uff0c\u4e00\u5b9a\u6709\u4e00\u4e2a\u795e\u5947\u7684\u529b\u91cf\uff0c\u5c06 pc \u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u53d8\u6210 0xFFFF0 \uff0c\u7136\u540e CPU \u5c31\u5f00\u59cb\u9a6c\u4e0d\u505c\u8e44\u5730\u8dd1\u4e86\u8d77\u6765\u3002\u6ca1\u9519\uff0c\u63a5\u4e0b\u6765\u8fd9\u53e5\u8bdd\uff0c\u53ef\u80fd\u5c31\u662f\u4f60\u627e\u4e86\u5f88\u4e45\u7684\u7b54\u6848\uff0c\u8bf7\u505a\u597d\u51c6\u5907\uff1a \u5728\u4f60\u5f00\u673a\u7684\u4e00\u77ac\u95f4\uff0cCPU \u7684 PC \u5bc4\u5b58\u5668\u88ab\u5f3a\u5236\u521d\u59cb\u5316\u4e3a 0xFFFF0 \u3002\u5982\u679c\u518d\u8bf4\u5177\u4f53\u4e9b\uff0cCPU \u5c06\u6bb5\u57fa\u5740\u5bc4\u5b58\u5668 cs \u521d\u59cb\u5316\u4e3a 0xF000\uff0c\u5c06\u504f\u79fb\u5730\u5740\u5bc4\u5b58\u5668 IP \u521d\u59cb\u5316\u4e3a 0xFFF0\uff0c\u6839\u636e\u5b9e\u6a21\u5f0f\u4e0b\u7684\u6700\u7ec8\u5730\u5740\u8ba1\u7b97\u89c4\u5219\uff0c\u5c06\u6bb5\u57fa\u5740\u5de6\u79fb 4 \u4f4d\uff0c\u52a0\u4e0a\u504f\u79fb\u5730\u5740\uff0c\u5f97\u5230\u6700\u7ec8\u7684\u7269\u7406\u5730\u5740\u4e5f\u5c31\u662f\u62bd\u8c61\u51fa\u6765\u7684 PC \u5bc4\u5b58\u5668\u5730\u5740\u4e3a 0xFFFF0\u3002 \u5f53\u6211\u5728\u5b66\u4e60\u8fd9\u6bb5\u77e5\u8bc6\u65f6\uff0c\u770b\u5230\u8fd9\u53e5\u8bdd\u624d\u8ba9\u5c06\u6211\u5fc3\u91cc\u79ef\u538b\u4e86\u5f88\u4e45\u7684\u7591\u60d1\u89e3\u5f00\uff0c\u591a\u4e48\u7b80\u5355\u7c97\u66b4\u7684\u9053\u7406\u554a\u3002\u5199\u5230\u8fd9\u91cc\u6211\u4e5f\u662f\u957f\u8212\u4e86\u4e00\u53e3\u6c14\uff0c\u56e0\u4e3a\u5269\u4e0b\u7684\u8fc7\u7a0b\uff0c\u5c31\u51e0\u4e4e\u53ea\u662f\u6d41\u6c34\u8d26\u4e00\u6837\u7684\u6b63\u63a8\u4e86\u3002 \u81f3\u4e8e\u600e\u4e48\u5f3a\u5236\u521d\u59cb\u5316\u7684\uff0c\u6211\u89c9\u5f97\u5c31\u8d8a\u8fc7\u4e86\u524d\u7f6e\u77e5\u8bc6\u7684\u8fb9\u754c\u4e86\uff0c\u51b5\u4e14\u5404\u4e2a\u5382\u5546\u7684\u786c\u4ef6\u5b9e\u73b0\u4e5f\u4e0d\u4e00\u5b9a\u76f8\u540c\uff0c\u6709\u5f88\u591a\u529e\u6cd5\uff0c\u4e5f\u5f88\u7b80\u5355\u3002\u8ba8\u8bba\u8d77\u6765\u610f\u4e49\u5c31\u4e0d\u5927\u4e86\u3002 BIOS \u91cc\u5230\u5e95\u5199\u4e86\u4ec0\u4e48\u7a0b\u5e8f \u597d\u4e86\uff0c\u6211\u4eec\u73b0\u5728\u77e5\u9053\u4e86 BIOS \u88ab\u6620\u5c04\u5230\u4e86\u5185\u5b58\u7684\u67d0\u4e2a\u4f4d\u7f6e\uff0c\u5e76\u4e14\u5f00\u673a\u4e00\u77ac\u95f4 CPU \u5f3a\u5236\u5c06\u81ea\u5df1\u7684 pc \u5bc4\u5b58\u5668\u521d\u59cb\u5316\u4e3a BIOS \u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740\uff0c\u4ece\u8fd9\u91cc\u5f00\u59cb CPU \u9a6c\u4e0d\u505c\u8e44\u5730\u5411\u524d\u8dd1\u4e86\u8d77\u6765\u3002\u90a3\u63a5\u4e0b\u6765\u7684\u95ee\u9898\u4f3c\u4e4e\u4e5f\u975e\u5e38\u81ea\u7136\u5730\u5c31\u95ee\u51fa\u6765\u4e86\uff0c\u90a3\u5c31\u662f BIOS \u7a0b\u5e8f\u91cc\u5230\u5e95\u5199\u4e86\u5565\uff1f \u628a BIOS \u7a0b\u5e8f\u91cc\u7684\u4e8c\u8fdb\u5236\u4fe1\u606f\u5168\u8d34\u51fa\u6765\u4e5f\u4e0d\u5408\u9002\uff0c\u6211\u4eec\u5206\u6790\u4e00\u4e9b\u4e3b\u8981\u7684\u3002\u6211\u4eec\u9996\u5148\u8fd8\u662f\u6765\u731c\u6d4b\uff0c\u4f60\u770b\u5165\u53e3\u5730\u5740\u662f 0xFFFF0\uff0c\u8bf4\u660e\u7a0b\u5e8f\u662f\u4ece\u8fd9\u6267\u884c\u7684\u3002\u5b9e\u6a21\u5f0f\u4e0b\u5185\u5b58\u7684\u4e0b\u8fb9\u754c\u5c31\u662f 0xFFFFF\uff0c\u4e5f\u5c31\u662f\u53ea\u5269\u4e0b 16 \u4e2a\u5b57\u8282\u7684\u7a7a\u95f4\u53ef\u4ee5\u5199\u4ee3\u7801\u4e86\uff0c\u8fd9\u591f\u5e72\u5565\u7684\u5462\uff1f\u5982\u679c\u4f60\u6709\u5fc3\u7684\u8bdd\u5e94\u8be5\u80fd\u731c\u51fa\uff0c\u5165\u53e3\u5730\u5740\u5904\u53ef\u80fd\u662f\u4e2a\u8df3\u8f6c\u6307\u4ee4\uff0c\u8df3\u5230\u4e00\u4e2a\u66f4\u5927\u8303\u56f4\u7684\u7a7a\u95f4\u53bb\u6267\u884c\u81ea\u5df1\u7684\u4efb\u52a1\u3002\u6ca1\u9519\u5c31\u662f\u8fd9\u6837\uff0c0xFFFF0 \u5904\u5b58\u50a8\u7684\u673a\u5668\u6307\u4ee4\uff0c\u7ffb\u8bd1\u6210\u6c47\u7f16\u8bed\u8a00\u662f\uff1a jmp far f000:e05b \u610f\u601d\u662f\u8df3\u8f6c\u5230\u7269\u7406\u5730\u5740 0xfe05b \u5904\u5f00\u59cb\u6267\u884c\uff08\u56de\u5fc6\u4e0b\u524d\u9762\u8bf4\u7684\u5b9e\u6a21\u5f0f\u4e0b\u7684\u5730\u5740\u8ba1\u7b97\u65b9\u5f0f\uff09\u3002 \u5730\u5740 0xfe05b \u5904\u5f00\u59cb\uff0c\u4fbf\u662f BIOS \u771f\u6b63\u53d1\u6325\u4f5c\u7528\u7684\u4ee3\u7801\u4e86\uff0c\u8fd9\u5757\u4ee3\u7801\u4f1a\u68c0\u6d4b\u4e00\u4e9b\u5916\u8bbe\u4fe1\u606f\uff0c\u5e76\u521d\u59cb\u5316\u597d\u786c\u4ef6\uff0c\u5efa\u7acb\u4e2d\u65ad\u5411\u91cf\u8868\u5e76\u586b\u5199\u4e2d\u65ad\u4f8b\u7a0b\u3002\u8fd9\u91cc\u7684\u90e8\u5206\u4e0d\u8981\u5c55\u5f00\uff0c\u8fd9\u53ea\u662f\u4e00\u6bb5\u5199\u6b7b\u7684\u7a0b\u5e8f\u800c\u5df2\uff0c\u800c\u4e14\u5bf9\u7406\u89e3\u5f00\u673a\u542f\u52a8\u8fc7\u7a0b\u65e0\u5e2e\u52a9\uff0c\u6211\u4eec\u770b\u540e\u9762\u7cbe\u5f69\u7684\u90e8\u5206\uff0c\u4e5f\u5c31\u662f BIOS \u7684\u6700\u540e\u4e00\u9879\u5de5\u4f5c\uff1a \u52a0\u8f7d\u542f\u52a8\u533a \u3002 0x7c00 \u662f\u5565 \u8be5\u8f83\u771f\u7684\u5730\u65b9\u5c31\u662f\u8981\u8f83\u771f\uff0c\u6211\u7edd\u5bf9\u4e0d\u4f1a\u8ba9 \u52a0\u8f7d \u8fd9\u79cd\u9b54\u5e7b\u7684\u8bcd\u51fa\u73b0\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u73b0\u5728\u5c31\u6765\u628a\u5b83\u62c6\u89e3\u6210\u4eba\u8bdd\u3002 \u5176\u5b9e\u8fd9\u4e2a\u8bcd\u4e5f\u5e76\u4e0d\u9b54\u5e7b\uff0c\u52a0\u8f7d\u5728\u8ba1\u7b97\u673a\u9886\u57df\u5c31\u662f\u6307\uff0c \u628a\u67d0\u8bbe\u5907\u4e0a\uff08\u6bd4\u5982\u786c\u76d8\uff09\u7684\u7a0b\u5e8f\u590d\u5236\u5230\u5185\u5b58\u4e2d\u7684\u8fc7\u7a0b \u3002\u90a3\u52a0\u8f7d\u542f\u52a8\u533a\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u7ffb\u8bd1\u8fc7\u6765\u5c31\u662f\uff0c BIOS \u7a0b\u5e8f\u628a\u542f\u52a8\u533a\u7684\u5185\u5bb9\u590d\u5236\u5230\u4e86\u5185\u5b58\u4e2d\u7684\u67d0\u4e2a\u533a\u57df \u3002\u597d\u4e86\uff0c\u95ee\u9898\u53c8\u81ea\u7136\u51fa\u6765\u4e86\uff0c\u542f\u52a8\u533a\u662f\u54ea\u91cc\uff1f\u88ab\u590d\u5236\u5230\u4e86\u5185\u5b58\u7684\u54ea\u4e2a\u4f4d\u7f6e\uff1f\u7136\u540e\u5462\uff1f\u6211\u4eec\u4e00\u4e2a\u4e2a\u6765\u56de\u7b54\u3002 \u4ec0\u4e48\u662f\u542f\u52a8\u533a\u5462\uff1f\u5373\u4f7f\u4f60\u4e0d\u77e5\u9053\uff0c\u4f60\u4e5f\u5e94\u8be5\u80fd\u591f\u731c\u5230\uff0c\u4e00\u5b9a\u662f\u7b26\u5408\u67d0\u79cd\u7279\u5f81\u7684\u4e00\u5757\u533a\u57df\uff0c\u4e8e\u662f\u4eba\u4eec\u628a\u5b83\u5c31\u53eb\u505a\u542f\u52a8\u533a\u4e86\uff0c\u90a3\u8981\u7b26\u5408\u4ec0\u4e48\u7279\u5f81\u5462\uff1f\u5148\u4e0d\u6025\uff0c\u4e0d\u77e5\u9053\u4f60\u6709\u6ca1\u6709\u8fc7\u8bbe\u7f6e BIOS \u542f\u52a8\u987a\u5e8f\u7684\u7ecf\u5386\uff0c\u901a\u5e38\u6709 U \u76d8\u542f\u52a8\u3001\u786c\u76d8\u542f\u52a8\u3001\u8f6f\u76d8\u542f\u52a8\u3001\u5149\u76d8\u542f\u52a8\u7b49\u7b49\uff0c BIOS \u4f1a\u6309\u7167\u987a\u5e8f\uff0c\u8bfb\u53d6\u8fd9\u4e9b\u542f\u52a8\u76d8\u4e2d\u4f4d\u4e8e 0 \u76d8 0 \u9053 1 \u6247\u533a\u7684\u5185\u5bb9 \u3002 \u81f3\u4e8e\u78c1\u76d8\u683c\u5f0f\u7684\u5212\u5206\uff0c\u672c\u7bc7\u5c31\u4e0d\u505a\u8bb2\u89e3\u4e86\uff0c\u603b\u4e4b\u5bf9\u4e8e\u5185\u5b58\uff0c\u6211\u4eec\u7ed9\u51fa\u4e00\u4e2a\u6570\u5b57\u5730\u5740\u5c31\u80fd\u83b7\u53d6\u5230\u8be5\u5730\u5740\u7684\u6570\u636e\uff0c\u800c\u5bf9\u4e8e\u78c1\u76d8\uff0c\u6211\u4eec\u9700\u8981\u7ed9\u51fa\u78c1\u5934\u3001\u67f1\u9762\u3001\u6247\u533a\u8fd9\u4e09\u4e2a\u4fe1\u606f\u624d\u80fd\u5b9a\u4f4d\u67d0\u4e2a\u4f4d\u7f6e\u7684\u6570\u636e\uff0c\u90fd\u662f\u63cf\u8ff0\u4f4d\u7f6e\u7684\u4e00\u79cd\u65b9\u5f0f\u800c\u5df2\u3002 \u63a5\u7740\u8bf4\uff0c \u8fd9 0 \u76d8 0 \u9053 1 \u6247\u533a\u7684\u5185\u5bb9\u4e00\u5171\u6709 512 \u4e2a\u5b57\u8282\uff0c \u5982\u679c\u672b\u5c3e\u7684\u4e24\u4e2a\u5b57\u8282\u5206\u522b\u662f 0x55 \u548c 0xaa\uff0c\u90a3\u4e48 BIOS \u5c31\u4f1a\u8ba4\u4e3a\u5b83\u662f\u4e2a\u542f\u52a8\u533a \u3002\u5982\u679c\u4e0d\u662f\uff0c\u90a3\u4e48\u6309\u987a\u5e8f\u7ee7\u7eed\u5411\u4e0b\u4e2a\u8bbe\u5907\u4e2d\u5bfb\u627e\u4f4d\u4e8e 0 \u76d8 0 \u9053 1 \u6247\u533a\u7684\u5185\u5bb9\u3002\u5982\u679c\u6700\u540e\u53d1\u73b0\u90fd\u6ca1\u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\uff0c\u90a3\u76f4\u63a5\u62a5\u51fa\u4e00\u4e2a\u65e0\u542f\u52a8\u533a\u7684\u9519\u8bef\u3002 BIOS \u627e\u5230\u4e86\u8fd9\u4e2a\u542f\u52a8\u533a\u4e4b\u540e\u5e72\u561b\u5462\uff1f\u54e6\uff0c\u524d\u9762\u8bf4\u8fc7\u4e86\u662f\u52a0\u8f7d\uff0c \u5c31\u662f\u628a\u8fd9 512 \u4e2a\u5b57\u8282\u7684\u5185\u5bb9\uff0c\u4e00\u4e2a\u6bd4\u7279\u90fd\u4e0d\u5c11\u7684\u5168\u90e8\u590d\u5236\u5230\u5185\u5b58\u7684 0x7c00 \u8fd9\u4e2a\u4f4d\u7f6e \u3002\u600e\u4e48\u590d\u5236\u7684\uff1f\u5f53\u7136\u662f\u6307\u4ee4\u5566\u3002\u54ea\u4e9b\u6307\u4ee4\u5462\uff1f\u8fd9\u91cc\u6211\u53ea\u80fd\u7b80\u5355\u8bf4\u6307\u4ee4\u96c6\u4e2d\u662f\u6709 in \u548c out \u7684\uff0c\u7528\u6765\u5c06\u5916\u8bbe\u4e2d\u7684\u6570\u636e\u590d\u5236\u5230\u5185\u5b58\uff0c\u6216\u8005\u5c06\u5185\u5b58\u4e2d\u7684\u6570\u636e\u590d\u5236\u5230\u5916\u8bbe\uff0c\u7528\u8fd9\u4e24\u4e2a\u6307\u4ee4\uff0c\u4ee5\u53ca\u5916\u8bbe\u7ed9\u6211\u4eec\u63d0\u4f9b\u7684\u8bfb\u53d6\u65b9\u5f0f\uff0c\u5c31\u80fd\u505a\u5230\u8fd9\u4e00\u70b9\u5566\u3002 \u542f\u52a8\u533a\u5185\u5bb9\u6b64\u65f6\u5df2\u7ecf\u88ab BIOS \u7a0b\u5e8f\u590d\u5236\u5230\u4e86\u5185\u5b58\u7684 0x7c00 \u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u5462\uff1f\u8fd9\u4e2a\u5176\u5b9e\u4e5f\u4e0d\u96be\u731c\u6d4b\uff0c\u542f\u52a8\u533a\u7684\u5185\u5bb9\u5c31\u662f\u6211\u4eec\u81ea\u5df1\u5199\u7684\u4ee3\u7801\u4e86\uff0c\u590d\u5236\u5230\u8fd9\u91cc\u4e4b\u540e\uff0c\u5c31\u5f00\u59cb\u6267\u884c\u5457\uff0c\u4e4b\u540e\u6211\u4eec\u7684\u7a0b\u5e8f\u5c31\u63a5\u7ba1\u4e86\u63a5\u4e0b\u6765\u7684\u6d41\u7a0b\uff0cBIOS \u7684\u4f7f\u547d\u4e5f\u5c31\u7ed3\u675f\u5566\u3002\u6240\u4ee5\u590d\u5236\u5b8c\u4e4b\u540e\uff0c\u63a5\u4e0b\u6765\u5e94\u8be5\u662f\u4e00\u4e2a\u8df3\u8f6c\u6307\u4ee4\u5427\uff01\u6ca1\u9519\uff0c\u6b63\u662f\u8fd9\u6837\uff0cPC \u5bc4\u5b58\u5668\u7684\u503c\u53d8\u4e3a 0x7c00\uff0c\u6307\u4ee4\u5f00\u59cb\u4ece\u8fd9\u91cc\u6267\u884c\u3002 \u54a6\uff1f\u4e0d\u77e5\u9053\u4f60\u6709\u6ca1\u6709\u53d1\u73b0\uff0c\u6211\u4eec\u4f3c\u4e4e\u4e0d\u77e5\u4e0d\u89c9\u53c8\u628a\u4e4b\u524d\u7684\u4e00\u53e5\u9b54\u6cd5\u8bed\u8a00\u7ffb\u8bd1\u6210\u4eba\u8bdd\u4e86\uff0c\u5f00\u5934\u6211\u4eec\u8bf4\uff1a BIOS \u628a\u63a7\u5236\u6743\u8f6c\u4ea4\u7ed9\u6392\u5728\u7b2c\u4e00\u4f4d\u7684\u5b58\u50a8\u8bbe\u5907\u3002 \u6240\u4ee5\u8fd9\u53e5\u8bdd\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f \u5c31\u662f BIOS \u628a\u542f\u52a8\u533a\u7684 512 \u5b57\u8282\u590d\u5236\u5230\u5185\u5b58\u7684 0x7c00 \u4f4d\u7f6e\uff0c\u5e76\u4e14\u7528\u4e00\u6761\u8df3\u8f6c\u6307\u4ee4\u5c06 pc \u5bc4\u5b58\u5668\u7684\u503c\u6307\u5411 0x7c00 \u3002\u4f60\u770b\uff0c\u8fd9\u4e0d\u662f\u4e5f\u6ca1\u591a\u51e0\u4e2a\u5b57\u561b\uff0c\u5c31\u628a\u8fd9\u4e2a\u95ee\u9898\u8bf4\u5f97\u660e\u660e\u767d\u767d\uff0c\u7b80\u7b80\u5355\u5355\u3002 \u54e6\uff0c\u5bf9\u4e86\uff0c\u73b0\u5728\u4f3c\u4e4e\u5c31\u5269\u4e0b\u4e00\u4e2a\u95ee\u9898\u4e86\uff0c\u4e3a\u4ec0\u4e48\u975e\u8981\u662f 0x7c00 \u5462\uff1f \u5b83\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u89c4\u5b9a\u6b7b\u7684\u503c. \u7b54\u6848\u5f88\u7b80\u5355\uff0c\u90a3\u5c31\u662f\u4eba\u5bb6 BIOS \u5f00\u53d1\u56e2\u961f\u5c31\u662f\u8fd9\u6837\u5b9a\u7684. \u4e3a\u5565\u786c\u76d8\u4e2d\u7684 0 \u76d8 0 \u9053 1 \u6247\u533a\u7684 512 \u4e2a\u5b57\u8282\u7684\u6700\u540e\u4e24\u4e2a\u5b57\u8282\u5206\u522b\u662f 0x55 \u548c 0xaa\uff0c\u90a3\u4e48 BIOS \u5c31\u4f1a\u8ba4\u4e3a\u5b83\u662f\u4e2a\u542f\u52a8\u533a\u3002 \u5176\u5b9e\u662f\u4e00\u4e2a\u89c4\u5b9a\u800c\u5df2 \u4f46\u4e5f\u6709\u4e00\u79cd\u6d6a\u6f2b\u7684\u89e3\u91ca: 0x55\u5bf9\u5e94ASCII\u7801\u7684U\uff0c\u4e5f\u5c31\u662fUnix\u7684\u9996\u5b57\u6bcd\u3002\u800c0x55\u5de6\u79fb\u4e00\u4f4d\u4e3a0xAA\uff0c\u8fd9\u91cc\u7684A\u4ee3\u6307AT&T\uff0c\u56e0\u4e3aUnix\u6765\u81ea\u4e8e\u201cAT&T Unix\u201d\u3002\u610f\u5373\uff0c\u611f\u8c22AT&T\u8bde\u751fUnix\u3002\u60f3\u60f3\uff0c\u673a\u5668\u542f\u52a8\u65f6\u6ee1\u8f7d\u611f\u6069\uff0c\u8fd9\u4e5f\u8bb8\u5c31\u662f\u5927\u795e\u4eec\u7684\u6d6a\u6f2b\u5427. \u542f\u52a8\u533a\u91cc\u5199\u4e86\u5565? \u542f\u52a8\u533a\u91cc\u7684\u4ee3\u7801\u5199\u4e86\u5565\uff1f\u5c31 512 \u5b57\u8282\u5c31\u662f\u5168\u90e8\u64cd\u4f5c\u7cfb\u7edf\u5185\u5bb9\u4e86\uff1f \u8fd9\u662f\u4e00\u4e2a\u597d\u95ee\u9898\uff0c512 \u4e2a\u5b57\u8282\u786e\u5b9e\u5e72\u4e0d\u4e86\u5565\uff0c\u73b0\u5728\u7684\u64cd\u4f5c\u7cfb\u7edf\u600e\u4e48\u4e5f\u5f97\u6309 M \u4e3a\u5355\u4f4d\u7b97\u5427\uff0c512 \u4e2a\u5b57\u8282\u8fdc\u8fdc\u4e0d\u591f\u5462\uff0c\u90a3\u662f\u600e\u4e48\u56de\u4e8b\u5462\uff1f \u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u4e4b\u524d\u7684\u601d\u8def\u731c\u6d4b\uff0cBIOS \u7528\u5f88\u5c11\u7684\u4ee3\u7801\u5c31\u628a 512 \u5b57\u8282\u7684\u542f\u52a8\u533a\u5185\u5bb9\u52a0\u8f7d\u5230\u4e86\u5185\u5b58\uff0c\u5e76\u8df3\u8f6c\u8fc7\u53bb\u5f00\u59cb\u6267\u884c\u3002\u90a3\u6309\u7167\u8fd9\u4e2a\u5957\u8def\uff0c\u8fd9 512 \u5b57\u8282\u7684\u542f\u52a8\u533a\u4ee3\u7801\uff0c\u662f\u4e0d\u662f\u4e5f\u53ef\u4ee5\u628a\u66f4\u591a\u78c1\u76d8\u4e2d\u5b58\u50a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u7a0b\u5e8f\uff0c\u52a0\u8f7d\u5230\u5185\u5b58\u7684\u67d0\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u8df3\u8f6c\u8fc7\u53bb\u5462\uff1f \u6ca1\u9519\uff0c\u5c31\u662f\u8fd9\u4e2a\u5957\u8def\u3002\u6240\u4ee5 BIOS \u8d1f\u8d23\u52a0\u8f7d\u4e86\u542f\u52a8\u533a\uff0c\u800c\u542f\u52a8\u533a\u53c8\u8d1f\u8d23\u52a0\u8f7d\u771f\u6b63\u7684\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838 \uff0c\u8fd9\u914d\u5408\u9ed8\u5951\u5427\uff1f \u7531\u4e8e\u7528\u4e8e\u542f\u52a8\u76d8\u7684\u78c1\u76d8\u662f\u4eba\u5bb6\u5199\u64cd\u4f5c\u7cfb\u7edf\u7684\u5382\u5546\u5236\u4f5c\u7684\uff0c\u4fd7\u79f0\u5236\u4f5c\u542f\u52a8\u76d8\uff0c\u6240\u4ee5\u4ed6\u4e5f\u80af\u5b9a\u77e5\u9053\u64cd\u4f5c\u7cfb\u7edf\u7684\u6838\u5fc3\u4ee3\u7801\u5b58\u50a8\u5728\u78c1\u76d8\u7684\u54ea\u4e2a\u6247\u533a\uff0c\u56e0\u6b64\u542f\u52a8\u533a\u5c31\u628a\u8fd9\u4e2a\u6247\u533a\uff0c\u4ee5\u53ca\u4e4b\u540e\u7684\u597d\u591a\u597d\u591a\u6247\u533a\uff08\u5177\u4f53\u53d6\u51b3\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u6709\u591a\u5927\uff09\u90fd\u8bfb\u5230\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u5f00\u59cb\u7684\u7a0b\u5e8f\u5f00\u59cb\u7684\u4f4d\u7f6e\u3002\u8df3\u8f6c\u5230\u54ea\u91cc\u5462\uff1f\u8fd9\u4e2a\u5c31\u4e0d\u50cf 0x7c00 \u8fd9\u4e2a\u6570\u90a3\u4e48\u7ecf\u5178\u4e86\uff0c\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u80af\u5b9a\u4e5f\u4e0d\u4e00\u6837\uff0c\u4e5f\u4e0d\u7528\u4e8b\u5148\u89c4\u5b9a\u597d\uff0c\u53cd\u6b63\u5199\u64cd\u4f5c\u7cfb\u7edf\u7684\u4eba\u7ed9\u81ea\u5df1\u5b9a\u4e00\u4e2a\u5c31\u597d\u4e86\uff0c\u522b\u8986\u76d6\u5176\u4ed6\u5173\u952e\u8bbe\u5907\u7528\u5230\u7684\u533a\u57df\u5c31\u597d\u3002 \u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u5199\u4e86\u5565 \u597d\u4e86\u73b0\u5728\u7ecf\u8fc7\u597d\u51e0\u8f6e \u8df3\u8df3\u8df3 \uff0c\u7ec8\u4e8e\u8df3\u5230\u5185\u6838\u4ee3\u7801\u5566\uff0c\u6211\u4eec\u6765\u4e00\u8d77\u56de\u987e\u4e00\u4e0b\uff1a \u6309\u4e0b\u5f00\u673a\u952e\uff0cCPU \u5c06 PC \u5bc4\u5b58\u5668\u7684\u503c\u5f3a\u5236\u521d\u59cb\u5316\u4e3a 0xffff0\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u662f BIOS \u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740\uff08\u4e00\u8df3\uff09 \u8be5\u5165\u53e3\u5730\u5740\u5904\u662f\u4e00\u4e2a\u8df3\u8f6c\u6307\u4ee4\uff0c\u8df3\u8f6c\u5230 0xfe05b \u4f4d\u7f6e\uff0c\u5f00\u59cb\u6267\u884c\uff08\u4e8c\u8df3\uff09 \u6267\u884c\u4e86\u4e00\u4e9b\u786c\u4ef6\u68c0\u6d4b\u5de5\u4f5c\u540e\uff0c\u6700\u540e\u4e00\u6b65\u5c06\u542f\u52a8\u533a\u5185\u5bb9\u52a0\u8f7d\u5230\u5185\u5b58 0x7c00\uff0c\u5e76\u8df3\u8f6c\u5230\u8fd9\u91cc\uff08\u4e09\u8df3\uff09 \u542f\u52a8\u533a\u4ee3\u7801\u4e3b\u8981\u662f\u52a0\u8f7d\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\uff0c\u5e76\u8df3\u8f6c\u5230\u52a0\u8f7d\u5904\uff08\u56db\u8df3\uff09 \u7ecf\u8fc7\u8fd9\u8fde\u7eed\u7684\u56db\u6b21\u8df3\u8dc3\uff0c\u7ec8\u4e8e\u6765\u5230\u4e86\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e16\u754c\u4e86\uff0c\u5269\u4e0b\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u8bf4\u662f\u6574\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u8bfe\u7a0b\u6240\u8bb2\u8ff0\u7684\u539f\u7406\uff0c\u5206\u6bb5\u3001\u5206\u9875\u3001\u5efa\u7acb\u4e2d\u65ad\u3001\u8bbe\u5907\u9a71\u52a8\u3001\u5185\u5b58\u7ba1\u7406\u3001\u8fdb\u7a0b\u7ba1\u7406\u3001\u6587\u4ef6\u7cfb\u7edf\u3001\u7528\u6237\u6001\u63a5\u53e3\u7b49\u7b49\u3002 Linux\u542f\u52a8\u8fc7\u7a0b \u901a\u8fc7\u51e0\u5f20\u56fe\u611f\u53d7\u4e0b Linux\u7cfb\u7edfLogin\u4e2d, Bash Shell\u914d\u7f6e\u8bfb\u53d6\u8fc7\u7a0b Login Shell: /etc/profile-->/etc/profile.d/*.sh-->~/.bash_profile-->~/.bashrc-->/etc/bashrc \u975eLogin Shell: ~/.bashrc-->/etc/bashrc-->/etc/profile.d/*.sh \u53c2\u8003","title":"\u7b2c\u516d\u7bc7 CPU\u4e2d\u7684\u8457\u540d\u5bc4\u5b58\u5668\u68b3\u7406"},{"location":"chapter_4/6_cpu_famous_register/#_1","text":"\u672c\u7bc7\u5185\u5bb9\u6982\u8ff0 1 \u7528\u4e8e\u68b3\u7406CPU\u4e2d\u7684\u4e00\u4e9b\u8457\u540d\u7684\u5bc4\u5b58\u5668. 2 \u8bb2\u89e3\u4e00\u4e2a\u786c\u6838\u7684\u8ba1\u7b97\u673a\u542f\u52a8\u8fc7\u7a0b 3 \u8bb2\u89e3\u901a\u7528\u7684Linux\u7cfb\u7edf\u542f\u52a8\u8fc7\u7a0b","title":"\u6982\u8ff0"},{"location":"chapter_4/6_cpu_famous_register/#_2","text":"IP: Instruction Pointer(\u6307\u4ee4\u6307\u9488\u5bc4\u5b58\u5668), \u6307\u5411CPU\u5f53\u524d\u6b63\u5728\u6267\u884c\u6216\u8005\u4e0b\u4e00\u6761\u8981\u6267\u884c\u7684\u6307\u4ee4. CS: \u4ee3\u7801\u6bb5\u5bc4\u5b58\u5668 SS: \u5806\u6808\u6bb5\u5bc4\u5b58\u5668 DS: \u6570\u636e\u6bb5\u5bc4\u5b58\u5668. \u5728\u5185\u5b58\u5bfb\u5740\u65f6\u5145\u5f53\u6bb5\u57fa\u5740\u7684\u4f5c\u7528 idtr\uff0c\u5b58\u653e\u4e2d\u65ad\u5411\u91cf\u8868\u7684\u5bc4\u5b58\u5668. IDT(Interrupt Descriptor Table). gdtr: \u5168\u5c40\u6bb5\u63cf\u8ff0\u7b26\u5bc4\u5b58\u5668, GDT\uff08Global Descriptor Table \uff09\u662f\u5b58\u653e\u5728\u4e3b\u5b58\u4e2d\u3002 GDT\u7684\u5730\u5740\u5b58\u653e\u5728gdtr\u5bc4\u5b58\u5668\u4e2d cr3: \u6307\u5411\u5f53\u524d\u8fdb\u7a0b\u7684\u9875\u8868(Page Table) eax: \u7528\u6237\u8fdb\u7a0b\u53d1\u8d77\u7cfb\u7edf\u8c03\u7528\u65f6\u5fc5\u987b\u4f20\u9012\u7cfb\u7edf\u8c03\u7528\u53f7(System Call Number). eax\u5bc4\u5b58\u5668\u5c31\u662f\u4e13\u95e8\u5b58\u653e\u8be5\u7cfb\u7edf\u8c03\u7528\u53f7.","title":"\u5bc4\u5b58\u5668"},{"location":"chapter_4/6_cpu_famous_register/#_3","text":"1 int\u6307\u4ee4\uff0c int\u6307\u4ee4\u5141\u8bb8\u7528\u6237\u6001\u8fdb\u7a0b\u53d1\u51fa\u4e00\u4e2a\u4e2d\u65ad\u4fe1\u53f7\uff0c\u5176\u503c\u53ef\u4ee5\u662f0 \uff5e 255\u4e4b\u95f4\u7684\u4efb\u610f\u6570\u5b57. \u8457\u540d\u7684\u5c31\u662fint 0x80\u6307\u4ee4\uff0c\u53ef\u4ee5\u53d1\u8d77\u7cfb\u7edf\u8c03\u7528 2 systener\u6307\u4ee4 \uff0c\u662fint 0x80\u6307\u4ee4\u7684\u66ff\u4ee3\u8005 3 \u8fd8\u6709\u5176\u4ed6\u7684\u8bf8\u5982 call,mov,jmp \u7b49","title":"\u8457\u540d\u7684\u6c47\u7f16\u8bed\u8a00\u6307\u4ee4"},{"location":"chapter_4/6_cpu_famous_register/#cpu","text":"1Ghz \u7684 CPU \u9891\u7387\u7406\u8bba\u4e0a 1ns \u53ef\u4ee5\u6267\u884c\u4e00\u4e2a cycle\uff0c\u5373\u6267\u884c\u4e00\u6761\u6307\u4ee4\u3002 \u4e00\u4e2a\u7ecf\u5178\u7684\u65f6\u95f4\u56fe\uff1a \u4e00\u6b21system call\u6d88\u8017\u65f6\u95f4\u4e3a76ns","title":"CPU\u65f6\u95f4\u7684\u611f\u77e5"},{"location":"chapter_4/6_cpu_famous_register/#_4","text":"BIOS \u6309\u7167\u201c\u542f\u52a8\u987a\u5e8f\u201d\uff0c\u628a\u63a7\u5236\u6743\u8f6c\u4ea4\u7ed9\u6392\u5728\u7b2c\u4e00\u4f4d\u7684\u5b58\u50a8\u8bbe\u5907\uff1a\u786c\u76d8\u3002\u7136\u540e\u5728\u786c\u76d8\u91cc\u5bfb\u627e\u4e3b\u5f15\u5bfc\u8bb0\u5f55\u7684\u5206\u533a\uff0c\u8fd9\u4e2a\u5206\u533a\u544a\u8bc9\u7535\u8111\u64cd\u4f5c\u7cfb\u7edf\u5728\u54ea\u91cc\uff0c\u5e76\u628a\u64cd\u4f5c\u7cfb\u7edf\u88ab\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u4f60\u5c31\u80fd\u770b\u5230\u7ecf\u5178\u7684\u542f\u52a8\u754c\u9762\u4e86\uff0c\u8fd9\u4e2a\u5f00\u673a\u8fc7\u7a0b\u4e5f\u5c31\u5b8c\u6210\u4e86\u3002","title":"\u8ba1\u7b97\u673a\u7684\u542f\u52a8\u8fc7\u7a0b"},{"location":"chapter_4/6_cpu_famous_register/#bios","text":"\u90fd\u8bf4\u5f00\u673a\u540e\uff0cBIOS \u5c31\u5f00\u59cb\u8fd0\u884c\u81ea\u5df1\u7684\u7a0b\u5e8f\u4e86\uff0c\u53c8\u786c\u4ef6\u81ea\u68c0\uff0c\u53c8\u52a0\u8f7d\u542f\u52a8\u533a\u7684\u3002\u6211\u5c31\u4e0d\u670d\u4e86\uff0c\u4e3a\u4ec0\u4e48\u5f00\u673a\u540e\u662f\u6267\u884c BIOS \u91cc\u7684\u7a0b\u5e8f\uff1f\u4e3a\u5565\u4e0d\u662f\u5185\u5b58\u91cc\u7684\uff1f\u4e3a\u5565\u4e0d\u662f\u786c\u76d8\u91cc\u7684\uff1f \u597d\u7684\uff0c\u4e0d\u8981\u6000\u7591\u524d\u7f6e\u77e5\u8bc6\uff0cCPU \u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u5c31\u662f\u4e0d\u65ad\u4ece\u5185\u5b58\u4e2d\u53d6\u6307\u4ee4\u5e76\u6267\u884c\uff0c\u90a3\u4e3a\u4ec0\u4e48\u4f1a\u8bf4\u662f\u6267\u884c BIOS \u91cc\u7684\u7a0b\u5e8f\u5462\uff1f\u8fd9\u5c31\u4e0d\u5f97\u4e0d\u8bf4\u8bf4 \u5185\u5b58\u6620\u5c04 \u4e86\u3002","title":"\u4e3a\u4ec0\u4e48\u662fBIOS\u4e3b\u5bfc?"},{"location":"chapter_4/6_cpu_famous_register/#_5","text":"CPU \u5730\u5740\u603b\u7ebf\u7684\u5bbd\u5ea6\u51b3\u5b9a\u4e86\u53ef\u8bbf\u95ee\u7684\u5185\u5b58\u7a7a\u95f4\u7684\u5927\u5c0f. \u6bd4\u5982 16 \u4f4d\u7684 CPU \u5730\u5740\u603b\u7ebf\u5bbd\u5ea6\u4e3a 20 \u4f4d\uff0c\u5730\u5740\u8303\u56f4\u662f 1M\u300232 \u4f4d\u7684 CPU \u5730\u5740\u603b\u7ebf\u5bbd\u5ea6\u4e3a 32 \u4f4d\uff0c\u5730\u5740\u8303\u56f4\u662f 4G\u3002 \u53ef\u8bbf\u95ee\u7684\u5185\u5b58\u7a7a\u95f4\u8fd9\u4e48\u5927\uff0c\u5e76\u4e0d\u7b49\u4e8e\u8bf4\u5168\u90fd\u7ed9\u5185\u5b58\u4f7f\u7528\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bfb\u5740\u7684\u5bf9\u8c61\u4e0d\u53ea\u6709\u5185\u5b58\uff0c\u8fd8\u6709\u4e00\u4e9b\u5916\u8bbe\u4e5f\u8981\u901a\u8fc7\u5730\u5740\u603b\u7ebf\u7684\u65b9\u5f0f\u53bb\u8bbf\u95ee\uff0c\u90a3\u600e\u4e48\u53bb\u8bbf\u95ee\u8fd9\u4e9b\u5916\u8bbe\u5462\uff1f\u5c31\u662f\u5728\u5730\u5740\u8303\u56f4\u4e2d\u5212\u51fa\u4e00\u7247\u7247\u7684\u533a\u57df\uff0c\u8fd9\u5757\u7ed9\u663e\u5b58\u4f7f\u7528\uff0c\u90a3\u5757\u7ed9\u786c\u76d8\u63a7\u5236\u5668\u4f7f\u7528\uff0c\u7b49\u7b49 \u3002 \u5185\u5b58\u6620\u5c04 \u6280\u672f\u5c31\u662f\u628a\u5185\u5b58\u4e2d\u76f8\u5e94\u7684\u5730\u5740\u8303\u56f4\u6620\u5c04\u5230\u5916\u56f4\u8bbe\u5907, \u5c31\u662f\u5185\u5b58\u4e2d\u7684\u8fd9\u5757\u4f4d\u7f6e\u5c31\u662f\u663e\u5b58\uff0c\u90a3\u5757\u4f4d\u7f6e\u5c31\u662f\u786c\u76d8\u63a7\u5236\u5668\u3002\u6211\u4eec\u5728\u76f8\u5e94\u7684\u4f4d\u7f6e\u4e0a\u8bfb\u53d6\u6216\u8005\u5199\u5165\uff0c\u5c31\u76f8\u5f53\u4e8e\u5728\u663e\u5b58\u7b49\u5916\u8bbe\u7684\u76f8\u5e94\u4f4d\u7f6e\u4e0a\u8bfb\u53d6\u6216\u8005\u5199\u5165\uff0c\u5c31\u597d\u50cf\u8fd9\u4e9b\u5916\u8bbe\u7684\u5b58\u50a8\u533a\u57df\uff0c\u88ab\u6620\u5c04\u5230\u4e86\u5185\u5b58\u4e2d\u7684\u67d0\u4e00\u7247\u533a\u57df\u4e00\u6837\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u4e0d\u7528\u7ba1\u90a3\u4e9b\u5916\u8bbe\u5566\uff0c\u5173\u6ce8\u70b9\u4ecd\u7136\u662f\u4e00\u4e2a\u7b80\u7b80\u5355\u5355\u7684\u5185\u5b58\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684 \u5185\u5b58\u6620\u5c04 \u3002","title":"\u5185\u5b58\u6620\u5c04"},{"location":"chapter_4/6_cpu_famous_register/#_6","text":"","title":"\u5b9e\u6a21\u5f0f\u4e0b\u7684\u5185\u5b58\u5206\u5e03"},{"location":"chapter_4/6_cpu_famous_register/#_7","text":"","title":"\u4ec0\u4e48\u662f\u5b9e\u6a21\u5f0f \u548c \u4fdd\u62a4\u6a21\u5f0f"},{"location":"chapter_4/6_cpu_famous_register/#_8","text":"\u5b9e\u6a21\u5f0f\u662fIntel 80286\u548c\u4e4b\u540e\u768480X86\u517c\u5bb9CPU\u7684\u64cd\u4f5c\u6a21\u5f0f\u3002\u5b9e\u6a21\u5f0f\u5b58\u5728\u7684\u4e3b\u8981\u539f\u56e0\u662f\u8981\u7ef4\u6301\u5904\u7406\u5668\u4e0e\u65e9\u671f\u6a21\u578b\u517c\u5bb9\uff0c\u5e76\u8ba9\u64cd\u4f5c\u7cfb\u7edf\u81ea\u4e3e\u3002 \u5b9e\u6a21\u5f0f\u7684\u7279\u6027\u662f\u4e00\u4e2a20\u4f4d\u7684\u5b58\u50a8\u5668\u5730\u5740\u7a7a\u95f4\uff082^20 = 1048576 , \u53731MB\u7684\u5b58\u50a8\u5668\u53ef\u88ab\u5bfb\u5740\uff09\uff0c\u53ef\u4ee5\u76f4\u63a5\u8f6f\u4ef6\u8bbf\u95eeBIOS\u4ee5\u53ca\u5468\u8fb9\u786c\u4ef6\uff0c\u6ca1\u6709\u786c\u4ef6\u652f\u6301\u7684\u53ef\u5206\u9875\u673a\u5236\u548c\u5b9e\u65f6\u591a\u4efb\u52a1\u6982\u5ff5\u3002\u4ece80286\u5f00\u59cb\uff0c\u6240\u6709\u768480X86 CPU\u7684\u5f00\u673a\u72b6\u6001\u90fd\u662f\u5b9e\u6a21\u5f0f\uff1b8086\u7b49\u65e9\u671f\u7684CPU\u53ea\u6709\u4e00\u79cd\u64cd\u4f5c\u6a21\u5f0f\uff0c\u7c7b\u4f3c\u4e8e\u5b9e\u6a21\u5f0f\u3002 \u65e9\u671fCPU\uff08\u59828086\uff09\u662f16\u4f4d\u7684CPU\uff0c\u5bc4\u5b58\u5668\u662f16\u4f4d\u7684\uff0c\u6570\u636e\u603b\u7ebf\u662f16\u4f4d\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u57288086\u5185\u90e8\uff0c\u80fd\u591f\u4e00\u6b21\u6027\u5904\u7406\u4e0e\u4f20\u8f93\u7684\u6570\u636e\u6700\u957f\u4e3a16\u4f4d\u6bd4\u7279\uff0c\u90a3\u4e48\u5b83\u7684\u5bfb\u5740\u80fd\u529b\u4ec5\u4e3a2^16=64 KB\u3002\u4f46\u662f\u5730\u5740\u603b\u7ebf\u5374\u662f20\u4f4d\u7684\uff0c\u5373\u5176\u5bfb\u5740\u80fd\u529b\u4e3a2^20=1 MB\u3002 \u4e3a\u4e86\u89e3\u51b3\u5bfb\u5740\u80fd\u529b\u4e0d\u5339\u914d\u8fd9\u4e00\u95ee\u9898\uff0c\u5f15\u5165\u4e86 \u5730\u5740\u52a0\u6cd5\u5668 \uff0c\u4ee5\u5982\u4e0b\u516c\u5f0f\u8fdb\u884c\u5730\u5740\u7684\u6362\u7b97\uff1a \u5185\u5b58\u5730\u5740 = (\u6bb5\u5730\u5740 << 4) + \u6bb5\u5185\u504f\u79fb\u5730\u5740 \u3002 \u7531\u4e8e\u5bc4\u5b58\u5668\u4e3a16\u4f4d\uff0c\u5219\u5176\u4e2d\u5b58\u7684\u6bb5\u5730\u5740/\u6bb5\u5185\u504f\u79fb\u5730\u5740\u4e3a16\u4f4d\uff0c\u6bb5\u5730\u5740\u5411\u5de6\u504f\u79fb4\u4f4d\u5373\u5f9720\u4f4d\u7684\u5730\u5740\uff0c\u518d\u52a0\u4e0a\u6bb5\u5185\u504f\u79fb\u5373\u53ef\u5f97\u5230\u5185\u5b58\u4e2d\u5b9e\u9645\u7684\u7269\u7406\u5730\u5740\u3002 \u8fd9\u6837\u7684\u5bfb\u5740\u65b9\u5f0f\u662f\u5f88\u76f4\u63a5\u7684\uff0c\u76f8\u5f53\u4e8e\u7269\u7406\u5730\u5740\u76f4\u63a5\u66b4\u9732\u5728\u7a0b\u5e8f\u5458\u9762\u524d\uff0c\u7a0b\u5e8f\u5458\u53ef\u4ee5\u968f\u610f\u7684\u4fee\u6539\u5185\u5b58\u5404\u5904\u7684\u5185\u5bb9\uff0c\u6709\u7740\u8f83\u5927\u7684\u5b89\u5168\u9690\u60a3\u3002\u6216\u8bb8\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u53eb\u505a \u5b9e\u6a21\u5f0f \u5427\u3002 \u53e6\u5916\uff0c\u8fd8\u6709\u4e00\u70b9\u503c\u5f97\u6ce8\u610f\uff1a \u6bb5\u5730\u5740+\u6bb5\u5185\u504f\u79fb\u5730\u5740 \u8fd9\u6837\u7684\u5bfb\u5740\u65b9\u5f0f\u5bf9\u4e8e16\u4f4dCPU\u800c\u8a00\u662f\u53ef\u4ee5\u201c\u8d8a\u754c\u201d\u7684\u3002\u5bf9\u4e8e16\u4f4d\u800c\u8a00\uff0c\u6700\u5927\u5730\u5740\u5373\u4e3aFFFF\uff0c\u56e0\u6b64\u53ef\u53d6\u5f97\u5185\u5b58\u5730\u5740\uff1a \u82e5\u60f3\u8bbf\u95ee\u523010FFEF\uff0c\u9700\u898121\u6839\u5730\u5740\u603b\u7ebf\uff0c\u4f46\u662f\u5b9e\u9645\u5730\u5740\u603b\u7ebf\u4ec5\u670920\u6839\uff0c\u5185\u5b58\u5730\u5740\u5b9e\u9645\u6700\u5927\u4ec5\u4e3a100000 < 10FFEF\uff0c\u8d8a\u754c\u4e86\u3002\u4f46\u662f\u7cfb\u7edf\u5e76\u4e0d\u8ba4\u4e3a\u5176\u8bbf\u95ee\u8d8a\u754c\u800c\u629b\u51fa\u5f02\u5e38\uff0c\u800c\u662f\u5c06\u8bbf\u95ee\u5927\u4e8e\u7b49\u4e8e100000\u7684\u5730\u5740\u5747\u5bf9100000\u53d6\u6a21\uff0c\u56e0\u6b64\u6b64\u65f6\u8bbf\u95ee\u5230\u7684\u5c31\u662f\u8f83\u5c0f\u7684\u5185\u5b58\u5730\u5740\u4e86\u3002 \u518d\u540e\u6765\uff0cCPU\u53d1\u5c55\u5230\u4e8680286\uff0c\u6b64\u65f6\u5730\u5740\u603b\u7ebf\u5df2\u670924\u6839\uff0c\u90a3\u4e4810FFEF\u5c31\u662f\u53ef\u4ee5\u8bbf\u95ee\u5230\u7684\u4e86\uff0c\u4f46\u662f\u5728 \u5b9e\u6a21\u5f0f \u4e0b\uff0c\u4e3a\u4e86\u5411\u4e0b\u517c\u5bb9\uff0c\u7cfb\u7edf\u8868\u73b0\u7684\u884c\u4e3a\u53c8\u5e94\u540c8086\u4e00\u6837\uff0c\u5373\u4eff\u4f5b\u201c\u53ea\u670920\u6839\u5730\u5740\u603b\u7ebf\u201d\u3002\u4e3a\u4e86\u80fd\u591f\u81ea\u7531\u9009\u62e9 \u5b9e\u6a21\u5f0f \u4e0b\u5bfb\u5740\u80fd\u529b\u7684\u5927\u5c0f\uff0c\u4fbf\u51fa\u73b0\u4e86A20 Gate\u3002","title":"\u5b9e\u6a21\u5f0f:"},{"location":"chapter_4/6_cpu_famous_register/#a20-gate","text":"A20 Gate\u662f\u7b2c21\u6839\u5730\u5740\u603b\u7ebf\uff0c\u5b83\u6709\u4e00\u4e2a\u5f00\u5173\uff0c\u5bf9\u4e8e\u5b9e\u6a21\u5f0f\u800c\u8a00\uff1a \u5f00\u5173\u6253\u5f00\u65f6\uff0c\u8fd9\u6839\u5730\u5740\u603b\u7ebf\u53ef\u7528\uff0c\u7a0b\u5e8f\u5458\u53ef\u4ee5\u8bbf\u95ee\u5230100000\uff5e10FFEF\u7684\u5730\u5740 \u5f00\u5173\u5173\u95ed\u65f6\uff0c\u8fd9\u6839\u5730\u5740\u603b\u7ebf\u4e0d\u53ef\u7528\uff0c\u7a0b\u5e8f\u5458\u4e0d\u53ef\u4ee5\u8bbf\u95ee\u5230100000\uff5e10FFEF\u7684\u5730\u5740 \u56e0\u6b64\u5728\u5b9e\u6a21\u5f0f\u4e0b\u8981\u60f3\u8bbf\u95ee\u9ad8\u7aef\u5185\u5b58\u533a\uff0c\u8fd9\u4e2a\u5f00\u5173\u5fc5\u987b\u6253\u5f00\u3002\u5728\u4fdd\u62a4\u6a21\u5f0f\u4e0b\uff0c\u5982\u679cA20\u5173\u95ed\uff0c\u90a3\u4e48\u7cfb\u7edf\u53ea\u80fd\u8bbf\u95ee\u5947\u6570\u5146\u7684\u5185\u5b58\uff0c\u5373\u53ea\u80fd\u8bbf\u95ee0\uff5e1M\u30012\uff5e3M\u2026\u2026\uff0c\u6240\u4ee5\u5728\u4fdd\u62a4\u6a21\u5f0f\u4e0b\uff0c\u8fd9\u4e2a\u5f00\u5173\u4e00\u822c\u4e5f\u4f1a\u6253\u5f00\u3002","title":"A20 Gate"},{"location":"chapter_4/6_cpu_famous_register/#_9","text":"\u5728\u540e\u7eed\u66f4\u9ad8\u7cfb\u5217\u7684CPU\u4e2d\uff0c\u5373\u4f7fA20 Gate\u88ab\u6253\u5f00\uff0c\u5728\u5b9e\u6a21\u5f0f\u4e0b\u6240\u80fd\u591f\u8bbf\u95ee\u7684\u5185\u5b58\u6700\u5927\u4e5f\u53ea\u80fd\u4e3a10FFEF\uff0c\u800c\u5185\u5b58\u7684\u5bfb\u5740\u80fd\u529b\u8fdc\u4e0d\u6b62\u5982\u6b64\u3002\u4e3a\u4e86\u80fd\u591f\u8bbf\u95ee\u66f4\u5927\u7684\u5730\u5740\uff0c\u5219\u5fc5\u987b\u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\u3002 \u867d\u7136\u540e\u7eed\u4e00\u822c\u5bc4\u5b58\u5668\u548c\u5730\u5740\u603b\u7ebf\u90fd\u6709\u7740\u76f8\u540c\u7684\u4f4d\u6570\uff0c\u4f46\u7cfb\u7edf\u5e76\u6ca1\u6709\u4f7f\u7528\u5bc4\u5b58\u5668\u76f4\u63a5\u6307\u5b9a\u5185\u5b58\u5730\u5740\uff0c\u800c\u662f\u6cbf\u7528\u4e86 \u6bb5\u5730\u5740+\u6bb5\u5185\u504f\u79fb\u5730\u5740 \u7684\u5bfb\u5740\u65b9\u5f0f\u3002\u6bb5\u503c\u5b58\u5165\u6bb5\u5bc4\u5b58\u5668\uff0c\u800c\u8be5\u503c\u4f5c\u4e3a\u7d22\u5f15\uff0c\u7528\u4e8e\u5728 \u5168\u5c40\u63cf\u8ff0\u7b26\u8868\uff08GDT\uff09 \u4e2d\u5bfb\u627e\u5230\u5bf9\u5e94\u7684\u4e00\u4e2a\u8868\u9879\uff08 \u6bb5\u63cf\u8ff0\u7b26 \uff09\uff0c\u8be5\u8868\u9879\u4e2d\u542b\u6709\u6bb5\u5730\u5740\u3001\u6bb5\u5927\u5c0f\u3001\u8bbf\u95ee\u63a7\u5236\u7b49\u4fe1\u606f\uff0c\u5f97\u5230\u5176\u4e2d\u7684\u6bb5\u5730\u5740\u540e\u518d\u52a0\u4e0a\u5408\u6cd5\u7684\u6bb5\u5185\u504f\u79fb\uff0c\u5373\u53ef\u8bbf\u95ee\u5230\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\u3002 GDT\u6761\u76ee\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a \u7efc\u4e0a\u53ef\u77e5\uff0c\u5728\u4fdd\u62a4\u6a21\u5f0f\u4e0b\uff0c\u7269\u7406\u5730\u5740\u5e76\u4e0d\u662f\u76f4\u63a5\u66b4\u9732\u5728\u7a0b\u5e8f\u5458\u9762\u524d\u4e86\uff0c\u5bfb\u5740\u6709\u4e86\u66f4\u591a\u7684\u68c0\u67e5\u6b65\u9aa4\uff0c\u8fd9\u662f\u5c5e\u4e8e\u865a\u62df\u5185\u5b58\u7684\u8303\u7574.","title":"\u4fdd\u62a4\u6a21\u5f0f:"},{"location":"chapter_4/6_cpu_famous_register/#_10","text":"\u5b9e\u6a21\u5f0f\u4e0b, CPU\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u5230\u7269\u7406\u5730\u5740\uff0c\u800c\u4e1416\u4f4d\u7684CPU\u5176\u5bfb\u5740\u8303\u56f4\u4f4d0 \uff5e 1MB. \u4fdd\u62a4\u6a21\u5f0f\u662f80286\u4ee5\u53ca\u4e4b\u540e\u7684CPU\u624d\u6709\u7684\u76f8\u5bf9\u66f4\u52a0\u9ad8\u7ea7\u7684\u529f\u80fd, \u5e76\u4e14\u5f3a\u5236\u8981\u6c42\u7a0b\u5e8f\u5458\u4f7f\u7528 \u6bb5\u5730\u5740+\u6bb5\u5185\u504f\u79fb\u5730\u5740 \u7684\u5bfb\u5740\u65b9\u5f0f.","title":"\u5c0f\u7ed3:"},{"location":"chapter_4/6_cpu_famous_register/#_11","text":"\u6211\u4eec\u5047\u8bbe\u542f\u52a8\u7684\u65f6\u5019, \u5c31\u662f\u65e9\u671f\u7684\u5b9e\u6a21\u5f0f\u60c5\u51b5. \u521a\u521a\u8bf4\u5230\u5185\u5b58\u4e2d\u5212\u5206\u51fa\u4e86\u4e00\u7247\u4e00\u7247\u533a\u57df\u7ed9\u5404\u79cd\u5916\u8bbe\uff0c\u90a3\u4e48\u95ee\u9898\u81ea\u7136\u5c31\u6765\u4e86\uff0c\u54ea\u5757\u533a\u57df\uff0c\u5206\u7ed9\u4e86\u54ea\u5757\u5916\u8bbe\u4e86\u5462\uff1f\u5982\u679c\u662f\u89c4\u5b9a\uff0c\u90a3\u5e94\u8be5\u6709\u4e00\u5f20\u8868\u6bd4\u8f83\u597d\u5427\u3002\u55ef\u6ca1\u9519\uff0c\u8fd8\u771f\u6709\uff0c\u5b83\u5c31\u662f\u5b9e\u6a21\u5f0f\u4e0b\u7684\u5185\u5b58\u5206\u5e03\uff0c\u7b14\u8005\u7ed9\u5b83\u753b\u4e86\u4e00\u5f20\u56fe(0 ~ 1MB-1)\uff1a \u6211\u4eec\u770b\u5230\uff0c\u5185\u5b58\u88ab\u5404\u79cd\u5916\u8bbe\u74dc\u5206\u4e86\uff0c\u5373\u6620\u5c04\u5728\u4e86\u5185\u5b58\u4e2d\u3002BIOS \u66f4\u72e0\uff0c\u4e0d\u4f46\u5176\u7a7a\u95f4\u88ab\u6620\u5c04\u5230\u4e86\u5185\u5b58 0xC0000 - 0xFFFFF \u4f4d\u7f6e\uff0c\u5176\u91cc\u9762\u7684\u7a0b\u5e8f\u8fd8\u5360\u7528\u4e86\u5f00\u5934\u7684\u4e00\u4e9b\u533a\u57df\uff0c\u6bd4\u5982\u628a\u4e2d\u65ad\u5411\u91cf\u8868\u5199\u5728\u4e86\u5185\u5b58\u5f00\u59cb\u7684\u4f4d\u7f6e.","title":"\u7ee7\u7eed\u5b9e\u6a21\u5f0f\u4e0b\u7684\u5185\u5b58\u5206\u5e03"},{"location":"chapter_4/6_cpu_famous_register/#bios_1","text":"\u597d\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u77e5\u9053 BIOS \u91cc\u7684\u4fe1\u606f\u88ab\u6620\u5c04\u5230\u4e86\u5185\u5b58 0xC0000 - 0xFFFFF \u4f4d\u7f6e\uff0c\u5176\u4e2d\u6700\u4e3a\u5173\u952e\u7684\u7cfb\u7edf BIOS \u88ab\u6620\u5c04\u5230\u4e86 0xF0000 - 0xFFFFF \u4f4d\u7f6e\u3002 CPU \u4ece\u5185\u5b58\u7684\u54ea\u4e2a\u4f4d\u7f6e\u53d6\u51fa\u6267\u884c\u5e76\u6267\u884c\u5462\uff1f\u662f PC \u5bc4\u5b58\u5668\u4e2d\u7684\u5730\u5740\u503c \u3002BIOS \u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740\u4e5f\u5c31\u662f\u5f00\u59cb\u5730\u5740\u662f 0xFFFF0\uff08\u4eba\u5bb6\u5c31\u90a3\u4e48\u5199\u7684\uff09 \uff0c\u4e5f\u5c31\u662f\u5f00\u673a\u952e\u4e00\u6309\u4e0b\uff0c\u4e00\u5b9a\u6709\u4e00\u4e2a\u795e\u5947\u7684\u529b\u91cf\uff0c\u5c06 pc \u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u53d8\u6210 0xFFFF0 \uff0c\u7136\u540e CPU \u5c31\u5f00\u59cb\u9a6c\u4e0d\u505c\u8e44\u5730\u8dd1\u4e86\u8d77\u6765\u3002\u6ca1\u9519\uff0c\u63a5\u4e0b\u6765\u8fd9\u53e5\u8bdd\uff0c\u53ef\u80fd\u5c31\u662f\u4f60\u627e\u4e86\u5f88\u4e45\u7684\u7b54\u6848\uff0c\u8bf7\u505a\u597d\u51c6\u5907\uff1a \u5728\u4f60\u5f00\u673a\u7684\u4e00\u77ac\u95f4\uff0cCPU \u7684 PC \u5bc4\u5b58\u5668\u88ab\u5f3a\u5236\u521d\u59cb\u5316\u4e3a 0xFFFF0 \u3002\u5982\u679c\u518d\u8bf4\u5177\u4f53\u4e9b\uff0cCPU \u5c06\u6bb5\u57fa\u5740\u5bc4\u5b58\u5668 cs \u521d\u59cb\u5316\u4e3a 0xF000\uff0c\u5c06\u504f\u79fb\u5730\u5740\u5bc4\u5b58\u5668 IP \u521d\u59cb\u5316\u4e3a 0xFFF0\uff0c\u6839\u636e\u5b9e\u6a21\u5f0f\u4e0b\u7684\u6700\u7ec8\u5730\u5740\u8ba1\u7b97\u89c4\u5219\uff0c\u5c06\u6bb5\u57fa\u5740\u5de6\u79fb 4 \u4f4d\uff0c\u52a0\u4e0a\u504f\u79fb\u5730\u5740\uff0c\u5f97\u5230\u6700\u7ec8\u7684\u7269\u7406\u5730\u5740\u4e5f\u5c31\u662f\u62bd\u8c61\u51fa\u6765\u7684 PC \u5bc4\u5b58\u5668\u5730\u5740\u4e3a 0xFFFF0\u3002 \u5f53\u6211\u5728\u5b66\u4e60\u8fd9\u6bb5\u77e5\u8bc6\u65f6\uff0c\u770b\u5230\u8fd9\u53e5\u8bdd\u624d\u8ba9\u5c06\u6211\u5fc3\u91cc\u79ef\u538b\u4e86\u5f88\u4e45\u7684\u7591\u60d1\u89e3\u5f00\uff0c\u591a\u4e48\u7b80\u5355\u7c97\u66b4\u7684\u9053\u7406\u554a\u3002\u5199\u5230\u8fd9\u91cc\u6211\u4e5f\u662f\u957f\u8212\u4e86\u4e00\u53e3\u6c14\uff0c\u56e0\u4e3a\u5269\u4e0b\u7684\u8fc7\u7a0b\uff0c\u5c31\u51e0\u4e4e\u53ea\u662f\u6d41\u6c34\u8d26\u4e00\u6837\u7684\u6b63\u63a8\u4e86\u3002 \u81f3\u4e8e\u600e\u4e48\u5f3a\u5236\u521d\u59cb\u5316\u7684\uff0c\u6211\u89c9\u5f97\u5c31\u8d8a\u8fc7\u4e86\u524d\u7f6e\u77e5\u8bc6\u7684\u8fb9\u754c\u4e86\uff0c\u51b5\u4e14\u5404\u4e2a\u5382\u5546\u7684\u786c\u4ef6\u5b9e\u73b0\u4e5f\u4e0d\u4e00\u5b9a\u76f8\u540c\uff0c\u6709\u5f88\u591a\u529e\u6cd5\uff0c\u4e5f\u5f88\u7b80\u5355\u3002\u8ba8\u8bba\u8d77\u6765\u610f\u4e49\u5c31\u4e0d\u5927\u4e86\u3002","title":"\u600e\u4e48\u5c31\u4ece BIOS \u91cc\u7684\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u4e86"},{"location":"chapter_4/6_cpu_famous_register/#bios_2","text":"\u597d\u4e86\uff0c\u6211\u4eec\u73b0\u5728\u77e5\u9053\u4e86 BIOS \u88ab\u6620\u5c04\u5230\u4e86\u5185\u5b58\u7684\u67d0\u4e2a\u4f4d\u7f6e\uff0c\u5e76\u4e14\u5f00\u673a\u4e00\u77ac\u95f4 CPU \u5f3a\u5236\u5c06\u81ea\u5df1\u7684 pc \u5bc4\u5b58\u5668\u521d\u59cb\u5316\u4e3a BIOS \u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740\uff0c\u4ece\u8fd9\u91cc\u5f00\u59cb CPU \u9a6c\u4e0d\u505c\u8e44\u5730\u5411\u524d\u8dd1\u4e86\u8d77\u6765\u3002\u90a3\u63a5\u4e0b\u6765\u7684\u95ee\u9898\u4f3c\u4e4e\u4e5f\u975e\u5e38\u81ea\u7136\u5730\u5c31\u95ee\u51fa\u6765\u4e86\uff0c\u90a3\u5c31\u662f BIOS \u7a0b\u5e8f\u91cc\u5230\u5e95\u5199\u4e86\u5565\uff1f \u628a BIOS \u7a0b\u5e8f\u91cc\u7684\u4e8c\u8fdb\u5236\u4fe1\u606f\u5168\u8d34\u51fa\u6765\u4e5f\u4e0d\u5408\u9002\uff0c\u6211\u4eec\u5206\u6790\u4e00\u4e9b\u4e3b\u8981\u7684\u3002\u6211\u4eec\u9996\u5148\u8fd8\u662f\u6765\u731c\u6d4b\uff0c\u4f60\u770b\u5165\u53e3\u5730\u5740\u662f 0xFFFF0\uff0c\u8bf4\u660e\u7a0b\u5e8f\u662f\u4ece\u8fd9\u6267\u884c\u7684\u3002\u5b9e\u6a21\u5f0f\u4e0b\u5185\u5b58\u7684\u4e0b\u8fb9\u754c\u5c31\u662f 0xFFFFF\uff0c\u4e5f\u5c31\u662f\u53ea\u5269\u4e0b 16 \u4e2a\u5b57\u8282\u7684\u7a7a\u95f4\u53ef\u4ee5\u5199\u4ee3\u7801\u4e86\uff0c\u8fd9\u591f\u5e72\u5565\u7684\u5462\uff1f\u5982\u679c\u4f60\u6709\u5fc3\u7684\u8bdd\u5e94\u8be5\u80fd\u731c\u51fa\uff0c\u5165\u53e3\u5730\u5740\u5904\u53ef\u80fd\u662f\u4e2a\u8df3\u8f6c\u6307\u4ee4\uff0c\u8df3\u5230\u4e00\u4e2a\u66f4\u5927\u8303\u56f4\u7684\u7a7a\u95f4\u53bb\u6267\u884c\u81ea\u5df1\u7684\u4efb\u52a1\u3002\u6ca1\u9519\u5c31\u662f\u8fd9\u6837\uff0c0xFFFF0 \u5904\u5b58\u50a8\u7684\u673a\u5668\u6307\u4ee4\uff0c\u7ffb\u8bd1\u6210\u6c47\u7f16\u8bed\u8a00\u662f\uff1a jmp far f000:e05b \u610f\u601d\u662f\u8df3\u8f6c\u5230\u7269\u7406\u5730\u5740 0xfe05b \u5904\u5f00\u59cb\u6267\u884c\uff08\u56de\u5fc6\u4e0b\u524d\u9762\u8bf4\u7684\u5b9e\u6a21\u5f0f\u4e0b\u7684\u5730\u5740\u8ba1\u7b97\u65b9\u5f0f\uff09\u3002 \u5730\u5740 0xfe05b \u5904\u5f00\u59cb\uff0c\u4fbf\u662f BIOS \u771f\u6b63\u53d1\u6325\u4f5c\u7528\u7684\u4ee3\u7801\u4e86\uff0c\u8fd9\u5757\u4ee3\u7801\u4f1a\u68c0\u6d4b\u4e00\u4e9b\u5916\u8bbe\u4fe1\u606f\uff0c\u5e76\u521d\u59cb\u5316\u597d\u786c\u4ef6\uff0c\u5efa\u7acb\u4e2d\u65ad\u5411\u91cf\u8868\u5e76\u586b\u5199\u4e2d\u65ad\u4f8b\u7a0b\u3002\u8fd9\u91cc\u7684\u90e8\u5206\u4e0d\u8981\u5c55\u5f00\uff0c\u8fd9\u53ea\u662f\u4e00\u6bb5\u5199\u6b7b\u7684\u7a0b\u5e8f\u800c\u5df2\uff0c\u800c\u4e14\u5bf9\u7406\u89e3\u5f00\u673a\u542f\u52a8\u8fc7\u7a0b\u65e0\u5e2e\u52a9\uff0c\u6211\u4eec\u770b\u540e\u9762\u7cbe\u5f69\u7684\u90e8\u5206\uff0c\u4e5f\u5c31\u662f BIOS \u7684\u6700\u540e\u4e00\u9879\u5de5\u4f5c\uff1a \u52a0\u8f7d\u542f\u52a8\u533a \u3002","title":"BIOS \u91cc\u5230\u5e95\u5199\u4e86\u4ec0\u4e48\u7a0b\u5e8f"},{"location":"chapter_4/6_cpu_famous_register/#0x7c00","text":"\u8be5\u8f83\u771f\u7684\u5730\u65b9\u5c31\u662f\u8981\u8f83\u771f\uff0c\u6211\u7edd\u5bf9\u4e0d\u4f1a\u8ba9 \u52a0\u8f7d \u8fd9\u79cd\u9b54\u5e7b\u7684\u8bcd\u51fa\u73b0\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u73b0\u5728\u5c31\u6765\u628a\u5b83\u62c6\u89e3\u6210\u4eba\u8bdd\u3002 \u5176\u5b9e\u8fd9\u4e2a\u8bcd\u4e5f\u5e76\u4e0d\u9b54\u5e7b\uff0c\u52a0\u8f7d\u5728\u8ba1\u7b97\u673a\u9886\u57df\u5c31\u662f\u6307\uff0c \u628a\u67d0\u8bbe\u5907\u4e0a\uff08\u6bd4\u5982\u786c\u76d8\uff09\u7684\u7a0b\u5e8f\u590d\u5236\u5230\u5185\u5b58\u4e2d\u7684\u8fc7\u7a0b \u3002\u90a3\u52a0\u8f7d\u542f\u52a8\u533a\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u7ffb\u8bd1\u8fc7\u6765\u5c31\u662f\uff0c BIOS \u7a0b\u5e8f\u628a\u542f\u52a8\u533a\u7684\u5185\u5bb9\u590d\u5236\u5230\u4e86\u5185\u5b58\u4e2d\u7684\u67d0\u4e2a\u533a\u57df \u3002\u597d\u4e86\uff0c\u95ee\u9898\u53c8\u81ea\u7136\u51fa\u6765\u4e86\uff0c\u542f\u52a8\u533a\u662f\u54ea\u91cc\uff1f\u88ab\u590d\u5236\u5230\u4e86\u5185\u5b58\u7684\u54ea\u4e2a\u4f4d\u7f6e\uff1f\u7136\u540e\u5462\uff1f\u6211\u4eec\u4e00\u4e2a\u4e2a\u6765\u56de\u7b54\u3002 \u4ec0\u4e48\u662f\u542f\u52a8\u533a\u5462\uff1f\u5373\u4f7f\u4f60\u4e0d\u77e5\u9053\uff0c\u4f60\u4e5f\u5e94\u8be5\u80fd\u591f\u731c\u5230\uff0c\u4e00\u5b9a\u662f\u7b26\u5408\u67d0\u79cd\u7279\u5f81\u7684\u4e00\u5757\u533a\u57df\uff0c\u4e8e\u662f\u4eba\u4eec\u628a\u5b83\u5c31\u53eb\u505a\u542f\u52a8\u533a\u4e86\uff0c\u90a3\u8981\u7b26\u5408\u4ec0\u4e48\u7279\u5f81\u5462\uff1f\u5148\u4e0d\u6025\uff0c\u4e0d\u77e5\u9053\u4f60\u6709\u6ca1\u6709\u8fc7\u8bbe\u7f6e BIOS \u542f\u52a8\u987a\u5e8f\u7684\u7ecf\u5386\uff0c\u901a\u5e38\u6709 U \u76d8\u542f\u52a8\u3001\u786c\u76d8\u542f\u52a8\u3001\u8f6f\u76d8\u542f\u52a8\u3001\u5149\u76d8\u542f\u52a8\u7b49\u7b49\uff0c BIOS \u4f1a\u6309\u7167\u987a\u5e8f\uff0c\u8bfb\u53d6\u8fd9\u4e9b\u542f\u52a8\u76d8\u4e2d\u4f4d\u4e8e 0 \u76d8 0 \u9053 1 \u6247\u533a\u7684\u5185\u5bb9 \u3002 \u81f3\u4e8e\u78c1\u76d8\u683c\u5f0f\u7684\u5212\u5206\uff0c\u672c\u7bc7\u5c31\u4e0d\u505a\u8bb2\u89e3\u4e86\uff0c\u603b\u4e4b\u5bf9\u4e8e\u5185\u5b58\uff0c\u6211\u4eec\u7ed9\u51fa\u4e00\u4e2a\u6570\u5b57\u5730\u5740\u5c31\u80fd\u83b7\u53d6\u5230\u8be5\u5730\u5740\u7684\u6570\u636e\uff0c\u800c\u5bf9\u4e8e\u78c1\u76d8\uff0c\u6211\u4eec\u9700\u8981\u7ed9\u51fa\u78c1\u5934\u3001\u67f1\u9762\u3001\u6247\u533a\u8fd9\u4e09\u4e2a\u4fe1\u606f\u624d\u80fd\u5b9a\u4f4d\u67d0\u4e2a\u4f4d\u7f6e\u7684\u6570\u636e\uff0c\u90fd\u662f\u63cf\u8ff0\u4f4d\u7f6e\u7684\u4e00\u79cd\u65b9\u5f0f\u800c\u5df2\u3002 \u63a5\u7740\u8bf4\uff0c \u8fd9 0 \u76d8 0 \u9053 1 \u6247\u533a\u7684\u5185\u5bb9\u4e00\u5171\u6709 512 \u4e2a\u5b57\u8282\uff0c \u5982\u679c\u672b\u5c3e\u7684\u4e24\u4e2a\u5b57\u8282\u5206\u522b\u662f 0x55 \u548c 0xaa\uff0c\u90a3\u4e48 BIOS \u5c31\u4f1a\u8ba4\u4e3a\u5b83\u662f\u4e2a\u542f\u52a8\u533a \u3002\u5982\u679c\u4e0d\u662f\uff0c\u90a3\u4e48\u6309\u987a\u5e8f\u7ee7\u7eed\u5411\u4e0b\u4e2a\u8bbe\u5907\u4e2d\u5bfb\u627e\u4f4d\u4e8e 0 \u76d8 0 \u9053 1 \u6247\u533a\u7684\u5185\u5bb9\u3002\u5982\u679c\u6700\u540e\u53d1\u73b0\u90fd\u6ca1\u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\uff0c\u90a3\u76f4\u63a5\u62a5\u51fa\u4e00\u4e2a\u65e0\u542f\u52a8\u533a\u7684\u9519\u8bef\u3002 BIOS \u627e\u5230\u4e86\u8fd9\u4e2a\u542f\u52a8\u533a\u4e4b\u540e\u5e72\u561b\u5462\uff1f\u54e6\uff0c\u524d\u9762\u8bf4\u8fc7\u4e86\u662f\u52a0\u8f7d\uff0c \u5c31\u662f\u628a\u8fd9 512 \u4e2a\u5b57\u8282\u7684\u5185\u5bb9\uff0c\u4e00\u4e2a\u6bd4\u7279\u90fd\u4e0d\u5c11\u7684\u5168\u90e8\u590d\u5236\u5230\u5185\u5b58\u7684 0x7c00 \u8fd9\u4e2a\u4f4d\u7f6e \u3002\u600e\u4e48\u590d\u5236\u7684\uff1f\u5f53\u7136\u662f\u6307\u4ee4\u5566\u3002\u54ea\u4e9b\u6307\u4ee4\u5462\uff1f\u8fd9\u91cc\u6211\u53ea\u80fd\u7b80\u5355\u8bf4\u6307\u4ee4\u96c6\u4e2d\u662f\u6709 in \u548c out \u7684\uff0c\u7528\u6765\u5c06\u5916\u8bbe\u4e2d\u7684\u6570\u636e\u590d\u5236\u5230\u5185\u5b58\uff0c\u6216\u8005\u5c06\u5185\u5b58\u4e2d\u7684\u6570\u636e\u590d\u5236\u5230\u5916\u8bbe\uff0c\u7528\u8fd9\u4e24\u4e2a\u6307\u4ee4\uff0c\u4ee5\u53ca\u5916\u8bbe\u7ed9\u6211\u4eec\u63d0\u4f9b\u7684\u8bfb\u53d6\u65b9\u5f0f\uff0c\u5c31\u80fd\u505a\u5230\u8fd9\u4e00\u70b9\u5566\u3002 \u542f\u52a8\u533a\u5185\u5bb9\u6b64\u65f6\u5df2\u7ecf\u88ab BIOS \u7a0b\u5e8f\u590d\u5236\u5230\u4e86\u5185\u5b58\u7684 0x7c00 \u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u5462\uff1f\u8fd9\u4e2a\u5176\u5b9e\u4e5f\u4e0d\u96be\u731c\u6d4b\uff0c\u542f\u52a8\u533a\u7684\u5185\u5bb9\u5c31\u662f\u6211\u4eec\u81ea\u5df1\u5199\u7684\u4ee3\u7801\u4e86\uff0c\u590d\u5236\u5230\u8fd9\u91cc\u4e4b\u540e\uff0c\u5c31\u5f00\u59cb\u6267\u884c\u5457\uff0c\u4e4b\u540e\u6211\u4eec\u7684\u7a0b\u5e8f\u5c31\u63a5\u7ba1\u4e86\u63a5\u4e0b\u6765\u7684\u6d41\u7a0b\uff0cBIOS \u7684\u4f7f\u547d\u4e5f\u5c31\u7ed3\u675f\u5566\u3002\u6240\u4ee5\u590d\u5236\u5b8c\u4e4b\u540e\uff0c\u63a5\u4e0b\u6765\u5e94\u8be5\u662f\u4e00\u4e2a\u8df3\u8f6c\u6307\u4ee4\u5427\uff01\u6ca1\u9519\uff0c\u6b63\u662f\u8fd9\u6837\uff0cPC \u5bc4\u5b58\u5668\u7684\u503c\u53d8\u4e3a 0x7c00\uff0c\u6307\u4ee4\u5f00\u59cb\u4ece\u8fd9\u91cc\u6267\u884c\u3002 \u54a6\uff1f\u4e0d\u77e5\u9053\u4f60\u6709\u6ca1\u6709\u53d1\u73b0\uff0c\u6211\u4eec\u4f3c\u4e4e\u4e0d\u77e5\u4e0d\u89c9\u53c8\u628a\u4e4b\u524d\u7684\u4e00\u53e5\u9b54\u6cd5\u8bed\u8a00\u7ffb\u8bd1\u6210\u4eba\u8bdd\u4e86\uff0c\u5f00\u5934\u6211\u4eec\u8bf4\uff1a BIOS \u628a\u63a7\u5236\u6743\u8f6c\u4ea4\u7ed9\u6392\u5728\u7b2c\u4e00\u4f4d\u7684\u5b58\u50a8\u8bbe\u5907\u3002 \u6240\u4ee5\u8fd9\u53e5\u8bdd\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f \u5c31\u662f BIOS \u628a\u542f\u52a8\u533a\u7684 512 \u5b57\u8282\u590d\u5236\u5230\u5185\u5b58\u7684 0x7c00 \u4f4d\u7f6e\uff0c\u5e76\u4e14\u7528\u4e00\u6761\u8df3\u8f6c\u6307\u4ee4\u5c06 pc \u5bc4\u5b58\u5668\u7684\u503c\u6307\u5411 0x7c00 \u3002\u4f60\u770b\uff0c\u8fd9\u4e0d\u662f\u4e5f\u6ca1\u591a\u51e0\u4e2a\u5b57\u561b\uff0c\u5c31\u628a\u8fd9\u4e2a\u95ee\u9898\u8bf4\u5f97\u660e\u660e\u767d\u767d\uff0c\u7b80\u7b80\u5355\u5355\u3002 \u54e6\uff0c\u5bf9\u4e86\uff0c\u73b0\u5728\u4f3c\u4e4e\u5c31\u5269\u4e0b\u4e00\u4e2a\u95ee\u9898\u4e86\uff0c\u4e3a\u4ec0\u4e48\u975e\u8981\u662f 0x7c00 \u5462\uff1f \u5b83\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u89c4\u5b9a\u6b7b\u7684\u503c. \u7b54\u6848\u5f88\u7b80\u5355\uff0c\u90a3\u5c31\u662f\u4eba\u5bb6 BIOS \u5f00\u53d1\u56e2\u961f\u5c31\u662f\u8fd9\u6837\u5b9a\u7684.","title":"0x7c00 \u662f\u5565"},{"location":"chapter_4/6_cpu_famous_register/#0-0-1-512-0x55-0xaa-bios","text":"\u5176\u5b9e\u662f\u4e00\u4e2a\u89c4\u5b9a\u800c\u5df2 \u4f46\u4e5f\u6709\u4e00\u79cd\u6d6a\u6f2b\u7684\u89e3\u91ca: 0x55\u5bf9\u5e94ASCII\u7801\u7684U\uff0c\u4e5f\u5c31\u662fUnix\u7684\u9996\u5b57\u6bcd\u3002\u800c0x55\u5de6\u79fb\u4e00\u4f4d\u4e3a0xAA\uff0c\u8fd9\u91cc\u7684A\u4ee3\u6307AT&T\uff0c\u56e0\u4e3aUnix\u6765\u81ea\u4e8e\u201cAT&T Unix\u201d\u3002\u610f\u5373\uff0c\u611f\u8c22AT&T\u8bde\u751fUnix\u3002\u60f3\u60f3\uff0c\u673a\u5668\u542f\u52a8\u65f6\u6ee1\u8f7d\u611f\u6069\uff0c\u8fd9\u4e5f\u8bb8\u5c31\u662f\u5927\u795e\u4eec\u7684\u6d6a\u6f2b\u5427.","title":"\u4e3a\u5565\u786c\u76d8\u4e2d\u7684 0 \u76d8 0 \u9053 1 \u6247\u533a\u7684 512 \u4e2a\u5b57\u8282\u7684\u6700\u540e\u4e24\u4e2a\u5b57\u8282\u5206\u522b\u662f 0x55 \u548c 0xaa\uff0c\u90a3\u4e48 BIOS \u5c31\u4f1a\u8ba4\u4e3a\u5b83\u662f\u4e2a\u542f\u52a8\u533a\u3002"},{"location":"chapter_4/6_cpu_famous_register/#_12","text":"\u542f\u52a8\u533a\u91cc\u7684\u4ee3\u7801\u5199\u4e86\u5565\uff1f\u5c31 512 \u5b57\u8282\u5c31\u662f\u5168\u90e8\u64cd\u4f5c\u7cfb\u7edf\u5185\u5bb9\u4e86\uff1f \u8fd9\u662f\u4e00\u4e2a\u597d\u95ee\u9898\uff0c512 \u4e2a\u5b57\u8282\u786e\u5b9e\u5e72\u4e0d\u4e86\u5565\uff0c\u73b0\u5728\u7684\u64cd\u4f5c\u7cfb\u7edf\u600e\u4e48\u4e5f\u5f97\u6309 M \u4e3a\u5355\u4f4d\u7b97\u5427\uff0c512 \u4e2a\u5b57\u8282\u8fdc\u8fdc\u4e0d\u591f\u5462\uff0c\u90a3\u662f\u600e\u4e48\u56de\u4e8b\u5462\uff1f \u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u4e4b\u524d\u7684\u601d\u8def\u731c\u6d4b\uff0cBIOS \u7528\u5f88\u5c11\u7684\u4ee3\u7801\u5c31\u628a 512 \u5b57\u8282\u7684\u542f\u52a8\u533a\u5185\u5bb9\u52a0\u8f7d\u5230\u4e86\u5185\u5b58\uff0c\u5e76\u8df3\u8f6c\u8fc7\u53bb\u5f00\u59cb\u6267\u884c\u3002\u90a3\u6309\u7167\u8fd9\u4e2a\u5957\u8def\uff0c\u8fd9 512 \u5b57\u8282\u7684\u542f\u52a8\u533a\u4ee3\u7801\uff0c\u662f\u4e0d\u662f\u4e5f\u53ef\u4ee5\u628a\u66f4\u591a\u78c1\u76d8\u4e2d\u5b58\u50a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u7a0b\u5e8f\uff0c\u52a0\u8f7d\u5230\u5185\u5b58\u7684\u67d0\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u8df3\u8f6c\u8fc7\u53bb\u5462\uff1f \u6ca1\u9519\uff0c\u5c31\u662f\u8fd9\u4e2a\u5957\u8def\u3002\u6240\u4ee5 BIOS \u8d1f\u8d23\u52a0\u8f7d\u4e86\u542f\u52a8\u533a\uff0c\u800c\u542f\u52a8\u533a\u53c8\u8d1f\u8d23\u52a0\u8f7d\u771f\u6b63\u7684\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838 \uff0c\u8fd9\u914d\u5408\u9ed8\u5951\u5427\uff1f \u7531\u4e8e\u7528\u4e8e\u542f\u52a8\u76d8\u7684\u78c1\u76d8\u662f\u4eba\u5bb6\u5199\u64cd\u4f5c\u7cfb\u7edf\u7684\u5382\u5546\u5236\u4f5c\u7684\uff0c\u4fd7\u79f0\u5236\u4f5c\u542f\u52a8\u76d8\uff0c\u6240\u4ee5\u4ed6\u4e5f\u80af\u5b9a\u77e5\u9053\u64cd\u4f5c\u7cfb\u7edf\u7684\u6838\u5fc3\u4ee3\u7801\u5b58\u50a8\u5728\u78c1\u76d8\u7684\u54ea\u4e2a\u6247\u533a\uff0c\u56e0\u6b64\u542f\u52a8\u533a\u5c31\u628a\u8fd9\u4e2a\u6247\u533a\uff0c\u4ee5\u53ca\u4e4b\u540e\u7684\u597d\u591a\u597d\u591a\u6247\u533a\uff08\u5177\u4f53\u53d6\u51b3\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u6709\u591a\u5927\uff09\u90fd\u8bfb\u5230\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u5f00\u59cb\u7684\u7a0b\u5e8f\u5f00\u59cb\u7684\u4f4d\u7f6e\u3002\u8df3\u8f6c\u5230\u54ea\u91cc\u5462\uff1f\u8fd9\u4e2a\u5c31\u4e0d\u50cf 0x7c00 \u8fd9\u4e2a\u6570\u90a3\u4e48\u7ecf\u5178\u4e86\uff0c\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u80af\u5b9a\u4e5f\u4e0d\u4e00\u6837\uff0c\u4e5f\u4e0d\u7528\u4e8b\u5148\u89c4\u5b9a\u597d\uff0c\u53cd\u6b63\u5199\u64cd\u4f5c\u7cfb\u7edf\u7684\u4eba\u7ed9\u81ea\u5df1\u5b9a\u4e00\u4e2a\u5c31\u597d\u4e86\uff0c\u522b\u8986\u76d6\u5176\u4ed6\u5173\u952e\u8bbe\u5907\u7528\u5230\u7684\u533a\u57df\u5c31\u597d\u3002","title":"\u542f\u52a8\u533a\u91cc\u5199\u4e86\u5565?"},{"location":"chapter_4/6_cpu_famous_register/#_13","text":"\u597d\u4e86\u73b0\u5728\u7ecf\u8fc7\u597d\u51e0\u8f6e \u8df3\u8df3\u8df3 \uff0c\u7ec8\u4e8e\u8df3\u5230\u5185\u6838\u4ee3\u7801\u5566\uff0c\u6211\u4eec\u6765\u4e00\u8d77\u56de\u987e\u4e00\u4e0b\uff1a \u6309\u4e0b\u5f00\u673a\u952e\uff0cCPU \u5c06 PC \u5bc4\u5b58\u5668\u7684\u503c\u5f3a\u5236\u521d\u59cb\u5316\u4e3a 0xffff0\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u662f BIOS \u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740\uff08\u4e00\u8df3\uff09 \u8be5\u5165\u53e3\u5730\u5740\u5904\u662f\u4e00\u4e2a\u8df3\u8f6c\u6307\u4ee4\uff0c\u8df3\u8f6c\u5230 0xfe05b \u4f4d\u7f6e\uff0c\u5f00\u59cb\u6267\u884c\uff08\u4e8c\u8df3\uff09 \u6267\u884c\u4e86\u4e00\u4e9b\u786c\u4ef6\u68c0\u6d4b\u5de5\u4f5c\u540e\uff0c\u6700\u540e\u4e00\u6b65\u5c06\u542f\u52a8\u533a\u5185\u5bb9\u52a0\u8f7d\u5230\u5185\u5b58 0x7c00\uff0c\u5e76\u8df3\u8f6c\u5230\u8fd9\u91cc\uff08\u4e09\u8df3\uff09 \u542f\u52a8\u533a\u4ee3\u7801\u4e3b\u8981\u662f\u52a0\u8f7d\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\uff0c\u5e76\u8df3\u8f6c\u5230\u52a0\u8f7d\u5904\uff08\u56db\u8df3\uff09 \u7ecf\u8fc7\u8fd9\u8fde\u7eed\u7684\u56db\u6b21\u8df3\u8dc3\uff0c\u7ec8\u4e8e\u6765\u5230\u4e86\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e16\u754c\u4e86\uff0c\u5269\u4e0b\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u8bf4\u662f\u6574\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u8bfe\u7a0b\u6240\u8bb2\u8ff0\u7684\u539f\u7406\uff0c\u5206\u6bb5\u3001\u5206\u9875\u3001\u5efa\u7acb\u4e2d\u65ad\u3001\u8bbe\u5907\u9a71\u52a8\u3001\u5185\u5b58\u7ba1\u7406\u3001\u8fdb\u7a0b\u7ba1\u7406\u3001\u6587\u4ef6\u7cfb\u7edf\u3001\u7528\u6237\u6001\u63a5\u53e3\u7b49\u7b49\u3002","title":"\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u5199\u4e86\u5565"},{"location":"chapter_4/6_cpu_famous_register/#linux","text":"\u901a\u8fc7\u51e0\u5f20\u56fe\u611f\u53d7\u4e0b","title":"Linux\u542f\u52a8\u8fc7\u7a0b"},{"location":"chapter_4/6_cpu_famous_register/#linuxlogin-bash-shell","text":"Login Shell: /etc/profile-->/etc/profile.d/*.sh-->~/.bash_profile-->~/.bashrc-->/etc/bashrc \u975eLogin Shell: ~/.bashrc-->/etc/bashrc-->/etc/profile.d/*.sh \u53c2\u8003","title":"Linux\u7cfb\u7edfLogin\u4e2d, Bash Shell\u914d\u7f6e\u8bfb\u53d6\u8fc7\u7a0b"},{"location":"chapter_4/7_linux_signal/","text":"\u6982\u8ff0 \u672c\u7bc7\u4e3b\u8981\u8bb2\u8ff0Linux\u4fe1\u53f7\u673a\u5236 \u8fdb\u7a0b\u5904\u7406\u4fe1\u53f7\u7684\u65f6\u673a \u7528\u6237\u8fdb\u7a0b\u5904\u7406\u4fe1\u53f7\u7684\u65f6\u673a \u6211\u4eec\u5bf9\u4e00\u4e2a\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2a\u4fe1\u53f7\u4ee5\u540e\uff0c\u5176\u5b9e\u5e76\u6ca1\u6709\u786c\u4e2d\u65ad\u53d1\u751f\uff0c\u53ea\u662f\u7b80\u5355\u628a\u4fe1\u53f7\u6302\u8f7d\u5230\u76ee\u6807\u8fdb\u7a0b\u7684\u4fe1\u53f7 pending \u961f\u5217\u4e0a\u53bb\uff0c\u4fe1\u53f7\u771f\u6b63\u5f97\u5230\u6267\u884c\u7684\u65f6\u673a\u662f\u8fdb\u7a0b\u6267\u884c\u5b8c\u5f02\u5e38/\u4e2d\u65ad\u8fd4\u56de\u5230\u7528\u6237\u6001\u7684\u65f6\u523b\u3002 \u8ba9\u4fe1\u53f7\u770b\u8d77\u6765\u662f\u4e00\u4e2a\u5f02\u6b65\u4e2d\u65ad\u7684\u5173\u952e\u5c31\u662f\uff0c\u6b63\u5e38\u7684\u7528\u6237\u8fdb\u7a0b\u662f\u4f1a\u9891\u7e41\u7684\u5728\u7528\u6237\u6001\u548c\u5185\u6838\u6001\u4e4b\u95f4\u5207\u6362\u7684\uff08\u8fd9\u79cd\u5207\u6362\u5305\u62ec\uff1a\u7cfb\u7edf\u8c03\u7528\u3001\u7f3a\u9875\u5f02\u5e38\u3001\u7cfb\u7edf\u4e2d\u65ad\u2026\uff09\uff0c\u6240\u4ee5\u4fe1\u53f7\u80fd\u5f88\u5feb\u7684\u80fd\u5f97\u5230\u6267\u884c\u3002 \u4e0d\u540c\u72b6\u6001\u7684\u7528\u6237\u8fdb\u7a0b \u8fd0\u884c\u72b6\u6001 \u8fd0\u884c\u72b6\u6001\uff08TASK_RUNNING\uff09\u8fdb\u7a0b\u5bf9\u4fe1\u53f7\u7684\u54cd\u5e94\u65f6\u673a\uff1a\u4fe1\u53f7\u53d1\u9001\u540e\u6302\u5230\u76ee\u6807\u8fdb\u7a0b\u7684\u4fe1\u53f7\u961f\u5217\uff0c\u8fdb\u7a0b\u8fd4\u56de\u7528\u6237\u6001\u7684\u65f6\u5019\u5728 do_notify_resume() \u4e2d\u5904\u7406\u4fe1\u53f7 \u963b\u585e\u72b6\u6001 \u90a3\u4e48\u5bf9\u4e8e\u963b\u585e\u72b6\u6001\u7684\u8fdb\u7a0b\u53c8\u600e\u4e48\u6837\u6765\u54cd\u5e94\u4fe1\u53f7\u5462\uff1f \u8ba9\u4e00\u4e2a\u8fdb\u7a0b\u8fdb\u5165\u963b\u585e\u72b6\u6001\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u8ba9\u5176\u8fdb\u5165\u53ef\u4e2d\u65ad\uff08TASK_INTERRUPTIBLE\uff09\u6216\u8005\u4e0d\u53ef\u4e2d\u65ad\uff08TASK_UNINTERRUPTIBLE\uff09\u72b6\u6001\uff0c\u6bd4\u5982 mutex \u64cd\u4f5c\u5206\u4e3a mutex_lock() \u548c mutex_lock_interruptible()\u3002 \u6240\u8c13\u7684 \u53ef\u4e2d\u65ad \u548c \u4e0d\u53ef\u4e2d\u65ad \u5c31\u662f\u8bf4\u662f\u5426\u53ef\u4ee5\u88ab \u4e2d\u65ad\u4fe1\u53f7 \u6253\u65ad\uff1a \u5982\u679c\u8fdb\u7a0b\u5904\u4e8e\u53ef\u4e2d\u65ad\uff08TASK_INTERRUPTIBLE\uff09\u72b6\u6001\uff0c\u4fe1\u53f7\u53d1\u9001\u51fd\u6570\u4f1a\u76f4\u63a5\u5524\u9192\u8fdb\u7a0b\uff0c\u8ba9\u8fdb\u7a0b\u5904\u7406\u5b8c\u5185\u6838\u6001\u64cd\u4f5c\u53bb\u8fd4\u56de\u7528\u6237\u6001\uff0c\u8ba9\u8fdb\u7a0b\u8fc5\u901f\u53bb\u6267\u884c\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff1b \u5982\u679c\u8fdb\u7a0b\u5904\u4e8e\u4e0d\u53ef\u4e2d\u65ad\uff08TASK_UNINTERRUPTIBLE\uff09\u72b6\u6001\u4fd7\u79f0\u4e3a D \u8fdb\u7a0b\uff0c\u4fe1\u53f7\u53ea\u4f1a\u6302\u5230\u4fe1\u53f7\u961f\u5217\uff0c\u4f46\u662f\u6ca1\u6709\u673a\u4f1a\u53bb\u7acb\u5373\u6267\u884c\u3002 \u5185\u6838\u8fdb\u7a0b\u5904\u7406\u4fe1\u53f7\u7684\u65f6\u673a \u8ba9\u4fe1\u53f7\u770b\u8d77\u6765\u662f\u4e00\u4e2a\u5f02\u6b65\u4e2d\u65ad\u7684\u5173\u952e\u5c31\u662f\uff0c\u6b63\u5e38\u7684\u7528\u6237\u8fdb\u7a0b\u662f\u4f1a\u9891\u7e41\u7684\u5728\u7528\u6237\u6001\u548c\u5185\u6838\u6001\u4e4b\u95f4\u5207\u6362\u7684\uff08\u8fd9\u79cd\u5207\u6362\u5305\u62ec\uff1a\u7cfb\u7edf\u8c03\u7528\u3001\u7f3a\u9875\u5f02\u5e38\u3001\u7cfb\u7edf\u4e2d\u65ad\u2026\uff09\uff0c\u6240\u4ee5\u4fe1\u53f7\u80fd\u5f88\u5feb\u7684\u80fd\u5f97\u5230\u6267\u884c\u3002\u4f46\u8fd9\u4e5f\u5e26\u6765\u4e86\u4e00\u70b9\u95ee\u9898\uff0c\u5185\u6838\u8fdb\u7a0b\u662f\u4e0d\u54cd\u5e94\u4fe1\u53f7\u7684\uff0c\u9664\u975e\u5b83\u523b\u610f\u7684\u53bb\u67e5\u8be2\u3002\u6240\u4ee5\u901a\u5e38\u60c5\u51b5\u4e0b\u6211\u4eec\u65e0\u6cd5\u901a\u8fc7kill\u547d\u4ee4\u53bb\u6740\u6b7b\u4e00\u4e2a\u5185\u6838\u8fdb\u7a0b\u3002 \u5185\u6838\u8fdb\u7a0b\u666e\u901a\u60c5\u51b5\u4e0b\u662f\u4e0d\u4f1a\u54cd\u5e94\u4fe1\u53f7\u7684\uff0c\u5982\u679c\u9700\u8981\u5185\u6838\u8fdb\u7a0b\u54cd\u5e94\u4fe1\u53f7\uff0c\u53ef\u4ee5\u5728\u5185\u6838\u8fdb\u7a0b\u4e2d\u52a0\u5165\u5982\u4e0b\u4ee3\u7801\uff1a if (signal_pending(current)) { // \u81ea\u5b9a\u4e49\u4fe1\u53f7\u5904\u7406\u51fd\u6570 } flush_signals(current); \u5e38\u89c1\u7684\u4fe1\u53f7\u5206\u7c7b \u5728\u7ed9\u5927\u5bb6\u5f15\u51fa\u91cd\u70b9\u7684\u4fe1\u53f7\u54cd\u5e94\u65f6\u673a\u4ee5\u540e\uff0c\u8fd8\u662f\u7b80\u5355\u4ecb\u7ecd\u4ee5\u4e0b\u4fe1\u53f7\u7684\u80cc\u666f\u77e5\u8bc6\u3002 \u4fe1\u53f7\u4e5f\u662f\u4e00\u79cd\u8fdb\u7a0b\u95f4\u901a\u8baf\u7684\u673a\u5236\uff0c\u5b83\u4f20\u9012\u7684\u4fe1\u606f\u5f88\u77ed\uff0c\u53ea\u6709\u4e00\u4e2a\u7f16\u53f7 \u3002 \u5e38\u89c4\u4fe1\u53f7\u548c\u5b9e\u65f6\u4fe1\u53f7 Linux \u4f20\u7edf\u7684\u4fe1\u53f7 1~31 \u4e3a\u5e38\u89c4\u4fe1\u53f7\uff08regular signal\uff09\uff0cPOSIX \u8fd8\u5f15\u5165\u4e86\u4e00\u79cd\u65b0\u7684\u4fe1\u53f7\u5b9e\u65f6\u4fe1\u53f7\uff08real-time signal\uff09\u7f16\u53f7\u4e3a 32~64\u3002\u5b83\u4eec\u7684\u4e0d\u540c\u5728\u4e8e\uff1a\u5e38\u89c4\u4fe1\u53f7\u540c\u4e00\u4e2a\u7f16\u53f7\u5728 pending \u961f\u5217\u4e2d\u53ea\u5b58\u5728\u4e00\u4efd\uff0c\u5982\u679c\u6709\u91cd\u590d\u7684\u5219\u76f4\u63a5\u4e22\u5f03\uff1b\u5b9e\u65f6\u4fe1\u53f7\u7684\u591a\u4e2a\u76f8\u540c\u4fe1\u53f7\u4e0d\u80fd\u4e22\u5f03\uff0c\u9700\u8981\u4fdd\u8bc1\u6bcf\u4e2a\u4fe1\u53f7\u90fd\u80fd\u9001\u8fbe\u3002 Linux \u5e38\u7528\u7684\u662f\u5e38\u89c4\u4fe1\u53f7\uff0c\u4ee5\u4e0b\u662f\u5177\u4f53\u7684\u5b9a\u4e491 \u53ef\u4ee5\u88ab\u7528\u6237\u7a7a\u95f4\u6355\u83b7\u7684\u4fe1\u53f7 \u5e8f\u53f7 \u540d\u79f0 \u4f5c\u7528 1 HUP \u7ec8\u7aef\u77ed\u7ebf 15 TERM \u7ec8\u6b62 9 KILL \u5f3a\u5236\u7ec8\u6b62 18 CONT \u7ee7\u7eed\uff08\u4e0eSTOP\u76f8\u53cd\uff09 19 STOP \u6682\u505c\uff08\u540cctrl + z\uff09 \u6355\u83b7\u4fe1\u53f7\u4e4b\u540e\u7684\u5904\u7406\u8fc7\u7a0b : \u4fe1\u53f7\u7684\u53d1\u9001 \u4fe1\u53f7\u7684\u53d1\u9001\u8005\u53ef\u4ee5\u662f user \u4e5f\u53ef\u4ee5\u662f kernel\uff0c\u6211\u4eec\u7ecf\u5e38\u662f\u901a\u8fc7\u7528\u6237\u6001\u6765\u8c03\u7528 kill()\u3001tkill() \u7b49\u51fd\u6570\u6765\u53d1\u9001\u4fe1\u53f7\u7684\uff0c\u6211\u4eec\u901a\u8fc7\u5206\u6790\u8fd9\u4e9b\u7cfb\u7edf\u8c03\u7528\u6765\u7406\u89e3\u4fe1\u53f7\u7684\u5177\u4f53\u53d1\u9001\u8fc7\u7a0b\u3002 \u4e0e\u4fe1\u53f7\u76f8\u5173\u7684\u7cfb\u7edf\u8c03\u7528\u4e3b\u8981\u6709\u4ee5\u4e0b\u51fd\u6570\uff1a \u7cfb\u7edf\u8c03\u7528 \u8bf4\u660e kill \u5411\u7ebf\u7a0b\u7ec4\u53d1\u9001\u4fe1\u53f7 tkill \u5411\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f7 tgkill \u5411\u6307\u5b9a\u7ebf\u7a0b\u7ec4\u4e2d\u7684\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f7 signal \u6ce8\u518c\u4fe1\u53f7\u7684\u7528\u6237\u6001\u5904\u7406\u51fd\u6570 sigprocmask block/unblock\u4fe1\u53f7","title":"\u7b2c\u4e03\u7bc7 Linux\u4fe1\u53f7\u673a\u5236"},{"location":"chapter_4/7_linux_signal/#_1","text":"\u672c\u7bc7\u4e3b\u8981\u8bb2\u8ff0Linux\u4fe1\u53f7\u673a\u5236","title":"\u6982\u8ff0"},{"location":"chapter_4/7_linux_signal/#_2","text":"","title":"\u8fdb\u7a0b\u5904\u7406\u4fe1\u53f7\u7684\u65f6\u673a"},{"location":"chapter_4/7_linux_signal/#_3","text":"\u6211\u4eec\u5bf9\u4e00\u4e2a\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2a\u4fe1\u53f7\u4ee5\u540e\uff0c\u5176\u5b9e\u5e76\u6ca1\u6709\u786c\u4e2d\u65ad\u53d1\u751f\uff0c\u53ea\u662f\u7b80\u5355\u628a\u4fe1\u53f7\u6302\u8f7d\u5230\u76ee\u6807\u8fdb\u7a0b\u7684\u4fe1\u53f7 pending \u961f\u5217\u4e0a\u53bb\uff0c\u4fe1\u53f7\u771f\u6b63\u5f97\u5230\u6267\u884c\u7684\u65f6\u673a\u662f\u8fdb\u7a0b\u6267\u884c\u5b8c\u5f02\u5e38/\u4e2d\u65ad\u8fd4\u56de\u5230\u7528\u6237\u6001\u7684\u65f6\u523b\u3002 \u8ba9\u4fe1\u53f7\u770b\u8d77\u6765\u662f\u4e00\u4e2a\u5f02\u6b65\u4e2d\u65ad\u7684\u5173\u952e\u5c31\u662f\uff0c\u6b63\u5e38\u7684\u7528\u6237\u8fdb\u7a0b\u662f\u4f1a\u9891\u7e41\u7684\u5728\u7528\u6237\u6001\u548c\u5185\u6838\u6001\u4e4b\u95f4\u5207\u6362\u7684\uff08\u8fd9\u79cd\u5207\u6362\u5305\u62ec\uff1a\u7cfb\u7edf\u8c03\u7528\u3001\u7f3a\u9875\u5f02\u5e38\u3001\u7cfb\u7edf\u4e2d\u65ad\u2026\uff09\uff0c\u6240\u4ee5\u4fe1\u53f7\u80fd\u5f88\u5feb\u7684\u80fd\u5f97\u5230\u6267\u884c\u3002","title":"\u7528\u6237\u8fdb\u7a0b\u5904\u7406\u4fe1\u53f7\u7684\u65f6\u673a"},{"location":"chapter_4/7_linux_signal/#_4","text":"\u8fd0\u884c\u72b6\u6001 \u8fd0\u884c\u72b6\u6001\uff08TASK_RUNNING\uff09\u8fdb\u7a0b\u5bf9\u4fe1\u53f7\u7684\u54cd\u5e94\u65f6\u673a\uff1a\u4fe1\u53f7\u53d1\u9001\u540e\u6302\u5230\u76ee\u6807\u8fdb\u7a0b\u7684\u4fe1\u53f7\u961f\u5217\uff0c\u8fdb\u7a0b\u8fd4\u56de\u7528\u6237\u6001\u7684\u65f6\u5019\u5728 do_notify_resume() \u4e2d\u5904\u7406\u4fe1\u53f7 \u963b\u585e\u72b6\u6001 \u90a3\u4e48\u5bf9\u4e8e\u963b\u585e\u72b6\u6001\u7684\u8fdb\u7a0b\u53c8\u600e\u4e48\u6837\u6765\u54cd\u5e94\u4fe1\u53f7\u5462\uff1f \u8ba9\u4e00\u4e2a\u8fdb\u7a0b\u8fdb\u5165\u963b\u585e\u72b6\u6001\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u8ba9\u5176\u8fdb\u5165\u53ef\u4e2d\u65ad\uff08TASK_INTERRUPTIBLE\uff09\u6216\u8005\u4e0d\u53ef\u4e2d\u65ad\uff08TASK_UNINTERRUPTIBLE\uff09\u72b6\u6001\uff0c\u6bd4\u5982 mutex \u64cd\u4f5c\u5206\u4e3a mutex_lock() \u548c mutex_lock_interruptible()\u3002 \u6240\u8c13\u7684 \u53ef\u4e2d\u65ad \u548c \u4e0d\u53ef\u4e2d\u65ad \u5c31\u662f\u8bf4\u662f\u5426\u53ef\u4ee5\u88ab \u4e2d\u65ad\u4fe1\u53f7 \u6253\u65ad\uff1a \u5982\u679c\u8fdb\u7a0b\u5904\u4e8e\u53ef\u4e2d\u65ad\uff08TASK_INTERRUPTIBLE\uff09\u72b6\u6001\uff0c\u4fe1\u53f7\u53d1\u9001\u51fd\u6570\u4f1a\u76f4\u63a5\u5524\u9192\u8fdb\u7a0b\uff0c\u8ba9\u8fdb\u7a0b\u5904\u7406\u5b8c\u5185\u6838\u6001\u64cd\u4f5c\u53bb\u8fd4\u56de\u7528\u6237\u6001\uff0c\u8ba9\u8fdb\u7a0b\u8fc5\u901f\u53bb\u6267\u884c\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff1b \u5982\u679c\u8fdb\u7a0b\u5904\u4e8e\u4e0d\u53ef\u4e2d\u65ad\uff08TASK_UNINTERRUPTIBLE\uff09\u72b6\u6001\u4fd7\u79f0\u4e3a D \u8fdb\u7a0b\uff0c\u4fe1\u53f7\u53ea\u4f1a\u6302\u5230\u4fe1\u53f7\u961f\u5217\uff0c\u4f46\u662f\u6ca1\u6709\u673a\u4f1a\u53bb\u7acb\u5373\u6267\u884c\u3002","title":"\u4e0d\u540c\u72b6\u6001\u7684\u7528\u6237\u8fdb\u7a0b"},{"location":"chapter_4/7_linux_signal/#_5","text":"\u8ba9\u4fe1\u53f7\u770b\u8d77\u6765\u662f\u4e00\u4e2a\u5f02\u6b65\u4e2d\u65ad\u7684\u5173\u952e\u5c31\u662f\uff0c\u6b63\u5e38\u7684\u7528\u6237\u8fdb\u7a0b\u662f\u4f1a\u9891\u7e41\u7684\u5728\u7528\u6237\u6001\u548c\u5185\u6838\u6001\u4e4b\u95f4\u5207\u6362\u7684\uff08\u8fd9\u79cd\u5207\u6362\u5305\u62ec\uff1a\u7cfb\u7edf\u8c03\u7528\u3001\u7f3a\u9875\u5f02\u5e38\u3001\u7cfb\u7edf\u4e2d\u65ad\u2026\uff09\uff0c\u6240\u4ee5\u4fe1\u53f7\u80fd\u5f88\u5feb\u7684\u80fd\u5f97\u5230\u6267\u884c\u3002\u4f46\u8fd9\u4e5f\u5e26\u6765\u4e86\u4e00\u70b9\u95ee\u9898\uff0c\u5185\u6838\u8fdb\u7a0b\u662f\u4e0d\u54cd\u5e94\u4fe1\u53f7\u7684\uff0c\u9664\u975e\u5b83\u523b\u610f\u7684\u53bb\u67e5\u8be2\u3002\u6240\u4ee5\u901a\u5e38\u60c5\u51b5\u4e0b\u6211\u4eec\u65e0\u6cd5\u901a\u8fc7kill\u547d\u4ee4\u53bb\u6740\u6b7b\u4e00\u4e2a\u5185\u6838\u8fdb\u7a0b\u3002 \u5185\u6838\u8fdb\u7a0b\u666e\u901a\u60c5\u51b5\u4e0b\u662f\u4e0d\u4f1a\u54cd\u5e94\u4fe1\u53f7\u7684\uff0c\u5982\u679c\u9700\u8981\u5185\u6838\u8fdb\u7a0b\u54cd\u5e94\u4fe1\u53f7\uff0c\u53ef\u4ee5\u5728\u5185\u6838\u8fdb\u7a0b\u4e2d\u52a0\u5165\u5982\u4e0b\u4ee3\u7801\uff1a if (signal_pending(current)) { // \u81ea\u5b9a\u4e49\u4fe1\u53f7\u5904\u7406\u51fd\u6570 } flush_signals(current);","title":"\u5185\u6838\u8fdb\u7a0b\u5904\u7406\u4fe1\u53f7\u7684\u65f6\u673a"},{"location":"chapter_4/7_linux_signal/#_6","text":"\u5728\u7ed9\u5927\u5bb6\u5f15\u51fa\u91cd\u70b9\u7684\u4fe1\u53f7\u54cd\u5e94\u65f6\u673a\u4ee5\u540e\uff0c\u8fd8\u662f\u7b80\u5355\u4ecb\u7ecd\u4ee5\u4e0b\u4fe1\u53f7\u7684\u80cc\u666f\u77e5\u8bc6\u3002 \u4fe1\u53f7\u4e5f\u662f\u4e00\u79cd\u8fdb\u7a0b\u95f4\u901a\u8baf\u7684\u673a\u5236\uff0c\u5b83\u4f20\u9012\u7684\u4fe1\u606f\u5f88\u77ed\uff0c\u53ea\u6709\u4e00\u4e2a\u7f16\u53f7 \u3002","title":"\u5e38\u89c1\u7684\u4fe1\u53f7\u5206\u7c7b"},{"location":"chapter_4/7_linux_signal/#_7","text":"Linux \u4f20\u7edf\u7684\u4fe1\u53f7 1~31 \u4e3a\u5e38\u89c4\u4fe1\u53f7\uff08regular signal\uff09\uff0cPOSIX \u8fd8\u5f15\u5165\u4e86\u4e00\u79cd\u65b0\u7684\u4fe1\u53f7\u5b9e\u65f6\u4fe1\u53f7\uff08real-time signal\uff09\u7f16\u53f7\u4e3a 32~64\u3002\u5b83\u4eec\u7684\u4e0d\u540c\u5728\u4e8e\uff1a\u5e38\u89c4\u4fe1\u53f7\u540c\u4e00\u4e2a\u7f16\u53f7\u5728 pending \u961f\u5217\u4e2d\u53ea\u5b58\u5728\u4e00\u4efd\uff0c\u5982\u679c\u6709\u91cd\u590d\u7684\u5219\u76f4\u63a5\u4e22\u5f03\uff1b\u5b9e\u65f6\u4fe1\u53f7\u7684\u591a\u4e2a\u76f8\u540c\u4fe1\u53f7\u4e0d\u80fd\u4e22\u5f03\uff0c\u9700\u8981\u4fdd\u8bc1\u6bcf\u4e2a\u4fe1\u53f7\u90fd\u80fd\u9001\u8fbe\u3002 Linux \u5e38\u7528\u7684\u662f\u5e38\u89c4\u4fe1\u53f7\uff0c\u4ee5\u4e0b\u662f\u5177\u4f53\u7684\u5b9a\u4e491","title":"\u5e38\u89c4\u4fe1\u53f7\u548c\u5b9e\u65f6\u4fe1\u53f7"},{"location":"chapter_4/7_linux_signal/#_8","text":"\u5e8f\u53f7 \u540d\u79f0 \u4f5c\u7528 1 HUP \u7ec8\u7aef\u77ed\u7ebf 15 TERM \u7ec8\u6b62 9 KILL \u5f3a\u5236\u7ec8\u6b62 18 CONT \u7ee7\u7eed\uff08\u4e0eSTOP\u76f8\u53cd\uff09 19 STOP \u6682\u505c\uff08\u540cctrl + z\uff09 \u6355\u83b7\u4fe1\u53f7\u4e4b\u540e\u7684\u5904\u7406\u8fc7\u7a0b :","title":"\u53ef\u4ee5\u88ab\u7528\u6237\u7a7a\u95f4\u6355\u83b7\u7684\u4fe1\u53f7"},{"location":"chapter_4/7_linux_signal/#_9","text":"\u4fe1\u53f7\u7684\u53d1\u9001\u8005\u53ef\u4ee5\u662f user \u4e5f\u53ef\u4ee5\u662f kernel\uff0c\u6211\u4eec\u7ecf\u5e38\u662f\u901a\u8fc7\u7528\u6237\u6001\u6765\u8c03\u7528 kill()\u3001tkill() \u7b49\u51fd\u6570\u6765\u53d1\u9001\u4fe1\u53f7\u7684\uff0c\u6211\u4eec\u901a\u8fc7\u5206\u6790\u8fd9\u4e9b\u7cfb\u7edf\u8c03\u7528\u6765\u7406\u89e3\u4fe1\u53f7\u7684\u5177\u4f53\u53d1\u9001\u8fc7\u7a0b\u3002 \u4e0e\u4fe1\u53f7\u76f8\u5173\u7684\u7cfb\u7edf\u8c03\u7528\u4e3b\u8981\u6709\u4ee5\u4e0b\u51fd\u6570\uff1a \u7cfb\u7edf\u8c03\u7528 \u8bf4\u660e kill \u5411\u7ebf\u7a0b\u7ec4\u53d1\u9001\u4fe1\u53f7 tkill \u5411\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f7 tgkill \u5411\u6307\u5b9a\u7ebf\u7a0b\u7ec4\u4e2d\u7684\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f7 signal \u6ce8\u518c\u4fe1\u53f7\u7684\u7528\u6237\u6001\u5904\u7406\u51fd\u6570 sigprocmask block/unblock\u4fe1\u53f7","title":"\u4fe1\u53f7\u7684\u53d1\u9001"},{"location":"chapter_4/8_linux_scheduler/","text":"\u6982\u8ff0 \u672c\u7bc7\u8bb2\u8ff0 Linux \u8fdb\u7a0b\u8c03\u5ea6\u5668 \u4e00 \u8fdb\u7a0b\u8c03\u5ea6\u7684\u539f\u7406 \u8ba1\u7b97\u673a\u4e2d\u6709\u4e00\u4e2a\u8bbe\u5907\uff0c\u53eb\u5b9a\u65f6\u5668\uff0c\u51c6\u786e\u8bf4\u53eb\u53ef\u7f16\u7a0b\u5b9a\u65f6/\u8ba1\u6570\u5668\u3002 \u8fd9\u4e2a\u5b9a\u65f6\u5668\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u5c31\u4f1a\u5411 CPU \u53d1\u8d77\u4e00\u4e2a\u4e2d\u65ad\u4fe1\u53f7\u3002 \u5728 linux-0.11 \u4e2d\uff0c\u8fd9\u4e2a\u95f4\u9694\u65f6\u95f4\u88ab\u8bbe\u7f6e\u4e3a 10 ms\uff0c\u4e5f\u5c31\u662f 100 Hz\u3002 shedule.c #define HZ 100 \u53d1\u8d77\u7684\u4e2d\u65ad\u53eb\u65f6\u949f\u4e2d\u65ad\uff0c\u5176\u4e2d\u65ad\u5411\u91cf\u53f7\u88ab\u8bbe\u7f6e\u4e3a\u4e86 0x20\u3002 1 \u65f6\u949f\u4e2d\u65ad \u4e00\u5207\u7684\u6e90\u5934\uff0c\u5c31\u6e90\u4e8e\u8fd9\u4e2a\u6bcf 10ms \u4ea7\u751f\u7684\u4e00\u6b21\u65f6\u949f\u4e2d\u65ad\u3002 \u5f53\u7136\u5982\u679c\u6ca1\u6709\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b58\u5728\uff0c\u8fd9\u4e2a 10ms \u4e00\u6b21\u7684\u65f6\u949f\u4e2d\u65ad\uff0c\u5c31\u6253\u4e86\u6c34\u6f02\uff0cCPU \u4f1a\u6536\u5230\u8fd9\u4e2a\u65f6\u949f\u4e2d\u65ad\u4fe1\u53f7\uff0c\u4f46\u4e0d\u4f1a\u505a\u51fa\u4efb\u4f55\u53cd\u5e94\u3002 \u4f46\u5f88\u4e0d\u5e78\uff0clinux \u63d0\u524d\u8bbe\u7f6e\u597d\u4e86\u4e2d\u65ad\u5411\u91cf\u8868\u3002 schedule.c set_intr_gate(0x20, &timer_interrupt); \u8fd9\u6837\uff0c\u5f53\u65f6\u949f\u4e2d\u65ad\uff0c\u4e5f\u5c31\u662f 0x20 \u53f7\u4e2d\u65ad\u6765\u4e34\u65f6\uff0cCPU \u4f1a\u67e5\u627e\u4e2d\u65ad\u5411\u91cf\u8868\u4e2d 0x20 \u5904\u7684\u51fd\u6570\u5730\u5740\uff0c\u8fd9\u4e2a\u51fd\u6570\u5730\u5740\u5373\u4e2d\u65ad\u5904\u7406\u51fd\u6570\uff0c\u5e76\u8df3\u8f6c\u8fc7\u53bb\u6267\u884c\u3002 \u8fd9\u4e2a\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u5c31\u662f timer_interrupt\uff0c\u662f\u7528\u6c47\u7f16\u8bed\u8a00\u5199\u7684\u3002 system_call.s _timer_interrupt: ... // \u589e\u52a0\u7cfb\u7edf\u6ef4\u7b54\u6570 incl _jiffies ... // \u8c03\u7528\u51fd\u6570 do_timer call _do_timer ... \u8fd9\u4e2a\u51fd\u6570\u505a\u4e86\u4e24\u4ef6\u4e8b\uff0c\u4e00\u4e2a\u662f\u5c06\u7cfb\u7edf\u6ef4\u7b54\u6570\u8fd9\u4e2a\u53d8\u91cf jiffies \u52a0\u4e00\uff0c\u4e00\u4e2a\u662f\u8c03\u7528\u4e86\u53e6\u4e00\u4e2a\u51fd\u6570 do_timer\u3002 sched.c void do_timer(long cpl) { ... // \u5f53\u524d\u7ebf\u7a0b\u8fd8\u6709\u5269\u4f59\u65f6\u95f4\u7247\uff0c\u76f4\u63a5\u8fd4\u56de if ((--current->counter)>0) return; // \u82e5\u6ca1\u6709\u5269\u4f59\u65f6\u95f4\u7247\uff0c\u8c03\u5ea6 schedule(); } do_timer \u6700\u91cd\u8981\u7684\u90e8\u5206\u5c31\u662f\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0c\u975e\u5e38\u7b80\u5355\u3002 \u9996\u5148\u5c06\u5f53\u524d\u8fdb\u7a0b\u7684\u65f6\u95f4\u7247 -1\uff0c\u7136\u540e\u5224\u65ad\uff1a \u5982\u679c\u65f6\u95f4\u7247\u4ecd\u7136\u5927\u4e8e\u96f6\uff0c\u5219\u4ec0\u4e48\u90fd\u4e0d\u505a\u76f4\u63a5\u8fd4\u56de\u3002 \u540e\u7eed\u7ee7\u7eed\u4ece\u5185\u6838\u7a7a\u95f4\u8fd4\u56de\u7528\u6237\u7a7a\u95f4\u3001\u8fd0\u884c\u5f53\u524d\u7684\u8fdb\u7a0b. \u5982\u679c\u65f6\u95f4\u7247\u5df2\u7ecf\u4e3a\u96f6\uff0c\u5219\u8c03\u7528 schedule() \uff0c\u7528\u811a\u53bb\u60f3\u4e5f\u77e5\u9053\uff0c\u8fd9\u5c31\u662f\u8fdb\u884c\u8fdb\u7a0b\u8c03\u5ea6\u7684\u4e3b\u5e72\u3002 2 \u8fdb\u7a0b\u7684\u8c03\u5ea6 void schedule(void) { int i, next, c; struct task_struct ** p; ... while (1) { c = -1; next = 0; i = NR_TASKS; p = &task[NR_TASKS]; while (--i) { if (!*--p) continue; if ((*p)->state == TASK_RUNNING && (*p)->counter > c) c = (*p)->counter, next = i; } if (c) break; for(p = &LAST_TASK ; p > &FIRST_TASK ; --p) if (*p) (*p)->counter = ((*p)->counter >> 1) + (*p)->priority; } switch_to(next); } \u522b\u770b\u4e00\u5927\u5768\uff0c\u6211\u505a\u4e2a\u4e0d\u4e25\u8c28\u7684\u7b80\u5316\uff0c\u4f60\u5c31\u61c2\u4e86\u3002 void schedule(void) { int next = get_max_counter_from_runnable(); refresh_all_thread_counter(); switch_to(next); } \u5f88\u7b80\u7b54\uff0c\u8fd9\u4e2a\u51fd\u6570\u5c31\u505a\u4e86\u4e09\u4ef6\u4e8b\uff1a 1 \u62ff\u5230\u5269\u4f59\u65f6\u95f4\u7247\uff08counter \u7684\u503c\uff09\u6700\u5927\u4e14\u5728 runnable \u72b6\u6001\uff08state = 0\uff09\u7684\u8fdb\u7a0b\u53f7 next\u3002 2 \u5982\u679c\u6240\u6709 runnable \u8fdb\u7a0b\u65f6\u95f4\u7247\u90fd\u4e3a 0\uff0c\u5219\u5c06\u6240\u6709\u8fdb\u7a0b\uff08\u6ce8\u610f\u4e0d\u4ec5\u4ec5\u662f runnable \u7684\u8fdb\u7a0b\uff09\u7684 counter \u91cd\u65b0\u8d4b\u503c\uff08counter = counter/2 + priority\uff09\uff0c\u7136\u540e\u518d\u6b21\u6267\u884c\u6b65\u9aa4 1\u3002 3 \u6700\u540e\u62ff\u5230\u4e86\u4e00\u4e2a\u8fdb\u7a0b\u53f7 next\uff0c\u8c03\u7528\u4e86 switch_to(next) \u8fd9\u4e2a\u65b9\u6cd5\uff0c\u5c31\u5207\u6362\u5230\u4e86\u8fd9\u4e2a\u8fdb\u7a0b\u53bb\u6267\u884c\u4e86\u3002 3 \u5207\u6362\u8fdb\u7a0b \u770b switch_to \u65b9\u6cd5\uff0c\u662f\u7528\u5185\u8054\u6c47\u7f16\u8bed\u53e5\u5199\u7684\u3002 \u5176\u5b9e\u4e3b\u8981\u5c31\u5e72\u4e86\u4e24\u4ef6\u4e8b\u3002 \u901a\u8fc7 ljmp \u8df3\u8f6c\u6307\u4ee4\u8df3\u8f6c\u5230\u65b0\u8fdb\u7a0b\u7684\u504f\u79fb\u5730\u5740\u5904\u3002 \u5c06\u5f53\u524d\u5404\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u4fdd\u5b58\u5728\u5f53\u524d\u8fdb\u7a0b\u7684 TSS \u4e2d\uff0c\u5e76\u5c06\u65b0\u8fdb\u7a0b\u7684 TSS \u4fe1\u606f\u52a0\u8f7d\u5230\u5404\u4e2a\u5bc4\u5b58\u5668\u3002\uff08\u8fd9\u90e8\u5206\u662f\u6267\u884c ljmp \u6307\u4ee4\u7684\u526f\u4f5c\u7528\uff0c\u5e76\u4e14\u662f\u7531\u786c\u4ef6\u5b9e\u73b0\u7684\uff09 \u7b80\u5355\u8bf4\uff0c\u4fdd\u5b58\u5f53\u524d\u8fdb\u7a0b\u4e0a\u4e0b\u6587\uff0c\u6062\u590d\u4e0b\u4e00\u4e2a\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\uff0c\u8df3\u8fc7\u53bb\uff01\u5565\u662f\u4e0a\u4e0b\u6587\uff0c\u5c31\u662f\u4ed6\u55b5\u7684\u4e00\u5806\u5bc4\u5b58\u5668\u7684\u503c\u800c\u5df2\u3002 \u81f3\u6b64\uff0c\u6211\u4eec\u68b3\u7406\u5b8c\u4e86\u4e00\u4e2a\u8fdb\u7a0b\u5207\u6362\u7684\u6574\u6761\u94fe\u8def\uff0c\u5148\u6765\u56de\u987e\u4e00\u4e0b\u3002 \u7f6a\u9b41\u7978\u9996\u7684\uff0c\u5c31\u662f\u90a3\u4e2a\u6bcf 10ms \u89e6\u53d1\u4e00\u6b21\u7684\u5b9a\u65f6\u5668\u6ef4\u7b54\u3002 \u800c\u8fd9\u4e2a\u6ef4\u7b54\u5c06\u4f1a\u7ed9 CPU \u4ea7\u751f\u4e00\u4e2a\u65f6\u949f\u4e2d\u65ad\u4fe1\u53f7\u3002 \u800c\u8fd9\u4e2a\u4e2d\u65ad\u4fe1\u53f7\u4f1a\u4f7f CPU \u67e5\u627e\u4e2d\u65ad\u5411\u91cf\u8868\uff0c\u627e\u5230\u64cd\u4f5c\u7cfb\u7edf\u5199\u597d\u7684\u4e00\u4e2a\u65f6\u949f\u4e2d\u65ad\u5904\u7406\u51fd\u6570 do_timer\u3002 do_timer \u4f1a\u9996\u5148\u5c06\u5f53\u524d\u8fdb\u7a0b\u7684 counter \u53d8\u91cf -1\uff0c\u5982\u679c counter \u6b64\u65f6\u4ecd\u7136\u5927\u4e8e 0\uff0c\u5219\u5c31\u6b64\u7ed3\u675f\u3002 \u4f46\u5982\u679c counter = 0 \u4e86\uff0c\u5c31\u5f00\u59cb\u8fdb\u884c\u8fdb\u7a0b\u7684\u8c03\u5ea6\u3002 \u8fdb\u7a0b\u8c03\u5ea6\u5c31\u662f\u627e\u5230\u6240\u6709\u5904\u4e8e RUNNABLE \u72b6\u6001\u7684\u8fdb\u7a0b\uff0c\u5e76\u627e\u5230\u4e00\u4e2a counter \u503c\u6700\u5927\u7684\u8fdb\u7a0b\uff0c\u628a\u5b83\u4e22\u8fdb switch_to \u51fd\u6570\u7684\u5165\u53c2\u91cc\u3002 switch_to \u8fd9\u4e2a\u7ec8\u6781\u51fd\u6570\uff0c\u4f1a\u4fdd\u5b58\u5f53\u524d\u8fdb\u7a0b\u4e0a\u4e0b\u6587\uff0c\u6062\u590d\u8981\u8df3\u8f6c\u5230\u7684\u8fd9\u4e2a\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\uff0c\u540c\u65f6\u4f7f\u5f97 CPU \u8df3\u8f6c\u5230\u8fd9\u4e2a\u8fdb\u7a0b\u7684\u504f\u79fb\u5730\u5740\u5904\u3002 \u63a5\u7740\uff0c\u8fd9\u4e2a\u8fdb\u7a0b\u5c31\u8212\u8212\u670d\u670d\u5730\u8fd0\u884c\u4e86\u8d77\u6765\uff0c\u7b49\u5f85\u7740\u4e0b\u4e00\u6b21\u6ef4\u7b54\u7684\u6765\u4e34\u3002 \u4e8c \u8c03\u5ea6\u5668\u7684\u8fdb\u5316\u5386\u53f2: \u901a\u8fc7\u4e0a\u6587\u6211\u4eec\u77e5\u9053\u4e86\u5185\u6838\u4ee3\u7801\u91cc\u7684 schedule() \u51fd\u6570, \u5176\u5b9e\u5c31\u662f\u8c03\u5ea6\u5668. \u8fd9\u91cc\u8bf4\u660e\u4e0b\u8c03\u5ea6\u5668\u7684\u8fdb\u5316\u5386\u53f2 2.4 \u7248\u672c O(n)\u8c03\u5ea6\u5668 2.6 O(1)\u8c03\u5ea6\u5668 2.6 CFS \u8c03\u5ea6\u5668 \u4e09 CFS \u548c\u57fa\u4e8e\u65f6\u95f4\u7247\u8c03\u5ea6\u7684 O(1)\u7b97\u6cd5\u7684\u672c\u8d28\u533a\u522b\uff08\u672c\u8d28\u533a\u522b\u662f\u5565\uff09\uff1f O(1) \u8c03\u5ea6\u5668\u8fd8\u662f\u57fa\u4e8e\u65f6\u95f4\u7247\u7684\u3002 \u6709\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\uff1a\u8ba9\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u8fd0\u884c\u4e00\u6bb5\u76f8\u540c\u7684\u65f6\u95f4\u7247\uff0c\u8fd9\u5c31\u662f \u57fa\u4e8e\u65f6\u95f4\u7247\u8f6e\u8be2\u8c03\u5ea6\u7b97\u6cd5\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5f00\u59cb\u65f6\u8fdb\u7a0b 1 \u83b7\u5f97 time0 ~ time1 \u7684 CPU \u8fd0\u884c\u65f6\u95f4\u3002\u5f53\u8fdb\u7a0b 1 \u7684\u65f6\u95f4\u7247\u4f7f\u7528\u5b8c\u540e\uff0c\u8fdb\u7a0b 2 \u83b7\u5f97 time1 ~ time2 \u7684 CPU \u8fd0\u884c\u65f6\u95f4\u3002\u800c\u5f53\u8fdb\u7a0b 2 \u7684\u65f6\u95f4\u7247\u4f7f\u7528\u5b8c\u540e\uff0c\u8fdb\u7a0b 3 \u83b7\u5f97 time2 ~ time3 \u7684 CPU \u8fd0\u884c\u65f6\u95f4\u3002 \u5982\u6b64\u7c7b\u63a8\uff0c\u7531\u4e8e\u6bcf\u4e2a\u65f6\u95f4\u7247\u90fd\u662f\u76f8\u7b49\u7684\uff0c\u6240\u4ee5\u7406\u8bba\u4e0a\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u80fd\u83b7\u5f97\u76f8\u540c\u7684 CPU \u8fd0\u884c\u65f6\u95f4\u3002\u8fd9\u4e2a\u7b97\u6cd5\u770b\u8d77\u6765\u5f88\u4e0d\u9519\uff0c\u4f46\u5b58\u5728\u4e24\u4e2a\u95ee\u9898\uff1a \u4e0d\u80fd\u6309\u6743\u91cd\u5206\u914d\u4e0d\u540c\u7684\u8fd0\u884c\u65f6\u95f4\uff0c\u4f8b\u5982\u6709\u4e9b\u8fdb\u7a0b\u6743\u91cd\u5927\u7684\u5e94\u8be5\u83b7\u5f97\u66f4\u591a\u7684\u8fd0\u884c\u65f6\u95f4\u3002 \u6bcf\u6b21\u8c03\u5ea6\u65f6\u90fd\u9700\u8981\u904d\u5386\u8fd0\u884c\u961f\u5217\u4e2d\u7684\u6240\u6709\u8fdb\u7a0b\uff0c\u627e\u5230\u4f18\u5148\u7ea7\u6700\u5927\u7684\u8fdb\u7a0b\u8fd0\u884c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\u5bf9\u4e8e\u4e00\u4e2a\u9ad8\u6027\u80fd\u7684\u64cd\u4f5c\u7cfb\u7edf\u6765\u8bf4\uff0c\u8fd9\u662f\u4e0d\u80fd\u63a5\u53d7\u7684\u3002 \u4e3a\u4e86\u89e3\u51b3\u4e0a\u9762\u4e24\u4e2a\u95ee\u9898\uff0cLinux \u5185\u6838\u7684\u5f00\u53d1\u8005\u521b\u9020\u4e86 \u5b8c\u5168\u516c\u5e73\u8c03\u5ea6\u7b97\u6cd5\u3002 1 \u8fdb\u7a0b\u6743\u91cd\u7684\u95ee\u9898\uff0c\u5e94\u8be5 O(n)\u548c O(1)\u8c03\u5ea6\u7b97\u6cd5\u4e5f\u53ef\u4ee5\u89e3\u51b3. 2 \u968f\u7740\u8fdb\u7a0b\u6570\u4e0a\u5347\uff0c\u627e\u5230\u4f18\u5148\u7ea7\u6700\u5927\u7684\u90a3\u4e2a\u8fdb\u7a0b\u653e\u5230 CPU \u4e0a\u53bb\u8fd0\u884c\uff0c\u6700\u539f\u59cb\u7684\u505a\u6cd5\u662f\u968f\u7740\u8fdb\u7a0b\u6570\u589e\u5927\u800c\u8017\u8d39\u7684\u65f6\u95f4\u589e\u5927\uff0c\u8fd9\u4e2a O(n)\u8c03\u5ea6\u7b97\u6cd5\u7684\u7f3a\u9677\uff0c\u5230\u4e86 O(1)\u8c03\u5ea6\u7b97\u6cd5\u5df2\u7ecf\u5f97\u5230\u4e86\u89e3\u51b3. 3 \u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u662f\uff1a \u4e00\u4e2a\u65b0\u7684\u8c03\u5ea6\u5468\u671f\u5f00\u59cb\u7684\u65f6\u5019\u6240\u6709\u8fdb\u7a0b\u7684\u5269\u4f59\u65f6\u95f4\u7247\u90fd\u662f\u6ee1\u6ee1\u7684\uff0c\u8fd9\u4e2a\u65f6\u5019\u627e\u8c01\u6765\u8fd0\u884c\u5462\uff1f \u8fd9\u4e2a\u95ee\u9898\u4e00\u76f4\u6ca1\u6709\u5f88\u597d\u7684\u5f97\u5230\u89e3\u51b3. \u56db CFS\uff08\u5b8c\u5168\u516c\u5e73\u8c03\u5ea6\u5668\uff09\u7b80\u5316\u7248 1 CPU runqueues \u5185\u6838\u4e3a\u6bcf\u4e2a CPU \u521b\u5efa\u4e86\u4e00\u4e2a runqueue \u7ed3\u6784\uff0c\u7528\u4e8e\u7ba1\u7406\u8c03\u5ea6\u8be5 CPU \u4e0a\u7684\u6240\u6709\u53ef\u8fd0\u884c\u72b6\u6001\u7684 task_struct\u3002\u5728\u5b58\u5728\u591a\u4e2a\u53ef\u8fd0\u884c\u72b6\u6001\u7684 task \u65f6\uff0c\u9009\u62e9\u6700\u4f18\u7684\u4e00\u4e2a task \u8fd0\u884c\u8fbe\u5230\u5ef6\u65f6\u548c\u541e\u5410\u4e4b\u95f4\u7684\u5e73\u8861\u3002 2 vruntime(\u865a\u62df\u65f6\u95f4) vruntime \u7684\u6982\u5ff5\uff1aCFS \u8c03\u5ea6\u7b97\u6cd5\u4e0d\u518d\u6709\u5206\u914d\u65f6\u95f4\u7247\u7684\u6982\u5ff5\uff0c\u800c\u662f\u8ffd\u6c42\u6240\u6709 task \u7684 vruntime \u76f8\u7b49\u7684\u7406\u60f3\u7ed3\u679c\uff0c\u5f53 task \u4e4b\u95f4\u7684 vruntime \u5dee\u503c\u8fbe\u5230\u9608\u503c\u65f6\u5c31\u9700\u8981\u8fdb\u884c\u8c03\u5ea6\u5207\u6362\uff0c\u9009\u62e9\u4e0b\u4e00\u4e2a vruntime \u6700\u5c0f\u7684 task\uff0c\u4e5f\u5c31\u662f complete fair scheduler \u7684\u6838\u5fc3\u601d\u60f3\u3002 \u4e3a\u4e86\u6ee1\u8db3\u9ad8\u6548\u7684\u63d2\u5165\uff0c\u5220\u9664\u548c\u67e5\u627e\u6700\u5c0f vruntime \u7684\u64cd\u4f5c\uff0cCFS \u7528\u4e86\u7ea2\u9ed1\u6811\u7ba1\u7406\u6240\u6709\u7684 task_struct\uff0c\u6309 vruntime \u5927\u5c0f\u6392\u5e8f\u3002 3 \u7b80\u5316\u7248\u539f\u7406 \u770b\u7684\u662f\u8fdb\u7a0b\u5728 run queue \u91cc\u7b49\u5f85\u7684\u65f6\u95f4\uff08\u865a\u62df\u65f6\u95f4\uff09\uff0c\u8c01\u7b49\u5f85\u7684\u8d8a\u4e45\uff0c\u4e0b\u4e00\u4e2a\u5c31\u9009\u62e9\u8c01\u8fd0\u884c\u3002 \u5728\u540c\u4e00\u4e2a run queue \u91cc\uff0c\u540c\u4e00\u4e2a\u8c03\u5ea6\u5468\u671f\u91cc\uff0c\u5927\u5bb6\u7684\u865a\u62df\u65f6\u95f4\u90fd\u662f\u76f8\u7b49\u7684\u3002\u6bd4\u5982 \u540c\u4e00\u4e2a\u8c03\u5ea6\u5468\u671f\u91cc\uff0c\u8fdb\u7a0b\u4e00\u5171\u6709 2 \u4e2a\u3002 \u90a3\u4e48\u865a\u62df\u65f6\u95f4\u4e0a\uff0c2 \u4e2a\u8fdb\u7a0b\u5e73\u5206\u6574\u4e2a\u8c03\u5ea6\u5468\u671f\uff0c\u5404\u81ea\u8fd0\u884c\u4e00\u534a\u65f6\u95f4\u3002\u5982\u679c\u540c\u4e00\u4e2a\u8c03\u5ea6\u5468\u671f\u91cc\u6709 3 \u4e2a\u53ef\u8fd0\u884c\u8fdb\u7a0b\uff0c\u90a3\u4e48\u6bcf\u4e2a\u8fdb\u7a0b\u62ff\u5230 1/3 \u7684\u865a\u62df\u65f6\u95f4\uff0c\u653e\u5230 CPU \u4e0a\u53bb\u8fd0\u884c\u3002 \u4f46\u662f\u865a\u62df\u65f6\u95f4\u5230\u771f\u5b9e\u65f6\u95f4\u7684\u6620\u5c04\u6bd4\u4f8b\u662f\u4e0d\u540c\u7684\uff0c\u662f\u6309\u7167\u8fdb\u7a0b\u6743\u91cd\u6765\u7684\u3002 \u6bd4\u5982\u8c03\u5ea6\u5468\u671f\u4e3a 30ms\uff0c2 \u4e2a\u8fdb\u7a0b\uff0cA \u6743\u91cd\u4e3a 1\uff0cB \u6743\u91cd\u4e3a 2\uff0c\u90a3\u4e48\u865a\u62df\u65f6\u95f4\u5927\u5bb6\u90fd\u662f 15ms \u4f46\u662f\u865a\u62df\u65f6\u95f4\u5230\u771f\u5b9e\u65f6\u95f4\u7684\u6620\u5c04\u4e0d\u76f8\u540c\uff0c \u771f\u5b9e\u7684\u65f6\u95f4 A \u4e3a 10ms\uff0cB \u4e3a 20ms\u3002 \u865a\u62df\u65f6\u95f4\u91cc\uff0cA \u6bcf\u8fc7 1ms\uff0c\u771f\u5b9e\u65f6\u95f4\u4e0a\u8fc7\u53bb\u4e3a 0.66ms\uff0c B \u6bcf\u8fc7 1ms\uff0c\u771f\u5b9e\u65f6\u95f4\u4e0a\u8fc7\u53bb 1.33ms \u800c\u8c03\u5ea6\u7b97\u6cd5\u9009\u62e9\u8fdb\u7a0b\u7684\u65f6\u5019\uff0c\u53ea\u770b A \u548c B \u5728\u961f\u5217\u91cc\u7b49\u5f85\u7684\u65f6\u95f4\uff0c\u800c\u4e14\u662f\u4ee5\u865a\u62df\u65f6\u95f4\u4e3a\u8003\u91cf. \u7531\u6b64\u53ef\u77e5\uff0c\u865a\u62df\u65f6\u949f\u548c\u771f\u5b9e\u65f6\u95f4\u7684\u6362\u7b97\u662f\u6839\u636e\u8fdb\u7a0b\u7684\u6743\u91cd\uff08\u4e5f\u5c31\u662f\u4f18\u5148\u7ea7\uff09\u6765\u7684\u3002 4 \u7b80\u5316\u7248\u8c03\u5ea6\u8fc7\u7a0b \u5185\u6838\u4f9d\u8d56\u4e24\u79cd\u65b9\u5f0f\u9a71\u52a8\u8fdb\u7a0b\u7684\u88ab\u52a8\u8c03\u5ea6\uff1a \u4e00\u79cd\u662f\u6709 task \u5524\u9192\u52a0\u5165 runqueue \u65f6\u5224\u65ad\u662f\u5426 task \u5e94\u8be5\u62a2\u5360 curr \u4e00\u79cd\u662f\u5468\u671f\u6027\u65f6\u949f\u4e2d\u65ad\u5224\u65ad\u662f\u5426 curr \u5e94\u8be5\u5207\u6362\u5230 vruntime \u66f4\u5c0f\u7684 task\u3002 \u4e3b\u52a8\u8c03\u5ea6\u5219\u662f curr \u7531\u4e8e\u8d44\u6e90\u7b49\u5f85\u8fdb\u5165\u7761\u7720\u72b6\u6001\u7b49\u5f85\u540e\u9762\u88ab\u5524\u9192\uff0c\u6216\u8005\u8c03\u7528 yield \u8ba9\u51fa CPU\u3002 \u4e94 \u8fdb\u7a0b\u8c03\u5ea6\u76f8\u5173\u8d1f\u8f7d\u5747\u8861 \u5728\u591a CPU \u7cfb\u7edf\u4e0a\uff0c\u8fdb\u7a0b\u8fd0\u884c\u8d1f\u8f7d\u5e94\u8be5\u5c3d\u53ef\u80fd\u5728\u6240\u6709\u7684 CPU \u4e0a\u5747\u8861\u8c03\u5ea6\uff0c\u8fbe\u5230\u6700\u4f18\u5316\u7684\u6027\u80fd\u3002\u9664\u975e\u6709\u8282\u80fd\u7b49\u5176\u4ed6\u9700\u6c42\u3002 1 \u8d1f\u8f7d\u8ddf\u8e2a task \u662f\u5728 CPU \u4e4b\u95f4\u8d1f\u8f7d\u8fc1\u79fb\u7684\u6700\u5c0f\u5355\u4f4d\uff0c\u4e3a\u4e86\u6bd4\u8f83 CPU \u4e4b\u95f4\u7684\u8d1f\u8f7d\u548c\u8fc1\u79fb\u8ba1\u7b97\uff0c\u9700\u8981\u8ddf\u8e2a\u6bcf\u4e2a task \u7684\u8d1f\u8f7d\uff0c\u5185\u6838\u7528 PELT \u7b97\u6cd5\u5bf9 task \u7684 runnable \u65f6\u95f4\u6bd4\u4f8b\uff0crunning \u65f6\u95f4\u6bd4\u4f8b\u548c\u6743\u91cd\u8fdb\u884c\u4e86\u8ba1\u7b97\uff0c\u5f97\u5230\u67d0\u4e2a\u65f6\u523b\u7684 task \u8fd0\u884c\u8d1f\u8f7d\u3002 2 \u8c03\u5ea6\u57df \u7531\u4e8e CPU \u786c\u4ef6\u67b6\u6784\u7684\u591a\u6837\u6027\uff0ctask \u5728 CPU \u4e4b\u95f4\u8fc1\u79fb\u7684\u4ee3\u4ef7\u4e5f\u662f\u4e0d\u540c\u7684\uff0c\u5185\u6838\u4e3b\u8981\u8003\u8651 cache \u548c\u5185\u5b58\u5bf9\u8d1f\u8f7d\u8fc1\u79fb\u7684\u5f71\u54cd\u3002\u6240\u4ee5\u6309\u7167 CPU \u786c\u4ef6\u67b6\u6784\u5212\u5206\u4e86\u8c03\u5ea6\u57df\u3002 3 task \u8fc1\u79fb\u65f6\u673a task \u5728 CPU \u4e4b\u95f4\u7684\u8fc1\u79fb\u65f6\u673a\u4e3b\u8981\u6709\uff1a \u5524\u9192\u65f6\u8fc1\u79fb\uff1apush CPU \u8fdb\u5165 idle \u524d\u8fc1\u79fb\uff1apull CPU \u5468\u671f\u6027 load_balance\uff1apull\uff0c\u5728\u8f6f\u4e2d\u65ad\u8fdb\u884c\u3002 \u516d \u8be6\u7ec6\u7248\u8c03\u5ea6\u8fc7\u7a0b Linux \u8fdb\u7a0b\u8c03\u5ea6\uff1a\u8c03\u5ea6\u8fc7\u7a0b 1 \u6838\u5fc3\u6570\u636e\u7ed3\u6784 1.1 rq \u5185\u6838\u4e3a\u6bcf\u4e2a cpu \u7ef4\u62a4\u4e00\u4e2a\u8fd0\u884c\u961f\u5217\uff0c\u79f0\u4e3a per-cpu runqueue \u6216 per-cpu rq\uff0c\u6570\u636e\u7ed3\u6784\u7684\u4e3b\u8981\u6210\u5458\u5982\u4e0b\u6240\u793a\uff1a // kernel/sched/sched.h -- rq struct rq { raw_spinlock_t __lock; unsigned int nr_running; struct cfs_rq cfs; struct rt_rq rt; struct dl_rq dl; struct task_struct __rcu *curr; struct task_struct *idle; struct task_struct *stop; }; __lock\uff1a\u961f\u5217\u9501\u3002\u5982\u679c\u60f3\u8981\u9501\u5b9a\u591a\u4e2aper-cpu rq(\u5982\u8d1f\u8f7d\u5e73\u8861\u6216\u7ebf\u7a0b\u8fc1\u79fb\u90e8\u5206\u7684\u4ee3\u7801)\uff0c\u9501\u83b7\u53d6\u64cd\u4f5c\u5fc5\u987b\u6309per-cpu rq\u7f16\u53f7\u5347\u5e8f\u6392\u5e8f\uff0c\u4ee5\u9632\u6b62\u6b7b\u9501\u3002 nr_running\uff1arq\u4e0a\u53ef\u8fd0\u884c\u7684\u8fdb\u7a0b\u7684\u6570\u76ee\uff1b cfs\u3001rt\u3001dl\uff1a\u5d4c\u5165\u7684\u5b50\u5c31\u7eea\u961f\u5217\uff0c\u5206\u522b\u5c5e\u4e8e\u516c\u5e73\u8c03\u5ea6\u7c7b\u3001\u5b9e\u65f6\u8c03\u5ea6\u7c7b\u548c\u622a\u6b62\u65f6\u95f4\u8c03\u5ea6\u7c7b\uff1b curr\uff1a\u6307\u5411\u5f53\u524d\u8fd0\u884c\u8fdb\u7a0b\u7684task_struct\u5b9e\u4f8b\uff1b idle\uff1a\u6307\u5411idle\u8fdb\u7a0b\u7684task_struct\u5b9e\u4f8b\uff1b stop\uff1a\u6307\u5411stop\u8fdb\u7a0b\u7684task_struct\u5b9e\u4f8b\uff1b \u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u5c31\u7eea\u961f\u5217\u90fd\u4fdd\u5b58\u5728 runqueue \u6570\u7ec4 \u4e2d\uff0c\u8be5\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u5bf9\u5e94\u4e00\u4e2a cpu \u6bd4\u5982\uff0c\u5982\u4e0b\u4ee3\u7801\u4ece\u5f53\u524d cpu \u7684 runqueue \u6570\u7ec4 \u4e2d\u83b7\u53d6 rq DECLARE_PER_CPU(struct rq, runqueues); #define cpu_rq(cpu) (&per_cpu(runqueues, (cpu))) int cpu = smp_processor_id(); struct rq *rq = cpu_rq(cpu); 1.2 \u8c03\u5ea6\u5668\u7c7b 2 \u8c03\u5ea6\u5668\u7c7b\u662f\u4ec0\u4e48 for_each_class \u5b8f\u6309\u7167 stop_sched_class\u3001dl_sched_class\u3001rt_sched_class\u3001fair_sched_class\u3001idle_sched_class \u7684\u987a\u5e8f\u904d\u5386\u8c03\u5ea6\u7c7b\u7684 pick_next_task \u51fd\u6570\uff0c\u76f4\u5230\u53d6\u51fa\u4f18\u5148\u7ea7\u6700\u9ad8\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u63cf\u8ff0\u7b26\u3002 \u8bf4\u660e\u81f3\u5c11\u6709\u4ee5\u4e0b\u51e0\u4e2a\u8c03\u5ea6\u5668\u7c7b: stop_sched_class\u3001dl_sched_class\u3001rt_sched_class\u3001fair_sched_class\u3001idle_sched_class \u5e76\u4e14\u666e\u901a\u8fdb\u7a0b\u6700\u5e38\u7528\u7684\u662f fair_sched_class, idle \u8fdb\u7a0b\u7528\u7684\u662f idle_sched_class \u4ee5 fair_sched_class \u4e3a\u6838\u5fc3\u6a21\u578b\uff0c\u603b\u7ed3\u4e00\u4e0b\u5b83\u6709\u54ea\u4e9b\u5c5e\u6027: \u76f8\u5e94\u8c03\u5ea6\u5668\u7c7b\u7684\u65b9\u6cd5\u4f7f\u8be5\u8fdb\u7a0b\u505c\u6b62\u6d3b\u52a8(sched_class->dequeue_task) pick_next_task \u51fd\u6570, \u6311\u9009\u4e0b\u4e2a\u8fdb\u7a0b\uff1a p = class->pick_next_task(rq) \u8c03\u5ea6\u5668\u7c7b\u5468\u671f\u6027\u8c03\u5ea6\u65b9\u6cd5 \u6bd4\u5982\u5f53\u524d\u8fdb\u7a0b\u7684\u8c03\u5ea6\u7c7b\u7684\u5468\u671f\u6027\u8c03\u5ea6\u65b9\u6cd5 // kernel/sched/core.c -- scheduler_tick() curr->sched_class->task_tick(rq, curr, 0); \u5e76\u4e14\u8fdb\u7a0b\u662f\u5c5e\u4e8e\u67d0\u4e00\u4e2a\u8c03\u5ea6\u5668\u7c7b\u7684, \u5728 task_struct \u7ed3\u6784\u4f53\u4e2d\u6709\u5bf9\u5e94\u7684\u6210\u5458: const struct sched_class *sched_class \u516c\u5e73\u8c03\u5ea6\u7c7b\u7684 pick_next_task_fair \u6311\u9009\u65b0\u8fdb\u7a0b\uff0c p = pick_next_task_fair(rq, prev, rf); idle \u8c03\u5ea6\u7c7b\u7684\u9009\u8fdb\u7a0b\u7684\u51fd\u6570: p = pick_next_task_idle(rq); 3 \u5468\u671f\u6027\u8c03\u5ea6\u5668\u51fd\u6570\uff08scheduler_tick \u51fd\u6570\uff09 \u6309\u7167\u9891\u7387 HZ \u5468\u671f\u6027\u81ea\u52a8\u89e6\u53d1\u8be5\u51fd\u6570\uff0c\u5728\u89e6\u53d1\u65f6\u5173\u4e2d\u65ad\u3002\u4e3b\u8981\u6d89\u53ca\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u66f4\u65b0\u8c03\u5ea6\u76f8\u5173\u7684\u7edf\u8ba1\u91cf\uff0c\u5305\u62ec\u66f4\u65b0\u8ba1\u6570\u5668\u3001\u8d1f\u8f7d\u91cf\u3001\u70ed\u91cf\u7b49\u4fe1\u606f\uff1b \u6fc0\u6d3b\u8d1f\u8d23\u5f53\u524d\u8fdb\u7a0b\u7684\u8c03\u5ea6\u7c7b\u7684\u5468\u671f\u6027\u8c03\u5ea6\u65b9\u6cd5\u3002 \u53d8\u91cf\u521d\u59cb\u5316\u5982\u4e0b\uff1a // kernel/sched/core.c -- scheduler_tick() void scheduler_tick(void) { int cpu = smp_processor_id(); struct rq *rq = cpu_rq(cpu); struct task_struct *curr = rq->curr; struct rq_flags rf; unsigned long thermal_pressure; u64 resched_latency; 4 \u4e3b\u8c03\u5ea6\u51fd\u6570\uff08 __schedule() \u51fd\u6570\uff09 5 \u4e0a\u4e0b\u6587\u5207\u6362\uff08context switch\uff09 5.1 \u5207\u54ea\u4e9b\u5185\u5bb9 \u9ed8\u8ba4\u4e0d\u540c\u8fdb\u7a0b\u95f4\uff0c\u9700\u8981\u5207\u6362\uff1a \u5207\u6362 mm(struct mm_struct) \u5207\u6362\u5bc4\u5b58\u5668\uff08struct thread_info \u90e8\u5206\uff09\u548c\u5185\u6838\u6808 \u5728\u5207\u6362\u5bc4\u5b58\u5668\u72b6\u6001\u548c\u5185\u6838\u6808\u65f6\uff0c\u8c03\u7528 switch_to \u8fdb\u884c\u5207\u6362\u5373\u53ef\u3002 // kernel/sched/core.c -- context_switch /* \u4ea4\u6362\u5bc4\u5b58\u5668\u72b6\u6001\u548c\u5185\u6838\u6808 */ switch_to(prev, next, prev); barrier(); return finish_task_switch(prev); } switch_to \u5b8f\u4f20\u5165\u4e86\u4e09\u4e2a\u51fd\u6570\uff0c\u5176\u4e2d\u4e24\u4e2a\u662f prev\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u6709\u610f\u601d\u7684\u5b9e\u73b0\uff0c\u6211\u4eec\u5728 3.2 \u8282\u8be6\u7ec6\u8ba8\u8bba\uff1b finish_task_switch(prev)\u5b8f\u7528\u4e8e\u5b8c\u6210\u6e05\u7406\u5de5\u4f5c\uff0c\u4f7f\u5f97\u80fd\u591f\u6b63\u786e\u5730\u91ca\u653e\u9501\uff1b barrier \u4e3a\u5185\u5b58\u5c4f\u969c \uff0c\u7528\u4e8e\u786e\u4fdd switch_to \u5728 finish_task_switch \u5f00\u59cb\u524d\u6267\u884c\u5b8c\uff0c\u800c\u4e0d\u4f1a\u88ab\u7f16\u8bd1\u5668\u6216\u4e71\u5e8f\u53d1\u5c04\u5e72\u6270\u987a\u5e8f\u3002\u5728 3.2 \u8282\u4e2d\u6211\u4eec\u4f1a\u770b\u5230\u8fd9\u4e00\u7ea6\u675f\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002 5.2 \u6df1\u5165\u7406\u89e3 switch_to \u51fd\u6570 switch_to \u4e0e\u4f53\u7cfb\u7ed3\u6784\u76f8\u5173\uff0c\u5b9a\u4e49\u4e8e /arch/xxx/include/asm/switch_to.h \uff0c\u5176\u4e2d xxx \u8868\u793a\u4f53\u7cfb\u7ed3\u6784\u540d\u79f0\u3002\u7531\u4e8e\u5176\u5b9e\u73b0\u4e0e\u4f53\u7cfb\u7ed3\u6784\u548c\u6c47\u7f16\u8bed\u8a00\u76f8\u5173\uff0c\u8fd9\u91cc\u4e0d\u4ecb\u7ecd\u5177\u4f53\u7684\u5b9e\u73b0\uff0c\u800c\u662f\u8bf4\u660e \u4e3a\u4ec0\u4e48 switch_to \u5b8f\u9700\u8981\u4f20\u5165\u4e09\u4e2a\u53c2\u6570 \u3002 \u5728 3.1 \u8282\u4e2d\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fdb\u7a0b\u5728\u8c03\u7528 switch_to(prev, next, prev); \u540e\u90fd\u4f1a\u505c\u6b62\u6267\u884c\uff0c\u5207\u6362\u4e3a\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u6267\u884c\u3002\u56e0\u6b64\uff0c\u6bcf\u4e00\u4e2a\u7ecf\u5386\u8fc7 switch_to \u7684\u8fdb\u7a0b\uff0c\u5728\u4e0b\u6b21\u88ab\u8c03\u5ea6\u65f6\u90fd\u4f1a\u4ece return finish_task_switch(prev); \u5904\u5f00\u59cb\u6267\u884c\uff0c\u7136\u540e\u4ece __schedule() \u4ee3\u7801\u6bb5 return \u56de\u81ea\u5df1\u7684\u4ee3\u7801\u6bb5 \u3002 \u4e5f\u5c31\u662f\u8bf4 switch_to \u4e4b\u540e\u5c31\u771f\u6b63\u8fdb\u5165\u4e0b\u4e00\u4e2a\u8fdb\u7a0b\u5f00\u59cb\u6267\u884c\u4e86, \u524d\u9762\u90a3\u4e2a\u8fdb\u7a0b\u6062\u590d\u4e4b\u540e\u662f\u4ece return finish_task_switch(prev); \u5904\u5f00\u59cb\u6267\u884c\u7684 \u8fd9\u5c31\u53ef\u80fd\u51fa\u73b0\u4e0b\u9762\u8fd9\u6837\u7684\u573a\u666f\uff1a \u6309\u7167 \u8fdb\u7a0bA->\u8fdb\u7a0bC->\u8fdb\u7a0bC->\u8fdb\u7a0bA \u7684\u987a\u5e8f\u7684\u8fdb\u884c\u8fdb\u7a0b\u5207\u6362\uff0c\u5728 A \u6062\u590d\u6267\u884c\uff0c\u5373\u4ece return finish_task_switch(prev); \u5904\u5f00\u59cb\u6267\u884c\u65f6\uff0c\u6709 prev=A\u3001next=B\uff08\u6ce8\u610f\u8fd9\u91cc\u5e76\u6ca1\u6709\u518d\u53d1\u751f\u4ece\u8fdb\u7a0b A \u5207\u6362\u5230\u5176\u4ed6\u8fdb\u7a0b\u7684\u52a8\u4f5c\uff0c\u53ea\u662f\u6062\u590d\u4e86\u8fdb\u7a0b A \u5728\u5207\u6362\u524d\u7684\u53c2\u6570\uff09\u3002\u8fd9\u65f6\u5c31\u6267\u884c\u4e86 finish_task_switch(A) \u3002\u4f46\u5f88\u663e\u7136\uff0c\u9700\u8981\u6267\u884c\u7684\u662f finish_task_switch(C) \u3002 \u56e0\u6b64\uff0c\u4e3a\u6b63\u786e\u5730\u6267\u884c finish_task_switch \uff0c\u9700\u8981\u5728\u6bcf\u4e2a `switch_to \u8fd4\u56de\u65f6\u66f4\u65b0 prev \u3002 switch_to(prev, next, prev) \u51fd\u6570\u63d0\u4f9b\u4e86\u8fd9\u4e00\u529f\u80fd\u3002\u5728\u8fd9\u91cc\uff0c(\u9488\u5bf9\u8fdb\u7a0b A \u6765\u8bf4),\u4e09\u4e2a\u53c2\u6570\u5206\u522b\u8868\u793a\uff1a \u7b2c\u4e00\u4e2a prev\uff1a\u5207\u6362\u524d\u7684\u65e7\u8fdb\u7a0b\uff1b next\uff1a\u5207\u6362\u524d\u7684\u65b0\u8fdb\u7a0b\uff1b \u7b2c\u4e8c\u4e2a prev\uff1a\u5207\u6362\u540e\u7684\u65e7\u8fdb\u7a0b\uff1b \u6839\u636e\u8fd9\u4e00\u5de7\u5999\u7684\u8bbe\u8ba1\uff0c\u53ef\u4ee5\u5728\u8fdb\u7a0b A \u91cd\u65b0\u88ab\u8c03\u5ea6\u65f6\u7684\u5c06 prev \u66f4\u65b0\u4e3a C\uff0c\u4f7f\u5f97 finish_task_switch(C) \u88ab\u6b63\u786e\u5730\u8c03\u7528 \u3002","title":"\u7b2c\u516b\u7bc7 Linux\u8fdb\u7a0b\u8c03\u5ea6"},{"location":"chapter_4/8_linux_scheduler/#_1","text":"\u672c\u7bc7\u8bb2\u8ff0 Linux \u8fdb\u7a0b\u8c03\u5ea6\u5668","title":"\u6982\u8ff0"},{"location":"chapter_4/8_linux_scheduler/#_2","text":"\u8ba1\u7b97\u673a\u4e2d\u6709\u4e00\u4e2a\u8bbe\u5907\uff0c\u53eb\u5b9a\u65f6\u5668\uff0c\u51c6\u786e\u8bf4\u53eb\u53ef\u7f16\u7a0b\u5b9a\u65f6/\u8ba1\u6570\u5668\u3002 \u8fd9\u4e2a\u5b9a\u65f6\u5668\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u5c31\u4f1a\u5411 CPU \u53d1\u8d77\u4e00\u4e2a\u4e2d\u65ad\u4fe1\u53f7\u3002 \u5728 linux-0.11 \u4e2d\uff0c\u8fd9\u4e2a\u95f4\u9694\u65f6\u95f4\u88ab\u8bbe\u7f6e\u4e3a 10 ms\uff0c\u4e5f\u5c31\u662f 100 Hz\u3002 shedule.c #define HZ 100 \u53d1\u8d77\u7684\u4e2d\u65ad\u53eb\u65f6\u949f\u4e2d\u65ad\uff0c\u5176\u4e2d\u65ad\u5411\u91cf\u53f7\u88ab\u8bbe\u7f6e\u4e3a\u4e86 0x20\u3002","title":"\u4e00 \u8fdb\u7a0b\u8c03\u5ea6\u7684\u539f\u7406"},{"location":"chapter_4/8_linux_scheduler/#1","text":"\u4e00\u5207\u7684\u6e90\u5934\uff0c\u5c31\u6e90\u4e8e\u8fd9\u4e2a\u6bcf 10ms \u4ea7\u751f\u7684\u4e00\u6b21\u65f6\u949f\u4e2d\u65ad\u3002 \u5f53\u7136\u5982\u679c\u6ca1\u6709\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b58\u5728\uff0c\u8fd9\u4e2a 10ms \u4e00\u6b21\u7684\u65f6\u949f\u4e2d\u65ad\uff0c\u5c31\u6253\u4e86\u6c34\u6f02\uff0cCPU \u4f1a\u6536\u5230\u8fd9\u4e2a\u65f6\u949f\u4e2d\u65ad\u4fe1\u53f7\uff0c\u4f46\u4e0d\u4f1a\u505a\u51fa\u4efb\u4f55\u53cd\u5e94\u3002 \u4f46\u5f88\u4e0d\u5e78\uff0clinux \u63d0\u524d\u8bbe\u7f6e\u597d\u4e86\u4e2d\u65ad\u5411\u91cf\u8868\u3002 schedule.c set_intr_gate(0x20, &timer_interrupt); \u8fd9\u6837\uff0c\u5f53\u65f6\u949f\u4e2d\u65ad\uff0c\u4e5f\u5c31\u662f 0x20 \u53f7\u4e2d\u65ad\u6765\u4e34\u65f6\uff0cCPU \u4f1a\u67e5\u627e\u4e2d\u65ad\u5411\u91cf\u8868\u4e2d 0x20 \u5904\u7684\u51fd\u6570\u5730\u5740\uff0c\u8fd9\u4e2a\u51fd\u6570\u5730\u5740\u5373\u4e2d\u65ad\u5904\u7406\u51fd\u6570\uff0c\u5e76\u8df3\u8f6c\u8fc7\u53bb\u6267\u884c\u3002 \u8fd9\u4e2a\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u5c31\u662f timer_interrupt\uff0c\u662f\u7528\u6c47\u7f16\u8bed\u8a00\u5199\u7684\u3002 system_call.s _timer_interrupt: ... // \u589e\u52a0\u7cfb\u7edf\u6ef4\u7b54\u6570 incl _jiffies ... // \u8c03\u7528\u51fd\u6570 do_timer call _do_timer ... \u8fd9\u4e2a\u51fd\u6570\u505a\u4e86\u4e24\u4ef6\u4e8b\uff0c\u4e00\u4e2a\u662f\u5c06\u7cfb\u7edf\u6ef4\u7b54\u6570\u8fd9\u4e2a\u53d8\u91cf jiffies \u52a0\u4e00\uff0c\u4e00\u4e2a\u662f\u8c03\u7528\u4e86\u53e6\u4e00\u4e2a\u51fd\u6570 do_timer\u3002 sched.c void do_timer(long cpl) { ... // \u5f53\u524d\u7ebf\u7a0b\u8fd8\u6709\u5269\u4f59\u65f6\u95f4\u7247\uff0c\u76f4\u63a5\u8fd4\u56de if ((--current->counter)>0) return; // \u82e5\u6ca1\u6709\u5269\u4f59\u65f6\u95f4\u7247\uff0c\u8c03\u5ea6 schedule(); } do_timer \u6700\u91cd\u8981\u7684\u90e8\u5206\u5c31\u662f\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0c\u975e\u5e38\u7b80\u5355\u3002 \u9996\u5148\u5c06\u5f53\u524d\u8fdb\u7a0b\u7684\u65f6\u95f4\u7247 -1\uff0c\u7136\u540e\u5224\u65ad\uff1a \u5982\u679c\u65f6\u95f4\u7247\u4ecd\u7136\u5927\u4e8e\u96f6\uff0c\u5219\u4ec0\u4e48\u90fd\u4e0d\u505a\u76f4\u63a5\u8fd4\u56de\u3002 \u540e\u7eed\u7ee7\u7eed\u4ece\u5185\u6838\u7a7a\u95f4\u8fd4\u56de\u7528\u6237\u7a7a\u95f4\u3001\u8fd0\u884c\u5f53\u524d\u7684\u8fdb\u7a0b. \u5982\u679c\u65f6\u95f4\u7247\u5df2\u7ecf\u4e3a\u96f6\uff0c\u5219\u8c03\u7528 schedule() \uff0c\u7528\u811a\u53bb\u60f3\u4e5f\u77e5\u9053\uff0c\u8fd9\u5c31\u662f\u8fdb\u884c\u8fdb\u7a0b\u8c03\u5ea6\u7684\u4e3b\u5e72\u3002","title":"1 \u65f6\u949f\u4e2d\u65ad"},{"location":"chapter_4/8_linux_scheduler/#2","text":"void schedule(void) { int i, next, c; struct task_struct ** p; ... while (1) { c = -1; next = 0; i = NR_TASKS; p = &task[NR_TASKS]; while (--i) { if (!*--p) continue; if ((*p)->state == TASK_RUNNING && (*p)->counter > c) c = (*p)->counter, next = i; } if (c) break; for(p = &LAST_TASK ; p > &FIRST_TASK ; --p) if (*p) (*p)->counter = ((*p)->counter >> 1) + (*p)->priority; } switch_to(next); } \u522b\u770b\u4e00\u5927\u5768\uff0c\u6211\u505a\u4e2a\u4e0d\u4e25\u8c28\u7684\u7b80\u5316\uff0c\u4f60\u5c31\u61c2\u4e86\u3002 void schedule(void) { int next = get_max_counter_from_runnable(); refresh_all_thread_counter(); switch_to(next); } \u5f88\u7b80\u7b54\uff0c\u8fd9\u4e2a\u51fd\u6570\u5c31\u505a\u4e86\u4e09\u4ef6\u4e8b\uff1a 1 \u62ff\u5230\u5269\u4f59\u65f6\u95f4\u7247\uff08counter \u7684\u503c\uff09\u6700\u5927\u4e14\u5728 runnable \u72b6\u6001\uff08state = 0\uff09\u7684\u8fdb\u7a0b\u53f7 next\u3002 2 \u5982\u679c\u6240\u6709 runnable \u8fdb\u7a0b\u65f6\u95f4\u7247\u90fd\u4e3a 0\uff0c\u5219\u5c06\u6240\u6709\u8fdb\u7a0b\uff08\u6ce8\u610f\u4e0d\u4ec5\u4ec5\u662f runnable \u7684\u8fdb\u7a0b\uff09\u7684 counter \u91cd\u65b0\u8d4b\u503c\uff08counter = counter/2 + priority\uff09\uff0c\u7136\u540e\u518d\u6b21\u6267\u884c\u6b65\u9aa4 1\u3002 3 \u6700\u540e\u62ff\u5230\u4e86\u4e00\u4e2a\u8fdb\u7a0b\u53f7 next\uff0c\u8c03\u7528\u4e86 switch_to(next) \u8fd9\u4e2a\u65b9\u6cd5\uff0c\u5c31\u5207\u6362\u5230\u4e86\u8fd9\u4e2a\u8fdb\u7a0b\u53bb\u6267\u884c\u4e86\u3002","title":"2 \u8fdb\u7a0b\u7684\u8c03\u5ea6"},{"location":"chapter_4/8_linux_scheduler/#3","text":"\u770b switch_to \u65b9\u6cd5\uff0c\u662f\u7528\u5185\u8054\u6c47\u7f16\u8bed\u53e5\u5199\u7684\u3002 \u5176\u5b9e\u4e3b\u8981\u5c31\u5e72\u4e86\u4e24\u4ef6\u4e8b\u3002 \u901a\u8fc7 ljmp \u8df3\u8f6c\u6307\u4ee4\u8df3\u8f6c\u5230\u65b0\u8fdb\u7a0b\u7684\u504f\u79fb\u5730\u5740\u5904\u3002 \u5c06\u5f53\u524d\u5404\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u4fdd\u5b58\u5728\u5f53\u524d\u8fdb\u7a0b\u7684 TSS \u4e2d\uff0c\u5e76\u5c06\u65b0\u8fdb\u7a0b\u7684 TSS \u4fe1\u606f\u52a0\u8f7d\u5230\u5404\u4e2a\u5bc4\u5b58\u5668\u3002\uff08\u8fd9\u90e8\u5206\u662f\u6267\u884c ljmp \u6307\u4ee4\u7684\u526f\u4f5c\u7528\uff0c\u5e76\u4e14\u662f\u7531\u786c\u4ef6\u5b9e\u73b0\u7684\uff09 \u7b80\u5355\u8bf4\uff0c\u4fdd\u5b58\u5f53\u524d\u8fdb\u7a0b\u4e0a\u4e0b\u6587\uff0c\u6062\u590d\u4e0b\u4e00\u4e2a\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\uff0c\u8df3\u8fc7\u53bb\uff01\u5565\u662f\u4e0a\u4e0b\u6587\uff0c\u5c31\u662f\u4ed6\u55b5\u7684\u4e00\u5806\u5bc4\u5b58\u5668\u7684\u503c\u800c\u5df2\u3002 \u81f3\u6b64\uff0c\u6211\u4eec\u68b3\u7406\u5b8c\u4e86\u4e00\u4e2a\u8fdb\u7a0b\u5207\u6362\u7684\u6574\u6761\u94fe\u8def\uff0c\u5148\u6765\u56de\u987e\u4e00\u4e0b\u3002 \u7f6a\u9b41\u7978\u9996\u7684\uff0c\u5c31\u662f\u90a3\u4e2a\u6bcf 10ms \u89e6\u53d1\u4e00\u6b21\u7684\u5b9a\u65f6\u5668\u6ef4\u7b54\u3002 \u800c\u8fd9\u4e2a\u6ef4\u7b54\u5c06\u4f1a\u7ed9 CPU \u4ea7\u751f\u4e00\u4e2a\u65f6\u949f\u4e2d\u65ad\u4fe1\u53f7\u3002 \u800c\u8fd9\u4e2a\u4e2d\u65ad\u4fe1\u53f7\u4f1a\u4f7f CPU \u67e5\u627e\u4e2d\u65ad\u5411\u91cf\u8868\uff0c\u627e\u5230\u64cd\u4f5c\u7cfb\u7edf\u5199\u597d\u7684\u4e00\u4e2a\u65f6\u949f\u4e2d\u65ad\u5904\u7406\u51fd\u6570 do_timer\u3002 do_timer \u4f1a\u9996\u5148\u5c06\u5f53\u524d\u8fdb\u7a0b\u7684 counter \u53d8\u91cf -1\uff0c\u5982\u679c counter \u6b64\u65f6\u4ecd\u7136\u5927\u4e8e 0\uff0c\u5219\u5c31\u6b64\u7ed3\u675f\u3002 \u4f46\u5982\u679c counter = 0 \u4e86\uff0c\u5c31\u5f00\u59cb\u8fdb\u884c\u8fdb\u7a0b\u7684\u8c03\u5ea6\u3002 \u8fdb\u7a0b\u8c03\u5ea6\u5c31\u662f\u627e\u5230\u6240\u6709\u5904\u4e8e RUNNABLE \u72b6\u6001\u7684\u8fdb\u7a0b\uff0c\u5e76\u627e\u5230\u4e00\u4e2a counter \u503c\u6700\u5927\u7684\u8fdb\u7a0b\uff0c\u628a\u5b83\u4e22\u8fdb switch_to \u51fd\u6570\u7684\u5165\u53c2\u91cc\u3002 switch_to \u8fd9\u4e2a\u7ec8\u6781\u51fd\u6570\uff0c\u4f1a\u4fdd\u5b58\u5f53\u524d\u8fdb\u7a0b\u4e0a\u4e0b\u6587\uff0c\u6062\u590d\u8981\u8df3\u8f6c\u5230\u7684\u8fd9\u4e2a\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\uff0c\u540c\u65f6\u4f7f\u5f97 CPU \u8df3\u8f6c\u5230\u8fd9\u4e2a\u8fdb\u7a0b\u7684\u504f\u79fb\u5730\u5740\u5904\u3002 \u63a5\u7740\uff0c\u8fd9\u4e2a\u8fdb\u7a0b\u5c31\u8212\u8212\u670d\u670d\u5730\u8fd0\u884c\u4e86\u8d77\u6765\uff0c\u7b49\u5f85\u7740\u4e0b\u4e00\u6b21\u6ef4\u7b54\u7684\u6765\u4e34\u3002","title":"3 \u5207\u6362\u8fdb\u7a0b"},{"location":"chapter_4/8_linux_scheduler/#_3","text":"\u901a\u8fc7\u4e0a\u6587\u6211\u4eec\u77e5\u9053\u4e86\u5185\u6838\u4ee3\u7801\u91cc\u7684 schedule() \u51fd\u6570, \u5176\u5b9e\u5c31\u662f\u8c03\u5ea6\u5668. \u8fd9\u91cc\u8bf4\u660e\u4e0b\u8c03\u5ea6\u5668\u7684\u8fdb\u5316\u5386\u53f2 2.4 \u7248\u672c O(n)\u8c03\u5ea6\u5668 2.6 O(1)\u8c03\u5ea6\u5668 2.6 CFS \u8c03\u5ea6\u5668","title":"\u4e8c \u8c03\u5ea6\u5668\u7684\u8fdb\u5316\u5386\u53f2:"},{"location":"chapter_4/8_linux_scheduler/#cfs-o1","text":"O(1) \u8c03\u5ea6\u5668\u8fd8\u662f\u57fa\u4e8e\u65f6\u95f4\u7247\u7684\u3002 \u6709\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\uff1a\u8ba9\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u8fd0\u884c\u4e00\u6bb5\u76f8\u540c\u7684\u65f6\u95f4\u7247\uff0c\u8fd9\u5c31\u662f \u57fa\u4e8e\u65f6\u95f4\u7247\u8f6e\u8be2\u8c03\u5ea6\u7b97\u6cd5\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5f00\u59cb\u65f6\u8fdb\u7a0b 1 \u83b7\u5f97 time0 ~ time1 \u7684 CPU \u8fd0\u884c\u65f6\u95f4\u3002\u5f53\u8fdb\u7a0b 1 \u7684\u65f6\u95f4\u7247\u4f7f\u7528\u5b8c\u540e\uff0c\u8fdb\u7a0b 2 \u83b7\u5f97 time1 ~ time2 \u7684 CPU \u8fd0\u884c\u65f6\u95f4\u3002\u800c\u5f53\u8fdb\u7a0b 2 \u7684\u65f6\u95f4\u7247\u4f7f\u7528\u5b8c\u540e\uff0c\u8fdb\u7a0b 3 \u83b7\u5f97 time2 ~ time3 \u7684 CPU \u8fd0\u884c\u65f6\u95f4\u3002 \u5982\u6b64\u7c7b\u63a8\uff0c\u7531\u4e8e\u6bcf\u4e2a\u65f6\u95f4\u7247\u90fd\u662f\u76f8\u7b49\u7684\uff0c\u6240\u4ee5\u7406\u8bba\u4e0a\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u80fd\u83b7\u5f97\u76f8\u540c\u7684 CPU \u8fd0\u884c\u65f6\u95f4\u3002\u8fd9\u4e2a\u7b97\u6cd5\u770b\u8d77\u6765\u5f88\u4e0d\u9519\uff0c\u4f46\u5b58\u5728\u4e24\u4e2a\u95ee\u9898\uff1a \u4e0d\u80fd\u6309\u6743\u91cd\u5206\u914d\u4e0d\u540c\u7684\u8fd0\u884c\u65f6\u95f4\uff0c\u4f8b\u5982\u6709\u4e9b\u8fdb\u7a0b\u6743\u91cd\u5927\u7684\u5e94\u8be5\u83b7\u5f97\u66f4\u591a\u7684\u8fd0\u884c\u65f6\u95f4\u3002 \u6bcf\u6b21\u8c03\u5ea6\u65f6\u90fd\u9700\u8981\u904d\u5386\u8fd0\u884c\u961f\u5217\u4e2d\u7684\u6240\u6709\u8fdb\u7a0b\uff0c\u627e\u5230\u4f18\u5148\u7ea7\u6700\u5927\u7684\u8fdb\u7a0b\u8fd0\u884c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\u5bf9\u4e8e\u4e00\u4e2a\u9ad8\u6027\u80fd\u7684\u64cd\u4f5c\u7cfb\u7edf\u6765\u8bf4\uff0c\u8fd9\u662f\u4e0d\u80fd\u63a5\u53d7\u7684\u3002 \u4e3a\u4e86\u89e3\u51b3\u4e0a\u9762\u4e24\u4e2a\u95ee\u9898\uff0cLinux \u5185\u6838\u7684\u5f00\u53d1\u8005\u521b\u9020\u4e86 \u5b8c\u5168\u516c\u5e73\u8c03\u5ea6\u7b97\u6cd5\u3002 1 \u8fdb\u7a0b\u6743\u91cd\u7684\u95ee\u9898\uff0c\u5e94\u8be5 O(n)\u548c O(1)\u8c03\u5ea6\u7b97\u6cd5\u4e5f\u53ef\u4ee5\u89e3\u51b3. 2 \u968f\u7740\u8fdb\u7a0b\u6570\u4e0a\u5347\uff0c\u627e\u5230\u4f18\u5148\u7ea7\u6700\u5927\u7684\u90a3\u4e2a\u8fdb\u7a0b\u653e\u5230 CPU \u4e0a\u53bb\u8fd0\u884c\uff0c\u6700\u539f\u59cb\u7684\u505a\u6cd5\u662f\u968f\u7740\u8fdb\u7a0b\u6570\u589e\u5927\u800c\u8017\u8d39\u7684\u65f6\u95f4\u589e\u5927\uff0c\u8fd9\u4e2a O(n)\u8c03\u5ea6\u7b97\u6cd5\u7684\u7f3a\u9677\uff0c\u5230\u4e86 O(1)\u8c03\u5ea6\u7b97\u6cd5\u5df2\u7ecf\u5f97\u5230\u4e86\u89e3\u51b3. 3 \u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u662f\uff1a \u4e00\u4e2a\u65b0\u7684\u8c03\u5ea6\u5468\u671f\u5f00\u59cb\u7684\u65f6\u5019\u6240\u6709\u8fdb\u7a0b\u7684\u5269\u4f59\u65f6\u95f4\u7247\u90fd\u662f\u6ee1\u6ee1\u7684\uff0c\u8fd9\u4e2a\u65f6\u5019\u627e\u8c01\u6765\u8fd0\u884c\u5462\uff1f \u8fd9\u4e2a\u95ee\u9898\u4e00\u76f4\u6ca1\u6709\u5f88\u597d\u7684\u5f97\u5230\u89e3\u51b3.","title":"\u4e09 CFS \u548c\u57fa\u4e8e\u65f6\u95f4\u7247\u8c03\u5ea6\u7684 O(1)\u7b97\u6cd5\u7684\u672c\u8d28\u533a\u522b\uff08\u672c\u8d28\u533a\u522b\u662f\u5565\uff09\uff1f"},{"location":"chapter_4/8_linux_scheduler/#cfs","text":"","title":"\u56db CFS\uff08\u5b8c\u5168\u516c\u5e73\u8c03\u5ea6\u5668\uff09\u7b80\u5316\u7248"},{"location":"chapter_4/8_linux_scheduler/#1-cpu-runqueues","text":"\u5185\u6838\u4e3a\u6bcf\u4e2a CPU \u521b\u5efa\u4e86\u4e00\u4e2a runqueue \u7ed3\u6784\uff0c\u7528\u4e8e\u7ba1\u7406\u8c03\u5ea6\u8be5 CPU \u4e0a\u7684\u6240\u6709\u53ef\u8fd0\u884c\u72b6\u6001\u7684 task_struct\u3002\u5728\u5b58\u5728\u591a\u4e2a\u53ef\u8fd0\u884c\u72b6\u6001\u7684 task \u65f6\uff0c\u9009\u62e9\u6700\u4f18\u7684\u4e00\u4e2a task \u8fd0\u884c\u8fbe\u5230\u5ef6\u65f6\u548c\u541e\u5410\u4e4b\u95f4\u7684\u5e73\u8861\u3002","title":"1 CPU runqueues"},{"location":"chapter_4/8_linux_scheduler/#2-vruntime","text":"vruntime \u7684\u6982\u5ff5\uff1aCFS \u8c03\u5ea6\u7b97\u6cd5\u4e0d\u518d\u6709\u5206\u914d\u65f6\u95f4\u7247\u7684\u6982\u5ff5\uff0c\u800c\u662f\u8ffd\u6c42\u6240\u6709 task \u7684 vruntime \u76f8\u7b49\u7684\u7406\u60f3\u7ed3\u679c\uff0c\u5f53 task \u4e4b\u95f4\u7684 vruntime \u5dee\u503c\u8fbe\u5230\u9608\u503c\u65f6\u5c31\u9700\u8981\u8fdb\u884c\u8c03\u5ea6\u5207\u6362\uff0c\u9009\u62e9\u4e0b\u4e00\u4e2a vruntime \u6700\u5c0f\u7684 task\uff0c\u4e5f\u5c31\u662f complete fair scheduler \u7684\u6838\u5fc3\u601d\u60f3\u3002 \u4e3a\u4e86\u6ee1\u8db3\u9ad8\u6548\u7684\u63d2\u5165\uff0c\u5220\u9664\u548c\u67e5\u627e\u6700\u5c0f vruntime \u7684\u64cd\u4f5c\uff0cCFS \u7528\u4e86\u7ea2\u9ed1\u6811\u7ba1\u7406\u6240\u6709\u7684 task_struct\uff0c\u6309 vruntime \u5927\u5c0f\u6392\u5e8f\u3002","title":"2 vruntime(\u865a\u62df\u65f6\u95f4)"},{"location":"chapter_4/8_linux_scheduler/#3_1","text":"\u770b\u7684\u662f\u8fdb\u7a0b\u5728 run queue \u91cc\u7b49\u5f85\u7684\u65f6\u95f4\uff08\u865a\u62df\u65f6\u95f4\uff09\uff0c\u8c01\u7b49\u5f85\u7684\u8d8a\u4e45\uff0c\u4e0b\u4e00\u4e2a\u5c31\u9009\u62e9\u8c01\u8fd0\u884c\u3002 \u5728\u540c\u4e00\u4e2a run queue \u91cc\uff0c\u540c\u4e00\u4e2a\u8c03\u5ea6\u5468\u671f\u91cc\uff0c\u5927\u5bb6\u7684\u865a\u62df\u65f6\u95f4\u90fd\u662f\u76f8\u7b49\u7684\u3002\u6bd4\u5982 \u540c\u4e00\u4e2a\u8c03\u5ea6\u5468\u671f\u91cc\uff0c\u8fdb\u7a0b\u4e00\u5171\u6709 2 \u4e2a\u3002 \u90a3\u4e48\u865a\u62df\u65f6\u95f4\u4e0a\uff0c2 \u4e2a\u8fdb\u7a0b\u5e73\u5206\u6574\u4e2a\u8c03\u5ea6\u5468\u671f\uff0c\u5404\u81ea\u8fd0\u884c\u4e00\u534a\u65f6\u95f4\u3002\u5982\u679c\u540c\u4e00\u4e2a\u8c03\u5ea6\u5468\u671f\u91cc\u6709 3 \u4e2a\u53ef\u8fd0\u884c\u8fdb\u7a0b\uff0c\u90a3\u4e48\u6bcf\u4e2a\u8fdb\u7a0b\u62ff\u5230 1/3 \u7684\u865a\u62df\u65f6\u95f4\uff0c\u653e\u5230 CPU \u4e0a\u53bb\u8fd0\u884c\u3002 \u4f46\u662f\u865a\u62df\u65f6\u95f4\u5230\u771f\u5b9e\u65f6\u95f4\u7684\u6620\u5c04\u6bd4\u4f8b\u662f\u4e0d\u540c\u7684\uff0c\u662f\u6309\u7167\u8fdb\u7a0b\u6743\u91cd\u6765\u7684\u3002 \u6bd4\u5982\u8c03\u5ea6\u5468\u671f\u4e3a 30ms\uff0c2 \u4e2a\u8fdb\u7a0b\uff0cA \u6743\u91cd\u4e3a 1\uff0cB \u6743\u91cd\u4e3a 2\uff0c\u90a3\u4e48\u865a\u62df\u65f6\u95f4\u5927\u5bb6\u90fd\u662f 15ms \u4f46\u662f\u865a\u62df\u65f6\u95f4\u5230\u771f\u5b9e\u65f6\u95f4\u7684\u6620\u5c04\u4e0d\u76f8\u540c\uff0c \u771f\u5b9e\u7684\u65f6\u95f4 A \u4e3a 10ms\uff0cB \u4e3a 20ms\u3002 \u865a\u62df\u65f6\u95f4\u91cc\uff0cA \u6bcf\u8fc7 1ms\uff0c\u771f\u5b9e\u65f6\u95f4\u4e0a\u8fc7\u53bb\u4e3a 0.66ms\uff0c B \u6bcf\u8fc7 1ms\uff0c\u771f\u5b9e\u65f6\u95f4\u4e0a\u8fc7\u53bb 1.33ms \u800c\u8c03\u5ea6\u7b97\u6cd5\u9009\u62e9\u8fdb\u7a0b\u7684\u65f6\u5019\uff0c\u53ea\u770b A \u548c B \u5728\u961f\u5217\u91cc\u7b49\u5f85\u7684\u65f6\u95f4\uff0c\u800c\u4e14\u662f\u4ee5\u865a\u62df\u65f6\u95f4\u4e3a\u8003\u91cf. \u7531\u6b64\u53ef\u77e5\uff0c\u865a\u62df\u65f6\u949f\u548c\u771f\u5b9e\u65f6\u95f4\u7684\u6362\u7b97\u662f\u6839\u636e\u8fdb\u7a0b\u7684\u6743\u91cd\uff08\u4e5f\u5c31\u662f\u4f18\u5148\u7ea7\uff09\u6765\u7684\u3002","title":"3 \u7b80\u5316\u7248\u539f\u7406"},{"location":"chapter_4/8_linux_scheduler/#4","text":"\u5185\u6838\u4f9d\u8d56\u4e24\u79cd\u65b9\u5f0f\u9a71\u52a8\u8fdb\u7a0b\u7684\u88ab\u52a8\u8c03\u5ea6\uff1a \u4e00\u79cd\u662f\u6709 task \u5524\u9192\u52a0\u5165 runqueue \u65f6\u5224\u65ad\u662f\u5426 task \u5e94\u8be5\u62a2\u5360 curr \u4e00\u79cd\u662f\u5468\u671f\u6027\u65f6\u949f\u4e2d\u65ad\u5224\u65ad\u662f\u5426 curr \u5e94\u8be5\u5207\u6362\u5230 vruntime \u66f4\u5c0f\u7684 task\u3002 \u4e3b\u52a8\u8c03\u5ea6\u5219\u662f curr \u7531\u4e8e\u8d44\u6e90\u7b49\u5f85\u8fdb\u5165\u7761\u7720\u72b6\u6001\u7b49\u5f85\u540e\u9762\u88ab\u5524\u9192\uff0c\u6216\u8005\u8c03\u7528 yield \u8ba9\u51fa CPU\u3002","title":"4 \u7b80\u5316\u7248\u8c03\u5ea6\u8fc7\u7a0b"},{"location":"chapter_4/8_linux_scheduler/#_4","text":"\u5728\u591a CPU \u7cfb\u7edf\u4e0a\uff0c\u8fdb\u7a0b\u8fd0\u884c\u8d1f\u8f7d\u5e94\u8be5\u5c3d\u53ef\u80fd\u5728\u6240\u6709\u7684 CPU \u4e0a\u5747\u8861\u8c03\u5ea6\uff0c\u8fbe\u5230\u6700\u4f18\u5316\u7684\u6027\u80fd\u3002\u9664\u975e\u6709\u8282\u80fd\u7b49\u5176\u4ed6\u9700\u6c42\u3002","title":"\u4e94 \u8fdb\u7a0b\u8c03\u5ea6\u76f8\u5173\u8d1f\u8f7d\u5747\u8861"},{"location":"chapter_4/8_linux_scheduler/#1_1","text":"task \u662f\u5728 CPU \u4e4b\u95f4\u8d1f\u8f7d\u8fc1\u79fb\u7684\u6700\u5c0f\u5355\u4f4d\uff0c\u4e3a\u4e86\u6bd4\u8f83 CPU \u4e4b\u95f4\u7684\u8d1f\u8f7d\u548c\u8fc1\u79fb\u8ba1\u7b97\uff0c\u9700\u8981\u8ddf\u8e2a\u6bcf\u4e2a task \u7684\u8d1f\u8f7d\uff0c\u5185\u6838\u7528 PELT \u7b97\u6cd5\u5bf9 task \u7684 runnable \u65f6\u95f4\u6bd4\u4f8b\uff0crunning \u65f6\u95f4\u6bd4\u4f8b\u548c\u6743\u91cd\u8fdb\u884c\u4e86\u8ba1\u7b97\uff0c\u5f97\u5230\u67d0\u4e2a\u65f6\u523b\u7684 task \u8fd0\u884c\u8d1f\u8f7d\u3002","title":"1 \u8d1f\u8f7d\u8ddf\u8e2a"},{"location":"chapter_4/8_linux_scheduler/#2_1","text":"\u7531\u4e8e CPU \u786c\u4ef6\u67b6\u6784\u7684\u591a\u6837\u6027\uff0ctask \u5728 CPU \u4e4b\u95f4\u8fc1\u79fb\u7684\u4ee3\u4ef7\u4e5f\u662f\u4e0d\u540c\u7684\uff0c\u5185\u6838\u4e3b\u8981\u8003\u8651 cache \u548c\u5185\u5b58\u5bf9\u8d1f\u8f7d\u8fc1\u79fb\u7684\u5f71\u54cd\u3002\u6240\u4ee5\u6309\u7167 CPU \u786c\u4ef6\u67b6\u6784\u5212\u5206\u4e86\u8c03\u5ea6\u57df\u3002","title":"2 \u8c03\u5ea6\u57df"},{"location":"chapter_4/8_linux_scheduler/#3-task","text":"task \u5728 CPU \u4e4b\u95f4\u7684\u8fc1\u79fb\u65f6\u673a\u4e3b\u8981\u6709\uff1a \u5524\u9192\u65f6\u8fc1\u79fb\uff1apush CPU \u8fdb\u5165 idle \u524d\u8fc1\u79fb\uff1apull CPU \u5468\u671f\u6027 load_balance\uff1apull\uff0c\u5728\u8f6f\u4e2d\u65ad\u8fdb\u884c\u3002","title":"3 task \u8fc1\u79fb\u65f6\u673a"},{"location":"chapter_4/8_linux_scheduler/#_5","text":"Linux \u8fdb\u7a0b\u8c03\u5ea6\uff1a\u8c03\u5ea6\u8fc7\u7a0b","title":"\u516d \u8be6\u7ec6\u7248\u8c03\u5ea6\u8fc7\u7a0b"},{"location":"chapter_4/8_linux_scheduler/#1_2","text":"","title":"1 \u6838\u5fc3\u6570\u636e\u7ed3\u6784"},{"location":"chapter_4/8_linux_scheduler/#11-rq","text":"\u5185\u6838\u4e3a\u6bcf\u4e2a cpu \u7ef4\u62a4\u4e00\u4e2a\u8fd0\u884c\u961f\u5217\uff0c\u79f0\u4e3a per-cpu runqueue \u6216 per-cpu rq\uff0c\u6570\u636e\u7ed3\u6784\u7684\u4e3b\u8981\u6210\u5458\u5982\u4e0b\u6240\u793a\uff1a // kernel/sched/sched.h -- rq struct rq { raw_spinlock_t __lock; unsigned int nr_running; struct cfs_rq cfs; struct rt_rq rt; struct dl_rq dl; struct task_struct __rcu *curr; struct task_struct *idle; struct task_struct *stop; }; __lock\uff1a\u961f\u5217\u9501\u3002\u5982\u679c\u60f3\u8981\u9501\u5b9a\u591a\u4e2aper-cpu rq(\u5982\u8d1f\u8f7d\u5e73\u8861\u6216\u7ebf\u7a0b\u8fc1\u79fb\u90e8\u5206\u7684\u4ee3\u7801)\uff0c\u9501\u83b7\u53d6\u64cd\u4f5c\u5fc5\u987b\u6309per-cpu rq\u7f16\u53f7\u5347\u5e8f\u6392\u5e8f\uff0c\u4ee5\u9632\u6b62\u6b7b\u9501\u3002 nr_running\uff1arq\u4e0a\u53ef\u8fd0\u884c\u7684\u8fdb\u7a0b\u7684\u6570\u76ee\uff1b cfs\u3001rt\u3001dl\uff1a\u5d4c\u5165\u7684\u5b50\u5c31\u7eea\u961f\u5217\uff0c\u5206\u522b\u5c5e\u4e8e\u516c\u5e73\u8c03\u5ea6\u7c7b\u3001\u5b9e\u65f6\u8c03\u5ea6\u7c7b\u548c\u622a\u6b62\u65f6\u95f4\u8c03\u5ea6\u7c7b\uff1b curr\uff1a\u6307\u5411\u5f53\u524d\u8fd0\u884c\u8fdb\u7a0b\u7684task_struct\u5b9e\u4f8b\uff1b idle\uff1a\u6307\u5411idle\u8fdb\u7a0b\u7684task_struct\u5b9e\u4f8b\uff1b stop\uff1a\u6307\u5411stop\u8fdb\u7a0b\u7684task_struct\u5b9e\u4f8b\uff1b \u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u5c31\u7eea\u961f\u5217\u90fd\u4fdd\u5b58\u5728 runqueue \u6570\u7ec4 \u4e2d\uff0c\u8be5\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u5bf9\u5e94\u4e00\u4e2a cpu \u6bd4\u5982\uff0c\u5982\u4e0b\u4ee3\u7801\u4ece\u5f53\u524d cpu \u7684 runqueue \u6570\u7ec4 \u4e2d\u83b7\u53d6 rq DECLARE_PER_CPU(struct rq, runqueues); #define cpu_rq(cpu) (&per_cpu(runqueues, (cpu))) int cpu = smp_processor_id(); struct rq *rq = cpu_rq(cpu);","title":"1.1 rq"},{"location":"chapter_4/8_linux_scheduler/#12","text":"","title":"1.2 \u8c03\u5ea6\u5668\u7c7b"},{"location":"chapter_4/8_linux_scheduler/#2_2","text":"for_each_class \u5b8f\u6309\u7167 stop_sched_class\u3001dl_sched_class\u3001rt_sched_class\u3001fair_sched_class\u3001idle_sched_class \u7684\u987a\u5e8f\u904d\u5386\u8c03\u5ea6\u7c7b\u7684 pick_next_task \u51fd\u6570\uff0c\u76f4\u5230\u53d6\u51fa\u4f18\u5148\u7ea7\u6700\u9ad8\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u63cf\u8ff0\u7b26\u3002 \u8bf4\u660e\u81f3\u5c11\u6709\u4ee5\u4e0b\u51e0\u4e2a\u8c03\u5ea6\u5668\u7c7b: stop_sched_class\u3001dl_sched_class\u3001rt_sched_class\u3001fair_sched_class\u3001idle_sched_class \u5e76\u4e14\u666e\u901a\u8fdb\u7a0b\u6700\u5e38\u7528\u7684\u662f fair_sched_class, idle \u8fdb\u7a0b\u7528\u7684\u662f idle_sched_class \u4ee5 fair_sched_class \u4e3a\u6838\u5fc3\u6a21\u578b\uff0c\u603b\u7ed3\u4e00\u4e0b\u5b83\u6709\u54ea\u4e9b\u5c5e\u6027: \u76f8\u5e94\u8c03\u5ea6\u5668\u7c7b\u7684\u65b9\u6cd5\u4f7f\u8be5\u8fdb\u7a0b\u505c\u6b62\u6d3b\u52a8(sched_class->dequeue_task) pick_next_task \u51fd\u6570, \u6311\u9009\u4e0b\u4e2a\u8fdb\u7a0b\uff1a p = class->pick_next_task(rq) \u8c03\u5ea6\u5668\u7c7b\u5468\u671f\u6027\u8c03\u5ea6\u65b9\u6cd5 \u6bd4\u5982\u5f53\u524d\u8fdb\u7a0b\u7684\u8c03\u5ea6\u7c7b\u7684\u5468\u671f\u6027\u8c03\u5ea6\u65b9\u6cd5 // kernel/sched/core.c -- scheduler_tick() curr->sched_class->task_tick(rq, curr, 0); \u5e76\u4e14\u8fdb\u7a0b\u662f\u5c5e\u4e8e\u67d0\u4e00\u4e2a\u8c03\u5ea6\u5668\u7c7b\u7684, \u5728 task_struct \u7ed3\u6784\u4f53\u4e2d\u6709\u5bf9\u5e94\u7684\u6210\u5458: const struct sched_class *sched_class \u516c\u5e73\u8c03\u5ea6\u7c7b\u7684 pick_next_task_fair \u6311\u9009\u65b0\u8fdb\u7a0b\uff0c p = pick_next_task_fair(rq, prev, rf); idle \u8c03\u5ea6\u7c7b\u7684\u9009\u8fdb\u7a0b\u7684\u51fd\u6570: p = pick_next_task_idle(rq);","title":"2 \u8c03\u5ea6\u5668\u7c7b\u662f\u4ec0\u4e48"},{"location":"chapter_4/8_linux_scheduler/#3-scheduler_tick","text":"\u6309\u7167\u9891\u7387 HZ \u5468\u671f\u6027\u81ea\u52a8\u89e6\u53d1\u8be5\u51fd\u6570\uff0c\u5728\u89e6\u53d1\u65f6\u5173\u4e2d\u65ad\u3002\u4e3b\u8981\u6d89\u53ca\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u66f4\u65b0\u8c03\u5ea6\u76f8\u5173\u7684\u7edf\u8ba1\u91cf\uff0c\u5305\u62ec\u66f4\u65b0\u8ba1\u6570\u5668\u3001\u8d1f\u8f7d\u91cf\u3001\u70ed\u91cf\u7b49\u4fe1\u606f\uff1b \u6fc0\u6d3b\u8d1f\u8d23\u5f53\u524d\u8fdb\u7a0b\u7684\u8c03\u5ea6\u7c7b\u7684\u5468\u671f\u6027\u8c03\u5ea6\u65b9\u6cd5\u3002 \u53d8\u91cf\u521d\u59cb\u5316\u5982\u4e0b\uff1a // kernel/sched/core.c -- scheduler_tick() void scheduler_tick(void) { int cpu = smp_processor_id(); struct rq *rq = cpu_rq(cpu); struct task_struct *curr = rq->curr; struct rq_flags rf; unsigned long thermal_pressure; u64 resched_latency;","title":"3 \u5468\u671f\u6027\u8c03\u5ea6\u5668\u51fd\u6570\uff08scheduler_tick \u51fd\u6570\uff09"},{"location":"chapter_4/8_linux_scheduler/#4-__schedule","text":"","title":"4 \u4e3b\u8c03\u5ea6\u51fd\u6570\uff08__schedule()\u51fd\u6570\uff09"},{"location":"chapter_4/8_linux_scheduler/#5-context-switch","text":"","title":"5 \u4e0a\u4e0b\u6587\u5207\u6362\uff08context switch\uff09"},{"location":"chapter_4/8_linux_scheduler/#51","text":"\u9ed8\u8ba4\u4e0d\u540c\u8fdb\u7a0b\u95f4\uff0c\u9700\u8981\u5207\u6362\uff1a \u5207\u6362 mm(struct mm_struct) \u5207\u6362\u5bc4\u5b58\u5668\uff08struct thread_info \u90e8\u5206\uff09\u548c\u5185\u6838\u6808 \u5728\u5207\u6362\u5bc4\u5b58\u5668\u72b6\u6001\u548c\u5185\u6838\u6808\u65f6\uff0c\u8c03\u7528 switch_to \u8fdb\u884c\u5207\u6362\u5373\u53ef\u3002 // kernel/sched/core.c -- context_switch /* \u4ea4\u6362\u5bc4\u5b58\u5668\u72b6\u6001\u548c\u5185\u6838\u6808 */ switch_to(prev, next, prev); barrier(); return finish_task_switch(prev); } switch_to \u5b8f\u4f20\u5165\u4e86\u4e09\u4e2a\u51fd\u6570\uff0c\u5176\u4e2d\u4e24\u4e2a\u662f prev\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u6709\u610f\u601d\u7684\u5b9e\u73b0\uff0c\u6211\u4eec\u5728 3.2 \u8282\u8be6\u7ec6\u8ba8\u8bba\uff1b finish_task_switch(prev)\u5b8f\u7528\u4e8e\u5b8c\u6210\u6e05\u7406\u5de5\u4f5c\uff0c\u4f7f\u5f97\u80fd\u591f\u6b63\u786e\u5730\u91ca\u653e\u9501\uff1b barrier \u4e3a\u5185\u5b58\u5c4f\u969c \uff0c\u7528\u4e8e\u786e\u4fdd switch_to \u5728 finish_task_switch \u5f00\u59cb\u524d\u6267\u884c\u5b8c\uff0c\u800c\u4e0d\u4f1a\u88ab\u7f16\u8bd1\u5668\u6216\u4e71\u5e8f\u53d1\u5c04\u5e72\u6270\u987a\u5e8f\u3002\u5728 3.2 \u8282\u4e2d\u6211\u4eec\u4f1a\u770b\u5230\u8fd9\u4e00\u7ea6\u675f\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002","title":"5.1 \u5207\u54ea\u4e9b\u5185\u5bb9"},{"location":"chapter_4/8_linux_scheduler/#52-switch_to","text":"switch_to \u4e0e\u4f53\u7cfb\u7ed3\u6784\u76f8\u5173\uff0c\u5b9a\u4e49\u4e8e /arch/xxx/include/asm/switch_to.h \uff0c\u5176\u4e2d xxx \u8868\u793a\u4f53\u7cfb\u7ed3\u6784\u540d\u79f0\u3002\u7531\u4e8e\u5176\u5b9e\u73b0\u4e0e\u4f53\u7cfb\u7ed3\u6784\u548c\u6c47\u7f16\u8bed\u8a00\u76f8\u5173\uff0c\u8fd9\u91cc\u4e0d\u4ecb\u7ecd\u5177\u4f53\u7684\u5b9e\u73b0\uff0c\u800c\u662f\u8bf4\u660e \u4e3a\u4ec0\u4e48 switch_to \u5b8f\u9700\u8981\u4f20\u5165\u4e09\u4e2a\u53c2\u6570 \u3002 \u5728 3.1 \u8282\u4e2d\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fdb\u7a0b\u5728\u8c03\u7528 switch_to(prev, next, prev); \u540e\u90fd\u4f1a\u505c\u6b62\u6267\u884c\uff0c\u5207\u6362\u4e3a\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u6267\u884c\u3002\u56e0\u6b64\uff0c\u6bcf\u4e00\u4e2a\u7ecf\u5386\u8fc7 switch_to \u7684\u8fdb\u7a0b\uff0c\u5728\u4e0b\u6b21\u88ab\u8c03\u5ea6\u65f6\u90fd\u4f1a\u4ece return finish_task_switch(prev); \u5904\u5f00\u59cb\u6267\u884c\uff0c\u7136\u540e\u4ece __schedule() \u4ee3\u7801\u6bb5 return \u56de\u81ea\u5df1\u7684\u4ee3\u7801\u6bb5 \u3002 \u4e5f\u5c31\u662f\u8bf4 switch_to \u4e4b\u540e\u5c31\u771f\u6b63\u8fdb\u5165\u4e0b\u4e00\u4e2a\u8fdb\u7a0b\u5f00\u59cb\u6267\u884c\u4e86, \u524d\u9762\u90a3\u4e2a\u8fdb\u7a0b\u6062\u590d\u4e4b\u540e\u662f\u4ece return finish_task_switch(prev); \u5904\u5f00\u59cb\u6267\u884c\u7684 \u8fd9\u5c31\u53ef\u80fd\u51fa\u73b0\u4e0b\u9762\u8fd9\u6837\u7684\u573a\u666f\uff1a \u6309\u7167 \u8fdb\u7a0bA->\u8fdb\u7a0bC->\u8fdb\u7a0bC->\u8fdb\u7a0bA \u7684\u987a\u5e8f\u7684\u8fdb\u884c\u8fdb\u7a0b\u5207\u6362\uff0c\u5728 A \u6062\u590d\u6267\u884c\uff0c\u5373\u4ece return finish_task_switch(prev); \u5904\u5f00\u59cb\u6267\u884c\u65f6\uff0c\u6709 prev=A\u3001next=B\uff08\u6ce8\u610f\u8fd9\u91cc\u5e76\u6ca1\u6709\u518d\u53d1\u751f\u4ece\u8fdb\u7a0b A \u5207\u6362\u5230\u5176\u4ed6\u8fdb\u7a0b\u7684\u52a8\u4f5c\uff0c\u53ea\u662f\u6062\u590d\u4e86\u8fdb\u7a0b A \u5728\u5207\u6362\u524d\u7684\u53c2\u6570\uff09\u3002\u8fd9\u65f6\u5c31\u6267\u884c\u4e86 finish_task_switch(A) \u3002\u4f46\u5f88\u663e\u7136\uff0c\u9700\u8981\u6267\u884c\u7684\u662f finish_task_switch(C) \u3002 \u56e0\u6b64\uff0c\u4e3a\u6b63\u786e\u5730\u6267\u884c finish_task_switch \uff0c\u9700\u8981\u5728\u6bcf\u4e2a `switch_to \u8fd4\u56de\u65f6\u66f4\u65b0 prev \u3002 switch_to(prev, next, prev) \u51fd\u6570\u63d0\u4f9b\u4e86\u8fd9\u4e00\u529f\u80fd\u3002\u5728\u8fd9\u91cc\uff0c(\u9488\u5bf9\u8fdb\u7a0b A \u6765\u8bf4),\u4e09\u4e2a\u53c2\u6570\u5206\u522b\u8868\u793a\uff1a \u7b2c\u4e00\u4e2a prev\uff1a\u5207\u6362\u524d\u7684\u65e7\u8fdb\u7a0b\uff1b next\uff1a\u5207\u6362\u524d\u7684\u65b0\u8fdb\u7a0b\uff1b \u7b2c\u4e8c\u4e2a prev\uff1a\u5207\u6362\u540e\u7684\u65e7\u8fdb\u7a0b\uff1b \u6839\u636e\u8fd9\u4e00\u5de7\u5999\u7684\u8bbe\u8ba1\uff0c\u53ef\u4ee5\u5728\u8fdb\u7a0b A \u91cd\u65b0\u88ab\u8c03\u5ea6\u65f6\u7684\u5c06 prev \u66f4\u65b0\u4e3a C\uff0c\u4f7f\u5f97 finish_task_switch(C) \u88ab\u6b63\u786e\u5730\u8c03\u7528 \u3002","title":"5.2 \u6df1\u5165\u7406\u89e3 switch_to \u51fd\u6570"},{"location":"chapter_4/9_linux_arch_overall_introduction/","text":"\u6982\u8ff0 \u672c\u7bc7\u4ecb\u7ecd Linux \u5185\u6838\u603b\u4f53\u6982\u89c8 1 \u67b6\u6784\u56fe \u5982\u4e0a\u56fe\u6240\u793a, \u603b\u4f53\u5206\u4e3a 4 \u5c42: 1 \u7cfb\u7edf\u8c03\u7528\u63a5\u53e3\u5c42 2 \u7cfb\u7edf\u80fd\u529b\u5c42 3 \u5de5\u5177\u5c42 4 \u9a71\u52a8\u7ba1\u7406\u5c42","title":"\u6982\u8ff0"},{"location":"chapter_4/9_linux_arch_overall_introduction/#_1","text":"\u672c\u7bc7\u4ecb\u7ecd Linux \u5185\u6838\u603b\u4f53\u6982\u89c8","title":"\u6982\u8ff0"},{"location":"chapter_4/9_linux_arch_overall_introduction/#1","text":"\u5982\u4e0a\u56fe\u6240\u793a, \u603b\u4f53\u5206\u4e3a 4 \u5c42: 1 \u7cfb\u7edf\u8c03\u7528\u63a5\u53e3\u5c42 2 \u7cfb\u7edf\u80fd\u529b\u5c42 3 \u5de5\u5177\u5c42 4 \u9a71\u52a8\u7ba1\u7406\u5c42","title":"1 \u67b6\u6784\u56fe"},{"location":"chapter_5/1_four_object_of_VFS/","text":"\u6982\u8ff0 \u8d85\u7ea7\u5757\uff08super_block\uff09\u3001\u7d22\u5f15\u8282\u70b9\uff08inode\uff09\u3001\u76ee\u5f55\u7ed3\u6784\uff08dentry\uff09 \u548c \u6587\u4ef6\u7ed3\u6784\uff08file\uff09\u8fd9\u51e0\u4e2a\u7ed3\u6784\u4f53\u7ec4\u6210\u4e86 VFS \u7684\u6838\u5fc3\u6982\u5ff5. \u4e00 inode \u6570\u636e\u7ed3\u6784 \u78c1\u76d8\u4e0a\u771f\u6b63\u7684\u4e00\u4e2a\u6587\u4ef6\uff0c\u5728\u5185\u6838\u4e2d\u662f\u4f7f\u7528\u4e00\u4e2a inode \u6570\u636e\u7ed3\u6784\u8868\u793a. struct inode \u5728\u6e90\u7801\u4e2d\u7684\u4f4d\u7f6e: include/linux/fs.h:788 struct inode \u6574\u4f53\u9762\u8c8c\u5982\u4e0b: struct inode { struct hlist_node i_hash; struct list_head i_list; /* backing dev IO list */ struct list_head i_sb_list; struct list_head i_dentry; unsigned long i_ino; atomic_t i_count; unsigned int i_nlink; uid_t i_uid; gid_t i_gid; dev_t i_rdev; u64 i_version; loff_t i_size; #ifdef __NEED_I_SIZE_ORDERED seqcount_t i_size_seqcount; #endif struct timespec i_atime; struct timespec i_mtime; struct timespec i_ctime; blkcnt_t i_blocks; unsigned int i_blkbits; unsigned short i_bytes; umode_t i_mode; spinlock_t i_lock; /* i_blocks, i_bytes, maybe i_size */ struct mutex i_mutex; struct rw_semaphore i_alloc_sem; const struct inode_operations *i_op; const struct file_operations *i_fop; /* former ->i_op->default_file_ops */ struct super_block *i_sb; struct file_lock *i_flock; struct address_space *i_mapping; struct address_space i_data; #ifdef CONFIG_QUOTA struct dquot *i_dquot[MAXQUOTAS]; #endif struct list_head i_devices; union { struct pipe_inode_info *i_pipe; struct block_device *i_bdev; struct cdev *i_cdev; }; __u32 i_generation; #ifdef CONFIG_FSNOTIFY __u32 i_fsnotify_mask; /* all events this inode cares about */ struct hlist_head i_fsnotify_mark_entries; /* fsnotify mark entries */ #endif #ifdef CONFIG_INOTIFY struct list_head inotify_watches; /* watches on this inode */ struct mutex inotify_mutex; /* protects the watches list */ #endif unsigned long i_state; unsigned long dirtied_when; /* jiffies of first dirtying */ unsigned int i_flags; atomic_t i_writecount; #ifdef CONFIG_SECURITY void *i_security; #endif #ifdef CONFIG_FS_POSIX_ACL struct posix_acl *i_acl; struct posix_acl *i_default_acl; #endif void *i_private; /* fs or device private pointer */ }; \u4e00\u4e9b\u91cd\u8981\u7684\u6210\u5458\u542b\u4e49 unsigned long i_ino; /*inode\u53f7\u7801*/ uid_t i_uid; /*\u7528\u6237*/ gid_t i_gid; /*\u7528\u6237\u7ec4*/ struct timespec i_atime; /*\u6587\u4ef6\u7684access time*/ struct timespec i_mtime; /*\u6587\u4ef6\u7684motify time*/ struct timespec i_ctime; /*\u6587\u4ef6\u7684\u5c5e\u6027\u6539\u53d8\u7684time */ const struct inode_operations *i_op; /*\u6307\u5411\u548csuper_block\u76f8\u5173\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u5220\u9664\u4e00\u4e2ainode,\u80af\u5b9a\u662f\u8981\u66f4\u65b0\u6587\u4ef6\u7cfb\u7edf\u7684super_block\u7684*/ const struct file_operations *i_fop; /*\u6307\u5411\u8be5\u6587\u4ef6\u652f\u6301\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u5f80\u8be5\u6587\u4ef6\u91cc\u5199\u6570\u636e,\u662f\u771f\u6b63\u7684\u64cd\u4f5c\u78c1\u76d8\u5199\u6570\u636e*/ \u4e8c dentry 1 \u76ee\u5f55\u9879\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u65b9\u4fbf\u67e5\u627e\u6587\u4ef6\u3002\u4e00\u4e2a\u8def\u5f84\u7684\u5404\u4e2a\u7ec4\u6210\u90e8\u5206\uff0c\u4e0d\u7ba1\u662f\u76ee\u5f55\u8fd8\u662f\u666e\u901a\u7684\u6587\u4ef6\uff0c\u90fd\u662f\u4e00\u4e2a\u76ee\u5f55\u9879\u5bf9\u8c61\u3002\u5982\uff0c\u5728\u8def\u5f84 /home/hero/example.c \u4e2d\uff0c\u76ee\u5f55 /, home/, hero/ \u548c\u6587\u4ef6 example.c \u90fd\u5bf9\u5e94\u4e00\u4e2a\u76ee\u5f55\u9879\u5bf9\u8c61\u3002 2 \u76ee\u5f55\u9879\u91cc\u6709\u4e00\u4e2a d_inode \u6210\u5458\uff0c\u6307\u5411\u771f\u6b63\u7684 inode dentry \u7684\u6e90\u7801 ,\u5728 include/linux/dcache.h 89 \u884c struct dentry { atomic_t d_count; unsigned int d_flags; /* protected by d_lock */ spinlock_t d_lock; /* per dentry lock */ int d_mounted; struct inode *d_inode; /* Where the name belongs to - NULL is * negative */ /* * The next three fields are touched by __d_lookup. Place them here * so they all fit in a cache line. */ struct hlist_node d_hash; /* lookup hash list */ struct dentry *d_parent; /* parent directory */ struct qstr d_name; struct list_head d_lru; /* LRU list */ /* * d_child and d_rcu can share memory */ union { struct list_head d_child; /* child of parent list */ struct rcu_head d_rcu; } d_u; struct list_head d_subdirs; /* our children */ struct list_head d_alias; /* inode alias list */ unsigned long d_time; /* used by d_revalidate */ const struct dentry_operations *d_op; struct super_block *d_sb; /* The root of the dentry tree */ void *d_fsdata; /* fs-specific data */ unsigned char d_iname[DNAME_INLINE_LEN_MIN]; /* small names */ }; \u4e09 file \u7ed3\u6784\u4f53 \u6bcf\u5f53\u8fdb\u7a0b\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6,\u5185\u6838\u8fd4\u56de\u7684\u662f\u4e00\u4e2a file \u7ed3\u6784\u4f53\uff0c\u7528\u4e8e\u7ba1\u7406\u88ab\u6253\u5f00\u7684\u6587\u4ef6 \u6587\u4ef6\u7ed3\u6784\u7528\u4e8e\u63cf\u8ff0\u4e00\u4e2a\u5df2\u6253\u5f00\u7684\u6587\u4ef6\uff0c\u5176\u5305\u542b\u6587\u4ef6\u5f53\u524d\u7684\u8bfb\u5199\u504f\u79fb\u91cf\uff0c\u6587\u4ef6\u6253\u5f00\u6a21\u5f0f\u548c\u6587\u4ef6\u64cd\u4f5c\u51fd\u6570\u5217\u8868\u7b49 \u8fdb\u7a0b task_struct \u7ed3\u6784\u4f53\u4e2d\uff0c\u6709 files \u6210\u5458\u6307\u5411 files_struct (\u6587\u4ef6\u63cf\u8ff0\u7b26\u8868),files_struct \u91cc\u6709 fd_array \u6307\u5411\u4e00\u4e2a\u4e2a file \u7ed3\u6784\u4f53.file \u7ed3\u6784\u4f53\u91cc\u6709\u6587\u4ef6\u652f\u6301\u7684\u64cd\u4f5c\u51fd\u6570\uff0c\u4f8b\u5982\u8bfb\u3001\u5199\u3001\u6587\u4ef6\u504f\u79fb\u7b49. \u8fd9\u4e9b\u64cd\u4f5c\u51fd\u6570\u53ef\u4ee5\u771f\u6b63\u7684\u6539\u53d8\u6587\u4ef6\u7684\u5185\u5bb9. file \u7ed3\u6784\u4f53\u91cc\u8fd8\u542b\u6709 dentry \u7684\u6307\u9488\uff0c\u56e0\u6b64\u901a\u8fc7 file \u7ed3\u6784\u4f53\u4e5f\u53ef\u4ee5\u627e\u5230\u5177\u4f53\u7684 inode. struct file { /* * fu_list becomes invalid after file_free is called and queued via * fu_rcuhead for RCU freeing */ union { struct list_head fu_list; struct rcu_head fu_rcuhead; } f_u; struct path f_path; #define f_dentry f_path.dentry #define f_vfsmnt f_path.mnt const struct file_operations *f_op; spinlock_t f_lock; /* f_ep_links, f_flags, no IRQ */ atomic_long_t f_count; unsigned int f_flags; fmode_t f_mode; loff_t f_pos; struct fown_struct f_owner; const struct cred *f_cred; struct file_ra_state f_ra; u64 f_version; #ifdef CONFIG_SECURITY void *f_security; #endif /* needed for tty driver, and maybe others */ void *private_data; #ifdef CONFIG_EPOLL /* Used by fs/eventpoll.c to link all the hooks to this file */ struct list_head f_ep_links; #endif /* #ifdef CONFIG_EPOLL */ struct address_space *f_mapping; #ifdef CONFIG_DEBUG_WRITECOUNT unsigned long f_mnt_write_state; #endif #ifndef __GENKSYMS__ struct mutex f_pos_lock; #endif }; struct file {}\u7ed3\u6784\u4f53\u5185\uff0c\u6709\u4e00\u4e2astruct path\u6210\u5458\uff0c\u8be5\u6210\u5458\u7684\u6e90\u7801\u5982\u4e0b: struct path { struct vfsmount *mnt; struct dentry *dentry; }; file \u7ed3\u6784\u4f53\u548c inode \u7684\u5bf9\u5e94\u5173\u7cfb: \u591a\u4e2a file \u7ed3\u6784\u4f53\u53ef\u4ee5\u6307\u5411\u540c\u4e00\u4e2a inode\uff0c\u4f8b\u5982\u8fdb\u7a0b A \u548c\u8fdb\u7a0b B \u90fd\u6253\u5f00\u4e86\u540c\u4e00\u4e2a\u6587\u4ef6/home/hero/example.c ,\u5185\u6838\u4f1a\u4ea7\u751f 2 \u4e2a file \u7ed3\u6784\u4f53 \u8fdb\u7a0b\u7684 FD \u548c file \u7ed3\u6784\u4f53\u7684\u5bf9\u5e94\u5173\u7cfb: \u4e00\u5f00\u59cb\u662f\u4e00\u5bf9\u4e00\uff0c\u4e5f\u53ef\u4ee5\u6709\u591a\u5bf9\u4e00\u7684\u60c5\u51b5 \u4f8b\u5982\u8fdb\u7a0b A\uff0c\u901a\u8fc7 fork()\u7cfb\u7edf\u8c03\u7528\u4ea7\u751f\u4e86\u5b50\u8fdb\u7a0b\uff0c\u90a3\u4e48\u5b50\u8fdb\u7a0b\u7684 FD table \u9ed8\u8ba4\u662f\u590d\u5236\u4e86\u7236\u8fdb\u7a0b\u7684,\u8fd9\u4e2a\u65f6\u5019\u8fdb\u7a0b\u7684 FD \u5c31\u5bf9\u5e94\u540c\u4e00\u4e2a file \u7ed3\u6784\u4f53\u4e86. \u56db super_block Linux \u652f\u6301\u591a\u6587\u4ef6\u7cfb\u7edf\uff0c\u6240\u4ee5\u5728\u5185\u6838\u4e2d\u5fc5\u987b\u901a\u8fc7\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u63cf\u8ff0\u5177\u4f53\u6587\u4ef6\u7cfb\u7edf\u7684\u4fe1\u606f\u548c\u76f8\u5173\u7684\u64cd\u4f5c\u7b49\uff0cVFS \u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a \u8d85\u7ea7\u5757\uff08super_block\uff09 \u7684\u6570\u636e\u7ed3\u6784\u6765\u63cf\u8ff0\u5177\u4f53\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u4e5f\u5c31\u662f\u8bf4\u5185\u6838\u662f\u901a\u8fc7\u8d85\u7ea7\u5757\u6765\u8ba4\u77e5\u5177\u4f53\u7684\u6587\u4ef6\u7cfb\u7edf\u7684\uff0c\u4e00\u4e2a\u5177\u4f53\u7684\u6587\u4ef6\u7cfb\u7edf\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u8d85\u7ea7\u5757\u7ed3\u6784 \u4e0b\u9762\u6211\u4eec\u4ecb\u7ecd\u4e00\u4e0b\u4e00\u4e9b\u6bd4\u8f83\u91cd\u8981\u7684\u6210\u5458\uff1a s_dev\uff1a\u7528\u4e8e\u4fdd\u5b58\u8bbe\u5907\u7684\u8bbe\u5907\u53f7 s_blocksize\uff1a\u7528\u4e8e\u4fdd\u5b58\u6587\u4ef6\u7cfb\u7edf\u7684\u6570\u636e\u5757\u5927\u5c0f\uff08\u6587\u4ef6\u7cfb\u7edf\u662f\u4ee5\u6570\u636e\u5757\u4e3a\u5355\u4f4d\u7684\uff09 s_type\uff1a\u6587\u4ef6\u7cfb\u7edf\u7684\u7c7b\u578b\uff08\u63d0\u4f9b\u4e86\u8bfb\u53d6\u8bbe\u5907\u4e2d\u6587\u4ef6\u7cfb\u7edf\u8d85\u7ea7\u5757\u7684\u65b9\u6cd5\uff09 s_op\uff1a\u8d85\u7ea7\u5757\u76f8\u5173\u7684\u64cd\u4f5c\u5217\u8868 s_root\uff1a\u6302\u8f7d\u7684\u6839\u76ee\u5f55 inode \u6570\u636e\u7ed3\u6784\u4e2d\uff0c\u6709\u4e2a const struct inode_operations i_op \uff0c\u7528\u6765\u6307\u5411 inode \u672c\u8eab\u5c5e\u6027\u7684\u4e00\u4e9b\u4fee\u6539\uff0c struct super_block i_sb; \u5219\u6307\u5411\u8be5 inode \u5bf9\u5e94\u7684 super_block. \u56e0\u6b64\u4f8b\u5982\u5220\u9664\u4e00\u4e2a\u771f\u6b63\u7684\u6587\u4ef6(inode)\uff0c\u5fc5\u987b\u66f4\u65b0\u5176\u5bf9\u5e94 super_block \u4fe1\u606f. 1 super_block \u6e90\u7801 super block \u6e90\u4ee3\u7801\u4f4d\u7f6e include/linux/fs.h:1424 struct super_block { struct list_head s_list; /* Keep this first */ dev_t s_dev; /* search index; _not_ kdev_t */ unsigned long s_blocksize; unsigned char s_blocksize_bits; unsigned char s_dirt; loff_t s_maxbytes; /* Max file size */ struct file_system_type *s_type; const struct super_operations *s_op; const struct dquot_operations *dq_op; const struct quotactl_ops *s_qcop; const struct export_operations *s_export_op; unsigned long s_flags; unsigned long s_magic; struct dentry *s_root; struct rw_semaphore s_umount; struct mutex s_lock; int s_count; int s_need_sync; atomic_t s_active; #ifdef CONFIG_SECURITY void *s_security; #endif struct xattr_handler **s_xattr; struct list_head s_inodes; /* all inodes */ struct hlist_head s_anon; /* anonymous dentries for (nfs) exporting */ struct list_head s_files; /* s_dentry_lru and s_nr_dentry_unused are protected by dcache_lock */ struct list_head s_dentry_lru; /* unused dentry lru */ int s_nr_dentry_unused; /* # of dentry on lru */ struct block_device *s_bdev; struct backing_dev_info *s_bdi; struct mtd_info *s_mtd; struct list_head s_instances; struct quota_info s_dquot; /* Diskquota specific options */ int s_frozen; wait_queue_head_t s_wait_unfrozen; char s_id[32]; /* Informational name */ void *s_fs_info; /* Filesystem private info */ fmode_t s_mode; /* * The next field is for VFS *only*. No filesystems have any business * even looking at it. You had been warned. */ struct mutex s_vfs_rename_mutex; /* Kludge */ /* Granularity of c/m/atime in ns. Cannot be worse than a second */ u32 s_time_gran; /* * Filesystem subtype. If non-empty the filesystem type field * in /proc/mounts will be \"type.subtype\" */ char *s_subtype; /* * Saved mount options for lazy filesystems using * generic_show_options() */ char *s_options; #ifndef __GENKSYMS__ struct sb_writers s_writers; atomic_t s_fsnotify_marks; wait_queue_head_t s_fsnotify_marks_wq; #endif }; struct path { struct vfsmount *mnt; struct dentry *dentry; }; \u4e94 \u603b\u7ed3\u4e00\u4e0b\u5404\u4e2a\u7ed3\u6784\u4f53\u4e4b\u95f4\u7684\u8054\u7cfb 1 \u603b\u7ed3 \u540c\u65f6\u6211\u4eec\u6ce8\u610f\u5230 super_block \u5bf9\u8c61\u4e5f\u6709 s_inodes \u6210\u5458, \u6307\u5411\u672c\u6587\u4ef6\u7cfb\u7edf\u7684\u6240\u6709 inode \u7ed3\u6784\u4f53 \u4f5c\u7528 \u6ce8\u610f\u70b9 struct super_block \u8868\u793a\u4e00\u4e2a\u8d85\u7ea7\u5757\u5b9e\u4f8b, \u540c\u65f6\u4e5f\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u6587\u4ef6\u7cfb\u7edf\u5b9e\u4f8b, \u56e0\u4e3a inode \u90fd\u662f\u4ece super_block \u8fd9\u91cc\u5206\u914d\u548c\u7ef4\u62a4\u7684 struct inode \u8868\u793a\u4e00\u4e2a\u6587\u4ef6\u5b9e\u4f8b, \u540c\u65f6\u76ee\u5f55\u4e5f\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6587\u4ef6, \u5e76\u4e14\u8fd8\u53ef\u4ee5\u8868\u793a\u5404\u7c7b\u7279\u6b8a\u6587\u4ef6(\u7ba1\u9053\u6587\u4ef6\u3001\u8bbe\u5907\u6587\u4ef6), \u8fd9\u4e2a\u7ed3\u6784\u4f53\u5b58\u50a8\u548c\u7ef4\u62a4\u6587\u4ef6\u7684\u5143\u6570\u636e. \u6587\u4ef6\u7684\u6570\u636e\u5219\u5b58\u50a8\u5728 block \u4e2d struct dentry \u4ec5\u5728\u5185\u5b58\u4e2d\u6709, \u5728\u78c1\u76d8\u4e0a\u6ca1\u6709\u8be5\u7ed3\u6784\u4f53, \u5e76\u4e14\u6709 dcache, \u7528\u4e8e VFS \u5feb\u901f\u627e\u5230\u5bf9\u5e94 inode\u3002 \u201cdentry\u201d\u662f directory entry\uff08\u76ee\u5f55\u9879\uff09\u7684\u7f29\u5199\u3002 \u6211\u4eec\u4f20\u7ed9 open\u3001stat \u7b49\u51fd\u6570\u7684\u53c2\u6570\u7684\u662f\u4e00\u4e2a\u8def\u5f84\uff0c\u4f8b\u5982/home/akaedu/a\uff0c\u9700\u8981\u6839\u636e\u8def\u5f84\u627e\u5230\u6587\u4ef6\u7684 inode\u3002 \u4e3a\u4e86\u51cf\u5c11\u8bfb\u76d8\u6b21\u6570\uff0c\u5185\u6838\u7f13\u5b58\u4e86\u76ee\u5f55\u7684\u6811\u72b6\u7ed3\u6784\uff0c\u79f0\u4e3a dentry cache\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u662f\u4e00\u4e2a dentry \u7ed3\u6784\u4f53\uff0c\u53ea\u8981\u6cbf\u7740\u8def\u5f84\u5404\u90e8\u5206\u7684 dentry \u641c\u7d22\u5373\u53ef\uff0c\u4ece\u6839\u76ee\u5f55/\u627e\u5230 home \u76ee\u5f55\uff0c\u7136\u540e\u627e\u5230 akaedu \u76ee\u5f55\uff0c\u7136\u540e\u627e\u5230\u6587\u4ef6 a\u3002 dentry cache \u53ea\u4fdd\u5b58\u6700\u8fd1\u8bbf\u95ee\u8fc7\u7684\u76ee\u5f55\u9879\uff0c\u5982\u679c\u8981\u627e\u7684\u76ee\u5f55\u9879\u5728 cache \u4e2d\u6ca1\u6709\uff0c\u5c31\u8981\u4ece\u78c1\u76d8\u8bfb\u5230\u5185\u5b58\u4e2d\u3002 . struct file \u4ece task_struct \u89d2\u5ea6, \u8868\u793a\u4e00\u4e2a\u6253\u5f00\u7684\u6587\u4ef6. \u5728 file \u7ed3\u6784\u4f53\u4e2d\u7ef4\u62a4 File Status Flag\uff08file \u7ed3\u6784\u4f53\u7684\u6210\u5458 f_flags\uff09\u548c\u5f53\u524d\u8bfb\u5199\u4f4d\u7f6e\uff08file \u7ed3\u6784\u4f53\u7684\u6210\u5458 f_pos\uff09 struct vfsmount \u7528\u6765\u63cf\u8ff0\u4e00\u4e2a\u5b89\u88c5\u6587\u4ef6\u7cfb\u7edf\u7684\u5b9e\u4f8b, \u4e0b\u6e38\u662f super_block, \u540c\u65f6\u8fd9\u4e00\u5c42\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e9b\u7279\u6b8a\u6807\u8bb0, \u4f8b\u5982\u7981\u6b62\u672c\u6587\u4ef6\u7cfb\u7edf\u5b9e\u4f8b\u4e2d\u4f7f\u7528 setuid \u548c setgid \u80fd\u529b struct file_system_type \u8868\u793a\u4e00\u79cd\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b, \u6bd4\u5982\u5185\u6838\u652f\u6301\u591a\u79cd\u7c7b\u578b\u7684\u6587\u4ef6\u7cfb\u7edf ext4,ntfs,fat \u7b49, \u5219\u6bcf\u79cd\u6587\u4ef6\u7cfb\u7edf\u90fd\u4f1a\u6709\u4e00\u4e2a file_system_type \u5b9e\u4f8b \u4e00\u4e9b\u4f8b\u5b50 static struct file_system_type dev_fs_type = { .name = \"devtmpfs\", .mount = dev_mount, .kill_sb = kill_litter_super, }; \u4e00\u4e9b\u5185\u6838 API register_filesystem(&dev_fs_type); //\u6ce8\u518c dev_fs_type \u6587\u4ef6\u7cfb\u7edf\uff0c\u5373\u5c06 dev_fs_type \u6dfb\u52a0\u5230\u5185\u6838\u5168\u5c40\u603b\u94fe\u8868\u4e2d file_systems unregister_filesystem(&dev_fs_type); // \u53d6\u6d88\u6ce8\u518c 2 task_struct \u4e2d\u548c\u6587\u4ef6\u7cfb\u7edf\u76f8\u5173\u7684\u6210\u5458\u548c\u7ed3\u6784\u4f53 A files_struct task_struct \u4e2d\u7684 files \u6210\u5458\u6307\u5411 files_struct, \u4ee3\u8868\u4e00\u4e2a task_struct \u6253\u5f00\u7684\u6587\u4ef6 struct task_struct { ... /* filesystem information */ struct fs_struct *fs; /* open file information */ struct files_struct *files; /* namespaces */ struct nsproxy *nsproxy; ... } include/linux/fdtable.h: /* * Open file table structure */ struct files_struct { /* * read mostly part */ atomic_t count; struct fdtable __rcu *fdt; struct fdtable fdtab; /* * written part on a separate cache line in SMP */ spinlock_t file_lock ____cacheline_aligned_in_smp; int next_fd; unsigned long close_on_exec_init[1]; unsigned long open_fds_init[1]; struct file __rcu * fd_array[NR_OPEN_DEFAULT]; }; B fs_struct task_struct \u4e2d\u7684 fs \u6210\u5458\u6307\u5411 fs_struct, \u4ee3\u8868\u8fdb\u7a0b\u6240\u5728\u7684\u5de5\u4f5c\u76ee\u5f55\u548c\u6839\u76ee\u5f55 C name_space task_struct \u4e2d\u7684 nsproxy \u6210\u5458\u6307\u5411 struct nsproxy, \u7136\u540e\u7531 nsproxy \u5305\u542b\u5404\u4e2a namespace","title":"\u7b2c\u4e00\u7bc7 VFS\u56db\u5927\u5bf9\u8c61inode\u3001dentry\u3001super_block\u3001file\u6570\u636e\u7ed3\u6784\u603b\u7ed3"},{"location":"chapter_5/1_four_object_of_VFS/#_1","text":"\u8d85\u7ea7\u5757\uff08super_block\uff09\u3001\u7d22\u5f15\u8282\u70b9\uff08inode\uff09\u3001\u76ee\u5f55\u7ed3\u6784\uff08dentry\uff09 \u548c \u6587\u4ef6\u7ed3\u6784\uff08file\uff09\u8fd9\u51e0\u4e2a\u7ed3\u6784\u4f53\u7ec4\u6210\u4e86 VFS \u7684\u6838\u5fc3\u6982\u5ff5.","title":"\u6982\u8ff0"},{"location":"chapter_5/1_four_object_of_VFS/#inode","text":"\u78c1\u76d8\u4e0a\u771f\u6b63\u7684\u4e00\u4e2a\u6587\u4ef6\uff0c\u5728\u5185\u6838\u4e2d\u662f\u4f7f\u7528\u4e00\u4e2a inode \u6570\u636e\u7ed3\u6784\u8868\u793a. struct inode \u5728\u6e90\u7801\u4e2d\u7684\u4f4d\u7f6e: include/linux/fs.h:788 struct inode \u6574\u4f53\u9762\u8c8c\u5982\u4e0b: struct inode { struct hlist_node i_hash; struct list_head i_list; /* backing dev IO list */ struct list_head i_sb_list; struct list_head i_dentry; unsigned long i_ino; atomic_t i_count; unsigned int i_nlink; uid_t i_uid; gid_t i_gid; dev_t i_rdev; u64 i_version; loff_t i_size; #ifdef __NEED_I_SIZE_ORDERED seqcount_t i_size_seqcount; #endif struct timespec i_atime; struct timespec i_mtime; struct timespec i_ctime; blkcnt_t i_blocks; unsigned int i_blkbits; unsigned short i_bytes; umode_t i_mode; spinlock_t i_lock; /* i_blocks, i_bytes, maybe i_size */ struct mutex i_mutex; struct rw_semaphore i_alloc_sem; const struct inode_operations *i_op; const struct file_operations *i_fop; /* former ->i_op->default_file_ops */ struct super_block *i_sb; struct file_lock *i_flock; struct address_space *i_mapping; struct address_space i_data; #ifdef CONFIG_QUOTA struct dquot *i_dquot[MAXQUOTAS]; #endif struct list_head i_devices; union { struct pipe_inode_info *i_pipe; struct block_device *i_bdev; struct cdev *i_cdev; }; __u32 i_generation; #ifdef CONFIG_FSNOTIFY __u32 i_fsnotify_mask; /* all events this inode cares about */ struct hlist_head i_fsnotify_mark_entries; /* fsnotify mark entries */ #endif #ifdef CONFIG_INOTIFY struct list_head inotify_watches; /* watches on this inode */ struct mutex inotify_mutex; /* protects the watches list */ #endif unsigned long i_state; unsigned long dirtied_when; /* jiffies of first dirtying */ unsigned int i_flags; atomic_t i_writecount; #ifdef CONFIG_SECURITY void *i_security; #endif #ifdef CONFIG_FS_POSIX_ACL struct posix_acl *i_acl; struct posix_acl *i_default_acl; #endif void *i_private; /* fs or device private pointer */ }; \u4e00\u4e9b\u91cd\u8981\u7684\u6210\u5458\u542b\u4e49 unsigned long i_ino; /*inode\u53f7\u7801*/ uid_t i_uid; /*\u7528\u6237*/ gid_t i_gid; /*\u7528\u6237\u7ec4*/ struct timespec i_atime; /*\u6587\u4ef6\u7684access time*/ struct timespec i_mtime; /*\u6587\u4ef6\u7684motify time*/ struct timespec i_ctime; /*\u6587\u4ef6\u7684\u5c5e\u6027\u6539\u53d8\u7684time */ const struct inode_operations *i_op; /*\u6307\u5411\u548csuper_block\u76f8\u5173\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u5220\u9664\u4e00\u4e2ainode,\u80af\u5b9a\u662f\u8981\u66f4\u65b0\u6587\u4ef6\u7cfb\u7edf\u7684super_block\u7684*/ const struct file_operations *i_fop; /*\u6307\u5411\u8be5\u6587\u4ef6\u652f\u6301\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u5f80\u8be5\u6587\u4ef6\u91cc\u5199\u6570\u636e,\u662f\u771f\u6b63\u7684\u64cd\u4f5c\u78c1\u76d8\u5199\u6570\u636e*/","title":"\u4e00 inode \u6570\u636e\u7ed3\u6784"},{"location":"chapter_5/1_four_object_of_VFS/#dentry","text":"1 \u76ee\u5f55\u9879\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u65b9\u4fbf\u67e5\u627e\u6587\u4ef6\u3002\u4e00\u4e2a\u8def\u5f84\u7684\u5404\u4e2a\u7ec4\u6210\u90e8\u5206\uff0c\u4e0d\u7ba1\u662f\u76ee\u5f55\u8fd8\u662f\u666e\u901a\u7684\u6587\u4ef6\uff0c\u90fd\u662f\u4e00\u4e2a\u76ee\u5f55\u9879\u5bf9\u8c61\u3002\u5982\uff0c\u5728\u8def\u5f84 /home/hero/example.c \u4e2d\uff0c\u76ee\u5f55 /, home/, hero/ \u548c\u6587\u4ef6 example.c \u90fd\u5bf9\u5e94\u4e00\u4e2a\u76ee\u5f55\u9879\u5bf9\u8c61\u3002 2 \u76ee\u5f55\u9879\u91cc\u6709\u4e00\u4e2a d_inode \u6210\u5458\uff0c\u6307\u5411\u771f\u6b63\u7684 inode dentry \u7684\u6e90\u7801 ,\u5728 include/linux/dcache.h 89 \u884c struct dentry { atomic_t d_count; unsigned int d_flags; /* protected by d_lock */ spinlock_t d_lock; /* per dentry lock */ int d_mounted; struct inode *d_inode; /* Where the name belongs to - NULL is * negative */ /* * The next three fields are touched by __d_lookup. Place them here * so they all fit in a cache line. */ struct hlist_node d_hash; /* lookup hash list */ struct dentry *d_parent; /* parent directory */ struct qstr d_name; struct list_head d_lru; /* LRU list */ /* * d_child and d_rcu can share memory */ union { struct list_head d_child; /* child of parent list */ struct rcu_head d_rcu; } d_u; struct list_head d_subdirs; /* our children */ struct list_head d_alias; /* inode alias list */ unsigned long d_time; /* used by d_revalidate */ const struct dentry_operations *d_op; struct super_block *d_sb; /* The root of the dentry tree */ void *d_fsdata; /* fs-specific data */ unsigned char d_iname[DNAME_INLINE_LEN_MIN]; /* small names */ };","title":"\u4e8c dentry"},{"location":"chapter_5/1_four_object_of_VFS/#file","text":"\u6bcf\u5f53\u8fdb\u7a0b\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6,\u5185\u6838\u8fd4\u56de\u7684\u662f\u4e00\u4e2a file \u7ed3\u6784\u4f53\uff0c\u7528\u4e8e\u7ba1\u7406\u88ab\u6253\u5f00\u7684\u6587\u4ef6 \u6587\u4ef6\u7ed3\u6784\u7528\u4e8e\u63cf\u8ff0\u4e00\u4e2a\u5df2\u6253\u5f00\u7684\u6587\u4ef6\uff0c\u5176\u5305\u542b\u6587\u4ef6\u5f53\u524d\u7684\u8bfb\u5199\u504f\u79fb\u91cf\uff0c\u6587\u4ef6\u6253\u5f00\u6a21\u5f0f\u548c\u6587\u4ef6\u64cd\u4f5c\u51fd\u6570\u5217\u8868\u7b49 \u8fdb\u7a0b task_struct \u7ed3\u6784\u4f53\u4e2d\uff0c\u6709 files \u6210\u5458\u6307\u5411 files_struct (\u6587\u4ef6\u63cf\u8ff0\u7b26\u8868),files_struct \u91cc\u6709 fd_array \u6307\u5411\u4e00\u4e2a\u4e2a file \u7ed3\u6784\u4f53.file \u7ed3\u6784\u4f53\u91cc\u6709\u6587\u4ef6\u652f\u6301\u7684\u64cd\u4f5c\u51fd\u6570\uff0c\u4f8b\u5982\u8bfb\u3001\u5199\u3001\u6587\u4ef6\u504f\u79fb\u7b49. \u8fd9\u4e9b\u64cd\u4f5c\u51fd\u6570\u53ef\u4ee5\u771f\u6b63\u7684\u6539\u53d8\u6587\u4ef6\u7684\u5185\u5bb9. file \u7ed3\u6784\u4f53\u91cc\u8fd8\u542b\u6709 dentry \u7684\u6307\u9488\uff0c\u56e0\u6b64\u901a\u8fc7 file \u7ed3\u6784\u4f53\u4e5f\u53ef\u4ee5\u627e\u5230\u5177\u4f53\u7684 inode. struct file { /* * fu_list becomes invalid after file_free is called and queued via * fu_rcuhead for RCU freeing */ union { struct list_head fu_list; struct rcu_head fu_rcuhead; } f_u; struct path f_path; #define f_dentry f_path.dentry #define f_vfsmnt f_path.mnt const struct file_operations *f_op; spinlock_t f_lock; /* f_ep_links, f_flags, no IRQ */ atomic_long_t f_count; unsigned int f_flags; fmode_t f_mode; loff_t f_pos; struct fown_struct f_owner; const struct cred *f_cred; struct file_ra_state f_ra; u64 f_version; #ifdef CONFIG_SECURITY void *f_security; #endif /* needed for tty driver, and maybe others */ void *private_data; #ifdef CONFIG_EPOLL /* Used by fs/eventpoll.c to link all the hooks to this file */ struct list_head f_ep_links; #endif /* #ifdef CONFIG_EPOLL */ struct address_space *f_mapping; #ifdef CONFIG_DEBUG_WRITECOUNT unsigned long f_mnt_write_state; #endif #ifndef __GENKSYMS__ struct mutex f_pos_lock; #endif }; struct file {}\u7ed3\u6784\u4f53\u5185\uff0c\u6709\u4e00\u4e2astruct path\u6210\u5458\uff0c\u8be5\u6210\u5458\u7684\u6e90\u7801\u5982\u4e0b: struct path { struct vfsmount *mnt; struct dentry *dentry; }; file \u7ed3\u6784\u4f53\u548c inode \u7684\u5bf9\u5e94\u5173\u7cfb: \u591a\u4e2a file \u7ed3\u6784\u4f53\u53ef\u4ee5\u6307\u5411\u540c\u4e00\u4e2a inode\uff0c\u4f8b\u5982\u8fdb\u7a0b A \u548c\u8fdb\u7a0b B \u90fd\u6253\u5f00\u4e86\u540c\u4e00\u4e2a\u6587\u4ef6/home/hero/example.c ,\u5185\u6838\u4f1a\u4ea7\u751f 2 \u4e2a file \u7ed3\u6784\u4f53 \u8fdb\u7a0b\u7684 FD \u548c file \u7ed3\u6784\u4f53\u7684\u5bf9\u5e94\u5173\u7cfb: \u4e00\u5f00\u59cb\u662f\u4e00\u5bf9\u4e00\uff0c\u4e5f\u53ef\u4ee5\u6709\u591a\u5bf9\u4e00\u7684\u60c5\u51b5 \u4f8b\u5982\u8fdb\u7a0b A\uff0c\u901a\u8fc7 fork()\u7cfb\u7edf\u8c03\u7528\u4ea7\u751f\u4e86\u5b50\u8fdb\u7a0b\uff0c\u90a3\u4e48\u5b50\u8fdb\u7a0b\u7684 FD table \u9ed8\u8ba4\u662f\u590d\u5236\u4e86\u7236\u8fdb\u7a0b\u7684,\u8fd9\u4e2a\u65f6\u5019\u8fdb\u7a0b\u7684 FD \u5c31\u5bf9\u5e94\u540c\u4e00\u4e2a file \u7ed3\u6784\u4f53\u4e86.","title":"\u4e09 file \u7ed3\u6784\u4f53"},{"location":"chapter_5/1_four_object_of_VFS/#super_block","text":"Linux \u652f\u6301\u591a\u6587\u4ef6\u7cfb\u7edf\uff0c\u6240\u4ee5\u5728\u5185\u6838\u4e2d\u5fc5\u987b\u901a\u8fc7\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u63cf\u8ff0\u5177\u4f53\u6587\u4ef6\u7cfb\u7edf\u7684\u4fe1\u606f\u548c\u76f8\u5173\u7684\u64cd\u4f5c\u7b49\uff0cVFS \u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a \u8d85\u7ea7\u5757\uff08super_block\uff09 \u7684\u6570\u636e\u7ed3\u6784\u6765\u63cf\u8ff0\u5177\u4f53\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u4e5f\u5c31\u662f\u8bf4\u5185\u6838\u662f\u901a\u8fc7\u8d85\u7ea7\u5757\u6765\u8ba4\u77e5\u5177\u4f53\u7684\u6587\u4ef6\u7cfb\u7edf\u7684\uff0c\u4e00\u4e2a\u5177\u4f53\u7684\u6587\u4ef6\u7cfb\u7edf\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u8d85\u7ea7\u5757\u7ed3\u6784 \u4e0b\u9762\u6211\u4eec\u4ecb\u7ecd\u4e00\u4e0b\u4e00\u4e9b\u6bd4\u8f83\u91cd\u8981\u7684\u6210\u5458\uff1a s_dev\uff1a\u7528\u4e8e\u4fdd\u5b58\u8bbe\u5907\u7684\u8bbe\u5907\u53f7 s_blocksize\uff1a\u7528\u4e8e\u4fdd\u5b58\u6587\u4ef6\u7cfb\u7edf\u7684\u6570\u636e\u5757\u5927\u5c0f\uff08\u6587\u4ef6\u7cfb\u7edf\u662f\u4ee5\u6570\u636e\u5757\u4e3a\u5355\u4f4d\u7684\uff09 s_type\uff1a\u6587\u4ef6\u7cfb\u7edf\u7684\u7c7b\u578b\uff08\u63d0\u4f9b\u4e86\u8bfb\u53d6\u8bbe\u5907\u4e2d\u6587\u4ef6\u7cfb\u7edf\u8d85\u7ea7\u5757\u7684\u65b9\u6cd5\uff09 s_op\uff1a\u8d85\u7ea7\u5757\u76f8\u5173\u7684\u64cd\u4f5c\u5217\u8868 s_root\uff1a\u6302\u8f7d\u7684\u6839\u76ee\u5f55 inode \u6570\u636e\u7ed3\u6784\u4e2d\uff0c\u6709\u4e2a const struct inode_operations i_op \uff0c\u7528\u6765\u6307\u5411 inode \u672c\u8eab\u5c5e\u6027\u7684\u4e00\u4e9b\u4fee\u6539\uff0c struct super_block i_sb; \u5219\u6307\u5411\u8be5 inode \u5bf9\u5e94\u7684 super_block. \u56e0\u6b64\u4f8b\u5982\u5220\u9664\u4e00\u4e2a\u771f\u6b63\u7684\u6587\u4ef6(inode)\uff0c\u5fc5\u987b\u66f4\u65b0\u5176\u5bf9\u5e94 super_block \u4fe1\u606f.","title":"\u56db super_block"},{"location":"chapter_5/1_four_object_of_VFS/#1-super_block","text":"super block \u6e90\u4ee3\u7801\u4f4d\u7f6e include/linux/fs.h:1424 struct super_block { struct list_head s_list; /* Keep this first */ dev_t s_dev; /* search index; _not_ kdev_t */ unsigned long s_blocksize; unsigned char s_blocksize_bits; unsigned char s_dirt; loff_t s_maxbytes; /* Max file size */ struct file_system_type *s_type; const struct super_operations *s_op; const struct dquot_operations *dq_op; const struct quotactl_ops *s_qcop; const struct export_operations *s_export_op; unsigned long s_flags; unsigned long s_magic; struct dentry *s_root; struct rw_semaphore s_umount; struct mutex s_lock; int s_count; int s_need_sync; atomic_t s_active; #ifdef CONFIG_SECURITY void *s_security; #endif struct xattr_handler **s_xattr; struct list_head s_inodes; /* all inodes */ struct hlist_head s_anon; /* anonymous dentries for (nfs) exporting */ struct list_head s_files; /* s_dentry_lru and s_nr_dentry_unused are protected by dcache_lock */ struct list_head s_dentry_lru; /* unused dentry lru */ int s_nr_dentry_unused; /* # of dentry on lru */ struct block_device *s_bdev; struct backing_dev_info *s_bdi; struct mtd_info *s_mtd; struct list_head s_instances; struct quota_info s_dquot; /* Diskquota specific options */ int s_frozen; wait_queue_head_t s_wait_unfrozen; char s_id[32]; /* Informational name */ void *s_fs_info; /* Filesystem private info */ fmode_t s_mode; /* * The next field is for VFS *only*. No filesystems have any business * even looking at it. You had been warned. */ struct mutex s_vfs_rename_mutex; /* Kludge */ /* Granularity of c/m/atime in ns. Cannot be worse than a second */ u32 s_time_gran; /* * Filesystem subtype. If non-empty the filesystem type field * in /proc/mounts will be \"type.subtype\" */ char *s_subtype; /* * Saved mount options for lazy filesystems using * generic_show_options() */ char *s_options; #ifndef __GENKSYMS__ struct sb_writers s_writers; atomic_t s_fsnotify_marks; wait_queue_head_t s_fsnotify_marks_wq; #endif }; struct path { struct vfsmount *mnt; struct dentry *dentry; };","title":"1 super_block \u6e90\u7801"},{"location":"chapter_5/1_four_object_of_VFS/#_2","text":"","title":"\u4e94 \u603b\u7ed3\u4e00\u4e0b\u5404\u4e2a\u7ed3\u6784\u4f53\u4e4b\u95f4\u7684\u8054\u7cfb"},{"location":"chapter_5/1_four_object_of_VFS/#1","text":"\u540c\u65f6\u6211\u4eec\u6ce8\u610f\u5230 super_block \u5bf9\u8c61\u4e5f\u6709 s_inodes \u6210\u5458, \u6307\u5411\u672c\u6587\u4ef6\u7cfb\u7edf\u7684\u6240\u6709 inode \u7ed3\u6784\u4f53 \u4f5c\u7528 \u6ce8\u610f\u70b9 struct super_block \u8868\u793a\u4e00\u4e2a\u8d85\u7ea7\u5757\u5b9e\u4f8b, \u540c\u65f6\u4e5f\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u6587\u4ef6\u7cfb\u7edf\u5b9e\u4f8b, \u56e0\u4e3a inode \u90fd\u662f\u4ece super_block \u8fd9\u91cc\u5206\u914d\u548c\u7ef4\u62a4\u7684 struct inode \u8868\u793a\u4e00\u4e2a\u6587\u4ef6\u5b9e\u4f8b, \u540c\u65f6\u76ee\u5f55\u4e5f\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6587\u4ef6, \u5e76\u4e14\u8fd8\u53ef\u4ee5\u8868\u793a\u5404\u7c7b\u7279\u6b8a\u6587\u4ef6(\u7ba1\u9053\u6587\u4ef6\u3001\u8bbe\u5907\u6587\u4ef6), \u8fd9\u4e2a\u7ed3\u6784\u4f53\u5b58\u50a8\u548c\u7ef4\u62a4\u6587\u4ef6\u7684\u5143\u6570\u636e. \u6587\u4ef6\u7684\u6570\u636e\u5219\u5b58\u50a8\u5728 block \u4e2d struct dentry \u4ec5\u5728\u5185\u5b58\u4e2d\u6709, \u5728\u78c1\u76d8\u4e0a\u6ca1\u6709\u8be5\u7ed3\u6784\u4f53, \u5e76\u4e14\u6709 dcache, \u7528\u4e8e VFS \u5feb\u901f\u627e\u5230\u5bf9\u5e94 inode\u3002 \u201cdentry\u201d\u662f directory entry\uff08\u76ee\u5f55\u9879\uff09\u7684\u7f29\u5199\u3002 \u6211\u4eec\u4f20\u7ed9 open\u3001stat \u7b49\u51fd\u6570\u7684\u53c2\u6570\u7684\u662f\u4e00\u4e2a\u8def\u5f84\uff0c\u4f8b\u5982/home/akaedu/a\uff0c\u9700\u8981\u6839\u636e\u8def\u5f84\u627e\u5230\u6587\u4ef6\u7684 inode\u3002 \u4e3a\u4e86\u51cf\u5c11\u8bfb\u76d8\u6b21\u6570\uff0c\u5185\u6838\u7f13\u5b58\u4e86\u76ee\u5f55\u7684\u6811\u72b6\u7ed3\u6784\uff0c\u79f0\u4e3a dentry cache\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u662f\u4e00\u4e2a dentry \u7ed3\u6784\u4f53\uff0c\u53ea\u8981\u6cbf\u7740\u8def\u5f84\u5404\u90e8\u5206\u7684 dentry \u641c\u7d22\u5373\u53ef\uff0c\u4ece\u6839\u76ee\u5f55/\u627e\u5230 home \u76ee\u5f55\uff0c\u7136\u540e\u627e\u5230 akaedu \u76ee\u5f55\uff0c\u7136\u540e\u627e\u5230\u6587\u4ef6 a\u3002 dentry cache \u53ea\u4fdd\u5b58\u6700\u8fd1\u8bbf\u95ee\u8fc7\u7684\u76ee\u5f55\u9879\uff0c\u5982\u679c\u8981\u627e\u7684\u76ee\u5f55\u9879\u5728 cache \u4e2d\u6ca1\u6709\uff0c\u5c31\u8981\u4ece\u78c1\u76d8\u8bfb\u5230\u5185\u5b58\u4e2d\u3002 . struct file \u4ece task_struct \u89d2\u5ea6, \u8868\u793a\u4e00\u4e2a\u6253\u5f00\u7684\u6587\u4ef6. \u5728 file \u7ed3\u6784\u4f53\u4e2d\u7ef4\u62a4 File Status Flag\uff08file \u7ed3\u6784\u4f53\u7684\u6210\u5458 f_flags\uff09\u548c\u5f53\u524d\u8bfb\u5199\u4f4d\u7f6e\uff08file \u7ed3\u6784\u4f53\u7684\u6210\u5458 f_pos\uff09 struct vfsmount \u7528\u6765\u63cf\u8ff0\u4e00\u4e2a\u5b89\u88c5\u6587\u4ef6\u7cfb\u7edf\u7684\u5b9e\u4f8b, \u4e0b\u6e38\u662f super_block, \u540c\u65f6\u8fd9\u4e00\u5c42\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e9b\u7279\u6b8a\u6807\u8bb0, \u4f8b\u5982\u7981\u6b62\u672c\u6587\u4ef6\u7cfb\u7edf\u5b9e\u4f8b\u4e2d\u4f7f\u7528 setuid \u548c setgid \u80fd\u529b struct file_system_type \u8868\u793a\u4e00\u79cd\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b, \u6bd4\u5982\u5185\u6838\u652f\u6301\u591a\u79cd\u7c7b\u578b\u7684\u6587\u4ef6\u7cfb\u7edf ext4,ntfs,fat \u7b49, \u5219\u6bcf\u79cd\u6587\u4ef6\u7cfb\u7edf\u90fd\u4f1a\u6709\u4e00\u4e2a file_system_type \u5b9e\u4f8b","title":"1 \u603b\u7ed3"},{"location":"chapter_5/1_four_object_of_VFS/#_3","text":"static struct file_system_type dev_fs_type = { .name = \"devtmpfs\", .mount = dev_mount, .kill_sb = kill_litter_super, };","title":"\u4e00\u4e9b\u4f8b\u5b50"},{"location":"chapter_5/1_four_object_of_VFS/#api","text":"register_filesystem(&dev_fs_type); //\u6ce8\u518c dev_fs_type \u6587\u4ef6\u7cfb\u7edf\uff0c\u5373\u5c06 dev_fs_type \u6dfb\u52a0\u5230\u5185\u6838\u5168\u5c40\u603b\u94fe\u8868\u4e2d file_systems unregister_filesystem(&dev_fs_type); // \u53d6\u6d88\u6ce8\u518c","title":"\u4e00\u4e9b\u5185\u6838 API"},{"location":"chapter_5/1_four_object_of_VFS/#2-task_struct","text":"","title":"2 task_struct \u4e2d\u548c\u6587\u4ef6\u7cfb\u7edf\u76f8\u5173\u7684\u6210\u5458\u548c\u7ed3\u6784\u4f53"},{"location":"chapter_5/1_four_object_of_VFS/#a-files_struct","text":"task_struct \u4e2d\u7684 files \u6210\u5458\u6307\u5411 files_struct, \u4ee3\u8868\u4e00\u4e2a task_struct \u6253\u5f00\u7684\u6587\u4ef6 struct task_struct { ... /* filesystem information */ struct fs_struct *fs; /* open file information */ struct files_struct *files; /* namespaces */ struct nsproxy *nsproxy; ... } include/linux/fdtable.h: /* * Open file table structure */ struct files_struct { /* * read mostly part */ atomic_t count; struct fdtable __rcu *fdt; struct fdtable fdtab; /* * written part on a separate cache line in SMP */ spinlock_t file_lock ____cacheline_aligned_in_smp; int next_fd; unsigned long close_on_exec_init[1]; unsigned long open_fds_init[1]; struct file __rcu * fd_array[NR_OPEN_DEFAULT]; };","title":"A files_struct"},{"location":"chapter_5/1_four_object_of_VFS/#b-fs_struct","text":"task_struct \u4e2d\u7684 fs \u6210\u5458\u6307\u5411 fs_struct, \u4ee3\u8868\u8fdb\u7a0b\u6240\u5728\u7684\u5de5\u4f5c\u76ee\u5f55\u548c\u6839\u76ee\u5f55","title":"B fs_struct"},{"location":"chapter_5/1_four_object_of_VFS/#c-name_space","text":"task_struct \u4e2d\u7684 nsproxy \u6210\u5458\u6307\u5411 struct nsproxy, \u7136\u540e\u7531 nsproxy \u5305\u542b\u5404\u4e2a namespace","title":"C name_space"},{"location":"chapter_5/2_io_stack/","text":"\u6982\u8ff0 \u672c\u7bc7\u6587\u6863\u68b3\u7406 Linux IO \u6808 IO \u6808\u603b\u4f53\u8ba4\u77e5 \u4e0a\u8ff0\u4e24\u4e2a\u56fe\u5177\u4f53\u5dee\u5f02\u662f PageCache \u7684\u5177\u4f53\u4f4d\u7f6e\uff0c\u4e2a\u4eba\u66f4\u52a0\u503e\u5411\u4e8e\u7b2c\u4e8c\u5e45\u56fe. \u7528\u6237\u7a7a\u95f4 \u5e93\u51fd\u6570\u7f13\u5b58, \u628a\u591a\u6b21 open \u6216\u8005 write \u8c03\u7528\u5408\u5e76\u4e3a\u4e00\u6b21, \u4f8b\u5982 c \u8bed\u8a00\u7684 stdio \u5e93\uff0c\u4ee5\u51cf\u5c11\u771f\u6b63\u7684 System Call \u6b21\u6570\u4e3a\u76ee\u7684 VFS \u5c42 VFS \u5c42\u7684\u4f5c\u7528: VFS \u662f\u4e00\u4e2a\u62bd\u8c61\u5c42,\u5176\u5411\u4e0a\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684\u6587\u4ef6\u8bbf\u95ee\u63a5\u53e3,\u800c\u5411\u4e0b\u5219\u517c\u5bb9\u4e86\u5404\u79cd\u4e0d\u540c\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\u4e0d\u4ec5\u4ec5\u662f\u8bf8\u5982 Ext2\u3001Ext4\u3001XFS \u548c Btrfs \u7b49\u5e38\u89c4\u610f\u4e49\u4e0a\u7684\u6587\u4ef6\u7cfb\u7edf,\u8fd8\u5305\u62ec\u4f2a\u6587\u4ef6\u7cfb\u7edf\u548c\u8bbe\u5907\u7b49\u7b49\u5185\u5bb9. \u6587\u4ef6\u7cfb\u7edf\u5c42 \u6587\u4ef6\u7cfb\u7edf\u5c42\u7684\u4f18\u5316\u5305\u62ec 2 \u5757: 1 \u683c\u5f0f\u5316\u65f6\u6839\u636e\u4e1a\u52a1\u573a\u666f\u9009\u62e9 block \u5927\u5c0f\u548c inode \u6570\u91cf 2 \u4f7f\u7528\u4e0d\u540c\u7684 mount option(\u6302\u8f7d\u53c2\u6570)\u548c\u5408\u7406\u7684\u65e5\u5fd7\u8bb0\u5f55, \u6765\u8d34\u5408\u4e1a\u52a1\u573a\u666f. \u5982\u679c\u4e1a\u52a1\u8981\u6c42\u9ad8\u6027\u80fd, \u90a3\u4e48\u5c3d\u53ef\u80fd\u591a\u5229\u7528\u7f13\u5b58. \u5982\u679c\u4e1a\u52a1\u8981\u6c42\u6570\u636e\u9ad8\u5b89\u5168, \u90a3\u4e48\u5c3d\u53ef\u80fd\u628a\u6570\u636e\u843d\u5730\u5230\u5757\u8bbe\u5907. ext4 \u6587\u4ef6\u7cfb\u7edf\u5b8c\u6574\u7684\u6302\u8f7d\u53c2\u6570 \u53c2\u8003 \u5e38\u7528\u7684\u6302\u8f7d\u53c2\u6570: data \u3001 noatime \u3001 nobarrier \u3001 delalloc \u3001 inode_readahead_blks \u3001 commit \u5176\u4e2d data \u5c31\u662f\u4e0b\u9762\u4e00\u8282\u4f1a\u8bb2\u89e3\u7684\u65e5\u5fd7\u6a21\u5f0f ext4 \u6587\u4ef6\u7cfb\u7edf\u7684\u65e5\u5fd7\u6a21\u5f0f ext4 \u6709 3 \u79cd\u65e5\u5fd7\u6a21\u5f0f\uff0c\u5206\u522b\u662f ordered\uff0cwriteback\uff0cjournal\u3002\u4ed6\u4eec\u7684\u5dee\u522b\u7f51\u4e0a\u6709\u5f88\u591a\u8d44\u6599\uff0c\u6211\u7b80\u5355\u4ecb\u7ecd\u4e0b\uff1a jorunal\uff1a\u628a\u5143\u6570\u636e\u4e0e\u6570\u636e\u4e00\u5e76\u5199\u5165\u5230\u65e5\u5fd7\u5757\u3002\u6027\u80fd\u5dee\u4e0d\u591a\u6298\u534a\uff0c\u56e0\u4e3a\u6570\u636e\u5199\u4e86\u4e24\u6b21\uff0c\u4f46\u6700\u5b89\u5168 writeback: \u628a\u5143\u6570\u636e\u5199\u5165\u65e5\u5fd7\u5757\uff0c\u6570\u636e\u4e0d\u5199\u5165\u65e5\u5fd7\u5757\uff0c\u4f46\u4e0d\u4fdd\u8bc1\u6570\u636e\u5148\u843d\u76d8\u3002\u6027\u80fd\u6700\u9ad8\uff0c\u4f46\u7531\u4e8e\u4e0d\u4fdd\u8bc1\u5143\u6570\u636e\u4e0e\u6570\u636e\u7684\u987a\u5e8f\uff0c\u4e5f\u662f\u6389\u7535\u6700\u4e0d\u5b89\u5168\u7684 ordered\uff1a\u4e0e writeback \u76f8\u4f3c\uff0c\u4f46\u4f1a\u4fdd\u8bc1\u6570\u636e\u5148\u843d\u76d8\uff0c\u518d\u662f\u5143\u6570\u636e\u3002\u6298\u4e2d\u6027\u80fd\u4ee5\u4fdd\u8bc1\u8db3\u591f\u7684\u5b89\u5168\uff0c\u8fd9\u662f\u5927\u591a\u6570 PC \u4e0a\u63a8\u8350\u7684\u9ed8\u8ba4\u7684\u6a21\u5f0f Page Cache \u9875\u7f13\u5b58\u5728 VFS \u4e0e\u5177\u4f53\u6587\u4ef6\u7cfb\u7edf\u4e4b\u95f4 , \u4e3a\u4e86\u63d0\u9ad8 IO \u6027\u80fd\uff0c\u51cf\u5c11\u771f\u5b9e\u7684\u4ece\u78c1\u76d8\u8bfb\u5199\u7684\u6b21\u6570\uff0cLinux \u5185\u6838\u8bbe\u8ba1\u4e86\u4e00\u5c42\u5185\u5b58\u7f13\u5b58\uff0c\u628a\u78c1\u76d8\u6570\u636e\u7f13\u5b58\u5230\u5185\u5b58\u4e2d\u3002\u7531\u4e8e\u5185\u5b58\u4ee5 4K \u5927\u5c0f\u7684 \u9875 \u4e3a\u5355\u4f4d\u7ba1\u7406\uff0c\u78c1\u76d8\u6570\u636e\u4e5f\u4ee5\u9875\u4e3a\u5355\u4f4d\u7f13\u5b58\uff0c\u56e0\u6b64\u4e5f\u79f0\u4e3a \u9875\u7f13\u5b58 \u3002\u5728\u6bcf\u4e2a\u7f13\u5b58 \u9875 \u4e2d\uff0c\u90fd\u5305\u542b\u4e86\u90e8\u5206\u78c1\u76d8\u4fe1\u606f\u7684\u526f\u672c\u3002 \u5bf9\u4e8e\u8bfb\u64cd\u4f5c, \u5982\u679c\u56e0\u4e3a\u4e4b\u524d\u8bfb\u8fc7\u6216\u8005\u88ab\u9884\u8bfb\u52a0\u8f7d\u8fdb\u6765\uff0c\u800c\u672c\u6b21\u8981\u8bfb\u53d6\u6570\u636e\u521a\u597d\u5728\u7f13\u5b58\u4e2d\u547d\u4e2d\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u4ece\u7f13\u5b58\u4e2d\u8bfb\u53d6\uff0c\u4e0d\u9700\u8981\u6df1\u5165\u5230\u78c1\u76d8\u3002 \u5bf9\u4e8e\u5199\u64cd\u4f5c, \u4e0d\u7ba1\u662f \u540c\u6b65\u5199 \u8fd8\u662f \u5f02\u6b65\u5199 \uff0c\u90fd\u4f1a\u628a\u6570\u636e copy \u5230\u7f13\u5b58\uff0c\u5dee\u522b\u5728\u4e8e\u5f02\u6b65\u5199\u53ea\u662f copy \u4e14\u628a\u9875\u6807\u8bc6\u810f\u540e\u76f4\u63a5\u8fd4\u56de\uff0c\u800c\u540c\u6b65\u5199\u8fd8\u4f1a\u8c03\u7528\u7c7b\u4f3c fsync()\u7684\u64cd\u4f5c\u7b49\u5f85\u56de\u5199. \u5f02\u6b65\u5199 \u4ea7\u751f\u7684 \u810f\u6570\u636e \u4f1a\u5728 \u5408\u9002 \u7684\u65f6\u5019\u88ab\u5185\u6838\u5de5\u4f5c\u961f\u5217 writeback \u8fdb\u7a0b\u56de\u5237\u3002 \u5185\u6838 writeback \u7ebf\u7a0b\u7684 4 \u4e2a\u4e3b\u8981\u5185\u6838\u53c2\u6570 \u5185\u6838\u53c2\u6570 \u9ed8\u8ba4\u503c \u5355\u4f4d \u5907\u6ce8 /proc/sys/vm/dirty_writeback_centisecs 500 1/100 \u79d2 \u5b9a\u671f\u5524\u9192 writeback \u5185\u6838\u7ebf\u7a0b\uff0c\u56de\u5199\u810f\u9875 /proc/sys/vm/dirty_expire_centisecs 300 1/100 \u79d2 writeback \u7ebf\u7a0b\u88ab\u5524\u9192\u540e\uff0c\u5e76\u4e0d\u662f\u5199\u56de\u6240\u6709\u810f\u9875\uff0c\u800c\u662f\u53ea\u5199\u53d8\u810f\u8d85\u8fc7 dirty_expire_centisecs \u65f6\u95f4\u7684\u9875. /proc/sys/vm/dirty_background_ratio 10 \u6bd4\u4f8b\uff0c\u9ed8\u8ba4\u4e3a 10%\uff0c\u5f53\u810f\u9875\u6bd4\u4f8b\u8d85\u8fc7\u7cfb\u7edf\u6240\u6709 page \u6570\u91cf\u7684 10%\u65f6 \u5f53\u810f\u9875\u5360\u7cfb\u7edf\u5185\u5b58\u7684\u6bd4\u4f8b\u8d85\u8fc7/proc/sys/vm/dirty_background_ratio \u7684\u65f6\u5019\uff0cwrite \u7cfb\u7edf\u8c03\u7528\u4f1a\u5524\u9192 pdflush \u56de\u5199 dirty page,\u76f4\u5230\u810f\u9875\u6bd4\u4f8b\u4f4e\u4e8e/proc/sys/vm/dirty_background_ratio\uff0c\u4f46 write \u7cfb\u7edf\u8c03\u7528\u4e0d\u4f1a\u88ab\u963b\u585e\uff0c\u7acb\u5373\u8fd4\u56de\u3002 /proc/sys/vm/dirty_ratio 20 \u6bd4\u4f8b\uff0c\u9ed8\u8ba4\u4e3a 20%\uff0c\u5f53\u810f\u9875\u6570\u91cf\u5360\u7cfb\u7edf\u6240\u6709\u9875\u6570\u91cf\u6bd4\u4f8b\u8d85\u8fc7 20%\u65f6 write \u7cfb\u7edf\u8c03\u7528\u4f1a\u88ab\u963b\u585e\uff0cwriteback \u7ebf\u7a0b\u4f1a\u5de5\u4f5c\uff0c\u76f4\u5230\u810f\u9875\u5360\u6bd4\u4f4e\u4e8e/proc/sys/vm/dirty_ratio \u66f4\u591a\u53c2\u8003 \u5185\u6838\u5b98\u65b9\u6587\u6863 IO \u64cd\u4f5c\u7684\u4e09\u79cd\u6a21\u5f0f \u4ece\u7cfb\u7edf\u8c03\u7528\u7684\u63a5\u53e3\u518d\u5f80\u4e0b\uff0cLinux \u4e0b\u7684 IO \u6808\u81f4\u5927\u81f4\u6709\u4e09\u4e2a\u5c42\u6b21\uff1a \u6587\u4ef6\u7cfb\u7edf\u5c42\uff0c\u4ee5 write \u4e3a\u4f8b\uff0c\u5185\u6838\u62f7\u8d1d\u4e86 write \u53c2\u6570\u6307\u5b9a\u7684\u7528\u6237\u6001\u6570\u636e\u5230\u6587\u4ef6\u7cfb\u7edf Cache \u4e2d\uff0c\u5e76\u9002\u65f6\u5411\u4e0b\u5c42\u540c\u6b65 \u5757\u5c42\uff0c\u7ba1\u7406\u5757\u8bbe\u5907\u7684 IO \u961f\u5217\uff0c\u5bf9 IO \u8bf7\u6c42\u8fdb\u884c\u5408\u5e76\u3001\u6392\u5e8f\uff08\u8fd8\u8bb0\u5f97\u64cd\u4f5c\u7cfb\u7edf\u8bfe\u7a0b\u5b66\u4e60\u8fc7\u7684 IO \u8c03\u5ea6\u7b97\u6cd5\u5417\uff1f\uff09 \u8bbe\u5907\u5c42\uff0c\u901a\u8fc7 DMA \u4e0e\u5185\u5b58\u76f4\u63a5\u4ea4\u4e92\uff0c\u5b8c\u6210\u6570\u636e\u548c\u5177\u4f53\u8bbe\u5907\u4e4b\u95f4\u7684\u4ea4\u4e92 \u7ed3\u5408\u8fd9\u4e2a\u56fe\uff0c\u60f3\u60f3 Linux \u7cfb\u7edf\u7f16\u7a0b\u91cc\u7528\u5230\u7684 Buffered IO\u3001mmap\u3001Direct IO\uff0c\u8fd9\u4e9b\u673a\u5236\u600e\u4e48\u548c Linux IO \u6808\u8054\u7cfb\u8d77\u6765\u5462\uff1f\u4e0a\u9762\u7684\u56fe\u6709\u70b9\u590d\u6742\uff0c\u6211\u753b\u4e00\u5e45\u7b80\u56fe\uff0c\u628a\u8fd9\u4e9b\u673a\u5236\u6240\u5728\u7684\u4f4d\u7f6e\u6dfb\u52a0\u8fdb\u53bb\uff1a \u4ecb\u7ecd\u4e00\u4e0b\u4e09\u79cd IO \u6a21\u5f0f: Buffered IO: \u4f20\u7edf\u7684 Buffered IO \u4f7f\u7528 read \u8bfb\u53d6\u6587\u4ef6\u7684\u8fc7\u7a0b\uff1a \u4ece\u78c1\u76d8\u5230 Page Cache \u7b97\u7b2c\u4e00\u6b21\u7684\u8bdd\uff08 \u628a\u78c1\u76d8\u91cc\u7684\u5185\u5bb9\u8bfb\u53d6\u5230\u5c5e\u4e8e\u5185\u6838\u7a7a\u95f4\u7684 Struct Page \u4e2d \uff09\uff0c\u4ece Page Cache \u5230\u7528\u6237\u6001 buffer( \u628a\u5185\u6838\u7a7a\u95f4\u4e2d Struct Page \u7684\u5185\u5bb9\u8bfb\u53d6\u5230\u7528\u6237\u8fdb\u7a0b\u7a7a\u95f4\u7684 Struct Page \u4e2d ) \u5c31\u662f\u7b2c\u4e8c\u6b21\u4e86. \u5199\u64cd\u4f5c\u7684\u8bdd, \u662f\u5199\u5230 Page Cahce \u5c31\u8fd4\u56de, \u7136\u540e\u7b49\u5f85 writeback \u5185\u6838\u7ebf\u7a0b\u5237\u56de\u53bb. MMAP: \u76f4\u63a5\u628a Page Cache \u6620\u5c04\u5230\u4e86\u7528\u6237\u6001\u7684\u5730\u5740\u7a7a\u95f4\u91cc\u4e86\uff0c\u6240\u4ee5 mmap \u7684\u65b9\u5f0f\u8bfb\u6587\u4ef6\u662f\u6ca1\u6709\u7b2c\u4e8c\u6b21\u62f7\u8d1d\u8fc7\u7a0b\u7684. \u5982\u4f55\u5f00\u542f MMAP: \u4f7f\u7528 mmap \u7cfb\u7edf\u8c03\u7528. Direct IO: \u8fd9\u4e2a\u673a\u5236\u66f4\u72e0\uff0c\u76f4\u63a5\u8ba9\u7528\u6237\u6001\u548c\u5757 IO \u5c42\u5bf9\u63a5\uff0c\u76f4\u63a5\u653e\u5f03 Page Cache\uff0c\u4ece\u78c1\u76d8\u76f4\u63a5\u548c\u7528\u6237\u6001\u62f7\u8d1d\u6570\u636e. \u597d\u5904: \u5199\u64cd\u4f5c\u53ef\u4ee5\u76f4\u63a5\u5199\u5230\u5757 IO \u5c42. \u574f\u5904: \u8bfb\u64cd\u4f5c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e0d\u5982 Buffered IO\uff0c\u9664\u975e\u4f60\u5728\u7528\u6237\u6001\u81ea\u5df1\u6a21\u62df Buffered IO\uff0c\u505a\u7f13\u5b58. \u5982\u4f55\u5f00\u542f Direct IO: An application invokes direct I/O by opening a file with the O_DIRECT flag. \u518d\u6765\u770b\u4e00\u5f20\u8be6\u7ec6\u7684\u56fe \u7528\u6237\u5c42\u6700\u591a\u5230\u8fbe \u901a\u7528\u5757\u5c42 , \u901a\u7528\u5757\u5c42 \u4ee5\u4e0b\u5fc5\u987b\u7531\u5185\u6838\u81ea\u884c\u63a7\u5236\u4e86. \u7528\u6237\u5c42\u5728 wirte \u7cfb\u7edf\u8c03\u7528\u65f6, \u4f7f\u7528 O_DIRECT \u6807\u8bb0, \u4f1a\u5f00\u542f Direct IO, \u4f46\u5149\u6709 Direct IO, \u4ecd\u7136\u53ea\u662f\u5199\u5230 \u901a\u7528\u5757\u5c42 , \u5982\u679c\u9700\u8981\u6570\u636e\u7edd\u4e0d\u4e22\u5931, \u90a3\u4e48\u8fd8\u8981\u52a0\u4e0a O_SYNC \u6807\u8bb0 BIO \u5c42\u7684\u4f18\u5316 \u4e3a\u4e0d\u540c\u8fdb\u7a0b\u6307\u5b9a\u4e0d\u540c\u7684 IO \u4f18\u5148\u7ea7. Linux supports I/O scheduling priorities and classes since 2.6.13 with the CFQ I/O scheduler. \u5e38\u7528\u7684 IO classess \u5305\u62ec: Idle \u3001 Best-effort \u3001 Realtime . Request \u5c42\u7684\u4f18\u5316 \u7535\u68af\u8c03\u5ea6\u7b97\u6cd5 Request \u961f\u5217\u4e2a\u6570\u3001\u9884\u8bfb\u6570\u636e\u5927\u5c0f \u5173\u4e8e IO \u8c03\u5ea6\u7b97\u6cd5\u7684\u5355\u961f\u5217\u548c\u591a\u961f\u5217 \u7f51\u4e0a\u68c0\u7d22 IO\u8c03\u5ea6\u7b97\u6cd5 \uff0c\u5927\u91cf\u7684\u8d44\u6599\u90fd\u5728\u63cf\u8ff0 Deadline \uff0c CFQ \uff0c NOOP \u8fd9 3 \u79cd\u8c03\u5ea6\u7b97\u6cd5\uff0c\u5374\u6ca1\u6709\u5907\u6ce8\u8fd9\u53ea\u662f \u5355\u961f\u5217 \u4e0a\u9002\u7528\u7684\u8c03\u5ea6\u7b97\u6cd5\u3002\u5728\u6700\u65b0\u7684\u4ee3\u7801\u4e0a\uff08\u6211\u5206\u6790\u7684\u4ee3\u7801\u7248\u672c\u4e3a 5.7.0\uff09\uff0c\u5df2\u7ecf\u5b8c\u5168\u5207\u6362\u5230 multi-queue \u7684\u65b0\u67b6\u6784\u4e0a\u4e86\uff0c\u652f\u6301\u7684 IO \u8c03\u5ea6\u7b97\u6cd5\u5c31\u6210\u4e86 mq-deadline \uff0c BFQ \uff0c Kyber \uff0c none \u3002 \u5728\u300aLinux-storage-stack-diagram_v4.10\u300b \u5bf9 Block Layer \u7684\u63cf\u8ff0\u53ef\u4ee5\u5f62\u8c61\u9610\u8ff0\u5355\u961f\u5217\u4e0e\u591a\u961f\u5217\u7684\u5dee\u5f02\u3002 \u5355\u961f\u5217\u7684\u67b6\u6784\uff0c\u4e00\u4e2a\u5757\u8bbe\u5907\u53ea\u6709\u4e00\u4e2a\u5168\u5c40\u961f\u5217\uff0c\u6240\u6709\u8bf7\u6c42\u90fd\u8981\u5f80\u8fd9\u4e2a\u961f\u5217\u91cc\u9762\u585e\uff0c\u8fd9\u5728\u591a\u6838\u9ad8\u5e76\u53d1\u7684\u60c5\u51b5\u4e0b\uff0c\u5c24\u5176\u50cf\u670d\u52a1\u5668\u52a8\u5219 32 \u4e2a\u6838\u7684\u60c5\u51b5\u4e0b\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u4e92\u65a5\u800c\u52a0\u7684\u9501\u5c31\u5bfc\u81f4\u4e86\u975e\u5e38\u5927\u7684\u5f00\u9500\u3002\u6b64\u5916\uff0c\u5982\u679c\u78c1\u76d8\u652f\u6301\u591a\u961f\u5217\u5e76\u884c\u5904\u7406\uff0c\u5355\u961f\u5217\u7684\u6a21\u578b\u4e0d\u80fd\u5145\u5206\u53d1\u6325\u5176\u4f18\u8d8a\u7684\u6027\u80fd\u3002 \u591a\u961f\u5217\u7684\u67b6\u6784\u4e0b\uff0c\u521b\u5efa\u4e86 Software queues \u548c Hardware dispatch queues \u4e24\u7ea7\u961f\u5217\u3002Software queues \u662f\u6bcf\u4e2a CPU core \u4e00\u4e2a\u961f\u5217\uff0c\u4e14\u5728\u5176\u4e2d\u5b9e\u73b0 IO \u8c03\u5ea6\u3002\u7531\u4e8e \u6bcf\u4e2a CPU \u4e00\u4e2a\u5355\u72ec\u961f\u5217\uff0c\u56e0\u6b64\u4e0d\u5b58\u5728\u9501\u7ade\u4e89\u95ee\u9898 \u3002Hardware Dispatch Queues \u7684\u6570\u91cf\u8ddf\u786c\u4ef6\u60c5\u51b5\u6709\u5173\uff0c\u6bcf\u4e2a\u78c1\u76d8\u4e00\u4e2a\u961f\u5217\uff0c\u5982\u679c\u78c1\u76d8\u652f\u6301\u5e76\u884c N \u4e2a\u961f\u5217\uff0c\u5219\u4e5f\u4f1a\u521b\u5efa N \u4e2a\u961f\u5217\u3002\u5728 IO \u8bf7\u6c42\u4ece Software queues \u63d0\u4ea4\u5230 Hardware Dispatch Queues \u7684\u8fc7\u7a0b\u4e2d\u662f\u9700\u8981\u52a0\u9501\u7684\u3002\u7406\u8bba\u4e0a\uff0c\u591a\u961f\u5217\u7684\u67b6\u6784\u7684\u6548\u7387\u6700\u5dee\u4e5f\u53ea\u662f\u8ddf\u5355\u961f\u5217\u67b6\u6784\u6301\u5e73\u3002 \u67e5\u770b\u5f53\u524d\u8bbe\u5907,\u6bd4\u5982/dev/sda \u7684 IO \u8c03\u5ea6\u7b97\u6cd5\u67e5\u770b cat /sys/block/sda/queue/scheduler debian 10 \u865a\u62df\u673a Debian 10 \u7269\u7406\u673a \u9002\u5f53\u52a0\u5927 request queue \u7684\u957f\u5ea6 /sys/block/sda/queue/nr_requests (\u5757\u5c42\u6700\u5927\u53ef\u4ee5\u7533\u8bf7\u7684 request \u6570\u91cf) /sys/block/sda/queue/read_ahead_kb (\u9884\u8bfb\u6700\u5927\u7684\u6570\u636e\u91cf) \u5757\u8bbe\u5907\u7684\u4f18\u5316 \u5982\u679c\u670d\u52a1\u5668\u51e0\u4e4e\u6ca1\u6709\u6389\u7535\u98ce\u9669\uff0c\u90a3\u4e48\u5efa\u8bae\u5f00\u542f Raid \u5361\u7684\u7f13\u5b58\u3001\u786c\u76d8\u672c\u8eab\u7684\u7f13\u5b58. \u6d89\u53ca\u5230\u547d\u4ee4\u5de5\u5177\u4e0d\u5c11, \u4f8b\u5982\u670d\u52a1\u5668\u5382\u5546\u63d0\u4f9b\u7684 Raid \u5361\u64cd\u4f5c\u5de5\u5177. \u53c2\u8003\u6587\u7ae0 \u6587\u7ae0 1 \u6587\u7ae0 2 Linux \u5757\u5c42 IO \u5b50\u7cfb\u7edf\uff5c\u6700\u6838\u5fc3\u7684\u903b\u8f91\u662f\u4ec0\u4e48 \u7ecf\u5178 IO \u6a21\u5f0f\u548c io_uring 1 \u4e94\u79cd Unix I/O \u6a21\u5f0f \u5728\u5e38\u89c1\u7684 unix io \u8bed\u4e49\u4e0b\uff0c\u6211\u4eec\u7684\u4e00\u6b21 I/O \u9700\u8981\u7ecf\u8fc7\u4e24\u4e2a\u9636\u6bb5(phase)\uff1a \u6570\u636e\u7b49\u5f85\uff1a\u7b49\u5f85\u6570\u636e\u3001\u8bbe\u5907\u7b49\u4e0e\u672c\u6b21 IO \u76f8\u5173\u7684\u6a21\u5757 ready\uff1b \u6570\u636e\u4f20\u8f93\uff1a\u5c06\u6570\u636e\u5728\u5185\u6838\u6001\u548c\u7528\u6237\u6001\u4e2d\u4ea4\u6362\u3002 \u800c\u6839\u636e\u8fd9\u4e24\u4e2a\u9636\u6bb5\u5904\u7406\u7684\u65b9\u5f0f\u4e0d\u540c\uff0c\u6211\u4eec\u603b\u8ba1\u6709\u4e0d\u540c\u7684\u4e94\u79cd I/O \u6a21\u5f0f\u3002\u4e0b\u9762\u7684\u56fe\u662f\u57fa\u4e8e\u4ece socket \u7b49\u5f85\u5e76\u8bfb\u53d6\u6570\u636e\u7684\u573a\u666f\u5bf9\u4e94\u79cd I/O \u6a21\u5f0f\u7684\u6bd4\u8f83\u3002 \u8fd9\u91cc\uff0c\u6211\u4eec\u4ec5\u63a2\u8ba8\u4e09\u4e2a\u91cd\u8981\u7684 I/O \u6a21\u578b\uff1a \u963b\u585e I/O\uff1a\u4e00\u6b21 syscall\uff0c\u53ea\u80fd\u7b49\u5f85\u4e00\u4e2a fd\uff0c\u4ece\u521d\u59cb\u5316\u5c31\u7b49\u5f85\u5230\u5b8c\u6210\u540e\u8fd4\u56de\uff0c\u6a2a\u8de8\u4e24\u4e2a\u9636\u6bb5\u3002 \u963b\u585e I/O \u591a\u8def\u590d\u7528\uff1a\u591a\u4e2a syscall\uff0c\u80fd\u7b49\u5f85\u591a\u4e2a fd\uff0c\u5176\u4e2d \u7b49\u5f85\u9636\u6bb5 select/poll\uff1a\u5c06\u611f\u5174\u8da3\u7684 fd \u63d0\u4f9b\u7ed9 select\uff0c\u5f53\u4efb\u610f\u4e00\u4e2a fd \u7684\u72b6\u6001\u5c31\u7eea\u65f6\uff08\u53ef\u80fd\u4e5f\u4f1a\u6709\u591a\u4e2a\u5c31\u7eea\uff09\uff0c\u626b\u63cf\u6ce8\u518c\u7684 fd \u5217\u8868\u67e5\u770b\u54ea\u4e9b\u53ef\u4ee5\u8bfb\u53d6\uff0c\u4e00\u4e2a syscall\uff1b epoll\uff1a\u5c06\u611f\u5174\u8da3\u7684 fd \u6ce8\u518c\u5230\u4e8b\u4ef6\u5217\u8868\u4e2d\uff081 syscall\uff09\uff0c\u4e4b\u540e\u4f7f\u7528 epoll_wait \u7b49\u5f85\u5185\u6838\u901a\u77e5\u4e8b\u4ef6\u5df2\u5b8c\u6210\uff081 syscall\uff09\uff1b \u4f20\u8f93\u9636\u6bb5\uff1a\u5c06\u6570\u636e copy \u56de\u7528\u6237\u6001\uff0c\u4e00\u4e2a syscall\u3002 \u5f02\u6b65 I/O\uff1a\u4e00\u6b21 syscall\uff0c\u53ea\u80fd\u64cd\u4f5c\u4e00\u4e2a fd\uff0c\u6a2a\u8de8\u4e24\u4e2a\u9636\u6bb5\uff0c\u5f53\u4e8b\u4ef6\u5b8c\u6210\u65f6\uff0c\u5df2\u7ecf\u62ff\u5230\u4e86\u9700\u8981\u7684\u6570\u636e\u3002 \u6982\u5ff5\u533a\u5206\uff1a \u963b\u585e & \u540c\u6b65\uff1a\u6267\u884c\u67d0\u4e2a\u64cd\u4f5c\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u7b49\u5f85\u8d44\u6e90\u5c31\u7eea\uff08\u51fd\u6570\u8fd4\u56de\uff09\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6211\u4eec\u505a\u4e0d\u4e86\u5176\u4ed6\u64cd\u4f5c\uff1b \u975e\u963b\u585e\uff1a\u6267\u884c\u8fd9\u4e2a\u64cd\u4f5c\u65f6\uff0c\u8d44\u6e90\u8fd8\u6ca1\u5c31\u7eea\u7684\u72b6\u6001\u4e0b\u6211\u4eec\u4e0d\u9700\u8981\u7b49\u5f85\uff08\u51fd\u6570\u7acb\u5373\u8fd4\u56de\uff09\uff0c\u4f46\u662f\u6211\u4eec\u9700\u8981\u4e3b\u52a8\u68c0\u67e5\u8d44\u6e90\u662f\u5426\u5c31\u7eea\uff08\u4e3b\u52a8\u8f6e\u8be2 or etc.\uff09\uff1b \u5f02\u6b65\uff1a\u6267\u884c\u64cd\u4f5c\u65f6\u6211\u4eec\u4e0d\u9700\u8981\u7b49\u5f85\uff08\u51fd\u6570\u7acb\u5373\u8fd4\u56de\uff09\uff0c\u64cd\u4f5c\u88ab\u540e\u53f0 worker \u6267\u884c\uff0c\u6210\u529f\u540e\u6211\u4eec\u83b7\u5f97\u63d0\u9192\uff08\u56de\u8c03\u51fd\u6570 or etc.\uff09\u3002 \u53ef\u4ee5\u53c2\u8003 https://stackoverflow.com/questions/2625493/asynchronous-and-non-blocking-calls-also-between-blocking-and-synchronous\u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u4e0a\u9762\u7684\u524d\u51e0\u79cd I/O \u6a21\u578b\u91cc\u9762\u90fd\u5bf9\u7b49\u5f85\u9636\u6bb5\u4f5c\u51fa\u4e86\u5404\u79cd\u5404\u6837\u7684\u4f18\u5316\uff0c\u800c\u5176\u4e2d epoll \u4e5f\u6210\u4e3a\u4e86\u8fd1 10 \u5e74 Linux I/O \u7684\u6700\u4f73\u9009\u62e9\u3002\u5b9e\u9645\u4e0a\uff0c\u5728\u6570\u636e\u590d\u5236\u9636\u6bb5\uff0c\u6700\u8fd1 20 \u5e74\u5185\u6838\u4e5f\u8fdb\u884c\u4e86\u591a\u4e2a\u5c42\u6b21\u7684\u4f18\u5316\uff0c\u6838\u5fc3\u76ee\u7684\u662f\u4e3a\u4e86\u5c3d\u53ef\u80fd\u505a\u5230\u96f6\u62f7\u8d1d\u2014\u2014\u8ba9\u6570\u636e\u76f4\u8fbe\u7528\u6237\u6001\u3002\u5176\u4e2d\u6d89\u53ca\u5230\u7684\u591a\u79cd\u6280\u672f\u548c\u624b\u6bb5\u4e0d\u662f\u672c\u6b21\u5206\u4eab\u7684\u91cd\u70b9\uff0c\u6309\u4e0b\u4e0d\u8868\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u641c\u7d22\u5173\u952e\u8bcd Zero-copy\uff0cDMA\uff0cRDMA \u7b49\u7b49\u3002 2 io_uring \u548b\u5de5\u4f5c\u7684 io_uring: io with user ring buffer \u901a\u8fc7\u4e24\u4e2a Ring buffer \u6765\u548c\u5185\u6838\u901a\u4fe1 Submission/Completion Queue\uff08SQ/CQ\uff09\uff1aI/O \u8bf7\u6c42\u548c\u54cd\u5e94\u961f\u5217 Submission/Completion Queue Entry\uff08SQE/CQE\uff09\uff1a\u4e24\u4e2a\u961f\u5217\u4e2d\u7684\u5177\u4f53\u5bf9\u8c61\u7c7b\u578b \u751f\u4ea7\u8bf7\u6c42\u548c\u6d88\u8d39\u6570\u636e\u4e0d\u9700\u8981 syscall \u76f4\u63a5\u8bfb\u5199 SQ \u548c CQ \u5373\u53ef\uff0c\u4e0d\u9700\u8981\u901a\u8fc7 syscall \u6765\u6ce8\u518c or \u6d88\u8d39\uff1b \u901a\u8fc7\u5185\u5b58\u8bfb\u5199\u5c4f\u969c or atomic \u64cd\u4f5c\u6765\u8ba9\u4e24\u4fa7\u611f\u77e5\u65b0\u7684 entry \u6dfb\u52a0\u548c\u6d88\u8d39\uff1b \u7528\u6237 mmap \u7533\u8bf7\u5185\u5b58\uff0c\u4fdd\u8bc1 Ring 3 \u6743\u9650\u53ef\u8bfb\u5199\u3002","title":"\u7b2c\u4e8c\u7bc7 Linux IO\u6808\u603b\u7ed3"},{"location":"chapter_5/2_io_stack/#_1","text":"\u672c\u7bc7\u6587\u6863\u68b3\u7406 Linux IO \u6808","title":"\u6982\u8ff0"},{"location":"chapter_5/2_io_stack/#io","text":"\u4e0a\u8ff0\u4e24\u4e2a\u56fe\u5177\u4f53\u5dee\u5f02\u662f PageCache \u7684\u5177\u4f53\u4f4d\u7f6e\uff0c\u4e2a\u4eba\u66f4\u52a0\u503e\u5411\u4e8e\u7b2c\u4e8c\u5e45\u56fe.","title":"IO \u6808\u603b\u4f53\u8ba4\u77e5"},{"location":"chapter_5/2_io_stack/#_2","text":"\u5e93\u51fd\u6570\u7f13\u5b58, \u628a\u591a\u6b21 open \u6216\u8005 write \u8c03\u7528\u5408\u5e76\u4e3a\u4e00\u6b21, \u4f8b\u5982 c \u8bed\u8a00\u7684 stdio \u5e93\uff0c\u4ee5\u51cf\u5c11\u771f\u6b63\u7684 System Call \u6b21\u6570\u4e3a\u76ee\u7684","title":"\u7528\u6237\u7a7a\u95f4"},{"location":"chapter_5/2_io_stack/#vfs","text":"VFS \u5c42\u7684\u4f5c\u7528: VFS \u662f\u4e00\u4e2a\u62bd\u8c61\u5c42,\u5176\u5411\u4e0a\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684\u6587\u4ef6\u8bbf\u95ee\u63a5\u53e3,\u800c\u5411\u4e0b\u5219\u517c\u5bb9\u4e86\u5404\u79cd\u4e0d\u540c\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\u4e0d\u4ec5\u4ec5\u662f\u8bf8\u5982 Ext2\u3001Ext4\u3001XFS \u548c Btrfs \u7b49\u5e38\u89c4\u610f\u4e49\u4e0a\u7684\u6587\u4ef6\u7cfb\u7edf,\u8fd8\u5305\u62ec\u4f2a\u6587\u4ef6\u7cfb\u7edf\u548c\u8bbe\u5907\u7b49\u7b49\u5185\u5bb9.","title":"VFS \u5c42"},{"location":"chapter_5/2_io_stack/#_3","text":"\u6587\u4ef6\u7cfb\u7edf\u5c42\u7684\u4f18\u5316\u5305\u62ec 2 \u5757: 1 \u683c\u5f0f\u5316\u65f6\u6839\u636e\u4e1a\u52a1\u573a\u666f\u9009\u62e9 block \u5927\u5c0f\u548c inode \u6570\u91cf 2 \u4f7f\u7528\u4e0d\u540c\u7684 mount option(\u6302\u8f7d\u53c2\u6570)\u548c\u5408\u7406\u7684\u65e5\u5fd7\u8bb0\u5f55, \u6765\u8d34\u5408\u4e1a\u52a1\u573a\u666f. \u5982\u679c\u4e1a\u52a1\u8981\u6c42\u9ad8\u6027\u80fd, \u90a3\u4e48\u5c3d\u53ef\u80fd\u591a\u5229\u7528\u7f13\u5b58. \u5982\u679c\u4e1a\u52a1\u8981\u6c42\u6570\u636e\u9ad8\u5b89\u5168, \u90a3\u4e48\u5c3d\u53ef\u80fd\u628a\u6570\u636e\u843d\u5730\u5230\u5757\u8bbe\u5907.","title":"\u6587\u4ef6\u7cfb\u7edf\u5c42"},{"location":"chapter_5/2_io_stack/#ext4","text":"\u53c2\u8003 \u5e38\u7528\u7684\u6302\u8f7d\u53c2\u6570: data \u3001 noatime \u3001 nobarrier \u3001 delalloc \u3001 inode_readahead_blks \u3001 commit \u5176\u4e2d data \u5c31\u662f\u4e0b\u9762\u4e00\u8282\u4f1a\u8bb2\u89e3\u7684\u65e5\u5fd7\u6a21\u5f0f","title":"ext4 \u6587\u4ef6\u7cfb\u7edf\u5b8c\u6574\u7684\u6302\u8f7d\u53c2\u6570"},{"location":"chapter_5/2_io_stack/#ext4_1","text":"ext4 \u6709 3 \u79cd\u65e5\u5fd7\u6a21\u5f0f\uff0c\u5206\u522b\u662f ordered\uff0cwriteback\uff0cjournal\u3002\u4ed6\u4eec\u7684\u5dee\u522b\u7f51\u4e0a\u6709\u5f88\u591a\u8d44\u6599\uff0c\u6211\u7b80\u5355\u4ecb\u7ecd\u4e0b\uff1a jorunal\uff1a\u628a\u5143\u6570\u636e\u4e0e\u6570\u636e\u4e00\u5e76\u5199\u5165\u5230\u65e5\u5fd7\u5757\u3002\u6027\u80fd\u5dee\u4e0d\u591a\u6298\u534a\uff0c\u56e0\u4e3a\u6570\u636e\u5199\u4e86\u4e24\u6b21\uff0c\u4f46\u6700\u5b89\u5168 writeback: \u628a\u5143\u6570\u636e\u5199\u5165\u65e5\u5fd7\u5757\uff0c\u6570\u636e\u4e0d\u5199\u5165\u65e5\u5fd7\u5757\uff0c\u4f46\u4e0d\u4fdd\u8bc1\u6570\u636e\u5148\u843d\u76d8\u3002\u6027\u80fd\u6700\u9ad8\uff0c\u4f46\u7531\u4e8e\u4e0d\u4fdd\u8bc1\u5143\u6570\u636e\u4e0e\u6570\u636e\u7684\u987a\u5e8f\uff0c\u4e5f\u662f\u6389\u7535\u6700\u4e0d\u5b89\u5168\u7684 ordered\uff1a\u4e0e writeback \u76f8\u4f3c\uff0c\u4f46\u4f1a\u4fdd\u8bc1\u6570\u636e\u5148\u843d\u76d8\uff0c\u518d\u662f\u5143\u6570\u636e\u3002\u6298\u4e2d\u6027\u80fd\u4ee5\u4fdd\u8bc1\u8db3\u591f\u7684\u5b89\u5168\uff0c\u8fd9\u662f\u5927\u591a\u6570 PC \u4e0a\u63a8\u8350\u7684\u9ed8\u8ba4\u7684\u6a21\u5f0f","title":"ext4 \u6587\u4ef6\u7cfb\u7edf\u7684\u65e5\u5fd7\u6a21\u5f0f"},{"location":"chapter_5/2_io_stack/#page-cache","text":"\u9875\u7f13\u5b58\u5728 VFS \u4e0e\u5177\u4f53\u6587\u4ef6\u7cfb\u7edf\u4e4b\u95f4 , \u4e3a\u4e86\u63d0\u9ad8 IO \u6027\u80fd\uff0c\u51cf\u5c11\u771f\u5b9e\u7684\u4ece\u78c1\u76d8\u8bfb\u5199\u7684\u6b21\u6570\uff0cLinux \u5185\u6838\u8bbe\u8ba1\u4e86\u4e00\u5c42\u5185\u5b58\u7f13\u5b58\uff0c\u628a\u78c1\u76d8\u6570\u636e\u7f13\u5b58\u5230\u5185\u5b58\u4e2d\u3002\u7531\u4e8e\u5185\u5b58\u4ee5 4K \u5927\u5c0f\u7684 \u9875 \u4e3a\u5355\u4f4d\u7ba1\u7406\uff0c\u78c1\u76d8\u6570\u636e\u4e5f\u4ee5\u9875\u4e3a\u5355\u4f4d\u7f13\u5b58\uff0c\u56e0\u6b64\u4e5f\u79f0\u4e3a \u9875\u7f13\u5b58 \u3002\u5728\u6bcf\u4e2a\u7f13\u5b58 \u9875 \u4e2d\uff0c\u90fd\u5305\u542b\u4e86\u90e8\u5206\u78c1\u76d8\u4fe1\u606f\u7684\u526f\u672c\u3002 \u5bf9\u4e8e\u8bfb\u64cd\u4f5c, \u5982\u679c\u56e0\u4e3a\u4e4b\u524d\u8bfb\u8fc7\u6216\u8005\u88ab\u9884\u8bfb\u52a0\u8f7d\u8fdb\u6765\uff0c\u800c\u672c\u6b21\u8981\u8bfb\u53d6\u6570\u636e\u521a\u597d\u5728\u7f13\u5b58\u4e2d\u547d\u4e2d\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u4ece\u7f13\u5b58\u4e2d\u8bfb\u53d6\uff0c\u4e0d\u9700\u8981\u6df1\u5165\u5230\u78c1\u76d8\u3002 \u5bf9\u4e8e\u5199\u64cd\u4f5c, \u4e0d\u7ba1\u662f \u540c\u6b65\u5199 \u8fd8\u662f \u5f02\u6b65\u5199 \uff0c\u90fd\u4f1a\u628a\u6570\u636e copy \u5230\u7f13\u5b58\uff0c\u5dee\u522b\u5728\u4e8e\u5f02\u6b65\u5199\u53ea\u662f copy \u4e14\u628a\u9875\u6807\u8bc6\u810f\u540e\u76f4\u63a5\u8fd4\u56de\uff0c\u800c\u540c\u6b65\u5199\u8fd8\u4f1a\u8c03\u7528\u7c7b\u4f3c fsync()\u7684\u64cd\u4f5c\u7b49\u5f85\u56de\u5199. \u5f02\u6b65\u5199 \u4ea7\u751f\u7684 \u810f\u6570\u636e \u4f1a\u5728 \u5408\u9002 \u7684\u65f6\u5019\u88ab\u5185\u6838\u5de5\u4f5c\u961f\u5217 writeback \u8fdb\u7a0b\u56de\u5237\u3002","title":"Page Cache"},{"location":"chapter_5/2_io_stack/#writeback-4","text":"\u5185\u6838\u53c2\u6570 \u9ed8\u8ba4\u503c \u5355\u4f4d \u5907\u6ce8 /proc/sys/vm/dirty_writeback_centisecs 500 1/100 \u79d2 \u5b9a\u671f\u5524\u9192 writeback \u5185\u6838\u7ebf\u7a0b\uff0c\u56de\u5199\u810f\u9875 /proc/sys/vm/dirty_expire_centisecs 300 1/100 \u79d2 writeback \u7ebf\u7a0b\u88ab\u5524\u9192\u540e\uff0c\u5e76\u4e0d\u662f\u5199\u56de\u6240\u6709\u810f\u9875\uff0c\u800c\u662f\u53ea\u5199\u53d8\u810f\u8d85\u8fc7 dirty_expire_centisecs \u65f6\u95f4\u7684\u9875. /proc/sys/vm/dirty_background_ratio 10 \u6bd4\u4f8b\uff0c\u9ed8\u8ba4\u4e3a 10%\uff0c\u5f53\u810f\u9875\u6bd4\u4f8b\u8d85\u8fc7\u7cfb\u7edf\u6240\u6709 page \u6570\u91cf\u7684 10%\u65f6 \u5f53\u810f\u9875\u5360\u7cfb\u7edf\u5185\u5b58\u7684\u6bd4\u4f8b\u8d85\u8fc7/proc/sys/vm/dirty_background_ratio \u7684\u65f6\u5019\uff0cwrite \u7cfb\u7edf\u8c03\u7528\u4f1a\u5524\u9192 pdflush \u56de\u5199 dirty page,\u76f4\u5230\u810f\u9875\u6bd4\u4f8b\u4f4e\u4e8e/proc/sys/vm/dirty_background_ratio\uff0c\u4f46 write \u7cfb\u7edf\u8c03\u7528\u4e0d\u4f1a\u88ab\u963b\u585e\uff0c\u7acb\u5373\u8fd4\u56de\u3002 /proc/sys/vm/dirty_ratio 20 \u6bd4\u4f8b\uff0c\u9ed8\u8ba4\u4e3a 20%\uff0c\u5f53\u810f\u9875\u6570\u91cf\u5360\u7cfb\u7edf\u6240\u6709\u9875\u6570\u91cf\u6bd4\u4f8b\u8d85\u8fc7 20%\u65f6 write \u7cfb\u7edf\u8c03\u7528\u4f1a\u88ab\u963b\u585e\uff0cwriteback \u7ebf\u7a0b\u4f1a\u5de5\u4f5c\uff0c\u76f4\u5230\u810f\u9875\u5360\u6bd4\u4f4e\u4e8e/proc/sys/vm/dirty_ratio \u66f4\u591a\u53c2\u8003 \u5185\u6838\u5b98\u65b9\u6587\u6863","title":"\u5185\u6838 writeback \u7ebf\u7a0b\u7684 4 \u4e2a\u4e3b\u8981\u5185\u6838\u53c2\u6570"},{"location":"chapter_5/2_io_stack/#io_1","text":"\u4ece\u7cfb\u7edf\u8c03\u7528\u7684\u63a5\u53e3\u518d\u5f80\u4e0b\uff0cLinux \u4e0b\u7684 IO \u6808\u81f4\u5927\u81f4\u6709\u4e09\u4e2a\u5c42\u6b21\uff1a \u6587\u4ef6\u7cfb\u7edf\u5c42\uff0c\u4ee5 write \u4e3a\u4f8b\uff0c\u5185\u6838\u62f7\u8d1d\u4e86 write \u53c2\u6570\u6307\u5b9a\u7684\u7528\u6237\u6001\u6570\u636e\u5230\u6587\u4ef6\u7cfb\u7edf Cache \u4e2d\uff0c\u5e76\u9002\u65f6\u5411\u4e0b\u5c42\u540c\u6b65 \u5757\u5c42\uff0c\u7ba1\u7406\u5757\u8bbe\u5907\u7684 IO \u961f\u5217\uff0c\u5bf9 IO \u8bf7\u6c42\u8fdb\u884c\u5408\u5e76\u3001\u6392\u5e8f\uff08\u8fd8\u8bb0\u5f97\u64cd\u4f5c\u7cfb\u7edf\u8bfe\u7a0b\u5b66\u4e60\u8fc7\u7684 IO \u8c03\u5ea6\u7b97\u6cd5\u5417\uff1f\uff09 \u8bbe\u5907\u5c42\uff0c\u901a\u8fc7 DMA \u4e0e\u5185\u5b58\u76f4\u63a5\u4ea4\u4e92\uff0c\u5b8c\u6210\u6570\u636e\u548c\u5177\u4f53\u8bbe\u5907\u4e4b\u95f4\u7684\u4ea4\u4e92 \u7ed3\u5408\u8fd9\u4e2a\u56fe\uff0c\u60f3\u60f3 Linux \u7cfb\u7edf\u7f16\u7a0b\u91cc\u7528\u5230\u7684 Buffered IO\u3001mmap\u3001Direct IO\uff0c\u8fd9\u4e9b\u673a\u5236\u600e\u4e48\u548c Linux IO \u6808\u8054\u7cfb\u8d77\u6765\u5462\uff1f\u4e0a\u9762\u7684\u56fe\u6709\u70b9\u590d\u6742\uff0c\u6211\u753b\u4e00\u5e45\u7b80\u56fe\uff0c\u628a\u8fd9\u4e9b\u673a\u5236\u6240\u5728\u7684\u4f4d\u7f6e\u6dfb\u52a0\u8fdb\u53bb\uff1a \u4ecb\u7ecd\u4e00\u4e0b\u4e09\u79cd IO \u6a21\u5f0f: Buffered IO: \u4f20\u7edf\u7684 Buffered IO \u4f7f\u7528 read \u8bfb\u53d6\u6587\u4ef6\u7684\u8fc7\u7a0b\uff1a \u4ece\u78c1\u76d8\u5230 Page Cache \u7b97\u7b2c\u4e00\u6b21\u7684\u8bdd\uff08 \u628a\u78c1\u76d8\u91cc\u7684\u5185\u5bb9\u8bfb\u53d6\u5230\u5c5e\u4e8e\u5185\u6838\u7a7a\u95f4\u7684 Struct Page \u4e2d \uff09\uff0c\u4ece Page Cache \u5230\u7528\u6237\u6001 buffer( \u628a\u5185\u6838\u7a7a\u95f4\u4e2d Struct Page \u7684\u5185\u5bb9\u8bfb\u53d6\u5230\u7528\u6237\u8fdb\u7a0b\u7a7a\u95f4\u7684 Struct Page \u4e2d ) \u5c31\u662f\u7b2c\u4e8c\u6b21\u4e86. \u5199\u64cd\u4f5c\u7684\u8bdd, \u662f\u5199\u5230 Page Cahce \u5c31\u8fd4\u56de, \u7136\u540e\u7b49\u5f85 writeback \u5185\u6838\u7ebf\u7a0b\u5237\u56de\u53bb. MMAP: \u76f4\u63a5\u628a Page Cache \u6620\u5c04\u5230\u4e86\u7528\u6237\u6001\u7684\u5730\u5740\u7a7a\u95f4\u91cc\u4e86\uff0c\u6240\u4ee5 mmap \u7684\u65b9\u5f0f\u8bfb\u6587\u4ef6\u662f\u6ca1\u6709\u7b2c\u4e8c\u6b21\u62f7\u8d1d\u8fc7\u7a0b\u7684. \u5982\u4f55\u5f00\u542f MMAP: \u4f7f\u7528 mmap \u7cfb\u7edf\u8c03\u7528. Direct IO: \u8fd9\u4e2a\u673a\u5236\u66f4\u72e0\uff0c\u76f4\u63a5\u8ba9\u7528\u6237\u6001\u548c\u5757 IO \u5c42\u5bf9\u63a5\uff0c\u76f4\u63a5\u653e\u5f03 Page Cache\uff0c\u4ece\u78c1\u76d8\u76f4\u63a5\u548c\u7528\u6237\u6001\u62f7\u8d1d\u6570\u636e. \u597d\u5904: \u5199\u64cd\u4f5c\u53ef\u4ee5\u76f4\u63a5\u5199\u5230\u5757 IO \u5c42. \u574f\u5904: \u8bfb\u64cd\u4f5c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e0d\u5982 Buffered IO\uff0c\u9664\u975e\u4f60\u5728\u7528\u6237\u6001\u81ea\u5df1\u6a21\u62df Buffered IO\uff0c\u505a\u7f13\u5b58. \u5982\u4f55\u5f00\u542f Direct IO: An application invokes direct I/O by opening a file with the O_DIRECT flag.","title":"IO \u64cd\u4f5c\u7684\u4e09\u79cd\u6a21\u5f0f"},{"location":"chapter_5/2_io_stack/#_4","text":"\u7528\u6237\u5c42\u6700\u591a\u5230\u8fbe \u901a\u7528\u5757\u5c42 , \u901a\u7528\u5757\u5c42 \u4ee5\u4e0b\u5fc5\u987b\u7531\u5185\u6838\u81ea\u884c\u63a7\u5236\u4e86. \u7528\u6237\u5c42\u5728 wirte \u7cfb\u7edf\u8c03\u7528\u65f6, \u4f7f\u7528 O_DIRECT \u6807\u8bb0, \u4f1a\u5f00\u542f Direct IO, \u4f46\u5149\u6709 Direct IO, \u4ecd\u7136\u53ea\u662f\u5199\u5230 \u901a\u7528\u5757\u5c42 , \u5982\u679c\u9700\u8981\u6570\u636e\u7edd\u4e0d\u4e22\u5931, \u90a3\u4e48\u8fd8\u8981\u52a0\u4e0a O_SYNC \u6807\u8bb0","title":"\u518d\u6765\u770b\u4e00\u5f20\u8be6\u7ec6\u7684\u56fe"},{"location":"chapter_5/2_io_stack/#bio","text":"\u4e3a\u4e0d\u540c\u8fdb\u7a0b\u6307\u5b9a\u4e0d\u540c\u7684 IO \u4f18\u5148\u7ea7. Linux supports I/O scheduling priorities and classes since 2.6.13 with the CFQ I/O scheduler. \u5e38\u7528\u7684 IO classess \u5305\u62ec: Idle \u3001 Best-effort \u3001 Realtime .","title":"BIO \u5c42\u7684\u4f18\u5316"},{"location":"chapter_5/2_io_stack/#request","text":"\u7535\u68af\u8c03\u5ea6\u7b97\u6cd5 Request \u961f\u5217\u4e2a\u6570\u3001\u9884\u8bfb\u6570\u636e\u5927\u5c0f","title":"Request \u5c42\u7684\u4f18\u5316"},{"location":"chapter_5/2_io_stack/#io_2","text":"\u7f51\u4e0a\u68c0\u7d22 IO\u8c03\u5ea6\u7b97\u6cd5 \uff0c\u5927\u91cf\u7684\u8d44\u6599\u90fd\u5728\u63cf\u8ff0 Deadline \uff0c CFQ \uff0c NOOP \u8fd9 3 \u79cd\u8c03\u5ea6\u7b97\u6cd5\uff0c\u5374\u6ca1\u6709\u5907\u6ce8\u8fd9\u53ea\u662f \u5355\u961f\u5217 \u4e0a\u9002\u7528\u7684\u8c03\u5ea6\u7b97\u6cd5\u3002\u5728\u6700\u65b0\u7684\u4ee3\u7801\u4e0a\uff08\u6211\u5206\u6790\u7684\u4ee3\u7801\u7248\u672c\u4e3a 5.7.0\uff09\uff0c\u5df2\u7ecf\u5b8c\u5168\u5207\u6362\u5230 multi-queue \u7684\u65b0\u67b6\u6784\u4e0a\u4e86\uff0c\u652f\u6301\u7684 IO \u8c03\u5ea6\u7b97\u6cd5\u5c31\u6210\u4e86 mq-deadline \uff0c BFQ \uff0c Kyber \uff0c none \u3002 \u5728\u300aLinux-storage-stack-diagram_v4.10\u300b \u5bf9 Block Layer \u7684\u63cf\u8ff0\u53ef\u4ee5\u5f62\u8c61\u9610\u8ff0\u5355\u961f\u5217\u4e0e\u591a\u961f\u5217\u7684\u5dee\u5f02\u3002 \u5355\u961f\u5217\u7684\u67b6\u6784\uff0c\u4e00\u4e2a\u5757\u8bbe\u5907\u53ea\u6709\u4e00\u4e2a\u5168\u5c40\u961f\u5217\uff0c\u6240\u6709\u8bf7\u6c42\u90fd\u8981\u5f80\u8fd9\u4e2a\u961f\u5217\u91cc\u9762\u585e\uff0c\u8fd9\u5728\u591a\u6838\u9ad8\u5e76\u53d1\u7684\u60c5\u51b5\u4e0b\uff0c\u5c24\u5176\u50cf\u670d\u52a1\u5668\u52a8\u5219 32 \u4e2a\u6838\u7684\u60c5\u51b5\u4e0b\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u4e92\u65a5\u800c\u52a0\u7684\u9501\u5c31\u5bfc\u81f4\u4e86\u975e\u5e38\u5927\u7684\u5f00\u9500\u3002\u6b64\u5916\uff0c\u5982\u679c\u78c1\u76d8\u652f\u6301\u591a\u961f\u5217\u5e76\u884c\u5904\u7406\uff0c\u5355\u961f\u5217\u7684\u6a21\u578b\u4e0d\u80fd\u5145\u5206\u53d1\u6325\u5176\u4f18\u8d8a\u7684\u6027\u80fd\u3002 \u591a\u961f\u5217\u7684\u67b6\u6784\u4e0b\uff0c\u521b\u5efa\u4e86 Software queues \u548c Hardware dispatch queues \u4e24\u7ea7\u961f\u5217\u3002Software queues \u662f\u6bcf\u4e2a CPU core \u4e00\u4e2a\u961f\u5217\uff0c\u4e14\u5728\u5176\u4e2d\u5b9e\u73b0 IO \u8c03\u5ea6\u3002\u7531\u4e8e \u6bcf\u4e2a CPU \u4e00\u4e2a\u5355\u72ec\u961f\u5217\uff0c\u56e0\u6b64\u4e0d\u5b58\u5728\u9501\u7ade\u4e89\u95ee\u9898 \u3002Hardware Dispatch Queues \u7684\u6570\u91cf\u8ddf\u786c\u4ef6\u60c5\u51b5\u6709\u5173\uff0c\u6bcf\u4e2a\u78c1\u76d8\u4e00\u4e2a\u961f\u5217\uff0c\u5982\u679c\u78c1\u76d8\u652f\u6301\u5e76\u884c N \u4e2a\u961f\u5217\uff0c\u5219\u4e5f\u4f1a\u521b\u5efa N \u4e2a\u961f\u5217\u3002\u5728 IO \u8bf7\u6c42\u4ece Software queues \u63d0\u4ea4\u5230 Hardware Dispatch Queues \u7684\u8fc7\u7a0b\u4e2d\u662f\u9700\u8981\u52a0\u9501\u7684\u3002\u7406\u8bba\u4e0a\uff0c\u591a\u961f\u5217\u7684\u67b6\u6784\u7684\u6548\u7387\u6700\u5dee\u4e5f\u53ea\u662f\u8ddf\u5355\u961f\u5217\u67b6\u6784\u6301\u5e73\u3002","title":"\u5173\u4e8e IO \u8c03\u5ea6\u7b97\u6cd5\u7684\u5355\u961f\u5217\u548c\u591a\u961f\u5217"},{"location":"chapter_5/2_io_stack/#devsda-io","text":"cat /sys/block/sda/queue/scheduler debian 10 \u865a\u62df\u673a Debian 10 \u7269\u7406\u673a","title":"\u67e5\u770b\u5f53\u524d\u8bbe\u5907,\u6bd4\u5982/dev/sda \u7684 IO \u8c03\u5ea6\u7b97\u6cd5\u67e5\u770b"},{"location":"chapter_5/2_io_stack/#request-queue","text":"/sys/block/sda/queue/nr_requests (\u5757\u5c42\u6700\u5927\u53ef\u4ee5\u7533\u8bf7\u7684 request \u6570\u91cf) /sys/block/sda/queue/read_ahead_kb (\u9884\u8bfb\u6700\u5927\u7684\u6570\u636e\u91cf)","title":"\u9002\u5f53\u52a0\u5927 request queue \u7684\u957f\u5ea6"},{"location":"chapter_5/2_io_stack/#_5","text":"\u5982\u679c\u670d\u52a1\u5668\u51e0\u4e4e\u6ca1\u6709\u6389\u7535\u98ce\u9669\uff0c\u90a3\u4e48\u5efa\u8bae\u5f00\u542f Raid \u5361\u7684\u7f13\u5b58\u3001\u786c\u76d8\u672c\u8eab\u7684\u7f13\u5b58. \u6d89\u53ca\u5230\u547d\u4ee4\u5de5\u5177\u4e0d\u5c11, \u4f8b\u5982\u670d\u52a1\u5668\u5382\u5546\u63d0\u4f9b\u7684 Raid \u5361\u64cd\u4f5c\u5de5\u5177.","title":"\u5757\u8bbe\u5907\u7684\u4f18\u5316"},{"location":"chapter_5/2_io_stack/#_6","text":"\u6587\u7ae0 1 \u6587\u7ae0 2 Linux \u5757\u5c42 IO \u5b50\u7cfb\u7edf\uff5c\u6700\u6838\u5fc3\u7684\u903b\u8f91\u662f\u4ec0\u4e48","title":"\u53c2\u8003\u6587\u7ae0"},{"location":"chapter_5/2_io_stack/#io-io_uring","text":"","title":"\u7ecf\u5178 IO \u6a21\u5f0f\u548c io_uring"},{"location":"chapter_5/2_io_stack/#1-unix-io","text":"\u5728\u5e38\u89c1\u7684 unix io \u8bed\u4e49\u4e0b\uff0c\u6211\u4eec\u7684\u4e00\u6b21 I/O \u9700\u8981\u7ecf\u8fc7\u4e24\u4e2a\u9636\u6bb5(phase)\uff1a \u6570\u636e\u7b49\u5f85\uff1a\u7b49\u5f85\u6570\u636e\u3001\u8bbe\u5907\u7b49\u4e0e\u672c\u6b21 IO \u76f8\u5173\u7684\u6a21\u5757 ready\uff1b \u6570\u636e\u4f20\u8f93\uff1a\u5c06\u6570\u636e\u5728\u5185\u6838\u6001\u548c\u7528\u6237\u6001\u4e2d\u4ea4\u6362\u3002 \u800c\u6839\u636e\u8fd9\u4e24\u4e2a\u9636\u6bb5\u5904\u7406\u7684\u65b9\u5f0f\u4e0d\u540c\uff0c\u6211\u4eec\u603b\u8ba1\u6709\u4e0d\u540c\u7684\u4e94\u79cd I/O \u6a21\u5f0f\u3002\u4e0b\u9762\u7684\u56fe\u662f\u57fa\u4e8e\u4ece socket \u7b49\u5f85\u5e76\u8bfb\u53d6\u6570\u636e\u7684\u573a\u666f\u5bf9\u4e94\u79cd I/O \u6a21\u5f0f\u7684\u6bd4\u8f83\u3002 \u8fd9\u91cc\uff0c\u6211\u4eec\u4ec5\u63a2\u8ba8\u4e09\u4e2a\u91cd\u8981\u7684 I/O \u6a21\u578b\uff1a \u963b\u585e I/O\uff1a\u4e00\u6b21 syscall\uff0c\u53ea\u80fd\u7b49\u5f85\u4e00\u4e2a fd\uff0c\u4ece\u521d\u59cb\u5316\u5c31\u7b49\u5f85\u5230\u5b8c\u6210\u540e\u8fd4\u56de\uff0c\u6a2a\u8de8\u4e24\u4e2a\u9636\u6bb5\u3002 \u963b\u585e I/O \u591a\u8def\u590d\u7528\uff1a\u591a\u4e2a syscall\uff0c\u80fd\u7b49\u5f85\u591a\u4e2a fd\uff0c\u5176\u4e2d \u7b49\u5f85\u9636\u6bb5 select/poll\uff1a\u5c06\u611f\u5174\u8da3\u7684 fd \u63d0\u4f9b\u7ed9 select\uff0c\u5f53\u4efb\u610f\u4e00\u4e2a fd \u7684\u72b6\u6001\u5c31\u7eea\u65f6\uff08\u53ef\u80fd\u4e5f\u4f1a\u6709\u591a\u4e2a\u5c31\u7eea\uff09\uff0c\u626b\u63cf\u6ce8\u518c\u7684 fd \u5217\u8868\u67e5\u770b\u54ea\u4e9b\u53ef\u4ee5\u8bfb\u53d6\uff0c\u4e00\u4e2a syscall\uff1b epoll\uff1a\u5c06\u611f\u5174\u8da3\u7684 fd \u6ce8\u518c\u5230\u4e8b\u4ef6\u5217\u8868\u4e2d\uff081 syscall\uff09\uff0c\u4e4b\u540e\u4f7f\u7528 epoll_wait \u7b49\u5f85\u5185\u6838\u901a\u77e5\u4e8b\u4ef6\u5df2\u5b8c\u6210\uff081 syscall\uff09\uff1b \u4f20\u8f93\u9636\u6bb5\uff1a\u5c06\u6570\u636e copy \u56de\u7528\u6237\u6001\uff0c\u4e00\u4e2a syscall\u3002 \u5f02\u6b65 I/O\uff1a\u4e00\u6b21 syscall\uff0c\u53ea\u80fd\u64cd\u4f5c\u4e00\u4e2a fd\uff0c\u6a2a\u8de8\u4e24\u4e2a\u9636\u6bb5\uff0c\u5f53\u4e8b\u4ef6\u5b8c\u6210\u65f6\uff0c\u5df2\u7ecf\u62ff\u5230\u4e86\u9700\u8981\u7684\u6570\u636e\u3002","title":"1 \u4e94\u79cd Unix I/O \u6a21\u5f0f"},{"location":"chapter_5/2_io_stack/#_7","text":"\u963b\u585e & \u540c\u6b65\uff1a\u6267\u884c\u67d0\u4e2a\u64cd\u4f5c\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u7b49\u5f85\u8d44\u6e90\u5c31\u7eea\uff08\u51fd\u6570\u8fd4\u56de\uff09\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6211\u4eec\u505a\u4e0d\u4e86\u5176\u4ed6\u64cd\u4f5c\uff1b \u975e\u963b\u585e\uff1a\u6267\u884c\u8fd9\u4e2a\u64cd\u4f5c\u65f6\uff0c\u8d44\u6e90\u8fd8\u6ca1\u5c31\u7eea\u7684\u72b6\u6001\u4e0b\u6211\u4eec\u4e0d\u9700\u8981\u7b49\u5f85\uff08\u51fd\u6570\u7acb\u5373\u8fd4\u56de\uff09\uff0c\u4f46\u662f\u6211\u4eec\u9700\u8981\u4e3b\u52a8\u68c0\u67e5\u8d44\u6e90\u662f\u5426\u5c31\u7eea\uff08\u4e3b\u52a8\u8f6e\u8be2 or etc.\uff09\uff1b \u5f02\u6b65\uff1a\u6267\u884c\u64cd\u4f5c\u65f6\u6211\u4eec\u4e0d\u9700\u8981\u7b49\u5f85\uff08\u51fd\u6570\u7acb\u5373\u8fd4\u56de\uff09\uff0c\u64cd\u4f5c\u88ab\u540e\u53f0 worker \u6267\u884c\uff0c\u6210\u529f\u540e\u6211\u4eec\u83b7\u5f97\u63d0\u9192\uff08\u56de\u8c03\u51fd\u6570 or etc.\uff09\u3002 \u53ef\u4ee5\u53c2\u8003 https://stackoverflow.com/questions/2625493/asynchronous-and-non-blocking-calls-also-between-blocking-and-synchronous\u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u4e0a\u9762\u7684\u524d\u51e0\u79cd I/O \u6a21\u578b\u91cc\u9762\u90fd\u5bf9\u7b49\u5f85\u9636\u6bb5\u4f5c\u51fa\u4e86\u5404\u79cd\u5404\u6837\u7684\u4f18\u5316\uff0c\u800c\u5176\u4e2d epoll \u4e5f\u6210\u4e3a\u4e86\u8fd1 10 \u5e74 Linux I/O \u7684\u6700\u4f73\u9009\u62e9\u3002\u5b9e\u9645\u4e0a\uff0c\u5728\u6570\u636e\u590d\u5236\u9636\u6bb5\uff0c\u6700\u8fd1 20 \u5e74\u5185\u6838\u4e5f\u8fdb\u884c\u4e86\u591a\u4e2a\u5c42\u6b21\u7684\u4f18\u5316\uff0c\u6838\u5fc3\u76ee\u7684\u662f\u4e3a\u4e86\u5c3d\u53ef\u80fd\u505a\u5230\u96f6\u62f7\u8d1d\u2014\u2014\u8ba9\u6570\u636e\u76f4\u8fbe\u7528\u6237\u6001\u3002\u5176\u4e2d\u6d89\u53ca\u5230\u7684\u591a\u79cd\u6280\u672f\u548c\u624b\u6bb5\u4e0d\u662f\u672c\u6b21\u5206\u4eab\u7684\u91cd\u70b9\uff0c\u6309\u4e0b\u4e0d\u8868\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u641c\u7d22\u5173\u952e\u8bcd Zero-copy\uff0cDMA\uff0cRDMA \u7b49\u7b49\u3002","title":"\u6982\u5ff5\u533a\u5206\uff1a"},{"location":"chapter_5/2_io_stack/#2-io_uring","text":"io_uring: io with user ring buffer \u901a\u8fc7\u4e24\u4e2a Ring buffer \u6765\u548c\u5185\u6838\u901a\u4fe1 Submission/Completion Queue\uff08SQ/CQ\uff09\uff1aI/O \u8bf7\u6c42\u548c\u54cd\u5e94\u961f\u5217 Submission/Completion Queue Entry\uff08SQE/CQE\uff09\uff1a\u4e24\u4e2a\u961f\u5217\u4e2d\u7684\u5177\u4f53\u5bf9\u8c61\u7c7b\u578b \u751f\u4ea7\u8bf7\u6c42\u548c\u6d88\u8d39\u6570\u636e\u4e0d\u9700\u8981 syscall \u76f4\u63a5\u8bfb\u5199 SQ \u548c CQ \u5373\u53ef\uff0c\u4e0d\u9700\u8981\u901a\u8fc7 syscall \u6765\u6ce8\u518c or \u6d88\u8d39\uff1b \u901a\u8fc7\u5185\u5b58\u8bfb\u5199\u5c4f\u969c or atomic \u64cd\u4f5c\u6765\u8ba9\u4e24\u4fa7\u611f\u77e5\u65b0\u7684 entry \u6dfb\u52a0\u548c\u6d88\u8d39\uff1b \u7528\u6237 mmap \u7533\u8bf7\u5185\u5b58\uff0c\u4fdd\u8bc1 Ring 3 \u6743\u9650\u53ef\u8bfb\u5199\u3002","title":"2 io_uring \u548b\u5de5\u4f5c\u7684"},{"location":"chapter_5/3_zero_copy/","text":"\u6982\u8ff0 \u672c\u6587\u603b\u7ed3Linux 3\u79cd\u96f6\u62f7\u8d1d\u6280\u672f \u80cc\u666f\u77e5\u8bc6 \u8ba4\u8bc6DMA DMA \u6280\u672f\u5c31\u662f\u6211\u4eec\u5728\u4e3b\u677f\u4e0a\u653e\u4e00\u5757\u72ec\u7acb\u7684\u82af\u7247\u3002\u5728\u8fdb\u884c\u5185\u5b58\u548c I/O \u8bbe\u5907\u7684\u6570\u636e\u4f20\u8f93\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e0d\u518d\u901a\u8fc7 CPU \u6765\u63a7\u5236\u6570\u636e\u4f20\u8f93\uff0c\u800c\u76f4\u63a5\u901a\u8fc7 DMA \u63a7\u5236\u5668\uff08DMA Controller\uff0c\u7b80\u79f0 DMAC\uff09\u3002 \u8fd9\u5757\u82af\u7247\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u5b83\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u534f\u5904\u7406\u5668\uff08Co-Processor\uff09\u3002 \u96f6\u62f7\u8d1d\u6280\u672f \u96f6\u62f7\u8d1d\u6280\u672f\u662f\u4e00\u4e2a\u601d\u60f3\uff0c\u6307\u7684\u662f\u6307\u8ba1\u7b97\u673a\u6267\u884c\u64cd\u4f5c\u65f6\uff0cCPU \u4e0d\u9700\u8981\u5148\u5c06\u6570\u636e\u4ece\u67d0\u5904\u5185\u5b58\u590d\u5236\u5230\u53e6\u4e00\u4e2a\u7279\u5b9a\u533a\u57df\u3002 \u53ef\u89c1\uff0c\u96f6\u62f7\u8d1d\u7684\u7279\u70b9\u662f CPU \u4e0d\u5168\u7a0b\u8d1f\u8d23\u5185\u5b58\u4e2d\u7684\u6570\u636e\u5199\u5165\u5176\u4ed6\u7ec4\u4ef6\uff0cCPU \u4ec5\u4ec5\u8d77\u5230\u7ba1\u7406\u7684\u4f5c\u7528\u3002\u4f46\u6ce8\u610f\uff0c \u96f6\u62f7\u8d1d\u4e0d\u662f\u4e0d\u8fdb\u884c\u62f7\u8d1d\uff0c\u800c\u662f CPU \u4e0d\u518d\u5168\u7a0b\u8d1f\u8d23\u6570\u636e\u62f7\u8d1d\u65f6\u7684\u642c\u8fd0\u5de5\u4f5c \u3002\u5982\u679c\u6570\u636e\u672c\u8eab\u4e0d\u5728\u5185\u5b58\u4e2d\uff0c\u90a3\u4e48\u5fc5\u987b\u5148\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\u62f7\u8d1d\u5230\u5185\u5b58\u4e2d\uff08\u8fd9\u4e2a\u8fc7\u7a0b CPU \u53ef\u4ee5\u4e0d\u53c2\u4e0e\uff09\uff0c\u56e0\u4e3a\u6570\u636e\u53ea\u6709\u5728\u5185\u5b58\u4e2d\uff0c\u624d\u80fd\u88ab\u8f6c\u79fb\uff0c\u624d\u80fd\u88ab CPU \u76f4\u63a5\u8bfb\u53d6\u8ba1\u7b97\u3002 \u96f6\u62f7\u8d1d\u6280\u672f\u7684\u5177\u4f53\u5b9e\u73b0\u65b9\u5f0f\u6709\u5f88\u591a\uff0c\u4f8b\u5982\uff1a sendfile mmap \u76f4\u63a5 Direct I/O \u4e0d\u540c\u7684\u96f6\u62f7\u8d1d\u6280\u672f\u9002\u7528\u4e8e\u4e0d\u540c\u7684\u5e94\u7528\u573a\u666f\uff0c\u4e0b\u9762\u4f9d\u6b21\u8fdb\u884c sendfile\u3001mmap\u3001Direct I/O \u7684\u5206\u6790\u3002 \u4e0d\u8fc7\u51fa\u4e8e\u603b\u7ed3\u6027\u7684\u76ee\u7684\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u5148\u5bf9\u4e0b\u9762\u7684\u6280\u672f\u505a\u4e00\u4e2a\u524d\u77bb\u6027\u7684\u603b\u7ed3\u3002 DMA \u6280\u672f\u56de\u987e\uff1aDMA \u8d1f\u8d23\u5185\u5b58\u4e0e\u5176\u4ed6\u7ec4\u4ef6\u4e4b\u95f4\u7684\u6570\u636e\u62f7\u8d1d\uff0cCPU \u4ec5\u9700\u8d1f\u8d23\u7ba1\u7406\uff0c\u800c\u65e0\u9700\u8d1f\u8d23\u5168\u7a0b\u7684\u6570\u636e\u62f7\u8d1d\uff1b \u4f7f\u7528 page cache \u7684 zero copy\uff1a sendfile\uff1a\u4e00\u6b21\u4ee3\u66ff read/write \u7cfb\u7edf\u8c03\u7528\uff0c\u901a\u8fc7\u4f7f\u7528 DMA \u6280\u672f\u4ee5\u53ca\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5b9e\u73b0\u4e86 zero copy mmap\uff1a\u4ec5\u4ee3\u66ff read \u7cfb\u7edf\u8c03\u7528\uff0c\u5c06\u5185\u6838\u7a7a\u95f4\u5730\u5740\u6620\u5c04\u4e3a\u7528\u6237\u7a7a\u95f4\u5730\u5740\uff0cwrite \u64cd\u4f5c\u76f4\u63a5\u4f5c\u7528\u4e8e\u5185\u6838\u7a7a\u95f4\u3002\u901a\u8fc7 DMA \u6280\u672f\u4ee5\u53ca\u5730\u5740\u6620\u5c04\u6280\u672f\uff0c\u7528\u6237\u7a7a\u95f4\u4e0e\u5185\u6838\u7a7a\u95f4\u65e0\u987b\u6570\u636e\u62f7\u8d1d\uff0c\u5b9e\u73b0\u4e86 zero copy \u4e0d\u4f7f\u7528 page cache \u7684 Direct I/O\uff1a\u8bfb\u5199\u64cd\u4f5c\u76f4\u63a5\u5728\u78c1\u76d8\u4e0a\u8fdb\u884c\uff0c\u4e0d\u4f7f\u7528 page cache \u673a\u5236\uff0c\u901a\u5e38\u7ed3\u5408\u7528\u6237\u7a7a\u95f4\u7684\u7528\u6237\u7f13\u5b58\u4f7f\u7528\u3002\u901a\u8fc7 DMA \u6280\u672f\u76f4\u63a5\u4e0e\u78c1\u76d8/\u7f51\u5361\u8fdb\u884c\u6570\u636e\u4ea4\u4e92\uff0c\u5b9e\u73b0\u4e86 zero copy sendfile \u53d1\u9001\u6587\u4ef6 \u6211\u4eec\u5148\u6765\u56de\u5fc6\u4e00\u4e0b\uff0c\u670d\u52a1\u7aef\u53d1\u9001\u4e00\u4e2a\u6587\u4ef6\u7ed9\u5ba2\u6237\u7aef\u4e00\u822c\u9700\u8981\u8fdb\u884c\u4ec0\u4e48\u64cd\u4f5c\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u670d\u52a1\u7aef\u53d1\u9001\u4e00\u4e2a\u6587\u4ef6\u7ed9\u5ba2\u6237\u7aef\u7684\u6b65\u9aa4\u5982\u4e0b\uff1a \u9996\u5148\u9700\u8981\u8c03\u7528 read \u8bfb\u53d6\u6587\u4ef6\u7684\u6570\u636e\u5230\u7528\u6237\u7a7a\u95f4\u7f13\u51b2\u533a\u4e2d\u3002 \u7136\u540e\u518d\u8c03\u7528 write \u628a\u7f13\u51b2\u533a\u7684\u6570\u636e\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef Socket \u3002 \u4f2a\u4ee3\u7801\u5982\u4e0b\uff1a while ((n = read(file, buf, 4069)) > 0) { write(sock, buf , n); } \u5728\u4e0a\u9762\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8c03\u7528\u4e86 read \u548c write \u4e24\u4e2a\u7cfb\u7edf\u8c03\u7528\u3002 read \u7cfb\u7edf\u8c03\u7528\u662f\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u5230\u7528\u6237\u7a7a\u95f4\u7684\u7f13\u51b2\u533a\u4e2d\uff0c\u6240\u4ee5\u8c03\u7528 read \u65f6\u9700\u8981\u4ece\u5185\u6838\u7a7a\u95f4\u590d\u5236\u6570\u636e\u5230\u7528\u6237\u7a7a\u95f4\uff0c\u5982\u56fe 2 \u6240\u793a\uff1a \u56fe2 \u5c31\u662f\u6570\u636e\u7684\u590d\u5236\u8fc7\u7a0b\uff0c\u9996\u5148\u4f1a\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u5230\u5185\u6838\u7684 \u9875\u7f13\u5b58\uff08page cache\uff09 \uff0c\u7136\u540e\u518d\u4ece\u9875\u7f13\u5b58\u4e2d\u590d\u5236\u5230\u7528\u6237\u7a7a\u95f4\u7684\u7f13\u51b2\u533a\u4e2d\u3002 \u800c\u5f53\u8c03\u7528 write \u7cfb\u7edf\u8c03\u7528\u628a\u7528\u6237\u7a7a\u95f4\u7f13\u51b2\u533a\u4e2d\u7684\u6570\u636e\u53d1\u9001\u5230\u5ba2\u6237\u7aef Socket \u65f6\uff0c\u9996\u5148\u4f1a\u628a\u7f13\u51b2\u533a\u7684\u6570\u636e\u590d\u5236\u5230\u5185\u6838\u7684 Socket \u7f13\u51b2\u533a\u4e2d\uff0c\u7f51\u5361\u9a71\u52a8\u4f1a\u628a Socket \u7f13\u51b2\u533a\u7684\u6570\u636e\u53d1\u9001\u51fa\u53bb\uff0c\u5982\u56fe 3 \u6240\u793a\uff1a \u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u670d\u52a1\u7aef\u53d1\u9001\u6587\u4ef6\u7ed9\u5ba2\u6237\u7aef\u7684\u8fc7\u7a0b\u4e2d\u9700\u8981\u8fdb\u884c\u4e24\u6b21\u6570\u636e\u590d\u5236\uff0c\u7b2c\u4e00\u6b21\u662f\u4ece\u5185\u6838\u7a7a\u95f4\u7684\u9875\u7f13\u5b58\u590d\u5236\u5230\u7528\u6237\u7a7a\u95f4\u7684\u7f13\u51b2\u533a\uff0c\u7b2c\u4e8c\u6b21\u662f\u4ece\u7528\u6237\u7a7a\u95f4\u7684\u7f13\u51b2\u533a\u590d\u5236\u5230\u5185\u6838\u7a7a\u95f4\u7684 Socket \u7f13\u51b2\u533a\u3002 \u4ed4\u7ec6\u89c2\u5bdf\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e0a\u56fe\u4e2d\u7684\u9875\u7f13\u5b58\u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5\u590d\u5236\u5230 Socket \u7f13\u51b2\u533a\uff0c\u800c\u4e0d\u9700\u8981\u590d\u5236\u5230\u7528\u6237\u7a7a\u95f4\u7f13\u51b2\u533a\u7684\u3002\u5982\u56fe 4 \u6240\u793a\uff1a \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u4e0d\u9700\u8981\u7528\u6237\u7a7a\u95f4\u4f5c\u4e3a\u6570\u636e\u4e2d\u8f6c\u7684\u6280\u672f\u53eb \u96f6\u62f7\u8d1d\u6280\u672f \u3002\u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u54ea\u4e2a\u7cfb\u7edf\u8c03\u7528\u6765\u5b9e\u73b0\u4e0a\u56fe\u4e2d\u7684\u6280\u672f\u5462\uff1f\u7b54\u6848\u5c31\u662f sendfile \uff0c\u6211\u4eec\u6765\u770b\u770b sendfile \u7cfb\u7edf\u8c03\u7528\u7684\u539f\u578b\uff1a #include <sys/sendfile.h> ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count); \u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e0b sendfile \u5404\u4e2a\u53c2\u6570\u7684\u4f5c\u7528\uff1a out_fd\uff1a\u6570\u636e\u63a5\u6536\u65b9\u6587\u4ef6\u53e5\u67c4\uff08\u4e00\u822c\u4e3a Socket \u53e5\u67c4\uff09\u3002 in_fd\uff1a\u6570\u636e\u63d0\u4f9b\u65b9\u6587\u4ef6\u53e5\u67c4\uff08\u4e00\u822c\u4e3a\u6587\u4ef6\u53e5\u67c4\uff09\u3002 offset\uff1a\u5982\u679c offset \u4e0d\u4e3a NULL\uff0c\u8868\u793a\u4ece\u54ea\u91cc\u5f00\u59cb\u53d1\u9001\u6570\u636e\u7684\u504f\u79fb\u91cf\u3002 count\uff1a\u8868\u793a\u9700\u8981\u53d1\u9001\u591a\u5c11\u5b57\u8282\u7684\u6570\u636e\u3002 sendfile \u53d1\u9001\u6570\u636e\u7684\u8fc7\u7a0b\u5982\u56fe 5 \u6240\u793a\uff1a \u5bf9\u6bd4\u56fe 5 \u4e0e \u56fe 3\uff0c\u6211\u4eec\u53d1\u73b0\u4f7f\u7528 sendfile \u53ef\u4ee5\u51cf\u5c11\u4e00\u6b21\u7cfb\u7edf\u8c03\u7528\uff0c\u5e76\u4e14\u51cf\u5c11\u4e00\u6b21\u6570\u636e\u62f7\u8d1d\u8fc7\u7a0b\u3002 sendfile\u7684\u5e94\u7528\u573a\u666f snedfile \u7684\u5e94\u7528\u573a\u666f\u662f\uff1a\u7528\u6237\u4ece\u78c1\u76d8\u8bfb\u53d6\u4e00\u4e9b\u6587\u4ef6\u6570\u636e\u540e\u4e0d\u9700\u8981\u7ecf\u8fc7\u4efb\u4f55\u8ba1\u7b97\u4e0e\u5904\u7406\u5c31\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u51fa\u53bb\u3002\u6b64\u573a\u666f\u7684\u5178\u578b\u5e94\u7528\u662f\u6d88\u606f\u961f\u5217\u3002 \u5728\u4f20\u7edf I/O \u4e0b\uff0c\u6b63\u5982\u7b2c\u4e00\u8282\u6240\u793a\uff0c\u4e0a\u8ff0\u5e94\u7528\u573a\u666f\u7684\u4e00\u6b21\u6570\u636e\u4f20\u8f93\u9700\u8981\u56db\u6b21 CPU \u5168\u6743\u8d1f\u8d23\u7684\u62f7\u8d1d\u4e0e\u56db\u6b21\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u6b63\u5982\u672c\u6587\u7b2c\u4e00\u8282\u6240\u8ff0\u3002 sendfile \u4e3b\u8981\u4f7f\u7528\u5230\u4e86\u4e24\u4e2a\u6280\u672f\uff1a DMA \u6280\u672f\uff1b \u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26\u4ee3\u66ff\u6570\u636e\u62f7\u8d1d\u3002 \u5229\u7528 DMA \u6280\u672f sendfile \u4f9d\u8d56\u4e8e DMA \u6280\u672f\uff0c\u5c06\u56db\u6b21 CPU \u5168\u7a0b\u8d1f\u8d23\u7684\u62f7\u8d1d\u4e0e\u56db\u6b21\u4e0a\u4e0b\u6587\u5207\u6362\u51cf\u5c11\u5230\u4e24\u6b21\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a DMA \u8d1f\u8d23 \u78c1\u76d8 \u5230 \u5185\u6838\u7a7a\u95f4\u4e2d\u7684 Page cache\uff08read buffer\uff09 \u7684\u6570\u636e\u62f7\u8d1d\u4ee5\u53ca\u4ece \u5185\u6838\u7a7a\u95f4\u4e2d\u7684 socket buffer \u5230 \u7f51\u5361 \u7684\u6570\u636e\u62f7\u8d1d\u3002 \u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26\u4ee3\u66ff\u6570\u636e\u62f7\u8d1d \u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u53ef\u4ee5\u4ee3\u66ff\u6570\u636e\u62f7\u8d1d\uff0c\u8fd9\u662f\u7531\u4e8e\u4e24\u4e2a\u539f\u56e0\uff1a page cache \u4ee5\u53ca socket buffer \u90fd\u5728\u5185\u6838\u7a7a\u95f4\u4e2d\uff1b \u6570\u636e\u4f20\u8f93\u8fc7\u7a0b\u524d\u540e\u6ca1\u6709\u4efb\u4f55\u5199\u64cd\u4f5c\u3002 \u4e00\u6b21\u7cfb\u7edf\u8c03\u7528\u4ee3\u66ff\u4e24\u6b21\u7cfb\u7edf\u8c03\u7528 \u7531\u4e8e sendfile \u4ec5\u4ec5\u5bf9\u5e94\u4e00\u6b21\u7cfb\u7edf\u8c03\u7528\uff0c\u800c\u4f20\u7edf\u6587\u4ef6\u64cd\u4f5c\u5219\u9700\u8981\u4f7f\u7528 read \u4ee5\u53ca write \u4e24\u4e2a\u7cfb\u7edf\u8c03\u7528\u3002 \u6b63\u56e0\u4e3a\u5982\u6b64\uff0c sendfile \u80fd\u591f\u5c06\u7528\u6237\u6001\u4e0e\u5185\u6838\u6001\u4e4b\u95f4\u7684\u4e0a\u4e0b\u6587\u5207\u6362\u4ece 4 \u6b21\u51cf\u5c11\u5230 2 \u6b21\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u6211\u4eec\u9700\u8981\u6ce8\u610f sendfile \u7cfb\u7edf\u8c03\u7528\u7684\u5c40\u9650\u6027\u3002\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u5bf9\u4ece\u78c1\u76d8\u8bfb\u53d6\u7684\u6570\u636e\u8fdb\u884c\u5199\u64cd\u4f5c\uff0c\u4f8b\u5982\u89e3\u5bc6\u6216\u52a0\u5bc6\uff0c\u90a3\u4e48 sendfile \u7cfb\u7edf\u8c03\u7528\u5c31\u5b8c\u5168\u6ca1\u6cd5\u7528\u3002\u8fd9\u662f\u56e0\u4e3a\u7528\u6237\u7ebf\u7a0b\u6839\u672c\u5c31\u4e0d\u80fd\u591f\u901a\u8fc7 sendfile \u7cfb\u7edf\u8c03\u7528\u5f97\u5230\u4f20\u8f93\u7684\u6570\u636e\u3002 mmap \u4e00 \u4f20\u7edf\u7684\u8bfb\u5199\u6587\u4ef6 \u4e00\u822c\u6765\u8bf4\uff0c\u4fee\u6539\u4e00\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u9700\u8981\u5982\u4e0b3\u4e2a\u6b65\u9aa4\uff1a \u628a\u6587\u4ef6\u5185\u5bb9\u8bfb\u5165\u5230\u5185\u5b58\u4e2d\u3002 \u4fee\u6539\u5185\u5b58\u4e2d\u7684\u5185\u5bb9\u3002 \u628a\u5185\u5b58\u7684\u6570\u636e\u5199\u5165\u5230\u6587\u4ef6\u4e2d\u3002 \u8fc7\u7a0b\u5982\u56fe 1 \u6240\u793a\uff1a \u5982\u679c\u4f7f\u7528\u4ee3\u7801\u6765\u5b9e\u73b0\u4e0a\u9762\u7684\u8fc7\u7a0b\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a read(fd, buf, 1024); // \u8bfb\u53d6\u6587\u4ef6\u7684\u5185\u5bb9\u5230buf ...// \u4fee\u6539buf\u7684\u5185\u5bb9 write(fd, buf, 1024); // \u628abuf\u7684\u5185\u5bb9\u5199\u5165\u5230\u6587\u4ef6 \u4ece\u56fe 1 \u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c \u9875\u7f13\u5b58(page cache) \u662f\u8bfb\u5199\u6587\u4ef6\u65f6\u7684\u4e2d\u95f4\u5c42\uff0c\u5185\u6838\u4f7f\u7528 \u9875\u7f13\u5b58 \u4e0e\u6587\u4ef6\u7684\u6570\u636e\u5757\u5173\u8054\u8d77\u6765\u3002\u6240\u4ee5\u5e94\u7528\u7a0b\u5e8f\u8bfb\u5199\u6587\u4ef6\u65f6\uff0c\u5b9e\u9645\u64cd\u4f5c\u7684\u662f \u9875\u7f13\u5b58 \u3002 \u4e8c\u3001\u4f7f\u7528 mmap \u8bfb\u5199\u6587\u4ef6 \u4ece\u4f20\u7edf\u8bfb\u5199\u6587\u4ef6\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6709\u4e2a\u5730\u65b9\u53ef\u4ee5\u4f18\u5316\uff1a\u5982\u679c\u53ef\u4ee5\u76f4\u63a5\u5728\u7528\u6237\u7a7a\u95f4\u8bfb\u5199 \u9875\u7f13\u5b58 \uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u514d\u53bb\u5c06 \u9875\u7f13\u5b58 \u7684\u6570\u636e\u590d\u5236\u5230\u7528\u6237\u7a7a\u95f4\u7f13\u51b2\u533a\u7684\u8fc7\u7a0b\u3002 \u90a3\u4e48\uff0c\u6709\u6ca1\u6709\u8fd9\u6837\u7684\u6280\u672f\u80fd\u5b9e\u73b0\u4e0a\u9762\u6240\u8bf4\u7684\u65b9\u5f0f\u5462\uff1f\u7b54\u6848\u662f\u80af\u5b9a\u7684\uff0c\u5c31\u662f mmap \u3002 \u4f7f\u7528 mmap \u7cfb\u7edf\u8c03\u7528\u53ef\u4ee5\u5c06\u7528\u6237\u7a7a\u95f4\u7684\u865a\u62df\u5185\u5b58\u5730\u5740\u4e0e\u6587\u4ef6\u8fdb\u884c\u6620\u5c04\uff08\u7ed1\u5b9a\uff09\uff0c\u5bf9\u6620\u5c04\u540e\u7684\u865a\u62df\u5185\u5b58\u5730\u5740\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\u5c31\u5982\u540c\u5bf9\u6587\u4ef6\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\u4e00\u6837\u3002\u539f\u7406\u5982\u56fe 2 \u6240\u793a\uff1a \u4e09\u3001mmap\u7684\u4f7f\u7528\u65b9\u5f0f \u4e0b\u9762\u6211\u4eec\u4ecb\u7ecd\u4e00\u4e0b\u600e\u4e48\u4f7f\u7528 mmap \uff0c mmap \u51fd\u6570 \u7684\u539f\u578b\u5982\u4e0b\uff1a void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset); \u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e0b mmap \u51fd\u6570 \u7684\u5404\u4e2a\u53c2\u6570\u4f5c\u7528\uff1a addr\uff1a\u6307\u5b9a\u6620\u5c04\u7684\u865a\u62df\u5185\u5b58\u5730\u5740\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e3a NULL\uff0c\u8ba9 Linux \u5185\u6838\u81ea\u52a8\u9009\u62e9\u5408\u9002\u7684\u865a\u62df\u5185\u5b58\u5730\u5740\u3002 length\uff1a\u6620\u5c04\u7684\u957f\u5ea6\u3002 prot\uff1a\u6620\u5c04\u5185\u5b58\u7684\u4fdd\u62a4\u6a21\u5f0f\uff0c\u53ef\u9009\u503c\u5982\u4e0b\uff1a PROT_EXEC\uff1a\u53ef\u4ee5\u88ab\u6267\u884c\u3002 PROT_READ\uff1a\u53ef\u4ee5\u88ab\u8bfb\u53d6\u3002 PROT_WRITE\uff1a\u53ef\u4ee5\u88ab\u5199\u5165\u3002 PROT_NONE\uff1a\u4e0d\u53ef\u8bbf\u95ee\u3002 flags\uff1a\u6307\u5b9a\u6620\u5c04\u7684\u7c7b\u578b\uff0c\u5e38\u7528\u7684\u53ef\u9009\u503c\u5982\u4e0b\uff1a MAP_FIXED\uff1a\u4f7f\u7528\u6307\u5b9a\u7684\u8d77\u59cb\u865a\u62df\u5185\u5b58\u5730\u5740\u8fdb\u884c\u6620\u5c04\u3002 MAP_SHARED\uff1a\u4e0e\u5176\u5b83\u6240\u6709\u6620\u5c04\u5230\u8fd9\u4e2a\u6587\u4ef6\u7684\u8fdb\u7a0b\u5171\u4eab\u6620\u5c04\u7a7a\u95f4\uff08\u53ef\u5b9e\u73b0\u5171\u4eab\u5185\u5b58\uff09\u3002 MAP_PRIVATE\uff1a\u5efa\u7acb\u4e00\u4e2a\u5199\u65f6\u590d\u5236\uff08Copy on Write\uff09\u7684\u79c1\u6709\u6620\u5c04\u7a7a\u95f4\u3002 MAP_LOCKED\uff1a\u9501\u5b9a\u6620\u5c04\u533a\u7684\u9875\u9762\uff0c\u4ece\u800c\u9632\u6b62\u9875\u9762\u88ab\u4ea4\u6362\u51fa\u5185\u5b58\u3002 ... fd\uff1a\u8fdb\u884c\u6620\u5c04\u7684\u6587\u4ef6\u53e5\u67c4\u3002 offset\uff1a\u6587\u4ef6\u504f\u79fb\u91cf\uff08\u4ece\u6587\u4ef6\u7684\u4f55\u5904\u5f00\u59cb\u6620\u5c04\uff09\u3002 \u4ecb\u7ecd\u5b8c mmap \u51fd\u6570 \u7684\u539f\u578b\u540e\uff0c\u6211\u4eec\u73b0\u5728\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u4ecb\u7ecd\u600e\u4e48\u4f7f\u7528 mmap\uff1a int fd = open(filepath, O_RDWR, 0644); // \u6253\u5f00\u6587\u4ef6 void *addr = mmap(NULL, 8192, PROT_WRITE, MAP_SHARED, fd, 4096); // \u5bf9\u6587\u4ef6\u8fdb\u884c\u6620\u5c04 \u5728\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5148\u901a\u8fc7 open \u51fd\u6570\u4ee5\u53ef\u8bfb\u5199\u7684\u65b9\u5f0f\u6253\u5f00\u6587\u4ef6\uff0c\u7136\u540e\u901a\u8fc7 mmap \u51fd\u6570\u5bf9\u6587\u4ef6\u8fdb\u884c\u6620\u5c04\uff0c\u6620\u5c04\u7684\u65b9\u5f0f\u5982\u4e0b\uff1a addr \u53c2\u6570\u8bbe\u7f6e\u4e3a NULL\uff0c\u8868\u793a\u8ba9\u64cd\u4f5c\u7cfb\u7edf\u81ea\u52a8\u9009\u62e9\u5408\u9002\u7684\u865a\u62df\u5185\u5b58\u5730\u5740\u8fdb\u884c\u6620\u5c04\u3002 length \u53c2\u6570\u8bbe\u7f6e\u4e3a 8192 \u8868\u793a\u6620\u5c04\u7684\u533a\u57df\u4e3a 2 \u4e2a\u5185\u5b58\u9875\u7684\u5927\u5c0f\uff08\u4e00\u4e2a\u5185\u5b58\u9875\u7684\u5927\u5c0f\u4e3a 4 KB\uff09\u3002 prot \u53c2\u6570\u8bbe\u7f6e\u4e3a PROT_WRITE \u8868\u793a\u6620\u5c04\u7684\u5185\u5b58\u533a\u4e3a\u53ef\u8bfb\u5199\u3002 flags \u53c2\u6570\u8bbe\u7f6e\u4e3a MAP_SHARED \u8868\u793a\u5171\u4eab\u6620\u5c04\u533a\u3002 fd \u53c2\u6570\u8bbe\u7f6e\u6253\u5f00\u7684\u6587\u4ef6\u53e5\u67c4\u3002 offset \u53c2\u6570\u8bbe\u7f6e\u4e3a 4096 \u8868\u793a\u4ece\u6587\u4ef6\u7684 4096 \u5904\u5f00\u59cb\u6620\u5c04\u3002 mmap \u51fd\u6570\u4f1a\u8fd4\u56de\u6620\u5c04\u540e\u7684\u5185\u5b58\u5730\u5740\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6b64\u5185\u5b58\u5730\u5740\u5bf9\u6587\u4ef6\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\u3002\u6211\u4eec\u901a\u8fc7\u56fe 3 \u5c55\u793a\u4e0a\u9762\u4f8b\u5b50\u5728\u5185\u6838\u4e2d\u7684\u7ed3\u6784\uff1a \u6587\u4ef6\u540c\u6b65\u5230\u78c1\u76d8\u7684\u65f6\u673a \u524d\u9762\u6211\u4eec\u4ecb\u7ecd\u8fc7\uff0c\u8bfb\u5199\u6587\u4ef6\u90fd\u9700\u8981\u7ecf\u8fc7 \u9875\u7f13\u5b58 \uff0c\u6240\u4ee5 mmap \u6620\u5c04\u7684\u6b63\u662f\u6587\u4ef6\u7684 \u9875\u7f13\u5b58 \uff0c\u800c\u975e\u78c1\u76d8\u4e2d\u7684\u6587\u4ef6\u672c\u8eab\u3002\u7531\u4e8e mmap \u6620\u5c04\u7684\u662f\u6587\u4ef6\u7684 \u9875\u7f13\u5b58 \uff0c\u6240\u4ee5\u5c31\u6d89\u53ca\u5230 \u540c\u6b65\u7684\u95ee\u9898 \uff0c\u5373 \u9875\u7f13\u5b58 \u4f1a\u5728\u4ec0\u4e48\u65f6\u5019\u628a\u6570\u636e\u540c\u6b65\u5230\u78c1\u76d8\u3002 Linux \u5185\u6838\u5e76\u4e0d\u4f1a\u4e3b\u52a8\u628a mmap \u6620\u5c04\u7684 \u9875\u7f13\u5b58 \u540c\u6b65\u5230\u78c1\u76d8\uff0c\u800c\u662f\u9700\u8981\u7528\u6237\u4e3b\u52a8\u89e6\u53d1\u3002\u540c\u6b65 mmap \u6620\u5c04\u7684\u5185\u5b58\u5230\u78c1\u76d8\u6709 4 \u4e2a\u65f6\u673a\uff1a \u8c03\u7528 msync \u51fd\u6570\u4e3b\u52a8\u8fdb\u884c\u6570\u636e\u540c\u6b65\uff08\u4e3b\u52a8\uff09\u3002 \u8c03\u7528 munmap \u51fd\u6570\u5bf9\u6587\u4ef6\u8fdb\u884c\u89e3\u9664\u6620\u5c04\u5173\u7cfb\u65f6\uff08\u4e3b\u52a8\uff09\u3002 \u8fdb\u7a0b\u9000\u51fa\u65f6\uff08\u88ab\u52a8\uff09\u3002 \u7cfb\u7edf\u5173\u673a\u65f6\uff08\u88ab\u52a8\uff09\u3002 Direct I/O Direct I/O \u5373 \u76f4\u63a5 I/O \u3002\u5176\u540d\u5b57\u4e2d\u7684 \u76f4\u63a5 \u4e8c\u5b57\u7528\u4e8e\u533a\u5206\u4f7f\u7528 page cache \u673a\u5236\u7684 \u7f13\u5b58 I/O \u3002 \u7f13\u5b58\u6587\u4ef6 I/O\uff1a\u7528\u6237\u7a7a\u95f4\u8981\u8bfb\u5199\u4e00\u4e2a\u6587\u4ef6\u5e76\u4e0d\u76f4\u63a5\u4e0e\u78c1\u76d8\u4ea4\u4e92\uff0c\u800c\u662f\u4e2d\u95f4\u5939\u4e86\u4e00\u5c42\u7f13\u5b58\uff0c\u5373 page cache\uff1b \u76f4\u63a5\u6587\u4ef6 I/O\uff1a\u7528\u6237\u7a7a\u95f4\u8bfb\u53d6\u7684\u6587\u4ef6\u76f4\u63a5\u4e0e\u78c1\u76d8\u4ea4\u4e92\uff0c\u6ca1\u6709\u4e2d\u95f4 page cache \u5c42\u3002 \u201c\u76f4\u63a5\u201d\u5728\u8fd9\u91cc\u8fd8\u6709\u53e6\u4e00\u5c42\u8bed\u4e49\uff1a\u5176\u4ed6\u6240\u6709\u6280\u672f\u4e2d\uff0c\u6570\u636e\u81f3\u5c11\u9700\u8981\u5728\u5185\u6838\u7a7a\u95f4\u5b58\u50a8\u4e00\u4efd\uff0c\u4f46\u662f\u5728 Direct I/O \u6280\u672f\u4e2d\uff0c\u6570\u636e\u76f4\u63a5\u5b58\u50a8\u5728\u7528\u6237\u7a7a\u95f4\u4e2d\uff0c\u7ed5\u8fc7\u4e86\u5185\u6838\u3002 Direct I/O \u6a21\u5f0f\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6b64\u65f6\u7528\u6237\u7a7a\u95f4\u76f4\u63a5\u901a\u8fc7 DMA \u7684\u65b9\u5f0f\u4e0e\u78c1\u76d8\u4ee5\u53ca\u7f51\u5361\u8fdb\u884c\u6570\u636e\u62f7\u8d1d\u3002 Direct I/O \u7684\u8bfb\u5199\u975e\u5e38\u6709\u7279\u70b9\uff1a Write \u64cd\u4f5c\uff1a\u7531\u4e8e\u5176\u4e0d\u4f7f\u7528 page cache\uff0c\u6240\u4ee5\u5176\u8fdb\u884c\u5199\u6587\u4ef6\uff0c\u5982\u679c\u8fd4\u56de\u6210\u529f\uff0c\u6570\u636e\u5c31\u771f\u7684\u843d\u76d8\u4e86\uff08\u4e0d\u8003\u8651\u78c1\u76d8\u81ea\u5e26\u7684\u7f13\u5b58\uff09\uff1b Read \u64cd\u4f5c\uff1a\u7531\u4e8e\u5176\u4e0d\u4f7f\u7528 page cache\uff0c\u6bcf\u6b21\u8bfb\u64cd\u4f5c\u662f\u771f\u7684\u4ece\u78c1\u76d8\u4e2d\u8bfb\u53d6\uff0c\u4e0d\u4f1a\u4ece\u6587\u4ef6\u7cfb\u7edf\u7684\u7f13\u5b58\u4e2d\u8bfb\u53d6\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u5373\u4f7f Direct I/O \u8fd8\u662f\u53ef\u80fd\u9700\u8981\u4f7f\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684 fsync \u7cfb\u7edf\u8c03\u7528\u3002\u4e3a\u4ec0\u4e48\uff1f \u8fd9\u662f\u56e0\u4e3a\u867d\u7136\u6587\u4ef6\u7684\u6570\u636e\u672c\u8eab\u6ca1\u6709\u4f7f\u7528\u4efb\u4f55\u7f13\u5b58\uff0c\u4f46\u662f\u6587\u4ef6\u7684\u5143\u6570\u636e\u4ecd\u7136\u9700\u8981\u7f13\u5b58\uff0c\u5305\u62ec VFS \u4e2d\u7684 inode cache \u548c dentry cache \u7b49 \u5728\u90e8\u5206\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u5728 Direct I/O \u6a21\u5f0f\u4e0b\u8fdb\u884c write \u7cfb\u7edf\u8c03\u7528\u80fd\u591f\u786e\u4fdd\u6587\u4ef6\u6570\u636e\u843d\u76d8\uff0c\u4f46\u662f\u6587\u4ef6\u5143\u6570\u636e\u4e0d\u4e00\u5b9a\u843d\u76d8\u3002\u5982\u679c\u5728\u6b64\u7c7b\u64cd\u4f5c\u7cfb\u7edf\u4e0a\uff0c\u90a3\u4e48\u8fd8\u9700\u8981\u6267\u884c\u4e00\u6b21 fsync \u7cfb\u7edf\u8c03\u7528\u786e\u4fdd\u6587\u4ef6\u5143\u6570\u636e\u4e5f\u843d\u76d8\u3002\u5426\u5219\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6587\u4ef6\u5f02\u5e38\u3001\u5143\u6570\u636e\u786e\u5b9e\u7b49\u60c5\u51b5\u3002MySQL \u7684 O_DIRECT \u4e0e O_DIRECT_NO_FSYNC \u914d\u7f6e\u662f\u4e00\u4e2a\u5177\u4f53\u6848\u4f8b\u3002 Direct I/O \u7684\u4f18\u7f3a\u70b9\uff1a \u4f18\u70b9\uff1a Linux \u4e2d\u7684\u76f4\u63a5 I/O \u6280\u672f\u7701\u7565\u6389\u7f13\u5b58 I/O \u6280\u672f\u4e2d\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u7f13\u51b2\u533a\u7684\u4f7f\u7528\uff0c\u6570\u636e\u76f4\u63a5\u5728\u5e94\u7528\u7a0b\u5e8f\u5730\u5740\u7a7a\u95f4\u548c\u78c1\u76d8\u4e4b\u95f4\u8fdb\u884c\u4f20\u8f93\uff0c\u4ece\u800c\u4f7f\u5f97\u81ea\u7f13\u5b58\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u7701\u7565\u6389\u590d\u6742\u7684\u7cfb\u7edf\u7ea7\u522b\u7684\u7f13\u5b58\u7ed3\u6784\uff0c\u800c\u6267\u884c\u7a0b\u5e8f\u81ea\u5df1\u5b9a\u4e49\u7684\u6570\u636e\u8bfb\u5199\u7ba1\u7406\uff0c\u4ece\u800c\u964d\u4f4e\u7cfb\u7edf\u7ea7\u522b\u7684\u7ba1\u7406\u5bf9\u5e94\u7528\u7a0b\u5e8f\u8bbf\u95ee\u6570\u636e\u7684\u5f71\u54cd\u3002 \u4e0e\u5176\u4ed6\u96f6\u62f7\u8d1d\u6280\u672f\u4e00\u6837\uff0c\u907f\u514d\u4e86\u5185\u6838\u7a7a\u95f4\u5230\u7528\u6237\u7a7a\u95f4\u7684\u6570\u636e\u62f7\u8d1d\uff0c\u5982\u679c\u8981\u4f20\u8f93\u7684\u6570\u636e\u91cf\u5f88\u5927\uff0c\u4f7f\u7528\u76f4\u63a5 I/O \u7684\u65b9\u5f0f\u8fdb\u884c\u6570\u636e\u4f20\u8f93\uff0c\u800c\u4e0d\u9700\u8981\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u5730\u5740\u7a7a\u95f4\u62f7\u8d1d\u6570\u636e\u64cd\u4f5c\u7684\u53c2\u4e0e\uff0c\u8fd9\u5c06\u4f1a\u5927\u5927\u63d0\u9ad8\u6027\u80fd\u3002 \u7f3a\u70b9\uff1a \u7531\u4e8e\u8bbe\u5907\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\u662f\u901a\u8fc7 DMA \u5b8c\u6210\u7684\uff0c\u56e0\u6b64\u7528\u6237\u7a7a\u95f4\u7684\u6570\u636e\u7f13\u51b2\u533a\u5185\u5b58\u9875\u5fc5\u987b\u8fdb\u884c page pinning\uff08\u9875\u9501\u5b9a\uff09\uff0c\u8fd9\u662f\u4e3a\u4e86\u9632\u6b62\u5176\u7269\u7406\u9875\u6846\u5730\u5740\u88ab\u4ea4\u6362\u5230\u78c1\u76d8\u6216\u8005\u88ab\u79fb\u52a8\u5230\u65b0\u7684\u5730\u5740\u800c\u5bfc\u81f4 DMA \u53bb\u62f7\u8d1d\u6570\u636e\u7684\u65f6\u5019\u5728\u6307\u5b9a\u7684\u5730\u5740\u627e\u4e0d\u5230\u5185\u5b58\u9875\u4ece\u800c\u5f15\u53d1\u7f3a\u9875\u9519\u8bef\uff0c\u800c\u9875\u9501\u5b9a\u7684\u5f00\u9500\u5e76\u4e0d\u6bd4 CPU \u62f7\u8d1d\u5c0f\uff0c\u6240\u4ee5\u4e3a\u4e86\u907f\u514d\u9891\u7e41\u7684\u9875\u9501\u5b9a\u7cfb\u7edf\u8c03\u7528\uff0c\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u5206\u914d\u548c\u6ce8\u518c\u4e00\u4e2a\u6301\u4e45\u7684\u5185\u5b58\u6c60\uff0c\u7528\u4e8e\u6570\u636e\u7f13\u51b2\u3002 \u5982\u679c\u8bbf\u95ee\u7684\u6570\u636e\u4e0d\u5728\u5e94\u7528\u7a0b\u5e8f\u7f13\u5b58\u4e2d\uff0c\u90a3\u4e48\u6bcf\u6b21\u6570\u636e\u90fd\u4f1a\u76f4\u63a5\u4ece\u78c1\u76d8\u8fdb\u884c\u52a0\u8f7d\uff0c\u8fd9\u79cd\u76f4\u63a5\u52a0\u8f7d\u4f1a\u975e\u5e38\u7f13\u6162\u3002 \u5728\u5e94\u7528\u5c42\u5f15\u5165\u76f4\u63a5 I/O \u9700\u8981\u5e94\u7528\u5c42\u81ea\u5df1\u7ba1\u7406\uff0c\u8fd9\u5e26\u6765\u4e86\u989d\u5916\u7684\u7cfb\u7edf\u590d\u6742\u6027\u3002 \u8c01\u4f1a\u4f7f\u7528 Direct I/O\uff1f IBM\u7684\u4e00\u7bc7\u6587\u7ae0[2]\u6307\u51fa\uff0c\u81ea\u7f13\u5b58\u5e94\u7528\u7a0b\u5e8f\uff08 self-caching applications\uff09\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 Direct I/O\u3002 \u81ea\u7f13\u5b58\u5e94\u7528\u7a0b\u5e8f \u5bf9\u4e8e\u67d0\u4e9b\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\uff0c\u5b83\u4f1a\u6709\u5b83\u81ea\u5df1\u7684\u6570\u636e\u7f13\u5b58\u673a\u5236\uff0c\u6bd4\u5982\uff0c\u5b83\u4f1a\u5c06\u6570\u636e\u7f13\u5b58\u5728\u5e94\u7528\u7a0b\u5e8f\u5730\u5740\u7a7a\u95f4\uff0c\u8fd9\u7c7b\u5e94\u7528\u7a0b\u5e8f\u5b8c\u5168\u4e0d\u9700\u8981\u4f7f\u7528\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u4e2d\u7684\u9ad8\u901f\u7f13\u51b2\u5b58\u50a8\u5668\uff0c\u8fd9\u7c7b\u5e94\u7528\u7a0b\u5e8f\u5c31\u88ab\u79f0\u4f5c\u662f\u81ea\u7f13\u5b58\u5e94\u7528\u7a0b\u5e8f\uff08 self-caching applications \uff09\u3002 \u4f8b\u5982\uff0c\u5e94\u7528\u5185\u90e8\u7ef4\u62a4\u4e00\u4e2a\u7f13\u5b58\u7a7a\u95f4\uff0c\u5f53\u6709\u8bfb\u64cd\u4f5c\u65f6\uff0c\u9996\u5148\u8bfb\u53d6\u5e94\u7528\u5c42\u7684\u7f13\u5b58\u6570\u636e\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u90a3\u4e48\u5c31\u901a\u8fc7 Direct I/O \u76f4\u63a5\u901a\u8fc7\u78c1\u76d8 I/O \u6765\u8bfb\u53d6\u6570\u636e\u3002\u7f13\u5b58\u4ecd\u7136\u5728\u5e94\u7528\uff0c\u53ea\u4e0d\u8fc7\u5e94\u7528\u89c9\u5f97\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e2a\u7f13\u5b58\u6bd4\u64cd\u4f5c\u7cfb\u7edf\u7684\u7f13\u5b58\u66f4\u9ad8\u6548\u3002 \u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\u662f\u8fd9\u7c7b\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u4e2a\u4ee3\u8868\u3002\u81ea\u7f13\u5b58\u5e94\u7528\u7a0b\u5e8f\u503e\u5411\u4e8e\u4f7f\u7528\u6570\u636e\u7684\u903b\u8f91\u8868\u8fbe\u65b9\u5f0f\uff0c\u800c\u975e\u7269\u7406\u8868\u8fbe\u65b9\u5f0f\uff1b\u5f53\u7cfb\u7edf\u5185\u5b58\u8f83\u4f4e\u7684\u65f6\u5019\uff0c\u81ea\u7f13\u5b58\u5e94\u7528\u7a0b\u5e8f\u4f1a\u8ba9\u8fd9\u79cd\u6570\u636e\u7684\u903b\u8f91\u7f13\u5b58\u88ab\u6362\u51fa\uff0c\u800c\u5e76\u975e\u662f\u78c1\u76d8\u4e0a\u5b9e\u9645\u7684\u6570\u636e\u88ab\u6362\u51fa\u3002\u81ea\u7f13\u5b58\u5e94\u7528\u7a0b\u5e8f\u5bf9\u8981\u64cd\u4f5c\u7684\u6570\u636e\u7684\u8bed\u4e49\u4e86\u5982\u6307\u638c\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u91c7\u7528\u66f4\u52a0\u9ad8\u6548\u7684\u7f13\u5b58\u66ff\u6362\u7b97\u6cd5\u3002\u81ea\u7f13\u5b58\u5e94\u7528\u7a0b\u5e8f\u6709\u53ef\u80fd\u4f1a\u5728\u591a\u53f0\u4e3b\u673a\u4e4b\u95f4\u5171\u4eab\u4e00\u5757\u5185\u5b58\uff0c\u90a3\u4e48\u81ea\u7f13\u5b58\u5e94\u7528\u7a0b\u5e8f\u5c31\u9700\u8981\u63d0\u4f9b\u4e00\u79cd\u80fd\u591f\u6709\u6548\u5730\u5c06\u7528\u6237\u5730\u5740\u7a7a\u95f4\u7684\u7f13\u5b58\u6570\u636e\u7f6e\u4e3a\u65e0\u6548\u7684\u673a\u5236\uff0c\u4ece\u800c\u786e\u4fdd\u5e94\u7528\u7a0b\u5e8f\u5730\u5740\u7a7a\u95f4\u7f13\u5b58\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u76ee\u524d Linux \u4e0a\u7684\u5f02\u6b65 IO \u5e93\uff0c\u5176\u4f9d\u8d56\u4e8e\u6587\u4ef6\u4f7f\u7528 O_DIRECT \u6a21\u5f0f\u6253\u5f00\uff0c\u5b83\u4eec\u901a\u5e38\u4e00\u8d77\u914d\u5408\u4f7f\u7528\u3002 \u5982\u4f55\u4f7f\u7528 Direct I/O\uff1f \u7528\u6237\u5e94\u7528\u9700\u8981\u5b9e\u73b0\u7528\u6237\u7a7a\u95f4\u5185\u7684\u7f13\u5b58\u533a\uff0c\u8bfb/\u5199\u64cd\u4f5c\u5e94\u5f53\u5c3d\u91cf\u901a\u8fc7\u6b64\u7f13\u5b58\u533a\u63d0\u4f9b\u3002\u5982\u679c\u6709\u6027\u80fd\u4e0a\u7684\u8003\u8651\uff0c\u90a3\u4e48\u5c3d\u91cf\u907f\u514d\u9891\u7e41\u5730\u57fa\u4e8e Direct I/O \u8fdb\u884c\u8bfb/\u5199\u64cd\u4f5c\u3002 \u603b\u7ed3 DMA \u6280\u672f\u7684\u63a8\u51fa\u4f7f\u5f97\u5185\u5b58\u4e0e\u5176\u4ed6\u7ec4\u4ef6\uff0c\u4f8b\u5982\u78c1\u76d8\u3001\u7f51\u5361\u8fdb\u884c\u6570\u636e\u62f7\u8d1d\u65f6\uff0cCPU \u4ec5\u4ec5\u9700\u8981\u53d1\u51fa\u63a7\u5236\u4fe1\u53f7\uff0c\u800c\u62f7\u8d1d\u6570\u636e\u7684\u8fc7\u7a0b\u5219\u7531 DMA \u8d1f\u8d23\u5b8c\u6210\u3002 Linux \u7684\u96f6\u62f7\u8d1d\u6280\u672f\u6709\u591a\u79cd\u5b9e\u73b0\u7b56\u7565\uff0c\u4f46\u6839\u636e\u7b56\u7565\u53ef\u4ee5\u5206\u4e3a\u5982\u4e0b\u51e0\u79cd\u7c7b\u578b\uff1a \u51cf\u5c11\u751a\u81f3\u907f\u514d\u7528\u6237\u7a7a\u95f4\u548c\u5185\u6838\u7a7a\u95f4\u4e4b\u95f4\u7684\u6570\u636e\u62f7\u8d1d\uff1a\u5728\u4e00\u4e9b\u573a\u666f\u4e0b\uff0c\u7528\u6237\u8fdb\u7a0b\u5728\u6570\u636e\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u5e76\u4e0d\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u8bbf\u95ee\u548c\u5904\u7406\uff0c\u90a3\u4e48\u6570\u636e\u5728 Linux \u7684 Page Cache \u548c\u7528\u6237\u8fdb\u7a0b\u7684\u7f13\u51b2\u533a\u4e4b\u95f4\u7684\u4f20\u8f93\u5c31\u5b8c\u5168\u53ef\u4ee5\u907f\u514d\uff0c\u8ba9\u6570\u636e\u62f7\u8d1d\u5b8c\u5168\u5728\u5185\u6838\u91cc\u8fdb\u884c\uff0c\u751a\u81f3\u53ef\u4ee5\u901a\u8fc7\u66f4\u5de7\u5999\u7684\u65b9\u5f0f\u907f\u514d\u5728\u5185\u6838\u91cc\u7684\u6570\u636e\u62f7\u8d1d\u3002\u8fd9\u4e00\u7c7b\u5b9e\u73b0\u4e00\u822c\u662f\u662f\u901a\u8fc7\u589e\u52a0\u65b0\u7684\u7cfb\u7edf\u8c03\u7528\u6765\u5b8c\u6210\u7684\uff0c\u6bd4\u5982 Linux \u4e2d\u7684 mmap()\uff0csendfile() \u4ee5\u53ca splice() \u7b49\u3002 \u7ed5\u8fc7\u5185\u6838\u7684\u76f4\u63a5 I/O\uff1a\u5141\u8bb8\u5728\u7528\u6237\u6001\u8fdb\u7a0b\u7ed5\u8fc7\u5185\u6838\u76f4\u63a5\u548c\u786c\u4ef6\u8fdb\u884c\u6570\u636e\u4f20\u8f93\uff0c\u5185\u6838\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u53ea\u8d1f\u8d23\u4e00\u4e9b\u7ba1\u7406\u548c\u8f85\u52a9\u7684\u5de5\u4f5c\u3002\u8fd9\u79cd\u65b9\u5f0f\u5176\u5b9e\u548c\u7b2c\u4e00\u79cd\u6709\u70b9\u7c7b\u4f3c\uff0c\u4e5f\u662f\u8bd5\u56fe\u907f\u514d\u7528\u6237\u7a7a\u95f4\u548c\u5185\u6838\u7a7a\u95f4\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\uff0c\u53ea\u662f\u7b2c\u4e00\u79cd\u65b9\u5f0f\u662f\u628a\u6570\u636e\u4f20\u8f93\u8fc7\u7a0b\u653e\u5728\u5185\u6838\u6001\u5b8c\u6210\uff0c\u800c\u8fd9\u79cd\u65b9\u5f0f\u5219\u662f\u76f4\u63a5\u7ed5\u8fc7\u5185\u6838\u548c\u786c\u4ef6\u901a\u4fe1\uff0c\u6548\u679c\u7c7b\u4f3c\u4f46\u539f\u7406\u5b8c\u5168\u4e0d\u540c\u3002 \u5185\u6838\u7f13\u51b2\u533a\u548c\u7528\u6237\u7f13\u51b2\u533a\u4e4b\u95f4\u7684\u4f20\u8f93\u4f18\u5316\uff1a\u8fd9\u79cd\u65b9\u5f0f\u4fa7\u91cd\u4e8e\u5728\u7528\u6237\u8fdb\u7a0b\u7684\u7f13\u51b2\u533a\u548c\u64cd\u4f5c\u7cfb\u7edf\u7684\u9875\u7f13\u5b58\u4e4b\u95f4\u7684 CPU \u62f7\u8d1d\u7684\u4f18\u5316\u3002\u8fd9\u79cd\u65b9\u6cd5\u5ef6\u7eed\u4e86\u4ee5\u5f80\u90a3\u79cd\u4f20\u7edf\u7684\u901a\u4fe1\u65b9\u5f0f\uff0c\u4f46\u66f4\u7075\u6d3b\u3002","title":"\u7b2c\u4e09\u7bc7 Linux \u96f6\u62f7\u8d1d\u6280\u672f\u603b\u7ed3"},{"location":"chapter_5/3_zero_copy/#_1","text":"\u672c\u6587\u603b\u7ed3Linux 3\u79cd\u96f6\u62f7\u8d1d\u6280\u672f","title":"\u6982\u8ff0"},{"location":"chapter_5/3_zero_copy/#dma","text":"DMA \u6280\u672f\u5c31\u662f\u6211\u4eec\u5728\u4e3b\u677f\u4e0a\u653e\u4e00\u5757\u72ec\u7acb\u7684\u82af\u7247\u3002\u5728\u8fdb\u884c\u5185\u5b58\u548c I/O \u8bbe\u5907\u7684\u6570\u636e\u4f20\u8f93\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e0d\u518d\u901a\u8fc7 CPU \u6765\u63a7\u5236\u6570\u636e\u4f20\u8f93\uff0c\u800c\u76f4\u63a5\u901a\u8fc7 DMA \u63a7\u5236\u5668\uff08DMA Controller\uff0c\u7b80\u79f0 DMAC\uff09\u3002 \u8fd9\u5757\u82af\u7247\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u5b83\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u534f\u5904\u7406\u5668\uff08Co-Processor\uff09\u3002","title":"\u80cc\u666f\u77e5\u8bc6 \u8ba4\u8bc6DMA"},{"location":"chapter_5/3_zero_copy/#_2","text":"\u96f6\u62f7\u8d1d\u6280\u672f\u662f\u4e00\u4e2a\u601d\u60f3\uff0c\u6307\u7684\u662f\u6307\u8ba1\u7b97\u673a\u6267\u884c\u64cd\u4f5c\u65f6\uff0cCPU \u4e0d\u9700\u8981\u5148\u5c06\u6570\u636e\u4ece\u67d0\u5904\u5185\u5b58\u590d\u5236\u5230\u53e6\u4e00\u4e2a\u7279\u5b9a\u533a\u57df\u3002 \u53ef\u89c1\uff0c\u96f6\u62f7\u8d1d\u7684\u7279\u70b9\u662f CPU \u4e0d\u5168\u7a0b\u8d1f\u8d23\u5185\u5b58\u4e2d\u7684\u6570\u636e\u5199\u5165\u5176\u4ed6\u7ec4\u4ef6\uff0cCPU \u4ec5\u4ec5\u8d77\u5230\u7ba1\u7406\u7684\u4f5c\u7528\u3002\u4f46\u6ce8\u610f\uff0c \u96f6\u62f7\u8d1d\u4e0d\u662f\u4e0d\u8fdb\u884c\u62f7\u8d1d\uff0c\u800c\u662f CPU \u4e0d\u518d\u5168\u7a0b\u8d1f\u8d23\u6570\u636e\u62f7\u8d1d\u65f6\u7684\u642c\u8fd0\u5de5\u4f5c \u3002\u5982\u679c\u6570\u636e\u672c\u8eab\u4e0d\u5728\u5185\u5b58\u4e2d\uff0c\u90a3\u4e48\u5fc5\u987b\u5148\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\u62f7\u8d1d\u5230\u5185\u5b58\u4e2d\uff08\u8fd9\u4e2a\u8fc7\u7a0b CPU \u53ef\u4ee5\u4e0d\u53c2\u4e0e\uff09\uff0c\u56e0\u4e3a\u6570\u636e\u53ea\u6709\u5728\u5185\u5b58\u4e2d\uff0c\u624d\u80fd\u88ab\u8f6c\u79fb\uff0c\u624d\u80fd\u88ab CPU \u76f4\u63a5\u8bfb\u53d6\u8ba1\u7b97\u3002 \u96f6\u62f7\u8d1d\u6280\u672f\u7684\u5177\u4f53\u5b9e\u73b0\u65b9\u5f0f\u6709\u5f88\u591a\uff0c\u4f8b\u5982\uff1a sendfile mmap \u76f4\u63a5 Direct I/O \u4e0d\u540c\u7684\u96f6\u62f7\u8d1d\u6280\u672f\u9002\u7528\u4e8e\u4e0d\u540c\u7684\u5e94\u7528\u573a\u666f\uff0c\u4e0b\u9762\u4f9d\u6b21\u8fdb\u884c sendfile\u3001mmap\u3001Direct I/O \u7684\u5206\u6790\u3002 \u4e0d\u8fc7\u51fa\u4e8e\u603b\u7ed3\u6027\u7684\u76ee\u7684\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u5148\u5bf9\u4e0b\u9762\u7684\u6280\u672f\u505a\u4e00\u4e2a\u524d\u77bb\u6027\u7684\u603b\u7ed3\u3002 DMA \u6280\u672f\u56de\u987e\uff1aDMA \u8d1f\u8d23\u5185\u5b58\u4e0e\u5176\u4ed6\u7ec4\u4ef6\u4e4b\u95f4\u7684\u6570\u636e\u62f7\u8d1d\uff0cCPU \u4ec5\u9700\u8d1f\u8d23\u7ba1\u7406\uff0c\u800c\u65e0\u9700\u8d1f\u8d23\u5168\u7a0b\u7684\u6570\u636e\u62f7\u8d1d\uff1b \u4f7f\u7528 page cache \u7684 zero copy\uff1a sendfile\uff1a\u4e00\u6b21\u4ee3\u66ff read/write \u7cfb\u7edf\u8c03\u7528\uff0c\u901a\u8fc7\u4f7f\u7528 DMA \u6280\u672f\u4ee5\u53ca\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5b9e\u73b0\u4e86 zero copy mmap\uff1a\u4ec5\u4ee3\u66ff read \u7cfb\u7edf\u8c03\u7528\uff0c\u5c06\u5185\u6838\u7a7a\u95f4\u5730\u5740\u6620\u5c04\u4e3a\u7528\u6237\u7a7a\u95f4\u5730\u5740\uff0cwrite \u64cd\u4f5c\u76f4\u63a5\u4f5c\u7528\u4e8e\u5185\u6838\u7a7a\u95f4\u3002\u901a\u8fc7 DMA \u6280\u672f\u4ee5\u53ca\u5730\u5740\u6620\u5c04\u6280\u672f\uff0c\u7528\u6237\u7a7a\u95f4\u4e0e\u5185\u6838\u7a7a\u95f4\u65e0\u987b\u6570\u636e\u62f7\u8d1d\uff0c\u5b9e\u73b0\u4e86 zero copy \u4e0d\u4f7f\u7528 page cache \u7684 Direct I/O\uff1a\u8bfb\u5199\u64cd\u4f5c\u76f4\u63a5\u5728\u78c1\u76d8\u4e0a\u8fdb\u884c\uff0c\u4e0d\u4f7f\u7528 page cache \u673a\u5236\uff0c\u901a\u5e38\u7ed3\u5408\u7528\u6237\u7a7a\u95f4\u7684\u7528\u6237\u7f13\u5b58\u4f7f\u7528\u3002\u901a\u8fc7 DMA \u6280\u672f\u76f4\u63a5\u4e0e\u78c1\u76d8/\u7f51\u5361\u8fdb\u884c\u6570\u636e\u4ea4\u4e92\uff0c\u5b9e\u73b0\u4e86 zero copy","title":"\u96f6\u62f7\u8d1d\u6280\u672f"},{"location":"chapter_5/3_zero_copy/#sendfile","text":"","title":"sendfile"},{"location":"chapter_5/3_zero_copy/#_3","text":"\u6211\u4eec\u5148\u6765\u56de\u5fc6\u4e00\u4e0b\uff0c\u670d\u52a1\u7aef\u53d1\u9001\u4e00\u4e2a\u6587\u4ef6\u7ed9\u5ba2\u6237\u7aef\u4e00\u822c\u9700\u8981\u8fdb\u884c\u4ec0\u4e48\u64cd\u4f5c\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u670d\u52a1\u7aef\u53d1\u9001\u4e00\u4e2a\u6587\u4ef6\u7ed9\u5ba2\u6237\u7aef\u7684\u6b65\u9aa4\u5982\u4e0b\uff1a \u9996\u5148\u9700\u8981\u8c03\u7528 read \u8bfb\u53d6\u6587\u4ef6\u7684\u6570\u636e\u5230\u7528\u6237\u7a7a\u95f4\u7f13\u51b2\u533a\u4e2d\u3002 \u7136\u540e\u518d\u8c03\u7528 write \u628a\u7f13\u51b2\u533a\u7684\u6570\u636e\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef Socket \u3002 \u4f2a\u4ee3\u7801\u5982\u4e0b\uff1a while ((n = read(file, buf, 4069)) > 0) { write(sock, buf , n); } \u5728\u4e0a\u9762\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8c03\u7528\u4e86 read \u548c write \u4e24\u4e2a\u7cfb\u7edf\u8c03\u7528\u3002 read \u7cfb\u7edf\u8c03\u7528\u662f\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u5230\u7528\u6237\u7a7a\u95f4\u7684\u7f13\u51b2\u533a\u4e2d\uff0c\u6240\u4ee5\u8c03\u7528 read \u65f6\u9700\u8981\u4ece\u5185\u6838\u7a7a\u95f4\u590d\u5236\u6570\u636e\u5230\u7528\u6237\u7a7a\u95f4\uff0c\u5982\u56fe 2 \u6240\u793a\uff1a \u56fe2 \u5c31\u662f\u6570\u636e\u7684\u590d\u5236\u8fc7\u7a0b\uff0c\u9996\u5148\u4f1a\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u5230\u5185\u6838\u7684 \u9875\u7f13\u5b58\uff08page cache\uff09 \uff0c\u7136\u540e\u518d\u4ece\u9875\u7f13\u5b58\u4e2d\u590d\u5236\u5230\u7528\u6237\u7a7a\u95f4\u7684\u7f13\u51b2\u533a\u4e2d\u3002 \u800c\u5f53\u8c03\u7528 write \u7cfb\u7edf\u8c03\u7528\u628a\u7528\u6237\u7a7a\u95f4\u7f13\u51b2\u533a\u4e2d\u7684\u6570\u636e\u53d1\u9001\u5230\u5ba2\u6237\u7aef Socket \u65f6\uff0c\u9996\u5148\u4f1a\u628a\u7f13\u51b2\u533a\u7684\u6570\u636e\u590d\u5236\u5230\u5185\u6838\u7684 Socket \u7f13\u51b2\u533a\u4e2d\uff0c\u7f51\u5361\u9a71\u52a8\u4f1a\u628a Socket \u7f13\u51b2\u533a\u7684\u6570\u636e\u53d1\u9001\u51fa\u53bb\uff0c\u5982\u56fe 3 \u6240\u793a\uff1a \u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u670d\u52a1\u7aef\u53d1\u9001\u6587\u4ef6\u7ed9\u5ba2\u6237\u7aef\u7684\u8fc7\u7a0b\u4e2d\u9700\u8981\u8fdb\u884c\u4e24\u6b21\u6570\u636e\u590d\u5236\uff0c\u7b2c\u4e00\u6b21\u662f\u4ece\u5185\u6838\u7a7a\u95f4\u7684\u9875\u7f13\u5b58\u590d\u5236\u5230\u7528\u6237\u7a7a\u95f4\u7684\u7f13\u51b2\u533a\uff0c\u7b2c\u4e8c\u6b21\u662f\u4ece\u7528\u6237\u7a7a\u95f4\u7684\u7f13\u51b2\u533a\u590d\u5236\u5230\u5185\u6838\u7a7a\u95f4\u7684 Socket \u7f13\u51b2\u533a\u3002 \u4ed4\u7ec6\u89c2\u5bdf\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e0a\u56fe\u4e2d\u7684\u9875\u7f13\u5b58\u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5\u590d\u5236\u5230 Socket \u7f13\u51b2\u533a\uff0c\u800c\u4e0d\u9700\u8981\u590d\u5236\u5230\u7528\u6237\u7a7a\u95f4\u7f13\u51b2\u533a\u7684\u3002\u5982\u56fe 4 \u6240\u793a\uff1a \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u4e0d\u9700\u8981\u7528\u6237\u7a7a\u95f4\u4f5c\u4e3a\u6570\u636e\u4e2d\u8f6c\u7684\u6280\u672f\u53eb \u96f6\u62f7\u8d1d\u6280\u672f \u3002\u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u54ea\u4e2a\u7cfb\u7edf\u8c03\u7528\u6765\u5b9e\u73b0\u4e0a\u56fe\u4e2d\u7684\u6280\u672f\u5462\uff1f\u7b54\u6848\u5c31\u662f sendfile \uff0c\u6211\u4eec\u6765\u770b\u770b sendfile \u7cfb\u7edf\u8c03\u7528\u7684\u539f\u578b\uff1a #include <sys/sendfile.h> ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count); \u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e0b sendfile \u5404\u4e2a\u53c2\u6570\u7684\u4f5c\u7528\uff1a out_fd\uff1a\u6570\u636e\u63a5\u6536\u65b9\u6587\u4ef6\u53e5\u67c4\uff08\u4e00\u822c\u4e3a Socket \u53e5\u67c4\uff09\u3002 in_fd\uff1a\u6570\u636e\u63d0\u4f9b\u65b9\u6587\u4ef6\u53e5\u67c4\uff08\u4e00\u822c\u4e3a\u6587\u4ef6\u53e5\u67c4\uff09\u3002 offset\uff1a\u5982\u679c offset \u4e0d\u4e3a NULL\uff0c\u8868\u793a\u4ece\u54ea\u91cc\u5f00\u59cb\u53d1\u9001\u6570\u636e\u7684\u504f\u79fb\u91cf\u3002 count\uff1a\u8868\u793a\u9700\u8981\u53d1\u9001\u591a\u5c11\u5b57\u8282\u7684\u6570\u636e\u3002 sendfile \u53d1\u9001\u6570\u636e\u7684\u8fc7\u7a0b\u5982\u56fe 5 \u6240\u793a\uff1a \u5bf9\u6bd4\u56fe 5 \u4e0e \u56fe 3\uff0c\u6211\u4eec\u53d1\u73b0\u4f7f\u7528 sendfile \u53ef\u4ee5\u51cf\u5c11\u4e00\u6b21\u7cfb\u7edf\u8c03\u7528\uff0c\u5e76\u4e14\u51cf\u5c11\u4e00\u6b21\u6570\u636e\u62f7\u8d1d\u8fc7\u7a0b\u3002","title":"\u53d1\u9001\u6587\u4ef6"},{"location":"chapter_5/3_zero_copy/#sendfile_1","text":"snedfile \u7684\u5e94\u7528\u573a\u666f\u662f\uff1a\u7528\u6237\u4ece\u78c1\u76d8\u8bfb\u53d6\u4e00\u4e9b\u6587\u4ef6\u6570\u636e\u540e\u4e0d\u9700\u8981\u7ecf\u8fc7\u4efb\u4f55\u8ba1\u7b97\u4e0e\u5904\u7406\u5c31\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u51fa\u53bb\u3002\u6b64\u573a\u666f\u7684\u5178\u578b\u5e94\u7528\u662f\u6d88\u606f\u961f\u5217\u3002 \u5728\u4f20\u7edf I/O \u4e0b\uff0c\u6b63\u5982\u7b2c\u4e00\u8282\u6240\u793a\uff0c\u4e0a\u8ff0\u5e94\u7528\u573a\u666f\u7684\u4e00\u6b21\u6570\u636e\u4f20\u8f93\u9700\u8981\u56db\u6b21 CPU \u5168\u6743\u8d1f\u8d23\u7684\u62f7\u8d1d\u4e0e\u56db\u6b21\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u6b63\u5982\u672c\u6587\u7b2c\u4e00\u8282\u6240\u8ff0\u3002 sendfile \u4e3b\u8981\u4f7f\u7528\u5230\u4e86\u4e24\u4e2a\u6280\u672f\uff1a DMA \u6280\u672f\uff1b \u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26\u4ee3\u66ff\u6570\u636e\u62f7\u8d1d\u3002","title":"sendfile\u7684\u5e94\u7528\u573a\u666f"},{"location":"chapter_5/3_zero_copy/#dma_1","text":"sendfile \u4f9d\u8d56\u4e8e DMA \u6280\u672f\uff0c\u5c06\u56db\u6b21 CPU \u5168\u7a0b\u8d1f\u8d23\u7684\u62f7\u8d1d\u4e0e\u56db\u6b21\u4e0a\u4e0b\u6587\u5207\u6362\u51cf\u5c11\u5230\u4e24\u6b21\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a DMA \u8d1f\u8d23 \u78c1\u76d8 \u5230 \u5185\u6838\u7a7a\u95f4\u4e2d\u7684 Page cache\uff08read buffer\uff09 \u7684\u6570\u636e\u62f7\u8d1d\u4ee5\u53ca\u4ece \u5185\u6838\u7a7a\u95f4\u4e2d\u7684 socket buffer \u5230 \u7f51\u5361 \u7684\u6570\u636e\u62f7\u8d1d\u3002","title":"\u5229\u7528 DMA \u6280\u672f"},{"location":"chapter_5/3_zero_copy/#_4","text":"\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u53ef\u4ee5\u4ee3\u66ff\u6570\u636e\u62f7\u8d1d\uff0c\u8fd9\u662f\u7531\u4e8e\u4e24\u4e2a\u539f\u56e0\uff1a page cache \u4ee5\u53ca socket buffer \u90fd\u5728\u5185\u6838\u7a7a\u95f4\u4e2d\uff1b \u6570\u636e\u4f20\u8f93\u8fc7\u7a0b\u524d\u540e\u6ca1\u6709\u4efb\u4f55\u5199\u64cd\u4f5c\u3002","title":"\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26\u4ee3\u66ff\u6570\u636e\u62f7\u8d1d"},{"location":"chapter_5/3_zero_copy/#_5","text":"\u7531\u4e8e sendfile \u4ec5\u4ec5\u5bf9\u5e94\u4e00\u6b21\u7cfb\u7edf\u8c03\u7528\uff0c\u800c\u4f20\u7edf\u6587\u4ef6\u64cd\u4f5c\u5219\u9700\u8981\u4f7f\u7528 read \u4ee5\u53ca write \u4e24\u4e2a\u7cfb\u7edf\u8c03\u7528\u3002 \u6b63\u56e0\u4e3a\u5982\u6b64\uff0c sendfile \u80fd\u591f\u5c06\u7528\u6237\u6001\u4e0e\u5185\u6838\u6001\u4e4b\u95f4\u7684\u4e0a\u4e0b\u6587\u5207\u6362\u4ece 4 \u6b21\u51cf\u5c11\u5230 2 \u6b21\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u6211\u4eec\u9700\u8981\u6ce8\u610f sendfile \u7cfb\u7edf\u8c03\u7528\u7684\u5c40\u9650\u6027\u3002\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u5bf9\u4ece\u78c1\u76d8\u8bfb\u53d6\u7684\u6570\u636e\u8fdb\u884c\u5199\u64cd\u4f5c\uff0c\u4f8b\u5982\u89e3\u5bc6\u6216\u52a0\u5bc6\uff0c\u90a3\u4e48 sendfile \u7cfb\u7edf\u8c03\u7528\u5c31\u5b8c\u5168\u6ca1\u6cd5\u7528\u3002\u8fd9\u662f\u56e0\u4e3a\u7528\u6237\u7ebf\u7a0b\u6839\u672c\u5c31\u4e0d\u80fd\u591f\u901a\u8fc7 sendfile \u7cfb\u7edf\u8c03\u7528\u5f97\u5230\u4f20\u8f93\u7684\u6570\u636e\u3002","title":"\u4e00\u6b21\u7cfb\u7edf\u8c03\u7528\u4ee3\u66ff\u4e24\u6b21\u7cfb\u7edf\u8c03\u7528"},{"location":"chapter_5/3_zero_copy/#mmap","text":"","title":"mmap"},{"location":"chapter_5/3_zero_copy/#_6","text":"\u4e00\u822c\u6765\u8bf4\uff0c\u4fee\u6539\u4e00\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u9700\u8981\u5982\u4e0b3\u4e2a\u6b65\u9aa4\uff1a \u628a\u6587\u4ef6\u5185\u5bb9\u8bfb\u5165\u5230\u5185\u5b58\u4e2d\u3002 \u4fee\u6539\u5185\u5b58\u4e2d\u7684\u5185\u5bb9\u3002 \u628a\u5185\u5b58\u7684\u6570\u636e\u5199\u5165\u5230\u6587\u4ef6\u4e2d\u3002 \u8fc7\u7a0b\u5982\u56fe 1 \u6240\u793a\uff1a \u5982\u679c\u4f7f\u7528\u4ee3\u7801\u6765\u5b9e\u73b0\u4e0a\u9762\u7684\u8fc7\u7a0b\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a read(fd, buf, 1024); // \u8bfb\u53d6\u6587\u4ef6\u7684\u5185\u5bb9\u5230buf ...// \u4fee\u6539buf\u7684\u5185\u5bb9 write(fd, buf, 1024); // \u628abuf\u7684\u5185\u5bb9\u5199\u5165\u5230\u6587\u4ef6 \u4ece\u56fe 1 \u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c \u9875\u7f13\u5b58(page cache) \u662f\u8bfb\u5199\u6587\u4ef6\u65f6\u7684\u4e2d\u95f4\u5c42\uff0c\u5185\u6838\u4f7f\u7528 \u9875\u7f13\u5b58 \u4e0e\u6587\u4ef6\u7684\u6570\u636e\u5757\u5173\u8054\u8d77\u6765\u3002\u6240\u4ee5\u5e94\u7528\u7a0b\u5e8f\u8bfb\u5199\u6587\u4ef6\u65f6\uff0c\u5b9e\u9645\u64cd\u4f5c\u7684\u662f \u9875\u7f13\u5b58 \u3002","title":"\u4e00 \u4f20\u7edf\u7684\u8bfb\u5199\u6587\u4ef6"},{"location":"chapter_5/3_zero_copy/#mmap_1","text":"\u4ece\u4f20\u7edf\u8bfb\u5199\u6587\u4ef6\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6709\u4e2a\u5730\u65b9\u53ef\u4ee5\u4f18\u5316\uff1a\u5982\u679c\u53ef\u4ee5\u76f4\u63a5\u5728\u7528\u6237\u7a7a\u95f4\u8bfb\u5199 \u9875\u7f13\u5b58 \uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u514d\u53bb\u5c06 \u9875\u7f13\u5b58 \u7684\u6570\u636e\u590d\u5236\u5230\u7528\u6237\u7a7a\u95f4\u7f13\u51b2\u533a\u7684\u8fc7\u7a0b\u3002 \u90a3\u4e48\uff0c\u6709\u6ca1\u6709\u8fd9\u6837\u7684\u6280\u672f\u80fd\u5b9e\u73b0\u4e0a\u9762\u6240\u8bf4\u7684\u65b9\u5f0f\u5462\uff1f\u7b54\u6848\u662f\u80af\u5b9a\u7684\uff0c\u5c31\u662f mmap \u3002 \u4f7f\u7528 mmap \u7cfb\u7edf\u8c03\u7528\u53ef\u4ee5\u5c06\u7528\u6237\u7a7a\u95f4\u7684\u865a\u62df\u5185\u5b58\u5730\u5740\u4e0e\u6587\u4ef6\u8fdb\u884c\u6620\u5c04\uff08\u7ed1\u5b9a\uff09\uff0c\u5bf9\u6620\u5c04\u540e\u7684\u865a\u62df\u5185\u5b58\u5730\u5740\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\u5c31\u5982\u540c\u5bf9\u6587\u4ef6\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\u4e00\u6837\u3002\u539f\u7406\u5982\u56fe 2 \u6240\u793a\uff1a","title":"\u4e8c\u3001\u4f7f\u7528 mmap \u8bfb\u5199\u6587\u4ef6"},{"location":"chapter_5/3_zero_copy/#mmap_2","text":"\u4e0b\u9762\u6211\u4eec\u4ecb\u7ecd\u4e00\u4e0b\u600e\u4e48\u4f7f\u7528 mmap \uff0c mmap \u51fd\u6570 \u7684\u539f\u578b\u5982\u4e0b\uff1a void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset); \u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e0b mmap \u51fd\u6570 \u7684\u5404\u4e2a\u53c2\u6570\u4f5c\u7528\uff1a addr\uff1a\u6307\u5b9a\u6620\u5c04\u7684\u865a\u62df\u5185\u5b58\u5730\u5740\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e3a NULL\uff0c\u8ba9 Linux \u5185\u6838\u81ea\u52a8\u9009\u62e9\u5408\u9002\u7684\u865a\u62df\u5185\u5b58\u5730\u5740\u3002 length\uff1a\u6620\u5c04\u7684\u957f\u5ea6\u3002 prot\uff1a\u6620\u5c04\u5185\u5b58\u7684\u4fdd\u62a4\u6a21\u5f0f\uff0c\u53ef\u9009\u503c\u5982\u4e0b\uff1a PROT_EXEC\uff1a\u53ef\u4ee5\u88ab\u6267\u884c\u3002 PROT_READ\uff1a\u53ef\u4ee5\u88ab\u8bfb\u53d6\u3002 PROT_WRITE\uff1a\u53ef\u4ee5\u88ab\u5199\u5165\u3002 PROT_NONE\uff1a\u4e0d\u53ef\u8bbf\u95ee\u3002 flags\uff1a\u6307\u5b9a\u6620\u5c04\u7684\u7c7b\u578b\uff0c\u5e38\u7528\u7684\u53ef\u9009\u503c\u5982\u4e0b\uff1a MAP_FIXED\uff1a\u4f7f\u7528\u6307\u5b9a\u7684\u8d77\u59cb\u865a\u62df\u5185\u5b58\u5730\u5740\u8fdb\u884c\u6620\u5c04\u3002 MAP_SHARED\uff1a\u4e0e\u5176\u5b83\u6240\u6709\u6620\u5c04\u5230\u8fd9\u4e2a\u6587\u4ef6\u7684\u8fdb\u7a0b\u5171\u4eab\u6620\u5c04\u7a7a\u95f4\uff08\u53ef\u5b9e\u73b0\u5171\u4eab\u5185\u5b58\uff09\u3002 MAP_PRIVATE\uff1a\u5efa\u7acb\u4e00\u4e2a\u5199\u65f6\u590d\u5236\uff08Copy on Write\uff09\u7684\u79c1\u6709\u6620\u5c04\u7a7a\u95f4\u3002 MAP_LOCKED\uff1a\u9501\u5b9a\u6620\u5c04\u533a\u7684\u9875\u9762\uff0c\u4ece\u800c\u9632\u6b62\u9875\u9762\u88ab\u4ea4\u6362\u51fa\u5185\u5b58\u3002 ... fd\uff1a\u8fdb\u884c\u6620\u5c04\u7684\u6587\u4ef6\u53e5\u67c4\u3002 offset\uff1a\u6587\u4ef6\u504f\u79fb\u91cf\uff08\u4ece\u6587\u4ef6\u7684\u4f55\u5904\u5f00\u59cb\u6620\u5c04\uff09\u3002 \u4ecb\u7ecd\u5b8c mmap \u51fd\u6570 \u7684\u539f\u578b\u540e\uff0c\u6211\u4eec\u73b0\u5728\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u4ecb\u7ecd\u600e\u4e48\u4f7f\u7528 mmap\uff1a int fd = open(filepath, O_RDWR, 0644); // \u6253\u5f00\u6587\u4ef6 void *addr = mmap(NULL, 8192, PROT_WRITE, MAP_SHARED, fd, 4096); // \u5bf9\u6587\u4ef6\u8fdb\u884c\u6620\u5c04 \u5728\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5148\u901a\u8fc7 open \u51fd\u6570\u4ee5\u53ef\u8bfb\u5199\u7684\u65b9\u5f0f\u6253\u5f00\u6587\u4ef6\uff0c\u7136\u540e\u901a\u8fc7 mmap \u51fd\u6570\u5bf9\u6587\u4ef6\u8fdb\u884c\u6620\u5c04\uff0c\u6620\u5c04\u7684\u65b9\u5f0f\u5982\u4e0b\uff1a addr \u53c2\u6570\u8bbe\u7f6e\u4e3a NULL\uff0c\u8868\u793a\u8ba9\u64cd\u4f5c\u7cfb\u7edf\u81ea\u52a8\u9009\u62e9\u5408\u9002\u7684\u865a\u62df\u5185\u5b58\u5730\u5740\u8fdb\u884c\u6620\u5c04\u3002 length \u53c2\u6570\u8bbe\u7f6e\u4e3a 8192 \u8868\u793a\u6620\u5c04\u7684\u533a\u57df\u4e3a 2 \u4e2a\u5185\u5b58\u9875\u7684\u5927\u5c0f\uff08\u4e00\u4e2a\u5185\u5b58\u9875\u7684\u5927\u5c0f\u4e3a 4 KB\uff09\u3002 prot \u53c2\u6570\u8bbe\u7f6e\u4e3a PROT_WRITE \u8868\u793a\u6620\u5c04\u7684\u5185\u5b58\u533a\u4e3a\u53ef\u8bfb\u5199\u3002 flags \u53c2\u6570\u8bbe\u7f6e\u4e3a MAP_SHARED \u8868\u793a\u5171\u4eab\u6620\u5c04\u533a\u3002 fd \u53c2\u6570\u8bbe\u7f6e\u6253\u5f00\u7684\u6587\u4ef6\u53e5\u67c4\u3002 offset \u53c2\u6570\u8bbe\u7f6e\u4e3a 4096 \u8868\u793a\u4ece\u6587\u4ef6\u7684 4096 \u5904\u5f00\u59cb\u6620\u5c04\u3002 mmap \u51fd\u6570\u4f1a\u8fd4\u56de\u6620\u5c04\u540e\u7684\u5185\u5b58\u5730\u5740\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6b64\u5185\u5b58\u5730\u5740\u5bf9\u6587\u4ef6\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\u3002\u6211\u4eec\u901a\u8fc7\u56fe 3 \u5c55\u793a\u4e0a\u9762\u4f8b\u5b50\u5728\u5185\u6838\u4e2d\u7684\u7ed3\u6784\uff1a","title":"\u4e09\u3001mmap\u7684\u4f7f\u7528\u65b9\u5f0f"},{"location":"chapter_5/3_zero_copy/#_7","text":"\u524d\u9762\u6211\u4eec\u4ecb\u7ecd\u8fc7\uff0c\u8bfb\u5199\u6587\u4ef6\u90fd\u9700\u8981\u7ecf\u8fc7 \u9875\u7f13\u5b58 \uff0c\u6240\u4ee5 mmap \u6620\u5c04\u7684\u6b63\u662f\u6587\u4ef6\u7684 \u9875\u7f13\u5b58 \uff0c\u800c\u975e\u78c1\u76d8\u4e2d\u7684\u6587\u4ef6\u672c\u8eab\u3002\u7531\u4e8e mmap \u6620\u5c04\u7684\u662f\u6587\u4ef6\u7684 \u9875\u7f13\u5b58 \uff0c\u6240\u4ee5\u5c31\u6d89\u53ca\u5230 \u540c\u6b65\u7684\u95ee\u9898 \uff0c\u5373 \u9875\u7f13\u5b58 \u4f1a\u5728\u4ec0\u4e48\u65f6\u5019\u628a\u6570\u636e\u540c\u6b65\u5230\u78c1\u76d8\u3002 Linux \u5185\u6838\u5e76\u4e0d\u4f1a\u4e3b\u52a8\u628a mmap \u6620\u5c04\u7684 \u9875\u7f13\u5b58 \u540c\u6b65\u5230\u78c1\u76d8\uff0c\u800c\u662f\u9700\u8981\u7528\u6237\u4e3b\u52a8\u89e6\u53d1\u3002\u540c\u6b65 mmap \u6620\u5c04\u7684\u5185\u5b58\u5230\u78c1\u76d8\u6709 4 \u4e2a\u65f6\u673a\uff1a \u8c03\u7528 msync \u51fd\u6570\u4e3b\u52a8\u8fdb\u884c\u6570\u636e\u540c\u6b65\uff08\u4e3b\u52a8\uff09\u3002 \u8c03\u7528 munmap \u51fd\u6570\u5bf9\u6587\u4ef6\u8fdb\u884c\u89e3\u9664\u6620\u5c04\u5173\u7cfb\u65f6\uff08\u4e3b\u52a8\uff09\u3002 \u8fdb\u7a0b\u9000\u51fa\u65f6\uff08\u88ab\u52a8\uff09\u3002 \u7cfb\u7edf\u5173\u673a\u65f6\uff08\u88ab\u52a8\uff09\u3002","title":"\u6587\u4ef6\u540c\u6b65\u5230\u78c1\u76d8\u7684\u65f6\u673a"},{"location":"chapter_5/3_zero_copy/#direct-io","text":"Direct I/O \u5373 \u76f4\u63a5 I/O \u3002\u5176\u540d\u5b57\u4e2d\u7684 \u76f4\u63a5 \u4e8c\u5b57\u7528\u4e8e\u533a\u5206\u4f7f\u7528 page cache \u673a\u5236\u7684 \u7f13\u5b58 I/O \u3002 \u7f13\u5b58\u6587\u4ef6 I/O\uff1a\u7528\u6237\u7a7a\u95f4\u8981\u8bfb\u5199\u4e00\u4e2a\u6587\u4ef6\u5e76\u4e0d\u76f4\u63a5\u4e0e\u78c1\u76d8\u4ea4\u4e92\uff0c\u800c\u662f\u4e2d\u95f4\u5939\u4e86\u4e00\u5c42\u7f13\u5b58\uff0c\u5373 page cache\uff1b \u76f4\u63a5\u6587\u4ef6 I/O\uff1a\u7528\u6237\u7a7a\u95f4\u8bfb\u53d6\u7684\u6587\u4ef6\u76f4\u63a5\u4e0e\u78c1\u76d8\u4ea4\u4e92\uff0c\u6ca1\u6709\u4e2d\u95f4 page cache \u5c42\u3002 \u201c\u76f4\u63a5\u201d\u5728\u8fd9\u91cc\u8fd8\u6709\u53e6\u4e00\u5c42\u8bed\u4e49\uff1a\u5176\u4ed6\u6240\u6709\u6280\u672f\u4e2d\uff0c\u6570\u636e\u81f3\u5c11\u9700\u8981\u5728\u5185\u6838\u7a7a\u95f4\u5b58\u50a8\u4e00\u4efd\uff0c\u4f46\u662f\u5728 Direct I/O \u6280\u672f\u4e2d\uff0c\u6570\u636e\u76f4\u63a5\u5b58\u50a8\u5728\u7528\u6237\u7a7a\u95f4\u4e2d\uff0c\u7ed5\u8fc7\u4e86\u5185\u6838\u3002 Direct I/O \u6a21\u5f0f\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6b64\u65f6\u7528\u6237\u7a7a\u95f4\u76f4\u63a5\u901a\u8fc7 DMA \u7684\u65b9\u5f0f\u4e0e\u78c1\u76d8\u4ee5\u53ca\u7f51\u5361\u8fdb\u884c\u6570\u636e\u62f7\u8d1d\u3002 Direct I/O \u7684\u8bfb\u5199\u975e\u5e38\u6709\u7279\u70b9\uff1a Write \u64cd\u4f5c\uff1a\u7531\u4e8e\u5176\u4e0d\u4f7f\u7528 page cache\uff0c\u6240\u4ee5\u5176\u8fdb\u884c\u5199\u6587\u4ef6\uff0c\u5982\u679c\u8fd4\u56de\u6210\u529f\uff0c\u6570\u636e\u5c31\u771f\u7684\u843d\u76d8\u4e86\uff08\u4e0d\u8003\u8651\u78c1\u76d8\u81ea\u5e26\u7684\u7f13\u5b58\uff09\uff1b Read \u64cd\u4f5c\uff1a\u7531\u4e8e\u5176\u4e0d\u4f7f\u7528 page cache\uff0c\u6bcf\u6b21\u8bfb\u64cd\u4f5c\u662f\u771f\u7684\u4ece\u78c1\u76d8\u4e2d\u8bfb\u53d6\uff0c\u4e0d\u4f1a\u4ece\u6587\u4ef6\u7cfb\u7edf\u7684\u7f13\u5b58\u4e2d\u8bfb\u53d6\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u5373\u4f7f Direct I/O \u8fd8\u662f\u53ef\u80fd\u9700\u8981\u4f7f\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684 fsync \u7cfb\u7edf\u8c03\u7528\u3002\u4e3a\u4ec0\u4e48\uff1f \u8fd9\u662f\u56e0\u4e3a\u867d\u7136\u6587\u4ef6\u7684\u6570\u636e\u672c\u8eab\u6ca1\u6709\u4f7f\u7528\u4efb\u4f55\u7f13\u5b58\uff0c\u4f46\u662f\u6587\u4ef6\u7684\u5143\u6570\u636e\u4ecd\u7136\u9700\u8981\u7f13\u5b58\uff0c\u5305\u62ec VFS \u4e2d\u7684 inode cache \u548c dentry cache \u7b49 \u5728\u90e8\u5206\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u5728 Direct I/O \u6a21\u5f0f\u4e0b\u8fdb\u884c write \u7cfb\u7edf\u8c03\u7528\u80fd\u591f\u786e\u4fdd\u6587\u4ef6\u6570\u636e\u843d\u76d8\uff0c\u4f46\u662f\u6587\u4ef6\u5143\u6570\u636e\u4e0d\u4e00\u5b9a\u843d\u76d8\u3002\u5982\u679c\u5728\u6b64\u7c7b\u64cd\u4f5c\u7cfb\u7edf\u4e0a\uff0c\u90a3\u4e48\u8fd8\u9700\u8981\u6267\u884c\u4e00\u6b21 fsync \u7cfb\u7edf\u8c03\u7528\u786e\u4fdd\u6587\u4ef6\u5143\u6570\u636e\u4e5f\u843d\u76d8\u3002\u5426\u5219\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6587\u4ef6\u5f02\u5e38\u3001\u5143\u6570\u636e\u786e\u5b9e\u7b49\u60c5\u51b5\u3002MySQL \u7684 O_DIRECT \u4e0e O_DIRECT_NO_FSYNC \u914d\u7f6e\u662f\u4e00\u4e2a\u5177\u4f53\u6848\u4f8b\u3002 Direct I/O \u7684\u4f18\u7f3a\u70b9\uff1a \u4f18\u70b9\uff1a Linux \u4e2d\u7684\u76f4\u63a5 I/O \u6280\u672f\u7701\u7565\u6389\u7f13\u5b58 I/O \u6280\u672f\u4e2d\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u7f13\u51b2\u533a\u7684\u4f7f\u7528\uff0c\u6570\u636e\u76f4\u63a5\u5728\u5e94\u7528\u7a0b\u5e8f\u5730\u5740\u7a7a\u95f4\u548c\u78c1\u76d8\u4e4b\u95f4\u8fdb\u884c\u4f20\u8f93\uff0c\u4ece\u800c\u4f7f\u5f97\u81ea\u7f13\u5b58\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u7701\u7565\u6389\u590d\u6742\u7684\u7cfb\u7edf\u7ea7\u522b\u7684\u7f13\u5b58\u7ed3\u6784\uff0c\u800c\u6267\u884c\u7a0b\u5e8f\u81ea\u5df1\u5b9a\u4e49\u7684\u6570\u636e\u8bfb\u5199\u7ba1\u7406\uff0c\u4ece\u800c\u964d\u4f4e\u7cfb\u7edf\u7ea7\u522b\u7684\u7ba1\u7406\u5bf9\u5e94\u7528\u7a0b\u5e8f\u8bbf\u95ee\u6570\u636e\u7684\u5f71\u54cd\u3002 \u4e0e\u5176\u4ed6\u96f6\u62f7\u8d1d\u6280\u672f\u4e00\u6837\uff0c\u907f\u514d\u4e86\u5185\u6838\u7a7a\u95f4\u5230\u7528\u6237\u7a7a\u95f4\u7684\u6570\u636e\u62f7\u8d1d\uff0c\u5982\u679c\u8981\u4f20\u8f93\u7684\u6570\u636e\u91cf\u5f88\u5927\uff0c\u4f7f\u7528\u76f4\u63a5 I/O \u7684\u65b9\u5f0f\u8fdb\u884c\u6570\u636e\u4f20\u8f93\uff0c\u800c\u4e0d\u9700\u8981\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u5730\u5740\u7a7a\u95f4\u62f7\u8d1d\u6570\u636e\u64cd\u4f5c\u7684\u53c2\u4e0e\uff0c\u8fd9\u5c06\u4f1a\u5927\u5927\u63d0\u9ad8\u6027\u80fd\u3002 \u7f3a\u70b9\uff1a \u7531\u4e8e\u8bbe\u5907\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\u662f\u901a\u8fc7 DMA \u5b8c\u6210\u7684\uff0c\u56e0\u6b64\u7528\u6237\u7a7a\u95f4\u7684\u6570\u636e\u7f13\u51b2\u533a\u5185\u5b58\u9875\u5fc5\u987b\u8fdb\u884c page pinning\uff08\u9875\u9501\u5b9a\uff09\uff0c\u8fd9\u662f\u4e3a\u4e86\u9632\u6b62\u5176\u7269\u7406\u9875\u6846\u5730\u5740\u88ab\u4ea4\u6362\u5230\u78c1\u76d8\u6216\u8005\u88ab\u79fb\u52a8\u5230\u65b0\u7684\u5730\u5740\u800c\u5bfc\u81f4 DMA \u53bb\u62f7\u8d1d\u6570\u636e\u7684\u65f6\u5019\u5728\u6307\u5b9a\u7684\u5730\u5740\u627e\u4e0d\u5230\u5185\u5b58\u9875\u4ece\u800c\u5f15\u53d1\u7f3a\u9875\u9519\u8bef\uff0c\u800c\u9875\u9501\u5b9a\u7684\u5f00\u9500\u5e76\u4e0d\u6bd4 CPU \u62f7\u8d1d\u5c0f\uff0c\u6240\u4ee5\u4e3a\u4e86\u907f\u514d\u9891\u7e41\u7684\u9875\u9501\u5b9a\u7cfb\u7edf\u8c03\u7528\uff0c\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u5206\u914d\u548c\u6ce8\u518c\u4e00\u4e2a\u6301\u4e45\u7684\u5185\u5b58\u6c60\uff0c\u7528\u4e8e\u6570\u636e\u7f13\u51b2\u3002 \u5982\u679c\u8bbf\u95ee\u7684\u6570\u636e\u4e0d\u5728\u5e94\u7528\u7a0b\u5e8f\u7f13\u5b58\u4e2d\uff0c\u90a3\u4e48\u6bcf\u6b21\u6570\u636e\u90fd\u4f1a\u76f4\u63a5\u4ece\u78c1\u76d8\u8fdb\u884c\u52a0\u8f7d\uff0c\u8fd9\u79cd\u76f4\u63a5\u52a0\u8f7d\u4f1a\u975e\u5e38\u7f13\u6162\u3002 \u5728\u5e94\u7528\u5c42\u5f15\u5165\u76f4\u63a5 I/O \u9700\u8981\u5e94\u7528\u5c42\u81ea\u5df1\u7ba1\u7406\uff0c\u8fd9\u5e26\u6765\u4e86\u989d\u5916\u7684\u7cfb\u7edf\u590d\u6742\u6027\u3002 \u8c01\u4f1a\u4f7f\u7528 Direct I/O\uff1f IBM\u7684\u4e00\u7bc7\u6587\u7ae0[2]\u6307\u51fa\uff0c\u81ea\u7f13\u5b58\u5e94\u7528\u7a0b\u5e8f\uff08 self-caching applications\uff09\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 Direct I/O\u3002 \u81ea\u7f13\u5b58\u5e94\u7528\u7a0b\u5e8f \u5bf9\u4e8e\u67d0\u4e9b\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\uff0c\u5b83\u4f1a\u6709\u5b83\u81ea\u5df1\u7684\u6570\u636e\u7f13\u5b58\u673a\u5236\uff0c\u6bd4\u5982\uff0c\u5b83\u4f1a\u5c06\u6570\u636e\u7f13\u5b58\u5728\u5e94\u7528\u7a0b\u5e8f\u5730\u5740\u7a7a\u95f4\uff0c\u8fd9\u7c7b\u5e94\u7528\u7a0b\u5e8f\u5b8c\u5168\u4e0d\u9700\u8981\u4f7f\u7528\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u4e2d\u7684\u9ad8\u901f\u7f13\u51b2\u5b58\u50a8\u5668\uff0c\u8fd9\u7c7b\u5e94\u7528\u7a0b\u5e8f\u5c31\u88ab\u79f0\u4f5c\u662f\u81ea\u7f13\u5b58\u5e94\u7528\u7a0b\u5e8f\uff08 self-caching applications \uff09\u3002 \u4f8b\u5982\uff0c\u5e94\u7528\u5185\u90e8\u7ef4\u62a4\u4e00\u4e2a\u7f13\u5b58\u7a7a\u95f4\uff0c\u5f53\u6709\u8bfb\u64cd\u4f5c\u65f6\uff0c\u9996\u5148\u8bfb\u53d6\u5e94\u7528\u5c42\u7684\u7f13\u5b58\u6570\u636e\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u90a3\u4e48\u5c31\u901a\u8fc7 Direct I/O \u76f4\u63a5\u901a\u8fc7\u78c1\u76d8 I/O \u6765\u8bfb\u53d6\u6570\u636e\u3002\u7f13\u5b58\u4ecd\u7136\u5728\u5e94\u7528\uff0c\u53ea\u4e0d\u8fc7\u5e94\u7528\u89c9\u5f97\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e2a\u7f13\u5b58\u6bd4\u64cd\u4f5c\u7cfb\u7edf\u7684\u7f13\u5b58\u66f4\u9ad8\u6548\u3002 \u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\u662f\u8fd9\u7c7b\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u4e2a\u4ee3\u8868\u3002\u81ea\u7f13\u5b58\u5e94\u7528\u7a0b\u5e8f\u503e\u5411\u4e8e\u4f7f\u7528\u6570\u636e\u7684\u903b\u8f91\u8868\u8fbe\u65b9\u5f0f\uff0c\u800c\u975e\u7269\u7406\u8868\u8fbe\u65b9\u5f0f\uff1b\u5f53\u7cfb\u7edf\u5185\u5b58\u8f83\u4f4e\u7684\u65f6\u5019\uff0c\u81ea\u7f13\u5b58\u5e94\u7528\u7a0b\u5e8f\u4f1a\u8ba9\u8fd9\u79cd\u6570\u636e\u7684\u903b\u8f91\u7f13\u5b58\u88ab\u6362\u51fa\uff0c\u800c\u5e76\u975e\u662f\u78c1\u76d8\u4e0a\u5b9e\u9645\u7684\u6570\u636e\u88ab\u6362\u51fa\u3002\u81ea\u7f13\u5b58\u5e94\u7528\u7a0b\u5e8f\u5bf9\u8981\u64cd\u4f5c\u7684\u6570\u636e\u7684\u8bed\u4e49\u4e86\u5982\u6307\u638c\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u91c7\u7528\u66f4\u52a0\u9ad8\u6548\u7684\u7f13\u5b58\u66ff\u6362\u7b97\u6cd5\u3002\u81ea\u7f13\u5b58\u5e94\u7528\u7a0b\u5e8f\u6709\u53ef\u80fd\u4f1a\u5728\u591a\u53f0\u4e3b\u673a\u4e4b\u95f4\u5171\u4eab\u4e00\u5757\u5185\u5b58\uff0c\u90a3\u4e48\u81ea\u7f13\u5b58\u5e94\u7528\u7a0b\u5e8f\u5c31\u9700\u8981\u63d0\u4f9b\u4e00\u79cd\u80fd\u591f\u6709\u6548\u5730\u5c06\u7528\u6237\u5730\u5740\u7a7a\u95f4\u7684\u7f13\u5b58\u6570\u636e\u7f6e\u4e3a\u65e0\u6548\u7684\u673a\u5236\uff0c\u4ece\u800c\u786e\u4fdd\u5e94\u7528\u7a0b\u5e8f\u5730\u5740\u7a7a\u95f4\u7f13\u5b58\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u76ee\u524d Linux \u4e0a\u7684\u5f02\u6b65 IO \u5e93\uff0c\u5176\u4f9d\u8d56\u4e8e\u6587\u4ef6\u4f7f\u7528 O_DIRECT \u6a21\u5f0f\u6253\u5f00\uff0c\u5b83\u4eec\u901a\u5e38\u4e00\u8d77\u914d\u5408\u4f7f\u7528\u3002 \u5982\u4f55\u4f7f\u7528 Direct I/O\uff1f \u7528\u6237\u5e94\u7528\u9700\u8981\u5b9e\u73b0\u7528\u6237\u7a7a\u95f4\u5185\u7684\u7f13\u5b58\u533a\uff0c\u8bfb/\u5199\u64cd\u4f5c\u5e94\u5f53\u5c3d\u91cf\u901a\u8fc7\u6b64\u7f13\u5b58\u533a\u63d0\u4f9b\u3002\u5982\u679c\u6709\u6027\u80fd\u4e0a\u7684\u8003\u8651\uff0c\u90a3\u4e48\u5c3d\u91cf\u907f\u514d\u9891\u7e41\u5730\u57fa\u4e8e Direct I/O \u8fdb\u884c\u8bfb/\u5199\u64cd\u4f5c\u3002","title":"Direct I/O"},{"location":"chapter_5/3_zero_copy/#_8","text":"DMA \u6280\u672f\u7684\u63a8\u51fa\u4f7f\u5f97\u5185\u5b58\u4e0e\u5176\u4ed6\u7ec4\u4ef6\uff0c\u4f8b\u5982\u78c1\u76d8\u3001\u7f51\u5361\u8fdb\u884c\u6570\u636e\u62f7\u8d1d\u65f6\uff0cCPU \u4ec5\u4ec5\u9700\u8981\u53d1\u51fa\u63a7\u5236\u4fe1\u53f7\uff0c\u800c\u62f7\u8d1d\u6570\u636e\u7684\u8fc7\u7a0b\u5219\u7531 DMA \u8d1f\u8d23\u5b8c\u6210\u3002 Linux \u7684\u96f6\u62f7\u8d1d\u6280\u672f\u6709\u591a\u79cd\u5b9e\u73b0\u7b56\u7565\uff0c\u4f46\u6839\u636e\u7b56\u7565\u53ef\u4ee5\u5206\u4e3a\u5982\u4e0b\u51e0\u79cd\u7c7b\u578b\uff1a \u51cf\u5c11\u751a\u81f3\u907f\u514d\u7528\u6237\u7a7a\u95f4\u548c\u5185\u6838\u7a7a\u95f4\u4e4b\u95f4\u7684\u6570\u636e\u62f7\u8d1d\uff1a\u5728\u4e00\u4e9b\u573a\u666f\u4e0b\uff0c\u7528\u6237\u8fdb\u7a0b\u5728\u6570\u636e\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u5e76\u4e0d\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u8bbf\u95ee\u548c\u5904\u7406\uff0c\u90a3\u4e48\u6570\u636e\u5728 Linux \u7684 Page Cache \u548c\u7528\u6237\u8fdb\u7a0b\u7684\u7f13\u51b2\u533a\u4e4b\u95f4\u7684\u4f20\u8f93\u5c31\u5b8c\u5168\u53ef\u4ee5\u907f\u514d\uff0c\u8ba9\u6570\u636e\u62f7\u8d1d\u5b8c\u5168\u5728\u5185\u6838\u91cc\u8fdb\u884c\uff0c\u751a\u81f3\u53ef\u4ee5\u901a\u8fc7\u66f4\u5de7\u5999\u7684\u65b9\u5f0f\u907f\u514d\u5728\u5185\u6838\u91cc\u7684\u6570\u636e\u62f7\u8d1d\u3002\u8fd9\u4e00\u7c7b\u5b9e\u73b0\u4e00\u822c\u662f\u662f\u901a\u8fc7\u589e\u52a0\u65b0\u7684\u7cfb\u7edf\u8c03\u7528\u6765\u5b8c\u6210\u7684\uff0c\u6bd4\u5982 Linux \u4e2d\u7684 mmap()\uff0csendfile() \u4ee5\u53ca splice() \u7b49\u3002 \u7ed5\u8fc7\u5185\u6838\u7684\u76f4\u63a5 I/O\uff1a\u5141\u8bb8\u5728\u7528\u6237\u6001\u8fdb\u7a0b\u7ed5\u8fc7\u5185\u6838\u76f4\u63a5\u548c\u786c\u4ef6\u8fdb\u884c\u6570\u636e\u4f20\u8f93\uff0c\u5185\u6838\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u53ea\u8d1f\u8d23\u4e00\u4e9b\u7ba1\u7406\u548c\u8f85\u52a9\u7684\u5de5\u4f5c\u3002\u8fd9\u79cd\u65b9\u5f0f\u5176\u5b9e\u548c\u7b2c\u4e00\u79cd\u6709\u70b9\u7c7b\u4f3c\uff0c\u4e5f\u662f\u8bd5\u56fe\u907f\u514d\u7528\u6237\u7a7a\u95f4\u548c\u5185\u6838\u7a7a\u95f4\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\uff0c\u53ea\u662f\u7b2c\u4e00\u79cd\u65b9\u5f0f\u662f\u628a\u6570\u636e\u4f20\u8f93\u8fc7\u7a0b\u653e\u5728\u5185\u6838\u6001\u5b8c\u6210\uff0c\u800c\u8fd9\u79cd\u65b9\u5f0f\u5219\u662f\u76f4\u63a5\u7ed5\u8fc7\u5185\u6838\u548c\u786c\u4ef6\u901a\u4fe1\uff0c\u6548\u679c\u7c7b\u4f3c\u4f46\u539f\u7406\u5b8c\u5168\u4e0d\u540c\u3002 \u5185\u6838\u7f13\u51b2\u533a\u548c\u7528\u6237\u7f13\u51b2\u533a\u4e4b\u95f4\u7684\u4f20\u8f93\u4f18\u5316\uff1a\u8fd9\u79cd\u65b9\u5f0f\u4fa7\u91cd\u4e8e\u5728\u7528\u6237\u8fdb\u7a0b\u7684\u7f13\u51b2\u533a\u548c\u64cd\u4f5c\u7cfb\u7edf\u7684\u9875\u7f13\u5b58\u4e4b\u95f4\u7684 CPU \u62f7\u8d1d\u7684\u4f18\u5316\u3002\u8fd9\u79cd\u65b9\u6cd5\u5ef6\u7eed\u4e86\u4ee5\u5f80\u90a3\u79cd\u4f20\u7edf\u7684\u901a\u4fe1\u65b9\u5f0f\uff0c\u4f46\u66f4\u7075\u6d3b\u3002","title":"\u603b\u7ed3"},{"location":"chapter_5/4_io_scheduler_layer/","text":"\u6982\u8ff0 \u672c\u7bc7\u6c47\u603b \u5757 IO \u5c42 \u77e5\u8bc6 \u5757 IO \u5c42 \u5373\u4e0b\u56fe\u4e2d\u7684 Block IO Layer \u4e00 Genral Block Device Layer \u53c2\u8003\u300a\u672c\u7ae0 \u7b2c 7 \u7bc7\u300b \u4e8c \u7535\u68af 1 \u6838\u5fc3\u6570\u636e\u7ed3\u6784 1.1 struct elevator_queue include/linux/elevator.h /* * each queue has an elevator_queue associated with it */ struct elevator_queue { struct elevator_type *type; void *elevator_data; struct kobject kobj; struct mutex sysfs_lock; unsigned int registered:1; DECLARE_HASHTABLE(hash, ELV_HASH_BITS); }; 1.2 struct elevator_type /* * identifies an elevator type, such as AS or deadline */ struct elevator_type { /* managed by elevator core */ struct kmem_cache *icq_cache; /* fields provided by elevator implementation */ struct elevator_ops ops; size_t icq_size; /* see iocontext.h */ size_t icq_align; /* ditto */ struct elv_fs_entry *elevator_attrs; char elevator_name[ELV_NAME_MAX]; struct module *elevator_owner; /* managed by elevator core */ char icq_cache_name[ELV_NAME_MAX + 5]; /* elvname + \"_io_cq\" */ struct list_head list; }; 1.3 struct elevator_ops struct elevator_ops { elevator_merge_fn *elevator_merge_fn; elevator_merged_fn *elevator_merged_fn; elevator_merge_req_fn *elevator_merge_req_fn; elevator_allow_merge_fn *elevator_allow_merge_fn; elevator_bio_merged_fn *elevator_bio_merged_fn; elevator_dispatch_fn *elevator_dispatch_fn; elevator_add_req_fn *elevator_add_req_fn; elevator_activate_req_fn *elevator_activate_req_fn; elevator_deactivate_req_fn *elevator_deactivate_req_fn; elevator_completed_req_fn *elevator_completed_req_fn; elevator_request_list_fn *elevator_former_req_fn; elevator_request_list_fn *elevator_latter_req_fn; elevator_init_icq_fn *elevator_init_icq_fn; /* see iocontext.h */ elevator_exit_icq_fn *elevator_exit_icq_fn; /* ditto */ elevator_set_req_fn *elevator_set_req_fn; elevator_put_req_fn *elevator_put_req_fn; elevator_may_queue_fn *elevator_may_queue_fn; elevator_init_fn *elevator_init_fn; elevator_exit_fn *elevator_exit_fn; }; 1.4 struct request_queue include/linux/blkdev.h struct request_queue { /* * Together with queue_head for cacheline sharing */ struct list_head queue_head; struct request *last_merge; struct elevator_queue *elevator; int nr_rqs[2]; /* # allocated [a]sync rqs */ int nr_rqs_elvpriv; /* # allocated rqs w/ elvpriv */ /* * If blkcg is not used, @q->root_rl serves all requests. If blkcg * is used, root blkg allocates from @q->root_rl and all other * blkgs from their own blkg->rl. Which one to use should be * determined using bio_request_list(). */ struct request_list root_rl; request_fn_proc *request_fn; make_request_fn *make_request_fn; prep_rq_fn *prep_rq_fn; unprep_rq_fn *unprep_rq_fn; merge_bvec_fn *merge_bvec_fn; softirq_done_fn *softirq_done_fn; rq_timed_out_fn *rq_timed_out_fn; dma_drain_needed_fn *dma_drain_needed; lld_busy_fn *lld_busy_fn; struct blk_mq_ops *mq_ops; unsigned int *mq_map; /*\u7701\u7565*/ } 2 I/O \u8c03\u5ea6\u7b97\u6cd5\u7ed3\u6784\u4f53\u548c\u5411\u5185\u6838\u6ce8\u518c I/O \u8c03\u5ea6\u5c42 \u901a\u8fc7 elevator_ops \u7ed3\u6784\u4f53\u6765\u9002\u914d\u4e0d\u540c\u7684 I/O \u8c03\u5ea6\u7b97\u6cd5\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u7684\u63a5\u53e3\u3002\u4e0d\u540c\u7684 I/O \u8c03\u5ea6\u7b97\u6cd5\u53ea\u9700\u8981\u5b9e\u73b0\u8fd9\u4e9b\u63a5\u53e3\uff0c\u7136\u540e\u6ce8\u518c\u5230 I/O \u8c03\u5ea6\u5c42\u540e\uff0c\u5373\u53ef\u88ab I/O \u8c03\u5ea6\u5c42\u8bc6\u522b\u3002 elevator_ops \u7ed3\u6784\u4f53\u5b9a\u4e49\u5982\u4e0b\uff1a struct elevator_ops { elevator_merge_fn *elevator_merge_fn; elevator_merged_fn *elevator_merged_fn; ... elevator_dispatch_fn *elevator_dispatch_fn; elevator_add_req_fn *elevator_add_req_fn; ... }; elevator_ops \u7ed3\u6784\u5b9a\u4e49\u4e86\u5f88\u591a\u63a5\u53e3\uff0c\u4f46 I/O \u8c03\u5ea6\u7b97\u6cd5\u53ea\u9700\u8981\u6309\u9700\u5b9e\u73b0\u5176\u4e2d\u90e8\u5206\u91cd\u8981\u7684\u63a5\u53e3\u5373\u53ef\u3002 \u4e0b\u9762\u6211\u4eec\u6765\u4ecb\u7ecd\u4e00\u4e0b elevator_ops \u7ed3\u6784\u51e0\u4e2a\u91cd\u8981\u63a5\u53e3\u7684\u4f5c\u7528\uff1a elevator_merge_fn \uff1a\u7528\u4e8e\u5224\u65ad\u65b0\u63d0\u4ea4\u7684 I/O \u8bf7\u6c42\u662f\u5426\u80fd\u591f\u4e0e I/O \u8c03\u5ea6\u5668\u4e2d\u7684\u8bf7\u6c42\u8fdb\u884c\u5408\u5e76\u3002 elevator_merged_fn \uff1a\u7528\u4e8e\u5bf9\u5408\u5e76\u540e\u7684 I/O \u8bf7\u6c42\u8fdb\u884c\u91cd\u65b0\u6392\u5e8f\u3002 elevator_dispatch_fn \uff1a\u7528\u4e8e\u5c06 I/O \u8c03\u5ea6\u5668\u4e2d\u7684 I/O \u8bf7\u6c42\u5206\u53d1\u7ed9\u5757\u8bbe\u5907\u9a71\u52a8\u5c42\u3002 elevator_add_req_fn \uff1a\u7528\u4e8e\u5411 I/O \u8c03\u5ea6\u5668\u6dfb\u52a0\u65b0\u7684 I/O \u8bf7\u6c42\u3002 \u7531\u4e8e\u5185\u6838\u652f\u6301\u591a\u79cd I/O \u8c03\u5ea6\u7b97\u6cd5\uff0c\u6240\u4ee5\u5185\u6838\u901a\u8fc7\u94fe\u8868\u628a\u6240\u6709\u7684 I/O \u8c03\u5ea6\u7b97\u6cd5\u8fde\u63a5\u8d77\u6765\u3002\u5982\u679c\u7528\u6237\u7f16\u5199\u4e86\u65b0\u7684 I/O \u8c03\u5ea6\u7b97\u6cd5\uff0c\u53ef\u4ee5\u4f7f\u7528 elv_register() \u51fd\u6570\u5c06\u5176\u6ce8\u518c\u5230\u5185\u6838\u4e2d\u3002 2.1 \u7535\u68af\u6392\u5e8f \u5f53\u5404\u4e2a\u8fdb\u7a0b\u672c\u5730\u7684 plug list \u91cc\u9762\u7684 request \u88ab\u6cc4\u6d2a\uff0c\u4ee5\u6392\u5c71\u5012\u6d77\u4e4b\u52bf\u8fdb\u5165\u7684\uff0c\u4e0d\u662f\u6700\u7ec8\u7684\u8bbe\u5907\u9a71\u52a8\uff08\u4e0d\u4f1a\u76f4\u63a5\u88ab\u62cd\u6b7b\u5728\u6c99\u6ee9\u4e0a\u7684\uff09,\u800c\u662f\u4e00\u4e2a\u7535\u68af\u6392\u961f\u7b97\u6cd5\uff0c\u8fdb\u884c\u518d\u4e00\u6b21\u7684\u6392\u961f\u3002\u8fd9\u4e2a\u7535\u68af\u8c03\u5ea6\uff0c\u5176\u5b9e\u76ee\u7684 3 \u4e2a\uff1a \u8fdb\u4e00\u6b65\u7684\u5408\u5e76 request \u628a request \u5bf9\u786c\u76d8\u7684\u8bbf\u95ee\u53d8\u5f97\u987a\u5e8f\u5316 \u6267\u884c QoS \u7535\u68af\u7684\u5185\u90e8\u5b9e\u73b0\u53ef\u4ee5\u975e\u5e38\u7075\u6d3b\uff0c\u4f46\u662f\u5165\u53e3\u662f elevator_add_req_fn() \uff0c\u51fa\u53e3\u662f elevator_dispatch_fn() \u3002 2.2 bio \u548c request \u7684\u4e09\u8fdb\u4e09\u51fa bio \u4ee3\u8868\u6b63\u5728\u6267\u884c\u7684 IO \u64cd\u4f5c. \u7528\u4e8e\u63cf\u8ff0\u786c\u76d8\u91cc\u9762\u8981\u771f\u5b9e\u64cd\u4f5c\u7684\u4f4d\u7f6e\u4e0e page cache \u7684\u9875\u6620\u5c04\u5173\u7cfb\u7684\u6570\u636e\u7ed3\u6784\u662f bio. A \u539f\u5730\u84c4\u52bf \u628a bio \u8f6c\u5316\u4e3a request\uff0c\u628a request \u653e\u5165\u8fdb\u7a0b\u672c\u5730\u7684 plug \u961f\u5217\uff1b\u84c4\u52bf\u591a\u4e2a request \u540e\uff0c\u518d\u8fdb\u884c\u6cc4\u6d2a\u3002 1 \u5f62\u6210 bio \u7ed3\u6784\u4f53\u65f6, \u6309\u7167 bio_vec \u6570\u7ec4\u7684\u8fde\u7eed\u60c5\u51b5\u5206\u914d bio \u7ed3\u6784\u4f53\u6570\u76ee, \u6bd4\u5982\u5168\u8fde\u7eed\u90a3\u4e48\u5c31\u5206\u914d\u4e00\u4e2a bio \u7ed3\u6784\u4f53, \u6bd4\u5982\u5168\u90fd\u4e0d\u8fde\u7eed\u5219\u5206\u914d\u548c bio_vec \u6570\u7ec4\u76f8\u540c\u6570\u91cf\u7684 bio \u7ed3\u6784\u4f53\u6570\u76ee 2 \u5f62\u6210 request, \u6309\u7167\u786c\u76d8\u5757\u7684\u8fde\u7eed\u60c5\u51b5, \u628a bio \u5f62\u6210\u672c\u5730\u8fdb\u7a0b\u7684 request \u961f\u5217 B \u7535\u68af\u6392\u5e8f \u8fdb\u7a0b\u672c\u5730\u7684 plug \u961f\u5217\u7684 request \u8fdb\u5165\u5230\u7535\u68af\uff0c\u5185\u6838\u5bf9\u6240\u6709\u8fdb\u7a0b\u63d0\u4ea4\u8fc7\u6765\u7684 request \u8fdb\u884c\u518d\u6b21\u7684\u5408\u5e76\u3001\u6392\u5e8f\uff0c\u6267\u884c QoS \u7684\u6392\u961f\uff0c\u4e4b\u540e\u6309\u7167 QoS \u7684\u7ed3\u679c\uff0c\u5206\u53d1\u7ed9\u5757\u8bbe\u5907\u9a71\u52a8\u3002\u7535\u68af\u5185\u90e8\u7684\u5b9e\u73b0\uff0c\u53ef\u4ee5\u6709\u5404\u79cd\u5404\u6837\u7684\u961f\u5217\u3002 C \u5206\u53d1\u6267\u884c \u6700\u7ec8\u63d0\u4ea4\u7ed9\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\uff0c\u6267\u884c request\u3002 \u7535\u68af\u5206\u53d1\u7684 request\uff0c\u88ab\u8bbe\u5907\u9a71\u52a8\u7684 request_fn()\u6328\u4e2a\u53d6\u51fa\u6765\uff0c\u6d3e\u53d1\u771f\u6b63\u7684\u786c\u4ef6\u8bfb\u5199\u547d\u4ee4\u5230\u786c\u76d8\u3002\u8fd9\u4e2a\u5206\u53d1\u7684\u961f\u5217\uff0c\u4e00\u822c\u5c31\u662f\u6211\u4eec\u5728\u5757\u8bbe\u5907\u9a71\u52a8\u91cc\u9762\u89c1\u5230\u7684 request_queue \u4e86\u3002","title":"\u7b2c\u56db\u7bc7 Block IO Layer\u603b\u7ed3"},{"location":"chapter_5/4_io_scheduler_layer/#_1","text":"\u672c\u7bc7\u6c47\u603b \u5757 IO \u5c42 \u77e5\u8bc6 \u5757 IO \u5c42 \u5373\u4e0b\u56fe\u4e2d\u7684 Block IO Layer","title":"\u6982\u8ff0"},{"location":"chapter_5/4_io_scheduler_layer/#genral-block-device-layer","text":"\u53c2\u8003\u300a\u672c\u7ae0 \u7b2c 7 \u7bc7\u300b","title":"\u4e00 Genral Block Device Layer"},{"location":"chapter_5/4_io_scheduler_layer/#_2","text":"","title":"\u4e8c \u7535\u68af"},{"location":"chapter_5/4_io_scheduler_layer/#1","text":"","title":"1 \u6838\u5fc3\u6570\u636e\u7ed3\u6784"},{"location":"chapter_5/4_io_scheduler_layer/#11-struct-elevator_queue","text":"include/linux/elevator.h /* * each queue has an elevator_queue associated with it */ struct elevator_queue { struct elevator_type *type; void *elevator_data; struct kobject kobj; struct mutex sysfs_lock; unsigned int registered:1; DECLARE_HASHTABLE(hash, ELV_HASH_BITS); };","title":"1.1 struct elevator_queue"},{"location":"chapter_5/4_io_scheduler_layer/#12-struct-elevator_type","text":"/* * identifies an elevator type, such as AS or deadline */ struct elevator_type { /* managed by elevator core */ struct kmem_cache *icq_cache; /* fields provided by elevator implementation */ struct elevator_ops ops; size_t icq_size; /* see iocontext.h */ size_t icq_align; /* ditto */ struct elv_fs_entry *elevator_attrs; char elevator_name[ELV_NAME_MAX]; struct module *elevator_owner; /* managed by elevator core */ char icq_cache_name[ELV_NAME_MAX + 5]; /* elvname + \"_io_cq\" */ struct list_head list; };","title":"1.2 struct elevator_type"},{"location":"chapter_5/4_io_scheduler_layer/#13-struct-elevator_ops","text":"struct elevator_ops { elevator_merge_fn *elevator_merge_fn; elevator_merged_fn *elevator_merged_fn; elevator_merge_req_fn *elevator_merge_req_fn; elevator_allow_merge_fn *elevator_allow_merge_fn; elevator_bio_merged_fn *elevator_bio_merged_fn; elevator_dispatch_fn *elevator_dispatch_fn; elevator_add_req_fn *elevator_add_req_fn; elevator_activate_req_fn *elevator_activate_req_fn; elevator_deactivate_req_fn *elevator_deactivate_req_fn; elevator_completed_req_fn *elevator_completed_req_fn; elevator_request_list_fn *elevator_former_req_fn; elevator_request_list_fn *elevator_latter_req_fn; elevator_init_icq_fn *elevator_init_icq_fn; /* see iocontext.h */ elevator_exit_icq_fn *elevator_exit_icq_fn; /* ditto */ elevator_set_req_fn *elevator_set_req_fn; elevator_put_req_fn *elevator_put_req_fn; elevator_may_queue_fn *elevator_may_queue_fn; elevator_init_fn *elevator_init_fn; elevator_exit_fn *elevator_exit_fn; };","title":"1.3 struct elevator_ops"},{"location":"chapter_5/4_io_scheduler_layer/#14-struct-request_queue","text":"include/linux/blkdev.h struct request_queue { /* * Together with queue_head for cacheline sharing */ struct list_head queue_head; struct request *last_merge; struct elevator_queue *elevator; int nr_rqs[2]; /* # allocated [a]sync rqs */ int nr_rqs_elvpriv; /* # allocated rqs w/ elvpriv */ /* * If blkcg is not used, @q->root_rl serves all requests. If blkcg * is used, root blkg allocates from @q->root_rl and all other * blkgs from their own blkg->rl. Which one to use should be * determined using bio_request_list(). */ struct request_list root_rl; request_fn_proc *request_fn; make_request_fn *make_request_fn; prep_rq_fn *prep_rq_fn; unprep_rq_fn *unprep_rq_fn; merge_bvec_fn *merge_bvec_fn; softirq_done_fn *softirq_done_fn; rq_timed_out_fn *rq_timed_out_fn; dma_drain_needed_fn *dma_drain_needed; lld_busy_fn *lld_busy_fn; struct blk_mq_ops *mq_ops; unsigned int *mq_map; /*\u7701\u7565*/ }","title":"1.4 struct request_queue"},{"location":"chapter_5/4_io_scheduler_layer/#2-io","text":"I/O \u8c03\u5ea6\u5c42 \u901a\u8fc7 elevator_ops \u7ed3\u6784\u4f53\u6765\u9002\u914d\u4e0d\u540c\u7684 I/O \u8c03\u5ea6\u7b97\u6cd5\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u7684\u63a5\u53e3\u3002\u4e0d\u540c\u7684 I/O \u8c03\u5ea6\u7b97\u6cd5\u53ea\u9700\u8981\u5b9e\u73b0\u8fd9\u4e9b\u63a5\u53e3\uff0c\u7136\u540e\u6ce8\u518c\u5230 I/O \u8c03\u5ea6\u5c42\u540e\uff0c\u5373\u53ef\u88ab I/O \u8c03\u5ea6\u5c42\u8bc6\u522b\u3002 elevator_ops \u7ed3\u6784\u4f53\u5b9a\u4e49\u5982\u4e0b\uff1a struct elevator_ops { elevator_merge_fn *elevator_merge_fn; elevator_merged_fn *elevator_merged_fn; ... elevator_dispatch_fn *elevator_dispatch_fn; elevator_add_req_fn *elevator_add_req_fn; ... }; elevator_ops \u7ed3\u6784\u5b9a\u4e49\u4e86\u5f88\u591a\u63a5\u53e3\uff0c\u4f46 I/O \u8c03\u5ea6\u7b97\u6cd5\u53ea\u9700\u8981\u6309\u9700\u5b9e\u73b0\u5176\u4e2d\u90e8\u5206\u91cd\u8981\u7684\u63a5\u53e3\u5373\u53ef\u3002 \u4e0b\u9762\u6211\u4eec\u6765\u4ecb\u7ecd\u4e00\u4e0b elevator_ops \u7ed3\u6784\u51e0\u4e2a\u91cd\u8981\u63a5\u53e3\u7684\u4f5c\u7528\uff1a elevator_merge_fn \uff1a\u7528\u4e8e\u5224\u65ad\u65b0\u63d0\u4ea4\u7684 I/O \u8bf7\u6c42\u662f\u5426\u80fd\u591f\u4e0e I/O \u8c03\u5ea6\u5668\u4e2d\u7684\u8bf7\u6c42\u8fdb\u884c\u5408\u5e76\u3002 elevator_merged_fn \uff1a\u7528\u4e8e\u5bf9\u5408\u5e76\u540e\u7684 I/O \u8bf7\u6c42\u8fdb\u884c\u91cd\u65b0\u6392\u5e8f\u3002 elevator_dispatch_fn \uff1a\u7528\u4e8e\u5c06 I/O \u8c03\u5ea6\u5668\u4e2d\u7684 I/O \u8bf7\u6c42\u5206\u53d1\u7ed9\u5757\u8bbe\u5907\u9a71\u52a8\u5c42\u3002 elevator_add_req_fn \uff1a\u7528\u4e8e\u5411 I/O \u8c03\u5ea6\u5668\u6dfb\u52a0\u65b0\u7684 I/O \u8bf7\u6c42\u3002 \u7531\u4e8e\u5185\u6838\u652f\u6301\u591a\u79cd I/O \u8c03\u5ea6\u7b97\u6cd5\uff0c\u6240\u4ee5\u5185\u6838\u901a\u8fc7\u94fe\u8868\u628a\u6240\u6709\u7684 I/O \u8c03\u5ea6\u7b97\u6cd5\u8fde\u63a5\u8d77\u6765\u3002\u5982\u679c\u7528\u6237\u7f16\u5199\u4e86\u65b0\u7684 I/O \u8c03\u5ea6\u7b97\u6cd5\uff0c\u53ef\u4ee5\u4f7f\u7528 elv_register() \u51fd\u6570\u5c06\u5176\u6ce8\u518c\u5230\u5185\u6838\u4e2d\u3002","title":"2 I/O \u8c03\u5ea6\u7b97\u6cd5\u7ed3\u6784\u4f53\u548c\u5411\u5185\u6838\u6ce8\u518c"},{"location":"chapter_5/4_io_scheduler_layer/#21","text":"\u5f53\u5404\u4e2a\u8fdb\u7a0b\u672c\u5730\u7684 plug list \u91cc\u9762\u7684 request \u88ab\u6cc4\u6d2a\uff0c\u4ee5\u6392\u5c71\u5012\u6d77\u4e4b\u52bf\u8fdb\u5165\u7684\uff0c\u4e0d\u662f\u6700\u7ec8\u7684\u8bbe\u5907\u9a71\u52a8\uff08\u4e0d\u4f1a\u76f4\u63a5\u88ab\u62cd\u6b7b\u5728\u6c99\u6ee9\u4e0a\u7684\uff09,\u800c\u662f\u4e00\u4e2a\u7535\u68af\u6392\u961f\u7b97\u6cd5\uff0c\u8fdb\u884c\u518d\u4e00\u6b21\u7684\u6392\u961f\u3002\u8fd9\u4e2a\u7535\u68af\u8c03\u5ea6\uff0c\u5176\u5b9e\u76ee\u7684 3 \u4e2a\uff1a \u8fdb\u4e00\u6b65\u7684\u5408\u5e76 request \u628a request \u5bf9\u786c\u76d8\u7684\u8bbf\u95ee\u53d8\u5f97\u987a\u5e8f\u5316 \u6267\u884c QoS \u7535\u68af\u7684\u5185\u90e8\u5b9e\u73b0\u53ef\u4ee5\u975e\u5e38\u7075\u6d3b\uff0c\u4f46\u662f\u5165\u53e3\u662f elevator_add_req_fn() \uff0c\u51fa\u53e3\u662f elevator_dispatch_fn() \u3002","title":"2.1 \u7535\u68af\u6392\u5e8f"},{"location":"chapter_5/4_io_scheduler_layer/#22-bio-request","text":"bio \u4ee3\u8868\u6b63\u5728\u6267\u884c\u7684 IO \u64cd\u4f5c. \u7528\u4e8e\u63cf\u8ff0\u786c\u76d8\u91cc\u9762\u8981\u771f\u5b9e\u64cd\u4f5c\u7684\u4f4d\u7f6e\u4e0e page cache \u7684\u9875\u6620\u5c04\u5173\u7cfb\u7684\u6570\u636e\u7ed3\u6784\u662f bio.","title":"2.2 bio \u548c request \u7684\u4e09\u8fdb\u4e09\u51fa"},{"location":"chapter_5/4_io_scheduler_layer/#a","text":"\u628a bio \u8f6c\u5316\u4e3a request\uff0c\u628a request \u653e\u5165\u8fdb\u7a0b\u672c\u5730\u7684 plug \u961f\u5217\uff1b\u84c4\u52bf\u591a\u4e2a request \u540e\uff0c\u518d\u8fdb\u884c\u6cc4\u6d2a\u3002 1 \u5f62\u6210 bio \u7ed3\u6784\u4f53\u65f6, \u6309\u7167 bio_vec \u6570\u7ec4\u7684\u8fde\u7eed\u60c5\u51b5\u5206\u914d bio \u7ed3\u6784\u4f53\u6570\u76ee, \u6bd4\u5982\u5168\u8fde\u7eed\u90a3\u4e48\u5c31\u5206\u914d\u4e00\u4e2a bio \u7ed3\u6784\u4f53, \u6bd4\u5982\u5168\u90fd\u4e0d\u8fde\u7eed\u5219\u5206\u914d\u548c bio_vec \u6570\u7ec4\u76f8\u540c\u6570\u91cf\u7684 bio \u7ed3\u6784\u4f53\u6570\u76ee 2 \u5f62\u6210 request, \u6309\u7167\u786c\u76d8\u5757\u7684\u8fde\u7eed\u60c5\u51b5, \u628a bio \u5f62\u6210\u672c\u5730\u8fdb\u7a0b\u7684 request \u961f\u5217","title":"A \u539f\u5730\u84c4\u52bf"},{"location":"chapter_5/4_io_scheduler_layer/#b","text":"\u8fdb\u7a0b\u672c\u5730\u7684 plug \u961f\u5217\u7684 request \u8fdb\u5165\u5230\u7535\u68af\uff0c\u5185\u6838\u5bf9\u6240\u6709\u8fdb\u7a0b\u63d0\u4ea4\u8fc7\u6765\u7684 request \u8fdb\u884c\u518d\u6b21\u7684\u5408\u5e76\u3001\u6392\u5e8f\uff0c\u6267\u884c QoS \u7684\u6392\u961f\uff0c\u4e4b\u540e\u6309\u7167 QoS \u7684\u7ed3\u679c\uff0c\u5206\u53d1\u7ed9\u5757\u8bbe\u5907\u9a71\u52a8\u3002\u7535\u68af\u5185\u90e8\u7684\u5b9e\u73b0\uff0c\u53ef\u4ee5\u6709\u5404\u79cd\u5404\u6837\u7684\u961f\u5217\u3002","title":"B \u7535\u68af\u6392\u5e8f"},{"location":"chapter_5/4_io_scheduler_layer/#c","text":"\u6700\u7ec8\u63d0\u4ea4\u7ed9\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\uff0c\u6267\u884c request\u3002 \u7535\u68af\u5206\u53d1\u7684 request\uff0c\u88ab\u8bbe\u5907\u9a71\u52a8\u7684 request_fn()\u6328\u4e2a\u53d6\u51fa\u6765\uff0c\u6d3e\u53d1\u771f\u6b63\u7684\u786c\u4ef6\u8bfb\u5199\u547d\u4ee4\u5230\u786c\u76d8\u3002\u8fd9\u4e2a\u5206\u53d1\u7684\u961f\u5217\uff0c\u4e00\u822c\u5c31\u662f\u6211\u4eec\u5728\u5757\u8bbe\u5907\u9a71\u52a8\u91cc\u9762\u89c1\u5230\u7684 request_queue \u4e86\u3002","title":"C \u5206\u53d1\u6267\u884c"},{"location":"chapter_5/6_fss/","text":"\u6982\u8ff0 \u672c\u7bc7\u68b3\u7406\u5404\u7c7b\u6587\u4ef6\u7cfb\u7edf \u4e00 sys sysfs \u662f Linux \u4e0b\u53ef\u4ee5\u53cd\u5e94\u8bbe\u5907\u5c42\u6b21\u67b6\u6784\u7684\u4e00\u4e2a\u865a\u62df\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\u4ed6\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u5305\u62ec\u6240\u6709\u786c\u4ef6\u7684\u5c42\u7ea7\u89c6\u56fe\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8f93\u5165\u8f93\u51fa\u8fdb\u884c\u4e00\u4e9b\u786c\u4ef6\u64cd\u4f5c\u3002 \u57fa\u672c\u4e0a\u6302\u8f7d\u5728/sys \u76ee\u5f55 \u57fa\u7840\u77e5\u8bc6 \u53c2\u8003 \u7b2c\u5341\u56db\u7ae0 \u7b2c\u516b\u7bc7 \u53c2\u8003 \u7b2c\u4e94\u7ae0 \u7b2c\u516b\u7bc7 \u6bcf\u4e2a kobject \u5bf9\u5e94 sys\u6587\u4ef6\u7cfb\u7edf \u4e0b\u7684\u4e00\u4e2a\u76ee\u5f55, \u76ee\u5f55\u4e0b\u53ef\u4ee5\u76f4\u63a5\u662f\u8be5 kobject \u7684\u5c5e\u6027\uff08\u6bd4\u5982 name \u5c5e\u6027, \u4f7f\u7528 sysfs_create_files \u521b\u5efa) \u4e5f\u53ef\u4ee5\u662f\u591a\u4e2a\u5c5e\u6027\u5f62\u6210\u7684\u4e00\u4e2a group\uff0cgroup \u662f\u4e00\u4e2a\u5c5e\u6027\u7ec4\uff0c\u8868\u73b0\u4e3a\u8be5\u76ee\u5f55\u4e0b\u7684\u5b50\u76ee\u5f55\uff0c\u5c5e\u6027\u7ec4\u5185\u6240\u6709\u7684 attr \u90fd\u662f\u6587\u4ef6\uff0c\u53c2\u8003\u4e0b\u6587\u7684 struct attribute_group \u6570\u7ec4\u548c sysfs_create_group \u5173\u4e8e\u5185\u6838 API \u51fd\u6570 kobject_create_and_add sysfs_create_group sysfs_remove_group Linux \u4e0b\u6dfb\u52a0\u81ea\u5df1\u7684 sysfs \u63a5\u53e3 \u672c\u8d28\u4e0a\u662f\u5728/sys \u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e9b\u76ee\u5f55\u6216\u8005\u6587\u4ef6, \u7136\u540e\u5f80\u8fd9\u4e9b\u6587\u4ef6\u8fdb\u884c read\u3001write \u8c03\u7528\u65f6, \u81ea\u52a8\u53ef\u4ee5\u6267\u884c\u4e00\u4e9b\u5185\u6838\u51fd\u6570. \u4e3e\u4e2a\u4f8b\u5b50 \u5176\u5b9e\u53ef\u4ee5\u81ea\u5df1\u5199\u51fd\u6570\u83b7\u53d6\u5185\u6838\u4fe1\u606f, \u4ece\u800c\u5b9e\u73b0\u76d1\u63a7\u63a5\u53e3. 1 \u6dfb\u52a0\u6b65\u9aa4 \u6dfb\u52a0\u6b65\u9aa4\u4ece\u9700\u6c42\u65b9\u5411\u6765\u770b\u3002 1.1 \u6ce8\u518c struct kobject *test_kobj = NULL; int mysys_init(void) { ... test_kobj = kobject_create_and_add(\"test_sysfs\", NULL); sysfs_create_group(test_kobj, &test_sysfs_attr_group); ... } void mysys_exit(void) { ... sysfs_remove_group(test_kobj , &test_sysfs_attr_group); kobject_put(test_kobj ); } \u9996\u5148\u9700\u8981\u5411\u7cfb\u7edf\u6ce8\u518c\u76ee\u5f55 test_sysfs \uff0c kobject_create_and_add(\"test_sysfs\", NULL) \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u76ee\u5f55\u540d\u79f0\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u7236\u76ee\u5f55\uff0c NULL \u4e3a\u7a7a\uff0c\u90a3\u5c31\u4f1a\u5728 /sys/ \u751f\u6210\u76ee\u5f55\uff0c\u7ed3\u679c\u4e3a /sys/test_sysfs \u3002 \u5982\u679c\u4f7f\u7528\u7236\u76ee\u5f55\u5982 kobject_create_and_add(\"test_sysfs\", firmware_kobj) \u5c31\u4f1a\u5728 /sys/firmware/ \u4e0b\u751f\u6210\u76ee\u5f55 /sys/firmware/test_sysfs \u3002\u5176\u4e2d firmware_kobj \u662f\u5728 drivers/base/firmware.c \u5b9a\u4e49\u7684\u5168\u5c40\u53d8\u91cf\u3002 firmware_kobj = kobject_create_and_add(\"firmware\", NULL); 1.2 \u5b9a\u4e49 struct attribute \u548c struct attribute_group \u6570\u7ec4 static struct attribute_group test_sysfs_attr_group= { .name = \"test_my_attr\", //\u4e0d\u5199\u8fd9\u4e2a\u6210\u5458\u5c31\u4e0d\u4f1a\u521b\u5efa\u5b50\u6587\u4ef6\u5939 .attrs = test_sysfs_attr, }; static struct attribute *test_sysfs_attr[] = { &test_sysfs_read.attr, &test_sysfs_write.attr, &test_sysfs_num1.attr, &test_sysfs_num2.attr, NULL, }; \u8fd9\u662f\u6ce8\u518c\u4f7f\u7528\u7684\u7ed3\u6784\u4f53\u3002 .name = \"test_my_attr\" ,\u4f1a\u518d\u521b\u5efa\u4e00\u4e2a\u5b50\u6587\u4ef6\u5939\uff0c\u4f1a\u5f62\u6210\u76ee\u5f55 /sys/test_sysfs/test_my_attr \u3002\u5982\u679c\u4e0d\u9700\u8981\u8fd9\u884c\u4e0d\u52a0\u5c31\u884c\u4e86\u3002 test_sysfs_attr \u8fd9\u4e2a\u6307\u9488\u6570\u7ec4\u5305\u542b\u7684\u5185\u5bb9\u5c31\u662f\u5305\u542b\u8981\u663e\u793a\u7684\u5c5e\u6027\u7684\u5730\u5740\u3002\u6b64\u4f8b\u5b50\u4e2d\u4e3a read\u3001write\u3001num1\u3001num2 \u8fd9\u51e0\u4e2a\u5c5e\u6027\u3002 1.3 \u6784\u9020\u5404\u4e2a\u5c5e\u6027 static struct kobj_attribute test_sysfs_read=**ATTR(show, S_IRUSR, test_show, NULL); static struct kobj_attribute test_sysfs_write=**ATTR(write, S_IWUSR, NULL,test_store); static struct kobj_attribute test_sysfs_num1=**ATTR(num1, S_IRUSR, test_num1, NULL); static struct kobj_attribute test_sysfs_num1=**ATTR(num2, S_IWUSR, NULL,test_num2); \u4f7f\u7528 __ATTR \u6784\u9020\u4e86 read\u3001write\u3001num1\u3001num2 \u8fd9\u51e0\u4e2a\u5c5e\u6027\u3002\u58f0\u660e\u4e86\u5bf9\u5e94\u7684\u51e0\u4e2a\u51fd\u6570\u3002 __ATTR \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f \u663e\u793a\u7684\u5c5e\u6027\uff08\u8282\u70b9\uff09\u540d\u5b57\uff1b \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f \u8282\u70b9\u6743\u9650\uff1b \u7b2c\u4e09\u4e2a\u53c2\u6570\u662f \u4f7f\u7528 cat \u547d\u4ee4\u67e5\u770b sys \u63a5\u53e3\u65f6\u8c03\u7528\u7684\u51fd\u6570 \u7b2c\u56db\u4e2a\u53c2\u6570\u662f \u4f7f\u7528 echo \u547d\u4ee4\u5f80 sys \u63a5\u53e3\u5199\u5165\u5185\u5bb9\u65f6\u8c03\u7528\u7684\u51fd\u6570 1.4 \u5404\u4e2a\u5c5e\u6027\u7684\u51fd\u6570\u7f16\u5199 \u7f16\u5199\u4e0a\u9762\u7684\u51e0\u4e2a\u51fd\u6570\u3002 static test_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf){ ... return 1; } static test_store(struct kobject *kobj, struct kobj_attribute *attr, constchar *buf, size_t count){ ... return count; } static test_num1(struct kobject *kobj, struct kobj_attribute *attr, char *buf){ ... return 1; } static test_num2(struct kobject *kobj, struct kobj_attribute *attr, constchar *buf, size_t count){ ... return count; } \u8fd9\u662f\u4ece\u9700\u6c42\u7aef\u770b\uff0c\u5b9e\u9645\u7684\u6b65\u9aa4\u5012\u7740\u6765\u5c31\u53ef\u4ee5\u4e86\u3002 2 \u52a0\u8f7d\u540e\u4f7f\u7528 \u52a0\u8f7d\u540e\u53ef\u4ee5\u5728 sys \u4e0b\u770b\u5230\u76ee\u5f55 /sys/test_sysfs/test_my_attr/read /sys/test_sysfs/test_my_attr/write /sys/test_sysfs/test_my_attr/num1 /sys/test_sysfs/test_my_attr/num2 \u901a\u8fc7\u8c03\u7528 cat /sys/test_sysfs/test_my_attr/read \u53ef\u4ee5\u8c03\u7528 test_show \u51fd\u6570\uff1b \u901a\u8fc7\u8c03\u7528 echo 1 > /sys/test_sysfs/test_my_attr/num2 \u53ef\u4ee5\u8c03\u7528 test_num2 \u51fd\u6570\uff1b \u5229\u7528 sysfs \u64cd\u4f5c CPU \u4e0a\u7ebf\u4e0b\u7ebf\uff08\u70ed\u63d2\u62d4\uff09 \uff08\u4e00\uff09 \u64cd\u4f5c CPU \u70ed\u63d2\u62d4 \u4f60\u65e0\u9700\u8c03\u7528\u7279\u6b8a\u7684\u63a5\u53e3\uff0c\u53ea\u9700\u8981 echo \u5c31\u53ef\u4ee5\u5728 sysfs \u4e2d\u901a\u8fc7\u5199\u6587\u4ef6\u7684\u65b9\u5f0f\u5c06 CPU \u8fdb\u884c\u70ed\u63d2\u62d4\uff1a [root@localhost ~]# echo 0 >/sys/devices/system/cpu/cpu0/online [root@localhost ~]# echo 0 >/sys/devices/system/cpu/cpu2/online \u7ed3\u679c\u5c31\u53ea\u5269 2 \u4e2a CPU \u4e86 [root@localhost ~]# cat /proc/cpuinfo |grep processor processor : 1 processor : 3 [root@localhost ~]# \uff08\u4e8c\uff09 \u67e5\u770b\u5df2\u7ecf\u88ab\u4e0b\u7ebf\u7684 CPU \u4ee5\u4e0a\u9762\u7684 CPU \u70ed\u63d2\u62d4\u4e3a\u4f8b\uff0c /sys/devices/system/cpu \u662f\u4e00\u4e2a\u76ee\u5f55\uff0c\u5b83\u8868\u793a\u7cfb\u7edf\u7684\u6240\u6709 CPU\uff0c\u5176\u5c5e\u6027\u4e3a\uff1a cpu0 cpu1 cpu2 cpu3 cpuidle isolated kernel_max microcode modalias nohz_full offline online possible power present uevent \u6211\u4eec\u67e5\u770b\u5176 offline \u5c5e\u6027\uff0c\u5b83\u8868\u793a\u5df2\u7ecf\u4e0b\u6389\u7684 CPU\uff0c\u53ea\u9700\u8981\u8bfb\u8be5\u6587\u4ef6\u5373\u53ef\uff1a [root@localhost ~]# cat /sys/devices/system/cpu/offline 0,2 \u4e8c proc 1 \u6982\u89c8\u5404\u6587\u4ef6\u4f5c\u7528 /proc/cpuinfo /proc/meminfo /proc/interrupts \u2014> \u4e2d\u65ad\u60c5\u51b5 /proc/devices \u2014> \u5185\u6838\u8bc6\u522b\u7684\u8bbe\u5907 /proc/loadavg \u7cfb\u7edf\u8d1f\u8f7d /proc/uptime /proc/kmsg \u5185\u6838\u7684\u65e5\u5fd7\u63a5\u53e3 \uff0crsyslogd \u8fdb\u7a0b\u4ece\u8fd9\u91cc\u8bfb\u53d6\u5185\u6838\u6253\u5370\u7684\u65e5\u5fd7 /proc/stat ---> \u901a\u8fc7 top \u547d\u4ee4\u770b\u5230 cpu \u5229\u7528\u7387 /proc/diskstats ---> This file contains disk I/O statistics for each disk device. /proc/version \u67e5\u770b\u5f53\u524d Linux Kernel \u7684\u7248\u672c /proc/locks \u5219\u662f\u4fdd\u5b58\u5f53\u524d\u7531\u5185\u6838\u9501\u5b9a\u7684\u6587\u4ef6\u7684\u76f8\u5173\u4fe1\u606f /proc/filesystems \u663e\u793a\u5f53\u524d\u5185\u6838\u652f\u6301\u7684\u6587\u4ef6\u7cfb\u7edf http://man7.org/linux/man-pages/man5/proc.5.html /proc \u6587\u4ef6\u7cfb\u7edf\u5b98\u65b9\u6587\u6863 2 \u4e00\u4e9b\u603b\u7ed3 \u603b\u4f53\u6765\u8bf4\u5206\u4e3a 2 \u7c7b\uff1a 1 \u63d0\u4f9b\u7cfb\u7edf\u4fe1\u606f\u7684\u67e5\u770b\uff0c\u4f8b\u5982/proc,/proc/net 2 \u63d0\u4f9b\u7cfb\u7edf\u4fe1\u606f\u7684\u8bbe\u7f6e ,\u4f8b\u5982/proc/sys/fs /proc/sys/net /proc/sys/vm /proc/sys/kernel 3 /proc/${pid}/ cwd==> \u6307\u5411\u5f53\u524d\u7684\u5de5\u4f5c\u76ee\u5f55 fd ==> \u6307\u5411\u5f53\u524d\u6253\u5f00\u7684\u6587\u4ef6 comm ==> \u5f53\u524d\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u540d cmdline ==> \u542f\u52a8\u5f53\u524d\u8fdb\u7a0b\u7684\u5b8c\u6574\u7684\u547d\u4ee4\u884c Linux \u8fdb\u7a0b\u540d\u548c\u547d\u4ee4\u884c\u7684\u533a\u522b \u4e00\u4e2a\u662f\u8fdb\u7a0b\u540d\uff0c nginx \u4e00\u4e2a\u662f\u5b8c\u6574\u547d\u4ee4\u884c\uff1a nginx: master process /usr/sbin/nginx -g daemon on; master_process on; \u4e09 bdevfs \u4ec5\u5b58\u4e8e\u5185\u6838\u7a7a\u95f4\u7684\u4f2a\u6587\u4ef6\u7cfb\u7edf \u6587\u4ef6\u7cfb\u7edf\u7684\u7cbe\u9ad3\u6240\u5728\u662f\u8ba9\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u6587\u4ef6\u63cf\u8ff0\u7b26\u6765\u5bf9\u6307\u5b9a\u7684 inode \u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u64cd\u4f5c\u3002 \u4f2a\u6587\u4ef6\u7cfb\u7edf\u548c\u666e\u901a\u6587\u4ef6\u7cfb\u7edf\u7684\u533a\u522b\u5728\u4e8e\uff0c\u5176 inode \u5bf9\u7528\u6237\u4e0d\u53ef\u8bbf\u95ee\uff0c\u5373\u4ec5\u5728\u5185\u6838\u6001\u53ef\u89c1\uff0c\u4ece\u7528\u6237\u5c42\u7684\u89c6\u89d2\u6765\u770b\u8be5\u6587\u4ef6\u7cfb\u7edf\u5e76\u4e0d\u5b58\u5728\u3002 \u4f2a\u6587\u4ef6\u7cfb\u7edf\u7684\u4f5c\u7528\u662f\u5bf9\u4e00\u4e9b\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u5c01\u88c5\uff0c\u548c\u666e\u901a\u7684\u6587\u4ef6\u7edf\u4e00\u63a5\u53e3\uff0c\u5982\u5757\u8bbe\u5907 bdevfs \uff0c\u7ba1\u9053\u6587\u4ef6 pipefs \uff0c\u5957\u63a5\u5b57 socketfs \u7b49\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u7684\u7edf\u4e00\u5c01\u88c5\uff0c\u624d\u5b9e\u73b0\u4e86 Linux \u4e00\u5207\u7686\u6587\u4ef6\u7684\u601d\u60f3\u3002 \u53c2\u8003 bdevfs bdevfs \u5bf9\u5e94\u7684\u8d85\u7ea7\u5757\u540d\u4e3a blockdev_superblock \uff0c\u521d\u59cb\u5316\u5de5\u4f5c\u5728\u7cfb\u7edf\u521d\u59cb\u5316\u65f6\u8c03\u7528 bdev_cache_init() \u5b8c\u6210\u3002\u6240\u6709\u8868\u793a\u5757\u8bbe\u5907\u7684 inode \u90fd\u4fdd\u5b58\u5728\u4f2a\u6587\u4ef6\u7cfb\u7edf bdevfs \u4e2d\u4ee5\u65b9\u4fbf\u5757\u8bbe\u5907\u7684\u7ba1\u7406\u3002Linux \u5c06\u5757\u8bbe\u5907\u7684 block_device \u548c bdev \u6587\u4ef6\u7cfb\u7edf \u7684\u5757\u8bbe\u5907\u7684 inode \u901a\u8fc7 struct bdev_inode \u8fdb\u884c\u5173\u8054\u3002 struct super_block *blockdev_superblock __read_mostly; static struct file_system_type bd_type = { .name = \"bdev\", .mount = bd_mount, .kill_sb = kill_anon_super, }; void __init bdev_cache_init(void) { int err; static struct vfsmount *bd_mnt; bdev_cachep = kmem_cache_create(\"bdev_cache\", sizeof(struct bdev_inode), 0, (SLAB_HWCACHE_ALIGN|SLAB_RECLAIM_ACCOUNT| SLAB_MEM_SPREAD|SLAB_ACCOUNT|SLAB_PANIC), init_once); err = register_filesystem(&bd_type); if (err) panic(\"Cannot register bdev pseudo-fs\"); bd_mnt = kern_mount(&bd_type); if (IS_ERR(bd_mnt)) panic(\"Cannot create bdev pseudo-fs\"); blockdev_superblock = bd_mnt->mnt_sb; /* For writeback */ } struct bdev_inode { struct block_device bdev; struct inode vfs_inode; }; Linux \u64cd\u4f5c\u7cfb\u7edf\u5b66\u4e60\u7b14\u8bb0\uff08\u5341\u56db\uff09\u5757\u8bbe\u5907 \u5757\u8bbe\u5907\u5256\u6790\u4e4b\u5173\u952e\u6570\u636e\u7ed3\u6784\u5206\u6790 - block_device/gendisk/hd_struct \u56db anon_inodefs \u533f\u540d inode \u6587\u4ef6\u7cfb\u7edf \u662f\u4ec0\u4e48 \u4ec0\u4e48\u662f\u533f\u540d inode \u5728 Linux \u91cc\u4e00\u5207\u7686\u6587\u4ef6\uff0c\u4f60\u7406\u89e3\u7684\u5e38\u89c1\u201c\u6587\u4ef6\u201d\u6709\u4ec0\u4e48\u7279\u6027\uff1f\u662f\u8def\u5f84\uff0c\u4e5f\u5c31\u662f path \uff0c\u533f\u540d\u7684\u610f\u601d\u8bf4\u7684\u5c31\u662f\u6ca1\u6709\u8def\u5f84\uff08 \u5728\u5185\u6838\u91cc\u9762\u8bf4\u7684\u5c31\u662f\u6ca1\u6709\u6709\u6548\u7684 dentry \uff09 \u6765\u770b\u770b\u957f\u4ec0\u4e48\u6837 \u6211\u4eec\u7ecf\u5e38\u5728 /proc/${pid}/fd/ \u4e0b\u9762\u80fd\u770b\u5230 anon_inode : \u524d\u7f00\u7684\u53e5\u67c4\uff0c\u5982\u4e0b\uff1a root@ubuntu:~/temp# ll /proc/5398/fd lr-x------ 1 root root 64 Aug 24 09:39 11 -> anon_inode:inotify lrwx------ 1 root root 64 Aug 24 09:39 4 -> anon_inode:[eventpoll] lrwx------ 1 root root 64 Aug 24 09:39 5 -> anon_inode:[signalfd] lrwx------ 1 root root 64 Aug 24 09:39 7 -> anon_inode:[timerfd] lrwx------ 1 root root 64 Aug 24 09:39 9 -> anon_inode:[eventpoll] \u5982\u679c\u662f\u6b63\u5e38\u7684\u6587\u4ef6\u53e5\u67c4\uff0c\u4e00\u822c\u663e\u5f0f\u7684\u662f\u4e00\u4e2a\u8def\u5f84\uff1a ls -l /proc/2824114/fd lrwx------ 1 root root 64 Jan 5 09:47 4 -> /tmp/.1.txt.swp \u5f53\u7136 path \u53ea\u662f\u4e00\u4e2a\u6d45\u5c42\u6b21\u7684\u611f\u5b98\uff0c\u56e0\u4e3a\u5bf9\u4e8e socket \u53e5\u67c4\u6765\u8bf4\u4e5f\u4e0d\u7b97\u6709 path \uff0c\u6240\u4ee5\u8fd9\u4e2a\u533f\u540d\u5176\u5b9e \u533f\u7684\u662f inode \u3002 \u4e3a\u4ec0\u4e48 \u5728 Linux \u7684\u6587\u4ef6\u4f53\u7cfb\u4e2d\uff0c\u4e00\u4e2a\u6587\u4ef6\u53e5\u67c4\uff0c\u5bf9\u5e94\u4e00\u4e2a file \u7ed3\u6784\u4f53\uff0c\u5173\u8054\u4e00\u4e2a inode \u3002 file/dentry/inode \u8fd9\u4e09\u9a7e\u9a6c\u8f66\u662f\u4e00\u5b9a\u8981\u914d\u9f50\u7684 \uff0c\u5c31\u7b97\u662f\u533f\u540d\u7684\uff08\u65e0 path\uff0c\u65e0\u6548 dentry\uff09\uff0c\u5bf9\u4e8e file \u7ed3\u6784\u4f53\u6765\u8bf4\uff0c\u4e00\u5b9a\u8981\u7ed1\u5b9a inode \u548c dentry \uff0c \u54ea\u6015\u662f\u4f2a\u9020\u7684\u3001\u4e0d\u5b8c\u6574\u7684 inode \u3002 anon_inodefs \u5c31\u5e94\u8fd0\u800c\u751f\u4e86\uff0c\u5185\u6838\u5c31\u5e2e\u4f60\u641e\u51fa\u6765\u4e00\u4e2a\u516c\u5171\u7684 inode \uff0c\u8fd9\u5c31\u8282\u7701\u4e86\u6240\u6709\u6709\u8fd9\u6837\u9700\u6c42\u7684\u5185\u6838\u6a21\u5757\uff0c\u907f\u514d\u4e86\u5185\u5b58\u7684\u6d6a\u8d39\uff0c\u7701\u4e86\u5197\u4f59\u91cd\u590d\u7684 inode \u521d\u59cb\u5316\u4ee3\u7801\u3002 \u533f\u540d fd \u80cc\u540e\u7684\u662f\u4e00\u4e2a\u53eb\u505a anon_inodefs \u7684\u5185\u6838\u6587\u4ef6\u7cfb\u7edf\uff08 \u4f4d\u4e8e fs/anon_inodes.c \uff09\uff0c\u8fd9\u4e2a\u6587\u4ef6\u7cfb\u7edf\u6781\u5176\u7b80\u5355\uff0c\u6574\u4e2a\u6587\u4ef6\u7cfb\u7edf\u53ea\u6709\u4e00\u4e2a inode \uff0c\u8fd9\u4e2a inode \u662f\u6587\u4ef6\u7cfb\u7edf\u521d\u59cb\u5316\u7684\u65f6\u5019\u521b\u5efa\u597d\u7684\u3002\u4e4b\u540e\uff0c\u6240\u6709\u9700\u8981\u4e00\u4e2a\u533f\u540d inode \u7684\u53e5\u67c4\u90fd\u76f4\u63a5\u8ddf\u8fd9\u4e2a inode \u5173\u8054\u5373\u53ef\u3002 \u600e\u4e48\u529e 1 anon_inodefs \u7684\u521d\u59cb\u5316 \u4e0a\u9762\u63d0\u5230\u4e86\uff0c\u533f\u540d inode \u662f\u4e00\u4e2a\u516c\u5171\u9700\u6c42\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u4e00\u4e2a\u5b8c\u6574\u529f\u80fd\u7684 inode\uff0c\u800c\u53ea\u662f\u9700\u8981\u4e00\u4e2a inode \u800c\u5df2\uff0c\u7ed1\u5b9a\u5230 dentry \uff0cfile \u7b49\u7ed3\u6784\u4f53\u3002 anon_inodes.c \u7528\u6765\u521b\u5efa\u4e00\u4e2a\u7ed1\u5b9a\u533f\u540d inode \u7684 file \u7ed3\u6784\u4f53\u3002 \u6574\u4e2a anon_inodefs \u5c31\u53ea\u6709\u4e00\u4e2a\u6587\u4ef6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u521d\u59cb\u5316\u7684\u65f6\u5019\u4f1a\u8c03\u7528\u521d\u59cb\u5316\u51fd\u6570 fs_initcall(anon_inode_init) \uff0c\u5176\u4e2d anon_inode_init \u53ea\u505a\u4e24\u4ef6\u4e8b\uff1a \u521b\u5efa\u51fa\u4e00\u4e2a vfsmount \u5b9e\u4f8b\uff0c\u521b\u5efa\u51fa\u6765\u4e4b\u540e\u8d4b\u503c\u7ed9\u5168\u5c40\u53d8\u91cf anon_inode_mnt \uff1b \u521b\u5efa\u51fa\u4e00\u4e2a inode \u5b9e\u4f8b\uff0c\u521b\u5efa\u51fa\u6765\u4e4b\u540e\u8d4b\u503c\u7ed9\u5168\u5c40\u53d8\u91cf anon_inode_inode \uff1b \u8fd9\u4e24\u4e2a\u53d8\u91cf\u5c31\u662f anon_inodefs \u8fd9\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7684\u5168\u90e8\u5bb6\u5f53\u4e86\u3002 \u6e90\u7801\u5982\u4e0b: fs/anod_inodes.c : static int __init anon_inode_init(void) { anon_inode_mnt = kern_mount(&anon_inode_fs_type); if (IS_ERR(anon_inode_mnt)) panic(\"anon_inode_init() kernel mount failed (%ld)\\n\", PTR_ERR(anon_inode_mnt)); anon_inode_inode = alloc_anon_inode(anon_inode_mnt->mnt_sb); if (IS_ERR(anon_inode_inode)) panic(\"anon_inode_init() inode allocation failed (%ld)\\n\", PTR_ERR(anon_inode_inode)); return 0; } fs_initcall(anon_inode_init); 2 anon_inodefs \u5bf9\u5916\u63d0\u4f9b\u7684\u63a5\u53e3 anon_inodefs \u53ea\u63d0\u4f9b\u4e86 2 \u4e2a\u5b9e\u7528\u51fd\u6570\uff0c\u4e00\u4e2a\u83b7\u53d6\u5230\u4e00\u4e2a\u7ed1\u5b9a\u533f\u540d inode \u7684 file \u5b9e\u4f8b\uff0c\u53e6\u4e00\u4e2a\u66f4\u591a\u4e00\u4e9b\u5c01\u88c5\uff0c\u8fd4\u56de\u7684\u662f fd \u53e5\u67c4\uff08\u6574\u6570\uff09\u3002\u5982\u4e0b\uff1a 2.1 anon_inode_getfile \u8fd9\u4e2a\u51fd\u6570\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u505a\u4e24\u4ef6\u4e8b\uff1a \u83b7\u53d6\u4e00\u4e2a inode \uff08 \u83b7\u53d6\u5168\u5c40\u7684 inode \u53d8\u91cf anon_inode_inode \uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u53c2\u6570\u63a7\u5236\u6765\u521b\u5efa\u65b0\u7684 inode \uff09\uff1b \u521b\u5efa\u4e00\u4e2a file \u7ed3\u6784\u4f53\u5b9e\u4f8b\uff0c\u5e76\u4e14\u628a\u8fd9\u4e2a inode \u5173\u8054\u8d77\u6765\uff1b \u8fd4\u56de struct file \u5b9e\u4f8b 2.2 anon_inode_getfd \u8fd9\u4e2a\u51fd\u6570\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u505a\u4e24\u4ef6\u4e8b\u60c5\uff1a \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 fd \u53e5\u67c4\uff0c\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\uff1b \u521b\u5efa\u4e00\u4e2a file \u5b9e\u4f8b\uff08 \u8c03\u7528\u7684\u662f anon_inode_getfile \u6765\u83b7\u53d6 \uff09\uff0c\u7136\u540e\u628a\u8fd9\u4e2a fd \u548c file \u5173\u8054\u8d77\u6765\uff1b \u8fd4\u56de struct file \u5b9e\u4f8b\u5bf9\u5e94\u5230\u5f53\u524d task_struct \u7684\u6587\u4ef6\u53e5\u67c4\uff08\u4e00\u4e2a\u6b63\u6574\u6570\uff09 \u8fd9\u4e24\u4e2a\u51fd\u6570\u5c31\u662f anon_inodefs \u63d0\u4f9b\u7684\u4e24\u4e2a\u5bf9\u5916\u7684\u51fd\u6570\u63a5\u53e3\u3002\u83b7\u53d6\u5230\u4e00\u4e2a file \u5b9e\u4f8b\uff0c\u8fd9\u4e2a\u5b9e\u4f8b\u7ed1\u5b9a\u5230 anon_inodefs \u516c\u5171\u7684 inode \u5b9e\u4f8b\u3002 \u5173\u4e8e anon_inodefs \u7684\u529f\u80fd\uff0c\u5176\u5b9e\u5728\u51fd\u6570\u7684\u6ce8\u91ca\u4e2d\u4e5f\u63d0\u5230\u4e86\uff0c\u592a\u76f4\u767d\u4e86\uff0c\u5982\u4e0b\uff1a // anon_inode_getfile \u548c anon_inode_getfd \u7684\u6ce8\u91ca\u660e\u786e\u63d0\u5230\u4e86 anon_inodefs \u7684\u4e24\u4e2a\u76ee\u7684\uff1a // - \u8282\u7701\u5185\u5b58 // - \u5c01\u88c5\u516c\u5171\u7684\u5197\u4f59\u4ee3\u7801 * Creates a new file by hooking it on a single inode. This is * useful for files that do not need to have a full-fledged inode in * order to operate correctly. All the files created with * anon_inode_getfd() will use the same singleton inode, reducing * memory use and avoiding code duplication for the file/inode/dentry * setup. Returns a newly created file descriptor or an error code. 3 dentry \u540d\u5b57\u4e3a\u5565\u53eb\u201canon_inode:${dentry_name}\u201d ? \u8fd8\u662f\u5f97\u770b\u6e90\u7801 \u4e3a\u4ec0\u4e48\u5e38\u89c1\u7684\u533f\u540d fd \u90fd\u6709\u4ee5 \u201canon_inode:\u201d \u8fd9\u6837\u5f00\u5934\uff1f \u5176\u5b9e\u8fd9\u79cd\u770b\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u90fd\u662f path \uff0c\u8fd9\u4e2a\u662f\u548c dentry \u5bf9\u5e94\u8d77\u6765\u7684\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u533f\u540d inode \u7684 dentry \uff0c\u6709\u7740\u7edf\u4e00\u7684\u540d\u5b57\uff1a // dentry \u7684\u64cd\u4f5c\u8868 static const struct dentry_operations anon_inodefs_dentry_operations = { .d_dname = anon_inodefs_dname, }; // \u64cd\u4f5c\u8868 .d_dname \u65b9\u6cd5\u7684\u5b9a\u5236\u5b9e\u73b0 static char *anon_inodefs_dname(struct dentry *dentry, char *buffer, int buflen) { return dynamic_dname(dentry, buffer, buflen, \"anon_inode:%s\", dentry->d_name.name); } \u90a3\u4e48 dentry->d_name.name \u53c8\u662f\u600e\u4e48\u8d4b\u503c\u7684\u5462\uff1f\u6211\u4ee5 epoll fd \u6765\u4e3e\u4e2a\u4f8b\u5b50\uff1a // epoll_create \u51fd\u6570\u5165\u53e3 ( fs/eventpoll.c ) static int do_epoll_create(int flags) { // \u521b\u5efa\u533f\u540d\u53e5\u67c4 ... file = anon_inode_getfile(\"[eventpoll]\", &eventpoll_fops, ep, O_RDWR | (flags & O_CLOEXEC)); } \u4f20\u5165\u7684 name \u662f\"[eventpoll]\",\u6240\u4ee5\"anon_inode:%s\"\u6700\u7ec8\u7ec4\u5408\u8d77\u6765\u5c31\u662f\"anon_inode:[eventpoll]\" \u53c2\u8003 Linux fd \u7cfb\u5217 | \u533f\u540d fd \u662f\u4ec0\u4e48\uff1f 4 \u8c01\u7528\u5230\u4e86\u533f\u540d inode \u968f\u4fbf\u5217\u4e3e\u4e00\u4e9b eventfd\uff0ceventpoll\uff0ctimerfd\uff0csignalfd\uff0cinotifyfd\uff0cio_uring fd \u7b49\u7b49\uff0c\u8fd8\u6709\u5f88\u591a 5 Linux \u76ee\u5f55\u6811\u548c\u5185\u6838 dentry \u6811 \u5728 Linux \u4e2d\u662f\u4e00\u4e2a\u5012\u6302\u6811\u7684\u8bbe\u8ba1\uff0c\u4ece\u6839\u76ee\u5f55\uff08 / \uff09\u5f00\u59cb\uff0c\u53f6\u5b50\u7ed3\u70b9\u4e3a\u6587\u4ef6\u6216\u8005\u76ee\u5f55\uff0c\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u7ed3\u70b9\u8fd9\u4e00\u6bb5\u5c31\u79f0\u4e3a path \u8def\u5f84\uff0c\u5728\u5185\u5b58\u91cc\u9762\u8fd9\u9897\u5012\u6302\u7684\u6811\u5c31\u4f53\u73b0\u4e3a dentry \u6811\uff0c\u8282\u70b9\u5c31\u662f dentry \u7ed3\u6784\u4f53\u3002 \u8fd9\u91cc\u5c31\u6709\u4e2a\u91cd\u8981\u7684\u77e5\u8bc6\u70b9\uff1a \u5212\u91cd\u70b9\uff1a\u4e00\u4e2a inode \u4e0a\u53ef\u4ee5\u6302\u591a\u4e2a dentry \uff0c\u4e00\u4e2a dentry \u53ea\u80fd\u5c5e\u4e8e\u4e00\u4e2a inode \u3002 \u53ef\u4ee5\u770b\u5230/etc/a.txt \u548c /etc/b.txt \u4e92\u4e3a\u786c\u94fe\u63a5 \u6bcf\u4e2a\u6587\u4ef6\u6216\u8005\u76ee\u5f55\u90fd\u4f1a\u5728\u8fd9\u68f5\u6811\u4e0a\u6709\u81ea\u5df1\u7684\u4f4d\u7f6e\uff0c\u5185\u6838\u7528 struct path \u7ed3\u6784\u4f53\u6765\u8868\u793a\u552f\u4e00\u7684\u4f4d\u7f6e\u3002 struct path { struct vfsmount *mnt; // \u6807\u8bc6\u5728\u54ea\u4e2a\u5177\u4f53\u7684\u6587\u4ef6\u7cfb\u7edf\u5b9e\u4f8b struct dentry *dentry; // \u5185\u5b58\u76ee\u5f55\u6811\u8282\u70b9 }; \u8fd9\u91cc\u987a\u4fbf\u518d\u8bf4\u53e6\u4e00\u4e2a\u91cd\u8981\u77e5\u8bc6\u70b9\uff1a\u4e3a\u4ec0\u4e48\u5185\u6838\u4e4b\u4e2d\uff0c\u9700\u8981\u7528 struct path \u8fd9\u4e2a\u590d\u5408\u7ed3\u6784\u4f53\u6765\u6807\u8bc6\u552f\u4e00\u7684\u4e00\u4e2a\u76ee\u5f55\u6811\u4f4d\u7f6e\u5462\uff1f \u5176\u5b9e\u6240\u8c13\u7684 \u6302\u8f7d \u662f\u628a\u6587\u4ef6\u7cfb\u7edf\u5b9e\u4f8b\u548c\u76ee\u5f55\u6811\u4e0a\u7684\u4e00\u4e2a dentry \u5173\u8054\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u4e2a vfsmount \u7ed3\u6784\u4f53\u5b9e\u4f8b\u3002\u800c\u4e00\u4e2a dentry \u662f\u53ef\u4ee5\u7ed1\u5b9a\u591a\u4e2a\u6587\u4ef6\u7cfb\u7edf\u5b9e\u4f8b\u7684\u3002 \u6587\u4ef6\u7cfb\u7edf\u5b9e\u4f8b\u662f\u6307 super_block \u5417\uff1f\u5e94\u8be5\u4e0d\u5bf9\uff0c\u5e94\u8be5\u662f\u4e00\u4e2a vfsmount \u5b9e\u4f8b struct vfsmount { struct dentry *mnt_root; /* root of the mounted tree */ //\u6307\u5411\u6302\u8f7d\u6587\u4ef6\u7cfb\u7edf\u6839\u76ee\u5f55\u9879dentry\u5b9e\u4f8b struct super_block *mnt_sb; /* pointer to superblock */ //\u6307\u5411\u6587\u4ef6\u7cfb\u7edf\u8d85\u7ea7\u5757\u5b9e\u4f8b int mnt_flags; //\u5185\u6838\u5185\u90e8\u4f7f\u7528\u7684\u6302\u8f7d\u6807\u8bb0 struct user_namespace *mnt_userns; }; mount \u6e90\u7801\u662f\u600e\u6837\u7684\uff0c\u53c2\u8003 Linux \u5185\u6838\u2014\u6587\u4ef6\u7cfb\u7edf mount \u8fc7\u7a0b \u6362\u53e5\u8bdd\u8bf4\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u76ee\u5f55\u6811\u8def\u5f84\u5176\u5b9e\u662f\u53ef\u4ee5\u6302\u8f7d\u591a\u4e2a\u6587\u4ef6\u7cfb\u7edf\u5b9e\u4f8b\u3002\u6bd4\u5982 /mnt/path \u8fd9\u4e48\u4e00\u4e2a\u8def\u5f84\uff0c\u5176\u5b9e\u662f\u53ef\u4ee5\u6302\u8f7d\u591a\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7684\uff0c\u4e0d\u4f1a\u62a5\u9519\uff0c\u540e\u9762\u7684\u6302\u8f7d\u76f4\u63a5\u8986\u76d6\u524d\u9762\u7684\u3002 timerfd timerfd \u662f\u4ec0\u4e48 timerfd \u662f\u4e00\u4e2a\u65f6\u95f4\u76f8\u5173\u7684 fd\uff0c\u5f53 timerfd \u521d\u59cb\u5316\u65f6\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u8d85\u65f6\u65f6\u95f4\uff0c\u8d85\u65f6\u4e4b\u540e\uff0c\u8be5\u53e5\u67c4\u53ef\u8bfb\uff0c\u8bfb\u51fa\u6765\u7684\u662f\u8d85\u65f6\u7684\u6b21\u6570\u3002 timerfd \u57fa\u672c\u4f7f\u7528 timerfd \u76f8\u5173\u7684\u7cfb\u7edf\u8c03\u7528\u6709 3 \u4e2a\uff1a // \u521b\u5efa\u4e00\u4e2a timerfd \u53e5\u67c4 int timerfd_create(int clockid, int flags); // \u542f\u52a8\u6216\u5173\u95ed timerfd \u5bf9\u5e94\u7684\u5b9a\u65f6\u5668 int timerfd_settime(int fd, int flags, const struct itimerspec *new_value, struct itimerspec *old_value); // \u83b7\u53d6\u6307\u5b9a timerfd \u8ddd\u79bb\u4e0b\u4e00\u6b21\u8d85\u65f6\u8fd8\u5269\u7684\u65f6\u95f4 int timerfd_gettime(int fd, struct itimerspec *curr_value); timerfd \u5e38\u4e0e epoll \u7cfb\u7edf\u8c03\u7528\u7ed3\u5408\u4f7f\u7528\uff1a // \u521b\u5efa\u4e00\u4e2a timerfd \u53e5\u67c4 int fdTimer = timerfd_create(CLOCK_MONOTONIC, 0 /*flags*/); itimerspec timespec { // \u8bbe\u7f6e\u8d85\u65f6\u95f4\u9694 .it_interval = { .tv_sec = 5, .tv_nsec = 0, }, //\u7b2c\u4e00\u6b21\u8d85\u65f6\u65f6\u95f4 .it_value = { .tv_sec = 5, .tv_nsec = 0, }, }; //\u542f\u52a8\u5b9a\u65f6\u5668 int timeRes = timerfd_settime(fdTimer, 0 /*flags*/, &timespec, nullptr); // epoll \u76d1\u542c timerfd epoll_ctl(mEpollFd, EPOLL_CTL_Add, fdTimer, &eventItem); while (true) { // \u8fdb\u5165\u4f11\u7720\u72b6\u6001 epoll_wait(mEpollFd, eventItems, EPOLL_MAX_EVENTS, timeoutMillis); if (count < 0) { perror(\"epoll failed\"); break; } for (int i=0;i < count;i++) { //\u5904\u7406\u8ba1\u65f6\u5668\u5230\u8fbe\u4e8b\u4ef6 } } \u4e94 socketfs Linux \u5185\u6838-\u7f51\u7edc\u90e8\u5206\u4e4b sockfs 1 \u521d\u59cb\u5316 static int __init sock_init(void) { int err; /* * Initialize the network sysctl infrastructure. */ err = net_sysctl_init(); if (err) goto out; /* * Initialize skbuff SLAB cache */ skb_init(); /* * Initialize the protocols module. */ init_inodecache(); err = register_filesystem(&sock_fs_type); if (err) goto out_fs; sock_mnt = kern_mount(&sock_fs_type); if (IS_ERR(sock_mnt)) { err = PTR_ERR(sock_mnt); goto out_mount; } /* The real protocol initialization is performed in later initcalls. */ #ifdef CONFIG_NETFILTER err = netfilter_init(); if (err) goto out; #endif ptp_classifier_init(); out: return err; out_mount: unregister_filesystem(&sock_fs_type); out_fs: goto out; } core_initcall(sock_init); /* early initcall */ \u5bf9\u6bd4 anon_inode_init, fs/anon_inodes.c static int __init anon_inode_init(void) { anon_inode_mnt = kern_mount(&anon_inode_fs_type); if (IS_ERR(anon_inode_mnt)) panic(\"anon_inode_init() kernel mount failed (%ld)\\n\", PTR_ERR(anon_inode_mnt)); anon_inode_inode = alloc_anon_inode(anon_inode_mnt->mnt_sb); if (IS_ERR(anon_inode_inode)) panic(\"anon_inode_init() inode allocation failed (%ld)\\n\", PTR_ERR(anon_inode_inode)); return 0; } fs_initcall(anon_inode_init); \u5bf9\u6bd4 ext4 \u521d\u59cb\u5316 static int __init ext4_init_fs(void) { int i, err; ext4_li_info = NULL; mutex_init(&ext4_li_mtx); /* Build-time check for flags consistency */ ext4_check_flag_values(); for (i = 0; i < EXT4_WQ_HASH_SZ; i++) { mutex_init(&ext4__aio_mutex[i]); init_waitqueue_head(&ext4__ioend_wq[i]); } err = ext4_init_es(); if (err) return err; err = ext4_init_pageio(); if (err) goto out7; err = ext4_init_system_zone(); if (err) goto out6; ext4_kset = kset_create_and_add(\"ext4\", NULL, fs_kobj); if (!ext4_kset) { err = -ENOMEM; goto out5; } ext4_proc_root = proc_mkdir(\"fs/ext4\", NULL); err = ext4_init_feat_adverts(); if (err) goto out4; err = ext4_init_mballoc(); if (err) goto out2; else ext4_mballoc_ready = 1; err = init_inodecache(); if (err) goto out1; register_as_ext3(); register_as_ext2(); err = register_filesystem(&ext4_fs_type); if (err) goto out; return 0; out: unregister_as_ext2(); unregister_as_ext3(); destroy_inodecache(); out1: ext4_mballoc_ready = 0; ext4_exit_mballoc(); out2: ext4_exit_feat_adverts(); out4: if (ext4_proc_root) remove_proc_entry(\"fs/ext4\", NULL); kset_unregister(ext4_kset); out5: ext4_exit_system_zone(); out6: ext4_exit_pageio(); out7: ext4_exit_es(); return err; } module_init(ext4_init_fs) 2 fs_type: sock_fs_type \u548c mount static struct file_system_type sock_fs_type = { .name = \"sockfs\", .mount = sockfs_mount, .kill_sb = kill_anon_super, .get_sb = sockfs_get_sb, }; static struct dentry *sockfs_mount(struct file_system_type *fs_type, int flags, const char *dev_name, void *data) { return mount_pseudo(fs_type, \"socket:\", &sockfs_ops, &sockfs_dentry_operations, SOCKFS_MAGIC); } \u5bf9\u6bd4 anon_inode_fs_type, fs/anon_inodes.c static struct file_system_type anon_inode_fs_type = { .name = \"anon_inodefs\", .mount = anon_inodefs_mount, .kill_sb = kill_anon_super, }; static struct dentry *anon_inodefs_mount(struct file_system_type *fs_type, int flags, const char *dev_name, void *data) { return mount_pseudo(fs_type, \"anon_inode:\", NULL, &anon_inodefs_dentry_operations, ANON_INODE_FS_MAGIC); } \u5bf9\u6bd4 ext4 fs/ext4/super.c static struct file_system_type ext4_fs_type = { .owner = THIS_MODULE, .name = \"ext4\", .mount = ext4_mount, .kill_sb = kill_block_super, .fs_flags = FS_REQUIRES_DEV, }; static struct dentry *ext4_mount(struct file_system_type *fs_type, int flags, const char *dev_name, void *data) { return mount_bdev(fs_type, flags, dev_name, data, ext4_fill_super); } 3 \u4f55\u65f6\u8c03\u7528 sock_fs_type.mount \u5462? 4 dentry_operations /* * sockfs_dname() is called from d_path(). */ static char *sockfs_dname(struct dentry *dentry, char *buffer, int buflen) { return dynamic_dname(dentry, buffer, buflen, \"socket:[%lu]\", dentry->d_inode->i_ino); } static const struct dentry_operations sockfs_dentry_operations = { .d_dname = sockfs_dname, }; \u5bf9\u6bd4 anon_fs /* * anon_inodefs_dname() is called from d_path(). */ static char *anon_inodefs_dname(struct dentry *dentry, char *buffer, int buflen) { return dynamic_dname(dentry, buffer, buflen, \"anon_inode:%s\", dentry->d_name.name); } static const struct dentry_operations anon_inodefs_dentry_operations = { .d_dname = anon_inodefs_dname, }; \u5bf9\u6bd4 ext4 5 super_operations static const struct super_operations sockfs_ops = { .alloc_inode = sock_alloc_inode, .destroy_inode = sock_destroy_inode, .statfs = simple_statfs, }; \u5bf9\u6bd4 ext4 static const struct super_operations ext4_sops = { .alloc_inode = ext4_alloc_inode, .destroy_inode = ext4_destroy_inode, .write_inode = ext4_write_inode, .dirty_inode = ext4_dirty_inode, .drop_inode = ext4_drop_inode, .evict_inode = ext4_evict_inode, .put_super = ext4_put_super, .sync_fs = ext4_sync_fs, .freeze_fs = ext4_freeze, .unfreeze_fs = ext4_unfreeze, .statfs = ext4_statfs, .remount_fs = ext4_remount, .show_options = ext4_show_options, #ifdef CONFIG_QUOTA .quota_read = ext4_quota_read, .quota_write = ext4_quota_write, #endif .bdev_try_to_free_page = bdev_try_to_free_page, }; \u6ce8\u518c\u6587\u4ef6\u7cfb\u7edf /** * register_filesystem - register a new filesystem * @fs: the file system structure * * Adds the file system passed to the list of file systems the kernel * is aware of for mount and other syscalls. Returns 0 on success, * or a negative errno code on an error. * * The &struct file_system_type that is passed is linked into the kernel * structures and must not be freed until the file system has been * unregistered. */ int register_filesystem(struct file_system_type * fs) { int res = 0; struct file_system_type ** p; BUG_ON(strchr(fs->name, '.')); if (fs->next) return -EBUSY; write_lock(&file_systems_lock); p = find_filesystem(fs->name, strlen(fs->name)); if (*p) res = -EBUSY; else *p = fs; write_unlock(&file_systems_lock); return res; } EXPORT_SYMBOL(register_filesystem); 1 \u68c0\u67e5\u6587\u4ef6\u7cfb\u7edf\u540d\u79f0\u4e2d\u662f\u5426\u5305\u542b\u70b9\u53f7\uff0c\u5982\u679c\u5305\u542b\uff0c\u5219\u5f15\u53d1 BUG\uff08\u5185\u6838\u9519\u8bef\uff09\u3002 2 \u68c0\u67e5\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u662f\u5426\u5df2\u7ecf\u6ce8\u518c\uff0c\u5982\u679c\u5df2\u7ecf\u6ce8\u518c\uff0c\u5219\u8fd4\u56de -EBUSY \u8868\u793a\u7e41\u5fd9\u3002 3 \u521d\u59cb\u5316\u6587\u4ef6\u7cfb\u7edf\u8d85\u7ea7\u5757\u94fe\u8868\u3002 4 \u4f7f\u7528\u5199\u9501\u9501\u5b9a file_systems_lock\uff0c\u4ee5\u786e\u4fdd\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u5bf9\u6587\u4ef6\u7cfb\u7edf\u5217\u8868\u7684\u5e76\u53d1\u5b89\u5168\u3002 5 \u67e5\u627e\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u662f\u5426\u5df2\u7ecf\u5b58\u5728\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5219\u8fd4\u56de -EBUSY\uff0c\u5426\u5219\u5c06\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u6dfb\u52a0\u5230\u6587\u4ef6\u7cfb\u7edf\u5217\u8868\u4e2d\u3002 6 \u91ca\u653e\u5199\u9501\uff0c\u5b8c\u6210\u6ce8\u518c\u3002 \u5176\u4ed6\u6587\u4ef6\u7cfb\u7edf tmpfs devtmpfs devtmpfs \u7684\u529f\u7528\u662f\u5728 Linux \u6838\u5fc3 \u542f\u52a8\u65e9\u671f\u5efa\u7acb\u4e00\u4e2a\u521d\u6b65\u7684 /dev\uff0c\u4ee4\u4e00\u822c\u542f\u52a8\u7a0b\u5e8f\u4e0d\u7528\u7b49\u5f85 udev\uff0c\u7f29\u77ed GNU/Linux \u7684\u5f00\u673a\u65f6\u95f4\u3002 debugfs \u5728\u5185\u6838\u8ffd\u8e2a\u6280\u672f\u7684\u53d1\u5c55\u521d\u671f\uff0c\u8ffd\u8e2a\u76f8\u5173\u7684\u6587\u4ef6\u90fd\u653e\u5728 debugfs \u865a\u62df\u6587\u4ef6\u7cfb\u7edf\u4e2d\uff0cdebugfs \u4e3b\u8981\u8bbe\u8ba1\u76ee\u7684\u662f\u4e3a\u4e86\u63d0\u4f9b\u4e00\u4e2a\u901a\u7528\u7684\u5185\u6838\u8c03\u8bd5\u63a5\u53e3\uff0c\u5185\u6838\u7684\u4efb\u610f\u5b50\u7cfb\u7edf\u90fd\u6709\u53ef\u80fd\u4f7f\u7528 debugfs \u505a\u8c03\u8bd5. socketfs pipefs ramfs btrfs autofs","title":"\u7b2c\u516d\u7bc7 \u5404\u7c7b\u6587\u4ef6\u7cfb\u7edf\u68b3\u7406"},{"location":"chapter_5/6_fss/#_1","text":"\u672c\u7bc7\u68b3\u7406\u5404\u7c7b\u6587\u4ef6\u7cfb\u7edf","title":"\u6982\u8ff0"},{"location":"chapter_5/6_fss/#sys","text":"sysfs \u662f Linux \u4e0b\u53ef\u4ee5\u53cd\u5e94\u8bbe\u5907\u5c42\u6b21\u67b6\u6784\u7684\u4e00\u4e2a\u865a\u62df\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\u4ed6\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u5305\u62ec\u6240\u6709\u786c\u4ef6\u7684\u5c42\u7ea7\u89c6\u56fe\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8f93\u5165\u8f93\u51fa\u8fdb\u884c\u4e00\u4e9b\u786c\u4ef6\u64cd\u4f5c\u3002 \u57fa\u672c\u4e0a\u6302\u8f7d\u5728/sys \u76ee\u5f55","title":"\u4e00 sys"},{"location":"chapter_5/6_fss/#_2","text":"\u53c2\u8003 \u7b2c\u5341\u56db\u7ae0 \u7b2c\u516b\u7bc7 \u53c2\u8003 \u7b2c\u4e94\u7ae0 \u7b2c\u516b\u7bc7 \u6bcf\u4e2a kobject \u5bf9\u5e94 sys\u6587\u4ef6\u7cfb\u7edf \u4e0b\u7684\u4e00\u4e2a\u76ee\u5f55, \u76ee\u5f55\u4e0b\u53ef\u4ee5\u76f4\u63a5\u662f\u8be5 kobject \u7684\u5c5e\u6027\uff08\u6bd4\u5982 name \u5c5e\u6027, \u4f7f\u7528 sysfs_create_files \u521b\u5efa) \u4e5f\u53ef\u4ee5\u662f\u591a\u4e2a\u5c5e\u6027\u5f62\u6210\u7684\u4e00\u4e2a group\uff0cgroup \u662f\u4e00\u4e2a\u5c5e\u6027\u7ec4\uff0c\u8868\u73b0\u4e3a\u8be5\u76ee\u5f55\u4e0b\u7684\u5b50\u76ee\u5f55\uff0c\u5c5e\u6027\u7ec4\u5185\u6240\u6709\u7684 attr \u90fd\u662f\u6587\u4ef6\uff0c\u53c2\u8003\u4e0b\u6587\u7684 struct attribute_group \u6570\u7ec4\u548c sysfs_create_group","title":"\u57fa\u7840\u77e5\u8bc6"},{"location":"chapter_5/6_fss/#api","text":"kobject_create_and_add sysfs_create_group sysfs_remove_group","title":"\u5173\u4e8e\u5185\u6838 API \u51fd\u6570"},{"location":"chapter_5/6_fss/#linux-sysfs","text":"\u672c\u8d28\u4e0a\u662f\u5728/sys \u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e9b\u76ee\u5f55\u6216\u8005\u6587\u4ef6, \u7136\u540e\u5f80\u8fd9\u4e9b\u6587\u4ef6\u8fdb\u884c read\u3001write \u8c03\u7528\u65f6, \u81ea\u52a8\u53ef\u4ee5\u6267\u884c\u4e00\u4e9b\u5185\u6838\u51fd\u6570. \u4e3e\u4e2a\u4f8b\u5b50 \u5176\u5b9e\u53ef\u4ee5\u81ea\u5df1\u5199\u51fd\u6570\u83b7\u53d6\u5185\u6838\u4fe1\u606f, \u4ece\u800c\u5b9e\u73b0\u76d1\u63a7\u63a5\u53e3.","title":"Linux \u4e0b\u6dfb\u52a0\u81ea\u5df1\u7684 sysfs \u63a5\u53e3"},{"location":"chapter_5/6_fss/#1","text":"\u6dfb\u52a0\u6b65\u9aa4\u4ece\u9700\u6c42\u65b9\u5411\u6765\u770b\u3002","title":"1 \u6dfb\u52a0\u6b65\u9aa4"},{"location":"chapter_5/6_fss/#11","text":"struct kobject *test_kobj = NULL; int mysys_init(void) { ... test_kobj = kobject_create_and_add(\"test_sysfs\", NULL); sysfs_create_group(test_kobj, &test_sysfs_attr_group); ... } void mysys_exit(void) { ... sysfs_remove_group(test_kobj , &test_sysfs_attr_group); kobject_put(test_kobj ); } \u9996\u5148\u9700\u8981\u5411\u7cfb\u7edf\u6ce8\u518c\u76ee\u5f55 test_sysfs \uff0c kobject_create_and_add(\"test_sysfs\", NULL) \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u76ee\u5f55\u540d\u79f0\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u7236\u76ee\u5f55\uff0c NULL \u4e3a\u7a7a\uff0c\u90a3\u5c31\u4f1a\u5728 /sys/ \u751f\u6210\u76ee\u5f55\uff0c\u7ed3\u679c\u4e3a /sys/test_sysfs \u3002 \u5982\u679c\u4f7f\u7528\u7236\u76ee\u5f55\u5982 kobject_create_and_add(\"test_sysfs\", firmware_kobj) \u5c31\u4f1a\u5728 /sys/firmware/ \u4e0b\u751f\u6210\u76ee\u5f55 /sys/firmware/test_sysfs \u3002\u5176\u4e2d firmware_kobj \u662f\u5728 drivers/base/firmware.c \u5b9a\u4e49\u7684\u5168\u5c40\u53d8\u91cf\u3002 firmware_kobj = kobject_create_and_add(\"firmware\", NULL);","title":"1.1 \u6ce8\u518c"},{"location":"chapter_5/6_fss/#12-struct-attribute-struct-attribute_group","text":"static struct attribute_group test_sysfs_attr_group= { .name = \"test_my_attr\", //\u4e0d\u5199\u8fd9\u4e2a\u6210\u5458\u5c31\u4e0d\u4f1a\u521b\u5efa\u5b50\u6587\u4ef6\u5939 .attrs = test_sysfs_attr, }; static struct attribute *test_sysfs_attr[] = { &test_sysfs_read.attr, &test_sysfs_write.attr, &test_sysfs_num1.attr, &test_sysfs_num2.attr, NULL, }; \u8fd9\u662f\u6ce8\u518c\u4f7f\u7528\u7684\u7ed3\u6784\u4f53\u3002 .name = \"test_my_attr\" ,\u4f1a\u518d\u521b\u5efa\u4e00\u4e2a\u5b50\u6587\u4ef6\u5939\uff0c\u4f1a\u5f62\u6210\u76ee\u5f55 /sys/test_sysfs/test_my_attr \u3002\u5982\u679c\u4e0d\u9700\u8981\u8fd9\u884c\u4e0d\u52a0\u5c31\u884c\u4e86\u3002 test_sysfs_attr \u8fd9\u4e2a\u6307\u9488\u6570\u7ec4\u5305\u542b\u7684\u5185\u5bb9\u5c31\u662f\u5305\u542b\u8981\u663e\u793a\u7684\u5c5e\u6027\u7684\u5730\u5740\u3002\u6b64\u4f8b\u5b50\u4e2d\u4e3a read\u3001write\u3001num1\u3001num2 \u8fd9\u51e0\u4e2a\u5c5e\u6027\u3002","title":"1.2 \u5b9a\u4e49 struct attribute \u548c struct attribute_group \u6570\u7ec4"},{"location":"chapter_5/6_fss/#13","text":"static struct kobj_attribute test_sysfs_read=**ATTR(show, S_IRUSR, test_show, NULL); static struct kobj_attribute test_sysfs_write=**ATTR(write, S_IWUSR, NULL,test_store); static struct kobj_attribute test_sysfs_num1=**ATTR(num1, S_IRUSR, test_num1, NULL); static struct kobj_attribute test_sysfs_num1=**ATTR(num2, S_IWUSR, NULL,test_num2); \u4f7f\u7528 __ATTR \u6784\u9020\u4e86 read\u3001write\u3001num1\u3001num2 \u8fd9\u51e0\u4e2a\u5c5e\u6027\u3002\u58f0\u660e\u4e86\u5bf9\u5e94\u7684\u51e0\u4e2a\u51fd\u6570\u3002 __ATTR \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f \u663e\u793a\u7684\u5c5e\u6027\uff08\u8282\u70b9\uff09\u540d\u5b57\uff1b \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f \u8282\u70b9\u6743\u9650\uff1b \u7b2c\u4e09\u4e2a\u53c2\u6570\u662f \u4f7f\u7528 cat \u547d\u4ee4\u67e5\u770b sys \u63a5\u53e3\u65f6\u8c03\u7528\u7684\u51fd\u6570 \u7b2c\u56db\u4e2a\u53c2\u6570\u662f \u4f7f\u7528 echo \u547d\u4ee4\u5f80 sys \u63a5\u53e3\u5199\u5165\u5185\u5bb9\u65f6\u8c03\u7528\u7684\u51fd\u6570","title":"1.3 \u6784\u9020\u5404\u4e2a\u5c5e\u6027"},{"location":"chapter_5/6_fss/#14","text":"\u7f16\u5199\u4e0a\u9762\u7684\u51e0\u4e2a\u51fd\u6570\u3002 static test_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf){ ... return 1; } static test_store(struct kobject *kobj, struct kobj_attribute *attr, constchar *buf, size_t count){ ... return count; } static test_num1(struct kobject *kobj, struct kobj_attribute *attr, char *buf){ ... return 1; } static test_num2(struct kobject *kobj, struct kobj_attribute *attr, constchar *buf, size_t count){ ... return count; } \u8fd9\u662f\u4ece\u9700\u6c42\u7aef\u770b\uff0c\u5b9e\u9645\u7684\u6b65\u9aa4\u5012\u7740\u6765\u5c31\u53ef\u4ee5\u4e86\u3002","title":"1.4 \u5404\u4e2a\u5c5e\u6027\u7684\u51fd\u6570\u7f16\u5199"},{"location":"chapter_5/6_fss/#2","text":"\u52a0\u8f7d\u540e\u53ef\u4ee5\u5728 sys \u4e0b\u770b\u5230\u76ee\u5f55 /sys/test_sysfs/test_my_attr/read /sys/test_sysfs/test_my_attr/write /sys/test_sysfs/test_my_attr/num1 /sys/test_sysfs/test_my_attr/num2 \u901a\u8fc7\u8c03\u7528 cat /sys/test_sysfs/test_my_attr/read \u53ef\u4ee5\u8c03\u7528 test_show \u51fd\u6570\uff1b \u901a\u8fc7\u8c03\u7528 echo 1 > /sys/test_sysfs/test_my_attr/num2 \u53ef\u4ee5\u8c03\u7528 test_num2 \u51fd\u6570\uff1b","title":"2 \u52a0\u8f7d\u540e\u4f7f\u7528"},{"location":"chapter_5/6_fss/#sysfs-cpu","text":"\uff08\u4e00\uff09 \u64cd\u4f5c CPU \u70ed\u63d2\u62d4 \u4f60\u65e0\u9700\u8c03\u7528\u7279\u6b8a\u7684\u63a5\u53e3\uff0c\u53ea\u9700\u8981 echo \u5c31\u53ef\u4ee5\u5728 sysfs \u4e2d\u901a\u8fc7\u5199\u6587\u4ef6\u7684\u65b9\u5f0f\u5c06 CPU \u8fdb\u884c\u70ed\u63d2\u62d4\uff1a [root@localhost ~]# echo 0 >/sys/devices/system/cpu/cpu0/online [root@localhost ~]# echo 0 >/sys/devices/system/cpu/cpu2/online \u7ed3\u679c\u5c31\u53ea\u5269 2 \u4e2a CPU \u4e86 [root@localhost ~]# cat /proc/cpuinfo |grep processor processor : 1 processor : 3 [root@localhost ~]# \uff08\u4e8c\uff09 \u67e5\u770b\u5df2\u7ecf\u88ab\u4e0b\u7ebf\u7684 CPU \u4ee5\u4e0a\u9762\u7684 CPU \u70ed\u63d2\u62d4\u4e3a\u4f8b\uff0c /sys/devices/system/cpu \u662f\u4e00\u4e2a\u76ee\u5f55\uff0c\u5b83\u8868\u793a\u7cfb\u7edf\u7684\u6240\u6709 CPU\uff0c\u5176\u5c5e\u6027\u4e3a\uff1a cpu0 cpu1 cpu2 cpu3 cpuidle isolated kernel_max microcode modalias nohz_full offline online possible power present uevent \u6211\u4eec\u67e5\u770b\u5176 offline \u5c5e\u6027\uff0c\u5b83\u8868\u793a\u5df2\u7ecf\u4e0b\u6389\u7684 CPU\uff0c\u53ea\u9700\u8981\u8bfb\u8be5\u6587\u4ef6\u5373\u53ef\uff1a [root@localhost ~]# cat /sys/devices/system/cpu/offline 0,2","title":"\u5229\u7528 sysfs \u64cd\u4f5c CPU \u4e0a\u7ebf\u4e0b\u7ebf\uff08\u70ed\u63d2\u62d4\uff09"},{"location":"chapter_5/6_fss/#proc","text":"","title":"\u4e8c proc"},{"location":"chapter_5/6_fss/#1_1","text":"/proc/cpuinfo /proc/meminfo /proc/interrupts \u2014> \u4e2d\u65ad\u60c5\u51b5 /proc/devices \u2014> \u5185\u6838\u8bc6\u522b\u7684\u8bbe\u5907 /proc/loadavg \u7cfb\u7edf\u8d1f\u8f7d /proc/uptime /proc/kmsg \u5185\u6838\u7684\u65e5\u5fd7\u63a5\u53e3 \uff0crsyslogd \u8fdb\u7a0b\u4ece\u8fd9\u91cc\u8bfb\u53d6\u5185\u6838\u6253\u5370\u7684\u65e5\u5fd7 /proc/stat ---> \u901a\u8fc7 top \u547d\u4ee4\u770b\u5230 cpu \u5229\u7528\u7387 /proc/diskstats ---> This file contains disk I/O statistics for each disk device. /proc/version \u67e5\u770b\u5f53\u524d Linux Kernel \u7684\u7248\u672c /proc/locks \u5219\u662f\u4fdd\u5b58\u5f53\u524d\u7531\u5185\u6838\u9501\u5b9a\u7684\u6587\u4ef6\u7684\u76f8\u5173\u4fe1\u606f /proc/filesystems \u663e\u793a\u5f53\u524d\u5185\u6838\u652f\u6301\u7684\u6587\u4ef6\u7cfb\u7edf http://man7.org/linux/man-pages/man5/proc.5.html /proc \u6587\u4ef6\u7cfb\u7edf\u5b98\u65b9\u6587\u6863","title":"1 \u6982\u89c8\u5404\u6587\u4ef6\u4f5c\u7528"},{"location":"chapter_5/6_fss/#2_1","text":"\u603b\u4f53\u6765\u8bf4\u5206\u4e3a 2 \u7c7b\uff1a 1 \u63d0\u4f9b\u7cfb\u7edf\u4fe1\u606f\u7684\u67e5\u770b\uff0c\u4f8b\u5982/proc,/proc/net 2 \u63d0\u4f9b\u7cfb\u7edf\u4fe1\u606f\u7684\u8bbe\u7f6e ,\u4f8b\u5982/proc/sys/fs /proc/sys/net /proc/sys/vm /proc/sys/kernel","title":"2 \u4e00\u4e9b\u603b\u7ed3"},{"location":"chapter_5/6_fss/#3-procpid","text":"cwd==> \u6307\u5411\u5f53\u524d\u7684\u5de5\u4f5c\u76ee\u5f55 fd ==> \u6307\u5411\u5f53\u524d\u6253\u5f00\u7684\u6587\u4ef6 comm ==> \u5f53\u524d\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u540d cmdline ==> \u542f\u52a8\u5f53\u524d\u8fdb\u7a0b\u7684\u5b8c\u6574\u7684\u547d\u4ee4\u884c","title":"3 /proc/${pid}/"},{"location":"chapter_5/6_fss/#linux","text":"\u4e00\u4e2a\u662f\u8fdb\u7a0b\u540d\uff0c nginx \u4e00\u4e2a\u662f\u5b8c\u6574\u547d\u4ee4\u884c\uff1a nginx: master process /usr/sbin/nginx -g daemon on; master_process on;","title":"Linux \u8fdb\u7a0b\u540d\u548c\u547d\u4ee4\u884c\u7684\u533a\u522b"},{"location":"chapter_5/6_fss/#bdevfs","text":"","title":"\u4e09 bdevfs"},{"location":"chapter_5/6_fss/#_3","text":"\u6587\u4ef6\u7cfb\u7edf\u7684\u7cbe\u9ad3\u6240\u5728\u662f\u8ba9\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u6587\u4ef6\u63cf\u8ff0\u7b26\u6765\u5bf9\u6307\u5b9a\u7684 inode \u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u64cd\u4f5c\u3002 \u4f2a\u6587\u4ef6\u7cfb\u7edf\u548c\u666e\u901a\u6587\u4ef6\u7cfb\u7edf\u7684\u533a\u522b\u5728\u4e8e\uff0c\u5176 inode \u5bf9\u7528\u6237\u4e0d\u53ef\u8bbf\u95ee\uff0c\u5373\u4ec5\u5728\u5185\u6838\u6001\u53ef\u89c1\uff0c\u4ece\u7528\u6237\u5c42\u7684\u89c6\u89d2\u6765\u770b\u8be5\u6587\u4ef6\u7cfb\u7edf\u5e76\u4e0d\u5b58\u5728\u3002 \u4f2a\u6587\u4ef6\u7cfb\u7edf\u7684\u4f5c\u7528\u662f\u5bf9\u4e00\u4e9b\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u5c01\u88c5\uff0c\u548c\u666e\u901a\u7684\u6587\u4ef6\u7edf\u4e00\u63a5\u53e3\uff0c\u5982\u5757\u8bbe\u5907 bdevfs \uff0c\u7ba1\u9053\u6587\u4ef6 pipefs \uff0c\u5957\u63a5\u5b57 socketfs \u7b49\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u7684\u7edf\u4e00\u5c01\u88c5\uff0c\u624d\u5b9e\u73b0\u4e86 Linux \u4e00\u5207\u7686\u6587\u4ef6\u7684\u601d\u60f3\u3002 \u53c2\u8003","title":"\u4ec5\u5b58\u4e8e\u5185\u6838\u7a7a\u95f4\u7684\u4f2a\u6587\u4ef6\u7cfb\u7edf"},{"location":"chapter_5/6_fss/#bdevfs_1","text":"bdevfs \u5bf9\u5e94\u7684\u8d85\u7ea7\u5757\u540d\u4e3a blockdev_superblock \uff0c\u521d\u59cb\u5316\u5de5\u4f5c\u5728\u7cfb\u7edf\u521d\u59cb\u5316\u65f6\u8c03\u7528 bdev_cache_init() \u5b8c\u6210\u3002\u6240\u6709\u8868\u793a\u5757\u8bbe\u5907\u7684 inode \u90fd\u4fdd\u5b58\u5728\u4f2a\u6587\u4ef6\u7cfb\u7edf bdevfs \u4e2d\u4ee5\u65b9\u4fbf\u5757\u8bbe\u5907\u7684\u7ba1\u7406\u3002Linux \u5c06\u5757\u8bbe\u5907\u7684 block_device \u548c bdev \u6587\u4ef6\u7cfb\u7edf \u7684\u5757\u8bbe\u5907\u7684 inode \u901a\u8fc7 struct bdev_inode \u8fdb\u884c\u5173\u8054\u3002 struct super_block *blockdev_superblock __read_mostly; static struct file_system_type bd_type = { .name = \"bdev\", .mount = bd_mount, .kill_sb = kill_anon_super, }; void __init bdev_cache_init(void) { int err; static struct vfsmount *bd_mnt; bdev_cachep = kmem_cache_create(\"bdev_cache\", sizeof(struct bdev_inode), 0, (SLAB_HWCACHE_ALIGN|SLAB_RECLAIM_ACCOUNT| SLAB_MEM_SPREAD|SLAB_ACCOUNT|SLAB_PANIC), init_once); err = register_filesystem(&bd_type); if (err) panic(\"Cannot register bdev pseudo-fs\"); bd_mnt = kern_mount(&bd_type); if (IS_ERR(bd_mnt)) panic(\"Cannot create bdev pseudo-fs\"); blockdev_superblock = bd_mnt->mnt_sb; /* For writeback */ } struct bdev_inode { struct block_device bdev; struct inode vfs_inode; }; Linux \u64cd\u4f5c\u7cfb\u7edf\u5b66\u4e60\u7b14\u8bb0\uff08\u5341\u56db\uff09\u5757\u8bbe\u5907 \u5757\u8bbe\u5907\u5256\u6790\u4e4b\u5173\u952e\u6570\u636e\u7ed3\u6784\u5206\u6790 - block_device/gendisk/hd_struct","title":"bdevfs"},{"location":"chapter_5/6_fss/#anon_inodefs-inode","text":"","title":"\u56db anon_inodefs \u533f\u540d inode \u6587\u4ef6\u7cfb\u7edf"},{"location":"chapter_5/6_fss/#_4","text":"\u4ec0\u4e48\u662f\u533f\u540d inode \u5728 Linux \u91cc\u4e00\u5207\u7686\u6587\u4ef6\uff0c\u4f60\u7406\u89e3\u7684\u5e38\u89c1\u201c\u6587\u4ef6\u201d\u6709\u4ec0\u4e48\u7279\u6027\uff1f\u662f\u8def\u5f84\uff0c\u4e5f\u5c31\u662f path \uff0c\u533f\u540d\u7684\u610f\u601d\u8bf4\u7684\u5c31\u662f\u6ca1\u6709\u8def\u5f84\uff08 \u5728\u5185\u6838\u91cc\u9762\u8bf4\u7684\u5c31\u662f\u6ca1\u6709\u6709\u6548\u7684 dentry \uff09 \u6765\u770b\u770b\u957f\u4ec0\u4e48\u6837 \u6211\u4eec\u7ecf\u5e38\u5728 /proc/${pid}/fd/ \u4e0b\u9762\u80fd\u770b\u5230 anon_inode : \u524d\u7f00\u7684\u53e5\u67c4\uff0c\u5982\u4e0b\uff1a root@ubuntu:~/temp# ll /proc/5398/fd lr-x------ 1 root root 64 Aug 24 09:39 11 -> anon_inode:inotify lrwx------ 1 root root 64 Aug 24 09:39 4 -> anon_inode:[eventpoll] lrwx------ 1 root root 64 Aug 24 09:39 5 -> anon_inode:[signalfd] lrwx------ 1 root root 64 Aug 24 09:39 7 -> anon_inode:[timerfd] lrwx------ 1 root root 64 Aug 24 09:39 9 -> anon_inode:[eventpoll] \u5982\u679c\u662f\u6b63\u5e38\u7684\u6587\u4ef6\u53e5\u67c4\uff0c\u4e00\u822c\u663e\u5f0f\u7684\u662f\u4e00\u4e2a\u8def\u5f84\uff1a ls -l /proc/2824114/fd lrwx------ 1 root root 64 Jan 5 09:47 4 -> /tmp/.1.txt.swp \u5f53\u7136 path \u53ea\u662f\u4e00\u4e2a\u6d45\u5c42\u6b21\u7684\u611f\u5b98\uff0c\u56e0\u4e3a\u5bf9\u4e8e socket \u53e5\u67c4\u6765\u8bf4\u4e5f\u4e0d\u7b97\u6709 path \uff0c\u6240\u4ee5\u8fd9\u4e2a\u533f\u540d\u5176\u5b9e \u533f\u7684\u662f inode \u3002","title":"\u662f\u4ec0\u4e48"},{"location":"chapter_5/6_fss/#_5","text":"\u5728 Linux \u7684\u6587\u4ef6\u4f53\u7cfb\u4e2d\uff0c\u4e00\u4e2a\u6587\u4ef6\u53e5\u67c4\uff0c\u5bf9\u5e94\u4e00\u4e2a file \u7ed3\u6784\u4f53\uff0c\u5173\u8054\u4e00\u4e2a inode \u3002 file/dentry/inode \u8fd9\u4e09\u9a7e\u9a6c\u8f66\u662f\u4e00\u5b9a\u8981\u914d\u9f50\u7684 \uff0c\u5c31\u7b97\u662f\u533f\u540d\u7684\uff08\u65e0 path\uff0c\u65e0\u6548 dentry\uff09\uff0c\u5bf9\u4e8e file \u7ed3\u6784\u4f53\u6765\u8bf4\uff0c\u4e00\u5b9a\u8981\u7ed1\u5b9a inode \u548c dentry \uff0c \u54ea\u6015\u662f\u4f2a\u9020\u7684\u3001\u4e0d\u5b8c\u6574\u7684 inode \u3002 anon_inodefs \u5c31\u5e94\u8fd0\u800c\u751f\u4e86\uff0c\u5185\u6838\u5c31\u5e2e\u4f60\u641e\u51fa\u6765\u4e00\u4e2a\u516c\u5171\u7684 inode \uff0c\u8fd9\u5c31\u8282\u7701\u4e86\u6240\u6709\u6709\u8fd9\u6837\u9700\u6c42\u7684\u5185\u6838\u6a21\u5757\uff0c\u907f\u514d\u4e86\u5185\u5b58\u7684\u6d6a\u8d39\uff0c\u7701\u4e86\u5197\u4f59\u91cd\u590d\u7684 inode \u521d\u59cb\u5316\u4ee3\u7801\u3002 \u533f\u540d fd \u80cc\u540e\u7684\u662f\u4e00\u4e2a\u53eb\u505a anon_inodefs \u7684\u5185\u6838\u6587\u4ef6\u7cfb\u7edf\uff08 \u4f4d\u4e8e fs/anon_inodes.c \uff09\uff0c\u8fd9\u4e2a\u6587\u4ef6\u7cfb\u7edf\u6781\u5176\u7b80\u5355\uff0c\u6574\u4e2a\u6587\u4ef6\u7cfb\u7edf\u53ea\u6709\u4e00\u4e2a inode \uff0c\u8fd9\u4e2a inode \u662f\u6587\u4ef6\u7cfb\u7edf\u521d\u59cb\u5316\u7684\u65f6\u5019\u521b\u5efa\u597d\u7684\u3002\u4e4b\u540e\uff0c\u6240\u6709\u9700\u8981\u4e00\u4e2a\u533f\u540d inode \u7684\u53e5\u67c4\u90fd\u76f4\u63a5\u8ddf\u8fd9\u4e2a inode \u5173\u8054\u5373\u53ef\u3002","title":"\u4e3a\u4ec0\u4e48"},{"location":"chapter_5/6_fss/#_6","text":"","title":"\u600e\u4e48\u529e"},{"location":"chapter_5/6_fss/#1-anon_inodefs","text":"\u4e0a\u9762\u63d0\u5230\u4e86\uff0c\u533f\u540d inode \u662f\u4e00\u4e2a\u516c\u5171\u9700\u6c42\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u4e00\u4e2a\u5b8c\u6574\u529f\u80fd\u7684 inode\uff0c\u800c\u53ea\u662f\u9700\u8981\u4e00\u4e2a inode \u800c\u5df2\uff0c\u7ed1\u5b9a\u5230 dentry \uff0cfile \u7b49\u7ed3\u6784\u4f53\u3002 anon_inodes.c \u7528\u6765\u521b\u5efa\u4e00\u4e2a\u7ed1\u5b9a\u533f\u540d inode \u7684 file \u7ed3\u6784\u4f53\u3002 \u6574\u4e2a anon_inodefs \u5c31\u53ea\u6709\u4e00\u4e2a\u6587\u4ef6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u521d\u59cb\u5316\u7684\u65f6\u5019\u4f1a\u8c03\u7528\u521d\u59cb\u5316\u51fd\u6570 fs_initcall(anon_inode_init) \uff0c\u5176\u4e2d anon_inode_init \u53ea\u505a\u4e24\u4ef6\u4e8b\uff1a \u521b\u5efa\u51fa\u4e00\u4e2a vfsmount \u5b9e\u4f8b\uff0c\u521b\u5efa\u51fa\u6765\u4e4b\u540e\u8d4b\u503c\u7ed9\u5168\u5c40\u53d8\u91cf anon_inode_mnt \uff1b \u521b\u5efa\u51fa\u4e00\u4e2a inode \u5b9e\u4f8b\uff0c\u521b\u5efa\u51fa\u6765\u4e4b\u540e\u8d4b\u503c\u7ed9\u5168\u5c40\u53d8\u91cf anon_inode_inode \uff1b \u8fd9\u4e24\u4e2a\u53d8\u91cf\u5c31\u662f anon_inodefs \u8fd9\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7684\u5168\u90e8\u5bb6\u5f53\u4e86\u3002 \u6e90\u7801\u5982\u4e0b: fs/anod_inodes.c : static int __init anon_inode_init(void) { anon_inode_mnt = kern_mount(&anon_inode_fs_type); if (IS_ERR(anon_inode_mnt)) panic(\"anon_inode_init() kernel mount failed (%ld)\\n\", PTR_ERR(anon_inode_mnt)); anon_inode_inode = alloc_anon_inode(anon_inode_mnt->mnt_sb); if (IS_ERR(anon_inode_inode)) panic(\"anon_inode_init() inode allocation failed (%ld)\\n\", PTR_ERR(anon_inode_inode)); return 0; } fs_initcall(anon_inode_init);","title":"1 anon_inodefs \u7684\u521d\u59cb\u5316"},{"location":"chapter_5/6_fss/#2-anon_inodefs","text":"anon_inodefs \u53ea\u63d0\u4f9b\u4e86 2 \u4e2a\u5b9e\u7528\u51fd\u6570\uff0c\u4e00\u4e2a\u83b7\u53d6\u5230\u4e00\u4e2a\u7ed1\u5b9a\u533f\u540d inode \u7684 file \u5b9e\u4f8b\uff0c\u53e6\u4e00\u4e2a\u66f4\u591a\u4e00\u4e9b\u5c01\u88c5\uff0c\u8fd4\u56de\u7684\u662f fd \u53e5\u67c4\uff08\u6574\u6570\uff09\u3002\u5982\u4e0b\uff1a","title":"2 anon_inodefs \u5bf9\u5916\u63d0\u4f9b\u7684\u63a5\u53e3"},{"location":"chapter_5/6_fss/#21-anon_inode_getfile","text":"\u8fd9\u4e2a\u51fd\u6570\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u505a\u4e24\u4ef6\u4e8b\uff1a \u83b7\u53d6\u4e00\u4e2a inode \uff08 \u83b7\u53d6\u5168\u5c40\u7684 inode \u53d8\u91cf anon_inode_inode \uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u53c2\u6570\u63a7\u5236\u6765\u521b\u5efa\u65b0\u7684 inode \uff09\uff1b \u521b\u5efa\u4e00\u4e2a file \u7ed3\u6784\u4f53\u5b9e\u4f8b\uff0c\u5e76\u4e14\u628a\u8fd9\u4e2a inode \u5173\u8054\u8d77\u6765\uff1b \u8fd4\u56de struct file \u5b9e\u4f8b","title":"2.1 anon_inode_getfile"},{"location":"chapter_5/6_fss/#22-anon_inode_getfd","text":"\u8fd9\u4e2a\u51fd\u6570\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u505a\u4e24\u4ef6\u4e8b\u60c5\uff1a \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 fd \u53e5\u67c4\uff0c\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\uff1b \u521b\u5efa\u4e00\u4e2a file \u5b9e\u4f8b\uff08 \u8c03\u7528\u7684\u662f anon_inode_getfile \u6765\u83b7\u53d6 \uff09\uff0c\u7136\u540e\u628a\u8fd9\u4e2a fd \u548c file \u5173\u8054\u8d77\u6765\uff1b \u8fd4\u56de struct file \u5b9e\u4f8b\u5bf9\u5e94\u5230\u5f53\u524d task_struct \u7684\u6587\u4ef6\u53e5\u67c4\uff08\u4e00\u4e2a\u6b63\u6574\u6570\uff09 \u8fd9\u4e24\u4e2a\u51fd\u6570\u5c31\u662f anon_inodefs \u63d0\u4f9b\u7684\u4e24\u4e2a\u5bf9\u5916\u7684\u51fd\u6570\u63a5\u53e3\u3002\u83b7\u53d6\u5230\u4e00\u4e2a file \u5b9e\u4f8b\uff0c\u8fd9\u4e2a\u5b9e\u4f8b\u7ed1\u5b9a\u5230 anon_inodefs \u516c\u5171\u7684 inode \u5b9e\u4f8b\u3002 \u5173\u4e8e anon_inodefs \u7684\u529f\u80fd\uff0c\u5176\u5b9e\u5728\u51fd\u6570\u7684\u6ce8\u91ca\u4e2d\u4e5f\u63d0\u5230\u4e86\uff0c\u592a\u76f4\u767d\u4e86\uff0c\u5982\u4e0b\uff1a // anon_inode_getfile \u548c anon_inode_getfd \u7684\u6ce8\u91ca\u660e\u786e\u63d0\u5230\u4e86 anon_inodefs \u7684\u4e24\u4e2a\u76ee\u7684\uff1a // - \u8282\u7701\u5185\u5b58 // - \u5c01\u88c5\u516c\u5171\u7684\u5197\u4f59\u4ee3\u7801 * Creates a new file by hooking it on a single inode. This is * useful for files that do not need to have a full-fledged inode in * order to operate correctly. All the files created with * anon_inode_getfd() will use the same singleton inode, reducing * memory use and avoiding code duplication for the file/inode/dentry * setup. Returns a newly created file descriptor or an error code.","title":"2.2 anon_inode_getfd"},{"location":"chapter_5/6_fss/#3-dentry-anon_inodedentry_name","text":"\u8fd8\u662f\u5f97\u770b\u6e90\u7801 \u4e3a\u4ec0\u4e48\u5e38\u89c1\u7684\u533f\u540d fd \u90fd\u6709\u4ee5 \u201canon_inode:\u201d \u8fd9\u6837\u5f00\u5934\uff1f \u5176\u5b9e\u8fd9\u79cd\u770b\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u90fd\u662f path \uff0c\u8fd9\u4e2a\u662f\u548c dentry \u5bf9\u5e94\u8d77\u6765\u7684\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u533f\u540d inode \u7684 dentry \uff0c\u6709\u7740\u7edf\u4e00\u7684\u540d\u5b57\uff1a // dentry \u7684\u64cd\u4f5c\u8868 static const struct dentry_operations anon_inodefs_dentry_operations = { .d_dname = anon_inodefs_dname, }; // \u64cd\u4f5c\u8868 .d_dname \u65b9\u6cd5\u7684\u5b9a\u5236\u5b9e\u73b0 static char *anon_inodefs_dname(struct dentry *dentry, char *buffer, int buflen) { return dynamic_dname(dentry, buffer, buflen, \"anon_inode:%s\", dentry->d_name.name); } \u90a3\u4e48 dentry->d_name.name \u53c8\u662f\u600e\u4e48\u8d4b\u503c\u7684\u5462\uff1f\u6211\u4ee5 epoll fd \u6765\u4e3e\u4e2a\u4f8b\u5b50\uff1a // epoll_create \u51fd\u6570\u5165\u53e3 ( fs/eventpoll.c ) static int do_epoll_create(int flags) { // \u521b\u5efa\u533f\u540d\u53e5\u67c4 ... file = anon_inode_getfile(\"[eventpoll]\", &eventpoll_fops, ep, O_RDWR | (flags & O_CLOEXEC)); } \u4f20\u5165\u7684 name \u662f\"[eventpoll]\",\u6240\u4ee5\"anon_inode:%s\"\u6700\u7ec8\u7ec4\u5408\u8d77\u6765\u5c31\u662f\"anon_inode:[eventpoll]\" \u53c2\u8003 Linux fd \u7cfb\u5217 | \u533f\u540d fd \u662f\u4ec0\u4e48\uff1f","title":"3 dentry \u540d\u5b57\u4e3a\u5565\u53eb\u201canon_inode:${dentry_name}\u201d ?"},{"location":"chapter_5/6_fss/#4-inode","text":"\u968f\u4fbf\u5217\u4e3e\u4e00\u4e9b eventfd\uff0ceventpoll\uff0ctimerfd\uff0csignalfd\uff0cinotifyfd\uff0cio_uring fd \u7b49\u7b49\uff0c\u8fd8\u6709\u5f88\u591a","title":"4 \u8c01\u7528\u5230\u4e86\u533f\u540d inode"},{"location":"chapter_5/6_fss/#5-linux-dentry","text":"\u5728 Linux \u4e2d\u662f\u4e00\u4e2a\u5012\u6302\u6811\u7684\u8bbe\u8ba1\uff0c\u4ece\u6839\u76ee\u5f55\uff08 / \uff09\u5f00\u59cb\uff0c\u53f6\u5b50\u7ed3\u70b9\u4e3a\u6587\u4ef6\u6216\u8005\u76ee\u5f55\uff0c\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u7ed3\u70b9\u8fd9\u4e00\u6bb5\u5c31\u79f0\u4e3a path \u8def\u5f84\uff0c\u5728\u5185\u5b58\u91cc\u9762\u8fd9\u9897\u5012\u6302\u7684\u6811\u5c31\u4f53\u73b0\u4e3a dentry \u6811\uff0c\u8282\u70b9\u5c31\u662f dentry \u7ed3\u6784\u4f53\u3002 \u8fd9\u91cc\u5c31\u6709\u4e2a\u91cd\u8981\u7684\u77e5\u8bc6\u70b9\uff1a \u5212\u91cd\u70b9\uff1a\u4e00\u4e2a inode \u4e0a\u53ef\u4ee5\u6302\u591a\u4e2a dentry \uff0c\u4e00\u4e2a dentry \u53ea\u80fd\u5c5e\u4e8e\u4e00\u4e2a inode \u3002 \u53ef\u4ee5\u770b\u5230/etc/a.txt \u548c /etc/b.txt \u4e92\u4e3a\u786c\u94fe\u63a5 \u6bcf\u4e2a\u6587\u4ef6\u6216\u8005\u76ee\u5f55\u90fd\u4f1a\u5728\u8fd9\u68f5\u6811\u4e0a\u6709\u81ea\u5df1\u7684\u4f4d\u7f6e\uff0c\u5185\u6838\u7528 struct path \u7ed3\u6784\u4f53\u6765\u8868\u793a\u552f\u4e00\u7684\u4f4d\u7f6e\u3002 struct path { struct vfsmount *mnt; // \u6807\u8bc6\u5728\u54ea\u4e2a\u5177\u4f53\u7684\u6587\u4ef6\u7cfb\u7edf\u5b9e\u4f8b struct dentry *dentry; // \u5185\u5b58\u76ee\u5f55\u6811\u8282\u70b9 }; \u8fd9\u91cc\u987a\u4fbf\u518d\u8bf4\u53e6\u4e00\u4e2a\u91cd\u8981\u77e5\u8bc6\u70b9\uff1a\u4e3a\u4ec0\u4e48\u5185\u6838\u4e4b\u4e2d\uff0c\u9700\u8981\u7528 struct path \u8fd9\u4e2a\u590d\u5408\u7ed3\u6784\u4f53\u6765\u6807\u8bc6\u552f\u4e00\u7684\u4e00\u4e2a\u76ee\u5f55\u6811\u4f4d\u7f6e\u5462\uff1f \u5176\u5b9e\u6240\u8c13\u7684 \u6302\u8f7d \u662f\u628a\u6587\u4ef6\u7cfb\u7edf\u5b9e\u4f8b\u548c\u76ee\u5f55\u6811\u4e0a\u7684\u4e00\u4e2a dentry \u5173\u8054\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u4e2a vfsmount \u7ed3\u6784\u4f53\u5b9e\u4f8b\u3002\u800c\u4e00\u4e2a dentry \u662f\u53ef\u4ee5\u7ed1\u5b9a\u591a\u4e2a\u6587\u4ef6\u7cfb\u7edf\u5b9e\u4f8b\u7684\u3002 \u6587\u4ef6\u7cfb\u7edf\u5b9e\u4f8b\u662f\u6307 super_block \u5417\uff1f\u5e94\u8be5\u4e0d\u5bf9\uff0c\u5e94\u8be5\u662f\u4e00\u4e2a vfsmount \u5b9e\u4f8b struct vfsmount { struct dentry *mnt_root; /* root of the mounted tree */ //\u6307\u5411\u6302\u8f7d\u6587\u4ef6\u7cfb\u7edf\u6839\u76ee\u5f55\u9879dentry\u5b9e\u4f8b struct super_block *mnt_sb; /* pointer to superblock */ //\u6307\u5411\u6587\u4ef6\u7cfb\u7edf\u8d85\u7ea7\u5757\u5b9e\u4f8b int mnt_flags; //\u5185\u6838\u5185\u90e8\u4f7f\u7528\u7684\u6302\u8f7d\u6807\u8bb0 struct user_namespace *mnt_userns; }; mount \u6e90\u7801\u662f\u600e\u6837\u7684\uff0c\u53c2\u8003 Linux \u5185\u6838\u2014\u6587\u4ef6\u7cfb\u7edf mount \u8fc7\u7a0b \u6362\u53e5\u8bdd\u8bf4\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u76ee\u5f55\u6811\u8def\u5f84\u5176\u5b9e\u662f\u53ef\u4ee5\u6302\u8f7d\u591a\u4e2a\u6587\u4ef6\u7cfb\u7edf\u5b9e\u4f8b\u3002\u6bd4\u5982 /mnt/path \u8fd9\u4e48\u4e00\u4e2a\u8def\u5f84\uff0c\u5176\u5b9e\u662f\u53ef\u4ee5\u6302\u8f7d\u591a\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7684\uff0c\u4e0d\u4f1a\u62a5\u9519\uff0c\u540e\u9762\u7684\u6302\u8f7d\u76f4\u63a5\u8986\u76d6\u524d\u9762\u7684\u3002","title":"5 Linux \u76ee\u5f55\u6811\u548c\u5185\u6838 dentry \u6811"},{"location":"chapter_5/6_fss/#timerfd","text":"","title":"timerfd"},{"location":"chapter_5/6_fss/#timerfd_1","text":"timerfd \u662f\u4e00\u4e2a\u65f6\u95f4\u76f8\u5173\u7684 fd\uff0c\u5f53 timerfd \u521d\u59cb\u5316\u65f6\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u8d85\u65f6\u65f6\u95f4\uff0c\u8d85\u65f6\u4e4b\u540e\uff0c\u8be5\u53e5\u67c4\u53ef\u8bfb\uff0c\u8bfb\u51fa\u6765\u7684\u662f\u8d85\u65f6\u7684\u6b21\u6570\u3002","title":"timerfd \u662f\u4ec0\u4e48"},{"location":"chapter_5/6_fss/#timerfd_2","text":"timerfd \u76f8\u5173\u7684\u7cfb\u7edf\u8c03\u7528\u6709 3 \u4e2a\uff1a // \u521b\u5efa\u4e00\u4e2a timerfd \u53e5\u67c4 int timerfd_create(int clockid, int flags); // \u542f\u52a8\u6216\u5173\u95ed timerfd \u5bf9\u5e94\u7684\u5b9a\u65f6\u5668 int timerfd_settime(int fd, int flags, const struct itimerspec *new_value, struct itimerspec *old_value); // \u83b7\u53d6\u6307\u5b9a timerfd \u8ddd\u79bb\u4e0b\u4e00\u6b21\u8d85\u65f6\u8fd8\u5269\u7684\u65f6\u95f4 int timerfd_gettime(int fd, struct itimerspec *curr_value); timerfd \u5e38\u4e0e epoll \u7cfb\u7edf\u8c03\u7528\u7ed3\u5408\u4f7f\u7528\uff1a // \u521b\u5efa\u4e00\u4e2a timerfd \u53e5\u67c4 int fdTimer = timerfd_create(CLOCK_MONOTONIC, 0 /*flags*/); itimerspec timespec { // \u8bbe\u7f6e\u8d85\u65f6\u95f4\u9694 .it_interval = { .tv_sec = 5, .tv_nsec = 0, }, //\u7b2c\u4e00\u6b21\u8d85\u65f6\u65f6\u95f4 .it_value = { .tv_sec = 5, .tv_nsec = 0, }, }; //\u542f\u52a8\u5b9a\u65f6\u5668 int timeRes = timerfd_settime(fdTimer, 0 /*flags*/, &timespec, nullptr); // epoll \u76d1\u542c timerfd epoll_ctl(mEpollFd, EPOLL_CTL_Add, fdTimer, &eventItem); while (true) { // \u8fdb\u5165\u4f11\u7720\u72b6\u6001 epoll_wait(mEpollFd, eventItems, EPOLL_MAX_EVENTS, timeoutMillis); if (count < 0) { perror(\"epoll failed\"); break; } for (int i=0;i < count;i++) { //\u5904\u7406\u8ba1\u65f6\u5668\u5230\u8fbe\u4e8b\u4ef6 } }","title":"timerfd \u57fa\u672c\u4f7f\u7528"},{"location":"chapter_5/6_fss/#socketfs","text":"Linux \u5185\u6838-\u7f51\u7edc\u90e8\u5206\u4e4b sockfs","title":"\u4e94 socketfs"},{"location":"chapter_5/6_fss/#1_2","text":"static int __init sock_init(void) { int err; /* * Initialize the network sysctl infrastructure. */ err = net_sysctl_init(); if (err) goto out; /* * Initialize skbuff SLAB cache */ skb_init(); /* * Initialize the protocols module. */ init_inodecache(); err = register_filesystem(&sock_fs_type); if (err) goto out_fs; sock_mnt = kern_mount(&sock_fs_type); if (IS_ERR(sock_mnt)) { err = PTR_ERR(sock_mnt); goto out_mount; } /* The real protocol initialization is performed in later initcalls. */ #ifdef CONFIG_NETFILTER err = netfilter_init(); if (err) goto out; #endif ptp_classifier_init(); out: return err; out_mount: unregister_filesystem(&sock_fs_type); out_fs: goto out; } core_initcall(sock_init); /* early initcall */ \u5bf9\u6bd4 anon_inode_init, fs/anon_inodes.c static int __init anon_inode_init(void) { anon_inode_mnt = kern_mount(&anon_inode_fs_type); if (IS_ERR(anon_inode_mnt)) panic(\"anon_inode_init() kernel mount failed (%ld)\\n\", PTR_ERR(anon_inode_mnt)); anon_inode_inode = alloc_anon_inode(anon_inode_mnt->mnt_sb); if (IS_ERR(anon_inode_inode)) panic(\"anon_inode_init() inode allocation failed (%ld)\\n\", PTR_ERR(anon_inode_inode)); return 0; } fs_initcall(anon_inode_init); \u5bf9\u6bd4 ext4 \u521d\u59cb\u5316 static int __init ext4_init_fs(void) { int i, err; ext4_li_info = NULL; mutex_init(&ext4_li_mtx); /* Build-time check for flags consistency */ ext4_check_flag_values(); for (i = 0; i < EXT4_WQ_HASH_SZ; i++) { mutex_init(&ext4__aio_mutex[i]); init_waitqueue_head(&ext4__ioend_wq[i]); } err = ext4_init_es(); if (err) return err; err = ext4_init_pageio(); if (err) goto out7; err = ext4_init_system_zone(); if (err) goto out6; ext4_kset = kset_create_and_add(\"ext4\", NULL, fs_kobj); if (!ext4_kset) { err = -ENOMEM; goto out5; } ext4_proc_root = proc_mkdir(\"fs/ext4\", NULL); err = ext4_init_feat_adverts(); if (err) goto out4; err = ext4_init_mballoc(); if (err) goto out2; else ext4_mballoc_ready = 1; err = init_inodecache(); if (err) goto out1; register_as_ext3(); register_as_ext2(); err = register_filesystem(&ext4_fs_type); if (err) goto out; return 0; out: unregister_as_ext2(); unregister_as_ext3(); destroy_inodecache(); out1: ext4_mballoc_ready = 0; ext4_exit_mballoc(); out2: ext4_exit_feat_adverts(); out4: if (ext4_proc_root) remove_proc_entry(\"fs/ext4\", NULL); kset_unregister(ext4_kset); out5: ext4_exit_system_zone(); out6: ext4_exit_pageio(); out7: ext4_exit_es(); return err; } module_init(ext4_init_fs)","title":"1 \u521d\u59cb\u5316"},{"location":"chapter_5/6_fss/#2-fs_type-sock_fs_type-mount","text":"static struct file_system_type sock_fs_type = { .name = \"sockfs\", .mount = sockfs_mount, .kill_sb = kill_anon_super, .get_sb = sockfs_get_sb, }; static struct dentry *sockfs_mount(struct file_system_type *fs_type, int flags, const char *dev_name, void *data) { return mount_pseudo(fs_type, \"socket:\", &sockfs_ops, &sockfs_dentry_operations, SOCKFS_MAGIC); } \u5bf9\u6bd4 anon_inode_fs_type, fs/anon_inodes.c static struct file_system_type anon_inode_fs_type = { .name = \"anon_inodefs\", .mount = anon_inodefs_mount, .kill_sb = kill_anon_super, }; static struct dentry *anon_inodefs_mount(struct file_system_type *fs_type, int flags, const char *dev_name, void *data) { return mount_pseudo(fs_type, \"anon_inode:\", NULL, &anon_inodefs_dentry_operations, ANON_INODE_FS_MAGIC); } \u5bf9\u6bd4 ext4 fs/ext4/super.c static struct file_system_type ext4_fs_type = { .owner = THIS_MODULE, .name = \"ext4\", .mount = ext4_mount, .kill_sb = kill_block_super, .fs_flags = FS_REQUIRES_DEV, }; static struct dentry *ext4_mount(struct file_system_type *fs_type, int flags, const char *dev_name, void *data) { return mount_bdev(fs_type, flags, dev_name, data, ext4_fill_super); }","title":"2 fs_type: sock_fs_type \u548c mount"},{"location":"chapter_5/6_fss/#3-sock_fs_typemount","text":"","title":"3 \u4f55\u65f6\u8c03\u7528 sock_fs_type.mount \u5462?"},{"location":"chapter_5/6_fss/#4-dentry_operations","text":"/* * sockfs_dname() is called from d_path(). */ static char *sockfs_dname(struct dentry *dentry, char *buffer, int buflen) { return dynamic_dname(dentry, buffer, buflen, \"socket:[%lu]\", dentry->d_inode->i_ino); } static const struct dentry_operations sockfs_dentry_operations = { .d_dname = sockfs_dname, }; \u5bf9\u6bd4 anon_fs /* * anon_inodefs_dname() is called from d_path(). */ static char *anon_inodefs_dname(struct dentry *dentry, char *buffer, int buflen) { return dynamic_dname(dentry, buffer, buflen, \"anon_inode:%s\", dentry->d_name.name); } static const struct dentry_operations anon_inodefs_dentry_operations = { .d_dname = anon_inodefs_dname, }; \u5bf9\u6bd4 ext4","title":"4 dentry_operations"},{"location":"chapter_5/6_fss/#5-super_operations","text":"static const struct super_operations sockfs_ops = { .alloc_inode = sock_alloc_inode, .destroy_inode = sock_destroy_inode, .statfs = simple_statfs, }; \u5bf9\u6bd4 ext4 static const struct super_operations ext4_sops = { .alloc_inode = ext4_alloc_inode, .destroy_inode = ext4_destroy_inode, .write_inode = ext4_write_inode, .dirty_inode = ext4_dirty_inode, .drop_inode = ext4_drop_inode, .evict_inode = ext4_evict_inode, .put_super = ext4_put_super, .sync_fs = ext4_sync_fs, .freeze_fs = ext4_freeze, .unfreeze_fs = ext4_unfreeze, .statfs = ext4_statfs, .remount_fs = ext4_remount, .show_options = ext4_show_options, #ifdef CONFIG_QUOTA .quota_read = ext4_quota_read, .quota_write = ext4_quota_write, #endif .bdev_try_to_free_page = bdev_try_to_free_page, };","title":"5 super_operations"},{"location":"chapter_5/6_fss/#_7","text":"/** * register_filesystem - register a new filesystem * @fs: the file system structure * * Adds the file system passed to the list of file systems the kernel * is aware of for mount and other syscalls. Returns 0 on success, * or a negative errno code on an error. * * The &struct file_system_type that is passed is linked into the kernel * structures and must not be freed until the file system has been * unregistered. */ int register_filesystem(struct file_system_type * fs) { int res = 0; struct file_system_type ** p; BUG_ON(strchr(fs->name, '.')); if (fs->next) return -EBUSY; write_lock(&file_systems_lock); p = find_filesystem(fs->name, strlen(fs->name)); if (*p) res = -EBUSY; else *p = fs; write_unlock(&file_systems_lock); return res; } EXPORT_SYMBOL(register_filesystem); 1 \u68c0\u67e5\u6587\u4ef6\u7cfb\u7edf\u540d\u79f0\u4e2d\u662f\u5426\u5305\u542b\u70b9\u53f7\uff0c\u5982\u679c\u5305\u542b\uff0c\u5219\u5f15\u53d1 BUG\uff08\u5185\u6838\u9519\u8bef\uff09\u3002 2 \u68c0\u67e5\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u662f\u5426\u5df2\u7ecf\u6ce8\u518c\uff0c\u5982\u679c\u5df2\u7ecf\u6ce8\u518c\uff0c\u5219\u8fd4\u56de -EBUSY \u8868\u793a\u7e41\u5fd9\u3002 3 \u521d\u59cb\u5316\u6587\u4ef6\u7cfb\u7edf\u8d85\u7ea7\u5757\u94fe\u8868\u3002 4 \u4f7f\u7528\u5199\u9501\u9501\u5b9a file_systems_lock\uff0c\u4ee5\u786e\u4fdd\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u5bf9\u6587\u4ef6\u7cfb\u7edf\u5217\u8868\u7684\u5e76\u53d1\u5b89\u5168\u3002 5 \u67e5\u627e\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u662f\u5426\u5df2\u7ecf\u5b58\u5728\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5219\u8fd4\u56de -EBUSY\uff0c\u5426\u5219\u5c06\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u6dfb\u52a0\u5230\u6587\u4ef6\u7cfb\u7edf\u5217\u8868\u4e2d\u3002 6 \u91ca\u653e\u5199\u9501\uff0c\u5b8c\u6210\u6ce8\u518c\u3002","title":"\u6ce8\u518c\u6587\u4ef6\u7cfb\u7edf"},{"location":"chapter_5/6_fss/#_8","text":"tmpfs devtmpfs devtmpfs \u7684\u529f\u7528\u662f\u5728 Linux \u6838\u5fc3 \u542f\u52a8\u65e9\u671f\u5efa\u7acb\u4e00\u4e2a\u521d\u6b65\u7684 /dev\uff0c\u4ee4\u4e00\u822c\u542f\u52a8\u7a0b\u5e8f\u4e0d\u7528\u7b49\u5f85 udev\uff0c\u7f29\u77ed GNU/Linux \u7684\u5f00\u673a\u65f6\u95f4\u3002 debugfs \u5728\u5185\u6838\u8ffd\u8e2a\u6280\u672f\u7684\u53d1\u5c55\u521d\u671f\uff0c\u8ffd\u8e2a\u76f8\u5173\u7684\u6587\u4ef6\u90fd\u653e\u5728 debugfs \u865a\u62df\u6587\u4ef6\u7cfb\u7edf\u4e2d\uff0cdebugfs \u4e3b\u8981\u8bbe\u8ba1\u76ee\u7684\u662f\u4e3a\u4e86\u63d0\u4f9b\u4e00\u4e2a\u901a\u7528\u7684\u5185\u6838\u8c03\u8bd5\u63a5\u53e3\uff0c\u5185\u6838\u7684\u4efb\u610f\u5b50\u7cfb\u7edf\u90fd\u6709\u53ef\u80fd\u4f7f\u7528 debugfs \u505a\u8c03\u8bd5. socketfs pipefs ramfs btrfs autofs","title":"\u5176\u4ed6\u6587\u4ef6\u7cfb\u7edf"},{"location":"chapter_5/7_three_object_of_block_device/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3\u5757\u8bbe\u5907\u7ba1\u7406\u4e2d\u4e09\u4e2a\u6838\u5fc3\u6570\u636e\u7ed3\u6784\u7684\u5173\u7cfb, \u52a0\u6df1\u7406\u89e3 \u7406\u89e3 block_device\u3001gendisk\u3001hd_struct \u4e0b\u9762\u6211\u5c31\u7c7b\u6bd4\u8f6f\u4ef6\u5f00\u53d1\u7684\u7ba1\u7406\u6a21\u5f0f\u6765\u8bf4\u660e\u4e09\u8005\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u53ef\u80fd\u4e0d\u662f\u5341\u5206\u8d34\u5207\uff0c\u4f46\u5e0c\u671b\u5bf9\u4f60\u4e86\u89e3\u4e09\u8005\u7684\u5173\u7cfb\u80fd\u63d0\u4f9b\u4e00\u4e9b\u5e2e\u52a9\u3002 block_device \u5c31\u76f8\u5f53\u4e8e\u6bcf\u4e2a\u7a0b\u5e8f\u733f\u7684\u6863\u6848\u4fe1\u606f\uff08\u5982\u59d3\u540d\u3001\u7535\u8bdd\u3001\u90ae\u4ef6\u3001\u804c\u4f4d\u4ee5\u53ca leader \u7b49\u7b49\uff09\uff0c gendisk \u76f8\u5f53\u4e8e\u4e00\u4e2a\u9879\u76ee\u7ec4\uff0c\u800c hd_struct \u76f8\u5f53\u4e8e\u9879\u76ee\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u7a0b\u5e8f\u733f\u3002\u5982\u4f55\u89e3\u91ca\u5462\uff1f^*^ \u60f3\u8c61\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u4eba\u529b\u7ba1\u7406\u8005\uff08\u76f8\u5f53\u4e8e VFS\uff09\u6765\u8bf4\uff0c\u4ed6\u5176\u5b9e\u5e76\u4e0d\u5173\u5fc3\u5e95\u4e0b\u5e72\u6d3b\u7684\u662f\u54ea\u4e2a\u7a0b\u5e8f\u733f\uff0c\u662f\u9ad8\u5bcc\u5e05\u8fd8\u662f\u77ee\u77ec\u7a77\uff0c\u662f\u7f8e\u5973\u8fd8\u662f\u5e05\u54e5\uff0c\u4ed6\u53ea\u9700\u8981\u77e5\u9053\u4f60\u7684\u6863\u6848\u4fe1\u606f\uff08block_device\uff09\u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u53ea\u8981\u6709\u4e86\u4f60\u7684\u6863\u6848\u4fe1\u606f\uff0c\u5728\u9700\u8981\u4f60\u7684\u65f6\u5019\u5c31\u968f\u65f6\u53ef\u4ee5\u627e\u5230\u4f60\uff08\u7a0b\u5e8f\u733f\u5c31\u662f\u8fd9\u4e48\u60b2\u50ac\uff09\u3002 \u800c\u5bf9\u4e8e\u4e00\u4e2a\u9879\u76ee\u7ec4\uff08gendisk\uff09\u6765\u8bf4\uff0c\u91cc\u9762\u4e00\u4e2a\u6216\u591a\u4e2a\u7a0b\u5e8f\u733f\uff08hd_struct\uff09\u3002\u56e0\u4e3a\u9879\u76ee\u7ec4\u81f3\u5c11\u6709\u4e00\u4e2a leader \u5427\uff0c\u800c leader \u672c\u8d28\u4e0a\u4e5f\u662f\u4e00\u4e2a\u7a0b\u5e8f\u733f\uff08\u76f8\u5f53\u4e8e struct hd_struct part0\uff09\u3002\u5f53\u4e00\u4e2a\u9879\u76ee\u6bd4\u8f83\u5e9e\u5927\u65f6\uff0c\u53ef\u80fd\u4e00\u4e2a leader \u4f1a\u5e26\u9886\u591a\u4e2a\u5144\u5f1f\uff08\u5c31\u50cf\u4e00\u4e2a\u786c\u76d8\u7ba1\u7406\u7740\u591a\u4e2a\u5206\u533a\uff09\uff0c\u7136\u800c\u5982\u679c\u662f\u4e00\u4e2a\u8ff7\u4f60\u9879\u76ee\uff0c\u53ef\u80fd\u53ea\u9700\u8981\u9879\u76ee\u7ec4 leader \u4e00\u4e2a\u4eba\u5c31\u641e\u5b9a\u4e86\uff08\u5c31\u50cf\u4e00\u4e2a\u78c1\u76d8\u4e0d\u8fdb\u884c\u5206\u533a\uff09\u3002 \u662f\u4e0d\u662f\u6709\u90a3\u4e48\u70b9\u610f\u601d\uff1f^_^ \u5f53\u4eba\u529b\u7ba1\u7406\u9700\u8981\u627e\u67d0\u4e2a\u7a0b\u5e8f\u733f\uff08hd_struct \u6216\u8005 part0\uff09\u65f6\uff0c\u53ea\u9700\u8981\u627e\u5230\u4ed6\u7684\u6863\u6848\u4fe1\u606f\uff08block_device\uff09\u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u4e8c\u8005\u662f\u4e00\u5bf9\u4e00\u7684\u5173\u7cfb\uff0c\u800c\u4e14\u6839\u636e\u7a0b\u5e8f\u733f\u627e\u5230\u4ed6\u7684\u9879\u76ee\u7ec4\uff08gendisk\uff09\u662f\u4e0d\u662f\u4e5f\u662f\u4e00\u4ef6\u5f88\u5bb9\u6613\u7684\u4e8b\u60c5\uff1f\u540c\u7406\uff0c\u4e00\u65e6\u627e\u5230\u4e86\u9879\u76ee\u7ec4\uff08gendisk\uff09\uff0c\u90a3\u4e48\u91cc\u9762\u7684\u6240\u6709\u7a0b\u5e8f\u733f\uff08hd_struct\uff09\u662f\u4e0d\u662f\u4e5f\u975e\u5e38\u660e\u6717\u4e86\uff1f\u603b\u4e4b\u4e00\u53e5\u8bdd\uff0c\u6863\u6848\u4fe1\u606f\uff08block_device\uff09\u5145\u5f53\u4e86\u4eba\u529b\u7ba1\u7406\uff08\u76f8\u5f53\u4e8e VFS\uff09\u548c\u9879\u76ee\u7ec4\u6210\u5458\uff08gendisk\u3001hd_struct\uff09\u4e4b\u95f4\u7684\u6865\u6881\u3002 \u4e0d\u77e5\u9053\u4f60\u6709\u6ca1\u6709\u770b\u660e\u767d\uff0c\u5982\u679c\u8fd8\u6709\u4e9b\u6df7\u4e71\u76f4\u63a5\u770b\u4e0b\u9762\u7684\u56fe\u597d\u4e86\uff1a Linux \u64cd\u4f5c\u7cfb\u7edf\u5b66\u4e60\u7b14\u8bb0\uff08\u5341\u56db\uff09\u5757\u8bbe\u5907 \u5757\u8bbe\u5907\u5256\u6790\u4e4b\u5173\u952e\u6570\u636e\u7ed3\u6784\u5206\u6790 - block_device/gendisk/hd_struct \u5757\u8bbe\u5907\u961f\u5217\u7ed3\u6784 \u5728\u4e0a\u8282\u4e2d\u6211\u4eec\u63d0\u5230\u4e86 block_device \u4e2d\u7684\u6210\u5458\u53d8\u91cf struct request_queue *bd_queue \u4f1a\u4f20\u9012\u7ed9 gendisk \uff0c\u8be5\u8bf7\u6c42\u961f\u5217\u7528\u4e8e\u63a5\u6536\u5e76\u5904\u7406\u6765\u81ea\u7528\u6237\u53d1\u8d77\u7684 I/O \u8bf7\u6c42\u3002\u5728\u6bcf\u4e2a\u5757\u8bbe\u5907\u7684\u9a71\u52a8\u7a0b\u5e8f\u521d\u59cb\u5316\u7684\u65f6\u5019\u4f1a\u751f\u6210\u4e00\u4e2a request_queue \u3002\u8fd9\u91cc\u4f1a\u4ee5\u4e00\u4e2a\u5217\u8868\u7684\u65b9\u5f0f\u5b58\u50a8\u4f17\u591a\u7684\u7ed3\u6784\u4f53 request \uff0c\u6bcf\u4e00\u4e2a request \u5bf9\u5e94\u4e00\u4e2a\u8bf7\u6c42\u3002\u8fd9\u91cc\u8fd8\u6709\u4e24\u4e2a\u91cd\u8981\u7684\u51fd\u6570\uff0c\u4e00\u4e2a\u662f make_request_fn() \u51fd\u6570\uff0c\u7528\u4e8e\u751f\u6210 request \uff1b\u53e6\u4e00\u4e2a\u662f request_fn() \u51fd\u6570\uff0c\u7528\u4e8e\u5904\u7406 request \u3002 struct request_queue { /* * Together with queue_head for cacheline sharing */ struct list_head queue_head; struct request *last_merge; struct elevator_queue *elevator; ...... request_fn_proc *request_fn; make_request_fn *make_request_fn; ...... } struct request { struct list_head queuelist; ...... struct request_queue *q; ...... struct bio *bio; struct bio *biotail; ...... } \u5728 request\u7ed3\u6784\u4f53 \u4e2d\u6700\u91cd\u8981\u7684\u662f bio\u7ed3\u6784\u4f53 \uff0c\u5728 bio \u4e2d bi_next \u662f\u94fe\u8868\u4e2d\u7684\u4e0b\u4e00\u9879\uff0c struct bio_vec \u6307\u5411\u4e00\u7ec4\u9875\u9762\u3002 struct bio { struct bio *bi_next; /* request queue link */ struct block_device *bi_bdev; blk_status_t bi_status; ...... struct bvec_iter bi_iter; unsigned short bi_vcnt; /* how many bio_vec's */ unsigned short bi_max_vecs; /* max bvl_vecs we can hold */ atomic_t __bi_cnt; /* pin count */ struct bio_vec *bi_io_vec; /* the actual vec list */ ...... }; struct bio_vec { struct page *bv_page; unsigned int bv_len; unsigned int bv_offset; } \u8bf7\u6c42\u961f\u5217\u7684\u521d\u59cb\u5316 \u4ee5 scsi \u9a71\u52a8 \u4e3a\u4f8b\u3002\u5728\u521d\u59cb\u5316\u8bbe\u5907\u9a71\u52a8\u7684\u65f6\u5019\uff0c\u4f1a\u8c03\u7528 scsi_alloc_queue() \uff0c\u628a request_fn() \u8bbe\u7f6e\u4e3a scsi_request_fn() \u3002\u540c\u65f6\u8fd8\u4f1a\u8c03\u7528 blk_init_allocated_queue()->blk_queue_make_request() \uff0c\u628a make_request_fn() \u8bbe\u7f6e\u4e3a blk_queue_bio() \u3002 /** * scsi_alloc_sdev - allocate and setup a scsi_Device * @starget: which target to allocate a &scsi_device for * @lun: which lun * @hostdata: usually NULL and set by ->slave_alloc instead * * Description: * Allocate, initialize for io, and return a pointer to a scsi_Device. * Stores the @shost, @channel, @id, and @lun in the scsi_Device, and * adds scsi_Device to the appropriate list. * * Return value: * scsi_Device pointer, or NULL on failure. **/ static struct scsi_device *scsi_alloc_sdev(struct scsi_target *starget, u64 lun, void *hostdata) { struct scsi_device *sdev; sdev = kzalloc(sizeof(*sdev) + shost->transportt->device_size, GFP_ATOMIC); ...... sdev->request_queue = scsi_alloc_queue(sdev); ...... } struct request_queue *scsi_alloc_queue(struct scsi_device *sdev) { struct Scsi_Host *shost = sdev->host; struct request_queue *q; q = blk_alloc_queue_node(GFP_KERNEL, NUMA_NO_NODE); if (!q) return NULL; q->cmd_size = sizeof(struct scsi_cmnd) + shost->hostt->cmd_size; q->rq_alloc_data = shost; q->request_fn = scsi_request_fn; q->init_rq_fn = scsi_init_rq; q->exit_rq_fn = scsi_exit_rq; q->initialize_rq_fn = scsi_initialize_rq; //\u8c03\u7528blk_queue_make_request(q, blk_queue_bio); if (blk_init_allocated_queue(q) < 0) { blk_cleanup_queue(q); return NULL; } __scsi_init_queue(shost, q); ...... return q } \u2003\u2003\u5728 blk_init_allocated_queue() \u4e2d\uff0c\u9664\u4e86\u521d\u59cb\u5316 make_request_fn() \u51fd\u6570\uff0c\u8fd8\u8981\u505a\u4e00\u4ef6\u5f88\u91cd\u8981\u7684\u4e8b\u60c5\uff0c\u5c31\u662f\u521d\u59cb\u5316 I/O \u7684\u7535\u68af\u7b97\u6cd5\u3002 int blk_init_allocated_queue(struct request_queue *q) { q->fq = blk_alloc_flush_queue(q, NUMA_NO_NODE, q->cmd_size); ...... blk_queue_make_request(q, blk_queue_bio); ...... /* init elevator */ if (elevator_init(q, NULL)) { ...... } ...... } \u7535\u68af\u7b97\u6cd5\u7c7b\u578b\u5bf9\u5e94\u7684\u7ed3\u6784\u4f53 struct elevator_type \u4e3a\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u7c7b\uff1a elevator_noop\uff1aNoop \u8c03\u5ea6\u7b97\u6cd5\u662f\u6700\u7b80\u5355\u7684 IO \u8c03\u5ea6\u7b97\u6cd5\uff0c\u5b83\u5c06 IO \u8bf7\u6c42\u653e\u5165\u5230\u4e00\u4e2a FIFO \u961f\u5217\u4e2d\uff0c\u7136\u540e\u9010\u4e2a\u6267\u884c\u8fd9\u4e9b IO \u8bf7\u6c42\u3002 iosched_deadline\uff1aDeadline \u7b97\u6cd5\u8981\u4fdd\u8bc1\u6bcf\u4e2a IO \u8bf7\u6c42\u5728\u4e00\u5b9a\u7684\u65f6\u95f4\u5185\u4e00\u5b9a\u8981\u88ab\u670d\u52a1\u5230\uff0c\u4ee5\u6b64\u6765\u907f\u514d\u67d0\u4e2a\u8bf7\u6c42\u9965\u997f\u3002\u4e3a\u4e86\u5b8c\u6210\u8fd9\u4e2a\u76ee\u6807\uff0c\u7b97\u6cd5\u4e2d\u5f15\u5165\u4e86\u4e24\u7c7b\u961f\u5217\uff0c\u4e00\u7c7b\u961f\u5217\u901a\u8fc7\u7ea2\u9ed1\u6811\u5bf9\u8bf7\u6c42\u6309\u8d77\u59cb\u6247\u533a\u5e8f\u53f7\u8fdb\u884c\u6392\u5e8f\uff0c\u79f0\u4e3a sort_list\uff0c\u6309\u7167\u6b64\u961f\u5217\u4f20\u8f93\u6027\u80fd\u4f1a\u6bd4\u8f83\u9ad8\uff1b\u53e6\u4e00\u7c7b\u961f\u5217\u5bf9\u8bf7\u6c42\u6309\u5b83\u4eec\u7684\u751f\u6210\u65f6\u95f4\u8fdb\u884c\u6392\u5e8f\uff0c\u7531\u94fe\u8868\u6765\u7ec4\u7ec7\uff0c\u79f0\u4e3a fifo_list\uff0c\u5e76\u4e14\u6bcf\u4e00\u4e2a\u8bf7\u6c42\u90fd\u6709\u4e00\u4e2a\u671f\u9650\u503c\u3002 iosched_cfq\uff1a\u719f\u6089\u7684 CFQ \u5b8c\u5168\u516c\u5e73\u8c03\u5ea6\u7b97\u6cd5\u3002\u6240\u6709\u7684\u8bf7\u6c42\u4f1a\u5728\u591a\u4e2a\u961f\u5217\u4e2d\u6392\u5e8f\u3002\u540c\u4e00\u4e2a\u8fdb\u7a0b\u7684\u8bf7\u6c42\uff0c\u603b\u662f\u5728\u540c\u4e00\u961f\u5217\u4e2d\u5904\u7406\u3002\u65f6\u95f4\u7247\u4f1a\u5206\u914d\u5230\u6bcf\u4e2a\u961f\u5217\uff0c\u901a\u8fc7\u8f6e\u8be2\u7b97\u6cd5\uff0c\u6211\u4eec\u4fdd\u8bc1\u4e86 I/O \u5e26\u5bbd\uff0c\u4ee5\u516c\u5e73\u7684\u65b9\u5f0f\uff0c\u5728\u4e0d\u540c\u961f\u5217\u4e4b\u95f4\u8fdb\u884c\u5171\u4eab\u3002 elevator_init() \u4e2d\u4f1a\u6839\u636e\u540d\u79f0\u6765\u6307\u5b9a\u7535\u68af\u7b97\u6cd5\uff0c\u5982\u679c\u6ca1\u6709\u9009\u62e9\uff0c\u90a3\u5c31\u9ed8\u8ba4\u4f7f\u7528 iosched_cfq","title":"\u7b2c\u4e03\u7bc7 \u5757\u8bbe\u5907\u4e09\u5927\u5bf9\u8c61block_device\u3001gendisk\u3001hd_struct\u6570\u636e\u7ed3\u6784\u603b\u7ed3"},{"location":"chapter_5/7_three_object_of_block_device/#_1","text":"\u672c\u7bc7\u603b\u7ed3\u5757\u8bbe\u5907\u7ba1\u7406\u4e2d\u4e09\u4e2a\u6838\u5fc3\u6570\u636e\u7ed3\u6784\u7684\u5173\u7cfb, \u52a0\u6df1\u7406\u89e3","title":"\u6982\u8ff0"},{"location":"chapter_5/7_three_object_of_block_device/#block_devicegendiskhd_struct","text":"\u4e0b\u9762\u6211\u5c31\u7c7b\u6bd4\u8f6f\u4ef6\u5f00\u53d1\u7684\u7ba1\u7406\u6a21\u5f0f\u6765\u8bf4\u660e\u4e09\u8005\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u53ef\u80fd\u4e0d\u662f\u5341\u5206\u8d34\u5207\uff0c\u4f46\u5e0c\u671b\u5bf9\u4f60\u4e86\u89e3\u4e09\u8005\u7684\u5173\u7cfb\u80fd\u63d0\u4f9b\u4e00\u4e9b\u5e2e\u52a9\u3002 block_device \u5c31\u76f8\u5f53\u4e8e\u6bcf\u4e2a\u7a0b\u5e8f\u733f\u7684\u6863\u6848\u4fe1\u606f\uff08\u5982\u59d3\u540d\u3001\u7535\u8bdd\u3001\u90ae\u4ef6\u3001\u804c\u4f4d\u4ee5\u53ca leader \u7b49\u7b49\uff09\uff0c gendisk \u76f8\u5f53\u4e8e\u4e00\u4e2a\u9879\u76ee\u7ec4\uff0c\u800c hd_struct \u76f8\u5f53\u4e8e\u9879\u76ee\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u7a0b\u5e8f\u733f\u3002\u5982\u4f55\u89e3\u91ca\u5462\uff1f^*^ \u60f3\u8c61\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u4eba\u529b\u7ba1\u7406\u8005\uff08\u76f8\u5f53\u4e8e VFS\uff09\u6765\u8bf4\uff0c\u4ed6\u5176\u5b9e\u5e76\u4e0d\u5173\u5fc3\u5e95\u4e0b\u5e72\u6d3b\u7684\u662f\u54ea\u4e2a\u7a0b\u5e8f\u733f\uff0c\u662f\u9ad8\u5bcc\u5e05\u8fd8\u662f\u77ee\u77ec\u7a77\uff0c\u662f\u7f8e\u5973\u8fd8\u662f\u5e05\u54e5\uff0c\u4ed6\u53ea\u9700\u8981\u77e5\u9053\u4f60\u7684\u6863\u6848\u4fe1\u606f\uff08block_device\uff09\u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u53ea\u8981\u6709\u4e86\u4f60\u7684\u6863\u6848\u4fe1\u606f\uff0c\u5728\u9700\u8981\u4f60\u7684\u65f6\u5019\u5c31\u968f\u65f6\u53ef\u4ee5\u627e\u5230\u4f60\uff08\u7a0b\u5e8f\u733f\u5c31\u662f\u8fd9\u4e48\u60b2\u50ac\uff09\u3002 \u800c\u5bf9\u4e8e\u4e00\u4e2a\u9879\u76ee\u7ec4\uff08gendisk\uff09\u6765\u8bf4\uff0c\u91cc\u9762\u4e00\u4e2a\u6216\u591a\u4e2a\u7a0b\u5e8f\u733f\uff08hd_struct\uff09\u3002\u56e0\u4e3a\u9879\u76ee\u7ec4\u81f3\u5c11\u6709\u4e00\u4e2a leader \u5427\uff0c\u800c leader \u672c\u8d28\u4e0a\u4e5f\u662f\u4e00\u4e2a\u7a0b\u5e8f\u733f\uff08\u76f8\u5f53\u4e8e struct hd_struct part0\uff09\u3002\u5f53\u4e00\u4e2a\u9879\u76ee\u6bd4\u8f83\u5e9e\u5927\u65f6\uff0c\u53ef\u80fd\u4e00\u4e2a leader \u4f1a\u5e26\u9886\u591a\u4e2a\u5144\u5f1f\uff08\u5c31\u50cf\u4e00\u4e2a\u786c\u76d8\u7ba1\u7406\u7740\u591a\u4e2a\u5206\u533a\uff09\uff0c\u7136\u800c\u5982\u679c\u662f\u4e00\u4e2a\u8ff7\u4f60\u9879\u76ee\uff0c\u53ef\u80fd\u53ea\u9700\u8981\u9879\u76ee\u7ec4 leader \u4e00\u4e2a\u4eba\u5c31\u641e\u5b9a\u4e86\uff08\u5c31\u50cf\u4e00\u4e2a\u78c1\u76d8\u4e0d\u8fdb\u884c\u5206\u533a\uff09\u3002 \u662f\u4e0d\u662f\u6709\u90a3\u4e48\u70b9\u610f\u601d\uff1f^_^ \u5f53\u4eba\u529b\u7ba1\u7406\u9700\u8981\u627e\u67d0\u4e2a\u7a0b\u5e8f\u733f\uff08hd_struct \u6216\u8005 part0\uff09\u65f6\uff0c\u53ea\u9700\u8981\u627e\u5230\u4ed6\u7684\u6863\u6848\u4fe1\u606f\uff08block_device\uff09\u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u4e8c\u8005\u662f\u4e00\u5bf9\u4e00\u7684\u5173\u7cfb\uff0c\u800c\u4e14\u6839\u636e\u7a0b\u5e8f\u733f\u627e\u5230\u4ed6\u7684\u9879\u76ee\u7ec4\uff08gendisk\uff09\u662f\u4e0d\u662f\u4e5f\u662f\u4e00\u4ef6\u5f88\u5bb9\u6613\u7684\u4e8b\u60c5\uff1f\u540c\u7406\uff0c\u4e00\u65e6\u627e\u5230\u4e86\u9879\u76ee\u7ec4\uff08gendisk\uff09\uff0c\u90a3\u4e48\u91cc\u9762\u7684\u6240\u6709\u7a0b\u5e8f\u733f\uff08hd_struct\uff09\u662f\u4e0d\u662f\u4e5f\u975e\u5e38\u660e\u6717\u4e86\uff1f\u603b\u4e4b\u4e00\u53e5\u8bdd\uff0c\u6863\u6848\u4fe1\u606f\uff08block_device\uff09\u5145\u5f53\u4e86\u4eba\u529b\u7ba1\u7406\uff08\u76f8\u5f53\u4e8e VFS\uff09\u548c\u9879\u76ee\u7ec4\u6210\u5458\uff08gendisk\u3001hd_struct\uff09\u4e4b\u95f4\u7684\u6865\u6881\u3002 \u4e0d\u77e5\u9053\u4f60\u6709\u6ca1\u6709\u770b\u660e\u767d\uff0c\u5982\u679c\u8fd8\u6709\u4e9b\u6df7\u4e71\u76f4\u63a5\u770b\u4e0b\u9762\u7684\u56fe\u597d\u4e86\uff1a Linux \u64cd\u4f5c\u7cfb\u7edf\u5b66\u4e60\u7b14\u8bb0\uff08\u5341\u56db\uff09\u5757\u8bbe\u5907 \u5757\u8bbe\u5907\u5256\u6790\u4e4b\u5173\u952e\u6570\u636e\u7ed3\u6784\u5206\u6790 - block_device/gendisk/hd_struct","title":"\u7406\u89e3 block_device\u3001gendisk\u3001hd_struct"},{"location":"chapter_5/7_three_object_of_block_device/#_2","text":"\u5728\u4e0a\u8282\u4e2d\u6211\u4eec\u63d0\u5230\u4e86 block_device \u4e2d\u7684\u6210\u5458\u53d8\u91cf struct request_queue *bd_queue \u4f1a\u4f20\u9012\u7ed9 gendisk \uff0c\u8be5\u8bf7\u6c42\u961f\u5217\u7528\u4e8e\u63a5\u6536\u5e76\u5904\u7406\u6765\u81ea\u7528\u6237\u53d1\u8d77\u7684 I/O \u8bf7\u6c42\u3002\u5728\u6bcf\u4e2a\u5757\u8bbe\u5907\u7684\u9a71\u52a8\u7a0b\u5e8f\u521d\u59cb\u5316\u7684\u65f6\u5019\u4f1a\u751f\u6210\u4e00\u4e2a request_queue \u3002\u8fd9\u91cc\u4f1a\u4ee5\u4e00\u4e2a\u5217\u8868\u7684\u65b9\u5f0f\u5b58\u50a8\u4f17\u591a\u7684\u7ed3\u6784\u4f53 request \uff0c\u6bcf\u4e00\u4e2a request \u5bf9\u5e94\u4e00\u4e2a\u8bf7\u6c42\u3002\u8fd9\u91cc\u8fd8\u6709\u4e24\u4e2a\u91cd\u8981\u7684\u51fd\u6570\uff0c\u4e00\u4e2a\u662f make_request_fn() \u51fd\u6570\uff0c\u7528\u4e8e\u751f\u6210 request \uff1b\u53e6\u4e00\u4e2a\u662f request_fn() \u51fd\u6570\uff0c\u7528\u4e8e\u5904\u7406 request \u3002 struct request_queue { /* * Together with queue_head for cacheline sharing */ struct list_head queue_head; struct request *last_merge; struct elevator_queue *elevator; ...... request_fn_proc *request_fn; make_request_fn *make_request_fn; ...... } struct request { struct list_head queuelist; ...... struct request_queue *q; ...... struct bio *bio; struct bio *biotail; ...... } \u5728 request\u7ed3\u6784\u4f53 \u4e2d\u6700\u91cd\u8981\u7684\u662f bio\u7ed3\u6784\u4f53 \uff0c\u5728 bio \u4e2d bi_next \u662f\u94fe\u8868\u4e2d\u7684\u4e0b\u4e00\u9879\uff0c struct bio_vec \u6307\u5411\u4e00\u7ec4\u9875\u9762\u3002 struct bio { struct bio *bi_next; /* request queue link */ struct block_device *bi_bdev; blk_status_t bi_status; ...... struct bvec_iter bi_iter; unsigned short bi_vcnt; /* how many bio_vec's */ unsigned short bi_max_vecs; /* max bvl_vecs we can hold */ atomic_t __bi_cnt; /* pin count */ struct bio_vec *bi_io_vec; /* the actual vec list */ ...... }; struct bio_vec { struct page *bv_page; unsigned int bv_len; unsigned int bv_offset; }","title":"\u5757\u8bbe\u5907\u961f\u5217\u7ed3\u6784"},{"location":"chapter_5/7_three_object_of_block_device/#_3","text":"\u4ee5 scsi \u9a71\u52a8 \u4e3a\u4f8b\u3002\u5728\u521d\u59cb\u5316\u8bbe\u5907\u9a71\u52a8\u7684\u65f6\u5019\uff0c\u4f1a\u8c03\u7528 scsi_alloc_queue() \uff0c\u628a request_fn() \u8bbe\u7f6e\u4e3a scsi_request_fn() \u3002\u540c\u65f6\u8fd8\u4f1a\u8c03\u7528 blk_init_allocated_queue()->blk_queue_make_request() \uff0c\u628a make_request_fn() \u8bbe\u7f6e\u4e3a blk_queue_bio() \u3002 /** * scsi_alloc_sdev - allocate and setup a scsi_Device * @starget: which target to allocate a &scsi_device for * @lun: which lun * @hostdata: usually NULL and set by ->slave_alloc instead * * Description: * Allocate, initialize for io, and return a pointer to a scsi_Device. * Stores the @shost, @channel, @id, and @lun in the scsi_Device, and * adds scsi_Device to the appropriate list. * * Return value: * scsi_Device pointer, or NULL on failure. **/ static struct scsi_device *scsi_alloc_sdev(struct scsi_target *starget, u64 lun, void *hostdata) { struct scsi_device *sdev; sdev = kzalloc(sizeof(*sdev) + shost->transportt->device_size, GFP_ATOMIC); ...... sdev->request_queue = scsi_alloc_queue(sdev); ...... } struct request_queue *scsi_alloc_queue(struct scsi_device *sdev) { struct Scsi_Host *shost = sdev->host; struct request_queue *q; q = blk_alloc_queue_node(GFP_KERNEL, NUMA_NO_NODE); if (!q) return NULL; q->cmd_size = sizeof(struct scsi_cmnd) + shost->hostt->cmd_size; q->rq_alloc_data = shost; q->request_fn = scsi_request_fn; q->init_rq_fn = scsi_init_rq; q->exit_rq_fn = scsi_exit_rq; q->initialize_rq_fn = scsi_initialize_rq; //\u8c03\u7528blk_queue_make_request(q, blk_queue_bio); if (blk_init_allocated_queue(q) < 0) { blk_cleanup_queue(q); return NULL; } __scsi_init_queue(shost, q); ...... return q } \u2003\u2003\u5728 blk_init_allocated_queue() \u4e2d\uff0c\u9664\u4e86\u521d\u59cb\u5316 make_request_fn() \u51fd\u6570\uff0c\u8fd8\u8981\u505a\u4e00\u4ef6\u5f88\u91cd\u8981\u7684\u4e8b\u60c5\uff0c\u5c31\u662f\u521d\u59cb\u5316 I/O \u7684\u7535\u68af\u7b97\u6cd5\u3002 int blk_init_allocated_queue(struct request_queue *q) { q->fq = blk_alloc_flush_queue(q, NUMA_NO_NODE, q->cmd_size); ...... blk_queue_make_request(q, blk_queue_bio); ...... /* init elevator */ if (elevator_init(q, NULL)) { ...... } ...... } \u7535\u68af\u7b97\u6cd5\u7c7b\u578b\u5bf9\u5e94\u7684\u7ed3\u6784\u4f53 struct elevator_type \u4e3a\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u7c7b\uff1a elevator_noop\uff1aNoop \u8c03\u5ea6\u7b97\u6cd5\u662f\u6700\u7b80\u5355\u7684 IO \u8c03\u5ea6\u7b97\u6cd5\uff0c\u5b83\u5c06 IO \u8bf7\u6c42\u653e\u5165\u5230\u4e00\u4e2a FIFO \u961f\u5217\u4e2d\uff0c\u7136\u540e\u9010\u4e2a\u6267\u884c\u8fd9\u4e9b IO \u8bf7\u6c42\u3002 iosched_deadline\uff1aDeadline \u7b97\u6cd5\u8981\u4fdd\u8bc1\u6bcf\u4e2a IO \u8bf7\u6c42\u5728\u4e00\u5b9a\u7684\u65f6\u95f4\u5185\u4e00\u5b9a\u8981\u88ab\u670d\u52a1\u5230\uff0c\u4ee5\u6b64\u6765\u907f\u514d\u67d0\u4e2a\u8bf7\u6c42\u9965\u997f\u3002\u4e3a\u4e86\u5b8c\u6210\u8fd9\u4e2a\u76ee\u6807\uff0c\u7b97\u6cd5\u4e2d\u5f15\u5165\u4e86\u4e24\u7c7b\u961f\u5217\uff0c\u4e00\u7c7b\u961f\u5217\u901a\u8fc7\u7ea2\u9ed1\u6811\u5bf9\u8bf7\u6c42\u6309\u8d77\u59cb\u6247\u533a\u5e8f\u53f7\u8fdb\u884c\u6392\u5e8f\uff0c\u79f0\u4e3a sort_list\uff0c\u6309\u7167\u6b64\u961f\u5217\u4f20\u8f93\u6027\u80fd\u4f1a\u6bd4\u8f83\u9ad8\uff1b\u53e6\u4e00\u7c7b\u961f\u5217\u5bf9\u8bf7\u6c42\u6309\u5b83\u4eec\u7684\u751f\u6210\u65f6\u95f4\u8fdb\u884c\u6392\u5e8f\uff0c\u7531\u94fe\u8868\u6765\u7ec4\u7ec7\uff0c\u79f0\u4e3a fifo_list\uff0c\u5e76\u4e14\u6bcf\u4e00\u4e2a\u8bf7\u6c42\u90fd\u6709\u4e00\u4e2a\u671f\u9650\u503c\u3002 iosched_cfq\uff1a\u719f\u6089\u7684 CFQ \u5b8c\u5168\u516c\u5e73\u8c03\u5ea6\u7b97\u6cd5\u3002\u6240\u6709\u7684\u8bf7\u6c42\u4f1a\u5728\u591a\u4e2a\u961f\u5217\u4e2d\u6392\u5e8f\u3002\u540c\u4e00\u4e2a\u8fdb\u7a0b\u7684\u8bf7\u6c42\uff0c\u603b\u662f\u5728\u540c\u4e00\u961f\u5217\u4e2d\u5904\u7406\u3002\u65f6\u95f4\u7247\u4f1a\u5206\u914d\u5230\u6bcf\u4e2a\u961f\u5217\uff0c\u901a\u8fc7\u8f6e\u8be2\u7b97\u6cd5\uff0c\u6211\u4eec\u4fdd\u8bc1\u4e86 I/O \u5e26\u5bbd\uff0c\u4ee5\u516c\u5e73\u7684\u65b9\u5f0f\uff0c\u5728\u4e0d\u540c\u961f\u5217\u4e4b\u95f4\u8fdb\u884c\u5171\u4eab\u3002 elevator_init() \u4e2d\u4f1a\u6839\u636e\u540d\u79f0\u6765\u6307\u5b9a\u7535\u68af\u7b97\u6cd5\uff0c\u5982\u679c\u6ca1\u6709\u9009\u62e9\uff0c\u90a3\u5c31\u9ed8\u8ba4\u4f7f\u7528 iosched_cfq","title":"\u8bf7\u6c42\u961f\u5217\u7684\u521d\u59cb\u5316"},{"location":"chapter_5/8_kobjet_kset_ktype/","text":"\u6982\u8ff0 \u63a5\u89e6 kobject/kset/ktype \u548c sys\u6587\u4ef6\u7cfb\u7edf \u6709\u4e00\u6bb5\u65f6\u95f4\u4e86, \u672c\u6587\u8fdb\u884c\u4e00\u4e2a\u68b3\u7406\u548c\u603b\u7ed3 Linux \u8bbe\u5907\u6a21\u578b\u7684\u57fa\u77f3\u662f kset/kobject/kobj_type \u8f85\u52a9\u5bf9\u8c61\u5305\u542b struct sys_ops \u53ca\u5176\u5305\u542b\u7684 show \u548c shtore \u51fd\u6570, struct attribute \u3001 \u901a\u8baf\u673a\u5236 struct kset_uevent_ops \u4e00 \u67b6\u6784\u56fe\u548c\u4e00\u4e9b\u603b\u4f53\u89c4\u5219 sys \u6587\u4ef6\u7cfb\u7edf \u7684\u67b6\u6784\u56fe sysfs \u6587\u4ef6\u7cfb\u7edf \u63d0\u4f9b\u4e86\u4e00\u79cd\u7528\u6237\u4e0e\u5185\u6838\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u4ea4\u4e92\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u901a\u8fc7 mount -t sysfs sysfs /sys \u6765\u8fdb\u884c\u6302\u8f7d\uff1b Linux \u8bbe\u5907\u6a21\u578b\u4e2d\uff0c \u8bbe\u5907\u3001\u9a71\u52a8\u3001\u603b\u7ebf \u7ec4\u7ec7\u6210\u62d3\u6251\u7ed3\u6784\uff0c\u901a\u8fc7 sysfs \u6587\u4ef6\u7cfb\u7edf \u4ee5\u76ee\u5f55\u7ed3\u6784\u8fdb\u884c\u5c55\u793a\u4e0e\u7ba1\u7406\uff1b Linux \u8bbe\u5907\u6a21\u578b\u4e2d\uff0c \u603b\u7ebf \u8d1f\u8d23 \u8bbe\u5907 \u548c \u9a71\u52a8 \u7684\u5339\u914d\uff0c \u8bbe\u5907 \u4e0e \u9a71\u52a8 \u90fd\u6302\u5728\u67d0\u4e00\u4e2a \u603b\u7ebf \u4e0a\uff0c\u5f53\u5b83\u4eec\u8fdb\u884c\u6ce8\u518c\u65f6\u7531 \u603b\u7ebf \u8d1f\u8d23\u53bb\u5b8c\u6210\u5339\u914d\uff0c\u8fdb\u800c\u56de\u8c03 \u9a71\u52a8 \u7684 probe \u51fd\u6570 \uff1b \u8fd9\u91cc\u7684\u8bbe\u5907\u548c\u9a71\u52a8\u5177\u4f53\u5b9e\u73b0\u90fd\u662f \u5185\u6838\u6a21\u5757 , XXXX_device.ko \u548c XXXX_driver.ko . SoC \u7cfb\u7edf\u4e2d\u6709 spi, i2c, pci \u7b49\u5b9e\u4f53\u603b\u7ebf\u7528\u4e8e\u5916\u8bbe\u7684\u8fde\u63a5\uff0c\u800c\u9488\u5bf9\u96c6\u6210\u5728 SoC \u5185\u90e8\u7684\u5916\u8bbe\u63a7\u5236\u5668\uff0cLinux \u5185\u6838\u63d0\u4f9b\u4e00\u79cd\u865a\u62df\u603b\u7ebf platform \u7528\u4e8e\u8fd9\u4e9b\u5916\u8bbe\u63a7\u5236\u5668\u7684\u8fde\u63a5\uff0c\u6b64\u5916 platform \u603b\u7ebf\u4e5f\u53ef\u7528\u4e8e\u6ca1\u6709\u5b9e\u4f53\u603b\u7ebf\u7684\u5916\u8bbe\uff1b \u5728/sys \u76ee\u5f55\u4e0b\uff0cbus \u7528\u4e8e\u5b58\u653e\u5404\u7c7b\u603b\u7ebf\uff0c\u5176\u4e2d\u603b\u7ebf\u4e2d\u4f1a\u5b58\u653e\u6302\u8f7d\u5728\u8be5\u603b\u7ebf\u4e0a\u7684\u9a71\u52a8\u548c\u8bbe\u5907\uff0c\u6bd4\u5982 serial8250\uff0cdevices \u5b58\u653e\u4e86\u7cfb\u7edf\u4e2d\u7684\u8bbe\u5907\u4fe1\u606f\uff0cclass \u662f\u9488\u5bf9\u4e0d\u540c\u7684\u8bbe\u5907\u8fdb\u884c\u5206\u7c7b\uff1b \u4e0a\u8fb9\u8fd9\u4e9b\u529f\u80fd\u7684\u5b9e\u73b0\uff0c\u79bb\u4e0d\u5f00 kobject/kset/ktype \u673a\u5236\u7684\u652f\u6491\uff0c\u5f00\u59cb\u65c5\u7a0b\u5427\u3002 \u4e8c \u6570\u636e\u7ed3\u6784\u8be6\u89e3\u548c\u6570\u636e\u7ed3\u6784\u4e4b\u95f4\u7684\u5173\u7cfb 2.1 kobject kobject \u4ee3\u8868\u5185\u6838\u5bf9\u8c61\uff0c\u7ed3\u6784\u4f53\u672c\u8eab\u4e0d\u5355\u72ec\u4f7f\u7528\uff0c\u800c\u662f\u5d4c\u5957\u5728\u5176\u4ed6\u9ad8\u5c42\u7ed3\u6784\u4e2d\uff0c\u7528\u4e8e\u7ec4\u7ec7\u6210\u62d3\u6251\u5173\u7cfb\uff1b sysfs\u6587\u4ef6\u7cfb\u7edf \u4e2d\u4e00\u4e2a \u76ee\u5f55 \u5bf9\u5e94\u4e00\u4e2a kobject \uff1b \u76ee\u5f55 \u4e0b\u7684\u4e00\u4e2a\u6587\u4ef6\u5bf9\u5e94\u4e00\u4e2a attribute \u770b\u770b\u7ed3\u6784\u4f53\u5427\uff1a struct kobject { const char *name; /* \u540d\u5b57\uff0c\u5bf9\u5e94sysfs\u4e0b\u7684\u4e00\u4e2a\u76ee\u5f55 */ struct list_head entry; /* kobject\u4e2d\u63d2\u5165\u7684 list_head\u7ed3\u6784\uff0c\u7528\u4e8e\u6784\u9020\u53cc\u5411\u94fe\u8868 */ struct kobject *parent; /* \u6307\u5411\u5f53\u524dkobject\u7236\u5bf9\u8c61\u7684\u6307\u9488\uff0c\u4f53\u73b0\u5728sys\u4e2d\u5c31\u662f\u5305\u542b\u5f53\u524dkobject\u5bf9\u8c61\u7684\u76ee\u5f55\u5bf9\u8c61 */ struct kset *kset; /* \u5f53\u524dkobject\u5bf9\u8c61\u6240\u5c5e\u7684\u96c6\u5408 */ struct kobj_type *ktype; /* \u5f53\u524dkobject\u5bf9\u8c61\u7684\u7c7b\u578b */ struct kernfs_node *sd; /* VFS\u6587\u4ef6\u7cfb\u7edf\u7684\u76ee\u5f55\u9879\uff0c\u662f\u8bbe\u5907\u548c\u6587\u4ef6\u4e4b\u95f4\u7684\u6865\u6881\uff0csysfs\u4e2d\u7684\u7b26\u53f7\u94fe\u63a5\u662f\u901a\u8fc7kernfs_node\u5185\u7684\u8054\u5408\u4f53\u5b9e\u73b0\u7684 */ struct kref kref; /* kobject\u7684\u5f15\u7528\u8ba1\u6570\uff0c\u5f53\u8ba1\u6570\u4e3a0\u65f6\uff0c\u56de\u8c03\u4e4b\u524d\u6ce8\u518c\u7684release\u65b9\u6cd5\u91ca\u653e\u8be5\u5bf9\u8c61 */ #ifdef CONFIG_DEBUG_KOBJECT_RELEASE struct delayed_work release; #endif unsigned int state_initialized:1; /* \u521d\u59cb\u5316\u6807\u5fd7\u4f4d\uff0c\u521d\u59cb\u5316\u65f6\u88ab\u7f6e\u4f4d */ unsigned int state_in_sysfs:1; /* kobject\u5728sysfs\u4e2d\u7684\u72b6\u6001\uff0c\u5728\u76ee\u5f55\u4e2d\u521b\u5efa\u5219\u4e3a1\uff0c\u5426\u5219\u4e3a0 */ unsigned int state_add_uevent_sent:1; /* \u6dfb\u52a0\u8bbe\u5907\u7684uevent\u4e8b\u4ef6\u662f\u5426\u53d1\u9001\u6807\u5fd7\uff0c\u6dfb\u52a0\u8bbe\u5907\u65f6\u5411\u7528\u6237\u7a7a\u95f4\u53d1\u9001uevent\u4e8b\u4ef6\uff0c\u8bf7\u6c42\u65b0\u589e\u8bbe\u5907 */ unsigned int state_remove_uevent_sent:1; /* \u5220\u9664\u8bbe\u5907\u7684uevent\u4e8b\u4ef6\u662f\u5426\u53d1\u9001\u6807\u5fd7\uff0c\u5220\u9664\u8bbe\u5907\u65f6\u5411\u7528\u6237\u7a7a\u95f4\u53d1\u9001uevent\u4e8b\u4ef6\uff0c\u8bf7\u6c42\u5378\u8f7d\u8bbe\u5907 */ unsigned int uevent_suppress:1; /* \u662f\u5426\u5ffd\u7565\u4e0a\u62a5\uff08\u4e0d\u4e0a\u62a5uevent\uff09 */ }; 2.2 kset kset \u662f\u5305\u542b\u591a\u4e2a kobject \u7684\u96c6\u5408\uff1b \u5982\u679c\u9700\u8981\u5728 sysfs \u7684\u76ee\u5f55\u4e2d\u5305\u542b\u591a\u4e2a\u5b50\u76ee\u5f55\uff0c\u90a3\u9700\u8981\u5c06\u5b83\u5b9a\u4e49\u6210\u4e00\u4e2a kset \uff1b kset \u7ed3\u6784\u4f53\u4e2d\u5305\u542b struct kobject \u5b57\u6bb5\uff0c\u53ef\u4ee5\u4f7f\u7528\u8be5\u5b57\u6bb5\u94fe\u63a5\u5230\u66f4\u4e0a\u4e00\u5c42\u7684\u7ed3\u6784\uff0c\u7528\u4e8e\u6784\u5efa\u66f4\u590d\u6742\u7684\u62d3\u6251\u7ed3\u6784\uff1b sysfs \u4e2d\u7684\u8bbe\u5907\u7ec4\u7ec7\u7ed3\u6784\u5f88\u5927\u7a0b\u5ea6\u4e0a\u6839\u636e kset \u7ec4\u7ec7\u7684\uff0c /sys/bus \u76ee\u5f55\u5c31\u662f\u4e00\u4e2a kset \u5bf9\u8c61\uff0c\u5728 Linux \u8bbe\u5907\u6a21\u578b\u4e2d\uff0c \u6ce8\u518c\u8bbe\u5907\u6216\u9a71\u52a8\u65f6 \u5c31\u5c06 kobject \u6dfb\u52a0\u5230\u5bf9\u5e94\u7684 kset \u4e2d\uff1b struct kset { struct list_head list; /* \u5305\u542b\u5728kset\u5185\u7684\u6240\u6709kobject\u6784\u6210\u4e00\u4e2a\u53cc\u5411\u94fe\u8868 */ spinlock_t list_lock; struct kobject kobj; /* \u5f52\u5c5e\u4e8e\u8be5kset\u7684\u6240\u6709\u7684kobject\u7684\u5171\u6709parent */ const struct kset_uevent_ops *uevent_ops; /* kset\u7684uevent\u64cd\u4f5c\u51fd\u6570\u96c6\uff0c\u5f53kset\u4e2d\u7684kobject\u6709\u72b6\u6001\u53d8\u5316\u65f6\uff0c\u4f1a\u56de\u8c03\u8fd9\u4e2a\u51fd\u6570\u96c6\uff0c\u4ee5\u4fbfkset\u6dfb\u52a0\u65b0\u7684\u73af\u5883\u53d8\u91cf\u6216\u8fc7\u6ee4\u67d0\u4e9buevent\uff0c\u5982\u679c\u4e00\u4e2akobject\u4e0d\u5c5e\u4e8e\u4efb\u4f55kset\u65f6\uff0c\u662f\u4e0d\u5141\u8bb8\u53d1\u9001uevent\u7684 */ } __randomize_layout; 2.3 kobj_type kobj_type \u7528\u4e8e\u8868\u5f81 kobject \u7684\u7c7b\u578b\uff0c\u6307\u5b9a\u4e86\u5220\u9664 kobject \u65f6\u8981\u8c03\u7528\u7684\u51fd\u6570\uff0c kobject \u7ed3\u6784\u4f53\u4e2d\u6709 struct kref \u5b57\u6bb5\u7528\u4e8e\u5bf9 kobject \u8fdb\u884c\u5f15\u7528\u8ba1\u6570\uff0c\u5f53\u8ba1\u6570\u503c\u4e3a 0 \u65f6\uff0c\u5c31\u4f1a\u8c03\u7528 kobj_type \u4e2d\u7684 release \u51fd\u6570\u5bf9 kobject \u8fdb\u884c\u91ca\u653e\uff0c\u8fd9\u4e2a\u5c31\u6709\u70b9\u7c7b\u4f3c\u4e8e C++ \u4e2d\u7684\u667a\u80fd\u6307\u9488\u4e86\uff1b kobj_type \u6307\u5b9a\u4e86\u901a\u8fc7 sysfs \u663e\u793a\u6216\u4fee\u6539\u6709\u5173 kobject \u7684\u4fe1\u606f\u65f6\u8981\u5904\u7406\u7684\u64cd\u4f5c\uff0c\u5b9e\u9645\u662f\u8c03\u7528 show/store \u51fd\u6570\uff1b kobject \u548c kobj_type \u662f 1 \u5bf9 1 \u5173\u7cfb struct kobj_type { void (*release)(struct kobject *kobj); /* \u91ca\u653ekobject\u5bf9\u8c61\u7684\u63a5\u53e3\uff0c\u6709\u70b9\u7c7b\u4f3c\u9762\u5411\u5bf9\u8c61\u4e2d\u7684\u6790\u6784 */ const struct sysfs_ops *sysfs_ops; /* \u64cd\u4f5ckobject\u7684\u65b9\u6cd5\u96c6 */ struct attribute **default_attrs; const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj); const void *(*namespace)(struct kobject *kobj); }; 2.4 kobject \u64cd\u4f5c\u51fd\u6570\u96c6, sys_ops struct sysfs_ops { /* kobject\u64cd\u4f5c\u51fd\u6570\u96c6 */ ssize_t (*show)(struct kobject *, struct attribute *, char *); ssize_t (*store)(struct kobject *, struct attribute *, const char *, size_t); }; 2.5 kobject \u7684\u5c5e\u6027 struct attribute /* \u6240\u8c13\u7684attribute\u5c31\u662f\u5185\u6838\u7a7a\u95f4\u548c\u7528\u6237\u7a7a\u95f4\u8fdb\u884c\u4fe1\u606f\u4ea4\u4e92\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u4f8b\u5982\u67d0\u4e2adriver\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53d8\u91cf\uff0c\u5374\u5e0c\u671b\u7528\u6237\u7a7a\u95f4\u7a0b\u5e8f\u53ef\u4ee5\u4fee\u6539\u8be5\u53d8\u91cf\uff0c\u4ee5\u63a7\u5236driver\u7684\u884c\u4e3a\uff0c\u90a3\u4e48\u53ef\u4ee5\u5c06\u8be5\u53d8\u91cf\u4ee5sysfs attribute\u7684\u5f62\u5f0f\u5f00\u653e\u51fa\u6765 */ struct attribute { const char *name; umode_t mode; #ifdef CONFIG_DEBUG_LOCK_ALLOC bool ignore_lockdep:1; struct lock_class_key *key; struct lock_class_key skey; #endif }; kobject \u5bf9\u5e94 sys\u6587\u4ef6\u7cfb\u7edf \u4e0b\u7684\u4e00\u4e2a\u76ee\u5f55, \u800c attribute \u5c31\u5bf9\u5e94\u76ee\u5f55\u4e0b\u7684\u4e00\u4e2a\u6587\u4ef6, \u65b9\u4fbf\u7528\u6237\u7a7a\u95f4\u5bf9\u5c5e\u6027\u8fdb\u884c\u4fee\u6539 2.6 \u66f4\u8be6\u7ec6\u7684\u67b6\u6784\u56fe \u53ef\u4ee5\u770b\u4e00\u4e0b kobject \u521b\u5efa\u7684\u65f6\u5019\uff0c\u4e0e ktype \u7684\u5173\u7cfb\uff0c\u8fd9\u6837\u7406\u89e3\u8d77\u6765\u66f4\u987a\uff1a kobject \u5728\u521b\u5efa\u7684\u65f6\u5019\uff0c\u9ed8\u8ba4\u8bbe\u7f6e kobj_type \u7684\u503c\u4e3a dynamic_kobj_ktype \uff0c\u901a\u5e38 kobject \u4f1a\u5d4c\u5165\u5728\u5176\u4ed6\u7ed3\u6784\u4e2d\u6765\u4f7f\u7528\uff0c\u56e0\u6b64\u5b83\u7684\u521d\u59cb\u5316\u8ddf\u7279\u5b9a\u7684\u7ed3\u6784\u76f8\u5173\uff0c\u5178\u578b\u7684\u6bd4\u5982 struct device \u548c struct device_driver \uff1b \u5728 /sys\u6587\u4ef6\u7cfb\u7edf \u4e2d\uff0c\u901a\u8fc7 echo/cat \u7684\u64cd\u4f5c\uff0c\u6700\u7ec8\u4f1a\u8c03\u7528\u5230 show/store \u51fd\u6570\uff0c\u800c\u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u653e\u7f6e\u5230\u9a71\u52a8\u7a0b\u5e8f\u4e2d\uff1b 2.7 \u7ed3\u6784\u5173\u7cfb \u4e3a\u4e86\u66f4\u5f62\u8c61\u7684\u8bf4\u660e\u8fd9\u51e0\u4e2a\u7ed3\u6784\u4f53\u7684\u5173\u7cfb\uff0c\u518d\u6765\u4e00\u5f20\u56fe\uff1a kset \u65e2\u662f kobject \u7684\u96c6\u5408\uff0c\u672c\u8eab\u53c8\u662f\u4e00\u4e2a kobject \uff0c\u8fdb\u800c\u53ef\u4ee5\u6dfb\u52a0\u5230\u5176\u4ed6\u7684\u96c6\u5408\u4e2d\uff0c\u4ece\u800c\u5c31\u53ef\u4ee5\u6784\u5efa\u6210\u590d\u6742\u7684\u62d3\u6251\u7ed3\u6784\uff0c\u6ee1\u8db3 /sys\u6587\u4ef6\u5939 \u4e0b\u7684\u6587\u4ef6\u7ec4\u7ec7\u9700\u6c42\uff1b \u5982\u679c\u53ea\u770b kset/kobject \u7684\u6570\u636e\u7ed3\u6784\u7ec4\u7ec7\uff0c\u53ef\u80fd\u8fd8\u662f\u4f1a\u8ff7\u60d1\uff0c\u5b83\u600e\u4e48\u8ddf Linux \u7684\u8bbe\u5907\u6a21\u578b\u76f8\u5173\uff1f\u8fd9\u65f6\u5c31\u4e0d\u5f97\u4e0d\u63d0\u5230 Linux \u5185\u6838\u4e2d\u4e00\u4e2a\u5f88\u7cbe\u5999\u7684\u5b58\u5728 container_of \uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u6210\u5458\u53d8\u91cf\u7684\u5730\u5740\u6765\u83b7\u53d6\u6240\u5728\u7ed3\u6784\u7684\u5730\u5740\u4fe1\u606f\u3002\u524d\u6587\u63d0\u5230\u8fc7 kobject/kset \u7ed3\u6784\u672c\u8eab\u4e0d\u4f1a\u5355\u72ec\u4f7f\u7528\uff0c \u901a\u5e38\u90fd\u662f\u4f1a\u5d4c\u5957\u5728\u5176\u4ed6\u7ed3\u6784\u4e2d \uff0c\u65e2\u7136 kobjcet/kset \u80fd\u7ec4\u7ec7\u6210\u62d3\u6251\u7ed3\u6784\uff0c\u90a3\u4e48\u5305\u542b\u5b83\u4eec\u7684\u7ed3\u6784\u540c\u6837\u53ef\u4ee5\u6784\u5efa\u8fd9\u4e2a\u5173\u7cfb\uff0c\u56e0\u4e3a\u53ef\u4ee5\u901a\u8fc7 container_of \u5c31\u53ef\u4ee5\u627e\u5230\u7ed3\u6784\u4f53\u7684\u9996\u5730\u5740\u3002 \u7ed3\u6784\u4f53 A\u3001B\u3001C\u3001D\u3001E \u540c\u6837\u53ef\u4ee5\u6784\u5efa\u62d3\u6251\u7ed3\u6784\u5173\u7cfb\uff1b struct device \u548c struct device_driver \u7ed3\u6784\u4f53\u4e2d\u90fd\u5305\u542b\u4e86 struct kobject \uff0c\u800c struct bus_type \u7ed3\u6784\u4f53\u4e2d\u5305\u542b\u4e86 struct kset \u7ed3\u6784\uff0c\u8fd9\u4e2a\u4e5f\u5c31 \u5bf9\u5e94\u5230\u524d\u6587\u63d0\u5230\u7684\u8bbe\u5907\u548c\u9a71\u52a8\u90fd\u6dfb\u52a0\u5230\u603b\u7ebf\u4e0a\uff0c\u7531\u603b\u7ebf\u6765\u8d1f\u8d23\u5339\u914d \uff1b \u4e09 \u6d41\u7a0b\u5206\u6790 kobject/kset \u7684\u76f8\u5173\u4ee3\u7801\u6bd4\u8f83\u7b80\u5355\uff0c\u6bd5\u7adf\u5b83\u53ea\u662f\u4f5c\u4e3a\u4e00\u4e2a\u7ed3\u6784\u4f53\u5d4c\u5165\u5176\u4ed6 high-level \u7684\u7ed3\u6784\u4e2d\uff0c\u5145\u5f53\u7ebd\u5e26\u7684\u4f5c\u7528\u3002\u4e0d\u8fc7\uff0c\u6211\u8fd8\u662f\u7b80\u5355\u7684\u4e0a\u4e00\u5f20\u56fe\u5427\uff1a \u5b8c\u6210\u7684\u5de5\u4f5c\u57fa\u672c\u5c31\u662f\u5206\u914d\u7ed3\u6784\u4f53\uff0c\u521d\u59cb\u5316\u5404\u4e2a\u7ed3\u6784\u4f53\u5b57\u6bb5\uff0c\u6784\u5efa\u62d3\u6251\u5173\u7cfb\uff08\u4e3b\u8981\u662f\u6dfb\u52a0\u5230 kset \u7684 list \u4e2d\uff0c parent \u7684\u6307\u5411\u7b49\uff09\u7b49\uff0c\u770b\u61c2\u4e86\u7ed3\u6784\u4f53\u7684\u7ec4\u7ec7\uff0c\u8fd9\u90e8\u5206\u7684\u4ee3\u7801\u7406\u89e3\u8d77\u6765\u5c31\u5f88\u8f7b\u677e\u4e86\uff1b \u56db \u4e00\u4e2a\u4f7f\u7528 kobject/kset/ktype \u7684\u4f8b\u5b50\uff08Linux \u9a71\u52a8\u7684\u5e38\u7528\u624b\u6cd5) 4.1 \u4ee3\u7801 #include <linux/kernel.h> #include <linux/module.h> #include <linux/slab.h> #include <linux/kobject.h> //\u81ea\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\uff0c\u5305\u542b\u4e86struct kobject\u5b50\u7ed3\u6784 struct test_kobj { int value; struct kobject kobj; }; //\u81ea\u5b9a\u4e49\u4e2a\u5c5e\u6027\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u4e86struct attribute\u7ed3\u6784 struct test_kobj_attribute { struct attribute attr; ssize_t (*show)(struct test_kobj *obj, struct test_kobj_attribute *attr, char *buf); ssize_t (*store)(struct test_kobj *obj, struct test_kobj_attribute *attr, const char *buf, size_t count); }; //\u58f0\u660e\u4e00\u4e2a\u5168\u5c40\u7ed3\u6784\u7528\u4e8e\u6d4b\u8bd5 struct test_kobj *obj; //\u7528\u4e8e\u521d\u59cb\u5316sysfs_ops\u4e2d\u7684\u51fd\u6570\u6307\u9488 static ssize_t test_kobj_attr_show(struct kobject *kobj, struct attribute *attr, char *buf) { struct test_kobj_attribute *test_kobj_attr; ssize_t ret = -EIO; test_kobj_attr = container_of(attr, struct test_kobj_attribute, attr); //\u56de\u8c03\u5230\u5177\u4f53\u7684\u5b9e\u73b0\u51fd\u6570 if (test_kobj_attr->show) ret = test_kobj_attr->show(container_of(kobj, struct test_kobj, kobj), test_kobj_attr, buf); return ret; } //\u7528\u4e8e\u521d\u59cb\u5316sysfs_ops\u4e2d\u7684\u51fd\u6570\u6307\u9488 static ssize_t test_kobj_attr_store(struct kobject *kobj, struct attribute *attr, const char *buf, size_t count) { struct test_kobj_attribute *test_kobj_attr; ssize_t ret = -EIO; test_kobj_attr = container_of(attr, struct test_kobj_attribute, attr); //\u56de\u8c03\u5230\u5177\u4f53\u7684\u5b9e\u73b0\u51fd\u6570 if (test_kobj_attr->store) ret = test_kobj_attr->store(container_of(kobj, struct test_kobj, kobj), test_kobj_attr, buf, count); return ret; } //\u7528\u4e8e\u521d\u59cb\u5316kobj_ktype const struct sysfs_ops test_kobj_sysfs_ops = { .show = test_kobj_attr_show, .store = test_kobj_attr_store, }; //\u7528\u4e8e\u521d\u59cb\u5316kobj_ktype\uff0c\u6700\u7ec8\u7528\u4e8e\u91ca\u653ekobject void obj_release(struct kobject *kobj) { struct test_kobj *obj = container_of(kobj, struct test_kobj, kobj); printk(KERN_INFO \"test kobject release %s\\n\", kobject_name(&obj->kobj)); kfree(obj); } //\u5b9a\u4e49kobj_ktype\uff0c\u7528\u4e8e\u6307\u5b9akobject\u7684\u7c7b\u578b\uff0c\u521d\u59cb\u5316\u7684\u65f6\u5019\u4f7f\u7528 static struct kobj_type test_kobj_ktype = { .release = obj_release, .sysfs_ops = &test_kobj_sysfs_ops, }; //show\u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0 ssize_t name_show(struct test_kobj *obj, struct test_kobj_attribute *attr, char *buffer) { return sprintf(buffer, \"%s\\n\", kobject_name(&obj->kobj)); } //show\u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0 ssize_t value_show(struct test_kobj *obj, struct test_kobj_attribute *attr, char *buffer) { return sprintf(buffer, \"%d\\n\", obj->value); } //store\u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0 ssize_t value_store(struct test_kobj *obj, struct test_kobj_attribute *attr, const char *buffer, size_t size) { sscanf(buffer, \"%d\", &obj->value); return size; } //\u5b9a\u4e49\u5c5e\u6027\uff0c\u6700\u7ec8\u6ce8\u518c\u8fdbsysfs\u7cfb\u7edf struct test_kobj_attribute name_attribute = __ATTR(name, 0664, name_show, NULL); struct test_kobj_attribute value_attribute = __ATTR(value, 0664, value_show, value_store); //\u4f7f\u7528__ATTR\u5b8f,\u5b9a\u4e49\u4e00\u4e2a\u5c5e\u6027(\u5bf9\u5e94sysfs\u4e0b\u7684\u4e00\u4e2a\u6587\u4ef6)\u3001\u6743\u9650\u3001\u8bfb\u51fd\u6570\u3001\u5199\u51fd\u6570 struct attribute *test_kobj_attrs[] = { &name_attribute.attr, &value_attribute.attr, NULL, }; //\u5b9a\u4e49\u7ec4. \u6211\u4eec\u77e5\u9053\u6bcf\u4e2akobject\u5bf9\u5e94/sys\u76ee\u5f55\u4e0b\u7684\u4e00\u4e2a\u5b50\u76ee\u5f55, \u8be5\u5b50\u76ee\u5f55\u4e0b\u7684\u76ee\u5f55\u53ef\u4ee5\u7ee7\u7eed\u662fkobject(\u5982\u679c\u662fkobject\u90a3\u5fc5\u7136\u662f\u4e00\u4e2a\u5b50\u76ee\u5f55), \u4e5f\u53ef\u4ee5\u662f\u5355\u7eaf\u7684\u5b50\u76ee\u5f55(\u6ca1\u6709kobject\u4e0e\u4e4b\u5bf9\u5e94), \u90a3\u4e48\u5c31\u53ef\u4ee5\u91c7\u7528attribute_group\u6765\u5b9e\u73b0 struct attribute_group test_kobj_group = { .name = \"test_kobj_group\", .attrs = test_kobj_attrs, }; //\u6a21\u5757\u521d\u59cb\u5316\u51fd\u6570 static int __init test_kobj_init(void) { int retval; printk(KERN_INFO \"test_kobj_init\\n\"); printk(\"%s %s line %d test_kobj_init\\n\", __FILE__, __FUNCTION__, __LINE__); obj = kmalloc(sizeof(struct test_kobj), GFP_KERNEL); if (!obj) { return -ENOMEM; } obj->value = 1; memset(&obj->kobj, 0, sizeof(struct kobject)); //\u6dfb\u52a0\u8fdbsysfs\u7cfb\u7edf kobject_init_and_add(&obj->kobj, &test_kobj_ktype, NULL, \"test_kobj\"); //\u5728sys\u6587\u4ef6\u5939\u4e0b\u521b\u5efa\u6587\u4ef6 retval = sysfs_create_files(&obj->kobj, (const struct attribute **)test_kobj_attrs); if (retval) { kobject_put(&obj->kobj); return retval; } //\u5728sys\u6587\u4ef6\u5939\u4e0b\u521b\u5efagroup retval = sysfs_create_group(&obj->kobj, &test_kobj_group); if (retval) { kobject_put(&obj->kobj); return retval; } return 0; } //\u6a21\u5757\u6e05\u7406\u51fd\u6570 static void __exit test_kobj_exit(void) { printk(KERN_INFO \"test_kobj_exit\\n\"); printk(\"%s %s line %d test_kobj_exit\\n\", __FILE__, __FUNCTION__, __LINE__); kobject_del(&obj->kobj); kobject_put(&obj->kobj); return; } module_init(test_kobj_init); module_exit(test_kobj_exit); MODULE_AUTHOR(\"LoyenWang\"); MODULE_LICENSE(\"GPL\"); 4.2 Makefile ifneq ($(KERNELRELEASE),) obj-m:=test_kobject.o else KERDIR := /lib/modules/$(shell uname -r)/build PWD:=$(shell pwd) all: make -C $(KERDIR) M=$(PWD) modules clean: rm -f *.ko *.o *.symvers *.cmd *.cmd.o modules.* *.mod.c endif Makefile \u6ca1\u6709\u592a\u591a\u597d\u8bf4\u7684\uff0c\u6ce8\u610f Tab \u7684\u4f7f\u7528\uff0c\u5426\u5219\u5bb9\u6613\u51fa\u9519\uff1b 4.3 \u6d4b\u8bd5\u7ed3\u679c \u5728 /sys \u76ee\u5f55\u4e0b\u521b\u5efa\u4e86 test_kobj \u6587\u4ef6\u5939\uff0c\u5728\u8be5\u6587\u4ef6\u5939\u4e0b\u9664\u4e86 name \u548c value \u5916\uff0c\u8fd8\u6709\u4e00\u4e2a test_kobj_group \u7684\u5b50\u6587\u4ef6\u5939\uff1b \u53ef\u4ee5\u901a\u8fc7 cat/echo \u7684\u64cd\u4f5c\uff0c\u6765\u64cd\u4f5c name \u548c value \uff0c\u5206\u522b\u4f1a\u8c03\u7528\u5230\u5e95\u5c42\u7684 xxx_show \u548c xxx_store \u51fd\u6570\uff1b \u5bf9\u7740\u4ee3\u7801\u770b\u8fd9\u4e2a\u56fe\uff0c\u4e00\u76ee\u4e86\u7136\uff1b 4.4 \u66f4\u591a\u4f8b\u5b50 Linux \u4e0b\u6dfb\u52a0\u81ea\u5df1\u7684 sysfs \u63a5\u53e3 Linux \u9a71\u52a8 | \u5728\u9a71\u52a8\u4e2d\u521b\u5efa sysfs \u63a5\u53e3 Linux \u4e3a\u4ec0\u4e48\u6709\u4e9b\u9a71\u52a8\u5fc5\u987b\u7528 sysfs sysfs \u53ef\u4ee5\u5c06\u8bbe\u5907\u5c5e\u6027\u76f4\u63a5\u5c55\u793a\u7ed9\u7528\u6237\u7a7a\u95f4,\u53ef\u4ee5\u5728\u63a7\u5236\u53f0\u548c shell \u811a\u672c\u4e0a\u76f4\u63a5\u548c\u7528\u6237\u7a7a\u95f4\u8fdb\u884c\u4ea4\u4e92, \u800c ioctl \u9700\u8981\u7f16\u5199\u4e2a c \u7a0b\u5e8f\u624d\u80fd\u8fd0\u884c\u3002\u56e0\u6b64\u5728\u8fd9\u65b9\u9762 sysfs \u66f4\u5408\u9002\u3002 \u4e94 \u53c2\u8003\u6587\u6863 linux \u8bbe\u5907\u6a21\u578b\u4e4b kset/kobj/ktype \u5206\u6790","title":"\u7b2c\u516b\u7bc7 Linux\u8bbe\u5907\u6a21\u578b\u7684\u57fa\u77f3:kset/kobject/ktype"},{"location":"chapter_5/8_kobjet_kset_ktype/#_1","text":"\u63a5\u89e6 kobject/kset/ktype \u548c sys\u6587\u4ef6\u7cfb\u7edf \u6709\u4e00\u6bb5\u65f6\u95f4\u4e86, \u672c\u6587\u8fdb\u884c\u4e00\u4e2a\u68b3\u7406\u548c\u603b\u7ed3 Linux \u8bbe\u5907\u6a21\u578b\u7684\u57fa\u77f3\u662f kset/kobject/kobj_type \u8f85\u52a9\u5bf9\u8c61\u5305\u542b struct sys_ops \u53ca\u5176\u5305\u542b\u7684 show \u548c shtore \u51fd\u6570, struct attribute \u3001 \u901a\u8baf\u673a\u5236 struct kset_uevent_ops","title":"\u6982\u8ff0"},{"location":"chapter_5/8_kobjet_kset_ktype/#_2","text":"sys \u6587\u4ef6\u7cfb\u7edf \u7684\u67b6\u6784\u56fe sysfs \u6587\u4ef6\u7cfb\u7edf \u63d0\u4f9b\u4e86\u4e00\u79cd\u7528\u6237\u4e0e\u5185\u6838\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u4ea4\u4e92\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u901a\u8fc7 mount -t sysfs sysfs /sys \u6765\u8fdb\u884c\u6302\u8f7d\uff1b Linux \u8bbe\u5907\u6a21\u578b\u4e2d\uff0c \u8bbe\u5907\u3001\u9a71\u52a8\u3001\u603b\u7ebf \u7ec4\u7ec7\u6210\u62d3\u6251\u7ed3\u6784\uff0c\u901a\u8fc7 sysfs \u6587\u4ef6\u7cfb\u7edf \u4ee5\u76ee\u5f55\u7ed3\u6784\u8fdb\u884c\u5c55\u793a\u4e0e\u7ba1\u7406\uff1b Linux \u8bbe\u5907\u6a21\u578b\u4e2d\uff0c \u603b\u7ebf \u8d1f\u8d23 \u8bbe\u5907 \u548c \u9a71\u52a8 \u7684\u5339\u914d\uff0c \u8bbe\u5907 \u4e0e \u9a71\u52a8 \u90fd\u6302\u5728\u67d0\u4e00\u4e2a \u603b\u7ebf \u4e0a\uff0c\u5f53\u5b83\u4eec\u8fdb\u884c\u6ce8\u518c\u65f6\u7531 \u603b\u7ebf \u8d1f\u8d23\u53bb\u5b8c\u6210\u5339\u914d\uff0c\u8fdb\u800c\u56de\u8c03 \u9a71\u52a8 \u7684 probe \u51fd\u6570 \uff1b \u8fd9\u91cc\u7684\u8bbe\u5907\u548c\u9a71\u52a8\u5177\u4f53\u5b9e\u73b0\u90fd\u662f \u5185\u6838\u6a21\u5757 , XXXX_device.ko \u548c XXXX_driver.ko . SoC \u7cfb\u7edf\u4e2d\u6709 spi, i2c, pci \u7b49\u5b9e\u4f53\u603b\u7ebf\u7528\u4e8e\u5916\u8bbe\u7684\u8fde\u63a5\uff0c\u800c\u9488\u5bf9\u96c6\u6210\u5728 SoC \u5185\u90e8\u7684\u5916\u8bbe\u63a7\u5236\u5668\uff0cLinux \u5185\u6838\u63d0\u4f9b\u4e00\u79cd\u865a\u62df\u603b\u7ebf platform \u7528\u4e8e\u8fd9\u4e9b\u5916\u8bbe\u63a7\u5236\u5668\u7684\u8fde\u63a5\uff0c\u6b64\u5916 platform \u603b\u7ebf\u4e5f\u53ef\u7528\u4e8e\u6ca1\u6709\u5b9e\u4f53\u603b\u7ebf\u7684\u5916\u8bbe\uff1b \u5728/sys \u76ee\u5f55\u4e0b\uff0cbus \u7528\u4e8e\u5b58\u653e\u5404\u7c7b\u603b\u7ebf\uff0c\u5176\u4e2d\u603b\u7ebf\u4e2d\u4f1a\u5b58\u653e\u6302\u8f7d\u5728\u8be5\u603b\u7ebf\u4e0a\u7684\u9a71\u52a8\u548c\u8bbe\u5907\uff0c\u6bd4\u5982 serial8250\uff0cdevices \u5b58\u653e\u4e86\u7cfb\u7edf\u4e2d\u7684\u8bbe\u5907\u4fe1\u606f\uff0cclass \u662f\u9488\u5bf9\u4e0d\u540c\u7684\u8bbe\u5907\u8fdb\u884c\u5206\u7c7b\uff1b \u4e0a\u8fb9\u8fd9\u4e9b\u529f\u80fd\u7684\u5b9e\u73b0\uff0c\u79bb\u4e0d\u5f00 kobject/kset/ktype \u673a\u5236\u7684\u652f\u6491\uff0c\u5f00\u59cb\u65c5\u7a0b\u5427\u3002","title":"\u4e00 \u67b6\u6784\u56fe\u548c\u4e00\u4e9b\u603b\u4f53\u89c4\u5219"},{"location":"chapter_5/8_kobjet_kset_ktype/#_3","text":"","title":"\u4e8c \u6570\u636e\u7ed3\u6784\u8be6\u89e3\u548c\u6570\u636e\u7ed3\u6784\u4e4b\u95f4\u7684\u5173\u7cfb"},{"location":"chapter_5/8_kobjet_kset_ktype/#21-kobject","text":"kobject \u4ee3\u8868\u5185\u6838\u5bf9\u8c61\uff0c\u7ed3\u6784\u4f53\u672c\u8eab\u4e0d\u5355\u72ec\u4f7f\u7528\uff0c\u800c\u662f\u5d4c\u5957\u5728\u5176\u4ed6\u9ad8\u5c42\u7ed3\u6784\u4e2d\uff0c\u7528\u4e8e\u7ec4\u7ec7\u6210\u62d3\u6251\u5173\u7cfb\uff1b sysfs\u6587\u4ef6\u7cfb\u7edf \u4e2d\u4e00\u4e2a \u76ee\u5f55 \u5bf9\u5e94\u4e00\u4e2a kobject \uff1b \u76ee\u5f55 \u4e0b\u7684\u4e00\u4e2a\u6587\u4ef6\u5bf9\u5e94\u4e00\u4e2a attribute \u770b\u770b\u7ed3\u6784\u4f53\u5427\uff1a struct kobject { const char *name; /* \u540d\u5b57\uff0c\u5bf9\u5e94sysfs\u4e0b\u7684\u4e00\u4e2a\u76ee\u5f55 */ struct list_head entry; /* kobject\u4e2d\u63d2\u5165\u7684 list_head\u7ed3\u6784\uff0c\u7528\u4e8e\u6784\u9020\u53cc\u5411\u94fe\u8868 */ struct kobject *parent; /* \u6307\u5411\u5f53\u524dkobject\u7236\u5bf9\u8c61\u7684\u6307\u9488\uff0c\u4f53\u73b0\u5728sys\u4e2d\u5c31\u662f\u5305\u542b\u5f53\u524dkobject\u5bf9\u8c61\u7684\u76ee\u5f55\u5bf9\u8c61 */ struct kset *kset; /* \u5f53\u524dkobject\u5bf9\u8c61\u6240\u5c5e\u7684\u96c6\u5408 */ struct kobj_type *ktype; /* \u5f53\u524dkobject\u5bf9\u8c61\u7684\u7c7b\u578b */ struct kernfs_node *sd; /* VFS\u6587\u4ef6\u7cfb\u7edf\u7684\u76ee\u5f55\u9879\uff0c\u662f\u8bbe\u5907\u548c\u6587\u4ef6\u4e4b\u95f4\u7684\u6865\u6881\uff0csysfs\u4e2d\u7684\u7b26\u53f7\u94fe\u63a5\u662f\u901a\u8fc7kernfs_node\u5185\u7684\u8054\u5408\u4f53\u5b9e\u73b0\u7684 */ struct kref kref; /* kobject\u7684\u5f15\u7528\u8ba1\u6570\uff0c\u5f53\u8ba1\u6570\u4e3a0\u65f6\uff0c\u56de\u8c03\u4e4b\u524d\u6ce8\u518c\u7684release\u65b9\u6cd5\u91ca\u653e\u8be5\u5bf9\u8c61 */ #ifdef CONFIG_DEBUG_KOBJECT_RELEASE struct delayed_work release; #endif unsigned int state_initialized:1; /* \u521d\u59cb\u5316\u6807\u5fd7\u4f4d\uff0c\u521d\u59cb\u5316\u65f6\u88ab\u7f6e\u4f4d */ unsigned int state_in_sysfs:1; /* kobject\u5728sysfs\u4e2d\u7684\u72b6\u6001\uff0c\u5728\u76ee\u5f55\u4e2d\u521b\u5efa\u5219\u4e3a1\uff0c\u5426\u5219\u4e3a0 */ unsigned int state_add_uevent_sent:1; /* \u6dfb\u52a0\u8bbe\u5907\u7684uevent\u4e8b\u4ef6\u662f\u5426\u53d1\u9001\u6807\u5fd7\uff0c\u6dfb\u52a0\u8bbe\u5907\u65f6\u5411\u7528\u6237\u7a7a\u95f4\u53d1\u9001uevent\u4e8b\u4ef6\uff0c\u8bf7\u6c42\u65b0\u589e\u8bbe\u5907 */ unsigned int state_remove_uevent_sent:1; /* \u5220\u9664\u8bbe\u5907\u7684uevent\u4e8b\u4ef6\u662f\u5426\u53d1\u9001\u6807\u5fd7\uff0c\u5220\u9664\u8bbe\u5907\u65f6\u5411\u7528\u6237\u7a7a\u95f4\u53d1\u9001uevent\u4e8b\u4ef6\uff0c\u8bf7\u6c42\u5378\u8f7d\u8bbe\u5907 */ unsigned int uevent_suppress:1; /* \u662f\u5426\u5ffd\u7565\u4e0a\u62a5\uff08\u4e0d\u4e0a\u62a5uevent\uff09 */ };","title":"2.1 kobject"},{"location":"chapter_5/8_kobjet_kset_ktype/#22-kset","text":"kset \u662f\u5305\u542b\u591a\u4e2a kobject \u7684\u96c6\u5408\uff1b \u5982\u679c\u9700\u8981\u5728 sysfs \u7684\u76ee\u5f55\u4e2d\u5305\u542b\u591a\u4e2a\u5b50\u76ee\u5f55\uff0c\u90a3\u9700\u8981\u5c06\u5b83\u5b9a\u4e49\u6210\u4e00\u4e2a kset \uff1b kset \u7ed3\u6784\u4f53\u4e2d\u5305\u542b struct kobject \u5b57\u6bb5\uff0c\u53ef\u4ee5\u4f7f\u7528\u8be5\u5b57\u6bb5\u94fe\u63a5\u5230\u66f4\u4e0a\u4e00\u5c42\u7684\u7ed3\u6784\uff0c\u7528\u4e8e\u6784\u5efa\u66f4\u590d\u6742\u7684\u62d3\u6251\u7ed3\u6784\uff1b sysfs \u4e2d\u7684\u8bbe\u5907\u7ec4\u7ec7\u7ed3\u6784\u5f88\u5927\u7a0b\u5ea6\u4e0a\u6839\u636e kset \u7ec4\u7ec7\u7684\uff0c /sys/bus \u76ee\u5f55\u5c31\u662f\u4e00\u4e2a kset \u5bf9\u8c61\uff0c\u5728 Linux \u8bbe\u5907\u6a21\u578b\u4e2d\uff0c \u6ce8\u518c\u8bbe\u5907\u6216\u9a71\u52a8\u65f6 \u5c31\u5c06 kobject \u6dfb\u52a0\u5230\u5bf9\u5e94\u7684 kset \u4e2d\uff1b struct kset { struct list_head list; /* \u5305\u542b\u5728kset\u5185\u7684\u6240\u6709kobject\u6784\u6210\u4e00\u4e2a\u53cc\u5411\u94fe\u8868 */ spinlock_t list_lock; struct kobject kobj; /* \u5f52\u5c5e\u4e8e\u8be5kset\u7684\u6240\u6709\u7684kobject\u7684\u5171\u6709parent */ const struct kset_uevent_ops *uevent_ops; /* kset\u7684uevent\u64cd\u4f5c\u51fd\u6570\u96c6\uff0c\u5f53kset\u4e2d\u7684kobject\u6709\u72b6\u6001\u53d8\u5316\u65f6\uff0c\u4f1a\u56de\u8c03\u8fd9\u4e2a\u51fd\u6570\u96c6\uff0c\u4ee5\u4fbfkset\u6dfb\u52a0\u65b0\u7684\u73af\u5883\u53d8\u91cf\u6216\u8fc7\u6ee4\u67d0\u4e9buevent\uff0c\u5982\u679c\u4e00\u4e2akobject\u4e0d\u5c5e\u4e8e\u4efb\u4f55kset\u65f6\uff0c\u662f\u4e0d\u5141\u8bb8\u53d1\u9001uevent\u7684 */ } __randomize_layout;","title":"2.2 kset"},{"location":"chapter_5/8_kobjet_kset_ktype/#23-kobj_type","text":"kobj_type \u7528\u4e8e\u8868\u5f81 kobject \u7684\u7c7b\u578b\uff0c\u6307\u5b9a\u4e86\u5220\u9664 kobject \u65f6\u8981\u8c03\u7528\u7684\u51fd\u6570\uff0c kobject \u7ed3\u6784\u4f53\u4e2d\u6709 struct kref \u5b57\u6bb5\u7528\u4e8e\u5bf9 kobject \u8fdb\u884c\u5f15\u7528\u8ba1\u6570\uff0c\u5f53\u8ba1\u6570\u503c\u4e3a 0 \u65f6\uff0c\u5c31\u4f1a\u8c03\u7528 kobj_type \u4e2d\u7684 release \u51fd\u6570\u5bf9 kobject \u8fdb\u884c\u91ca\u653e\uff0c\u8fd9\u4e2a\u5c31\u6709\u70b9\u7c7b\u4f3c\u4e8e C++ \u4e2d\u7684\u667a\u80fd\u6307\u9488\u4e86\uff1b kobj_type \u6307\u5b9a\u4e86\u901a\u8fc7 sysfs \u663e\u793a\u6216\u4fee\u6539\u6709\u5173 kobject \u7684\u4fe1\u606f\u65f6\u8981\u5904\u7406\u7684\u64cd\u4f5c\uff0c\u5b9e\u9645\u662f\u8c03\u7528 show/store \u51fd\u6570\uff1b kobject \u548c kobj_type \u662f 1 \u5bf9 1 \u5173\u7cfb struct kobj_type { void (*release)(struct kobject *kobj); /* \u91ca\u653ekobject\u5bf9\u8c61\u7684\u63a5\u53e3\uff0c\u6709\u70b9\u7c7b\u4f3c\u9762\u5411\u5bf9\u8c61\u4e2d\u7684\u6790\u6784 */ const struct sysfs_ops *sysfs_ops; /* \u64cd\u4f5ckobject\u7684\u65b9\u6cd5\u96c6 */ struct attribute **default_attrs; const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj); const void *(*namespace)(struct kobject *kobj); };","title":"2.3 kobj_type"},{"location":"chapter_5/8_kobjet_kset_ktype/#24-kobject-sys_ops","text":"struct sysfs_ops { /* kobject\u64cd\u4f5c\u51fd\u6570\u96c6 */ ssize_t (*show)(struct kobject *, struct attribute *, char *); ssize_t (*store)(struct kobject *, struct attribute *, const char *, size_t); };","title":"2.4 kobject \u64cd\u4f5c\u51fd\u6570\u96c6, sys_ops"},{"location":"chapter_5/8_kobjet_kset_ktype/#25-kobject-struct-attribute","text":"/* \u6240\u8c13\u7684attribute\u5c31\u662f\u5185\u6838\u7a7a\u95f4\u548c\u7528\u6237\u7a7a\u95f4\u8fdb\u884c\u4fe1\u606f\u4ea4\u4e92\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u4f8b\u5982\u67d0\u4e2adriver\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53d8\u91cf\uff0c\u5374\u5e0c\u671b\u7528\u6237\u7a7a\u95f4\u7a0b\u5e8f\u53ef\u4ee5\u4fee\u6539\u8be5\u53d8\u91cf\uff0c\u4ee5\u63a7\u5236driver\u7684\u884c\u4e3a\uff0c\u90a3\u4e48\u53ef\u4ee5\u5c06\u8be5\u53d8\u91cf\u4ee5sysfs attribute\u7684\u5f62\u5f0f\u5f00\u653e\u51fa\u6765 */ struct attribute { const char *name; umode_t mode; #ifdef CONFIG_DEBUG_LOCK_ALLOC bool ignore_lockdep:1; struct lock_class_key *key; struct lock_class_key skey; #endif }; kobject \u5bf9\u5e94 sys\u6587\u4ef6\u7cfb\u7edf \u4e0b\u7684\u4e00\u4e2a\u76ee\u5f55, \u800c attribute \u5c31\u5bf9\u5e94\u76ee\u5f55\u4e0b\u7684\u4e00\u4e2a\u6587\u4ef6, \u65b9\u4fbf\u7528\u6237\u7a7a\u95f4\u5bf9\u5c5e\u6027\u8fdb\u884c\u4fee\u6539","title":"2.5 kobject \u7684\u5c5e\u6027 struct attribute"},{"location":"chapter_5/8_kobjet_kset_ktype/#26","text":"\u53ef\u4ee5\u770b\u4e00\u4e0b kobject \u521b\u5efa\u7684\u65f6\u5019\uff0c\u4e0e ktype \u7684\u5173\u7cfb\uff0c\u8fd9\u6837\u7406\u89e3\u8d77\u6765\u66f4\u987a\uff1a kobject \u5728\u521b\u5efa\u7684\u65f6\u5019\uff0c\u9ed8\u8ba4\u8bbe\u7f6e kobj_type \u7684\u503c\u4e3a dynamic_kobj_ktype \uff0c\u901a\u5e38 kobject \u4f1a\u5d4c\u5165\u5728\u5176\u4ed6\u7ed3\u6784\u4e2d\u6765\u4f7f\u7528\uff0c\u56e0\u6b64\u5b83\u7684\u521d\u59cb\u5316\u8ddf\u7279\u5b9a\u7684\u7ed3\u6784\u76f8\u5173\uff0c\u5178\u578b\u7684\u6bd4\u5982 struct device \u548c struct device_driver \uff1b \u5728 /sys\u6587\u4ef6\u7cfb\u7edf \u4e2d\uff0c\u901a\u8fc7 echo/cat \u7684\u64cd\u4f5c\uff0c\u6700\u7ec8\u4f1a\u8c03\u7528\u5230 show/store \u51fd\u6570\uff0c\u800c\u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u653e\u7f6e\u5230\u9a71\u52a8\u7a0b\u5e8f\u4e2d\uff1b","title":"2.6 \u66f4\u8be6\u7ec6\u7684\u67b6\u6784\u56fe"},{"location":"chapter_5/8_kobjet_kset_ktype/#27","text":"\u4e3a\u4e86\u66f4\u5f62\u8c61\u7684\u8bf4\u660e\u8fd9\u51e0\u4e2a\u7ed3\u6784\u4f53\u7684\u5173\u7cfb\uff0c\u518d\u6765\u4e00\u5f20\u56fe\uff1a kset \u65e2\u662f kobject \u7684\u96c6\u5408\uff0c\u672c\u8eab\u53c8\u662f\u4e00\u4e2a kobject \uff0c\u8fdb\u800c\u53ef\u4ee5\u6dfb\u52a0\u5230\u5176\u4ed6\u7684\u96c6\u5408\u4e2d\uff0c\u4ece\u800c\u5c31\u53ef\u4ee5\u6784\u5efa\u6210\u590d\u6742\u7684\u62d3\u6251\u7ed3\u6784\uff0c\u6ee1\u8db3 /sys\u6587\u4ef6\u5939 \u4e0b\u7684\u6587\u4ef6\u7ec4\u7ec7\u9700\u6c42\uff1b \u5982\u679c\u53ea\u770b kset/kobject \u7684\u6570\u636e\u7ed3\u6784\u7ec4\u7ec7\uff0c\u53ef\u80fd\u8fd8\u662f\u4f1a\u8ff7\u60d1\uff0c\u5b83\u600e\u4e48\u8ddf Linux \u7684\u8bbe\u5907\u6a21\u578b\u76f8\u5173\uff1f\u8fd9\u65f6\u5c31\u4e0d\u5f97\u4e0d\u63d0\u5230 Linux \u5185\u6838\u4e2d\u4e00\u4e2a\u5f88\u7cbe\u5999\u7684\u5b58\u5728 container_of \uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u6210\u5458\u53d8\u91cf\u7684\u5730\u5740\u6765\u83b7\u53d6\u6240\u5728\u7ed3\u6784\u7684\u5730\u5740\u4fe1\u606f\u3002\u524d\u6587\u63d0\u5230\u8fc7 kobject/kset \u7ed3\u6784\u672c\u8eab\u4e0d\u4f1a\u5355\u72ec\u4f7f\u7528\uff0c \u901a\u5e38\u90fd\u662f\u4f1a\u5d4c\u5957\u5728\u5176\u4ed6\u7ed3\u6784\u4e2d \uff0c\u65e2\u7136 kobjcet/kset \u80fd\u7ec4\u7ec7\u6210\u62d3\u6251\u7ed3\u6784\uff0c\u90a3\u4e48\u5305\u542b\u5b83\u4eec\u7684\u7ed3\u6784\u540c\u6837\u53ef\u4ee5\u6784\u5efa\u8fd9\u4e2a\u5173\u7cfb\uff0c\u56e0\u4e3a\u53ef\u4ee5\u901a\u8fc7 container_of \u5c31\u53ef\u4ee5\u627e\u5230\u7ed3\u6784\u4f53\u7684\u9996\u5730\u5740\u3002 \u7ed3\u6784\u4f53 A\u3001B\u3001C\u3001D\u3001E \u540c\u6837\u53ef\u4ee5\u6784\u5efa\u62d3\u6251\u7ed3\u6784\u5173\u7cfb\uff1b struct device \u548c struct device_driver \u7ed3\u6784\u4f53\u4e2d\u90fd\u5305\u542b\u4e86 struct kobject \uff0c\u800c struct bus_type \u7ed3\u6784\u4f53\u4e2d\u5305\u542b\u4e86 struct kset \u7ed3\u6784\uff0c\u8fd9\u4e2a\u4e5f\u5c31 \u5bf9\u5e94\u5230\u524d\u6587\u63d0\u5230\u7684\u8bbe\u5907\u548c\u9a71\u52a8\u90fd\u6dfb\u52a0\u5230\u603b\u7ebf\u4e0a\uff0c\u7531\u603b\u7ebf\u6765\u8d1f\u8d23\u5339\u914d \uff1b","title":"2.7 \u7ed3\u6784\u5173\u7cfb"},{"location":"chapter_5/8_kobjet_kset_ktype/#_4","text":"kobject/kset \u7684\u76f8\u5173\u4ee3\u7801\u6bd4\u8f83\u7b80\u5355\uff0c\u6bd5\u7adf\u5b83\u53ea\u662f\u4f5c\u4e3a\u4e00\u4e2a\u7ed3\u6784\u4f53\u5d4c\u5165\u5176\u4ed6 high-level \u7684\u7ed3\u6784\u4e2d\uff0c\u5145\u5f53\u7ebd\u5e26\u7684\u4f5c\u7528\u3002\u4e0d\u8fc7\uff0c\u6211\u8fd8\u662f\u7b80\u5355\u7684\u4e0a\u4e00\u5f20\u56fe\u5427\uff1a \u5b8c\u6210\u7684\u5de5\u4f5c\u57fa\u672c\u5c31\u662f\u5206\u914d\u7ed3\u6784\u4f53\uff0c\u521d\u59cb\u5316\u5404\u4e2a\u7ed3\u6784\u4f53\u5b57\u6bb5\uff0c\u6784\u5efa\u62d3\u6251\u5173\u7cfb\uff08\u4e3b\u8981\u662f\u6dfb\u52a0\u5230 kset \u7684 list \u4e2d\uff0c parent \u7684\u6307\u5411\u7b49\uff09\u7b49\uff0c\u770b\u61c2\u4e86\u7ed3\u6784\u4f53\u7684\u7ec4\u7ec7\uff0c\u8fd9\u90e8\u5206\u7684\u4ee3\u7801\u7406\u89e3\u8d77\u6765\u5c31\u5f88\u8f7b\u677e\u4e86\uff1b","title":"\u4e09 \u6d41\u7a0b\u5206\u6790"},{"location":"chapter_5/8_kobjet_kset_ktype/#kobjectksetktype-linux","text":"","title":"\u56db \u4e00\u4e2a\u4f7f\u7528 kobject/kset/ktype \u7684\u4f8b\u5b50\uff08Linux \u9a71\u52a8\u7684\u5e38\u7528\u624b\u6cd5)"},{"location":"chapter_5/8_kobjet_kset_ktype/#41","text":"#include <linux/kernel.h> #include <linux/module.h> #include <linux/slab.h> #include <linux/kobject.h> //\u81ea\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\uff0c\u5305\u542b\u4e86struct kobject\u5b50\u7ed3\u6784 struct test_kobj { int value; struct kobject kobj; }; //\u81ea\u5b9a\u4e49\u4e2a\u5c5e\u6027\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u4e86struct attribute\u7ed3\u6784 struct test_kobj_attribute { struct attribute attr; ssize_t (*show)(struct test_kobj *obj, struct test_kobj_attribute *attr, char *buf); ssize_t (*store)(struct test_kobj *obj, struct test_kobj_attribute *attr, const char *buf, size_t count); }; //\u58f0\u660e\u4e00\u4e2a\u5168\u5c40\u7ed3\u6784\u7528\u4e8e\u6d4b\u8bd5 struct test_kobj *obj; //\u7528\u4e8e\u521d\u59cb\u5316sysfs_ops\u4e2d\u7684\u51fd\u6570\u6307\u9488 static ssize_t test_kobj_attr_show(struct kobject *kobj, struct attribute *attr, char *buf) { struct test_kobj_attribute *test_kobj_attr; ssize_t ret = -EIO; test_kobj_attr = container_of(attr, struct test_kobj_attribute, attr); //\u56de\u8c03\u5230\u5177\u4f53\u7684\u5b9e\u73b0\u51fd\u6570 if (test_kobj_attr->show) ret = test_kobj_attr->show(container_of(kobj, struct test_kobj, kobj), test_kobj_attr, buf); return ret; } //\u7528\u4e8e\u521d\u59cb\u5316sysfs_ops\u4e2d\u7684\u51fd\u6570\u6307\u9488 static ssize_t test_kobj_attr_store(struct kobject *kobj, struct attribute *attr, const char *buf, size_t count) { struct test_kobj_attribute *test_kobj_attr; ssize_t ret = -EIO; test_kobj_attr = container_of(attr, struct test_kobj_attribute, attr); //\u56de\u8c03\u5230\u5177\u4f53\u7684\u5b9e\u73b0\u51fd\u6570 if (test_kobj_attr->store) ret = test_kobj_attr->store(container_of(kobj, struct test_kobj, kobj), test_kobj_attr, buf, count); return ret; } //\u7528\u4e8e\u521d\u59cb\u5316kobj_ktype const struct sysfs_ops test_kobj_sysfs_ops = { .show = test_kobj_attr_show, .store = test_kobj_attr_store, }; //\u7528\u4e8e\u521d\u59cb\u5316kobj_ktype\uff0c\u6700\u7ec8\u7528\u4e8e\u91ca\u653ekobject void obj_release(struct kobject *kobj) { struct test_kobj *obj = container_of(kobj, struct test_kobj, kobj); printk(KERN_INFO \"test kobject release %s\\n\", kobject_name(&obj->kobj)); kfree(obj); } //\u5b9a\u4e49kobj_ktype\uff0c\u7528\u4e8e\u6307\u5b9akobject\u7684\u7c7b\u578b\uff0c\u521d\u59cb\u5316\u7684\u65f6\u5019\u4f7f\u7528 static struct kobj_type test_kobj_ktype = { .release = obj_release, .sysfs_ops = &test_kobj_sysfs_ops, }; //show\u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0 ssize_t name_show(struct test_kobj *obj, struct test_kobj_attribute *attr, char *buffer) { return sprintf(buffer, \"%s\\n\", kobject_name(&obj->kobj)); } //show\u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0 ssize_t value_show(struct test_kobj *obj, struct test_kobj_attribute *attr, char *buffer) { return sprintf(buffer, \"%d\\n\", obj->value); } //store\u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0 ssize_t value_store(struct test_kobj *obj, struct test_kobj_attribute *attr, const char *buffer, size_t size) { sscanf(buffer, \"%d\", &obj->value); return size; } //\u5b9a\u4e49\u5c5e\u6027\uff0c\u6700\u7ec8\u6ce8\u518c\u8fdbsysfs\u7cfb\u7edf struct test_kobj_attribute name_attribute = __ATTR(name, 0664, name_show, NULL); struct test_kobj_attribute value_attribute = __ATTR(value, 0664, value_show, value_store); //\u4f7f\u7528__ATTR\u5b8f,\u5b9a\u4e49\u4e00\u4e2a\u5c5e\u6027(\u5bf9\u5e94sysfs\u4e0b\u7684\u4e00\u4e2a\u6587\u4ef6)\u3001\u6743\u9650\u3001\u8bfb\u51fd\u6570\u3001\u5199\u51fd\u6570 struct attribute *test_kobj_attrs[] = { &name_attribute.attr, &value_attribute.attr, NULL, }; //\u5b9a\u4e49\u7ec4. \u6211\u4eec\u77e5\u9053\u6bcf\u4e2akobject\u5bf9\u5e94/sys\u76ee\u5f55\u4e0b\u7684\u4e00\u4e2a\u5b50\u76ee\u5f55, \u8be5\u5b50\u76ee\u5f55\u4e0b\u7684\u76ee\u5f55\u53ef\u4ee5\u7ee7\u7eed\u662fkobject(\u5982\u679c\u662fkobject\u90a3\u5fc5\u7136\u662f\u4e00\u4e2a\u5b50\u76ee\u5f55), \u4e5f\u53ef\u4ee5\u662f\u5355\u7eaf\u7684\u5b50\u76ee\u5f55(\u6ca1\u6709kobject\u4e0e\u4e4b\u5bf9\u5e94), \u90a3\u4e48\u5c31\u53ef\u4ee5\u91c7\u7528attribute_group\u6765\u5b9e\u73b0 struct attribute_group test_kobj_group = { .name = \"test_kobj_group\", .attrs = test_kobj_attrs, }; //\u6a21\u5757\u521d\u59cb\u5316\u51fd\u6570 static int __init test_kobj_init(void) { int retval; printk(KERN_INFO \"test_kobj_init\\n\"); printk(\"%s %s line %d test_kobj_init\\n\", __FILE__, __FUNCTION__, __LINE__); obj = kmalloc(sizeof(struct test_kobj), GFP_KERNEL); if (!obj) { return -ENOMEM; } obj->value = 1; memset(&obj->kobj, 0, sizeof(struct kobject)); //\u6dfb\u52a0\u8fdbsysfs\u7cfb\u7edf kobject_init_and_add(&obj->kobj, &test_kobj_ktype, NULL, \"test_kobj\"); //\u5728sys\u6587\u4ef6\u5939\u4e0b\u521b\u5efa\u6587\u4ef6 retval = sysfs_create_files(&obj->kobj, (const struct attribute **)test_kobj_attrs); if (retval) { kobject_put(&obj->kobj); return retval; } //\u5728sys\u6587\u4ef6\u5939\u4e0b\u521b\u5efagroup retval = sysfs_create_group(&obj->kobj, &test_kobj_group); if (retval) { kobject_put(&obj->kobj); return retval; } return 0; } //\u6a21\u5757\u6e05\u7406\u51fd\u6570 static void __exit test_kobj_exit(void) { printk(KERN_INFO \"test_kobj_exit\\n\"); printk(\"%s %s line %d test_kobj_exit\\n\", __FILE__, __FUNCTION__, __LINE__); kobject_del(&obj->kobj); kobject_put(&obj->kobj); return; } module_init(test_kobj_init); module_exit(test_kobj_exit); MODULE_AUTHOR(\"LoyenWang\"); MODULE_LICENSE(\"GPL\");","title":"4.1 \u4ee3\u7801"},{"location":"chapter_5/8_kobjet_kset_ktype/#42-makefile","text":"ifneq ($(KERNELRELEASE),) obj-m:=test_kobject.o else KERDIR := /lib/modules/$(shell uname -r)/build PWD:=$(shell pwd) all: make -C $(KERDIR) M=$(PWD) modules clean: rm -f *.ko *.o *.symvers *.cmd *.cmd.o modules.* *.mod.c endif Makefile \u6ca1\u6709\u592a\u591a\u597d\u8bf4\u7684\uff0c\u6ce8\u610f Tab \u7684\u4f7f\u7528\uff0c\u5426\u5219\u5bb9\u6613\u51fa\u9519\uff1b","title":"4.2 Makefile"},{"location":"chapter_5/8_kobjet_kset_ktype/#43","text":"\u5728 /sys \u76ee\u5f55\u4e0b\u521b\u5efa\u4e86 test_kobj \u6587\u4ef6\u5939\uff0c\u5728\u8be5\u6587\u4ef6\u5939\u4e0b\u9664\u4e86 name \u548c value \u5916\uff0c\u8fd8\u6709\u4e00\u4e2a test_kobj_group \u7684\u5b50\u6587\u4ef6\u5939\uff1b \u53ef\u4ee5\u901a\u8fc7 cat/echo \u7684\u64cd\u4f5c\uff0c\u6765\u64cd\u4f5c name \u548c value \uff0c\u5206\u522b\u4f1a\u8c03\u7528\u5230\u5e95\u5c42\u7684 xxx_show \u548c xxx_store \u51fd\u6570\uff1b \u5bf9\u7740\u4ee3\u7801\u770b\u8fd9\u4e2a\u56fe\uff0c\u4e00\u76ee\u4e86\u7136\uff1b","title":"4.3 \u6d4b\u8bd5\u7ed3\u679c"},{"location":"chapter_5/8_kobjet_kset_ktype/#44","text":"Linux \u4e0b\u6dfb\u52a0\u81ea\u5df1\u7684 sysfs \u63a5\u53e3 Linux \u9a71\u52a8 | \u5728\u9a71\u52a8\u4e2d\u521b\u5efa sysfs \u63a5\u53e3 Linux \u4e3a\u4ec0\u4e48\u6709\u4e9b\u9a71\u52a8\u5fc5\u987b\u7528 sysfs sysfs \u53ef\u4ee5\u5c06\u8bbe\u5907\u5c5e\u6027\u76f4\u63a5\u5c55\u793a\u7ed9\u7528\u6237\u7a7a\u95f4,\u53ef\u4ee5\u5728\u63a7\u5236\u53f0\u548c shell \u811a\u672c\u4e0a\u76f4\u63a5\u548c\u7528\u6237\u7a7a\u95f4\u8fdb\u884c\u4ea4\u4e92, \u800c ioctl \u9700\u8981\u7f16\u5199\u4e2a c \u7a0b\u5e8f\u624d\u80fd\u8fd0\u884c\u3002\u56e0\u6b64\u5728\u8fd9\u65b9\u9762 sysfs \u66f4\u5408\u9002\u3002","title":"4.4 \u66f4\u591a\u4f8b\u5b50"},{"location":"chapter_5/8_kobjet_kset_ktype/#_5","text":"linux \u8bbe\u5907\u6a21\u578b\u4e4b kset/kobj/ktype \u5206\u6790","title":"\u4e94 \u53c2\u8003\u6587\u6863"},{"location":"chapter_5/9_io_uring/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3 Linux io_uring \u6280\u672f \u4e00 \u662f\u4ec0\u4e48 io_uring \u662f 2019 \u5e74 Linux 5.1 \u5185\u6838\u9996\u6b21\u5f15\u5165\u7684\u9ad8\u6027\u80fd\u5f02\u6b65 I/O \u6846\u67b6\u3002 io_uring \u6700\u5927\u7684\u8d21\u732e\u5728\u4e8e\uff1a \u7edf\u4e00\u4e86 Linux \u5f02\u6b65 I/O \u6846\u67b6 Linux AIO \u53ea\u652f\u6301 direct I/O \u6a21\u5f0f\u7684 \u5b58\u50a8\u6587\u4ef6\uff08storage file\uff09\uff0c\u800c\u4e14\u4e3b\u8981\u7528\u5728 \u6570\u636e\u5e93\u8fd9\u4e00\u7ec6\u5206\u9886\u57df\uff1b io_uring \u652f\u6301\u5b58\u50a8\u6587\u4ef6\u548c\u7f51\u7edc\u6587\u4ef6\uff08network sockets\uff09\uff0c\u4e5f\u652f\u6301\u66f4\u591a\u7684\u5f02\u6b65\u7cfb\u7edf\u8c03\u7528 \uff08accept/openat/stat/...\uff09\uff0c\u800c\u975e\u4ec5\u9650\u4e8e read/write \u7cfb\u7edf\u8c03\u7528\u3002 \u5728 \u8bbe\u8ba1\u4e0a\u662f\u771f\u6b63\u7684\u5f02\u6b65 I/O\uff0c\u4f5c\u4e3a\u5bf9\u6bd4\uff0cLinux AIO \u867d\u7136\u4e5f \u662f\u5f02\u6b65\u7684\uff0c\u4f46\u4ecd\u7136\u53ef\u80fd\u4f1a\u963b\u585e\uff0c\u67d0\u4e9b\u60c5\u51b5\u4e0b\u7684\u884c\u4e3a\u4e5f\u65e0\u6cd5\u9884\u6d4b\uff1b \u7075\u6d3b\u6027\u548c\u53ef\u6269\u5c55\u6027 \u975e\u5e38\u597d\uff0c\u751a\u81f3\u80fd\u57fa\u4e8e io_uring \u91cd\u5199\u6240\u6709\u7cfb\u7edf\u8c03\u7528\uff0c\u800c Linux AIO \u8bbe\u8ba1\u65f6\u5c31\u6ca1\u8003\u8651\u6269\u5c55\u6027\u3002 \u548c eBPF \u7684\u4e0d\u540c\u4e4b\u5904 eBPF \u4e5f\u7b97\u662f\u5f02\u6b65\u6846\u67b6\uff08\u4e8b\u4ef6\u9a71\u52a8\uff09\uff0c\u4f46\u4e0e io_uring \u6ca1\u6709\u672c\u8d28\u8054\u7cfb\uff0c\u4e8c\u8005\u5c5e\u4e8e\u4e0d\u540c\u5b50\u7cfb\u7edf\uff0c \u5e76\u4e14\u5728\u6a21\u578b\u4e0a\u6709\u4e00\u4e2a\u672c\u8d28\u533a\u522b\uff1a eBPF \u5bf9\u7528\u6237\u662f\u900f\u660e\u7684\uff0c\u53ea\u9700\u5347\u7ea7\u5185\u6838\uff08\u5230\u5408\u9002\u7684\u7248\u672c\uff09\uff0c \u5e94\u7528\u7a0b\u5e8f\u65e0\u9700\u4efb\u4f55\u6539\u9020\uff1b io_uring \u63d0\u4f9b\u4e86 \u65b0\u7684\u7cfb\u7edf\u8c03\u7528\u548c\u7528\u6237\u7a7a\u95f4 API\uff0c\u56e0\u6b64 \u9700\u8981\u5e94\u7528\u7a0b\u5e8f\u505a\u6539\u9020\u3002 \u4e8c \u4e3a\u4ec0\u4e48 \u4f18\u52bf \u9488\u5bf9\u6ca1\u6709\u4f7f\u7528 Linux AIO \u7684\u5e94\u7528\uff0c \u80fd\u663e\u7740\u52a0\u901f I/O \u5bc6\u96c6\u578b\u5e94\u7528\u7684\u6027\u80fd \u3002\u4f46\u5982\u679c\u4f60\u7684\u5e94\u7528\u5df2\u7ecf\u5728\u4f7f\u7528\u4f20\u7edf Linux AIO \u4e86\uff0c\u5e76\u4e14\u4f7f\u7528\u65b9\u5f0f\u6070\u5f53\uff0c \u90a3 io_uring \u5e76\u4e0d\u4f1a\u5e26\u6765\u592a\u5927\u7684\u6027\u80fd\u63d0\u5347\u3002 \u6839\u636e\u6d4b\u8bd5\uff0c\u5373\u4fbf\u6253\u5f00\u9ad8\u7ea7\u7279\u6027\uff0c\u4e5f\u53ea\u6709 5%\u3002\u9664\u975e\u4f60\u771f\u7684\u9700\u8981\u8fd9 5% \u7684\u989d\u5916\u6027\u80fd\uff0c\u5426\u5219 \u5207\u6362 \u6210 io_uring \u4ee3\u4ef7\u53ef\u80fd\u4e5f\u633a\u5927\uff0c\u56e0\u4e3a\u8981\u91cd\u5199\u5e94\u7528\u6765\u9002\u914d io_uring\uff08\u6216\u8005\u8ba9\u4f9d\u8d56\u7684\u5e73\u53f0\u6216\u6846\u67b6\u53bb\u9002\u914d\uff0c\u603b\u4e4b\u9700\u8981\u6539\u4ee3\u7801\uff09 \u968f\u7740\u8bbe\u5907\u8d8a\u6765\u8d8a\u5feb\uff0c \u4e2d\u65ad\u9a71\u52a8\uff08interrupt-driven\uff09\u6a21\u5f0f \u6548\u7387\u5df2\u7ecf\u4f4e\u4e8e \u8f6e\u8be2\u6a21\u5f0f\uff08polling for completions\uff09 \u2014\u2014 \u8fd9\u4e5f\u662f\u9ad8\u6027\u80fd\u9886\u57df\u6700\u5e38\u89c1\u7684\u4e3b\u9898\u4e4b\u4e00\u3002 \u5b58\u91cf Linux AIO \u6846\u67b6\u7684\u95ee\u9898\u70b9 \u53ea\u652f\u6301 O_DIRECT \u6587\u4ef6\uff0c\u56e0\u6b64 \u5bf9\u5e38\u89c4\u7684\u975e\u6570\u636e\u5e93\u5e94\u7528\uff08normal, non-database applications\uff09 \u51e0\u4e4e\u662f\u65e0\u7528\u7684\uff1b \u63a5\u53e3\u5728 \u8bbe\u8ba1\u65f6\u5e76\u672a\u8003\u8651\u6269\u5c55\u6027\u3002\u867d\u7136\u53ef\u4ee5\u6269\u5c55 \u2014\u2014 \u6211\u4eec\u4e5f\u786e\u5b9e\u8fd9\u4e48\u505a\u4e86 \u2014\u2014 \u4f46\u6bcf\u52a0\u4e00\u4e2a\u4e1c\u897f\u90fd\u76f8\u5f53\u590d\u6742\uff1b \u867d\u7136\u4ece \u6280\u672f\u4e0a\u8bf4\u63a5\u53e3\u662f\u975e\u963b\u585e\u7684\uff0c\u4f46\u5b9e\u9645\u4e0a\u6709\u5f88\u591a\u53ef\u80fd\u7684\u539f\u56e0\u90fd\u4f1a\u5bfc\u81f4\u5b83\u963b\u585e\uff0c\u800c\u4e14\u5f15\u53d1\u7684\u65b9\u5f0f\u96be\u4ee5\u9884\u6599\u3002 \u4e09 \u600e\u4e48\u529e \u539f\u7406\u53ca\u6838\u5fc3\u6570\u636e\u7ed3\u6784\uff1aSQ/CQ/SQE/CQE \u6bcf\u4e2a io_uring \u5b9e\u4f8b\u90fd\u6709 \u4e24\u4e2a\u73af\u5f62\u961f\u5217\uff08ring\uff09\uff0c\u5728\u5185\u6838\u548c\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u5171\u4eab\uff1a \u63d0\u4ea4\u961f\u5217\uff1asubmission queue (SQ) \u5b8c\u6210\u961f\u5217\uff1acompletion queue (CQ) 1. \u51cf\u5c11\u7cfb\u7edf\u8c03\u7528 \u7531\u4e8e\u8c03\u7528\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u4f1a\u4ece\u7528\u6237\u6001\u5207\u6362\u5230\u5185\u6838\u6001\uff0c\u4ece\u800c\u8fdb\u884c\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u800c\u4e0a\u4e0b\u6587\u5207\u6362\u4f1a\u6d88\u8017\u4e00\u5b9a\u7684 CPU \u65f6\u95f4\u3002 \u4f7f\u7528 read() \u548c write() \u7b49\u7cfb\u7edf\u8c03\u7528\u8fdb\u884c I/O \u64cd\u4f5c\u65f6\uff0c\u4f1a\u4ece\u7528\u6237\u6001\u5d4c\u5165\u5230\u5185\u6838\u6001\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a io_uring \u4e3a\u4e86 \u51cf\u5c11\u6216\u8005\u6452\u5f03\u7cfb\u7edf\u8c03\u7528 \uff0c\u91c7\u7528\u4e86\u7528\u6237\u6001\u4e0e\u5185\u6838\u6001 \u5171\u4eab\u5185\u5b58 \u7684\u65b9\u5f0f\u6765\u901a\u4fe1\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u7528\u6237\u8fdb\u7a0b\u53ef\u4ee5\u5411 \u5171\u4eab\u5185\u5b58 \u63d0\u4ea4\u8981\u53d1\u8d77\u7684 I/O \u64cd\u4f5c\uff0c\u800c\u5185\u6838\u7ebf\u7a0b\u53ef\u4ee5\u4ece \u5171\u4eab\u5185\u5b58 \u4e2d\u8bfb\u53d6 I/O \u64cd\u4f5c\uff0c\u5e76\u4e14\u8fdb\u884c\u76f8\u5173\u7684 I/O \u64cd\u4f5c\u3002 \u7528\u6237\u6001\u5bf9\u5171\u4eab\u5185\u5b58\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\u662f\u4e0d\u9700\u8981\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\u7684\uff0c\u6240\u4ee5\u4e0d\u4f1a\u53d1\u751f\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u60c5\u51b5\u3002 2. \u63d0\u4ea4\u961f\u5217\u4e0e\u5b8c\u6210\u961f\u5217 \u524d\u9762\u4ecb\u7ecd\u8fc7\uff0cio_uring \u901a\u8fc7\u7528\u6237\u6001\u4e0e\u5185\u6838\u6001\u5171\u4eab\u5185\u5b58\u7684\u65b9\u5f0f\uff0c\u6765\u514d\u53bb\u4e86\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\u53d1\u8d77 I/O \u64cd\u4f5c\u7684\u8fc7\u7a0b\u3002 io_uring \u4e3b\u8981\u521b\u5efa\u4e86 3 \u5757\u5171\u4eab\u5185\u5b58\uff1a \u63d0\u4ea4\u961f\u5217\uff08Submission Queue, SQ\uff09 \uff1a\u4e00\u6574\u5757\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\u5b58\u50a8\u7684\u73af\u5f62\u961f\u5217\uff0c\u7528\u4e8e\u5b58\u653e\u5c06\u6267\u884c I/O \u64cd\u4f5c\u7684\u6570\u636e\uff08\u6307\u5411\u63d0\u4ea4\u961f\u5217\u9879\u6570\u7ec4\u7684\u7d22\u5f15\uff09\u3002 \u5b8c\u6210\u961f\u5217\uff08Completion Queue, CQ\uff09 \uff1a\u4e00\u6574\u5757\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\u5b58\u50a8\u7684\u73af\u5f62\u961f\u5217\uff0c\u7528\u4e8e\u5b58\u653e I/O \u64cd\u4f5c\u5b8c\u6210\u540e\u8fd4\u56de\u7684\u7ed3\u679c\u3002 \u63d0\u4ea4\u961f\u5217\u9879\u6570\u7ec4\uff08Submission Queue Entry\uff0cSQE\uff09 \uff1a\u63d0\u4ea4\u961f\u5217\u4e2d\u7684\u4e00\u9879\u3002 \u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u5982\u4e0b\u56fe\u6240\u793a\uff1a 3. SQ \u7ebf\u7a0b \u524d\u9762\u4ecb\u7ecd\u4e86 io_uring \u600e\u4e48\u901a\u8fc7\u5171\u4eab \u63d0\u4ea4\u961f\u5217 \u548c \u5b8c\u6210\u961f\u5217 \u6765\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u4f46\u5e94\u7528\u7a0b\u5e8f\u5c06 I/O \u64cd\u4f5c\u63d0\u4ea4\u5230 \u63d0\u4ea4\u961f\u5217 \u540e\uff0c\u5185\u6838\u4ec0\u4e48\u65f6\u5019\u4ece \u63d0\u4ea4\u961f\u5217 \u4e2d\u83b7\u53d6\u8981\u8fdb\u884c\u7684 I/O \u64cd\u4f5c\uff0c\u5e76\u4e14\u53d1\u8d77 I/O \u8bf7\u6c42\u5462\uff1f \u5f53\u7528\u6237\u4f7f\u7528 SQPOLL \u6a21\u5f0f\uff08\u6307\u5b9a\u4e86 IORING_SETUP_SQPOLL \u6807\u5fd7\uff09\u521b\u5efa io_uring \u65f6\uff0c\u5185\u6838\u5c06\u4f1a\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a io_uring-sq \u7684\u5185\u6838\u7ebf\u7a0b\uff08\u79f0\u4e3a SQ \u7ebf\u7a0b\uff09\uff0c\u6b64\u5185\u6838\u7ebf\u7a0b\u4f1a\u4e0d\u65ad\u4ece \u63d0\u4ea4\u961f\u5217 \u4e2d\u8bfb\u53d6 I/O \u64cd\u4f5c\uff0c\u5e76\u4e14\u53d1\u8d77 I/O \u8bf7\u6c42\u3002 \u5f53 I/O \u8bf7\u6c42\u5b8c\u6210\u4ee5\u540e\uff0cSQ \u7ebf\u7a0b\u5c06\u4f1a\u628a I/O \u64cd\u4f5c\u7684\u7ed3\u679c\u5199\u5165\u5230 \u5b8c\u6210\u961f\u5217 \u4e2d\uff0c\u5e94\u7528\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u4ece \u5b8c\u6210\u961f\u5217 \u4e2d\u8bfb\u53d6 I/O \u64cd\u4f5c\u7684\u7ed3\u679c\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6211\u4eec\u7b80\u5355\u603b\u7ed3\u4e0b io_uring \u7684\u64cd\u4f5c\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65 \uff1a\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u5411 io_uring \u7684 \u63d0\u4ea4\u961f\u5217 \u63d0\u4ea4 I/O \u64cd\u4f5c\u3002 \u7b2c\u4e8c\u6b65 \uff1aSQ \u5185\u6838\u7ebf\u7a0b\u4ece \u63d0\u4ea4\u961f\u5217 \u4e2d\u8bfb\u53d6 I/O \u64cd\u4f5c\u3002 \u7b2c\u4e09\u6b65 \uff1aSQ \u5185\u6838\u7ebf\u7a0b\u53d1\u8d77 I/O \u8bf7\u6c42\u3002 \u7b2c\u56db\u6b65 \uff1aI/O \u8bf7\u6c42\u5b8c\u6210\u540e\uff0cSQ \u5185\u6838\u7ebf\u7a0b\u4f1a\u5c06 I/O \u8bf7\u6c42\u7684\u7ed3\u679c\u5199\u5165\u5230 io_uring \u7684 \u5b8c\u6210\u961f\u5217 \u4e2d\u3002 \u7b2c\u4e94\u6b65 \uff1a\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7\u4ece \u5b8c\u6210\u961f\u5217 \u4e2d\u8bfb\u53d6\u5230 I/O \u64cd\u4f5c\u7684\u7ed3\u679c\u3002 4. \u603b\u7ed3 io_uring \u4e3b\u8981\u901a\u8fc7\u7528\u6237\u6001\u4e0e\u5185\u6838\u6001\u5171\u4eab\u5185\u5b58\u7684\u9014\u5f84\uff0c\u6765\u6452\u5f03\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\u6765\u63d0\u4ea4 I/O \u64cd\u4f5c\u548c\u83b7\u53d6 I/O \u64cd\u4f5c\u7684\u7ed3\u679c\uff0c\u4ece\u800c\u907f\u514d\u4e86\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u60c5\u51b5\u3002 \u53e6\u5916\uff0c\u7531\u4e8e\u7528\u6237\u6001\u8fdb\u7a0b\u4e0e\u5185\u6838\u6001\u7ebf\u7a0b\u901a\u8fc7\u5171\u4eab\u5185\u5b58\u7684\u65b9\u5f0f\u901a\u4fe1\uff0c\u4ece\u800c\u907f\u514d\u4e86\u5185\u5b58\u62f7\u8d1d\u7684\u8fc7\u7a0b\uff0c\u63d0\u5347\u4e86 I/O \u64cd\u4f5c\u7684\u6027\u80fd\u3002 \u6240\u4ee5\uff0cio_uring \u4e3b\u8981\u901a\u8fc7\u4e24\u4e2a\u4f18\u5316\u70b9\u6765\u63d0\u5347 I/O \u64cd\u4f5c\u7684\u6027\u80fd\uff1a \u6452\u5f03\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\u6765\u63d0\u4ea4 I/O \u64cd\u4f5c\u548c\u83b7\u53d6 I/O \u64cd\u4f5c\u7ed3\u679c\u3002 \u51cf\u5c11\u7528\u6237\u6001\u4e0e\u5185\u6838\u6001\u4e4b\u95f4\u7684\u5185\u5b58\u62f7\u8d1d\u3002 \u53c2\u8003 Linux \u5f02\u6b65 I/O \u6846\u67b6 io_uring\uff1a\u57fa\u672c\u539f\u7406\u3001\u7a0b\u5e8f\u793a\u4f8b\u4e0e\u6027\u80fd\u538b\u6d4b \u4e00\u6587\u56fe\u89e3\u539f\u7406\uff5c Linux I/O \u795e\u5668\u4e4b io_uring","title":"\u7b2c\u516b\u7bc7 io_uring\u7814\u7a76\u548c\u603b\u7ed3"},{"location":"chapter_5/9_io_uring/#_1","text":"\u672c\u7bc7\u603b\u7ed3 Linux io_uring \u6280\u672f","title":"\u6982\u8ff0"},{"location":"chapter_5/9_io_uring/#_2","text":"io_uring \u662f 2019 \u5e74 Linux 5.1 \u5185\u6838\u9996\u6b21\u5f15\u5165\u7684\u9ad8\u6027\u80fd\u5f02\u6b65 I/O \u6846\u67b6\u3002 io_uring \u6700\u5927\u7684\u8d21\u732e\u5728\u4e8e\uff1a \u7edf\u4e00\u4e86 Linux \u5f02\u6b65 I/O \u6846\u67b6 Linux AIO \u53ea\u652f\u6301 direct I/O \u6a21\u5f0f\u7684 \u5b58\u50a8\u6587\u4ef6\uff08storage file\uff09\uff0c\u800c\u4e14\u4e3b\u8981\u7528\u5728 \u6570\u636e\u5e93\u8fd9\u4e00\u7ec6\u5206\u9886\u57df\uff1b io_uring \u652f\u6301\u5b58\u50a8\u6587\u4ef6\u548c\u7f51\u7edc\u6587\u4ef6\uff08network sockets\uff09\uff0c\u4e5f\u652f\u6301\u66f4\u591a\u7684\u5f02\u6b65\u7cfb\u7edf\u8c03\u7528 \uff08accept/openat/stat/...\uff09\uff0c\u800c\u975e\u4ec5\u9650\u4e8e read/write \u7cfb\u7edf\u8c03\u7528\u3002 \u5728 \u8bbe\u8ba1\u4e0a\u662f\u771f\u6b63\u7684\u5f02\u6b65 I/O\uff0c\u4f5c\u4e3a\u5bf9\u6bd4\uff0cLinux AIO \u867d\u7136\u4e5f \u662f\u5f02\u6b65\u7684\uff0c\u4f46\u4ecd\u7136\u53ef\u80fd\u4f1a\u963b\u585e\uff0c\u67d0\u4e9b\u60c5\u51b5\u4e0b\u7684\u884c\u4e3a\u4e5f\u65e0\u6cd5\u9884\u6d4b\uff1b \u7075\u6d3b\u6027\u548c\u53ef\u6269\u5c55\u6027 \u975e\u5e38\u597d\uff0c\u751a\u81f3\u80fd\u57fa\u4e8e io_uring \u91cd\u5199\u6240\u6709\u7cfb\u7edf\u8c03\u7528\uff0c\u800c Linux AIO \u8bbe\u8ba1\u65f6\u5c31\u6ca1\u8003\u8651\u6269\u5c55\u6027\u3002","title":"\u4e00 \u662f\u4ec0\u4e48"},{"location":"chapter_5/9_io_uring/#ebpf","text":"eBPF \u4e5f\u7b97\u662f\u5f02\u6b65\u6846\u67b6\uff08\u4e8b\u4ef6\u9a71\u52a8\uff09\uff0c\u4f46\u4e0e io_uring \u6ca1\u6709\u672c\u8d28\u8054\u7cfb\uff0c\u4e8c\u8005\u5c5e\u4e8e\u4e0d\u540c\u5b50\u7cfb\u7edf\uff0c \u5e76\u4e14\u5728\u6a21\u578b\u4e0a\u6709\u4e00\u4e2a\u672c\u8d28\u533a\u522b\uff1a eBPF \u5bf9\u7528\u6237\u662f\u900f\u660e\u7684\uff0c\u53ea\u9700\u5347\u7ea7\u5185\u6838\uff08\u5230\u5408\u9002\u7684\u7248\u672c\uff09\uff0c \u5e94\u7528\u7a0b\u5e8f\u65e0\u9700\u4efb\u4f55\u6539\u9020\uff1b io_uring \u63d0\u4f9b\u4e86 \u65b0\u7684\u7cfb\u7edf\u8c03\u7528\u548c\u7528\u6237\u7a7a\u95f4 API\uff0c\u56e0\u6b64 \u9700\u8981\u5e94\u7528\u7a0b\u5e8f\u505a\u6539\u9020\u3002","title":"\u548c eBPF \u7684\u4e0d\u540c\u4e4b\u5904"},{"location":"chapter_5/9_io_uring/#_3","text":"","title":"\u4e8c \u4e3a\u4ec0\u4e48"},{"location":"chapter_5/9_io_uring/#_4","text":"\u9488\u5bf9\u6ca1\u6709\u4f7f\u7528 Linux AIO \u7684\u5e94\u7528\uff0c \u80fd\u663e\u7740\u52a0\u901f I/O \u5bc6\u96c6\u578b\u5e94\u7528\u7684\u6027\u80fd \u3002\u4f46\u5982\u679c\u4f60\u7684\u5e94\u7528\u5df2\u7ecf\u5728\u4f7f\u7528\u4f20\u7edf Linux AIO \u4e86\uff0c\u5e76\u4e14\u4f7f\u7528\u65b9\u5f0f\u6070\u5f53\uff0c \u90a3 io_uring \u5e76\u4e0d\u4f1a\u5e26\u6765\u592a\u5927\u7684\u6027\u80fd\u63d0\u5347\u3002 \u6839\u636e\u6d4b\u8bd5\uff0c\u5373\u4fbf\u6253\u5f00\u9ad8\u7ea7\u7279\u6027\uff0c\u4e5f\u53ea\u6709 5%\u3002\u9664\u975e\u4f60\u771f\u7684\u9700\u8981\u8fd9 5% \u7684\u989d\u5916\u6027\u80fd\uff0c\u5426\u5219 \u5207\u6362 \u6210 io_uring \u4ee3\u4ef7\u53ef\u80fd\u4e5f\u633a\u5927\uff0c\u56e0\u4e3a\u8981\u91cd\u5199\u5e94\u7528\u6765\u9002\u914d io_uring\uff08\u6216\u8005\u8ba9\u4f9d\u8d56\u7684\u5e73\u53f0\u6216\u6846\u67b6\u53bb\u9002\u914d\uff0c\u603b\u4e4b\u9700\u8981\u6539\u4ee3\u7801\uff09 \u968f\u7740\u8bbe\u5907\u8d8a\u6765\u8d8a\u5feb\uff0c \u4e2d\u65ad\u9a71\u52a8\uff08interrupt-driven\uff09\u6a21\u5f0f \u6548\u7387\u5df2\u7ecf\u4f4e\u4e8e \u8f6e\u8be2\u6a21\u5f0f\uff08polling for completions\uff09 \u2014\u2014 \u8fd9\u4e5f\u662f\u9ad8\u6027\u80fd\u9886\u57df\u6700\u5e38\u89c1\u7684\u4e3b\u9898\u4e4b\u4e00\u3002","title":"\u4f18\u52bf"},{"location":"chapter_5/9_io_uring/#linux-aio","text":"\u53ea\u652f\u6301 O_DIRECT \u6587\u4ef6\uff0c\u56e0\u6b64 \u5bf9\u5e38\u89c4\u7684\u975e\u6570\u636e\u5e93\u5e94\u7528\uff08normal, non-database applications\uff09 \u51e0\u4e4e\u662f\u65e0\u7528\u7684\uff1b \u63a5\u53e3\u5728 \u8bbe\u8ba1\u65f6\u5e76\u672a\u8003\u8651\u6269\u5c55\u6027\u3002\u867d\u7136\u53ef\u4ee5\u6269\u5c55 \u2014\u2014 \u6211\u4eec\u4e5f\u786e\u5b9e\u8fd9\u4e48\u505a\u4e86 \u2014\u2014 \u4f46\u6bcf\u52a0\u4e00\u4e2a\u4e1c\u897f\u90fd\u76f8\u5f53\u590d\u6742\uff1b \u867d\u7136\u4ece \u6280\u672f\u4e0a\u8bf4\u63a5\u53e3\u662f\u975e\u963b\u585e\u7684\uff0c\u4f46\u5b9e\u9645\u4e0a\u6709\u5f88\u591a\u53ef\u80fd\u7684\u539f\u56e0\u90fd\u4f1a\u5bfc\u81f4\u5b83\u963b\u585e\uff0c\u800c\u4e14\u5f15\u53d1\u7684\u65b9\u5f0f\u96be\u4ee5\u9884\u6599\u3002","title":"\u5b58\u91cf Linux AIO \u6846\u67b6\u7684\u95ee\u9898\u70b9"},{"location":"chapter_5/9_io_uring/#_5","text":"","title":"\u4e09 \u600e\u4e48\u529e"},{"location":"chapter_5/9_io_uring/#sqcqsqecqe","text":"\u6bcf\u4e2a io_uring \u5b9e\u4f8b\u90fd\u6709 \u4e24\u4e2a\u73af\u5f62\u961f\u5217\uff08ring\uff09\uff0c\u5728\u5185\u6838\u548c\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u5171\u4eab\uff1a \u63d0\u4ea4\u961f\u5217\uff1asubmission queue (SQ) \u5b8c\u6210\u961f\u5217\uff1acompletion queue (CQ)","title":"\u539f\u7406\u53ca\u6838\u5fc3\u6570\u636e\u7ed3\u6784\uff1aSQ/CQ/SQE/CQE"},{"location":"chapter_5/9_io_uring/#1","text":"\u7531\u4e8e\u8c03\u7528\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u4f1a\u4ece\u7528\u6237\u6001\u5207\u6362\u5230\u5185\u6838\u6001\uff0c\u4ece\u800c\u8fdb\u884c\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u800c\u4e0a\u4e0b\u6587\u5207\u6362\u4f1a\u6d88\u8017\u4e00\u5b9a\u7684 CPU \u65f6\u95f4\u3002 \u4f7f\u7528 read() \u548c write() \u7b49\u7cfb\u7edf\u8c03\u7528\u8fdb\u884c I/O \u64cd\u4f5c\u65f6\uff0c\u4f1a\u4ece\u7528\u6237\u6001\u5d4c\u5165\u5230\u5185\u6838\u6001\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a io_uring \u4e3a\u4e86 \u51cf\u5c11\u6216\u8005\u6452\u5f03\u7cfb\u7edf\u8c03\u7528 \uff0c\u91c7\u7528\u4e86\u7528\u6237\u6001\u4e0e\u5185\u6838\u6001 \u5171\u4eab\u5185\u5b58 \u7684\u65b9\u5f0f\u6765\u901a\u4fe1\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u7528\u6237\u8fdb\u7a0b\u53ef\u4ee5\u5411 \u5171\u4eab\u5185\u5b58 \u63d0\u4ea4\u8981\u53d1\u8d77\u7684 I/O \u64cd\u4f5c\uff0c\u800c\u5185\u6838\u7ebf\u7a0b\u53ef\u4ee5\u4ece \u5171\u4eab\u5185\u5b58 \u4e2d\u8bfb\u53d6 I/O \u64cd\u4f5c\uff0c\u5e76\u4e14\u8fdb\u884c\u76f8\u5173\u7684 I/O \u64cd\u4f5c\u3002 \u7528\u6237\u6001\u5bf9\u5171\u4eab\u5185\u5b58\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\u662f\u4e0d\u9700\u8981\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\u7684\uff0c\u6240\u4ee5\u4e0d\u4f1a\u53d1\u751f\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u60c5\u51b5\u3002","title":"1. \u51cf\u5c11\u7cfb\u7edf\u8c03\u7528"},{"location":"chapter_5/9_io_uring/#2","text":"\u524d\u9762\u4ecb\u7ecd\u8fc7\uff0cio_uring \u901a\u8fc7\u7528\u6237\u6001\u4e0e\u5185\u6838\u6001\u5171\u4eab\u5185\u5b58\u7684\u65b9\u5f0f\uff0c\u6765\u514d\u53bb\u4e86\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\u53d1\u8d77 I/O \u64cd\u4f5c\u7684\u8fc7\u7a0b\u3002 io_uring \u4e3b\u8981\u521b\u5efa\u4e86 3 \u5757\u5171\u4eab\u5185\u5b58\uff1a \u63d0\u4ea4\u961f\u5217\uff08Submission Queue, SQ\uff09 \uff1a\u4e00\u6574\u5757\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\u5b58\u50a8\u7684\u73af\u5f62\u961f\u5217\uff0c\u7528\u4e8e\u5b58\u653e\u5c06\u6267\u884c I/O \u64cd\u4f5c\u7684\u6570\u636e\uff08\u6307\u5411\u63d0\u4ea4\u961f\u5217\u9879\u6570\u7ec4\u7684\u7d22\u5f15\uff09\u3002 \u5b8c\u6210\u961f\u5217\uff08Completion Queue, CQ\uff09 \uff1a\u4e00\u6574\u5757\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\u5b58\u50a8\u7684\u73af\u5f62\u961f\u5217\uff0c\u7528\u4e8e\u5b58\u653e I/O \u64cd\u4f5c\u5b8c\u6210\u540e\u8fd4\u56de\u7684\u7ed3\u679c\u3002 \u63d0\u4ea4\u961f\u5217\u9879\u6570\u7ec4\uff08Submission Queue Entry\uff0cSQE\uff09 \uff1a\u63d0\u4ea4\u961f\u5217\u4e2d\u7684\u4e00\u9879\u3002 \u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u5982\u4e0b\u56fe\u6240\u793a\uff1a","title":"2. \u63d0\u4ea4\u961f\u5217\u4e0e\u5b8c\u6210\u961f\u5217"},{"location":"chapter_5/9_io_uring/#3-sq","text":"\u524d\u9762\u4ecb\u7ecd\u4e86 io_uring \u600e\u4e48\u901a\u8fc7\u5171\u4eab \u63d0\u4ea4\u961f\u5217 \u548c \u5b8c\u6210\u961f\u5217 \u6765\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u4f46\u5e94\u7528\u7a0b\u5e8f\u5c06 I/O \u64cd\u4f5c\u63d0\u4ea4\u5230 \u63d0\u4ea4\u961f\u5217 \u540e\uff0c\u5185\u6838\u4ec0\u4e48\u65f6\u5019\u4ece \u63d0\u4ea4\u961f\u5217 \u4e2d\u83b7\u53d6\u8981\u8fdb\u884c\u7684 I/O \u64cd\u4f5c\uff0c\u5e76\u4e14\u53d1\u8d77 I/O \u8bf7\u6c42\u5462\uff1f \u5f53\u7528\u6237\u4f7f\u7528 SQPOLL \u6a21\u5f0f\uff08\u6307\u5b9a\u4e86 IORING_SETUP_SQPOLL \u6807\u5fd7\uff09\u521b\u5efa io_uring \u65f6\uff0c\u5185\u6838\u5c06\u4f1a\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a io_uring-sq \u7684\u5185\u6838\u7ebf\u7a0b\uff08\u79f0\u4e3a SQ \u7ebf\u7a0b\uff09\uff0c\u6b64\u5185\u6838\u7ebf\u7a0b\u4f1a\u4e0d\u65ad\u4ece \u63d0\u4ea4\u961f\u5217 \u4e2d\u8bfb\u53d6 I/O \u64cd\u4f5c\uff0c\u5e76\u4e14\u53d1\u8d77 I/O \u8bf7\u6c42\u3002 \u5f53 I/O \u8bf7\u6c42\u5b8c\u6210\u4ee5\u540e\uff0cSQ \u7ebf\u7a0b\u5c06\u4f1a\u628a I/O \u64cd\u4f5c\u7684\u7ed3\u679c\u5199\u5165\u5230 \u5b8c\u6210\u961f\u5217 \u4e2d\uff0c\u5e94\u7528\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u4ece \u5b8c\u6210\u961f\u5217 \u4e2d\u8bfb\u53d6 I/O \u64cd\u4f5c\u7684\u7ed3\u679c\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6211\u4eec\u7b80\u5355\u603b\u7ed3\u4e0b io_uring \u7684\u64cd\u4f5c\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65 \uff1a\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u5411 io_uring \u7684 \u63d0\u4ea4\u961f\u5217 \u63d0\u4ea4 I/O \u64cd\u4f5c\u3002 \u7b2c\u4e8c\u6b65 \uff1aSQ \u5185\u6838\u7ebf\u7a0b\u4ece \u63d0\u4ea4\u961f\u5217 \u4e2d\u8bfb\u53d6 I/O \u64cd\u4f5c\u3002 \u7b2c\u4e09\u6b65 \uff1aSQ \u5185\u6838\u7ebf\u7a0b\u53d1\u8d77 I/O \u8bf7\u6c42\u3002 \u7b2c\u56db\u6b65 \uff1aI/O \u8bf7\u6c42\u5b8c\u6210\u540e\uff0cSQ \u5185\u6838\u7ebf\u7a0b\u4f1a\u5c06 I/O \u8bf7\u6c42\u7684\u7ed3\u679c\u5199\u5165\u5230 io_uring \u7684 \u5b8c\u6210\u961f\u5217 \u4e2d\u3002 \u7b2c\u4e94\u6b65 \uff1a\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7\u4ece \u5b8c\u6210\u961f\u5217 \u4e2d\u8bfb\u53d6\u5230 I/O \u64cd\u4f5c\u7684\u7ed3\u679c\u3002","title":"3. SQ \u7ebf\u7a0b"},{"location":"chapter_5/9_io_uring/#4","text":"io_uring \u4e3b\u8981\u901a\u8fc7\u7528\u6237\u6001\u4e0e\u5185\u6838\u6001\u5171\u4eab\u5185\u5b58\u7684\u9014\u5f84\uff0c\u6765\u6452\u5f03\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\u6765\u63d0\u4ea4 I/O \u64cd\u4f5c\u548c\u83b7\u53d6 I/O \u64cd\u4f5c\u7684\u7ed3\u679c\uff0c\u4ece\u800c\u907f\u514d\u4e86\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u60c5\u51b5\u3002 \u53e6\u5916\uff0c\u7531\u4e8e\u7528\u6237\u6001\u8fdb\u7a0b\u4e0e\u5185\u6838\u6001\u7ebf\u7a0b\u901a\u8fc7\u5171\u4eab\u5185\u5b58\u7684\u65b9\u5f0f\u901a\u4fe1\uff0c\u4ece\u800c\u907f\u514d\u4e86\u5185\u5b58\u62f7\u8d1d\u7684\u8fc7\u7a0b\uff0c\u63d0\u5347\u4e86 I/O \u64cd\u4f5c\u7684\u6027\u80fd\u3002 \u6240\u4ee5\uff0cio_uring \u4e3b\u8981\u901a\u8fc7\u4e24\u4e2a\u4f18\u5316\u70b9\u6765\u63d0\u5347 I/O \u64cd\u4f5c\u7684\u6027\u80fd\uff1a \u6452\u5f03\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\u6765\u63d0\u4ea4 I/O \u64cd\u4f5c\u548c\u83b7\u53d6 I/O \u64cd\u4f5c\u7ed3\u679c\u3002 \u51cf\u5c11\u7528\u6237\u6001\u4e0e\u5185\u6838\u6001\u4e4b\u95f4\u7684\u5185\u5b58\u62f7\u8d1d\u3002","title":"4. \u603b\u7ed3"},{"location":"chapter_5/9_io_uring/#_6","text":"Linux \u5f02\u6b65 I/O \u6846\u67b6 io_uring\uff1a\u57fa\u672c\u539f\u7406\u3001\u7a0b\u5e8f\u793a\u4f8b\u4e0e\u6027\u80fd\u538b\u6d4b \u4e00\u6587\u56fe\u89e3\u539f\u7406\uff5c Linux I/O \u795e\u5668\u4e4b io_uring","title":"\u53c2\u8003"},{"location":"chapter_6/1_linux_buddy/","text":"\u6982\u8ff0 \u672c\u7bc7\u6587\u6863\u603b\u7ed3 Linux \u4f19\u4f34\u7cfb\u7edf \u4f19\u4f34\u7b97\u6cd5\u51fa\u73b0\u7684\u539f\u56e0 \u4e3a\u4e86\u89e3\u51b3\u5185\u5b58\u788e\u7247\u95ee\u9898 Linux \u4e2d\u91c7\u7528 4KB \u5927\u5c0f\u7684\u9875\u6846\u4f5c\u4e3a\u6807\u51c6\u7684\u5185\u5b58\u5206\u914d\u5355\u5143\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u7ecf\u5e38\u9700\u8981\u5206\u914d\u4e00\u7ec4\u8fde\u7eed\u7684\u9875\u6846\uff0c\u800c\u9891\u7e41\u7684\u7533\u8bf7\u548c\u91ca\u653e\u4e0d\u540c\u5927\u5c0f\u7684\u8fde\u7eed\u9875\u6846\uff0c\u5fc5\u7136\u5bfc\u81f4\u5728\u5df2\u5206\u914d\u9875\u6846\u7684\u5185\u5b58\u5757\u4e2d\u5206\u6563\u4e86\u8bb8\u591a\u5c0f\u5757\u7684\u7a7a\u95f2\u9875\u6846\uff0c\u8fd9\u6837\uff0c\u5373\u4f7f\u8fd9\u4e9b\u9875\u6846\u662f\u7a7a\u95f2\u7684\uff0c\u5176\u4ed6\u9700\u8981\u5206\u914d\u8fde\u7eed\u9875\u6846\u7684\u5e94\u7528\u4e5f\u5f88\u96be\u5f97\u5230\u6ee1\u8db3.\u6240\u4ee5\uff0c\u5185\u6838\u5e94\u8be5\u4e3a\u5206\u914d\u4e00\u7ec4\u8fde\u7eed\u7684\u9875\u6846\u800c\u5efa\u7acb\u4e00\u79cd\u5065\u58ee\uff0c\u9ad8\u6821\u7684\u5206\u914d\u7b56\u7565\u3002\u8fd9\u6837\uff0c\u5185\u6838\u5c31\u5f15\u5165\u4e86\u4f19\u4f34\u7b97\u6cd5\u3002 \u4f19\u4f34\u7b97\u6cd5\u7684\u539f\u7406 Buddy \u7684\u5b9a\u4e49 \u8fd9\u91cc\u7ed9\u51fa\u4f19\u4f34\u7684\u6982\u5ff5\uff0c\u6ee1\u8db3\u4ee5\u4e0b\u4e09\u4e2a\u6761\u4ef6\u7684\u79f0\u4e3a\u4f19\u4f34(Buddy)\uff1a 1\uff09\u4e24\u4e2a\u5757\u5927\u5c0f\u76f8\u540c\uff1b 2\uff09\u4e24\u4e2a\u5757\u5730\u5740\u8fde\u7eed\uff1b 3\uff09\u4e24\u4e2a\u5757\u5fc5\u987b\u662f\u540c\u4e00\u4e2a\u5927\u5757\u4e2d\u5206\u79bb\u51fa\u6765\u7684\uff1b \u90a3\u4e48\u7ed9\u5b9a\u4e00\u4e2a i \u53f7\u5185\u5b58\u9875\uff0c\u600e\u4e48\u627e\u5230\u4ed6\u7684\u4f19\u4f34\u5185\u5b58\u9875\u5462\uff1f\u901a\u8fc7\u89c2\u5bdf\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u9875\u9762\u53f7\u662f\u590d\u6570\u7684\uff0c\u90a3\u4e48\u4ed6\u7684\u4f19\u4f34\u5185\u5b58\u9875\u8981\u52a0 1\u3002\u5982\u679c\u9875\u9762\u53f7\u662f\u5355\u6570\u7684\uff0c\u90a3\u4e48\u4ed6\u7684\u4f19\u4f34\u5185\u5b58\u9875\u8981\u51cf 1\u3002\u6240\u4ee5\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u4e00\u4e2a\u9875\u9762\u53f7\u4e3a i \u7684\u5185\u5b58\u9875\uff0c\u4ed6\u7684\u4f19\u4f34\u5185\u5b58\u9875\u53f7\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u7684\u4ee3\u7801\u83b7\u5f97\uff1a if (i & 1) { buddy = i - 1 } else { buddy = i + 1 } Buddy \u7b97\u6cd5\u7684\u5206\u914d\u539f\u7406\uff1a \u5728\u540c\u4e00\u4e2a zone \u4e2d, Linux \u628a\u6240\u6709\u7684\u7a7a\u95f2\u9875\u6846\u5206\u7ec4\u4e3a 11 \u4e2a\u5757\u94fe\u8868\uff0c\u6bcf\u4e2a\u94fe\u8868\u4e0a\u7684\u9875\u6846\u5757\u662f\u56fa\u5b9a\u7684\u3002\u5728\u7b2c i \u6761\u94fe\u8868\u4e2d\u6bcf\u4e2a\u9875\u6846\u5757\u90fd\u5305\u542b 2 \u7684 i \u6b21\u65b9\u4e2a\u8fde\u7eed\u9875\uff0c\u5176\u4e2d i \u79f0\u4e3a\u5206\u914d\u9636\u3002\u4e0b\u9762\u4ee5 2 \u4e2a\u4f8b\u5b50\uff0c\u8bb2\u8ff0\u4f19\u4f34\u7b97\u6cd5\u7684\u601d\u60f3\uff1a \u4f8b\u5b50 1 \u5047\u8bbe\u8981\u7533\u8bf7\u4e00\u4e2a 256 \u4e2a\u9875\uff0c\u5148\u4ece 256 \u4e2a\u9875\u6846\u7684\u94fe\u8868\u4e2d\u67e5\u627e\u7a7a\u95f2\u5757\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5c31\u53bb 512 \u4e2a\u9875\u6846\u7684\u94fe\u8868\u4e2d\u627e\uff0c\u627e\u5230\u4e86\u5219\u5c06\u9875\u6846\u5757\u5206\u4e3a 2 \u4e2a 256 \u4e2a\u9875\u6846\u7684\u5757\uff0c\u4e00\u4e2a\u5206\u914d\u7ed9\u5e94\u7528\uff0c\u53e6\u5916\u4e00\u4e2a\u79fb\u5230 256 \u4e2a\u9875\u6846\u7684\u94fe\u8868\u4e2d\u3002\u5982\u679c 512 \u4e2a\u9875\u6846\u7684\u94fe\u8868\u4e2d\u4ecd\u6ca1\u6709\u7a7a\u95f2\u5757\uff0c\u7ee7\u7eed\u5411 1024 \u4e2a\u9875\u6846\u7684\u94fe\u8868\u67e5\u627e\u3002\u5982\u679c 1024 \u5757\u5b58\u5728\uff0c\u5219\u5c06\u5176\u4e2d\u7684 256 \u9875\u6846\u4f5c\u4e3a\u8bf7\u6c42\u8fd4\u56de\uff0c\u5269\u4f59\u7684 768 \u5206\u6210 256 \u5757\u548c 512 \u5757\u5206\u522b\u63d2\u5230\u76f8\u5e94\u7684\u94fe\u8868\u4e2d\u3002\u5982\u679c\u4ecd\u7136\u6ca1\u6709\uff0c\u5219\u8fd4\u56de\u9519\u8bef\u3002 \u4f8b\u5b50 2 \u5047\u5982\u7cfb\u7edf\u9700\u8981 4(2\u76842\u6b21\u65b9) \u4e2a\u9875\u9762\u5927\u5c0f\u7684\u5185\u5b58\u5757\uff0c\u8be5\u7b97\u6cd5\u5c31\u5230 free_area[2] \u4e2d\u67e5\u627e\uff0c\u5982\u679c\u94fe\u8868\u4e2d\u6709\u7a7a\u95f2\u5757\uff0c\u5c31\u76f4\u63a5\u4ece\u4e2d\u6458\u4e0b\u5e76\u5206\u914d\u51fa\u53bb\u3002\u5982\u679c\u6ca1\u6709\uff0c\u7b97\u6cd5\u5c06\u987a\u7740\u6570\u7ec4\u5411\u4e0a\u67e5\u627e free_area[3] ,\u5982\u679c free_area[3] w \u4e2d\u6709\u7a7a\u95f2\u5757\uff0c\u5219\u5c06\u5176\u4ece\u94fe\u8868\u4e2d\u6458\u4e0b\uff0c\u5206\u6210\u7b49\u5927\u5c0f\u7684\u4e24\u90e8\u5206\uff0c\u524d\u56db\u4e2a\u9875\u9762\u4f5c\u4e3a\u4e00\u4e2a\u5757\u63d2\u5165 free_area[2]\uff0c\u540e 4 \u4e2a\u9875\u9762\u5206\u914d\u51fa\u53bb\uff0cfree_area[3]\u4e2d\u4e5f\u6ca1\u6709\uff0c\u5c31\u518d\u5411\u4e0a\u67e5\u627e\uff0c\u5982\u679c free_area[4]\u4e2d\u6709\uff0c\u5c31\u5c06\u8fd9 16(2 2 2*2)\u4e2a\u9875\u9762\u7b49\u5206\u6210\u4e24\u4efd\uff0c\u524d\u4e00\u534a\u6302\u5982 free_area[3]\u7684\u94fe\u8868\u5934\u90e8\uff0c\u540e\u4e00\u534a\u7684 8 \u4e2a\u9875\u7b49\u5206\u6210\u4e24\u7b49\u5206\uff0c\u524d\u4e00\u534a\u6302 free_area[2] \u7684\u94fe\u8868\u4e2d\uff0c\u540e\u4e00\u534a\u5206\u914d\u51fa\u53bb\u3002\u5047\u5982 free_area[4]\u4e5f\u6ca1\u6709\uff0c\u5219\u91cd\u590d\u4e0a\u9762\u7684\u8fc7\u7a0b\uff0c\u77e5\u9053\u5230\u8fbe free_area \u6570\u7ec4\u7684\u6700\u540e\uff0c\u5982\u679c\u8fd8\u6ca1\u6709\u5219\u653e\u5f03\u5206\u914d\u3002 \u6838\u5fc3\u7ed3\u6784\u4f53 Linux \u5185\u6838\u5c06\u7269\u7406\u5185\u5b58\u5212\u5206\u4e3a \u5185\u5b58\u7ba1\u7406\u533a(\u5373zone_t) \u8fdb\u884c\u7ba1\u7406\uff0c\u5185\u5b58\u7ba1\u7406\u533a\u4f7f\u7528\u7ed3\u6784\u4f53 zone_struct \u8868\u793a\u3002 \u800c\u5728\u5185\u5b58\u7ba1\u7406\u533a\u6570\u636e\u7ed3\u6784\u4e2d\u6709\u4e2a\u540d\u4e3a free_area \u7c7b\u578b\u4e3a free_area_t \u7684\u5b57\u6bb5\uff0c\u4ed6\u7684\u4f5c\u7528\u5c31\u662f\u7528\u6765\u7ba1\u7406\u5185\u5b58\u7ba1\u7406\u533a\u5185\u7684\u7a7a\u95f2\u7269\u7406\u5185\u5b58\u9875. \u5b9a\u4e49\u5982\u4e0b\uff1a #define MAX_ORDER 11 typedef struct free_area_struct { struct list_head free_list; unsigned int *map; } free_area_t; typedef struct zone_struct { ... free_area_t free_area[MAX_ORDER]; // \u7528\u4e8e\u4f19\u4f34\u5206\u914d\u7b97\u6cd5 ... } zone_t; \u5728\u65e7\u7248\u672c\u5185\u6838\u4e2d, \u662f struct free_area \u5728\u65b0\u7248\u672c\u5185\u6838\u4e2d, \u624d\u4f7f\u7528 typdef ... free_area_t \u5f62\u5f0f free_area \u662f\u4f19\u4f34\u7cfb\u7edf\u7b97\u6cd5\u7684\u6838\u5fc3\uff0c\u53ef\u4ee5\u770b\u5230 zone_t \u7684 free_area \u5c5e\u6027 \u6709 10 \u4e2a\u5143\u7d20\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u7c7b\u578b\u4e3a free_area_t \u7684\u7ed3\u6784\u4f53\uff0cfree_area_t \u7ed3\u6784\u7684 free_list \u5b57\u6bb5\u7528\u4e8e\u8fde\u63a5\u6709\u76f8\u540c\u9875\u9762\u4e2a\u6570\u7684\u5185\u5b58\u5757\u3002map \u5b57\u6bb5\u662f\u4e00\u4e2a\u4f4d\u56fe\uff0c\u7528\u4e8e\u8bb0\u5f55\u4f19\u4f34\u5185\u5b58\u5757\u7684\u4f7f\u7528\u60c5\u51b5\u3002 Linux \u5185\u6838\u4f7f\u7528 free_area[i] \u7ba1\u7406 2i \u4e2a\u5185\u5b58\u9875\u9762\u5927\u5c0f\u7684\u5185\u5b58\u5757\u5217\u8868\uff0c\u4f8b\u5982 free_area[0] \u5c31\u662f\u7ba1\u7406 1 \u4e2a\u5185\u5b58\u9875\u9762\u5927\u5c0f\u7684\u5185\u5b58\u5757(2\u76840\u6b21\u65b9 \u7b49\u4e8e 1)\uff1b\u800c free_area[1] \u5219\u7ba1\u7406 2 \u4e2a\u5185\u5b58\u9875\u9762\u5927\u5c0f\u7684\u5185\u5b58\u5757(2\u76841\u6b21\u65b9 \u7b49\u4e8e 2)\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u7ba1\u7406\u7269\u7406\u5185\u5b58\u9875\u7684 struct page \u7ed3\u6784\u4e2d\u6709\u4e2a list \u7684\u5b57\u6bb5\uff0c\u5185\u6838\u5c31\u662f\u901a\u8fc7\u8fd9\u4e2a\u5b57\u6bb5\u628a\u6709\u7740\u76f8\u540c\u4e2a\u6570\u9875\u9762\u7684\u5185\u5b58\u5757\u8fde\u6210\u4e00\u4e2a\u94fe\u8868\u7684\uff1a typedef struct page { struct list_head list; ... } mem_map_t; \u524d\u9762\u6211\u4eec\u8bf4\u8fc7\uff0c\u5728 free_area_t \u7ed3\u6784\u4e2d\u6709\u4e2a\u540d\u4e3a map \u7684\u5b57\u6bb5\uff0cmap \u5b57\u6bb5\u662f\u4e00\u4e2a\u4f4d\u56fe\uff0c\u6bcf\u4e2a\u4f4d\u8bb0\u5f55\u7740\u4e00\u5bf9\u4f19\u4f34\u5185\u5b58\u5757\u7684\u4f7f\u7528\u60c5\u51b5\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u4e00\u5bf9\u4f19\u4f34\u5185\u5b58\u5757\u4e2d\u7684\u67d0\u4e00\u4e2a\u5185\u5b58\u5757\u5728\u4f7f\u7528\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u4f4d\u5c31\u4e3a 1\uff0c\u5982\u679c\u4e24\u4e2a\u4f19\u4f34\u5185\u5b58\u5757\u90fd\u662f\u7a7a\u95f2\u6216\u8005\u4f7f\u7528\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u4f4d\u5c31\u4e3a 0\u3002\u5982\u4e0b\u56fe\uff1a \u4f7f\u7528\u4f4d\u56fe\u6765\u6807\u8bc6\u4f19\u4f34\u5185\u5b58\u5757\u4f7f\u7528\u60c5\u51b5\u7684\u539f\u56e0\u662f: \u5f53\u91ca\u653e\u5185\u5b58\u5757\u65f6, \u5982\u679c\u5bf9\u5e94\u7684\u4f4d\u662f 1 \u7684\u8bdd, \u90a3\u4e48\u8bf4\u660e\u53e6\u5916\u4e00\u4e2a\u4f19\u4f34\u5185\u5b58\u5757\u662f\u7a7a\u95f2\u72b6\u6001\u7684, \u6240\u4ee5\u91ca\u653e\u5f53\u524d\u5185\u5b58\u5757\u53ef\u4ee5\u8ddf\u5176\u4f19\u4f34\u5185\u5b58\u5757\u5408\u5e76\u6210\u4e00\u4e2a\u66f4\u5927\u7684\u5185\u5b58\u5757\u4e86. Buddy \u7b97\u6cd5\u7684\u91ca\u653e\u539f\u7406\uff1a \u5185\u5b58\u7684\u91ca\u653e\u662f\u5206\u914d\u7684\u9006\u8fc7\u7a0b\uff0c\u4e5f\u53ef\u4ee5\u770b\u4f5c\u662f\u4f19\u4f34\u7684\u5408\u5e76\u8fc7\u7a0b\u3002\u5f53\u91ca\u653e\u4e00\u4e2a\u5757\u65f6\uff0c\u5148\u5728\u5176\u5bf9\u5e94\u7684\u94fe\u8868\u4e2d\u8003\u67e5\u662f\u5426\u6709\u4f19\u4f34\u5b58\u5728\uff0c\u5982\u679c\u6ca1\u6709\u4f19\u4f34\u5757\uff0c\u5c31\u76f4\u63a5\u628a\u8981\u91ca\u653e\u7684\u5757\u6302\u5165\u94fe\u8868\u5934\uff1b\u5982\u679c\u6709\uff0c\u5219\u4ece\u94fe\u8868\u4e2d\u6458\u4e0b\u4f19\u4f34\uff0c\u5408\u5e76\u6210\u4e00\u4e2a\u5927\u5757\uff0c\u7136\u540e\u7ee7\u7eed\u8003\u5bdf\u5408\u5e76\u540e\u7684\u5757\u5728\u66f4\u5927\u4e00\u7ea7\u94fe\u8868\u4e2d\u662f\u5426\u6709\u4f19\u4f34\u5b58\u5728\uff0c\u76f4\u5230\u4e0d\u80fd\u5408\u5e76\u6216\u8005\u5df2\u7ecf\u5408\u5e76\u5230\u4e86\u6700\u5927\u7684\u5757\u3002 \u6574\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u4f4d\u56fe\u626e\u6f14\u4e86\u91cd\u8981\u7684\u89d2\u8272\uff0c\u5982\u56fe 2 \u6240\u793a\uff0c\u4f4d\u56fe\u7684\u67d0\u4e00\u4f4d\u5bf9\u5e94\u4e24\u4e2a\u4e92\u4e3a\u4f19\u4f34\u7684\u5757\uff0c\u4e3a 1 \u8868\u793a\u5176\u4e2d\u4e00\u5757\u5df2\u7ecf\u5206\u914d\u51fa\u53bb\u4e86\uff0c\u4e3a 0 \u8868\u793a\u4e24\u5757\u90fd\u7a7a\u95f2\u3002\u4f19\u4f34\u4e2d\u65e0\u8bba\u662f\u5206\u914d\u8fd8\u662f\u91ca\u653e\u90fd\u53ea\u662f\u76f8\u5bf9\u7684\u4f4d\u56fe\u8fdb\u884c\u5f02\u6216\u64cd\u4f5c\u3002\u5206\u914d\u5185\u5b58\u65f6\u5bf9\u4f4d\u56fe\u7684 \u662f\u4e3a\u91ca\u653e\u8fc7\u7a0b\u670d\u52a1\uff0c\u91ca\u653e\u8fc7\u7a0b\u6839\u636e\u4f4d\u56fe\u5224\u65ad\u4f19\u4f34\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u5bf9\u76f8\u5e94\u4f4d\u7684\u5f02\u6216\u64cd\u4f5c\u5f97 1\uff0c\u5219\u6ca1\u6709\u4f19\u4f34\u53ef\u4ee5\u5408\u5e76\uff0c\u5982\u679c\u5f02\u6216\u64cd\u4f5c\u5f97 0\uff0c\u5c31\u8fdb\u884c\u5408\u5e76\uff0c\u5e76\u4e14\u7ee7\u7eed\u6309\u8fd9\u79cd\u65b9\u5f0f\u5408\u5e76\u4f19\u4f34\uff0c\u76f4\u5230\u4e0d\u80fd\u5408\u5e76\u4e3a\u6b62\u3002 Node\u3001Zone\u3001free_area\u3001Page \u4e4b\u95f4\u7684\u5173\u7cfb \u4e0a\u56fe\u4e2d, \u6bcf\u4e00\u4e2a Memory \u90e8\u5206, \u5728\u5185\u6838\u4e2d\u4f7f\u7528 struct pg_data_t \u8868\u793a, \u5373\u662f\u4e00\u4e2a NUMA Node, \u5bf9\u4e8e UMA \u67b6\u6784 \u5176\u5b9e\u76f8\u5f53\u4e8e\u53ea\u6709\u4e00\u4e2a Node, \u5bf9\u4e8e NUMA \u67b6\u6784\u76f8\u5f53\u4e8e\u6709\u591a\u4e2a Node, \u591a\u4e2a Node \u5f62\u6210\u4e00\u4e2a\u94fe\u8868. \u6bcf\u4e2a Node \u4e0b\u9762, \u6709\u591a\u4e2a Zone, \u6bcf\u4e2a Zone \u5728\u5185\u6838\u4e2d\u4f7f\u7528 struct zone_t \u8868\u793a. \u6bcf\u4e2a Node \u4e0b\u6240\u6709\u7684\u7269\u7406 Page \u662f\u4e00\u4e2a\u6570\u7ec4. \u6bcf\u4e2a struct zone_t \u4e0b\u6709\u4e00\u4e2a free_area \u6570\u7ec4, \u8be5\u6570\u7ec4\u4e2d\u6709 11 \u4e2a\u5143\u7d20. \u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a struct free_area_t , \u6bcf\u4e2a free_area_t \u7528\u94fe\u8868\u5173\u8054\u4e86\u591a\u4e2a struct page , \u5e76\u4e14\u7b26\u5408 free_area[i] \u7ba1\u7406 2i \u4e2a\u5185\u5b58\u9875\u9762\u5927\u5c0f\u7684\u5185\u5b58\u5757\u5217\u8868. \u6bcf\u4e2a struct page \u662f\u4ee3\u8868 4KB \u5927\u5c0f\u7684\u5185\u5b58\u9875(\u9875\u6846), \u51e0\u4e2a page \u53ef\u4ee5\u6210\u4e3a\u4e00\u4e2a \u5185\u5b58\u5757 , \u5185\u6838\u5206\u914d\u7269\u7406\u5185\u5b58\u65f6, \u5fc5\u987b\u662f \u5185\u5b58\u5757 , \u800c\u4e14\u5fc5\u987b\u4ee5 2 \u7684\u51e0\u6b21\u65b9\u4e2a page \u5206\u914d \u5185\u5b58\u5757 , \u56e0\u6b64\u6700\u5c0f\u662f\u5206\u914d 2 \u7684 0 \u6b21\u65b9\u4e2a page \u7684 \u5185\u5b58\u5757 , \u5927\u5c0f\u4e3a 4KB. \u603b\u7ed3: (4 \u5c42\u67b6\u6784: Node\u3001Zone\u3001free_area\u3001Page) \u7cfb\u7edf\u5185\u6709\u4e00\u4e2a struct page_data_t \u94fe\u8868, \u5305\u542b\u4e86\u7cfb\u7edf\u4e0b\u6240\u6709\u7684 NUMA Node. \u4e00\u4e2a Node \u5305\u542b\u591a\u4e2a Zone(\u6bd4\u5982 ZONE_DMA\u3001ZONE_NORMAL\u3001ZONE_HIGHMEM) \u4e00\u4e2a Zone \u5305\u542b MAX_ORDER \u4e2a free_area, (MAX_ORDER \u662f\u5185\u6838\u4ee3\u7801\u91cc\u5b9a\u4e49\u7684\u5e38\u91cf 11, free_area[i] \u7ba1\u7406 2i \u4e2a\u5185\u5b58\u9875\u9762\u5927\u5c0f\u7684\u5185\u5b58\u5757\u94fe\u8868) \u6bcf\u4e2a frea_area \u6709\u4e00\u4e2a\u94fe\u8868,\u6bcf\u4e2a\u94fe\u8868\u662f\u591a\u4e2a\u5757\uff0c\u6bcf\u4e2a\u5757\u662f 2 \u4e2a\u6b21\u65b9\u4e2a Page\uff0c\u8fd9\u91cc\u7684\u6bcf\u4e2a\u5757\u6240\u6709\u5305\u542b\u7684 page \u5176\u7269\u7406\u4f4d\u7f6e\u90fd\u662f\u8fde\u7eed\u7684. \u6269\u5c55: \u5f53\u7136\u5982\u679c\u5185\u6838\u4ee3\u7801\u4ec5\u4ec5\u9700\u8981\u5c0f\u4e8e 4KB \u7684\u5185\u5b58\u65f6, \u7531\u8457\u540d\u7684 slab \u5206\u914d\u5c42\u89e3\u51b3. \u5185\u5b58\u9875\u5206\u7c7b \u7528\u6237\u8fdb\u7a0b\u7684\u5185\u5b58\u9875\u5206\u4e3a\u4e24\u79cd\uff1a anonymous pages\uff08\u533f\u540d\u9875\uff09 \u6bd4\u5982\u8fdb\u7a0b\u7684\u4ee3\u7801\u6bb5\u3001\u6620\u5c04\u7684\u6587\u4ef6\u90fd\u662f file-backed\uff0c\u800c\u8fdb\u7a0b\u7684\u5806\u3001\u6808\u90fd\u662f\u4e0d\u4e0e\u6587\u4ef6\u76f8\u5bf9\u5e94\u7684\u3001\u5c31\u5c5e\u4e8e\u533f\u540d\u9875\u3002 file-backed pages\uff08\u6587\u4ef6\u80cc\u666f\u9875\uff09 \u5bf9\u4e8e\u6709\u6587\u4ef6\u80cc\u666f\u7684\u9875\u9762\uff0c\u7a0b\u5e8f\u53bb\u8bfb\u6587\u4ef6\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 read \u4e5f\u53ef\u4ee5\u901a\u8fc7 mmap \u53bb\u8bfb\u3002\u5f53\u4f60\u901a\u8fc7\u4efb\u4f55\u4e00\u79cd\u65b9\u5f0f\u4ece\u78c1\u76d8\u8bfb\u6587\u4ef6\u65f6\uff0c\u5185\u6838\u90fd\u4f1a\u7ed9\u4f60\u7533\u8bf7\u4e00\u4e2a page cache\uff0c\u6765\u7f13\u5b58\u786c\u76d8\u4e0a\u7684\u5185\u5bb9\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u8bfb\u8fc7\u4e00\u904d\u7684\u6570\u636e\uff0c\u672c\u8fdb\u7a0b\u6216\u5176\u4ed6\u8fdb\u7a0b\u4e0b\u6b21\u518d\u8bfb\u7684\u65f6\u5019\u5c31\u76f4\u63a5\u4ece page cache \u91cc\u53bb\u62ff\uff0c\u5c31\u5f88\u5feb\u4e86\uff0c\u63d0\u5347\u7cfb\u7edf\u7684\u6574\u4f53\u6027\u80fd\u3002\u56e0\u6b64\u7528\u6237\u7684 read/write \u5b9e\u9645\u4e0a\u662f\u8ddf page cache \u7684\u76f8\u4e92\u62f7\u8d1d\u3002 file-backed pages \u5728\u5185\u5b58\u4e0d\u8db3\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u5199\u56de\u5bf9\u5e94\u7684\u786c\u76d8\u6587\u4ef6\u91cc\uff0c\u79f0\u4e3a page-out\uff0c\u4e0d\u9700\u8981\u7528\u5230\u4ea4\u6362\u533a(swap)\uff1b\u800c anonymous pages \u5728\u5185\u5b58\u4e0d\u8db3\u65f6\u5c31\u53ea\u80fd\u5199\u5230\u786c\u76d8\u4e0a\u7684\u4ea4\u6362\u533a(swap)\u91cc\uff0c\u79f0\u4e3a swap-out\u3002 \u53c2\u8003\u6587\u6863 \u53c2\u8003\u6587\u6863 1 \u53c2\u8003\u6587\u6863 2 \u53c2\u8003\u6587\u6863 3 Describing Physical Memory","title":"\u7b2c\u4e00\u7bc7 \u4f19\u4f34\u7cfb\u7edf\u4ecb\u7ecd"},{"location":"chapter_6/1_linux_buddy/#_1","text":"\u672c\u7bc7\u6587\u6863\u603b\u7ed3 Linux \u4f19\u4f34\u7cfb\u7edf","title":"\u6982\u8ff0"},{"location":"chapter_6/1_linux_buddy/#_2","text":"\u4e3a\u4e86\u89e3\u51b3\u5185\u5b58\u788e\u7247\u95ee\u9898 Linux \u4e2d\u91c7\u7528 4KB \u5927\u5c0f\u7684\u9875\u6846\u4f5c\u4e3a\u6807\u51c6\u7684\u5185\u5b58\u5206\u914d\u5355\u5143\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u7ecf\u5e38\u9700\u8981\u5206\u914d\u4e00\u7ec4\u8fde\u7eed\u7684\u9875\u6846\uff0c\u800c\u9891\u7e41\u7684\u7533\u8bf7\u548c\u91ca\u653e\u4e0d\u540c\u5927\u5c0f\u7684\u8fde\u7eed\u9875\u6846\uff0c\u5fc5\u7136\u5bfc\u81f4\u5728\u5df2\u5206\u914d\u9875\u6846\u7684\u5185\u5b58\u5757\u4e2d\u5206\u6563\u4e86\u8bb8\u591a\u5c0f\u5757\u7684\u7a7a\u95f2\u9875\u6846\uff0c\u8fd9\u6837\uff0c\u5373\u4f7f\u8fd9\u4e9b\u9875\u6846\u662f\u7a7a\u95f2\u7684\uff0c\u5176\u4ed6\u9700\u8981\u5206\u914d\u8fde\u7eed\u9875\u6846\u7684\u5e94\u7528\u4e5f\u5f88\u96be\u5f97\u5230\u6ee1\u8db3.\u6240\u4ee5\uff0c\u5185\u6838\u5e94\u8be5\u4e3a\u5206\u914d\u4e00\u7ec4\u8fde\u7eed\u7684\u9875\u6846\u800c\u5efa\u7acb\u4e00\u79cd\u5065\u58ee\uff0c\u9ad8\u6821\u7684\u5206\u914d\u7b56\u7565\u3002\u8fd9\u6837\uff0c\u5185\u6838\u5c31\u5f15\u5165\u4e86\u4f19\u4f34\u7b97\u6cd5\u3002","title":"\u4f19\u4f34\u7b97\u6cd5\u51fa\u73b0\u7684\u539f\u56e0"},{"location":"chapter_6/1_linux_buddy/#_3","text":"","title":"\u4f19\u4f34\u7b97\u6cd5\u7684\u539f\u7406"},{"location":"chapter_6/1_linux_buddy/#buddy","text":"\u8fd9\u91cc\u7ed9\u51fa\u4f19\u4f34\u7684\u6982\u5ff5\uff0c\u6ee1\u8db3\u4ee5\u4e0b\u4e09\u4e2a\u6761\u4ef6\u7684\u79f0\u4e3a\u4f19\u4f34(Buddy)\uff1a 1\uff09\u4e24\u4e2a\u5757\u5927\u5c0f\u76f8\u540c\uff1b 2\uff09\u4e24\u4e2a\u5757\u5730\u5740\u8fde\u7eed\uff1b 3\uff09\u4e24\u4e2a\u5757\u5fc5\u987b\u662f\u540c\u4e00\u4e2a\u5927\u5757\u4e2d\u5206\u79bb\u51fa\u6765\u7684\uff1b \u90a3\u4e48\u7ed9\u5b9a\u4e00\u4e2a i \u53f7\u5185\u5b58\u9875\uff0c\u600e\u4e48\u627e\u5230\u4ed6\u7684\u4f19\u4f34\u5185\u5b58\u9875\u5462\uff1f\u901a\u8fc7\u89c2\u5bdf\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u9875\u9762\u53f7\u662f\u590d\u6570\u7684\uff0c\u90a3\u4e48\u4ed6\u7684\u4f19\u4f34\u5185\u5b58\u9875\u8981\u52a0 1\u3002\u5982\u679c\u9875\u9762\u53f7\u662f\u5355\u6570\u7684\uff0c\u90a3\u4e48\u4ed6\u7684\u4f19\u4f34\u5185\u5b58\u9875\u8981\u51cf 1\u3002\u6240\u4ee5\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u4e00\u4e2a\u9875\u9762\u53f7\u4e3a i \u7684\u5185\u5b58\u9875\uff0c\u4ed6\u7684\u4f19\u4f34\u5185\u5b58\u9875\u53f7\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u7684\u4ee3\u7801\u83b7\u5f97\uff1a if (i & 1) { buddy = i - 1 } else { buddy = i + 1 }","title":"Buddy \u7684\u5b9a\u4e49"},{"location":"chapter_6/1_linux_buddy/#buddy_1","text":"\u5728\u540c\u4e00\u4e2a zone \u4e2d, Linux \u628a\u6240\u6709\u7684\u7a7a\u95f2\u9875\u6846\u5206\u7ec4\u4e3a 11 \u4e2a\u5757\u94fe\u8868\uff0c\u6bcf\u4e2a\u94fe\u8868\u4e0a\u7684\u9875\u6846\u5757\u662f\u56fa\u5b9a\u7684\u3002\u5728\u7b2c i \u6761\u94fe\u8868\u4e2d\u6bcf\u4e2a\u9875\u6846\u5757\u90fd\u5305\u542b 2 \u7684 i \u6b21\u65b9\u4e2a\u8fde\u7eed\u9875\uff0c\u5176\u4e2d i \u79f0\u4e3a\u5206\u914d\u9636\u3002\u4e0b\u9762\u4ee5 2 \u4e2a\u4f8b\u5b50\uff0c\u8bb2\u8ff0\u4f19\u4f34\u7b97\u6cd5\u7684\u601d\u60f3\uff1a","title":"Buddy \u7b97\u6cd5\u7684\u5206\u914d\u539f\u7406\uff1a"},{"location":"chapter_6/1_linux_buddy/#1","text":"\u5047\u8bbe\u8981\u7533\u8bf7\u4e00\u4e2a 256 \u4e2a\u9875\uff0c\u5148\u4ece 256 \u4e2a\u9875\u6846\u7684\u94fe\u8868\u4e2d\u67e5\u627e\u7a7a\u95f2\u5757\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5c31\u53bb 512 \u4e2a\u9875\u6846\u7684\u94fe\u8868\u4e2d\u627e\uff0c\u627e\u5230\u4e86\u5219\u5c06\u9875\u6846\u5757\u5206\u4e3a 2 \u4e2a 256 \u4e2a\u9875\u6846\u7684\u5757\uff0c\u4e00\u4e2a\u5206\u914d\u7ed9\u5e94\u7528\uff0c\u53e6\u5916\u4e00\u4e2a\u79fb\u5230 256 \u4e2a\u9875\u6846\u7684\u94fe\u8868\u4e2d\u3002\u5982\u679c 512 \u4e2a\u9875\u6846\u7684\u94fe\u8868\u4e2d\u4ecd\u6ca1\u6709\u7a7a\u95f2\u5757\uff0c\u7ee7\u7eed\u5411 1024 \u4e2a\u9875\u6846\u7684\u94fe\u8868\u67e5\u627e\u3002\u5982\u679c 1024 \u5757\u5b58\u5728\uff0c\u5219\u5c06\u5176\u4e2d\u7684 256 \u9875\u6846\u4f5c\u4e3a\u8bf7\u6c42\u8fd4\u56de\uff0c\u5269\u4f59\u7684 768 \u5206\u6210 256 \u5757\u548c 512 \u5757\u5206\u522b\u63d2\u5230\u76f8\u5e94\u7684\u94fe\u8868\u4e2d\u3002\u5982\u679c\u4ecd\u7136\u6ca1\u6709\uff0c\u5219\u8fd4\u56de\u9519\u8bef\u3002","title":"\u4f8b\u5b50 1"},{"location":"chapter_6/1_linux_buddy/#2","text":"\u5047\u5982\u7cfb\u7edf\u9700\u8981 4(2\u76842\u6b21\u65b9) \u4e2a\u9875\u9762\u5927\u5c0f\u7684\u5185\u5b58\u5757\uff0c\u8be5\u7b97\u6cd5\u5c31\u5230 free_area[2] \u4e2d\u67e5\u627e\uff0c\u5982\u679c\u94fe\u8868\u4e2d\u6709\u7a7a\u95f2\u5757\uff0c\u5c31\u76f4\u63a5\u4ece\u4e2d\u6458\u4e0b\u5e76\u5206\u914d\u51fa\u53bb\u3002\u5982\u679c\u6ca1\u6709\uff0c\u7b97\u6cd5\u5c06\u987a\u7740\u6570\u7ec4\u5411\u4e0a\u67e5\u627e free_area[3] ,\u5982\u679c free_area[3] w \u4e2d\u6709\u7a7a\u95f2\u5757\uff0c\u5219\u5c06\u5176\u4ece\u94fe\u8868\u4e2d\u6458\u4e0b\uff0c\u5206\u6210\u7b49\u5927\u5c0f\u7684\u4e24\u90e8\u5206\uff0c\u524d\u56db\u4e2a\u9875\u9762\u4f5c\u4e3a\u4e00\u4e2a\u5757\u63d2\u5165 free_area[2]\uff0c\u540e 4 \u4e2a\u9875\u9762\u5206\u914d\u51fa\u53bb\uff0cfree_area[3]\u4e2d\u4e5f\u6ca1\u6709\uff0c\u5c31\u518d\u5411\u4e0a\u67e5\u627e\uff0c\u5982\u679c free_area[4]\u4e2d\u6709\uff0c\u5c31\u5c06\u8fd9 16(2 2 2*2)\u4e2a\u9875\u9762\u7b49\u5206\u6210\u4e24\u4efd\uff0c\u524d\u4e00\u534a\u6302\u5982 free_area[3]\u7684\u94fe\u8868\u5934\u90e8\uff0c\u540e\u4e00\u534a\u7684 8 \u4e2a\u9875\u7b49\u5206\u6210\u4e24\u7b49\u5206\uff0c\u524d\u4e00\u534a\u6302 free_area[2] \u7684\u94fe\u8868\u4e2d\uff0c\u540e\u4e00\u534a\u5206\u914d\u51fa\u53bb\u3002\u5047\u5982 free_area[4]\u4e5f\u6ca1\u6709\uff0c\u5219\u91cd\u590d\u4e0a\u9762\u7684\u8fc7\u7a0b\uff0c\u77e5\u9053\u5230\u8fbe free_area \u6570\u7ec4\u7684\u6700\u540e\uff0c\u5982\u679c\u8fd8\u6ca1\u6709\u5219\u653e\u5f03\u5206\u914d\u3002","title":"\u4f8b\u5b50 2"},{"location":"chapter_6/1_linux_buddy/#_4","text":"Linux \u5185\u6838\u5c06\u7269\u7406\u5185\u5b58\u5212\u5206\u4e3a \u5185\u5b58\u7ba1\u7406\u533a(\u5373zone_t) \u8fdb\u884c\u7ba1\u7406\uff0c\u5185\u5b58\u7ba1\u7406\u533a\u4f7f\u7528\u7ed3\u6784\u4f53 zone_struct \u8868\u793a\u3002 \u800c\u5728\u5185\u5b58\u7ba1\u7406\u533a\u6570\u636e\u7ed3\u6784\u4e2d\u6709\u4e2a\u540d\u4e3a free_area \u7c7b\u578b\u4e3a free_area_t \u7684\u5b57\u6bb5\uff0c\u4ed6\u7684\u4f5c\u7528\u5c31\u662f\u7528\u6765\u7ba1\u7406\u5185\u5b58\u7ba1\u7406\u533a\u5185\u7684\u7a7a\u95f2\u7269\u7406\u5185\u5b58\u9875. \u5b9a\u4e49\u5982\u4e0b\uff1a #define MAX_ORDER 11 typedef struct free_area_struct { struct list_head free_list; unsigned int *map; } free_area_t; typedef struct zone_struct { ... free_area_t free_area[MAX_ORDER]; // \u7528\u4e8e\u4f19\u4f34\u5206\u914d\u7b97\u6cd5 ... } zone_t; \u5728\u65e7\u7248\u672c\u5185\u6838\u4e2d, \u662f struct free_area \u5728\u65b0\u7248\u672c\u5185\u6838\u4e2d, \u624d\u4f7f\u7528 typdef ... free_area_t \u5f62\u5f0f free_area \u662f\u4f19\u4f34\u7cfb\u7edf\u7b97\u6cd5\u7684\u6838\u5fc3\uff0c\u53ef\u4ee5\u770b\u5230 zone_t \u7684 free_area \u5c5e\u6027 \u6709 10 \u4e2a\u5143\u7d20\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u7c7b\u578b\u4e3a free_area_t \u7684\u7ed3\u6784\u4f53\uff0cfree_area_t \u7ed3\u6784\u7684 free_list \u5b57\u6bb5\u7528\u4e8e\u8fde\u63a5\u6709\u76f8\u540c\u9875\u9762\u4e2a\u6570\u7684\u5185\u5b58\u5757\u3002map \u5b57\u6bb5\u662f\u4e00\u4e2a\u4f4d\u56fe\uff0c\u7528\u4e8e\u8bb0\u5f55\u4f19\u4f34\u5185\u5b58\u5757\u7684\u4f7f\u7528\u60c5\u51b5\u3002 Linux \u5185\u6838\u4f7f\u7528 free_area[i] \u7ba1\u7406 2i \u4e2a\u5185\u5b58\u9875\u9762\u5927\u5c0f\u7684\u5185\u5b58\u5757\u5217\u8868\uff0c\u4f8b\u5982 free_area[0] \u5c31\u662f\u7ba1\u7406 1 \u4e2a\u5185\u5b58\u9875\u9762\u5927\u5c0f\u7684\u5185\u5b58\u5757(2\u76840\u6b21\u65b9 \u7b49\u4e8e 1)\uff1b\u800c free_area[1] \u5219\u7ba1\u7406 2 \u4e2a\u5185\u5b58\u9875\u9762\u5927\u5c0f\u7684\u5185\u5b58\u5757(2\u76841\u6b21\u65b9 \u7b49\u4e8e 2)\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u7ba1\u7406\u7269\u7406\u5185\u5b58\u9875\u7684 struct page \u7ed3\u6784\u4e2d\u6709\u4e2a list \u7684\u5b57\u6bb5\uff0c\u5185\u6838\u5c31\u662f\u901a\u8fc7\u8fd9\u4e2a\u5b57\u6bb5\u628a\u6709\u7740\u76f8\u540c\u4e2a\u6570\u9875\u9762\u7684\u5185\u5b58\u5757\u8fde\u6210\u4e00\u4e2a\u94fe\u8868\u7684\uff1a typedef struct page { struct list_head list; ... } mem_map_t; \u524d\u9762\u6211\u4eec\u8bf4\u8fc7\uff0c\u5728 free_area_t \u7ed3\u6784\u4e2d\u6709\u4e2a\u540d\u4e3a map \u7684\u5b57\u6bb5\uff0cmap \u5b57\u6bb5\u662f\u4e00\u4e2a\u4f4d\u56fe\uff0c\u6bcf\u4e2a\u4f4d\u8bb0\u5f55\u7740\u4e00\u5bf9\u4f19\u4f34\u5185\u5b58\u5757\u7684\u4f7f\u7528\u60c5\u51b5\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u4e00\u5bf9\u4f19\u4f34\u5185\u5b58\u5757\u4e2d\u7684\u67d0\u4e00\u4e2a\u5185\u5b58\u5757\u5728\u4f7f\u7528\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u4f4d\u5c31\u4e3a 1\uff0c\u5982\u679c\u4e24\u4e2a\u4f19\u4f34\u5185\u5b58\u5757\u90fd\u662f\u7a7a\u95f2\u6216\u8005\u4f7f\u7528\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u4f4d\u5c31\u4e3a 0\u3002\u5982\u4e0b\u56fe\uff1a \u4f7f\u7528\u4f4d\u56fe\u6765\u6807\u8bc6\u4f19\u4f34\u5185\u5b58\u5757\u4f7f\u7528\u60c5\u51b5\u7684\u539f\u56e0\u662f: \u5f53\u91ca\u653e\u5185\u5b58\u5757\u65f6, \u5982\u679c\u5bf9\u5e94\u7684\u4f4d\u662f 1 \u7684\u8bdd, \u90a3\u4e48\u8bf4\u660e\u53e6\u5916\u4e00\u4e2a\u4f19\u4f34\u5185\u5b58\u5757\u662f\u7a7a\u95f2\u72b6\u6001\u7684, \u6240\u4ee5\u91ca\u653e\u5f53\u524d\u5185\u5b58\u5757\u53ef\u4ee5\u8ddf\u5176\u4f19\u4f34\u5185\u5b58\u5757\u5408\u5e76\u6210\u4e00\u4e2a\u66f4\u5927\u7684\u5185\u5b58\u5757\u4e86.","title":"\u6838\u5fc3\u7ed3\u6784\u4f53"},{"location":"chapter_6/1_linux_buddy/#buddy_2","text":"\u5185\u5b58\u7684\u91ca\u653e\u662f\u5206\u914d\u7684\u9006\u8fc7\u7a0b\uff0c\u4e5f\u53ef\u4ee5\u770b\u4f5c\u662f\u4f19\u4f34\u7684\u5408\u5e76\u8fc7\u7a0b\u3002\u5f53\u91ca\u653e\u4e00\u4e2a\u5757\u65f6\uff0c\u5148\u5728\u5176\u5bf9\u5e94\u7684\u94fe\u8868\u4e2d\u8003\u67e5\u662f\u5426\u6709\u4f19\u4f34\u5b58\u5728\uff0c\u5982\u679c\u6ca1\u6709\u4f19\u4f34\u5757\uff0c\u5c31\u76f4\u63a5\u628a\u8981\u91ca\u653e\u7684\u5757\u6302\u5165\u94fe\u8868\u5934\uff1b\u5982\u679c\u6709\uff0c\u5219\u4ece\u94fe\u8868\u4e2d\u6458\u4e0b\u4f19\u4f34\uff0c\u5408\u5e76\u6210\u4e00\u4e2a\u5927\u5757\uff0c\u7136\u540e\u7ee7\u7eed\u8003\u5bdf\u5408\u5e76\u540e\u7684\u5757\u5728\u66f4\u5927\u4e00\u7ea7\u94fe\u8868\u4e2d\u662f\u5426\u6709\u4f19\u4f34\u5b58\u5728\uff0c\u76f4\u5230\u4e0d\u80fd\u5408\u5e76\u6216\u8005\u5df2\u7ecf\u5408\u5e76\u5230\u4e86\u6700\u5927\u7684\u5757\u3002 \u6574\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u4f4d\u56fe\u626e\u6f14\u4e86\u91cd\u8981\u7684\u89d2\u8272\uff0c\u5982\u56fe 2 \u6240\u793a\uff0c\u4f4d\u56fe\u7684\u67d0\u4e00\u4f4d\u5bf9\u5e94\u4e24\u4e2a\u4e92\u4e3a\u4f19\u4f34\u7684\u5757\uff0c\u4e3a 1 \u8868\u793a\u5176\u4e2d\u4e00\u5757\u5df2\u7ecf\u5206\u914d\u51fa\u53bb\u4e86\uff0c\u4e3a 0 \u8868\u793a\u4e24\u5757\u90fd\u7a7a\u95f2\u3002\u4f19\u4f34\u4e2d\u65e0\u8bba\u662f\u5206\u914d\u8fd8\u662f\u91ca\u653e\u90fd\u53ea\u662f\u76f8\u5bf9\u7684\u4f4d\u56fe\u8fdb\u884c\u5f02\u6216\u64cd\u4f5c\u3002\u5206\u914d\u5185\u5b58\u65f6\u5bf9\u4f4d\u56fe\u7684 \u662f\u4e3a\u91ca\u653e\u8fc7\u7a0b\u670d\u52a1\uff0c\u91ca\u653e\u8fc7\u7a0b\u6839\u636e\u4f4d\u56fe\u5224\u65ad\u4f19\u4f34\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u5bf9\u76f8\u5e94\u4f4d\u7684\u5f02\u6216\u64cd\u4f5c\u5f97 1\uff0c\u5219\u6ca1\u6709\u4f19\u4f34\u53ef\u4ee5\u5408\u5e76\uff0c\u5982\u679c\u5f02\u6216\u64cd\u4f5c\u5f97 0\uff0c\u5c31\u8fdb\u884c\u5408\u5e76\uff0c\u5e76\u4e14\u7ee7\u7eed\u6309\u8fd9\u79cd\u65b9\u5f0f\u5408\u5e76\u4f19\u4f34\uff0c\u76f4\u5230\u4e0d\u80fd\u5408\u5e76\u4e3a\u6b62\u3002","title":"Buddy \u7b97\u6cd5\u7684\u91ca\u653e\u539f\u7406\uff1a"},{"location":"chapter_6/1_linux_buddy/#nodezonefree_areapage","text":"\u4e0a\u56fe\u4e2d, \u6bcf\u4e00\u4e2a Memory \u90e8\u5206, \u5728\u5185\u6838\u4e2d\u4f7f\u7528 struct pg_data_t \u8868\u793a, \u5373\u662f\u4e00\u4e2a NUMA Node, \u5bf9\u4e8e UMA \u67b6\u6784 \u5176\u5b9e\u76f8\u5f53\u4e8e\u53ea\u6709\u4e00\u4e2a Node, \u5bf9\u4e8e NUMA \u67b6\u6784\u76f8\u5f53\u4e8e\u6709\u591a\u4e2a Node, \u591a\u4e2a Node \u5f62\u6210\u4e00\u4e2a\u94fe\u8868. \u6bcf\u4e2a Node \u4e0b\u9762, \u6709\u591a\u4e2a Zone, \u6bcf\u4e2a Zone \u5728\u5185\u6838\u4e2d\u4f7f\u7528 struct zone_t \u8868\u793a. \u6bcf\u4e2a Node \u4e0b\u6240\u6709\u7684\u7269\u7406 Page \u662f\u4e00\u4e2a\u6570\u7ec4. \u6bcf\u4e2a struct zone_t \u4e0b\u6709\u4e00\u4e2a free_area \u6570\u7ec4, \u8be5\u6570\u7ec4\u4e2d\u6709 11 \u4e2a\u5143\u7d20. \u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a struct free_area_t , \u6bcf\u4e2a free_area_t \u7528\u94fe\u8868\u5173\u8054\u4e86\u591a\u4e2a struct page , \u5e76\u4e14\u7b26\u5408 free_area[i] \u7ba1\u7406 2i \u4e2a\u5185\u5b58\u9875\u9762\u5927\u5c0f\u7684\u5185\u5b58\u5757\u5217\u8868. \u6bcf\u4e2a struct page \u662f\u4ee3\u8868 4KB \u5927\u5c0f\u7684\u5185\u5b58\u9875(\u9875\u6846), \u51e0\u4e2a page \u53ef\u4ee5\u6210\u4e3a\u4e00\u4e2a \u5185\u5b58\u5757 , \u5185\u6838\u5206\u914d\u7269\u7406\u5185\u5b58\u65f6, \u5fc5\u987b\u662f \u5185\u5b58\u5757 , \u800c\u4e14\u5fc5\u987b\u4ee5 2 \u7684\u51e0\u6b21\u65b9\u4e2a page \u5206\u914d \u5185\u5b58\u5757 , \u56e0\u6b64\u6700\u5c0f\u662f\u5206\u914d 2 \u7684 0 \u6b21\u65b9\u4e2a page \u7684 \u5185\u5b58\u5757 , \u5927\u5c0f\u4e3a 4KB. \u603b\u7ed3: (4 \u5c42\u67b6\u6784: Node\u3001Zone\u3001free_area\u3001Page) \u7cfb\u7edf\u5185\u6709\u4e00\u4e2a struct page_data_t \u94fe\u8868, \u5305\u542b\u4e86\u7cfb\u7edf\u4e0b\u6240\u6709\u7684 NUMA Node. \u4e00\u4e2a Node \u5305\u542b\u591a\u4e2a Zone(\u6bd4\u5982 ZONE_DMA\u3001ZONE_NORMAL\u3001ZONE_HIGHMEM) \u4e00\u4e2a Zone \u5305\u542b MAX_ORDER \u4e2a free_area, (MAX_ORDER \u662f\u5185\u6838\u4ee3\u7801\u91cc\u5b9a\u4e49\u7684\u5e38\u91cf 11, free_area[i] \u7ba1\u7406 2i \u4e2a\u5185\u5b58\u9875\u9762\u5927\u5c0f\u7684\u5185\u5b58\u5757\u94fe\u8868) \u6bcf\u4e2a frea_area \u6709\u4e00\u4e2a\u94fe\u8868,\u6bcf\u4e2a\u94fe\u8868\u662f\u591a\u4e2a\u5757\uff0c\u6bcf\u4e2a\u5757\u662f 2 \u4e2a\u6b21\u65b9\u4e2a Page\uff0c\u8fd9\u91cc\u7684\u6bcf\u4e2a\u5757\u6240\u6709\u5305\u542b\u7684 page \u5176\u7269\u7406\u4f4d\u7f6e\u90fd\u662f\u8fde\u7eed\u7684. \u6269\u5c55: \u5f53\u7136\u5982\u679c\u5185\u6838\u4ee3\u7801\u4ec5\u4ec5\u9700\u8981\u5c0f\u4e8e 4KB \u7684\u5185\u5b58\u65f6, \u7531\u8457\u540d\u7684 slab \u5206\u914d\u5c42\u89e3\u51b3.","title":"Node\u3001Zone\u3001free_area\u3001Page \u4e4b\u95f4\u7684\u5173\u7cfb"},{"location":"chapter_6/1_linux_buddy/#_5","text":"\u7528\u6237\u8fdb\u7a0b\u7684\u5185\u5b58\u9875\u5206\u4e3a\u4e24\u79cd\uff1a anonymous pages\uff08\u533f\u540d\u9875\uff09 \u6bd4\u5982\u8fdb\u7a0b\u7684\u4ee3\u7801\u6bb5\u3001\u6620\u5c04\u7684\u6587\u4ef6\u90fd\u662f file-backed\uff0c\u800c\u8fdb\u7a0b\u7684\u5806\u3001\u6808\u90fd\u662f\u4e0d\u4e0e\u6587\u4ef6\u76f8\u5bf9\u5e94\u7684\u3001\u5c31\u5c5e\u4e8e\u533f\u540d\u9875\u3002 file-backed pages\uff08\u6587\u4ef6\u80cc\u666f\u9875\uff09 \u5bf9\u4e8e\u6709\u6587\u4ef6\u80cc\u666f\u7684\u9875\u9762\uff0c\u7a0b\u5e8f\u53bb\u8bfb\u6587\u4ef6\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 read \u4e5f\u53ef\u4ee5\u901a\u8fc7 mmap \u53bb\u8bfb\u3002\u5f53\u4f60\u901a\u8fc7\u4efb\u4f55\u4e00\u79cd\u65b9\u5f0f\u4ece\u78c1\u76d8\u8bfb\u6587\u4ef6\u65f6\uff0c\u5185\u6838\u90fd\u4f1a\u7ed9\u4f60\u7533\u8bf7\u4e00\u4e2a page cache\uff0c\u6765\u7f13\u5b58\u786c\u76d8\u4e0a\u7684\u5185\u5bb9\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u8bfb\u8fc7\u4e00\u904d\u7684\u6570\u636e\uff0c\u672c\u8fdb\u7a0b\u6216\u5176\u4ed6\u8fdb\u7a0b\u4e0b\u6b21\u518d\u8bfb\u7684\u65f6\u5019\u5c31\u76f4\u63a5\u4ece page cache \u91cc\u53bb\u62ff\uff0c\u5c31\u5f88\u5feb\u4e86\uff0c\u63d0\u5347\u7cfb\u7edf\u7684\u6574\u4f53\u6027\u80fd\u3002\u56e0\u6b64\u7528\u6237\u7684 read/write \u5b9e\u9645\u4e0a\u662f\u8ddf page cache \u7684\u76f8\u4e92\u62f7\u8d1d\u3002 file-backed pages \u5728\u5185\u5b58\u4e0d\u8db3\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u5199\u56de\u5bf9\u5e94\u7684\u786c\u76d8\u6587\u4ef6\u91cc\uff0c\u79f0\u4e3a page-out\uff0c\u4e0d\u9700\u8981\u7528\u5230\u4ea4\u6362\u533a(swap)\uff1b\u800c anonymous pages \u5728\u5185\u5b58\u4e0d\u8db3\u65f6\u5c31\u53ea\u80fd\u5199\u5230\u786c\u76d8\u4e0a\u7684\u4ea4\u6362\u533a(swap)\u91cc\uff0c\u79f0\u4e3a swap-out\u3002","title":"\u5185\u5b58\u9875\u5206\u7c7b"},{"location":"chapter_6/1_linux_buddy/#_6","text":"\u53c2\u8003\u6587\u6863 1 \u53c2\u8003\u6587\u6863 2 \u53c2\u8003\u6587\u6863 3 Describing Physical Memory","title":"\u53c2\u8003\u6587\u6863"},{"location":"chapter_6/2_slab/","text":"\u6982\u8ff0 \u672c\u6587\u603b\u7ed3 Linux \u5185\u5b58\u5206\u914d\u4e4b slab \u5c42 slab \u5c42\u4f5c\u7528 \u6309\u5b57\u8282\u5206\u914d\u5185\u5b58,\u56e0\u4e3a\u9ed8\u8ba4 Buddy \u7cfb\u7edf\u662f\u6309\u9875\u8fdb\u884c\u5206\u914d\u5185\u5b58,\u4e00\u4e2a\u9875\u6700\u5c0f\u662f 4KB, \u6bd4\u5982\u7533\u8bf7\u4e00\u4e2a 20 \u5b57\u8282\u5bf9\u8c61\u7ed3\u679c\u5206\u914d\u4e00\u4e2a 4KB \u7684\u9875\u5c31\u5bb9\u6613\u9020\u6210\u6d6a\u8d39 \u7ef4\u62a4\u5e38\u7528\u5bf9\u8c61\u7684\u7f13\u5b58, \u5bf9\u4e8e inode\u3001task_struct\u3001thread_info\u3001uid\u3001mm_struct\u3001vm_area_struct \u7b49\u7ecf\u5e38\u9891\u7e41\u5206\u914d\u548c\u91ca\u653e\u7684\u5185\u5b58\u5bf9\u8c61\u8fdb\u884c\u7f13\u5b58\uff0c\u907f\u514d\u7ecf\u5e38\u8c03\u7528\u4f19\u4f34\u7b97\u6cd5\u4ece\u4f19\u4f34\u7cfb\u7edf\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58 \u4e00 \u5185\u5b58\u7ba1\u7406\u91cc\u6838\u5fc3\u6a21\u578b\u4e4b\u95f4\u7684\u5173\u7cfb\u603b\u7ed3 1 \u7269\u7406\u5185\u5b58\uff0c\u88ab\u5206\u5272\u4e3a\u6700\u5c0f\u7684\u5355\u4f4d\uff0c\u4e00\u4e2a\u4e00\u4e2a\u9875\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a page\u3002\u4e00\u4e2a page \u901a\u5e38\u662f 4KB 2 \u5185\u6838\u4ee3\u7801\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u53ef\u80fd\u5927\u4e8e 4KB\uff0c\u4e5f\u53ef\u80fd\u5c0f\u4e8e 4KB\uff0c\u5c0f\u4e8e 4KB \u65f6\uff0c\u4e5f\u81f3\u5c11\u5f97\u5206\u914d\u4e00\u4e2a page\uff0c\u90a3\u4e48\u5c31\u4f1a\u51fa\u73b0\u6d6a\u8d39\u60c5\u51b5\u3002\u56e0\u6b64 Linux \u5185\u6838\u4e13\u95e8\u505a\u4e86\u4e00\u5c42 slab \u5c42\u3002 slab \u5c42 = slab \u5206\u914d\u5668 3 slab \u5c42 \u548c \u666e\u901a page \u5206\u914d\u5668\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u5982\u4e0b\u56fe 1 \u4e00\u4e9b\u7ed3\u6784\u4f53\u7684\u5173\u7cfb \u6bcf\u79cd\u9ad8\u901f\u7f13\u5b58\u7ec4\u90fd\u7531 struct kmem_cache \u7ed3\u6784\u4f53\u8868\u793a, \u6709\u591a\u79cd\u9ad8\u901f\u7f13\u5b58, \u6bd4\u5982 inode,afs_inode,task_struct \u4f1a\u4ea7\u751f inode_cachep, afs_inode_cachep, task_struct_cachep \u6bcf\u4e2a XX_cachep \u4f1a\u6709\u4e00\u4e2a\u6216\u591a\u4e2a struct slab, \u6bcf\u4e2a slab \u4f1a\u6709\u4e00\u4e2a\u6216\u591a\u4e2a struct page, \u6bcf\u4e2a slab \u4e2d\u9884\u5148\u7533\u8bf7\u597d\u591a\u4e2a\uff08\u6bd4\u5982 1000 \u4e2a\uff09object\uff0c\u5176\u4ed6\u5185\u6838\u5b50\u7cfb\u7edf\u53ef\u4ee5\u7533\u8bf7\u4f7f\u7528/\u56de\u6536\u8fd9\u4e9b Object\uff0c\u4e00\u4e9b Object \u662f \u4e13\u7528 (\u6bd4\u5982 mm_cachep)\uff0c\u4e00\u4e9b Object \u662f \u901a\u7528 , \u7533\u8bf7\u4f7f\u7528\u53ea\u662f\u6807\u8bb0\u5bf9\u5e94 Object \u5df2\u4f7f\u7528, \u7533\u8bf7\u56de\u6536\u53ea\u662f\u6807\u8bb0\u5bf9\u5e94 Object \u672a\u4f7f\u7528. 2 \u6838\u5fc3\u6570\u636e\u7ed3\u6784 2.1 struct slab\uff08slab \u63cf\u8ff0\u7b26) \u5b9e\u9645\u4e0a\u6ca1\u6709 struct slab \u8fd9\u4e2a\u7ed3\u6784\u4f53, \u4f46\u662f\u6709\u8fd9\u4e2a\u6982\u5ff5, \u6bcf\u4e2a struct slab \u5bf9\u5e94\u4e00\u4e2a\u6216\u8005\u591a\u4e2a struct page kmem_cache_node \u8bb0\u5f55\u4e86 3 \u79cd slab\uff1a slabs_full \uff1a\u5df2\u7ecf\u5b8c\u5168\u5206\u914d\u7684 slab slabs_partial\uff1a \u90e8\u5206\u5206\u914d\u7684 slab slabs_free\uff1a\u7a7a slab\uff0c\u6216\u8005\u6ca1\u6709\u5bf9\u8c61\u88ab\u5206\u914d \u4ee5\u4e0a 3 \u4e2a\u94fe\u8868\u4fdd\u5b58\u7684\u662f slab \u63cf\u8ff0\u7b26\uff0cLinux kernel \u4f7f\u7528 struct page \u6765\u63cf\u8ff0\u4e00\u4e2a slab\u3002\u5355\u4e2a slab \u53ef\u4ee5\u5728 slab \u94fe\u8868\u4e4b\u95f4\u79fb\u52a8\uff0c\u4f8b\u5982\u5982\u679c\u4e00\u4e2a\u534a\u6ee1 slab \u88ab\u5206\u914d\u4e86\u5bf9\u8c61\u540e\u53d8\u6ee1\u4e86\uff0c\u5c31\u8981\u4ece slabs_partial \u4e2d\u88ab\u5220\u9664\uff0c\u540c\u65f6\u63d2\u5165\u5230 slabs_full \u4e2d\u53bb\u3002 \u6765\u770b page \u7ed3\u6784\u4f53\u5173\u4e8e slab \u7684\u90e8\u5206\u3002struct page \u5b9a\u4e49\u5728 include/linux/mm_types.h \u6587\u4ef6\u4e2d\uff0c\u4e0e slab \u76f8\u5173\u7684\u7ed3\u6784\u4f53\u6210\u5458\u5982\u4e0b\u6240\u793a\uff1a struct page { union { struct { /* Page cache and anonymous pages */ ... }; struct { /* slab, slob and slub */ union { struct list_head slab_list; struct { /* Partial pages */ struct page *next; int pages; /* Nr of pages left */ int pobjects; /* Approximate count */ }; }; struct kmem_cache *slab_cache; /* Double-word boundary */ void *freelist; /* first free object */ union { void *s_mem; /* slab: first object */ unsigned long counters; /* SLUB */ ... }; }; ... }; }; void *s_mem : \u6307\u5411\u8be5\u9875\u6846\u4e2d\u7b2c\u4e00\u4e2a object \u7684\u5730\u5740 \u3002 struct kmem_cache *slab_cache : struct kmem_cache_node \u7ed3\u6784\u4f53\u7528\u5176\u8ffd\u8e2a\u6240\u6709 page \u7684\u94fe\u8868\u3002 struct list_head slab_list : \u7528\u4e8e\u8ddf\u8e2a\u6b64\u9875\u6846\u5c5e\u4e8e\u54ea\u4e2a slab \u94fe\u8868\uff08full, free, partial\uff09\uff0c\u5373\u4f7f\u7528\u6b64\u6210\u5458\u5c06 list \u4e32\u8054\u8d77\u6765\u3002 void *freelist : \u7528\u4e8e\u6307\u5411\u9875\u6846\u4e2d\u7a7a\u95f2\u5bf9\u8c61\u94fe\u8868\u3002\u7a7a\u95f2\u5bf9\u8c61\u94fe\u8868\u5305\u542b\u9875\u6846\u4e2d\u6bcf\u4e2a\u7a7a\u95f2\u5bf9\u8c61\u7684\u7d22\u5f15\u3002 2.2 struct kmem_cache \u5e38\u89c1\u7684 kmem_cache kernel/user.c:212: uid_cachep = kmem_cache_create(\"uid_cache\", sizeof(struct user_struct), kernel/fork.c:179: thread_info_cache = kmem_cache_create(\"thread_info\", THREAD_SIZE, kernel/fork.c:264: kmem_cache_create(\"task_struct\", sizeof(struct task_struct), kernel/fork.c:1739: mm_cachep = kmem_cache_create(\"mm_struct\", lib/debugobjects.c:1086: obj_cache = kmem_cache_create(\"debug_objects_cache\", net/core/net_namespace.c:405: net_cachep = kmem_cache_create(\"net_namespace\", sizeof(struct net), \u5b8c\u6574\u7684 kmem_cache \u5b9a\u4e49 include/linux/slab_def.h /* * Definitions unique to the original Linux SLAB allocator. */ struct kmem_cache { /* 1) Cache tunables. Protected by slab_mutex */ unsigned int batchcount; unsigned int limit; unsigned int shared; unsigned int size; struct reciprocal_value reciprocal_buffer_size; /* 2) touched by every alloc & free from the backend */ unsigned int flags; /* constant flags */ unsigned int num; /* # of objs per slab */ /* 3) cache_grow/shrink */ /* order of pgs per slab (2^n) */ unsigned int gfporder; /* force GFP flags, e.g. GFP_DMA */ gfp_t allocflags; size_t colour; /* cache colouring range */ unsigned int colour_off; /* colour offset */ struct kmem_cache *freelist_cache; unsigned int freelist_size; /* constructor func */ void (*ctor)(void *obj); /* 4) cache creation/removal */ const char *name; struct list_head list; int refcount; int object_size; int align; /* 5) statistics */ #ifdef CONFIG_DEBUG_SLAB unsigned long num_active; unsigned long num_allocations; unsigned long high_mark; unsigned long grown; unsigned long reaped; unsigned long errors; unsigned long max_freeable; unsigned long node_allocs; unsigned long node_frees; unsigned long node_overflow; atomic_t allochit; atomic_t allocmiss; atomic_t freehit; atomic_t freemiss; /* * If debugging is enabled, then the allocator can add additional * fields and/or padding to every object. size contains the total * object size including these internal fields, the following two * variables contain the offset to the user object and its size. */ int obj_offset; #endif /* CONFIG_DEBUG_SLAB */ #ifdef CONFIG_MEMCG_KMEM struct memcg_cache_params *memcg_params; #endif /* 6) per-cpu/per-node data, touched during every alloc/free */ /* * We put array[] at the end of kmem_cache, because we want to size * this array to nr_cpu_ids slots instead of NR_CPUS * (see kmem_cache_init()) * We still use [NR_CPUS] and not [1] or [0] because cache_cache * is statically defined, so we reserve the max number of cpus. * * We also need to guarantee that the list is able to accomodate a * pointer for each node since \"nodelists\" uses the remainder of * available pointers. */ struct kmem_cache_node **node; struct array_cache *array[NR_CPUS + MAX_NUMNODES]; /* * Do not add fields after array[] */ }; 2.3 struct kmem_cache_node mm/slab.h /* * The slab lists for all objects. */ struct kmem_cache_node { spinlock_t list_lock; #ifdef CONFIG_SLAB struct list_head slabs_partial; /* partial list first, better asm code */ struct list_head slabs_full; struct list_head slabs_free; unsigned long free_objects; unsigned int free_limit; unsigned int colour_next; /* Per-node cache coloring */ struct array_cache *shared; /* shared per node */ struct array_cache **alien; /* on other nodes */ unsigned long next_reap; /* updated without locking */ int free_touched; /* updated without locking */ #endif #ifdef CONFIG_SLUB unsigned long nr_partial; struct list_head partial; #ifdef CONFIG_SLUB_DEBUG atomic_long_t nr_slabs; atomic_long_t total_objects; struct list_head full; #endif #endif }; 3 \u6838\u5fc3\u51fd\u6570 3.1 kmem_cache_create \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 kmem_cache 3.2 kmem_cache_destroy \u5220\u9664\u4e00\u4e2a kmem_cache 3.3 kmem_cache_alloc \u4ece\u4e00\u4e2a kmem_cache \u4e2d\u5206\u914d\u4e00\u4e2a Object 3.4 kmem_cache_free \u628a\u4e00\u4e2a\u4e4b\u524d\u4ece kmem_cache \u4e2d\u5206\u914d\u7684 Object \u56de\u6536 \u4e8c \u53c2\u8003 Linux \u5185\u6838 | \u5185\u5b58\u7ba1\u7406\u2014\u2014Slab \u5206\u914d\u5668","title":"\u7b2c\u4e8c\u7bc7 Slab\u5c42\u4ecb\u7ecd"},{"location":"chapter_6/2_slab/#_1","text":"\u672c\u6587\u603b\u7ed3 Linux \u5185\u5b58\u5206\u914d\u4e4b slab \u5c42","title":"\u6982\u8ff0"},{"location":"chapter_6/2_slab/#slab","text":"\u6309\u5b57\u8282\u5206\u914d\u5185\u5b58,\u56e0\u4e3a\u9ed8\u8ba4 Buddy \u7cfb\u7edf\u662f\u6309\u9875\u8fdb\u884c\u5206\u914d\u5185\u5b58,\u4e00\u4e2a\u9875\u6700\u5c0f\u662f 4KB, \u6bd4\u5982\u7533\u8bf7\u4e00\u4e2a 20 \u5b57\u8282\u5bf9\u8c61\u7ed3\u679c\u5206\u914d\u4e00\u4e2a 4KB \u7684\u9875\u5c31\u5bb9\u6613\u9020\u6210\u6d6a\u8d39 \u7ef4\u62a4\u5e38\u7528\u5bf9\u8c61\u7684\u7f13\u5b58, \u5bf9\u4e8e inode\u3001task_struct\u3001thread_info\u3001uid\u3001mm_struct\u3001vm_area_struct \u7b49\u7ecf\u5e38\u9891\u7e41\u5206\u914d\u548c\u91ca\u653e\u7684\u5185\u5b58\u5bf9\u8c61\u8fdb\u884c\u7f13\u5b58\uff0c\u907f\u514d\u7ecf\u5e38\u8c03\u7528\u4f19\u4f34\u7b97\u6cd5\u4ece\u4f19\u4f34\u7cfb\u7edf\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58","title":"slab \u5c42\u4f5c\u7528"},{"location":"chapter_6/2_slab/#_2","text":"1 \u7269\u7406\u5185\u5b58\uff0c\u88ab\u5206\u5272\u4e3a\u6700\u5c0f\u7684\u5355\u4f4d\uff0c\u4e00\u4e2a\u4e00\u4e2a\u9875\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a page\u3002\u4e00\u4e2a page \u901a\u5e38\u662f 4KB 2 \u5185\u6838\u4ee3\u7801\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u53ef\u80fd\u5927\u4e8e 4KB\uff0c\u4e5f\u53ef\u80fd\u5c0f\u4e8e 4KB\uff0c\u5c0f\u4e8e 4KB \u65f6\uff0c\u4e5f\u81f3\u5c11\u5f97\u5206\u914d\u4e00\u4e2a page\uff0c\u90a3\u4e48\u5c31\u4f1a\u51fa\u73b0\u6d6a\u8d39\u60c5\u51b5\u3002\u56e0\u6b64 Linux \u5185\u6838\u4e13\u95e8\u505a\u4e86\u4e00\u5c42 slab \u5c42\u3002 slab \u5c42 = slab \u5206\u914d\u5668 3 slab \u5c42 \u548c \u666e\u901a page \u5206\u914d\u5668\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u5982\u4e0b\u56fe","title":"\u4e00 \u5185\u5b58\u7ba1\u7406\u91cc\u6838\u5fc3\u6a21\u578b\u4e4b\u95f4\u7684\u5173\u7cfb\u603b\u7ed3"},{"location":"chapter_6/2_slab/#1","text":"\u6bcf\u79cd\u9ad8\u901f\u7f13\u5b58\u7ec4\u90fd\u7531 struct kmem_cache \u7ed3\u6784\u4f53\u8868\u793a, \u6709\u591a\u79cd\u9ad8\u901f\u7f13\u5b58, \u6bd4\u5982 inode,afs_inode,task_struct \u4f1a\u4ea7\u751f inode_cachep, afs_inode_cachep, task_struct_cachep \u6bcf\u4e2a XX_cachep \u4f1a\u6709\u4e00\u4e2a\u6216\u591a\u4e2a struct slab, \u6bcf\u4e2a slab \u4f1a\u6709\u4e00\u4e2a\u6216\u591a\u4e2a struct page, \u6bcf\u4e2a slab \u4e2d\u9884\u5148\u7533\u8bf7\u597d\u591a\u4e2a\uff08\u6bd4\u5982 1000 \u4e2a\uff09object\uff0c\u5176\u4ed6\u5185\u6838\u5b50\u7cfb\u7edf\u53ef\u4ee5\u7533\u8bf7\u4f7f\u7528/\u56de\u6536\u8fd9\u4e9b Object\uff0c\u4e00\u4e9b Object \u662f \u4e13\u7528 (\u6bd4\u5982 mm_cachep)\uff0c\u4e00\u4e9b Object \u662f \u901a\u7528 , \u7533\u8bf7\u4f7f\u7528\u53ea\u662f\u6807\u8bb0\u5bf9\u5e94 Object \u5df2\u4f7f\u7528, \u7533\u8bf7\u56de\u6536\u53ea\u662f\u6807\u8bb0\u5bf9\u5e94 Object \u672a\u4f7f\u7528.","title":"1 \u4e00\u4e9b\u7ed3\u6784\u4f53\u7684\u5173\u7cfb"},{"location":"chapter_6/2_slab/#2","text":"","title":"2 \u6838\u5fc3\u6570\u636e\u7ed3\u6784"},{"location":"chapter_6/2_slab/#21-struct-slabslab","text":"\u5b9e\u9645\u4e0a\u6ca1\u6709 struct slab \u8fd9\u4e2a\u7ed3\u6784\u4f53, \u4f46\u662f\u6709\u8fd9\u4e2a\u6982\u5ff5, \u6bcf\u4e2a struct slab \u5bf9\u5e94\u4e00\u4e2a\u6216\u8005\u591a\u4e2a struct page kmem_cache_node \u8bb0\u5f55\u4e86 3 \u79cd slab\uff1a slabs_full \uff1a\u5df2\u7ecf\u5b8c\u5168\u5206\u914d\u7684 slab slabs_partial\uff1a \u90e8\u5206\u5206\u914d\u7684 slab slabs_free\uff1a\u7a7a slab\uff0c\u6216\u8005\u6ca1\u6709\u5bf9\u8c61\u88ab\u5206\u914d \u4ee5\u4e0a 3 \u4e2a\u94fe\u8868\u4fdd\u5b58\u7684\u662f slab \u63cf\u8ff0\u7b26\uff0cLinux kernel \u4f7f\u7528 struct page \u6765\u63cf\u8ff0\u4e00\u4e2a slab\u3002\u5355\u4e2a slab \u53ef\u4ee5\u5728 slab \u94fe\u8868\u4e4b\u95f4\u79fb\u52a8\uff0c\u4f8b\u5982\u5982\u679c\u4e00\u4e2a\u534a\u6ee1 slab \u88ab\u5206\u914d\u4e86\u5bf9\u8c61\u540e\u53d8\u6ee1\u4e86\uff0c\u5c31\u8981\u4ece slabs_partial \u4e2d\u88ab\u5220\u9664\uff0c\u540c\u65f6\u63d2\u5165\u5230 slabs_full \u4e2d\u53bb\u3002 \u6765\u770b page \u7ed3\u6784\u4f53\u5173\u4e8e slab \u7684\u90e8\u5206\u3002struct page \u5b9a\u4e49\u5728 include/linux/mm_types.h \u6587\u4ef6\u4e2d\uff0c\u4e0e slab \u76f8\u5173\u7684\u7ed3\u6784\u4f53\u6210\u5458\u5982\u4e0b\u6240\u793a\uff1a struct page { union { struct { /* Page cache and anonymous pages */ ... }; struct { /* slab, slob and slub */ union { struct list_head slab_list; struct { /* Partial pages */ struct page *next; int pages; /* Nr of pages left */ int pobjects; /* Approximate count */ }; }; struct kmem_cache *slab_cache; /* Double-word boundary */ void *freelist; /* first free object */ union { void *s_mem; /* slab: first object */ unsigned long counters; /* SLUB */ ... }; }; ... }; }; void *s_mem : \u6307\u5411\u8be5\u9875\u6846\u4e2d\u7b2c\u4e00\u4e2a object \u7684\u5730\u5740 \u3002 struct kmem_cache *slab_cache : struct kmem_cache_node \u7ed3\u6784\u4f53\u7528\u5176\u8ffd\u8e2a\u6240\u6709 page \u7684\u94fe\u8868\u3002 struct list_head slab_list : \u7528\u4e8e\u8ddf\u8e2a\u6b64\u9875\u6846\u5c5e\u4e8e\u54ea\u4e2a slab \u94fe\u8868\uff08full, free, partial\uff09\uff0c\u5373\u4f7f\u7528\u6b64\u6210\u5458\u5c06 list \u4e32\u8054\u8d77\u6765\u3002 void *freelist : \u7528\u4e8e\u6307\u5411\u9875\u6846\u4e2d\u7a7a\u95f2\u5bf9\u8c61\u94fe\u8868\u3002\u7a7a\u95f2\u5bf9\u8c61\u94fe\u8868\u5305\u542b\u9875\u6846\u4e2d\u6bcf\u4e2a\u7a7a\u95f2\u5bf9\u8c61\u7684\u7d22\u5f15\u3002","title":"2.1 struct slab\uff08slab \u63cf\u8ff0\u7b26)"},{"location":"chapter_6/2_slab/#22-struct-kmem_cache","text":"\u5e38\u89c1\u7684 kmem_cache kernel/user.c:212: uid_cachep = kmem_cache_create(\"uid_cache\", sizeof(struct user_struct), kernel/fork.c:179: thread_info_cache = kmem_cache_create(\"thread_info\", THREAD_SIZE, kernel/fork.c:264: kmem_cache_create(\"task_struct\", sizeof(struct task_struct), kernel/fork.c:1739: mm_cachep = kmem_cache_create(\"mm_struct\", lib/debugobjects.c:1086: obj_cache = kmem_cache_create(\"debug_objects_cache\", net/core/net_namespace.c:405: net_cachep = kmem_cache_create(\"net_namespace\", sizeof(struct net), \u5b8c\u6574\u7684 kmem_cache \u5b9a\u4e49 include/linux/slab_def.h /* * Definitions unique to the original Linux SLAB allocator. */ struct kmem_cache { /* 1) Cache tunables. Protected by slab_mutex */ unsigned int batchcount; unsigned int limit; unsigned int shared; unsigned int size; struct reciprocal_value reciprocal_buffer_size; /* 2) touched by every alloc & free from the backend */ unsigned int flags; /* constant flags */ unsigned int num; /* # of objs per slab */ /* 3) cache_grow/shrink */ /* order of pgs per slab (2^n) */ unsigned int gfporder; /* force GFP flags, e.g. GFP_DMA */ gfp_t allocflags; size_t colour; /* cache colouring range */ unsigned int colour_off; /* colour offset */ struct kmem_cache *freelist_cache; unsigned int freelist_size; /* constructor func */ void (*ctor)(void *obj); /* 4) cache creation/removal */ const char *name; struct list_head list; int refcount; int object_size; int align; /* 5) statistics */ #ifdef CONFIG_DEBUG_SLAB unsigned long num_active; unsigned long num_allocations; unsigned long high_mark; unsigned long grown; unsigned long reaped; unsigned long errors; unsigned long max_freeable; unsigned long node_allocs; unsigned long node_frees; unsigned long node_overflow; atomic_t allochit; atomic_t allocmiss; atomic_t freehit; atomic_t freemiss; /* * If debugging is enabled, then the allocator can add additional * fields and/or padding to every object. size contains the total * object size including these internal fields, the following two * variables contain the offset to the user object and its size. */ int obj_offset; #endif /* CONFIG_DEBUG_SLAB */ #ifdef CONFIG_MEMCG_KMEM struct memcg_cache_params *memcg_params; #endif /* 6) per-cpu/per-node data, touched during every alloc/free */ /* * We put array[] at the end of kmem_cache, because we want to size * this array to nr_cpu_ids slots instead of NR_CPUS * (see kmem_cache_init()) * We still use [NR_CPUS] and not [1] or [0] because cache_cache * is statically defined, so we reserve the max number of cpus. * * We also need to guarantee that the list is able to accomodate a * pointer for each node since \"nodelists\" uses the remainder of * available pointers. */ struct kmem_cache_node **node; struct array_cache *array[NR_CPUS + MAX_NUMNODES]; /* * Do not add fields after array[] */ };","title":"2.2 struct kmem_cache"},{"location":"chapter_6/2_slab/#23-struct-kmem_cache_node","text":"mm/slab.h /* * The slab lists for all objects. */ struct kmem_cache_node { spinlock_t list_lock; #ifdef CONFIG_SLAB struct list_head slabs_partial; /* partial list first, better asm code */ struct list_head slabs_full; struct list_head slabs_free; unsigned long free_objects; unsigned int free_limit; unsigned int colour_next; /* Per-node cache coloring */ struct array_cache *shared; /* shared per node */ struct array_cache **alien; /* on other nodes */ unsigned long next_reap; /* updated without locking */ int free_touched; /* updated without locking */ #endif #ifdef CONFIG_SLUB unsigned long nr_partial; struct list_head partial; #ifdef CONFIG_SLUB_DEBUG atomic_long_t nr_slabs; atomic_long_t total_objects; struct list_head full; #endif #endif };","title":"2.3 struct kmem_cache_node"},{"location":"chapter_6/2_slab/#3","text":"","title":"3 \u6838\u5fc3\u51fd\u6570"},{"location":"chapter_6/2_slab/#31-kmem_cache_create-kmem_cache","text":"","title":"3.1 kmem_cache_create \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 kmem_cache"},{"location":"chapter_6/2_slab/#32-kmem_cache_destroy-kmem_cache","text":"","title":"3.2 kmem_cache_destroy \u5220\u9664\u4e00\u4e2a kmem_cache"},{"location":"chapter_6/2_slab/#33-kmem_cache_alloc-kmem_cache-object","text":"","title":"3.3 kmem_cache_alloc \u4ece\u4e00\u4e2a kmem_cache \u4e2d\u5206\u914d\u4e00\u4e2a Object"},{"location":"chapter_6/2_slab/#34-kmem_cache_free-kmem_cache-object","text":"","title":"3.4 kmem_cache_free \u628a\u4e00\u4e2a\u4e4b\u524d\u4ece kmem_cache \u4e2d\u5206\u914d\u7684 Object \u56de\u6536"},{"location":"chapter_6/2_slab/#_3","text":"Linux \u5185\u6838 | \u5185\u5b58\u7ba1\u7406\u2014\u2014Slab \u5206\u914d\u5668","title":"\u4e8c \u53c2\u8003"},{"location":"chapter_6/3_virtual_memory/","text":"\u6982\u8ff0 \u672c\u6587\u9610\u8ff0 Linux \u8fdb\u7a0b\u865a\u62df\u5185\u5b58\u76f8\u5173\u6982\u5ff5 \u4e00 \u865a\u62df\u5185\u5b58\u548c\u7269\u7406\u5185\u5b58\u7684\u6982\u5ff5 1 \u8fdb\u7a0b\u770b\u5230\u7684\u90fd\u662f\u865a\u62df\u5185\u5b58\uff0c\u4ee5\u4e3a\u81ea\u5df1\u5360\u6709\u6574\u4e2a\u5185\u5b58\u4ee5\u53ca CPU \u8d44\u6e90\u3002\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff1a 1.1 \u5c31\u7b97\u6240\u6709\u8fdb\u7a0b\u6216\u8005\u67d0\u4e2a\u8fdb\u7a0b\u7684\u5185\u5b58\u9700\u6c42\u603b\u548c\u5927\u4e8e\u5b9e\u9645\u7684\u7269\u7406\u5185\u5b58\uff0c\u7cfb\u7edf\u4e0a\u4ecd\u7136\u53ef\u4ee5\u8fd0\u884c\u8d77\u6765\u8fd9\u4e9b\u8fdb\u7a0b\uff0c\u5e76\u4e14\u53ef\u4ee5\u505a\u5230\u540c\u65f6\u8fd0\u884c\u8fd9\u4e9b\u8fdb\u7a0b\u3002 1.2 Linux \u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u8303\u56f4\u4e3a 0 \uff5e 4G\uff0cLinux \u5185\u6838\u5c06\u8fd9 4G \u5b57\u8282\u7684\u7a7a\u95f4\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u5c06\u6700\u9ad8\u7684 1G \u5b57\u8282\uff08\u4ece\u865a\u62df\u5730\u5740 0xC0000000 \u5230 0xFFFFFFFF\uff09\u4f9b\u5185\u6838\u4f7f\u7528\uff0c\u79f0\u4e3a \u5185\u6838\u7a7a\u95f4 \u3002\u800c\u5c06\u8f83\u4f4e\u7684 3G \u5b57\u8282\uff08\u4ece\u865a\u62df\u5730\u5740 0x00000000 \u5230 0xBFFFFFFF\uff09\u4f9b\u5404\u4e2a\u8fdb\u7a0b\u4f7f\u7528\uff0c\u79f0\u4e3a \u7528\u6237\u7a7a\u95f4 \u3002 1.3 \u56e0\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u8fdb\u5165\u5185\u6838\uff0c\u56e0\u6b64\uff0cLinux \u5185\u6838\u7531\u7cfb\u7edf\u5185\u7684\u6240\u6709\u8fdb\u7a0b\u5171\u4eab\u3002\u4e8e\u662f\uff0c\u4ece\u5177\u4f53\u8fdb\u7a0b\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u62e5\u6709 4G \u5b57\u8282\u7684\u865a\u62df\u7a7a\u95f4\u3002 1.4 Linux \u4f7f\u7528\u4e24\u7ea7\u4fdd\u62a4\u673a\u5236\uff1a0 \u7ea7\u4f9b\u5185\u6838\u4f7f\u7528\uff0c3 \u7ea7\u4f9b\u7528\u6237\u7a0b\u5e8f\u4f7f\u7528\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u6709\u5404\u81ea\u7684\u79c1\u6709\u7528\u6237\u7a7a\u95f4\uff080 \uff5e 3G\uff09\uff0c\u8fd9\u4e2a\u7a7a\u95f4\u5bf9\u7cfb\u7edf\u4e2d\u7684\u5176\u4ed6\u8fdb\u7a0b\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u6700\u9ad8\u7684 1GB \u5b57\u8282\u865a\u62df\u5185\u6838\u7a7a\u95f4\u5219\u4e3a\u6240\u6709\u8fdb\u7a0b\u4ee5\u53ca\u5185\u6838\u6240\u5171\u4eab\u3002 1.5 \u5185\u6838\u7a7a\u95f4\u4e2d\u5b58\u653e\u7684\u662f\u5185\u6838\u4ee3\u7801\u548c\u6570\u636e\uff0c\u800c\u8fdb\u7a0b\u7684\u7528\u6237\u7a7a\u95f4\u4e2d\u5b58\u653e\u7684\u662f\u7528\u6237\u7a0b\u5e8f\u7684\u4ee3\u7801\u548c\u6570\u636e\u3002\u4e0d\u7ba1\u662f\u5185\u6838\u7a7a\u95f4\u8fd8\u662f\u7528\u6237\u7a7a\u95f4\uff0c\u5b83\u4eec\u90fd\u5904\u4e8e\u865a\u62df\u7a7a\u95f4\u4e2d\u3002 \u867d\u7136\u5185\u6838\u7a7a\u95f4\u5360\u636e\u4e86\u6bcf\u4e2a\u865a\u62df\u7a7a\u95f4\u4e2d\u7684\u6700\u9ad8 1GB \u5b57\u8282\uff0c\u4f46\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\u5374\u603b\u662f\u4ece\u6700\u4f4e\u5730\u5740\uff080x00000000\uff09\uff0c\u53e6\u5916\uff0c\u4f7f\u7528\u865a\u62df\u5730\u5740\u53ef\u4ee5\u5f88\u597d\u7684\u4fdd\u62a4\u5185\u6838\u7a7a\u95f4\u88ab\u7528\u6237\u7a7a\u95f4\u7834\u574f\uff0c\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u8f6c\u6362\u8fc7\u7a0b\u6709\u64cd\u4f5c\u7cfb\u7edf\u548c CPU \u5171\u540c\u5b8c\u6210(\u64cd\u4f5c\u7cfb\u7edf\u4e3a CPU \u8bbe\u7f6e\u597d\u9875\u8868\uff0cCPU \u901a\u8fc7 MMU \u5355\u5143\u8fdb\u884c\u5730\u5740\u8f6c\u6362)\u3002 2 \u591a\u4efb\u52a1\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u90fd\u8fd0\u884c\u5728\u4e00\u4e2a\u5c5e\u4e8e\u5b83\u81ea\u5df1\u7684\u5185\u5b58\u6c99\u76d2\u4e2d\uff0c\u8fd9\u4e2a\u6c99\u76d2\u5c31\u662f\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff08virtual address space\uff09\uff0c\u5728 32 \u4f4d\u6a21\u5f0f\u4e0b\uff0c\u5b83\u603b\u662f\u4e00\u4e2a 4GB \u7684\u5185\u5b58\u5730\u5740\u5757\u3002\u8fd9\u4e9b\u865a\u62df\u5730\u5740\u901a\u8fc7\u9875\u8868\uff08page table\uff09\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\uff0c\u9875\u8868\u7531\u64cd\u4f5c\u7cfb\u7edf\u7ef4\u62a4\u5e76\u88ab\u5904\u7406\u5668\u5f15\u7528\u3002\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u62e5\u6709\u4e00\u5957\u5c5e\u4e8e\u5b83\u81ea\u5df1\u7684\u9875\u8868\u3002 2.1 \u6bcf\u4e2a\u8fdb\u7a0b\u6709\u4e00\u4e2a page table ,\u5bf9\u5e94\u81ea\u5df1\u7684\u7269\u7406\u5185\u5b58\u533a\u57df 3 \u7269\u7406\u5185\u5b58\u5206\u914d\u7684\u6700\u5c0f\u5355\u4f4d\u662f\u4e00\u4e2a\u9875\uff0cpage\uff0c\u5355\u4f4d\u4e3a 4KB\uff1b \u901a\u8fc7 getconf PAGESIZE \u67e5\u770b \u4e3a\u4ec0\u4e48\u662f 4096 \u5462\uff1f\u662f\u5728\u5185\u6838\u6e90\u4ee3\u7801\u91cc\u5199\u6b7b\u7684 \u4e8c \u8fdb\u7a0b\u7684 virtual memory \u793a\u610f\u56fe \u5982\u679c\u662f 32 \u4f4d\u7684 Linux \u7cfb\u7edf\uff0864 \u4f4d\u7684 Linux \u7cfb\u7edf\uff0c\u5e94\u8be5\u7c7b\u4f3c\uff09\uff0c\u90a3\u4e48\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u662f 4GB \u7684 virtual memory \u5730\u5740\u7a7a\u95f4\uff1b\u5982\u4e0b\uff1a (\u4e00) \u9996\u5148\u6765\u4ed4\u7ec6\u63a2\u8ba8\u4e00\u4e0b\u5360\u7528 3GB \u7684 User Space \u5176\u793a\u610f\u56fe\u5982\u4e0b\uff1a 1 text\uff1a\u4ee3\u7801\u6bb5\u3002\u5b58\u653e\u7684\u662f\u7a0b\u5e8f\u7684\u5168\u90e8\u4ee3\u7801\uff08\u6307\u4ee4\uff09\uff0c\u6765\u6e90\u4e8e\u4e8c\u8fdb\u5236\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u90e8\u5206 2 initialized data\uff08\u7b80\u79f0 data \u6bb5\uff09\u548c uninitialized data\uff08\u7b80\u79f0 bss \u6bb5\uff09\u7ec4\u6210\u4e86\u6570\u636e\u6bb5\u3002\u5176\u4e2d initialized data \u7b80\u79f0 data\uff0c uninitialized data \u7b80\u79f0 bss 3 data \u6bb5\u5b58\u653e\u7684\u662f\u5df2\u521d\u59cb\u5316\u5168\u5c40\u53d8\u91cf\u548c\u5df2\u521d\u59cb\u5316 static \u5c40\u90e8\u53d8\u91cf\uff0c\u6765\u6e90\u4e8e\u4e8c\u8fdb\u5236\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u90e8\u5206\uff1b 4 bss \u6bb5\u5b58\u653e\u7684\u662f\u672a\u521d\u59cb\u5316\u5168\u5c40\u53d8\u91cf\u548c\u672a\u521d\u59cb\u5316 static \u5c40\u90e8\u53d8\u91cf\uff0c\u5176\u5185\u5bb9\u4e0d\u6765\u6e90\u4e8e\u4e8c\u8fdb\u5236\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u90e8\u5206\uff08\u4e5f\u5c31\u662f\u8bf4\uff1a\u4e8c\u8fdb\u5236\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u90e8\u5206\u6ca1\u6709\u672a\u521d\u59cb\u5316\u5168\u5c40\u53d8\u91cf\u548c\u672a\u521d\u59cb\u5316 static \u5c40\u90e8\u53d8\u91cf\uff09\u3002\u6839\u636e C \u8bed\u8a00\u6807\u51c6\u89c4\u5b9a\uff0c\u4ed6\u4eec\u7684\u521d\u59cb\u503c\u5fc5\u987b\u4e3a 0\uff0c\u56e0\u6b64 bss \u6bb5\u5b58\u653e\u7684\u662f\u5168 0\u3002\u5c06 bss \u6bb5\u6e05 0 \u7684\u5de5\u4f5c\u662f\u7531\u7cfb\u7edf\u5728\u52a0\u8f7d\u4e8c\u8fdb\u5236\u6587\u4ef6\u540e\uff0c\u5f00\u59cb\u6267\u884c\u7a0b\u5e8f\u524d\u5b8c\u6210\u7684\uff0c\u7cfb\u7edf\u6267\u884c\u8fd9\u4e2a\u6e05 0 \u64cd\u4f5c\u662f\u7531\u5185\u6838\u7684\u4e00\u6bb5\u4ee3\u7801\u5b8c\u6210\u7684\uff0c\u8fd9\u6bb5\u4ee3\u7801\u5c31\u662f\u5373\u5c06\u4ecb\u7ecd\u7684 exec \u7cfb\u7edf\u8c03\u7528\u3002\u81f3\u4e8e exec \u4ece\u5185\u5b58\u4ec0\u4e48\u5730\u65b9\u5f00\u59cb\u6e05 0 \u4ee5\u53ca\u8981\u6e05 0 \u591a\u5c11\u7a7a\u95f4\uff0c\u5219\u662f\u7531\u8bb0\u5f55\u5728\u4e8c\u8fdb\u5236\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u4fe1\u606f\u51b3\u5b9a\u7684\uff08\u5373\uff1a\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u8bb0\u5f55\u4e86 text\u3001data\u3001bss \u6bb5\u7684\u5927\u5c0f\uff09\u3002\u53ef\u4ee5\u7406\u89e3 bss \u6bb5\u662f\u7f16\u8bd1\u4e8c\u8fdb\u5236\u65f6\u5c31\u786e\u5b9a\u597d\u4e86\uff0c\u90a3\u4e48\u4e3a\u4ec0\u4e48\u4e0d\u662f\u7f16\u8bd1\u65f6\u5c31\u628a\u6570\u636e\u5168\u90e8\u7f6e\u4e3a 0\uff0c\u800c\u662f\u8981\u7b49 kernel \u7684 exec \u8c03\u7528\u6765\u505a\u5462\uff1f\u539f\u56e0\u5f88\u7b80\u5355\uff0c\u6bd4\u5982 bss \u6bb5\u6709 1000KB\uff0c\u90a3\u4e48\u7f16\u8bd1\u65f6\u5c31\u628a\u5b83\u7f6e\u4e3a 0\uff0c\u90a3\u4e48\u4e8c\u8fdb\u5236\u6587\u4ef6\u653e\u5728\u6587\u4ef6\u7cfb\u7edf\u4e0a\u5c31\u8981\u5360\u7528 1000KB \u5927\u5c0f\uff0c\u4f46\u662f\u60f3\u4e2a\u529e\u6cd5\u63cf\u8ff0\u4e00\u4e0b\u6211\u653e\u5230\u5185\u5b58\u91cc\u8fd0\u884c\u65f6\uff0c\u9700\u8981\u5360\u7528 1000KB \u5927\u5c0f\uff0c\u8fd9\u6bb5\u63cf\u8ff0\u672c\u8eab\u80af\u5b9a\u4e0d\u7528 1000KB \u5440\u3002\u6240\u4ee5 Linux \u7cfb\u7edf\u8bbe\u8ba1\u65f6\uff0c\u80af\u5b9a\u662f\u9009\u62e9\u4e86\u540e\u8005\u3002 Text, BSS, Data\u6bb5\u5728\u7f16\u8bd1\u65f6\u5df2\u7ecf\u51b3\u5b9a\u4e86\u8fdb\u7a0b\u5c06\u5360\u7528\u591a\u5c11VM\uff0cLinux\u4e0a\u53ef\u4ee5\u901a\u8fc7size\u547d\u4ee4\uff0c\u77e5\u9053\u8fd9\u4e9b\u4fe1\u606f\uff1a /usr/bin/size ./a.out 5 \u5185\u5b58\u7684\u6700\u9ad8\u7aef\uff08\u9ad8\u5730\u5740\uff09 \u5185\u5b58\u7684\u6700\u9ad8\u7aef\u5b58\u653e\u7684\u662f\u547d\u4ee4\u884c\u53c2\u6570\u548c\u73af\u5883\u53d8\u91cf\uff0c\u5c06\u547d\u4ee4\u884c\u53c2\u6570\u548c\u73af\u5883\u53d8\u91cf\u653e\u5230\u6307\u5b9a\u4f4d\u7f6e\u8fd9\u4e2a\u64cd\u4f5c\u662f\u7531 OS \u7684\u4e00\u6bb5\u4ee3\u7801\uff08exec \u7cfb\u7edf\u8c03\u7528\uff09\u5728\u52a0\u8f7d\u4e8c\u8fdb\u5236\u6587\u4ef6\u5230\u5185\u5b58\u540e\uff0c\u5f00\u59cb\u8fd0\u884c\u7a0b\u5e8f\u524d\u5b8c\u6210\u7684\u3002\u8fd9\u4e2a\u5e94\u8be5\u5f88\u597d\u7406\u89e3\uff0cLinux \u4e0a\u5f00\u542f\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u5728\u8be5\u8fdb\u7a0b\u5185\u90fd\u53ef\u4ee5\u8bfb\u5230\u547d\u4ee4\u884c\u53c2\u6570\u4ee5\u53ca\u73af\u5883\u53d8\u91cf\u3002 \u6b63\u5e38\u60c5\u51b5\u4e0b\uff0cLinux \u8fdb\u7a0b\u4e0d\u80fd\u5bf9\u7528\u6765\u5b58\u653e\u7a0b\u5e8f\u4ee3\u7801\u7684\u5185\u5b58\u533a\u57df\u6267\u884c\u5199\u64cd\u4f5c\uff0c\u5373\u7a0b\u5e8f\u4ee3\u7801\u662f\u4ee5\u53ea\u8bfb\u7684\u65b9\u5f0f\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u4f46\u5b83\u53ef\u4ee5\u88ab\u591a\u4e2a\u8fdb\u7a0b\u5b89\u5168\u7684\u5171\u4eab\u3002 6 \u5c0f\u7ed3\uff0c \u4e00\u4e2a\u8fdb\u7a0b(task_struct),\u5b83\u7684\u5185\u5b58\u6709\u5982\u4e0b\u533a\u5206\uff08\u4ece\u4f4e\u5730\u5740\u5411\u9ad8\u5730\u5740\u8bf4\uff09\uff1a text data\uff08 initialized data\uff09 bss \uff08 uninitialized data\uff09 heap \u672a\u5206\u914d\u7684\u865a\u62df\u7a7a\u95f4 stack \u547d\u4ee4\u884c\u53c2\u6570\u548c\u73af\u5883\u53d8\u91cf kernel space (\u4e8c) \u5347\u534e, \u5f15\u5165 Random Offset \u4e0a\u56fe\u4e2d\uff0c\u84dd\u8272\u90e8\u5206\u662f\u771f\u5b9e\u4f1a\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\u7684 VM\uff0c\u767d\u8272\u90e8\u5206\u662f\u4e0d\u4f1a\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\u7684 VM\u3002 \u95ee\u9898 1: \u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0 Radom brk offset ,Random mmap offset \u8fd9\u4e9b\uff1f \u7b54\u6848\uff1a \u5982\u679c\u6bcf\u4e2a\u8fdb\u7a0b\u7684 VM \u5730\u5740\u90fd\u662f\u4e00\u6a21\u4e00\u6837\u7684\u8bdd\uff0c\u5f88\u5bb9\u6613\u9020\u6210\u5b89\u5168\u95ee\u9898\uff0c\u56e0\u6b64 Linux \u901a\u8fc7 Radom \u6280\u672f\u52a0\u5f3a\u4e86\u8fd9\u65b9\u9762\u7684\u5b89\u5168\u3002 \u95ee\u9898 2: VM \u7684\u5730\u5740\uff0c\u4e0d\u662f\u4ece 0 \u5f00\u59cb\uff0c\u800c\u662f\u4ece 0x08048000 \u7b54\u6848: \u636e\u8bf4\u662f\u4e3a\u4e86\u6355\u83b7 NULL \u6307\u9488 (\u4e09) \u6808 (\u56db) \u5806\u7a7a\u95f4 \u4e3a\u4ec0\u4e48\u53eb\u5806\u7a7a\u95f4\u5462\uff1f\u8fd9\u91cc\u5206\u4e3a 2 \u5757\u5185\u5b58\uff0c\u4e00\u4e2a\u662f\u76f4\u63a5\u4f4d\u4e8e Stack \u4e0b\u9762\u7684\uff1a Memory Mapping Segment \uff0c\u53e6\u4e00\u4e2a\u662f\u4f4d\u4e8e Memory Mapping Segment \u4e0b\u9762\u7684 heap \u3002\u8fd9 2 \u5757\u5185\u5bb9\u548c\u8d77\u6765\u53eb\u5806\u7a7a\u95f4\u3002 \u6211\u4eec\u9996\u5148\u6765\u8bf4\u8bf4 Memory Mapping Segment 2.1 \u5185\u5b58\u6620\u5c04\u6bb5(Memory Mapping Segmengt) \u5728\u6808\u7684\u4e0b\u65b9\u662f\u5185\u5b58\u6620\u5c04\u6bb5\uff0c\u5185\u6838\u5c06\u6587\u4ef6\u7684\u5185\u5bb9\u76f4\u63a5\u6620\u5c04\u5230\u5185\u5b58\u3002\u4efb\u4f55\u5e94\u7528\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u901a\u8fc7 Linux \u7684 mmap() \u7cfb\u7edf\u8c03\u7528\u8bf7\u6c42\u8fd9\u79cd\u6620\u5c04\u3002\u5185\u5b58\u6620\u5c04\u662f\u4e00\u79cd\u65b9\u4fbf\u9ad8\u6548\u7684\u6587\u4ef6 I/O \u65b9\u5f0f\uff0c\u6240\u4ee5\u5b83\u88ab\u7528\u6765\u52a0\u8f7d\u52a8\u6001\u5e93\u3002\u521b\u5efa\u4e00\u4e2a\u4e0d\u5bf9\u5e94\u4e8e\u4efb\u4f55\u6587\u4ef6\u7684\u533f\u540d\u5185\u5b58\u6620\u5c04\u4e5f\u662f\u53ef\u80fd\u7684\uff0c\u6b64\u65b9\u6cd5\u7528\u4e8e\u5b58\u653e\u7a0b\u5e8f\u7684\u6570\u636e\u3002\u5728 Linux \u4e2d\uff0c\u5982\u679c\u4f60\u901a\u8fc7 malloc() \u8bf7\u6c42\u4e00\u5927\u5757\u5185\u5b58\uff0c C\u8fd0\u884c\u5e93 \u5c06\u4f1a\u521b\u5efa\u8fd9\u6837\u4e00\u4e2a \u533f\u540d\u6620\u5c04 \u800c\u4e0d\u662f\u4f7f\u7528 \u5806\u5185\u5b58 \u3002 \u201c\u5927\u5757\u201d \u610f\u5473\u7740\u6bd4 MMAP_THRESHOLD \u8fd8\u5927\uff0c\u7f3a\u7701 128KB \uff0c\u53ef\u4ee5\u901a\u8fc7 mallocp() \u8c03\u6574\u3002 \u5728 Linux\u4e2d \u5f53\u52a8\u6001\u5206\u914d\u5185\u5b58\u5927\u4e8e 128K \u65f6\uff0c\u4f1a\u8c03\u7528 mmap \u51fd\u6570\u5728 esp \u5230 break brk \u4e4b\u95f4\u627e\u4e00\u5757\u76f8\u5e94\u5927\u5c0f\u7684\u533a\u57df\u4f5c\u4e3a\u5185\u5b58\u6620\u5c04\u6bb5\u8fd4\u56de\u7ed9\u7528\u6237\u3002\u8fd9\u4e2a esp \u548c break brk \u4e4b\u95f4\uff0c\u5c31\u662f Memory Mapping Segment . \u9996\u5148\u8fd9\u4e2a Memory Mapping Segment \u80af\u5b9a\u662f \u6700\u5927\u6808\u7a7a\u95f4 \u548c break brk \u4e4b\u95f4\u7684\u7a7a\u95f4\uff0c\u81f3\u4e8e\u6700\u5927\u6808\u7a7a\u95f4\u662f\u4e0d\u662f\u5c31\u662f esp \u6307\u9488\u6307\u5411\u7684\u5730\u5740\uff0c\u8fd9\u4e2a\u4e0d\u6e05\u695a\u3002 \u5728 Memory Mapping Segment \u4e0a\u5206\u914d\u5185\u5b58\u79f0\u4e3a \u5185\u5b58\u6620\u5c04 \u3002 2.2 \u5806 \u5806\u7528\u4e8e\u8fd0\u884c\u65f6\u5185\u5b58\u5206\u914d\u3002 \u8fdb\u7a0b\u901a\u8fc7 malloc()\u7533\u8bf7\u5185\u5b58\uff0c\u5c0f\u4e8e 128KB \u65f6\uff0c\u4f1a\u5728\u5806\u4e0a\u5206\u914d\u3002\u662f\u6307\u8fd9\u6bb5\u7a7a\u95f4\u3002 \u5e76\u4e14\uff0c\u5b83\u7684\u5de5\u4f5c\u6a21\u5f0f\u8ddf\u6808\u7c7b\u4f3c\uff0c\u9075\u5b88 LIFO\u539f\u5219 \uff0c\u5373\u540e\u9762\u7533\u8bf7\u7684\u5185\u5b58\u4f1a\u5148\u88ab\u91ca\u653e\u3002 \u8fd9\u91cc\u7684\u91ca\u653e\uff0c\u4e0d\u662f\u771f\u6b63\u7684\u56de\u6536\uff0c\u53ea\u662f\u8c03\u6574 break brk \u6307\u9488\u7684\u4f4d\u7f6e\u3002\u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58\u548c\u5728 Memory Mapping Segment \u4e0a\u5206\u914d\u5185\u5b58\uff0c\u4e24\u8005\u7684\u533a\u522b\u662f \u5185\u5b58\u6620\u5c04\u6bb5 \u9500\u6bc1\u65f6\uff0c\u4f1a\u91ca\u653e\u5176\u6620\u5c04\u5230\u7684\u7269\u7406\u5185\u5b58\uff0c\u800c break brk \u6307\u5411\u7684\u6570\u636e\u88ab\u9500\u6bc1\u65f6\uff0c\u4e0d\u91ca\u653e\u5176\u7269\u7406\u5185\u5b58\uff0c\u53ea\u662f\u7b80\u5355\u5c06 break brk \u56de\u64a4\uff0c\u5176 \u865a\u62df\u5730\u5740 \u5230 \u7269\u7406\u5730\u5740 \u7684\u6620\u5c04\u4f9d\u65e7\u5b58\u5728\uff0c\u8fd9\u6837\u4f7f\u7684\u5f53\u518d\u9700\u8981\u5206\u914d\u5c0f\u989d\u5185\u5b58\u65f6\uff0c\u53ea\u9700\u8981\u589e\u52a0 break brk \u7684\u503c\uff0c\u7531\u4e8e\u8fd9\u6bb5\u865a\u62df\u5730\u5740\u4e0e\u7269\u7406\u5730\u5740\u7684\u6620\u5c04\u8fd8\u5b58\u5728\uff0c\u4e8e\u662f\u4e0d\u4f1a\u89e6\u53d1\u7f3a\u9875\u4e2d\u65ad\u3002\u53ea\u6709\u5728 break brk \u51cf\u5c11\u8db3\u591f\u591a\uff0c\u5360\u636e\u7269\u7406\u5185\u5b58\u7684\u7a7a\u95f2\u865a\u62df\u5185\u5b58\u8db3\u591f\u591a\u65f6\uff0c\u624d\u4f1a\u771f\u6b63\u91ca\u653e\u5b83\u4eec\u3002 2.3 \u5e94\u7528\u573a\u666f 1 malloc \u5c0f\u4e8e 128k \u7684\u5185\u5b58\uff0c\u4f7f\u7528 brk \u5206\u914d\u5185\u5b58\uff0c\u5c06_edata \u5f80\u9ad8\u5730\u5740\u63a8(\u53ea\u5206\u914d\u865a\u62df\u7a7a\u95f4\uff0c\u4e0d\u5bf9\u5e94\u7269\u7406\u5185\u5b58(\u56e0\u6b64\u6ca1\u6709\u521d\u59cb\u5316)\uff0c\u7b2c\u4e00\u6b21\u8bfb/\u5199\u6570\u636e\u65f6\uff0c\u5f15\u8d77\u5185\u6838\u7f3a\u9875\u4e2d\u65ad\uff0c\u5185\u6838\u624d\u5206\u914d\u5bf9\u5e94\u7684\u7269\u7406\u5185\u5b58\uff0c\u7136\u540e\u865a\u62df\u5730\u5740\u7a7a\u95f4\u5efa\u7acb\u6620\u5c04\u5173\u7cfb)\uff0c\u5982\u4e0b\u56fe\uff1a 1.1 \u8fdb\u7a0b\u542f\u52a8\u7684\u65f6\u5019\uff0c\u5176\uff08\u865a\u62df\uff09\u5185\u5b58\u7a7a\u95f4\u7684\u521d\u59cb\u5e03\u5c40\u5982\u56fe 1 \u6240\u793a\u3002 \u5176\u4e2d\uff0cmmap \u5185\u5b58\u6620\u5c04\u6587\u4ef6\u662f\u5728\u5806\u548c\u6808\u7684\u4e2d\u95f4\uff08\u4f8b\u5982 libc-2.2.93.so\uff0c\u5176\u5b83\u6570\u636e\u6587\u4ef6\u7b49\uff09\uff0c\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u7701\u7565\u4e86\u5185\u5b58\u6620\u5c04\u6587\u4ef6\u3002 _edata \u6307\u9488\uff08glibc \u91cc\u9762\u5b9a\u4e49\uff09\u6307\u5411\u6570\u636e\u6bb5\u7684\u6700\u9ad8\u5730\u5740\u3002 1.2 \u8fdb\u7a0b\u8c03\u7528 A=malloc(30K)\u4ee5\u540e\uff0c\u5185\u5b58\u7a7a\u95f4\u5982\u56fe 2\uff1a malloc \u51fd\u6570\u4f1a\u8c03\u7528 brk \u7cfb\u7edf\u8c03\u7528\uff0c\u5c06_edata \u6307\u9488\u5f80\u9ad8\u5730\u5740\u63a8 30K\uff0c\u5c31\u5b8c\u6210\u865a\u62df\u5185\u5b58\u5206\u914d\u3002 \u4f60\u53ef\u80fd\u4f1a\u95ee\uff1a\u53ea\u8981\u628a_edata+30K \u5c31\u5b8c\u6210\u5185\u5b58\u5206\u914d\u4e86\uff1f \u4e8b\u5b9e\u662f\u8fd9\u6837\u7684\uff0c_edata+30K \u53ea\u662f\u5b8c\u6210\u865a\u62df\u5730\u5740\u7684\u5206\u914d\uff0cA \u8fd9\u5757\u5185\u5b58\u73b0\u5728\u8fd8\u662f\u6ca1\u6709\u7269\u7406\u9875\u4e0e\u4e4b\u5bf9\u5e94\u7684\uff0c\u7b49\u5230\u8fdb\u7a0b\u7b2c\u4e00\u6b21\u8bfb\u5199 A \u8fd9\u5757\u5185\u5b58\u7684\u65f6\u5019\uff0c\u53d1\u751f\u7f3a\u9875\u4e2d\u65ad\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u5185\u6838\u624d\u5206\u914d A \u8fd9\u5757\u5185\u5b58\u5bf9\u5e94\u7684\u7269\u7406\u9875\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u7528 malloc \u5206\u914d\u4e86 A \u8fd9\u5757\u5185\u5bb9\uff0c\u7136\u540e\u4ece\u6765\u4e0d\u8bbf\u95ee\u5b83\uff0c\u90a3\u4e48\uff0cA \u5bf9\u5e94\u7684\u7269\u7406\u9875\u662f\u4e0d\u4f1a\u88ab\u5206\u914d\u7684\u3002 1.3 \u8fdb\u7a0b\u8c03\u7528 B=malloc(40K)\u4ee5\u540e\uff0c\u5185\u5b58\u7a7a\u95f4\u5982\u56fe 3\u3002 2 malloc \u5927\u4e8e 128k \u7684\u5185\u5b58\uff0c\u4f7f\u7528 mmap \u5206\u914d\u5185\u5b58\uff0c\u5728\u5806\u548c\u6808\u4e4b\u95f4\u627e\u4e00\u5757\u7a7a\u95f2\u5185\u5b58\u5206\u914d(\u5bf9\u5e94\u72ec\u7acb\u5185\u5b58\uff0c\u800c\u4e14\u521d\u59cb\u5316\u4e3a 0)\uff0c\u5982\u4e0b\u56fe\uff1a 2.1 \u8fdb\u7a0b\u8c03\u7528 C=malloc(200K)\u4ee5\u540e\uff0c\u5185\u5b58\u7a7a\u95f4\u5982\u56fe 4\uff1a \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmalloc \u51fd\u6570\u5206\u914d\u5185\u5b58\uff0c\u5982\u679c\u8bf7\u6c42\u5185\u5b58\u5927\u4e8e 128K\uff08\u53ef\u7531 M_MMAP_THRESHOLD \u9009\u9879\u8c03\u8282\uff09\uff0c\u90a3\u5c31\u4e0d\u662f\u53bb\u63a8_edata \u6307\u9488\u4e86\uff0c\u800c\u662f\u5229\u7528 mmap \u7cfb\u7edf\u8c03\u7528\uff0c\u4ece\u5806\u548c\u6808\u7684\u4e2d\u95f4\u5206\u914d\u4e00\u5757\u865a\u62df\u5185\u5b58\u3002 \u8fd9\u6837\u5b50\u505a\u4e3b\u8981\u662f\u56e0\u4e3a:: brk \u5206\u914d\u7684\u5185\u5b58\u9700\u8981\u7b49\u5230\u9ad8\u5730\u5740\u5185\u5b58\u91ca\u653e\u4ee5\u540e\u624d\u80fd\u91ca\u653e\uff08\u4f8b\u5982\uff0c\u5728 B \u91ca\u653e\u4e4b\u524d\uff0cA \u662f\u4e0d\u53ef\u80fd\u91ca\u653e\u7684\uff0c\u8fd9\u5c31\u662f\u5185\u5b58\u788e\u7247\u4ea7\u751f\u7684\u539f\u56e0\uff0c\u4ec0\u4e48\u65f6\u5019\u7d27\u7f29\u770b\u4e0b\u9762\uff09\uff0c\u800c mmap \u5206\u914d\u7684\u5185\u5b58\u53ef\u4ee5\u5355\u72ec\u91ca\u653e\u3002 \u5f53\u7136\uff0c\u8fd8\u6709\u5176\u5b83\u7684\u597d\u5904\uff0c\u4e5f\u6709\u574f\u5904\uff0c\u518d\u5177\u4f53\u4e0b\u53bb\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u53bb\u770b glibc \u91cc\u9762 malloc \u7684\u4ee3\u7801\u4e86\u3002 2.2 \u8fdb\u7a0b\u8c03\u7528 D=malloc(100K)\u4ee5\u540e\uff0c\u5185\u5b58\u7a7a\u95f4\u5982\u56fe 5\uff1b 2.3 \u8fdb\u7a0b\u8c03\u7528 free(C)\u4ee5\u540e\uff0cC \u5bf9\u5e94\u7684\u865a\u62df\u5185\u5b58\u548c\u7269\u7406\u5185\u5b58\u4e00\u8d77\u91ca\u653e\u3002 2.4 \u8fdb\u7a0b\u8c03\u7528 free(B)\u4ee5\u540e\uff0c\u5982\u56fe 7 \u6240\u793a\uff1a B \u5bf9\u5e94\u7684\u865a\u62df\u5185\u5b58\u548c\u7269\u7406\u5185\u5b58\u90fd\u6ca1\u6709\u91ca\u653e\uff0c\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a_edata \u6307\u9488\uff0c\u5982\u679c\u5f80\u56de\u63a8\uff0c\u90a3\u4e48 D \u8fd9\u5757\u5185\u5b58\u600e\u4e48\u529e\u5462\uff1f \u5f53\u7136\uff0cB \u8fd9\u5757\u5185\u5b58\uff0c\u662f\u53ef\u4ee5\u91cd\u7528\u7684\uff0c\u5982\u679c\u8fd9\u4e2a\u65f6\u5019\u518d\u6765\u4e00\u4e2a 40K \u7684\u8bf7\u6c42\uff0c\u90a3\u4e48 malloc \u5f88\u53ef\u80fd\u5c31\u628a B \u8fd9\u5757\u5185\u5b58\u8fd4\u56de\u56de\u53bb\u4e86\u3002 2.5 \u8fdb\u7a0b\u8c03\u7528 free(D)\u4ee5\u540e\uff0c\u5982\u56fe 8 \u6240\u793a\uff1a B \u548c D \u8fde\u63a5\u8d77\u6765\uff0c\u53d8\u6210\u4e00\u5757 140K \u7684\u7a7a\u95f2\u5185\u5b58\u3002 2.6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff1a \u5f53\u6700\u9ad8\u5730\u5740\u7a7a\u95f4\u7684\u7a7a\u95f2\u5185\u5b58\u8d85\u8fc7 128K\uff08\u53ef\u7531 M_TRIM_THRESHOLD \u9009\u9879\u8c03\u8282\uff09\u65f6\uff0c\u6267\u884c\u5185\u5b58\u7d27\u7f29\u64cd\u4f5c\uff08trim\uff09\u3002\u5728\u4e0a\u4e00\u4e2a\u6b65\u9aa4 free \u7684\u65f6\u5019\uff0c\u53d1\u73b0\u6700\u9ad8\u5730\u5740\u7a7a\u95f2\u5185\u5b58\u8d85\u8fc7 128K\uff0c\u4e8e\u662f\u5185\u5b58\u7d27\u7f29\uff0c\u53d8\u6210\u56fe 9 \u6240\u793a\u3002 \u4e09 \u6838\u5fc3\u6570\u636e\u7ed3\u6784\u53ca\u5176\u5173\u8054\u5173\u7cfb 1 struct mm_struct mm_struct struct mm_struct { //\u6307\u5411\u7ebf\u6027\u533a\u5bf9\u8c61\u7684\u94fe\u8868\u5934 struct vm_area_struct * mmap; /* list of VMAs */ //\u6307\u5411\u7ebf\u6027\u533a\u5bf9\u8c61\u7684\u7ea2\u9ed1\u6811 struct rb_root mm_rb; //\u6307\u5411\u6700\u8fd1\u627e\u5230\u7684\u865a\u62df\u533a\u95f4 struct vm_area_struct * mmap_cache; /* last find_vma result */ //\u7528\u6765\u5728\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u4e2d\u641c\u7d22\u6709\u6548\u7684\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u7684\u51fd\u6570 unsigned long (*get_unmapped_area) (struct file *filp, unsigned long addr, unsigned long len, unsigned long pgoff, unsigned long flags); unsigned long (*get_unmapped_exec_area) (struct file *filp, unsigned long addr, unsigned long len, unsigned long pgoff, unsigned long flags); //\u91ca\u653e\u7ebf\u6027\u533a\u65f6\u8c03\u7528\u7684\u65b9\u6cd5\uff0c void (*unmap_area) (struct mm_struct *mm, unsigned long addr); //\u6807\u8bc6\u7b2c\u4e00\u4e2a\u5206\u914d\u6587\u4ef6\u5185\u5b58\u6620\u5c04\u7684\u7ebf\u6027\u5730\u5740 unsigned long mmap_base; /* base of mmap area */ unsigned long task_size; /* size of task vm space */ /* * RHEL6 special for bug 790921: this same variable can mean * two different things. If sysctl_unmap_area_factor is zero, * this means the largest hole below free_area_cache. If the * sysctl is set to a positive value, this variable is used * to count how much memory has been munmapped from this process * since the last time free_area_cache was reset back to mmap_base. * This is ugly, but necessary to preserve kABI. */ unsigned long cached_hole_size; //\u5185\u6838\u8fdb\u7a0b\u641c\u7d22\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u4e2d\u7ebf\u6027\u5730\u5740\u7684\u7a7a\u95f4\u7a7a\u95f4 unsigned long free_area_cache; /* first hole of size cached_hole_size or larger */ //\u6307\u5411\u9875\u8868\u7684\u76ee\u5f55 pgd_t * pgd; //\u5171\u4eab\u8fdb\u7a0b\u65f6\u7684\u4e2a\u6570 atomic_t mm_users; /* How many users with user space? */ //\u5185\u5b58\u63cf\u8ff0\u7b26\u7684\u4e3b\u4f7f\u7528\u8ba1\u6570\u5668\uff0c\u91c7\u7528\u5f15\u7528\u8ba1\u6570\u7684\u539f\u7406\uff0c\u5f53\u4e3a0\u65f6\u4ee3\u8868\u65e0\u7528\u6237\u518d\u6b21\u4f7f\u7528 atomic_t mm_count; /* How many references to \"struct mm_struct\" (users count as 1) */ //\u7ebf\u6027\u533a\u7684\u4e2a\u6570 int map_count; /* number of VMAs */ struct rw_semaphore mmap_sem; //\u4fdd\u62a4\u4efb\u52a1\u9875\u8868\u548c\u5f15\u7528\u8ba1\u6570\u7684\u9501 spinlock_t page_table_lock; /* Protects page tables and some counters */ //mm_struct\u7ed3\u6784\uff0c\u7b2c\u4e00\u4e2a\u6210\u5458\u5c31\u662f\u521d\u59cb\u5316\u7684mm_struct\u7ed3\u6784\uff0c struct list_head mmlist; /* List of maybe swapped mm's. These are globally strung * together off init_mm.mmlist, and are protected * by mmlist_lock */ /* Special counters, in some configurations protected by the * page_table_lock, in other configurations by being atomic. */ mm_counter_t _file_rss; mm_counter_t _anon_rss; mm_counter_t _swap_usage; //\u8fdb\u7a0b\u62e5\u6709\u7684\u6700\u5927\u9875\u8868\u6570\u76ee unsigned long hiwater_rss; /* High-watermark of RSS usage */\u3001 //\u8fdb\u7a0b\u7ebf\u6027\u533a\u7684\u6700\u5927\u9875\u8868\u6570\u76ee unsigned long hiwater_vm; /* High-water virtual memory usage */ //\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u7684\u5927\u5c0f\uff0c\u9501\u4f4f\u65e0\u6cd5\u6362\u9875\u7684\u4e2a\u6570\uff0c\u5171\u4eab\u6587\u4ef6\u5185\u5b58\u6620\u5c04\u7684\u9875\u6570\uff0c\u53ef\u6267\u884c\u5185\u5b58\u6620\u5c04\u4e2d\u7684\u9875\u6570 unsigned long total_vm, locked_vm, shared_vm, exec_vm; //\u7528\u6237\u6001\u5806\u6808\u7684\u9875\u6570\uff0c unsigned long stack_vm, reserved_vm, def_flags, nr_ptes; //\u7ef4\u62a4\u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5 unsigned long start_code, end_code, start_data, end_data; //\u7ef4\u62a4\u5806\u548c\u6808 unsigned long start_brk, brk, start_stack; //\u7ef4\u62a4\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u547d\u4ee4\u884c\u53c2\u6570\u7684\u8d77\u59cb\u5730\u5740\u548c\u6700\u540e\u5730\u5740\uff0c\u4ee5\u53ca\u73af\u5883\u53d8\u91cf\u7684\u8d77\u59cb\u5730\u5740\u548c\u6700\u540e\u5730\u5740 unsigned long arg_start, arg_end, env_start, env_end; unsigned long saved_auxv[AT_VECTOR_SIZE]; /* for /proc/PID/auxv */ struct linux_binfmt *binfmt; cpumask_t cpu_vm_mask; /* Architecture-specific MM context */ mm_context_t context; /* Swap token stuff */ /* * Last value of global fault stamp as seen by this process. * In other words, this value gives an indication of how long * it has been since this task got the token. * Look at mm/thrash.c */ unsigned int faultstamp; unsigned int token_priority; unsigned int last_interval; //\u7ebf\u6027\u533a\u7684\u9ed8\u8ba4\u8bbf\u95ee\u6807\u5fd7 unsigned long flags; /* Must use atomic bitops to access the bits */ struct core_state *core_state; /* coredumping support */ #ifdef CONFIG_AIO spinlock_t ioctx_lock; struct hlist_head ioctx_list; #endif #ifdef CONFIG_MM_OWNER /* * \"owner\" points to a task that is regarded as the canonical * user/owner of this mm. All of the following must be true in * order for it to be changed: * * current == mm->owner * current->mm != mm * new_owner->mm == mm * new_owner->alloc_lock is held */ struct task_struct *owner; #endif #ifdef CONFIG_PROC_FS /* store ref to file /proc/<pid>/exe symlink points to */ struct file *exe_file; unsigned long num_exe_file_vmas; #endif #ifdef CONFIG_MMU_NOTIFIER struct mmu_notifier_mm *mmu_notifier_mm; #endif #ifdef CONFIG_TRANSPARENT_HUGEPAGE pgtable_t pmd_huge_pte; /* protected by page_table_lock */ #endif /* reserved for Red Hat */ #ifdef __GENKSYMS__ unsigned long rh_reserved[2]; #else /* How many tasks sharing this mm are OOM_DISABLE */ union { unsigned long rh_reserved_aux; atomic_t oom_disable_count; }; /* base of lib map area (ASCII armour) */ unsigned long shlib_base; #endif }; 2 struct vm_area_struct struct vm_area_struct { /* The first cache line has the info for VMA tree walking. */ unsigned long vm_start; /* Our start address within vm_mm. */ unsigned long vm_end; /* The first byte after our end address within vm_mm. */ /* linked list of VM areas per task, sorted by address */ struct vm_area_struct *vm_next, *vm_prev; struct rb_node vm_rb; unsigned long rb_subtree_gap; /* Second cache line starts here. */ struct mm_struct *vm_mm; /* The address space we belong to. */ pgprot_t vm_page_prot; /* Access permissions of this VMA. */ unsigned long vm_flags; /* Flags, see mm.h. */ struct { struct rb_node rb; unsigned long rb_subtree_last; } shared; struct list_head anon_vma_chain; /* Serialized by mmap_sem & * page_table_lock */ struct anon_vma *anon_vma; /* Serialized by page_table_lock */ /* Function pointers to deal with this struct. */ const struct vm_operations_struct *vm_ops; /* Information about our backing store: */ unsigned long vm_pgoff; /* Offset (within vm_file) in PAGE_SIZE units */ struct file * vm_file; /* File we map to (can be NULL). */ void * vm_private_data; /* was vm_pte (shared mem) */ #ifdef CONFIG_SWAP atomic_long_t swap_readahead_info; #endif #ifndef CONFIG_MMU struct vm_region *vm_region; /* NOMMU mapping region */ #endif #ifdef CONFIG_NUMA struct mempolicy *vm_policy; /* NUMA policy for the VMA */ #endif struct vm_userfaultfd_ctx vm_userfaultfd_ctx; } __randomize_layout; 3 /proc/${pid}/maps \u8be5\u663e\u793a\u8fdb\u7a0b\u6620\u5c04\u4e86\u7684\u5185\u5b58\u533a\u57df\u548c\u8bbf\u95ee\u6743\u9650\u3002\u5bf9\u5e94\u5185\u6838\u4e2d\u7684\u64cd\u4f5c\u96c6\u4e3a proc_pid_maps_op\uff0c\u5177\u4f53\u7684\u5bfc\u51fa\u51fd\u6570\u4e3a show_map\u3002\u5185\u6838\u4e2d\u8fdb\u7a0b\u7684\u4e00\u6bb5\u5730\u5740\u7a7a\u95f4\u7528\u4e00\u4e2a vm_area_struct \u7ed3\u6784\u4f53\u8868\u793a\uff0c\u6240\u6709\u5730\u5740\u7a7a\u95f4\u5b58\u50a8\u5728 task->mm->mmap \u94fe\u8868\u4e2d\u3002 \u4e00\u4e2a\u6587\u4ef6\u53ef\u4ee5\u6620\u5c04\u5230\u8fdb\u7a0b\u7684\u4e00\u6bb5\u5185\u5b58\u533a\u57df\u4e2d\uff0c\u6620\u5c04\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4fdd\u5b58\u5728 vm_area_struct->vm_file \u57df\u4e2d\uff0c\u8fd9\u79cd\u5185\u5b58\u533a\u57df\u53eb\u505a\u6709\u540d\u5185\u5b58\u533a\u57df\uff0c\u76f8\u53cd\uff0c\u5c5e\u4e8e\u533f\u540d\u6620\u5c04\u5185\u5b58\u533a\u57df\u3002vm_area_struct \u6bcf\u9879\u5bf9\u5e94\u89e3\u6790\u5982\u4e0b\u8868\u6240\u793a","title":"\u7b2c\u4e09\u7bc7 \u8fdb\u7a0b\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4ecb\u7ecd"},{"location":"chapter_6/3_virtual_memory/#_1","text":"\u672c\u6587\u9610\u8ff0 Linux \u8fdb\u7a0b\u865a\u62df\u5185\u5b58\u76f8\u5173\u6982\u5ff5","title":"\u6982\u8ff0"},{"location":"chapter_6/3_virtual_memory/#_2","text":"1 \u8fdb\u7a0b\u770b\u5230\u7684\u90fd\u662f\u865a\u62df\u5185\u5b58\uff0c\u4ee5\u4e3a\u81ea\u5df1\u5360\u6709\u6574\u4e2a\u5185\u5b58\u4ee5\u53ca CPU \u8d44\u6e90\u3002\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff1a 1.1 \u5c31\u7b97\u6240\u6709\u8fdb\u7a0b\u6216\u8005\u67d0\u4e2a\u8fdb\u7a0b\u7684\u5185\u5b58\u9700\u6c42\u603b\u548c\u5927\u4e8e\u5b9e\u9645\u7684\u7269\u7406\u5185\u5b58\uff0c\u7cfb\u7edf\u4e0a\u4ecd\u7136\u53ef\u4ee5\u8fd0\u884c\u8d77\u6765\u8fd9\u4e9b\u8fdb\u7a0b\uff0c\u5e76\u4e14\u53ef\u4ee5\u505a\u5230\u540c\u65f6\u8fd0\u884c\u8fd9\u4e9b\u8fdb\u7a0b\u3002 1.2 Linux \u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u8303\u56f4\u4e3a 0 \uff5e 4G\uff0cLinux \u5185\u6838\u5c06\u8fd9 4G \u5b57\u8282\u7684\u7a7a\u95f4\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u5c06\u6700\u9ad8\u7684 1G \u5b57\u8282\uff08\u4ece\u865a\u62df\u5730\u5740 0xC0000000 \u5230 0xFFFFFFFF\uff09\u4f9b\u5185\u6838\u4f7f\u7528\uff0c\u79f0\u4e3a \u5185\u6838\u7a7a\u95f4 \u3002\u800c\u5c06\u8f83\u4f4e\u7684 3G \u5b57\u8282\uff08\u4ece\u865a\u62df\u5730\u5740 0x00000000 \u5230 0xBFFFFFFF\uff09\u4f9b\u5404\u4e2a\u8fdb\u7a0b\u4f7f\u7528\uff0c\u79f0\u4e3a \u7528\u6237\u7a7a\u95f4 \u3002 1.3 \u56e0\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u8fdb\u5165\u5185\u6838\uff0c\u56e0\u6b64\uff0cLinux \u5185\u6838\u7531\u7cfb\u7edf\u5185\u7684\u6240\u6709\u8fdb\u7a0b\u5171\u4eab\u3002\u4e8e\u662f\uff0c\u4ece\u5177\u4f53\u8fdb\u7a0b\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u62e5\u6709 4G \u5b57\u8282\u7684\u865a\u62df\u7a7a\u95f4\u3002 1.4 Linux \u4f7f\u7528\u4e24\u7ea7\u4fdd\u62a4\u673a\u5236\uff1a0 \u7ea7\u4f9b\u5185\u6838\u4f7f\u7528\uff0c3 \u7ea7\u4f9b\u7528\u6237\u7a0b\u5e8f\u4f7f\u7528\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u6709\u5404\u81ea\u7684\u79c1\u6709\u7528\u6237\u7a7a\u95f4\uff080 \uff5e 3G\uff09\uff0c\u8fd9\u4e2a\u7a7a\u95f4\u5bf9\u7cfb\u7edf\u4e2d\u7684\u5176\u4ed6\u8fdb\u7a0b\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u6700\u9ad8\u7684 1GB \u5b57\u8282\u865a\u62df\u5185\u6838\u7a7a\u95f4\u5219\u4e3a\u6240\u6709\u8fdb\u7a0b\u4ee5\u53ca\u5185\u6838\u6240\u5171\u4eab\u3002 1.5 \u5185\u6838\u7a7a\u95f4\u4e2d\u5b58\u653e\u7684\u662f\u5185\u6838\u4ee3\u7801\u548c\u6570\u636e\uff0c\u800c\u8fdb\u7a0b\u7684\u7528\u6237\u7a7a\u95f4\u4e2d\u5b58\u653e\u7684\u662f\u7528\u6237\u7a0b\u5e8f\u7684\u4ee3\u7801\u548c\u6570\u636e\u3002\u4e0d\u7ba1\u662f\u5185\u6838\u7a7a\u95f4\u8fd8\u662f\u7528\u6237\u7a7a\u95f4\uff0c\u5b83\u4eec\u90fd\u5904\u4e8e\u865a\u62df\u7a7a\u95f4\u4e2d\u3002 \u867d\u7136\u5185\u6838\u7a7a\u95f4\u5360\u636e\u4e86\u6bcf\u4e2a\u865a\u62df\u7a7a\u95f4\u4e2d\u7684\u6700\u9ad8 1GB \u5b57\u8282\uff0c\u4f46\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\u5374\u603b\u662f\u4ece\u6700\u4f4e\u5730\u5740\uff080x00000000\uff09\uff0c\u53e6\u5916\uff0c\u4f7f\u7528\u865a\u62df\u5730\u5740\u53ef\u4ee5\u5f88\u597d\u7684\u4fdd\u62a4\u5185\u6838\u7a7a\u95f4\u88ab\u7528\u6237\u7a7a\u95f4\u7834\u574f\uff0c\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u8f6c\u6362\u8fc7\u7a0b\u6709\u64cd\u4f5c\u7cfb\u7edf\u548c CPU \u5171\u540c\u5b8c\u6210(\u64cd\u4f5c\u7cfb\u7edf\u4e3a CPU \u8bbe\u7f6e\u597d\u9875\u8868\uff0cCPU \u901a\u8fc7 MMU \u5355\u5143\u8fdb\u884c\u5730\u5740\u8f6c\u6362)\u3002 2 \u591a\u4efb\u52a1\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u90fd\u8fd0\u884c\u5728\u4e00\u4e2a\u5c5e\u4e8e\u5b83\u81ea\u5df1\u7684\u5185\u5b58\u6c99\u76d2\u4e2d\uff0c\u8fd9\u4e2a\u6c99\u76d2\u5c31\u662f\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff08virtual address space\uff09\uff0c\u5728 32 \u4f4d\u6a21\u5f0f\u4e0b\uff0c\u5b83\u603b\u662f\u4e00\u4e2a 4GB \u7684\u5185\u5b58\u5730\u5740\u5757\u3002\u8fd9\u4e9b\u865a\u62df\u5730\u5740\u901a\u8fc7\u9875\u8868\uff08page table\uff09\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\uff0c\u9875\u8868\u7531\u64cd\u4f5c\u7cfb\u7edf\u7ef4\u62a4\u5e76\u88ab\u5904\u7406\u5668\u5f15\u7528\u3002\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u62e5\u6709\u4e00\u5957\u5c5e\u4e8e\u5b83\u81ea\u5df1\u7684\u9875\u8868\u3002 2.1 \u6bcf\u4e2a\u8fdb\u7a0b\u6709\u4e00\u4e2a page table ,\u5bf9\u5e94\u81ea\u5df1\u7684\u7269\u7406\u5185\u5b58\u533a\u57df 3 \u7269\u7406\u5185\u5b58\u5206\u914d\u7684\u6700\u5c0f\u5355\u4f4d\u662f\u4e00\u4e2a\u9875\uff0cpage\uff0c\u5355\u4f4d\u4e3a 4KB\uff1b \u901a\u8fc7 getconf PAGESIZE \u67e5\u770b \u4e3a\u4ec0\u4e48\u662f 4096 \u5462\uff1f\u662f\u5728\u5185\u6838\u6e90\u4ee3\u7801\u91cc\u5199\u6b7b\u7684","title":"\u4e00 \u865a\u62df\u5185\u5b58\u548c\u7269\u7406\u5185\u5b58\u7684\u6982\u5ff5"},{"location":"chapter_6/3_virtual_memory/#virtual-memory","text":"\u5982\u679c\u662f 32 \u4f4d\u7684 Linux \u7cfb\u7edf\uff0864 \u4f4d\u7684 Linux \u7cfb\u7edf\uff0c\u5e94\u8be5\u7c7b\u4f3c\uff09\uff0c\u90a3\u4e48\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u662f 4GB \u7684 virtual memory \u5730\u5740\u7a7a\u95f4\uff1b\u5982\u4e0b\uff1a","title":"\u4e8c \u8fdb\u7a0b\u7684 virtual memory \u793a\u610f\u56fe"},{"location":"chapter_6/3_virtual_memory/#3gb-user-space","text":"\u5176\u793a\u610f\u56fe\u5982\u4e0b\uff1a 1 text\uff1a\u4ee3\u7801\u6bb5\u3002\u5b58\u653e\u7684\u662f\u7a0b\u5e8f\u7684\u5168\u90e8\u4ee3\u7801\uff08\u6307\u4ee4\uff09\uff0c\u6765\u6e90\u4e8e\u4e8c\u8fdb\u5236\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u90e8\u5206 2 initialized data\uff08\u7b80\u79f0 data \u6bb5\uff09\u548c uninitialized data\uff08\u7b80\u79f0 bss \u6bb5\uff09\u7ec4\u6210\u4e86\u6570\u636e\u6bb5\u3002\u5176\u4e2d initialized data \u7b80\u79f0 data\uff0c uninitialized data \u7b80\u79f0 bss 3 data \u6bb5\u5b58\u653e\u7684\u662f\u5df2\u521d\u59cb\u5316\u5168\u5c40\u53d8\u91cf\u548c\u5df2\u521d\u59cb\u5316 static \u5c40\u90e8\u53d8\u91cf\uff0c\u6765\u6e90\u4e8e\u4e8c\u8fdb\u5236\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u90e8\u5206\uff1b 4 bss \u6bb5\u5b58\u653e\u7684\u662f\u672a\u521d\u59cb\u5316\u5168\u5c40\u53d8\u91cf\u548c\u672a\u521d\u59cb\u5316 static \u5c40\u90e8\u53d8\u91cf\uff0c\u5176\u5185\u5bb9\u4e0d\u6765\u6e90\u4e8e\u4e8c\u8fdb\u5236\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u90e8\u5206\uff08\u4e5f\u5c31\u662f\u8bf4\uff1a\u4e8c\u8fdb\u5236\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u90e8\u5206\u6ca1\u6709\u672a\u521d\u59cb\u5316\u5168\u5c40\u53d8\u91cf\u548c\u672a\u521d\u59cb\u5316 static \u5c40\u90e8\u53d8\u91cf\uff09\u3002\u6839\u636e C \u8bed\u8a00\u6807\u51c6\u89c4\u5b9a\uff0c\u4ed6\u4eec\u7684\u521d\u59cb\u503c\u5fc5\u987b\u4e3a 0\uff0c\u56e0\u6b64 bss \u6bb5\u5b58\u653e\u7684\u662f\u5168 0\u3002\u5c06 bss \u6bb5\u6e05 0 \u7684\u5de5\u4f5c\u662f\u7531\u7cfb\u7edf\u5728\u52a0\u8f7d\u4e8c\u8fdb\u5236\u6587\u4ef6\u540e\uff0c\u5f00\u59cb\u6267\u884c\u7a0b\u5e8f\u524d\u5b8c\u6210\u7684\uff0c\u7cfb\u7edf\u6267\u884c\u8fd9\u4e2a\u6e05 0 \u64cd\u4f5c\u662f\u7531\u5185\u6838\u7684\u4e00\u6bb5\u4ee3\u7801\u5b8c\u6210\u7684\uff0c\u8fd9\u6bb5\u4ee3\u7801\u5c31\u662f\u5373\u5c06\u4ecb\u7ecd\u7684 exec \u7cfb\u7edf\u8c03\u7528\u3002\u81f3\u4e8e exec \u4ece\u5185\u5b58\u4ec0\u4e48\u5730\u65b9\u5f00\u59cb\u6e05 0 \u4ee5\u53ca\u8981\u6e05 0 \u591a\u5c11\u7a7a\u95f4\uff0c\u5219\u662f\u7531\u8bb0\u5f55\u5728\u4e8c\u8fdb\u5236\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u4fe1\u606f\u51b3\u5b9a\u7684\uff08\u5373\uff1a\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u8bb0\u5f55\u4e86 text\u3001data\u3001bss \u6bb5\u7684\u5927\u5c0f\uff09\u3002\u53ef\u4ee5\u7406\u89e3 bss \u6bb5\u662f\u7f16\u8bd1\u4e8c\u8fdb\u5236\u65f6\u5c31\u786e\u5b9a\u597d\u4e86\uff0c\u90a3\u4e48\u4e3a\u4ec0\u4e48\u4e0d\u662f\u7f16\u8bd1\u65f6\u5c31\u628a\u6570\u636e\u5168\u90e8\u7f6e\u4e3a 0\uff0c\u800c\u662f\u8981\u7b49 kernel \u7684 exec \u8c03\u7528\u6765\u505a\u5462\uff1f\u539f\u56e0\u5f88\u7b80\u5355\uff0c\u6bd4\u5982 bss \u6bb5\u6709 1000KB\uff0c\u90a3\u4e48\u7f16\u8bd1\u65f6\u5c31\u628a\u5b83\u7f6e\u4e3a 0\uff0c\u90a3\u4e48\u4e8c\u8fdb\u5236\u6587\u4ef6\u653e\u5728\u6587\u4ef6\u7cfb\u7edf\u4e0a\u5c31\u8981\u5360\u7528 1000KB \u5927\u5c0f\uff0c\u4f46\u662f\u60f3\u4e2a\u529e\u6cd5\u63cf\u8ff0\u4e00\u4e0b\u6211\u653e\u5230\u5185\u5b58\u91cc\u8fd0\u884c\u65f6\uff0c\u9700\u8981\u5360\u7528 1000KB \u5927\u5c0f\uff0c\u8fd9\u6bb5\u63cf\u8ff0\u672c\u8eab\u80af\u5b9a\u4e0d\u7528 1000KB \u5440\u3002\u6240\u4ee5 Linux \u7cfb\u7edf\u8bbe\u8ba1\u65f6\uff0c\u80af\u5b9a\u662f\u9009\u62e9\u4e86\u540e\u8005\u3002 Text, BSS, Data\u6bb5\u5728\u7f16\u8bd1\u65f6\u5df2\u7ecf\u51b3\u5b9a\u4e86\u8fdb\u7a0b\u5c06\u5360\u7528\u591a\u5c11VM\uff0cLinux\u4e0a\u53ef\u4ee5\u901a\u8fc7size\u547d\u4ee4\uff0c\u77e5\u9053\u8fd9\u4e9b\u4fe1\u606f\uff1a /usr/bin/size ./a.out 5 \u5185\u5b58\u7684\u6700\u9ad8\u7aef\uff08\u9ad8\u5730\u5740\uff09 \u5185\u5b58\u7684\u6700\u9ad8\u7aef\u5b58\u653e\u7684\u662f\u547d\u4ee4\u884c\u53c2\u6570\u548c\u73af\u5883\u53d8\u91cf\uff0c\u5c06\u547d\u4ee4\u884c\u53c2\u6570\u548c\u73af\u5883\u53d8\u91cf\u653e\u5230\u6307\u5b9a\u4f4d\u7f6e\u8fd9\u4e2a\u64cd\u4f5c\u662f\u7531 OS \u7684\u4e00\u6bb5\u4ee3\u7801\uff08exec \u7cfb\u7edf\u8c03\u7528\uff09\u5728\u52a0\u8f7d\u4e8c\u8fdb\u5236\u6587\u4ef6\u5230\u5185\u5b58\u540e\uff0c\u5f00\u59cb\u8fd0\u884c\u7a0b\u5e8f\u524d\u5b8c\u6210\u7684\u3002\u8fd9\u4e2a\u5e94\u8be5\u5f88\u597d\u7406\u89e3\uff0cLinux \u4e0a\u5f00\u542f\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u5728\u8be5\u8fdb\u7a0b\u5185\u90fd\u53ef\u4ee5\u8bfb\u5230\u547d\u4ee4\u884c\u53c2\u6570\u4ee5\u53ca\u73af\u5883\u53d8\u91cf\u3002 \u6b63\u5e38\u60c5\u51b5\u4e0b\uff0cLinux \u8fdb\u7a0b\u4e0d\u80fd\u5bf9\u7528\u6765\u5b58\u653e\u7a0b\u5e8f\u4ee3\u7801\u7684\u5185\u5b58\u533a\u57df\u6267\u884c\u5199\u64cd\u4f5c\uff0c\u5373\u7a0b\u5e8f\u4ee3\u7801\u662f\u4ee5\u53ea\u8bfb\u7684\u65b9\u5f0f\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u4f46\u5b83\u53ef\u4ee5\u88ab\u591a\u4e2a\u8fdb\u7a0b\u5b89\u5168\u7684\u5171\u4eab\u3002 6 \u5c0f\u7ed3\uff0c \u4e00\u4e2a\u8fdb\u7a0b(task_struct),\u5b83\u7684\u5185\u5b58\u6709\u5982\u4e0b\u533a\u5206\uff08\u4ece\u4f4e\u5730\u5740\u5411\u9ad8\u5730\u5740\u8bf4\uff09\uff1a text data\uff08 initialized data\uff09 bss \uff08 uninitialized data\uff09 heap \u672a\u5206\u914d\u7684\u865a\u62df\u7a7a\u95f4 stack \u547d\u4ee4\u884c\u53c2\u6570\u548c\u73af\u5883\u53d8\u91cf kernel space","title":"(\u4e00) \u9996\u5148\u6765\u4ed4\u7ec6\u63a2\u8ba8\u4e00\u4e0b\u5360\u7528 3GB \u7684 User Space"},{"location":"chapter_6/3_virtual_memory/#random-offset","text":"\u4e0a\u56fe\u4e2d\uff0c\u84dd\u8272\u90e8\u5206\u662f\u771f\u5b9e\u4f1a\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\u7684 VM\uff0c\u767d\u8272\u90e8\u5206\u662f\u4e0d\u4f1a\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\u7684 VM\u3002 \u95ee\u9898 1: \u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0 Radom brk offset ,Random mmap offset \u8fd9\u4e9b\uff1f \u7b54\u6848\uff1a \u5982\u679c\u6bcf\u4e2a\u8fdb\u7a0b\u7684 VM \u5730\u5740\u90fd\u662f\u4e00\u6a21\u4e00\u6837\u7684\u8bdd\uff0c\u5f88\u5bb9\u6613\u9020\u6210\u5b89\u5168\u95ee\u9898\uff0c\u56e0\u6b64 Linux \u901a\u8fc7 Radom \u6280\u672f\u52a0\u5f3a\u4e86\u8fd9\u65b9\u9762\u7684\u5b89\u5168\u3002 \u95ee\u9898 2: VM \u7684\u5730\u5740\uff0c\u4e0d\u662f\u4ece 0 \u5f00\u59cb\uff0c\u800c\u662f\u4ece 0x08048000 \u7b54\u6848: \u636e\u8bf4\u662f\u4e3a\u4e86\u6355\u83b7 NULL \u6307\u9488","title":"(\u4e8c) \u5347\u534e, \u5f15\u5165 Random Offset"},{"location":"chapter_6/3_virtual_memory/#_3","text":"","title":"(\u4e09) \u6808"},{"location":"chapter_6/3_virtual_memory/#_4","text":"\u4e3a\u4ec0\u4e48\u53eb\u5806\u7a7a\u95f4\u5462\uff1f\u8fd9\u91cc\u5206\u4e3a 2 \u5757\u5185\u5b58\uff0c\u4e00\u4e2a\u662f\u76f4\u63a5\u4f4d\u4e8e Stack \u4e0b\u9762\u7684\uff1a Memory Mapping Segment \uff0c\u53e6\u4e00\u4e2a\u662f\u4f4d\u4e8e Memory Mapping Segment \u4e0b\u9762\u7684 heap \u3002\u8fd9 2 \u5757\u5185\u5bb9\u548c\u8d77\u6765\u53eb\u5806\u7a7a\u95f4\u3002 \u6211\u4eec\u9996\u5148\u6765\u8bf4\u8bf4 Memory Mapping Segment","title":"(\u56db) \u5806\u7a7a\u95f4"},{"location":"chapter_6/3_virtual_memory/#21-memory-mapping-segmengt","text":"\u5728\u6808\u7684\u4e0b\u65b9\u662f\u5185\u5b58\u6620\u5c04\u6bb5\uff0c\u5185\u6838\u5c06\u6587\u4ef6\u7684\u5185\u5bb9\u76f4\u63a5\u6620\u5c04\u5230\u5185\u5b58\u3002\u4efb\u4f55\u5e94\u7528\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u901a\u8fc7 Linux \u7684 mmap() \u7cfb\u7edf\u8c03\u7528\u8bf7\u6c42\u8fd9\u79cd\u6620\u5c04\u3002\u5185\u5b58\u6620\u5c04\u662f\u4e00\u79cd\u65b9\u4fbf\u9ad8\u6548\u7684\u6587\u4ef6 I/O \u65b9\u5f0f\uff0c\u6240\u4ee5\u5b83\u88ab\u7528\u6765\u52a0\u8f7d\u52a8\u6001\u5e93\u3002\u521b\u5efa\u4e00\u4e2a\u4e0d\u5bf9\u5e94\u4e8e\u4efb\u4f55\u6587\u4ef6\u7684\u533f\u540d\u5185\u5b58\u6620\u5c04\u4e5f\u662f\u53ef\u80fd\u7684\uff0c\u6b64\u65b9\u6cd5\u7528\u4e8e\u5b58\u653e\u7a0b\u5e8f\u7684\u6570\u636e\u3002\u5728 Linux \u4e2d\uff0c\u5982\u679c\u4f60\u901a\u8fc7 malloc() \u8bf7\u6c42\u4e00\u5927\u5757\u5185\u5b58\uff0c C\u8fd0\u884c\u5e93 \u5c06\u4f1a\u521b\u5efa\u8fd9\u6837\u4e00\u4e2a \u533f\u540d\u6620\u5c04 \u800c\u4e0d\u662f\u4f7f\u7528 \u5806\u5185\u5b58 \u3002 \u201c\u5927\u5757\u201d \u610f\u5473\u7740\u6bd4 MMAP_THRESHOLD \u8fd8\u5927\uff0c\u7f3a\u7701 128KB \uff0c\u53ef\u4ee5\u901a\u8fc7 mallocp() \u8c03\u6574\u3002 \u5728 Linux\u4e2d \u5f53\u52a8\u6001\u5206\u914d\u5185\u5b58\u5927\u4e8e 128K \u65f6\uff0c\u4f1a\u8c03\u7528 mmap \u51fd\u6570\u5728 esp \u5230 break brk \u4e4b\u95f4\u627e\u4e00\u5757\u76f8\u5e94\u5927\u5c0f\u7684\u533a\u57df\u4f5c\u4e3a\u5185\u5b58\u6620\u5c04\u6bb5\u8fd4\u56de\u7ed9\u7528\u6237\u3002\u8fd9\u4e2a esp \u548c break brk \u4e4b\u95f4\uff0c\u5c31\u662f Memory Mapping Segment . \u9996\u5148\u8fd9\u4e2a Memory Mapping Segment \u80af\u5b9a\u662f \u6700\u5927\u6808\u7a7a\u95f4 \u548c break brk \u4e4b\u95f4\u7684\u7a7a\u95f4\uff0c\u81f3\u4e8e\u6700\u5927\u6808\u7a7a\u95f4\u662f\u4e0d\u662f\u5c31\u662f esp \u6307\u9488\u6307\u5411\u7684\u5730\u5740\uff0c\u8fd9\u4e2a\u4e0d\u6e05\u695a\u3002 \u5728 Memory Mapping Segment \u4e0a\u5206\u914d\u5185\u5b58\u79f0\u4e3a \u5185\u5b58\u6620\u5c04 \u3002","title":"2.1 \u5185\u5b58\u6620\u5c04\u6bb5(Memory Mapping Segmengt)"},{"location":"chapter_6/3_virtual_memory/#22","text":"\u5806\u7528\u4e8e\u8fd0\u884c\u65f6\u5185\u5b58\u5206\u914d\u3002 \u8fdb\u7a0b\u901a\u8fc7 malloc()\u7533\u8bf7\u5185\u5b58\uff0c\u5c0f\u4e8e 128KB \u65f6\uff0c\u4f1a\u5728\u5806\u4e0a\u5206\u914d\u3002\u662f\u6307\u8fd9\u6bb5\u7a7a\u95f4\u3002 \u5e76\u4e14\uff0c\u5b83\u7684\u5de5\u4f5c\u6a21\u5f0f\u8ddf\u6808\u7c7b\u4f3c\uff0c\u9075\u5b88 LIFO\u539f\u5219 \uff0c\u5373\u540e\u9762\u7533\u8bf7\u7684\u5185\u5b58\u4f1a\u5148\u88ab\u91ca\u653e\u3002 \u8fd9\u91cc\u7684\u91ca\u653e\uff0c\u4e0d\u662f\u771f\u6b63\u7684\u56de\u6536\uff0c\u53ea\u662f\u8c03\u6574 break brk \u6307\u9488\u7684\u4f4d\u7f6e\u3002\u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58\u548c\u5728 Memory Mapping Segment \u4e0a\u5206\u914d\u5185\u5b58\uff0c\u4e24\u8005\u7684\u533a\u522b\u662f \u5185\u5b58\u6620\u5c04\u6bb5 \u9500\u6bc1\u65f6\uff0c\u4f1a\u91ca\u653e\u5176\u6620\u5c04\u5230\u7684\u7269\u7406\u5185\u5b58\uff0c\u800c break brk \u6307\u5411\u7684\u6570\u636e\u88ab\u9500\u6bc1\u65f6\uff0c\u4e0d\u91ca\u653e\u5176\u7269\u7406\u5185\u5b58\uff0c\u53ea\u662f\u7b80\u5355\u5c06 break brk \u56de\u64a4\uff0c\u5176 \u865a\u62df\u5730\u5740 \u5230 \u7269\u7406\u5730\u5740 \u7684\u6620\u5c04\u4f9d\u65e7\u5b58\u5728\uff0c\u8fd9\u6837\u4f7f\u7684\u5f53\u518d\u9700\u8981\u5206\u914d\u5c0f\u989d\u5185\u5b58\u65f6\uff0c\u53ea\u9700\u8981\u589e\u52a0 break brk \u7684\u503c\uff0c\u7531\u4e8e\u8fd9\u6bb5\u865a\u62df\u5730\u5740\u4e0e\u7269\u7406\u5730\u5740\u7684\u6620\u5c04\u8fd8\u5b58\u5728\uff0c\u4e8e\u662f\u4e0d\u4f1a\u89e6\u53d1\u7f3a\u9875\u4e2d\u65ad\u3002\u53ea\u6709\u5728 break brk \u51cf\u5c11\u8db3\u591f\u591a\uff0c\u5360\u636e\u7269\u7406\u5185\u5b58\u7684\u7a7a\u95f2\u865a\u62df\u5185\u5b58\u8db3\u591f\u591a\u65f6\uff0c\u624d\u4f1a\u771f\u6b63\u91ca\u653e\u5b83\u4eec\u3002","title":"2.2 \u5806"},{"location":"chapter_6/3_virtual_memory/#23","text":"1 malloc \u5c0f\u4e8e 128k \u7684\u5185\u5b58\uff0c\u4f7f\u7528 brk \u5206\u914d\u5185\u5b58\uff0c\u5c06_edata \u5f80\u9ad8\u5730\u5740\u63a8(\u53ea\u5206\u914d\u865a\u62df\u7a7a\u95f4\uff0c\u4e0d\u5bf9\u5e94\u7269\u7406\u5185\u5b58(\u56e0\u6b64\u6ca1\u6709\u521d\u59cb\u5316)\uff0c\u7b2c\u4e00\u6b21\u8bfb/\u5199\u6570\u636e\u65f6\uff0c\u5f15\u8d77\u5185\u6838\u7f3a\u9875\u4e2d\u65ad\uff0c\u5185\u6838\u624d\u5206\u914d\u5bf9\u5e94\u7684\u7269\u7406\u5185\u5b58\uff0c\u7136\u540e\u865a\u62df\u5730\u5740\u7a7a\u95f4\u5efa\u7acb\u6620\u5c04\u5173\u7cfb)\uff0c\u5982\u4e0b\u56fe\uff1a 1.1 \u8fdb\u7a0b\u542f\u52a8\u7684\u65f6\u5019\uff0c\u5176\uff08\u865a\u62df\uff09\u5185\u5b58\u7a7a\u95f4\u7684\u521d\u59cb\u5e03\u5c40\u5982\u56fe 1 \u6240\u793a\u3002 \u5176\u4e2d\uff0cmmap \u5185\u5b58\u6620\u5c04\u6587\u4ef6\u662f\u5728\u5806\u548c\u6808\u7684\u4e2d\u95f4\uff08\u4f8b\u5982 libc-2.2.93.so\uff0c\u5176\u5b83\u6570\u636e\u6587\u4ef6\u7b49\uff09\uff0c\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u7701\u7565\u4e86\u5185\u5b58\u6620\u5c04\u6587\u4ef6\u3002 _edata \u6307\u9488\uff08glibc \u91cc\u9762\u5b9a\u4e49\uff09\u6307\u5411\u6570\u636e\u6bb5\u7684\u6700\u9ad8\u5730\u5740\u3002 1.2 \u8fdb\u7a0b\u8c03\u7528 A=malloc(30K)\u4ee5\u540e\uff0c\u5185\u5b58\u7a7a\u95f4\u5982\u56fe 2\uff1a malloc \u51fd\u6570\u4f1a\u8c03\u7528 brk \u7cfb\u7edf\u8c03\u7528\uff0c\u5c06_edata \u6307\u9488\u5f80\u9ad8\u5730\u5740\u63a8 30K\uff0c\u5c31\u5b8c\u6210\u865a\u62df\u5185\u5b58\u5206\u914d\u3002 \u4f60\u53ef\u80fd\u4f1a\u95ee\uff1a\u53ea\u8981\u628a_edata+30K \u5c31\u5b8c\u6210\u5185\u5b58\u5206\u914d\u4e86\uff1f \u4e8b\u5b9e\u662f\u8fd9\u6837\u7684\uff0c_edata+30K \u53ea\u662f\u5b8c\u6210\u865a\u62df\u5730\u5740\u7684\u5206\u914d\uff0cA \u8fd9\u5757\u5185\u5b58\u73b0\u5728\u8fd8\u662f\u6ca1\u6709\u7269\u7406\u9875\u4e0e\u4e4b\u5bf9\u5e94\u7684\uff0c\u7b49\u5230\u8fdb\u7a0b\u7b2c\u4e00\u6b21\u8bfb\u5199 A \u8fd9\u5757\u5185\u5b58\u7684\u65f6\u5019\uff0c\u53d1\u751f\u7f3a\u9875\u4e2d\u65ad\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u5185\u6838\u624d\u5206\u914d A \u8fd9\u5757\u5185\u5b58\u5bf9\u5e94\u7684\u7269\u7406\u9875\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u7528 malloc \u5206\u914d\u4e86 A \u8fd9\u5757\u5185\u5bb9\uff0c\u7136\u540e\u4ece\u6765\u4e0d\u8bbf\u95ee\u5b83\uff0c\u90a3\u4e48\uff0cA \u5bf9\u5e94\u7684\u7269\u7406\u9875\u662f\u4e0d\u4f1a\u88ab\u5206\u914d\u7684\u3002 1.3 \u8fdb\u7a0b\u8c03\u7528 B=malloc(40K)\u4ee5\u540e\uff0c\u5185\u5b58\u7a7a\u95f4\u5982\u56fe 3\u3002 2 malloc \u5927\u4e8e 128k \u7684\u5185\u5b58\uff0c\u4f7f\u7528 mmap \u5206\u914d\u5185\u5b58\uff0c\u5728\u5806\u548c\u6808\u4e4b\u95f4\u627e\u4e00\u5757\u7a7a\u95f2\u5185\u5b58\u5206\u914d(\u5bf9\u5e94\u72ec\u7acb\u5185\u5b58\uff0c\u800c\u4e14\u521d\u59cb\u5316\u4e3a 0)\uff0c\u5982\u4e0b\u56fe\uff1a 2.1 \u8fdb\u7a0b\u8c03\u7528 C=malloc(200K)\u4ee5\u540e\uff0c\u5185\u5b58\u7a7a\u95f4\u5982\u56fe 4\uff1a \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmalloc \u51fd\u6570\u5206\u914d\u5185\u5b58\uff0c\u5982\u679c\u8bf7\u6c42\u5185\u5b58\u5927\u4e8e 128K\uff08\u53ef\u7531 M_MMAP_THRESHOLD \u9009\u9879\u8c03\u8282\uff09\uff0c\u90a3\u5c31\u4e0d\u662f\u53bb\u63a8_edata \u6307\u9488\u4e86\uff0c\u800c\u662f\u5229\u7528 mmap \u7cfb\u7edf\u8c03\u7528\uff0c\u4ece\u5806\u548c\u6808\u7684\u4e2d\u95f4\u5206\u914d\u4e00\u5757\u865a\u62df\u5185\u5b58\u3002 \u8fd9\u6837\u5b50\u505a\u4e3b\u8981\u662f\u56e0\u4e3a:: brk \u5206\u914d\u7684\u5185\u5b58\u9700\u8981\u7b49\u5230\u9ad8\u5730\u5740\u5185\u5b58\u91ca\u653e\u4ee5\u540e\u624d\u80fd\u91ca\u653e\uff08\u4f8b\u5982\uff0c\u5728 B \u91ca\u653e\u4e4b\u524d\uff0cA \u662f\u4e0d\u53ef\u80fd\u91ca\u653e\u7684\uff0c\u8fd9\u5c31\u662f\u5185\u5b58\u788e\u7247\u4ea7\u751f\u7684\u539f\u56e0\uff0c\u4ec0\u4e48\u65f6\u5019\u7d27\u7f29\u770b\u4e0b\u9762\uff09\uff0c\u800c mmap \u5206\u914d\u7684\u5185\u5b58\u53ef\u4ee5\u5355\u72ec\u91ca\u653e\u3002 \u5f53\u7136\uff0c\u8fd8\u6709\u5176\u5b83\u7684\u597d\u5904\uff0c\u4e5f\u6709\u574f\u5904\uff0c\u518d\u5177\u4f53\u4e0b\u53bb\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u53bb\u770b glibc \u91cc\u9762 malloc \u7684\u4ee3\u7801\u4e86\u3002 2.2 \u8fdb\u7a0b\u8c03\u7528 D=malloc(100K)\u4ee5\u540e\uff0c\u5185\u5b58\u7a7a\u95f4\u5982\u56fe 5\uff1b 2.3 \u8fdb\u7a0b\u8c03\u7528 free(C)\u4ee5\u540e\uff0cC \u5bf9\u5e94\u7684\u865a\u62df\u5185\u5b58\u548c\u7269\u7406\u5185\u5b58\u4e00\u8d77\u91ca\u653e\u3002 2.4 \u8fdb\u7a0b\u8c03\u7528 free(B)\u4ee5\u540e\uff0c\u5982\u56fe 7 \u6240\u793a\uff1a B \u5bf9\u5e94\u7684\u865a\u62df\u5185\u5b58\u548c\u7269\u7406\u5185\u5b58\u90fd\u6ca1\u6709\u91ca\u653e\uff0c\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a_edata \u6307\u9488\uff0c\u5982\u679c\u5f80\u56de\u63a8\uff0c\u90a3\u4e48 D \u8fd9\u5757\u5185\u5b58\u600e\u4e48\u529e\u5462\uff1f \u5f53\u7136\uff0cB \u8fd9\u5757\u5185\u5b58\uff0c\u662f\u53ef\u4ee5\u91cd\u7528\u7684\uff0c\u5982\u679c\u8fd9\u4e2a\u65f6\u5019\u518d\u6765\u4e00\u4e2a 40K \u7684\u8bf7\u6c42\uff0c\u90a3\u4e48 malloc \u5f88\u53ef\u80fd\u5c31\u628a B \u8fd9\u5757\u5185\u5b58\u8fd4\u56de\u56de\u53bb\u4e86\u3002 2.5 \u8fdb\u7a0b\u8c03\u7528 free(D)\u4ee5\u540e\uff0c\u5982\u56fe 8 \u6240\u793a\uff1a B \u548c D \u8fde\u63a5\u8d77\u6765\uff0c\u53d8\u6210\u4e00\u5757 140K \u7684\u7a7a\u95f2\u5185\u5b58\u3002 2.6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff1a \u5f53\u6700\u9ad8\u5730\u5740\u7a7a\u95f4\u7684\u7a7a\u95f2\u5185\u5b58\u8d85\u8fc7 128K\uff08\u53ef\u7531 M_TRIM_THRESHOLD \u9009\u9879\u8c03\u8282\uff09\u65f6\uff0c\u6267\u884c\u5185\u5b58\u7d27\u7f29\u64cd\u4f5c\uff08trim\uff09\u3002\u5728\u4e0a\u4e00\u4e2a\u6b65\u9aa4 free \u7684\u65f6\u5019\uff0c\u53d1\u73b0\u6700\u9ad8\u5730\u5740\u7a7a\u95f2\u5185\u5b58\u8d85\u8fc7 128K\uff0c\u4e8e\u662f\u5185\u5b58\u7d27\u7f29\uff0c\u53d8\u6210\u56fe 9 \u6240\u793a\u3002","title":"2.3 \u5e94\u7528\u573a\u666f"},{"location":"chapter_6/3_virtual_memory/#_5","text":"","title":"\u4e09 \u6838\u5fc3\u6570\u636e\u7ed3\u6784\u53ca\u5176\u5173\u8054\u5173\u7cfb"},{"location":"chapter_6/3_virtual_memory/#1-struct-mm_struct","text":"mm_struct struct mm_struct { //\u6307\u5411\u7ebf\u6027\u533a\u5bf9\u8c61\u7684\u94fe\u8868\u5934 struct vm_area_struct * mmap; /* list of VMAs */ //\u6307\u5411\u7ebf\u6027\u533a\u5bf9\u8c61\u7684\u7ea2\u9ed1\u6811 struct rb_root mm_rb; //\u6307\u5411\u6700\u8fd1\u627e\u5230\u7684\u865a\u62df\u533a\u95f4 struct vm_area_struct * mmap_cache; /* last find_vma result */ //\u7528\u6765\u5728\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u4e2d\u641c\u7d22\u6709\u6548\u7684\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u7684\u51fd\u6570 unsigned long (*get_unmapped_area) (struct file *filp, unsigned long addr, unsigned long len, unsigned long pgoff, unsigned long flags); unsigned long (*get_unmapped_exec_area) (struct file *filp, unsigned long addr, unsigned long len, unsigned long pgoff, unsigned long flags); //\u91ca\u653e\u7ebf\u6027\u533a\u65f6\u8c03\u7528\u7684\u65b9\u6cd5\uff0c void (*unmap_area) (struct mm_struct *mm, unsigned long addr); //\u6807\u8bc6\u7b2c\u4e00\u4e2a\u5206\u914d\u6587\u4ef6\u5185\u5b58\u6620\u5c04\u7684\u7ebf\u6027\u5730\u5740 unsigned long mmap_base; /* base of mmap area */ unsigned long task_size; /* size of task vm space */ /* * RHEL6 special for bug 790921: this same variable can mean * two different things. If sysctl_unmap_area_factor is zero, * this means the largest hole below free_area_cache. If the * sysctl is set to a positive value, this variable is used * to count how much memory has been munmapped from this process * since the last time free_area_cache was reset back to mmap_base. * This is ugly, but necessary to preserve kABI. */ unsigned long cached_hole_size; //\u5185\u6838\u8fdb\u7a0b\u641c\u7d22\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u4e2d\u7ebf\u6027\u5730\u5740\u7684\u7a7a\u95f4\u7a7a\u95f4 unsigned long free_area_cache; /* first hole of size cached_hole_size or larger */ //\u6307\u5411\u9875\u8868\u7684\u76ee\u5f55 pgd_t * pgd; //\u5171\u4eab\u8fdb\u7a0b\u65f6\u7684\u4e2a\u6570 atomic_t mm_users; /* How many users with user space? */ //\u5185\u5b58\u63cf\u8ff0\u7b26\u7684\u4e3b\u4f7f\u7528\u8ba1\u6570\u5668\uff0c\u91c7\u7528\u5f15\u7528\u8ba1\u6570\u7684\u539f\u7406\uff0c\u5f53\u4e3a0\u65f6\u4ee3\u8868\u65e0\u7528\u6237\u518d\u6b21\u4f7f\u7528 atomic_t mm_count; /* How many references to \"struct mm_struct\" (users count as 1) */ //\u7ebf\u6027\u533a\u7684\u4e2a\u6570 int map_count; /* number of VMAs */ struct rw_semaphore mmap_sem; //\u4fdd\u62a4\u4efb\u52a1\u9875\u8868\u548c\u5f15\u7528\u8ba1\u6570\u7684\u9501 spinlock_t page_table_lock; /* Protects page tables and some counters */ //mm_struct\u7ed3\u6784\uff0c\u7b2c\u4e00\u4e2a\u6210\u5458\u5c31\u662f\u521d\u59cb\u5316\u7684mm_struct\u7ed3\u6784\uff0c struct list_head mmlist; /* List of maybe swapped mm's. These are globally strung * together off init_mm.mmlist, and are protected * by mmlist_lock */ /* Special counters, in some configurations protected by the * page_table_lock, in other configurations by being atomic. */ mm_counter_t _file_rss; mm_counter_t _anon_rss; mm_counter_t _swap_usage; //\u8fdb\u7a0b\u62e5\u6709\u7684\u6700\u5927\u9875\u8868\u6570\u76ee unsigned long hiwater_rss; /* High-watermark of RSS usage */\u3001 //\u8fdb\u7a0b\u7ebf\u6027\u533a\u7684\u6700\u5927\u9875\u8868\u6570\u76ee unsigned long hiwater_vm; /* High-water virtual memory usage */ //\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u7684\u5927\u5c0f\uff0c\u9501\u4f4f\u65e0\u6cd5\u6362\u9875\u7684\u4e2a\u6570\uff0c\u5171\u4eab\u6587\u4ef6\u5185\u5b58\u6620\u5c04\u7684\u9875\u6570\uff0c\u53ef\u6267\u884c\u5185\u5b58\u6620\u5c04\u4e2d\u7684\u9875\u6570 unsigned long total_vm, locked_vm, shared_vm, exec_vm; //\u7528\u6237\u6001\u5806\u6808\u7684\u9875\u6570\uff0c unsigned long stack_vm, reserved_vm, def_flags, nr_ptes; //\u7ef4\u62a4\u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5 unsigned long start_code, end_code, start_data, end_data; //\u7ef4\u62a4\u5806\u548c\u6808 unsigned long start_brk, brk, start_stack; //\u7ef4\u62a4\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u547d\u4ee4\u884c\u53c2\u6570\u7684\u8d77\u59cb\u5730\u5740\u548c\u6700\u540e\u5730\u5740\uff0c\u4ee5\u53ca\u73af\u5883\u53d8\u91cf\u7684\u8d77\u59cb\u5730\u5740\u548c\u6700\u540e\u5730\u5740 unsigned long arg_start, arg_end, env_start, env_end; unsigned long saved_auxv[AT_VECTOR_SIZE]; /* for /proc/PID/auxv */ struct linux_binfmt *binfmt; cpumask_t cpu_vm_mask; /* Architecture-specific MM context */ mm_context_t context; /* Swap token stuff */ /* * Last value of global fault stamp as seen by this process. * In other words, this value gives an indication of how long * it has been since this task got the token. * Look at mm/thrash.c */ unsigned int faultstamp; unsigned int token_priority; unsigned int last_interval; //\u7ebf\u6027\u533a\u7684\u9ed8\u8ba4\u8bbf\u95ee\u6807\u5fd7 unsigned long flags; /* Must use atomic bitops to access the bits */ struct core_state *core_state; /* coredumping support */ #ifdef CONFIG_AIO spinlock_t ioctx_lock; struct hlist_head ioctx_list; #endif #ifdef CONFIG_MM_OWNER /* * \"owner\" points to a task that is regarded as the canonical * user/owner of this mm. All of the following must be true in * order for it to be changed: * * current == mm->owner * current->mm != mm * new_owner->mm == mm * new_owner->alloc_lock is held */ struct task_struct *owner; #endif #ifdef CONFIG_PROC_FS /* store ref to file /proc/<pid>/exe symlink points to */ struct file *exe_file; unsigned long num_exe_file_vmas; #endif #ifdef CONFIG_MMU_NOTIFIER struct mmu_notifier_mm *mmu_notifier_mm; #endif #ifdef CONFIG_TRANSPARENT_HUGEPAGE pgtable_t pmd_huge_pte; /* protected by page_table_lock */ #endif /* reserved for Red Hat */ #ifdef __GENKSYMS__ unsigned long rh_reserved[2]; #else /* How many tasks sharing this mm are OOM_DISABLE */ union { unsigned long rh_reserved_aux; atomic_t oom_disable_count; }; /* base of lib map area (ASCII armour) */ unsigned long shlib_base; #endif };","title":"1 struct mm_struct"},{"location":"chapter_6/3_virtual_memory/#2-struct-vm_area_struct","text":"struct vm_area_struct { /* The first cache line has the info for VMA tree walking. */ unsigned long vm_start; /* Our start address within vm_mm. */ unsigned long vm_end; /* The first byte after our end address within vm_mm. */ /* linked list of VM areas per task, sorted by address */ struct vm_area_struct *vm_next, *vm_prev; struct rb_node vm_rb; unsigned long rb_subtree_gap; /* Second cache line starts here. */ struct mm_struct *vm_mm; /* The address space we belong to. */ pgprot_t vm_page_prot; /* Access permissions of this VMA. */ unsigned long vm_flags; /* Flags, see mm.h. */ struct { struct rb_node rb; unsigned long rb_subtree_last; } shared; struct list_head anon_vma_chain; /* Serialized by mmap_sem & * page_table_lock */ struct anon_vma *anon_vma; /* Serialized by page_table_lock */ /* Function pointers to deal with this struct. */ const struct vm_operations_struct *vm_ops; /* Information about our backing store: */ unsigned long vm_pgoff; /* Offset (within vm_file) in PAGE_SIZE units */ struct file * vm_file; /* File we map to (can be NULL). */ void * vm_private_data; /* was vm_pte (shared mem) */ #ifdef CONFIG_SWAP atomic_long_t swap_readahead_info; #endif #ifndef CONFIG_MMU struct vm_region *vm_region; /* NOMMU mapping region */ #endif #ifdef CONFIG_NUMA struct mempolicy *vm_policy; /* NUMA policy for the VMA */ #endif struct vm_userfaultfd_ctx vm_userfaultfd_ctx; } __randomize_layout;","title":"2 struct vm_area_struct"},{"location":"chapter_6/3_virtual_memory/#3-procpidmaps","text":"\u8be5\u663e\u793a\u8fdb\u7a0b\u6620\u5c04\u4e86\u7684\u5185\u5b58\u533a\u57df\u548c\u8bbf\u95ee\u6743\u9650\u3002\u5bf9\u5e94\u5185\u6838\u4e2d\u7684\u64cd\u4f5c\u96c6\u4e3a proc_pid_maps_op\uff0c\u5177\u4f53\u7684\u5bfc\u51fa\u51fd\u6570\u4e3a show_map\u3002\u5185\u6838\u4e2d\u8fdb\u7a0b\u7684\u4e00\u6bb5\u5730\u5740\u7a7a\u95f4\u7528\u4e00\u4e2a vm_area_struct \u7ed3\u6784\u4f53\u8868\u793a\uff0c\u6240\u6709\u5730\u5740\u7a7a\u95f4\u5b58\u50a8\u5728 task->mm->mmap \u94fe\u8868\u4e2d\u3002 \u4e00\u4e2a\u6587\u4ef6\u53ef\u4ee5\u6620\u5c04\u5230\u8fdb\u7a0b\u7684\u4e00\u6bb5\u5185\u5b58\u533a\u57df\u4e2d\uff0c\u6620\u5c04\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4fdd\u5b58\u5728 vm_area_struct->vm_file \u57df\u4e2d\uff0c\u8fd9\u79cd\u5185\u5b58\u533a\u57df\u53eb\u505a\u6709\u540d\u5185\u5b58\u533a\u57df\uff0c\u76f8\u53cd\uff0c\u5c5e\u4e8e\u533f\u540d\u6620\u5c04\u5185\u5b58\u533a\u57df\u3002vm_area_struct \u6bcf\u9879\u5bf9\u5e94\u89e3\u6790\u5982\u4e0b\u8868\u6240\u793a","title":"3 /proc/${pid}/maps"},{"location":"chapter_6/4_linux_mem_theory/","text":"\u6982\u8ff0 \u603b\u7ed3 Linux \u5185\u5b58\u7ba1\u7406\u539f\u7406. \u8bb2\u8ff0\u865a\u62df\u5185\u5b58\u3001\u5206\u6bb5\u3001\u5206\u9875\u7684\u8fdb\u5316\u8fc7\u7a0b. \u8ba1\u7b97\u673a\u542f\u52a8\u65f6, \u5206\u9875\u673a\u5236\u5fc5\u987b\u63d0\u4ea4\u51c6\u5907\u597d\u624d\u53ef\u4ee5\u8fd0\u884c\u771f\u6b63\u7684 start_kernel() \u51fd\u6570. \u865a\u62df\u5185\u5b58\u7684\u7531\u6765 \u5982\u679c\u4f60\u662f\u7535\u5b50\u76f8\u5173\u4e13\u4e1a\u7684\uff0c\u80af\u5b9a\u5728\u5927\u5b66\u91cc\u6363\u9f13\u8fc7\u5355\u7247\u673a\u3002 \u5355\u7247\u673a\u662f\u6ca1\u6709\u64cd\u4f5c\u7cfb\u7edf\u7684\uff0c\u6240\u4ee5\u6bcf\u6b21\u5199\u5b8c\u4ee3\u7801\uff0c\u90fd\u9700\u8981\u501f\u52a9\u5de5\u5177\u628a\u7a0b\u5e8f\u70e7\u5f55\u8fdb\u53bb\uff0c\u8fd9\u6837\u7a0b\u5e8f\u624d\u80fd\u8dd1\u8d77\u6765\u3002 \u53e6\u5916\uff0c \u5355\u7247\u673a\u7684 CPU \u662f\u76f4\u63a5\u64cd\u4f5c\u5185\u5b58\u7684\u300c\u7269\u7406\u5730\u5740\u300d \u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8981\u60f3\u5728\u5185\u5b58\u4e2d\u540c\u65f6\u8fd0\u884c\u4e24\u4e2a\u7a0b\u5e8f\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u5982\u679c\u7b2c\u4e8c\u4e2a\u7a0b\u5e8f\u5728 2000 \u7684\u4f4d\u7f6e\u5199\u5165\u4e00\u4e2a\u65b0\u7684\u503c\uff0c\u5c06\u4f1a\u64e6\u6389\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u5b58\u653e\u5728\u76f8\u540c\u4f4d\u7f6e\u4e0a\u7684\u6240\u6709\u5185\u5bb9\uff0c\u6240\u4ee5\u540c\u65f6\u8fd0\u884c\u4e24\u4e2a\u7a0b\u5e8f\u662f\u6839\u672c\u884c\u4e0d\u901a\u7684\uff0c\u8fd9\u4e24\u4e2a\u7a0b\u5e8f\u4f1a\u7acb\u523b\u5d29\u6e83\u3002 \u64cd\u4f5c\u7cfb\u7edf\u662f\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462\uff1f \u8fd9\u91cc\u5173\u952e\u7684\u95ee\u9898\u662f\u8fd9\u4e24\u4e2a\u7a0b\u5e8f\u90fd\u5f15\u7528\u4e86\u7edd\u5bf9\u7269\u7406\u5730\u5740\uff0c\u800c\u8fd9\u6b63\u662f\u6211\u4eec\u6700\u9700\u8981\u907f\u514d\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u628a\u8fdb\u7a0b\u6240\u4f7f\u7528\u7684\u5730\u5740 \u300c\u9694\u79bb\u300d \u5f00\u6765\uff0c\u5373\u8ba9\u64cd\u4f5c\u7cfb\u7edf\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u5206\u914d\u72ec\u7acb\u7684\u4e00\u5957\u300c\u865a\u62df\u5730\u5740\u300d\uff0c\u4eba\u4eba\u90fd\u6709\uff0c\u5927\u5bb6\u81ea\u5df1\u73a9\u81ea\u5df1\u7684\u5730\u5740\u5c31\u884c\uff0c\u4e92\u4e0d\u5e72\u6d89\u3002\u4f46\u662f\u6709\u4e2a\u524d\u63d0\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u4e0d\u80fd\u8bbf\u95ee\u7269\u7406\u5730\u5740\uff0c\u81f3\u4e8e\u865a\u62df\u5730\u5740\u6700\u7ec8\u600e\u4e48\u843d\u5230\u7269\u7406\u5185\u5b58\u91cc\uff0c\u5bf9\u8fdb\u7a0b\u6765\u8bf4\u662f\u900f\u660e\u7684\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5df2\u7ecf\u628a\u8fd9\u4e9b\u90fd\u5b89\u6392\u7684\u660e\u660e\u767d\u767d\u4e86\u3002 \u64cd\u4f5c\u7cfb\u7edf\u4f1a\u63d0\u4f9b\u4e00\u79cd\u673a\u5236\uff0c\u5c06\u4e0d\u540c\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u548c\u4e0d\u540c\u5185\u5b58\u7684\u7269\u7406\u5730\u5740\u6620\u5c04\u8d77\u6765\u3002 \u5982\u679c\u7a0b\u5e8f\u8981\u8bbf\u95ee\u865a\u62df\u5730\u5740\u7684\u65f6\u5019\uff0c\u7531\u64cd\u4f5c\u7cfb\u7edf\u8f6c\u6362\u6210\u4e0d\u540c\u7684\u7269\u7406\u5730\u5740\uff0c\u8fd9\u6837\u4e0d\u540c\u7684\u8fdb\u7a0b\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u5199\u5165\u7684\u662f\u4e0d\u540c\u7684\u7269\u7406\u5730\u5740\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u51b2\u7a81\u4e86\u3002 \u4e8e\u662f\uff0c\u8fd9\u91cc\u5c31\u5f15\u51fa\u4e86\u4e24\u79cd\u5730\u5740\u7684\u6982\u5ff5\uff1a \u6211\u4eec\u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u5185\u5b58\u5730\u5740\u53eb\u505a \u865a\u62df\u5185\u5b58\u5730\u5740\uff08Virtual Memory Address\uff09 \u5b9e\u9645\u5b58\u5728\u786c\u4ef6\u91cc\u9762\u7684\u7a7a\u95f4\u5730\u5740\u53eb \u7269\u7406\u5185\u5b58\u5730\u5740\uff08Physical Memory Address\uff09 \u3002 \u64cd\u4f5c\u7cfb\u7edf\u5f15\u5165\u4e86\u865a\u62df\u5185\u5b58\uff0c\u8fdb\u7a0b\u6301\u6709\u7684\u865a\u62df\u5730\u5740\u4f1a\u901a\u8fc7 CPU \u82af\u7247\u4e2d\u7684\u5185\u5b58\u7ba1\u7406\u5355\u5143\uff08MMU\uff09\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u6765\u8f6c\u6362\u53d8\u6210\u7269\u7406\u5730\u5740\uff0c\u7136\u540e\u518d\u901a\u8fc7\u7269\u7406\u5730\u5740\u8bbf\u95ee\u5185\u5b58\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u64cd\u4f5c\u7cfb\u7edf\u662f\u5982\u4f55\u7ba1\u7406\u865a\u62df\u5730\u5740\u4e0e\u7269\u7406\u5730\u5740\u4e4b\u95f4\u7684\u5173\u7cfb\uff1f \u4e3b\u8981\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u5206\u522b\u662f \u5185\u5b58\u5206\u6bb5 \u548c \u5185\u5b58\u5206\u9875 \uff0c\u5206\u6bb5\u662f\u6bd4\u8f83\u65e9\u63d0\u51fa\u7684\uff0c\u6211\u4eec\u5148\u6765\u770b\u770b\u5185\u5b58\u5206\u6bb5\u3002 \u4e86\u89e3\u5206\u6bb5\u7684\u539f\u7406\u4e4b\u524d\u6211\u4eec\u9700\u8981\u63d0\u524d\u8bf4\u660e\u4e00\u4e9b CPU \u5bc4\u5b58\u5668. \u8457\u540d\u7684 CPU \u5bc4\u5b58\u5668 cs \uff08\u4ee3\u7801\u6bb5\u5bc4\u5b58\u5668\uff09 ss \uff08\u6808\u6bb5\u5bc4\u5b58\u5668\uff09 ds \uff08\u6570\u636e\u6bb5\u5bc4\u5b58\u5668\uff09 gdtr \u5bc4\u5b58\u5668, \u5b58\u653e \u5168\u5c40\u63cf\u8ff0\u7b26GDT\uff08Global Descriptor Table) \u7684\u5730\u5740. GDT \u672c\u8eab\u5219\u5b58\u653e\u5728\u5185\u5b58\u4e2d. idtr\uff0c\u5b58\u653e\u4e2d\u65ad\u5411\u91cf\u8868\u7684\u5730\u5740. \u4e2d\u65ad\u5411\u91cf\u8868IDT(Interrupt Descriptor Table) \u6709\u591a\u884c\uff0c\u6bcf\u4e00\u884c\u4ee3\u8868\u67d0\u4e00\u4e2a\u4e2d\u65ad\u53f7\u53d1\u751f\u4e4b\u540e\uff0c\u8981\u6267\u884c\u7684\u51fd\u6570. IDT \u672c\u8eab\u5219\u5b58\u653e\u5728\u5185\u5b58\u4e2d \u5185\u5b58\u5206\u6bb5 \u7a0b\u5e8f\u662f\u7531\u82e5\u5e72\u4e2a\u903b\u8f91\u5206\u6bb5\u7ec4\u6210\u7684\uff0c\u5982\u53ef\u7531 \u4ee3\u7801\u5206\u6bb5 \u3001 \u6570\u636e\u5206\u6bb5 \u3001 \u6808\u6bb5 \u3001 \u5806\u6bb5 \u7ec4\u6210\u3002\u4e0d\u540c\u7684\u6bb5\u662f\u6709\u4e0d\u540c\u7684\u5c5e\u6027\u7684\uff0c\u6240\u4ee5\u5c31\u7528 \u5206\u6bb5\uff08Segmentation\uff09 \u7684\u5f62\u5f0f\u628a\u8fd9\u4e9b\u6bb5\u5206\u79bb\u51fa\u6765\u3002 \u5206\u6bb5\u673a\u5236\u4e0b\u7684\u865a\u62df\u5730\u5740\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff0c \u6bb5\u9009\u62e9\u5b50 \u548c \u6bb5\u5185\u504f\u79fb\u91cf \u3002 \u6bb5\u9009\u62e9\u5b50 \u5c31\u4fdd\u5b58\u5728\u6bb5\u5bc4\u5b58\u5668\u91cc\u9762\u3002\u6bb5\u9009\u62e9\u5b50\u91cc\u9762\u6700\u91cd\u8981\u7684\u662f \u6bb5\u53f7 \uff0c\u7528\u4f5c \u6bb5\u8868 \u7684\u7d22\u5f15\u3002 \u6bb5\u8868 \u91cc\u9762\u4fdd\u5b58\u7684\u662f\u8fd9\u4e2a \u6bb5\u7684\u57fa\u5730\u5740\u3001\u6bb5\u7684\u754c\u9650\u548c\u7279\u6743\u7b49\u7ea7 \u7b49\u3002 \u865a\u62df\u5730\u5740\u4e2d\u7684 \u6bb5\u5185\u504f\u79fb\u91cf \u5e94\u8be5\u4f4d\u4e8e 0 \u548c\u6bb5\u754c\u9650\u4e4b\u95f4\uff0c\u5982\u679c\u6bb5\u5185\u504f\u79fb\u91cf\u662f\u5408\u6cd5\u7684\uff0c\u5c31\u5c06\u6bb5\u57fa\u5730\u5740\u52a0\u4e0a\u6bb5\u5185\u504f\u79fb\u91cf\u5f97\u5230\u7269\u7406\u5185\u5b58\u5730\u5740\u3002 \u8fd9\u91cc\u63d0\u5230\u7684 \u6bb5\u8868 , \u5c31\u662f \u5168\u5c40\u63cf\u8ff0\u7b26\u8868GDT\uff08Global Descriptor Table) , \u5b83\u7684\u5b9e\u9645\u4f4d\u7f6e\u5b58\u653e\u5728\u5185\u5b58\u4e2d, CPU \u7684 gdtr\u5bc4\u5b58\u5668 \u5b58\u653e\u4e86 GDT \u7684\u5730\u5740. \u5728\u4e0a\u9762\u4e86\uff0c\u77e5\u9053\u4e86\u865a\u62df\u5730\u5740\u662f\u901a\u8fc7 \u6bb5\u8868 \u4e0e\u7269\u7406\u5730\u5740\u8fdb\u884c\u6620\u5c04\u7684\uff0c\u5206\u6bb5\u673a\u5236\u4f1a\u628a\u7a0b\u5e8f\u7684\u865a\u62df\u5730\u5740\u5206\u6210 4 \u4e2a\u6bb5\uff0c\u6bcf\u4e2a\u6bb5\u5728\u6bb5\u8868\u4e2d\u6709\u4e00\u4e2a\u9879\uff0c\u5728\u8fd9\u4e00\u9879\u627e\u5230\u6bb5\u7684\u57fa\u5730\u5740\uff0c\u518d\u52a0\u4e0a\u504f\u79fb\u91cf\uff0c\u4e8e\u662f\u5c31\u80fd\u627e\u5230\u7269\u7406\u5185\u5b58\u4e2d\u7684\u5730\u5740\uff0c\u5982\u4e0b\u56fe\uff1a \u5982\u679c\u8981\u8bbf\u95ee\u6bb5 3 \u4e2d\u504f\u79fb\u91cf 500 \u7684\u865a\u62df\u5730\u5740\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\u7269\u7406\u5730\u5740\u4e3a\uff0c\u6bb5 3 \u57fa\u5730\u5740 7000 + \u504f\u79fb\u91cf 500 = 7500\u3002 \u5982\u4f55\u4ece\u865a\u62df\u5730\u5740\u5f97\u5230\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740 \u3010\u6bb5\u9009\u62e9\u5b50+\u6bb5\u504f\u79fb\u5730\u5740\u3011 \u4e2d\u7684 \u6bb5\u9009\u62e9\u5b50 \u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e00\u4e2a\u7d22\u5f15\uff0c\u8fd9\u4e2a\u7d22\u5f15\u6307\u5411\u4e86 \u5168\u5c40\u6bb5\u63cf\u8ff0\u7b26\u8868 \u4e2d\u7684\u4e00\u9879\uff0c\u5168\u5c40\u6bb5\u63cf\u8ff0\u8868\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\uff0c\u5b83\u7684\u8d77\u59cb\u5730\u5740\u5b58\u50a8\u5728\u5168\u5c40\u6bb5\u63cf\u8ff0\u7b26\u5bc4\u5b58\u5668\u4e2d\u3002 \u5168\u5c40\u6bb5\u63cf\u8ff0\u7b26\u8868\u6709\u5f88\u591a\u4e2a \u6bb5\u63cf\u8ff0\u7b26 \uff0c\u6bcf\u4e2a \u6bb5\u63cf\u8ff0\u7b26 \u5360\u7528 8 \u4e2a\u5b57\u8282\uff0c\u8fd9\u4e2a \u6bb5\u63cf\u8ff0\u7b26 \u91cc\u9762\u5c31\u5305\u62ec\u4e86 \u6bb5\u57fa\u5740 \uff0c\u53e6\u5916\u8fd8\u6709\u4e00\u4e9b\u5b89\u5168\u6027\u76f8\u5173\u7684\u63cf\u8ff0\u4fe1\u606f\u4f8b\u5982\u6bb5\u7684 \u53ef\u8bfb\uff0c\u53ef\u5199\uff0c\u53ef\u6267\u884c\uff0c\u6bb5\u7684\u5927\u5c0f \u7b49\u3002 \u6bb5\u9009\u62e9\u5b50\u5b58\u50a8\u5728\u4e86\u6bb5\u5bc4\u5b58\u5668\u4e2d\uff0c\u603b\u5171 16 \u4f4d,\u5176\u4e2d\u9ad8 13 \u4f4d\u5c31\u662f\u5168\u5c40\u6bb5\u63cf\u8ff0\u8868\u7684\u7d22\u5f15\u3002 \u6bb5\u9009\u62e9\u7b26\uff08\u6bb5\u9009\u62e9\u5b50\uff09\u7ed3\u6784\uff1a \u5f53 CPU \u5f00\u59cb\u6267\u884c\u4ee3\u7801\u6bb5\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u65f6,\u4f1a\u5c06\u4ee3\u7801\u6bb5\u7684\u9009\u62e9\u5b50\u653e\u5165\u5230 CS \u6bb5\u5bc4\u5b58\u5668\u4e2d,\u7136\u540e CPU \u4ece\u6bb5\u5bc4\u5b58\u5668\u4e2d\u7684\u83b7\u53d6\u6bb5\u9009\u62e9\u5b50\uff0c\u7136\u540e\u622a\u53d6\u9009\u62e9\u5b50\u7684\u9ad8 13 \u4f4d\u83b7\u53d6\u7d22\u5f15\uff0c\u7136\u540e\u6839\u636e\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\u5bc4\u5b58\u5668\u7684\u5730\u5740\u627e\u5230\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\u7684\u8d77\u59cb\u5730\u5740\uff0c\u6839\u636e\u8d77\u59cb\u5730\u5740+\u7d22\u5f15*8 \u627e\u5230\u6bb5\u63cf\u8ff0\u7b26,\u7136\u540e\u6839\u636e\u6bb5\u63cf\u8ff0\u7b26\u83b7\u53d6\u6bb5\u7684\u57fa\u5740\uff0c\u6bb5\u7684\u57fa\u5740\u52a0\u4e0a ip \u5bc4\u5b58\u5668\u4e2d\u7684\u504f\u79fb\u5730\u5740\u5c31\u662f\u6307\u4ee4\u7684\u7269\u7406\u5730\u5740\uff0c\u5982\u4e0b\u56fe\u6240\u793a 1~6 \u6b65\u9aa4\u6240\u793a \u5f53 CPU \u6267\u884c\u5230 0x00600000 \u5904\u7684\u4ee3\u7801\u6307\u4ee4\u65f6\uff0c\u8be5\u6307\u4ee4\u4e3a MOV AX,[0]\uff0c\u8be5\u6307\u4ee4\u7684\u610f\u601d\u662f\u628a\u5730\u5740 0 \u5904\u7684\u6570\u636e\u5b58\u50a8\u5230 AX \u5bc4\u5b58\u5668\uff0c\u8fd9\u4e2a 0 \u5c31\u662f\u6570\u636e\u6bb5\u7684\u504f\u79fb\u5730\u5740\uff0c\u6b64\u65f6 CPU \u4f1a\u5c06\u6570\u636e\u6bb5\u7684\u9009\u62e9\u5b50\u52a0\u5165\u5230 DS \u6bb5\u5bc4\u5b58\u5668\u4e2d,\u7136\u540e CPU \u83b7\u53d6\u6bb5\u9009\u62e9\u7684\u9ad8 13 \u4f4d\u83b7\u53d6\u7d22\u5f15\uff0c\u7136\u540e\u6839\u636e\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\u5bc4\u5b58\u5668\u7684\u5730\u5740\u627e\u5230\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\u7684\u8d77\u59cb\u5730\u5740\uff0c\u6839\u636e\u8d77\u59cb\u5730\u5740+\u7d22\u5f15*8 \u627e\u5230\u6bb5\u63cf\u8ff0\u7b26,\u7136\u540e\u6839\u636e\u6bb5\u63cf\u8ff0\u7b26\u83b7\u53d6\u6bb5\u7684\u57fa\u5740\uff0c\u6bb5\u7684\u57fa\u5740\u52a0\u4e0a\u6570\u636e\u6bb5\u7684\u504f\u79fb\u5730\u5740\u5c31\u662f\u6570\u636e\u7684\u7269\u7406\u5730\u5740\uff0c\u5982\u4e0b\u56fe 1~6 \u6b65\u9aa4\u6240\u793a \u5206\u6bb5\u673a\u5236\u7684\u95ee\u9898 \u5206\u6bb5\u7684\u529e\u6cd5\u5f88\u597d\uff0c\u89e3\u51b3\u4e86\u7a0b\u5e8f\u672c\u8eab\u4e0d\u9700\u8981\u5173\u5fc3\u5177\u4f53\u7684\u7269\u7406\u5185\u5b58\u5730\u5740\u7684\u95ee\u9898\uff0c\u4f46\u5b83\u4e5f\u6709\u4e00\u4e9b\u4e0d\u8db3\u4e4b\u5904\uff1a \u7b2c\u4e00\u4e2a\u5c31\u662f\u5185\u5b58\u788e\u7247\u7684\u95ee\u9898\u3002 \u7b2c\u4e8c\u4e2a\u5c31\u662f\u5185\u5b58\u4ea4\u6362\u7684\u6548\u7387\u4f4e\u7684\u95ee\u9898\u3002 \u63a5\u4e0b\u6765\uff0c\u8bf4\u8bf4\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u4e24\u4e2a\u95ee\u9898\u3002 \u6211\u4eec\u5148\u6765\u770b\u770b\uff0c\u5206\u6bb5\u4e3a\u4ec0\u4e48\u4f1a\u4ea7\u751f\u5185\u5b58\u788e\u7247\u7684\u95ee\u9898\uff1f \u6211\u4eec\u6765\u770b\u770b\u8fd9\u6837\u4e00\u4e2a\u4f8b\u5b50\u3002\u5047\u8bbe\u6709 1G \u7684\u7269\u7406\u5185\u5b58\uff0c\u7528\u6237\u6267\u884c\u4e86\u591a\u4e2a\u7a0b\u5e8f\uff0c\u5176\u4e2d\uff1a \u6e38\u620f\u5360\u7528\u4e86 512MB \u5185\u5b58 \u6d4f\u89c8\u5668\u5360\u7528\u4e86 128MB \u5185\u5b58 \u97f3\u4e50\u5360\u7528\u4e86 256 MB \u5185\u5b58\u3002 \u8fd9\u4e2a\u65f6\u5019\uff0c\u5982\u679c\u6211\u4eec\u5173\u95ed\u4e86\u6d4f\u89c8\u5668\uff0c\u5219\u7a7a\u95f2\u5185\u5b58\u8fd8\u6709 1024 - 512 - 256 = 256MB\u3002 \u5982\u679c\u8fd9\u4e2a 256MB \u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u88ab\u5206\u6210\u4e86\u4e24\u6bb5 128 MB \u5185\u5b58\uff0c\u8fd9\u5c31\u4f1a\u5bfc\u81f4\u6ca1\u6709\u7a7a\u95f4\u518d\u6253\u5f00\u4e00\u4e2a 200MB \u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u7684\u5185\u5b58\u788e\u7247\u7684\u95ee\u9898\u5171\u6709\u4e24\u5904\u5730\u65b9\uff1a \u5916\u90e8\u5185\u5b58\u788e\u7247\uff0c\u4e5f\u5c31\u662f\u4ea7\u751f\u4e86\u591a\u4e2a\u4e0d\u8fde\u7eed\u7684\u5c0f\u7269\u7406\u5185\u5b58\uff0c\u5bfc\u81f4\u65b0\u7684\u7a0b\u5e8f\u65e0\u6cd5\u88ab\u88c5\u8f7d\uff1b \u5185\u90e8\u5185\u5b58\u788e\u7247\uff0c\u7a0b\u5e8f\u6240\u6709\u7684\u5185\u5b58\u90fd\u88ab\u88c5\u8f7d\u5230\u4e86\u7269\u7406\u5185\u5b58\uff0c\u4f46\u662f\u8fd9\u4e2a\u7a0b\u5e8f\u6709\u90e8\u5206\u7684\u5185\u5b58\u53ef\u80fd\u5e76\u4e0d\u662f\u5f88\u5e38\u4f7f\u7528\uff0c\u8fd9\u4e5f\u4f1a\u5bfc\u81f4\u5185\u5b58\u7684\u6d6a\u8d39\uff1b \u9488\u5bf9\u4e0a\u9762\u4e24\u79cd\u5185\u5b58\u788e\u7247\u7684\u95ee\u9898\uff0c\u89e3\u51b3\u7684\u65b9\u5f0f\u4f1a\u6709\u6240\u4e0d\u540c\u3002 \u89e3\u51b3\u5916\u90e8\u5185\u5b58\u788e\u7247\u7684\u95ee\u9898\u5c31\u662f \u5185\u5b58\u4ea4\u6362 \u3002 \u53ef\u4ee5\u628a\u97f3\u4e50\u7a0b\u5e8f\u5360\u7528\u7684\u90a3 256MB \u5185\u5b58\u5199\u5230\u786c\u76d8\u4e0a\uff0c\u7136\u540e\u518d\u4ece\u786c\u76d8\u4e0a\u8bfb\u56de\u6765\u5230\u5185\u5b58\u91cc\u3002\u4e0d\u8fc7\u518d\u8bfb\u56de\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e0d\u80fd\u88c5\u8f7d\u56de\u539f\u6765\u7684\u4f4d\u7f6e\uff0c\u800c\u662f\u7d27\u7d27\u8ddf\u7740\u90a3\u5df2\u7ecf\u88ab\u5360\u7528\u4e86\u7684 512MB \u5185\u5b58\u540e\u9762\u3002\u8fd9\u6837\u5c31\u80fd\u7a7a\u7f3a\u51fa\u8fde\u7eed\u7684 256MB \u7a7a\u95f4\uff0c\u4e8e\u662f\u65b0\u7684 200MB \u7a0b\u5e8f\u5c31\u53ef\u4ee5\u88c5\u8f7d\u8fdb\u6765\u3002 \u8fd9\u4e2a\u5185\u5b58\u4ea4\u6362\u7a7a\u95f4\uff0c\u5728 Linux \u7cfb\u7edf\u91cc\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u5e38\u770b\u5230\u7684 Swap \u7a7a\u95f4\uff0c\u8fd9\u5757\u7a7a\u95f4\u662f\u4ece\u786c\u76d8\u5212\u5206\u51fa\u6765\u7684\uff0c\u7528\u4e8e\u5185\u5b58\u4e0e\u786c\u76d8\u7684\u7a7a\u95f4\u4ea4\u6362\u3002 \u518d\u6765\u770b\u770b\uff0c\u5206\u6bb5\u4e3a\u4ec0\u4e48\u4f1a\u5bfc\u81f4\u5185\u5b58\u4ea4\u6362\u6548\u7387\u4f4e\u7684\u95ee\u9898\uff1f \u5bf9\u4e8e\u591a\u8fdb\u7a0b\u7684\u7cfb\u7edf\u6765\u8bf4\uff0c\u7528\u5206\u6bb5\u7684\u65b9\u5f0f\uff0c\u5185\u5b58\u788e\u7247\u662f\u5f88\u5bb9\u6613\u4ea7\u751f\u7684\uff0c\u4ea7\u751f\u4e86\u5185\u5b58\u788e\u7247\uff0c\u90a3\u4e0d\u5f97\u4e0d\u91cd\u65b0 Swap \u5185\u5b58\u533a\u57df \uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u4ea7\u751f\u6027\u80fd\u74f6\u9888\u3002 \u56e0\u4e3a\u786c\u76d8\u7684\u8bbf\u95ee\u901f\u5ea6\u8981\u6bd4\u5185\u5b58\u6162\u592a\u591a\u4e86\uff0c\u6bcf\u4e00\u6b21\u5185\u5b58\u4ea4\u6362\uff0c\u6211\u4eec\u90fd\u9700\u8981\u628a\u4e00\u5927\u6bb5\u8fde\u7eed\u7684\u5185\u5b58\u6570\u636e\u5199\u5230\u786c\u76d8\u4e0a\u3002 \u6240\u4ee5\uff0c \u5982\u679c\u5185\u5b58\u4ea4\u6362\u7684\u65f6\u5019\uff0c\u4ea4\u6362\u7684\u662f\u4e00\u4e2a\u5360\u5185\u5b58\u7a7a\u95f4\u5f88\u5927\u7684\u7a0b\u5e8f\uff0c\u8fd9\u6837\u6574\u4e2a\u673a\u5668\u90fd\u4f1a\u663e\u5f97\u5361\u987f \u3002 \u4e3a\u4e86\u89e3\u51b3\u5185\u5b58\u5206\u6bb5\u7684\u5185\u5b58\u788e\u7247\u548c\u5185\u5b58\u4ea4\u6362\u6548\u7387\u4f4e\u7684\u95ee\u9898\uff0c\u5c31\u51fa\u73b0\u4e86\u5185\u5b58\u5206\u9875\u3002 \u5185\u5b58\u5206\u9875 \u5206\u6bb5\u7684\u597d\u5904\u5c31\u662f\u80fd\u4ea7\u751f\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u4f46\u662f\u4f1a\u51fa\u73b0\u5185\u5b58\u788e\u7247\u548c\u5185\u5b58\u4ea4\u6362\u7684\u7a7a\u95f4\u592a\u5927\u7684\u95ee\u9898\u3002 \u8981\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u90a3\u4e48\u5c31\u8981\u60f3\u51fa\u80fd\u5c11\u51fa\u73b0\u4e00\u4e9b\u5185\u5b58\u788e\u7247\u7684\u529e\u6cd5\u3002\u53e6\u5916\uff0c\u5f53\u9700\u8981\u8fdb\u884c\u5185\u5b58\u4ea4\u6362\u7684\u65f6\u5019\uff0c\u8ba9\u9700\u8981\u4ea4\u6362\u5199\u5165\u6216\u8005\u4ece\u78c1\u76d8\u88c5\u8f7d\u7684\u6570\u636e\u66f4\u5c11\u4e00\u70b9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u89e3\u51b3\u95ee\u9898\u4e86\u3002\u8fd9\u4e2a\u529e\u6cd5\uff0c\u4e5f\u5c31\u662f \u5185\u5b58\u5206\u9875\uff08Paging\uff09 \u3002 \u5206\u9875\u662f\u628a\u6574\u4e2a\u865a\u62df\u548c\u7269\u7406\u5185\u5b58\u7a7a\u95f4\u5207\u6210\u4e00\u6bb5\u6bb5\u56fa\u5b9a\u5c3a\u5bf8\u7684\u5927\u5c0f\u3002 \u8fd9\u6837\u4e00\u4e2a\u8fde\u7eed\u5e76\u4e14\u5c3a\u5bf8\u56fa\u5b9a\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u6211\u4eec\u53eb \u9875\uff08Page\uff09 \u3002\u5728 Linux \u4e0b\uff0c\u6bcf\u4e00\u9875\u7684\u5927\u5c0f\u4e3a 4KB \u3002 \u865a\u62df\u5730\u5740 \u4e0e \u7269\u7406\u5730\u5740 \u4e4b\u95f4\u901a\u8fc7 \u9875\u8868 \u6765\u6620\u5c04\uff0c\u5982\u4e0b\u56fe\uff1a \u9875\u8868\u5b9e\u9645\u4e0a\u5b58\u50a8\u5728 CPU \u7684 \u5185\u5b58\u7ba1\u7406\u5355\u5143 \uff08MMU\uff09 \u4e2d\uff0c\u4e8e\u662f CPU \u5c31\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 MMU \uff0c\u627e\u51fa\u8981\u5b9e\u9645\u8981\u8bbf\u95ee\u7684\u7269\u7406\u5185\u5b58\u5730\u5740\u3002 \u800c\u5f53\u8fdb\u7a0b\u8bbf\u95ee\u7684\u865a\u62df\u5730\u5740\u5728\u9875\u8868\u4e2d\u67e5\u4e0d\u5230\u65f6\uff0c\u7cfb\u7edf\u4f1a\u4ea7\u751f\u4e00\u4e2a \u7f3a\u9875\u5f02\u5e38 \uff0c\u8fdb\u5165\u7cfb\u7edf\u5185\u6838\u7a7a\u95f4\u5206\u914d\u7269\u7406\u5185\u5b58\u3001\u66f4\u65b0\u8fdb\u7a0b\u9875\u8868\uff0c\u6700\u540e\u518d\u8fd4\u56de\u7528\u6237\u7a7a\u95f4\uff0c\u6062\u590d\u8fdb\u7a0b\u7684\u8fd0\u884c\u3002 \u5206\u9875\u662f\u600e\u4e48\u89e3\u51b3\u5206\u6bb5\u7684\u5185\u5b58\u788e\u7247\u3001\u5185\u5b58\u4ea4\u6362\u6548\u7387\u4f4e\u7684\u95ee\u9898\uff1f \u7531\u4e8e\u5185\u5b58\u7a7a\u95f4\u90fd\u662f\u9884\u5148\u5212\u5206\u597d\u7684\uff0c\u4e5f\u5c31\u4e0d\u4f1a\u50cf\u5206\u6bb5\u4f1a\u4ea7\u751f\u95f4\u9699\u975e\u5e38\u5c0f\u7684\u5185\u5b58\uff0c\u8fd9\u6b63\u662f\u5206\u6bb5\u4f1a\u4ea7\u751f\u5185\u5b58\u788e\u7247\u7684\u539f\u56e0\u3002\u800c \u91c7\u7528\u4e86\u5206\u9875\uff0c\u90a3\u4e48\u91ca\u653e\u7684\u5185\u5b58\u90fd\u662f\u4ee5\u9875\u4e3a\u5355\u4f4d\u91ca\u653e\u7684\uff0c\u4e5f\u5c31\u4e0d\u4f1a\u4ea7\u751f\u65e0\u6cd5\u7ed9\u8fdb\u7a0b\u4f7f\u7528\u7684\u5c0f\u5185\u5b58 \u3002 \u5982\u679c\u5185\u5b58\u7a7a\u95f4\u4e0d\u591f\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u628a\u5176\u4ed6\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u4e2d\u7684\u300c\u6700\u8fd1\u6ca1\u88ab\u4f7f\u7528\u300d\u7684\u5185\u5b58\u9875\u9762\u7ed9\u91ca\u653e\u6389\uff0c\u4e5f\u5c31\u662f\u6682\u65f6\u5199\u5728\u786c\u76d8\u4e0a\uff0c\u79f0\u4e3a \u6362\u51fa\uff08Swap Out\uff09 \u3002\u4e00\u65e6\u9700\u8981\u7684\u65f6\u5019\uff0c\u518d\u52a0\u8f7d\u8fdb\u6765\uff0c\u79f0\u4e3a \u6362\u5165\uff08Swap In\uff09 \u3002\u6240\u4ee5\uff0c\u4e00\u6b21\u6027\u5199\u5165\u78c1\u76d8\u7684\u4e5f\u53ea\u6709\u5c11\u6570\u7684\u4e00\u4e2a\u9875\u6216\u8005\u51e0\u4e2a\u9875\uff0c\u4e0d\u4f1a\u82b1\u592a\u591a\u65f6\u95f4\uff0c \u5185\u5b58\u4ea4\u6362\u7684\u6548\u7387\u5c31\u76f8\u5bf9\u6bd4\u8f83\u9ad8 \u3002 \u66f4\u8fdb\u4e00\u6b65\u5730\uff0c\u5206\u9875\u7684\u65b9\u5f0f\u4f7f\u5f97\u6211\u4eec\u5728\u52a0\u8f7d\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u4e0d\u518d\u9700\u8981\u4e00\u6b21\u6027\u90fd\u628a\u7a0b\u5e8f\u52a0\u8f7d\u5230\u7269\u7406\u5185\u5b58\u4e2d\u3002\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u5728\u8fdb\u884c\u865a\u62df\u5185\u5b58\u548c\u7269\u7406\u5185\u5b58\u7684\u9875\u4e4b\u95f4\u7684\u6620\u5c04\u4e4b\u540e\uff0c\u5e76\u4e0d\u771f\u7684\u628a\u9875\u52a0\u8f7d\u5230\u7269\u7406\u5185\u5b58\u91cc\uff0c\u800c\u662f \u53ea\u6709\u5728\u7a0b\u5e8f\u8fd0\u884c\u4e2d\uff0c\u9700\u8981\u7528\u5230\u5bf9\u5e94\u865a\u62df\u5185\u5b58\u9875\u91cc\u9762\u7684\u6307\u4ee4\u548c\u6570\u636e\u65f6\uff0c\u518d\u52a0\u8f7d\u5230\u7269\u7406\u5185\u5b58\u91cc\u9762\u53bb \u3002 \u5206\u9875\u673a\u5236\u4e0b\uff0c\u865a\u62df\u5730\u5740\u548c\u7269\u7406\u5730\u5740\u662f\u5982\u4f55\u6620\u5c04\u7684\uff1f \u5728\u5206\u9875\u673a\u5236\u4e0b\uff0c\u865a\u62df\u5730\u5740\u5206\u4e3a\u4e24\u90e8\u5206\uff0c \u9875\u53f7 \u548c \u9875\u5185\u504f\u79fb \u3002 \u9875\u53f7 \u4f5c\u4e3a \u9875\u8868 \u7684\u7d22\u5f15\uff0c \u9875\u8868 \u5305\u542b\u7269\u7406\u9875\u6bcf\u9875\u6240\u5728 \u7269\u7406\u5185\u5b58\u7684\u57fa\u5730\u5740 \uff0c\u8fd9\u4e2a\u57fa\u5730\u5740\u4e0e\u9875\u5185\u504f\u79fb\u7684\u7ec4\u5408\u5c31\u5f62\u6210\u4e86\u7269\u7406\u5185\u5b58\u5730\u5740\uff0c\u89c1\u4e0b\u56fe\u3002 Linux \u4e0b\u9875\u8868 Linux \u4e2d\u4f7f\u7528 struct mm_struct \u8868\u793a\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4 mm_struct \u4e2d\u6709\u4e00\u4e2a pgd \u57df, \u6307\u5411 struct pgd_t \u8868\u793a\u8fdb\u7a0b\u7684\u9875\u8868 \u603b\u7ed3\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5185\u5b58\u5730\u5740\u8f6c\u6362\uff0c\u5176\u5b9e\u5c31\u662f\u8fd9\u6837\u4e09\u4e2a\u6b65\u9aa4\uff1a \u628a\u865a\u62df\u5185\u5b58\u5730\u5740\uff0c\u5207\u5206\u6210\u9875\u53f7\u548c\u504f\u79fb\u91cf\uff1b \u6839\u636e\u9875\u53f7\uff0c\u4ece\u9875\u8868\u91cc\u9762\uff0c\u67e5\u8be2\u5bf9\u5e94\u7684\u7269\u7406\u9875\u53f7\uff1b \u76f4\u63a5\u62ff\u7269\u7406\u9875\u53f7\uff0c\u52a0\u4e0a\u524d\u9762\u7684\u504f\u79fb\u91cf\uff0c\u5c31\u5f97\u5230\u4e86\u7269\u7406\u5185\u5b58\u5730\u5740\u3002 \u4e0b\u9762\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u865a\u62df\u5185\u5b58\u4e2d\u7684\u9875\u901a\u8fc7\u9875\u8868\u6620\u5c04\u4e3a\u4e86\u7269\u7406\u5185\u5b58\u4e2d\u7684\u9875\uff0c\u5982\u4e0b\u56fe\uff1a \u5355\u6781\u9875\u8868\u7684\u95ee\u9898\u548c\u591a\u7ea7\u9875\u8868\u7684\u5f15\u5165 \u53c2\u8003 1 \u53c2\u8003 2 Linux \u4e0b\u6bb5\u9875\u5f0f\u5185\u5b58\u7ba1\u7406 1 \u4ec0\u4e48\u662f\u6bb5\u9875\u5f0f\u5185\u5b58\u7ba1\u7406 \u5185\u5b58\u5206\u6bb5\u548c\u5185\u5b58\u5206\u9875\u5e76\u4e0d\u662f\u5bf9\u7acb\u7684\uff0c\u5b83\u4eec\u662f\u53ef\u4ee5\u7ec4\u5408\u8d77\u6765\u5728\u540c\u4e00\u4e2a\u7cfb\u7edf\u4e2d\u4f7f\u7528\u7684\uff0c\u90a3\u4e48\u7ec4\u5408\u8d77\u6765\u540e\uff0c\u901a\u5e38\u79f0\u4e3a \u6bb5\u9875\u5f0f\u5185\u5b58\u7ba1\u7406 \u3002 \u6bb5\u9875\u5f0f\u5185\u5b58\u7ba1\u7406\u5b9e\u73b0\u7684\u65b9\u5f0f\uff1a \u5148\u5c06\u7a0b\u5e8f\u5212\u5206\u4e3a\u591a\u4e2a\u6709\u903b\u8f91\u610f\u4e49\u7684\u6bb5\uff0c\u4e5f\u5c31\u662f\u524d\u9762\u63d0\u5230\u7684\u5206\u6bb5\u673a\u5236\uff1b \u63a5\u7740\u518d\u628a\u6bcf\u4e2a\u6bb5\u5212\u5206\u4e3a\u591a\u4e2a\u9875\uff0c\u4e5f\u5c31\u662f\u5bf9\u5206\u6bb5\u5212\u5206\u51fa\u6765\u7684\u8fde\u7eed\u7a7a\u95f4\uff0c\u518d\u5212\u5206\u56fa\u5b9a\u5927\u5c0f\u7684\u9875\uff1b \u8fd9\u6837\uff0c\u5730\u5740\u7ed3\u6784\u5c31\u7531 \u6bb5\u53f7 \u3001 \u6bb5\u5185\u9875\u53f7 \u548c \u9875\u5185\u4f4d\u79fb \u4e09\u90e8\u5206\u7ec4\u6210\u3002 \u7528\u4e8e\u6bb5\u9875\u5f0f\u5730\u5740\u53d8\u6362\u7684\u6570\u636e\u7ed3\u6784\u662f\u6bcf\u4e00\u4e2a\u7a0b\u5e8f\u4e00\u5f20\u6bb5\u8868\uff0c\u6bcf\u4e2a\u6bb5\u53c8\u5efa\u7acb\u4e00\u5f20\u9875\u8868\uff0c\u6bb5\u8868\u4e2d\u7684\u5730\u5740\u662f\u9875\u8868\u7684\u8d77\u59cb\u5730\u5740\uff0c\u800c\u9875\u8868\u4e2d\u7684\u5730\u5740\u5219\u4e3a\u67d0\u9875\u7684\u7269\u7406\u9875\u53f7\uff0c\u5982\u56fe\u6240\u793a\uff1a \u6bb5\u9875\u5f0f\u5730\u5740\u53d8\u6362\u4e2d\u8981\u5f97\u5230\u7269\u7406\u5730\u5740\u987b\u7ecf\u8fc7\u4e09\u6b21\u5185\u5b58\u8bbf\u95ee\uff1a \u7b2c\u4e00\u6b21\u8bbf\u95ee\u6bb5\u8868\uff0c\u5f97\u5230\u9875\u8868\u8d77\u59cb\u5730\u5740\uff1b \u7b2c\u4e8c\u6b21\u8bbf\u95ee\u9875\u8868\uff0c\u5f97\u5230\u7269\u7406\u9875\u53f7\uff1b \u7b2c\u4e09\u6b21\u5c06\u7269\u7406\u9875\u53f7\u4e0e\u9875\u5185\u4f4d\u79fb\u7ec4\u5408\uff0c\u5f97\u5230\u7269\u7406\u5730\u5740\u3002 \u53ef\u7528\u8f6f\u3001\u786c\u4ef6\u76f8\u7ed3\u5408\u7684\u65b9\u6cd5\u5b9e\u73b0\u6bb5\u9875\u5f0f\u5730\u5740\u53d8\u6362\uff0c\u8fd9\u6837\u867d\u7136\u589e\u52a0\u4e86\u786c\u4ef6\u6210\u672c\u548c\u7cfb\u7edf\u5f00\u9500\uff0c\u4f46\u63d0\u9ad8\u4e86\u5185\u5b58\u7684\u5229\u7528\u7387\u3002 2 Linux \u4e0b\u7684\u6bb5\u9875\u5f0f\u5185\u5b58\u7ba1\u7406 \u90a3\u4e48\uff0cLinux \u64cd\u4f5c\u7cfb\u7edf\u91c7\u7528\u4e86\u54ea\u79cd\u65b9\u5f0f\u6765\u7ba1\u7406\u5185\u5b58\u5462\uff1f \u5728\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\u524d\uff0c\u6211\u4eec\u5f97\u5148\u770b\u770b Intel \u5904\u7406\u5668\u7684\u53d1\u5c55\u5386\u53f2. \u65e9\u671f Intel \u7684\u5904\u7406\u5668\u4ece 80286 \u5f00\u59cb\u4f7f\u7528\u7684\u662f\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\u3002\u4f46\u662f\u5f88\u5feb\u53d1\u73b0\uff0c\u5149\u6709\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\u800c\u6ca1\u6709\u9875\u5f0f\u5185\u5b58\u7ba1\u7406\u662f\u4e0d\u591f\u7684\uff0c\u8fd9\u4f1a\u4f7f\u5b83\u7684 X86 \u7cfb\u5217\u4f1a\u5931\u53bb\u5e02\u573a\u7684\u7ade\u4e89\u529b\u3002\u56e0\u6b64\uff0c\u5728\u4e0d\u4e45\u4ee5\u540e\u7684 80386 \u4e2d\u5c31\u5b9e\u73b0\u4e86\u5bf9\u9875\u5f0f\u5185\u5b58\u7ba1\u7406\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c80386 \u9664\u4e86\u5b8c\u6210\u5e76\u5b8c\u5584\u4ece 80286 \u5f00\u59cb\u7684\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\u7684\u540c\u65f6\u8fd8\u5b9e\u73b0\u4e86\u9875\u5f0f\u5185\u5b58\u7ba1\u7406\u3002 \u4f46\u662f\u8fd9\u4e2a 80386 \u7684\u9875\u5f0f\u5185\u5b58\u7ba1\u7406\u8bbe\u8ba1\u65f6\uff0c\u6ca1\u6709\u7ed5\u5f00\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\uff0c\u800c\u662f\u5efa\u7acb\u5728\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\u7684\u57fa\u7840\u4e0a\uff0c\u8fd9\u5c31\u610f\u5473\u7740\uff0c \u9875\u5f0f\u5185\u5b58\u7ba1\u7406\u7684\u4f5c\u7528\u662f\u5728\u7531\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\u6240\u6620\u5c04\u800c\u6210\u7684\u7684\u5730\u5740\u4e0a\u518d\u52a0\u4e0a\u4e00\u5c42\u5730\u5740\u6620\u5c04\u3002 \u7531\u4e8e\u6b64\u65f6\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\u6620\u5c04\u800c\u6210\u7684\u5730\u5740\u4e0d\u518d\u662f\u201c\u7269\u7406\u5730\u5740\u201d\u4e86\uff0cIntel \u5c31\u79f0\u4e4b\u4e3a\u201c\u7ebf\u6027\u5730\u5740\u201d\uff08\u4e5f\u79f0\u865a\u62df\u5730\u5740\uff09\u3002\u4e8e\u662f\uff0c\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\u5148\u5c06\u903b\u8f91\u5730\u5740\u6620\u5c04\u6210\u7ebf\u6027\u5730\u5740\uff0c\u7136\u540e\u518d\u7531\u9875\u5f0f\u5185\u5b58\u7ba1\u7406\u5c06\u7ebf\u6027\u5730\u5740\u6620\u5c04\u6210\u7269\u7406\u5730\u5740\u3002 \u8fd9\u91cc\u8bf4\u660e\u4e0b\u903b\u8f91\u5730\u5740\u548c\u7ebf\u6027\u5730\u5740\uff1a \u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u5730\u5740\uff0c\u901a\u5e38\u662f\u6ca1\u88ab\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\u6620\u5c04\u7684\u5730\u5740\uff0c\u79f0\u4e3a \u903b\u8f91\u5730\u5740 \uff1b \u901a\u8fc7\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\u6620\u5c04\u7684\u5730\u5740\uff0c\u79f0\u4e3a \u7ebf\u6027\u5730\u5740 \uff0c\u4e5f\u53eb\u865a\u62df\u5730\u5740\uff1b \u903b\u8f91\u5730\u5740 \u662f \u300c\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\u300d \u8f6c\u6362\u524d\u7684\u5730\u5740\uff0c \u7ebf\u6027\u5730\u5740 \u5219\u662f \u300c\u9875\u5f0f\u5185\u5b58\u7ba1\u7406\u300d \u8f6c\u6362\u524d\u7684\u5730\u5740\u3002 2.1 Linux \u5185\u5b58\u4e3b\u8981\u91c7\u7528\u7684\u662f\u9875\u5f0f\u5185\u5b58\u7ba1\u7406\uff0c\u4f46\u540c\u65f6\u4e5f\u4e0d\u53ef\u907f\u514d\u5730\u6d89\u53ca\u4e86\u6bb5\u673a\u5236\u3002 \u8fd9\u4e3b\u8981\u662f\u4e0a\u9762 Intel \u5904\u7406\u5668\u53d1\u5c55\u5386\u53f2\u5bfc\u81f4\u7684\uff0c\u56e0\u4e3a Intel X86 CPU \u4e00\u5f8b\u5bf9\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7684\u5730\u5740\u5148\u8fdb\u884c\u6bb5\u5f0f\u6620\u5c04\uff0c\u7136\u540e\u624d\u80fd\u8fdb\u884c\u9875\u5f0f\u6620\u5c04\u3002\u65e2\u7136 CPU \u7684\u786c\u4ef6\u7ed3\u6784\u662f\u8fd9\u6837\uff0cLinux \u5185\u6838\u4e5f\u53ea\u597d\u670d\u4ece Intel \u7684\u9009\u62e9\u3002 \u4f46\u662f\u4e8b\u5b9e\u4e0a\uff0cLinux \u5185\u6838\u6240\u91c7\u53d6\u7684\u529e\u6cd5\u662f\u4f7f\u6bb5\u5f0f\u6620\u5c04\u7684\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u4e0d\u8d77\u4ec0\u4e48\u4f5c\u7528\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u201c\u4e0a\u6709\u653f\u7b56\uff0c\u4e0b\u6709\u5bf9\u7b56\u201d\uff0c\u82e5\u60f9\u4e0d\u8d77\u5c31\u8eb2\u7740\u8d70\u3002 Linux \u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e2a\u6bb5\u90fd\u662f\u4ece 0 \u5730\u5740\u5f00\u59cb\u7684\u6574\u4e2a 4GB \u865a\u62df\u7a7a\u95f4\uff0832 \u4f4d\u73af\u5883\u4e0b\uff09\uff0c\u4e5f\u5c31\u662f\u6240\u6709\u7684\u6bb5\u7684\u8d77\u59cb\u5730\u5740\u90fd\u662f\u4e00\u6837\u7684\u3002\u8fd9\u610f\u5473\u7740\uff0cLinux \u7cfb\u7edf\u4e2d\u7684\u4ee3\u7801\uff0c\u5305\u62ec\u64cd\u4f5c\u7cfb\u7edf\u672c\u8eab\u7684\u4ee3\u7801\u548c\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\uff0c\u6240\u9762\u5bf9\u7684\u5730\u5740\u7a7a\u95f4\u90fd\u662f\u7ebf\u6027\u5730\u5740\u7a7a\u95f4\uff08\u865a\u62df\u5730\u5740\uff09\uff0c\u8fd9\u79cd\u505a\u6cd5\u76f8\u5f53\u4e8e\u5c4f\u853d\u4e86\u5904\u7406\u5668\u4e2d\u7684\u903b\u8f91\u5730\u5740\u6982\u5ff5\uff0c\u6bb5\u53ea\u88ab\u7528\u4e8e\u8bbf\u95ee\u63a7\u5236\u548c\u5185\u5b58\u4fdd\u62a4\u3002 \u56db\u4e2a\u4e3b\u8981\u7684 Linux \u6bb5\u7684\u6bb5\u63cf\u8ff0\u7b26\u5b57\u6bb5\u7684\u503c \u6bb5 Base G Limit S Type DPL D/B P \u7528\u6237\u4ee3\u7801\u6bb5 0x00000000 1 0xfffff 1 10 3 1 1 \u7528\u6237\u6570\u636e\u6bb5 0x00000000 1 0xfffff 1 2 3 1 1 \u5185\u6838\u4ee3\u7801\u6bb5 0x00000000 1 0xfffff 1 10 0 1 1 \u5185\u6838\u6570\u636e\u6bb5 0x00000000 1 0xfffff 1 2 0 1 1 \u76f8\u5e94\u7684 \u6bb5\u9009\u62e9\u7b26 \u7531\u5b8f __USER_CS , __USER_DS , __KERNEL_CS , __KERNEL_DS \u5206\u522b\u5b9a\u4e49.\u4f8b\u5982, \u4e3a\u4e86\u5bf9\u5185\u6838\u4ee3\u7801\u6bb5\u5bfb\u5740\uff0c\u5185\u6838\u53ea\u9700\u8981\u628a __KERNEL_CS \u5b8f\u4ea7\u751f\u7684\u503c\u88c5\u8fdb cs\u6bb5\u5bc4\u5b58\u5668 \u5373\u53ef. \u6ce8\u610f 1 \u4e0e\u6bb5\u76f8\u5173\u7684\u7ebf\u6027\u5730\u5740\u90fd 0 \u5f00\u59cb\uff0c\u8fbe\u5230 2 \u7684 32 \u6b21\u65b9-1 \u7684\u5bfb\u5740\u9650\u957f. \u8fd9\u5c31\u610f\u5473\u7740\u5728\u7528\u6237\u6001\u6216\u5185\u6838\u6001\u4e0b\u7684\u6240\u6709\u8fdb\u7a0b\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u903b\u8f91\u5730\u5740. 2 \u6240\u6709\u6bb5\u90fd\u4ece 0x00000000 \u5f00\u59cb, \u8868\u660e Linux \u4e0b \u903b\u8f91\u5730\u5740 \u4e0e \u7ebf\u6027\u5730\u5740 \u662f\u4e00\u81f4\u7684,\u5373 \u903b\u8f91\u5730\u5740 \u7684\u504f\u79fb\u91cf\u5b57\u6bb5\u7684\u503c\u4e0e\u76f8\u5e94 \u7ebf\u6027\u5730\u5740 \u7684\u503c\u603b\u662f\u4e00\u81f4. \u6211\u4eec\u518d\u6765\u77a7\u4e00\u77a7\uff0cLinux \u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u662f\u5982\u4f55\u5206\u5e03\u7684\uff1f \u5728 Linux \u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u5185\u90e8\u53c8\u88ab\u5206\u4e3a \u5185\u6838\u7a7a\u95f4 \u548c \u7528\u6237\u7a7a\u95f4 \u4e24\u90e8\u5206\uff0c\u4e0d\u540c\u4f4d\u6570\u7684\u7cfb\u7edf\uff0c\u5730\u5740\u7a7a\u95f4\u7684\u8303\u56f4\u4e5f\u4e0d\u540c\u3002\u6bd4\u5982\u6700\u5e38\u89c1\u7684 32 \u4f4d\u548c 64 \u4f4d\u7cfb\u7edf\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u901a\u8fc7\u8fd9\u91cc\u53ef\u4ee5\u770b\u51fa\uff1a 32 \u4f4d\u7cfb\u7edf\u7684\u5185\u6838\u7a7a\u95f4\u5360\u7528 1G\uff0c\u4f4d\u4e8e\u6700\u9ad8\u5904\uff0c\u5269\u4e0b\u7684 3G \u662f\u7528\u6237\u7a7a\u95f4\uff1b 64 \u4f4d\u7cfb\u7edf\u7684\u5185\u6838\u7a7a\u95f4\u548c\u7528\u6237\u7a7a\u95f4\u90fd\u662f 128T\uff0c\u5206\u522b\u5360\u636e\u6574\u4e2a\u5185\u5b58\u7a7a\u95f4\u7684\u6700\u9ad8\u548c\u6700\u4f4e\u5904\uff0c\u5269\u4e0b\u7684\u4e2d\u95f4\u90e8\u5206\u662f\u672a\u5b9a\u4e49\u7684\u3002 \u518d\u6765\u8bf4\u8bf4\uff0c\u5185\u6838\u7a7a\u95f4\u4e0e\u7528\u6237\u7a7a\u95f4\u7684\u533a\u522b\uff1a \u8fdb\u7a0b\u5728\u7528\u6237\u6001\u65f6\uff0c\u53ea\u80fd\u8bbf\u95ee\u7528\u6237\u7a7a\u95f4\u5185\u5b58\uff1b \u53ea\u6709\u8fdb\u5165\u5185\u6838\u6001\u540e\uff0c\u624d\u53ef\u4ee5\u8bbf\u95ee\u5185\u6838\u7a7a\u95f4\u7684\u5185\u5b58\uff1b \u867d\u7136\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u5404\u81ea\u6709\u72ec\u7acb\u7684\u865a\u62df\u5185\u5b58\uff0c\u4f46\u662f \u6bcf\u4e2a\u865a\u62df\u5185\u5b58\u4e2d\u7684\u5185\u6838\u5730\u5740\uff0c\u5176\u5b9e\u5173\u8054\u7684\u90fd\u662f\u76f8\u540c\u7684\u7269\u7406\u5185\u5b58 \u3002\u8fd9\u6837\uff0c\u8fdb\u7a0b\u5207\u6362\u5230\u5185\u6838\u6001\u540e\uff0c\u5c31\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u8bbf\u95ee\u5185\u6838\u7a7a\u95f4\u5185\u5b58\u3002 \u63a5\u4e0b\u6765\uff0c\u8fdb\u4e00\u6b65\u4e86\u89e3\u865a\u62df\u7a7a\u95f4\u7684\u5212\u5206\u60c5\u51b5\uff0c\u7528\u6237\u7a7a\u95f4\u548c\u5185\u6838\u7a7a\u95f4\u5212\u5206\u7684\u65b9\u5f0f\u662f\u4e0d\u540c\u7684\uff0c\u5185\u6838\u7a7a\u95f4\u7684\u5206\u5e03\u60c5\u51b5\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002 \u6211\u4eec\u770b\u770b\u7528\u6237\u7a7a\u95f4\u5206\u5e03\u7684\u60c5\u51b5\uff0c\u4ee5 32 \u4f4d\u7cfb\u7edf\u4e3a\u4f8b\uff0c\u6211\u753b\u4e86\u4e00\u5f20\u56fe\u6765\u8868\u793a\u5b83\u4eec\u7684\u5173\u7cfb\uff1a \u901a\u8fc7\u8fd9\u5f20\u56fe\u4f60\u53ef\u4ee5\u770b\u5230\uff0c\u7528\u6237\u7a7a\u95f4\u5185\u5b58\uff0c\u4ece \u4f4e\u5230\u9ad8 \u5206\u522b\u662f 7 \u79cd\u4e0d\u540c\u7684\u5185\u5b58\u6bb5\uff1a 1 \u7a0b\u5e8f\u6587\u4ef6\u6bb5\uff0c\u5305\u62ec\u4e8c\u8fdb\u5236\u53ef\u6267\u884c\u4ee3\u7801\uff1b 2 \u5df2\u521d\u59cb\u5316\u6570\u636e\u6bb5\uff0c\u5305\u62ec\u9759\u6001\u5e38\u91cf\uff1b 3 \u672a\u521d\u59cb\u5316\u6570\u636e\u6bb5\uff0c\u5305\u62ec\u672a\u521d\u59cb\u5316\u7684\u9759\u6001\u53d8\u91cf\uff1b 4 \u5806\u6bb5\uff0c\u5305\u62ec\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\uff0c\u4ece\u4f4e\u5730\u5740\u5f00\u59cb\u5411\u4e0a\u589e\u957f\uff1b 5 \u6587\u4ef6\u6620\u5c04\u6bb5\uff0c\u5305\u62ec\u52a8\u6001\u5e93\u3001\u5171\u4eab\u5185\u5b58\u7b49\uff0c\u4ece\u4f4e\u5730\u5740\u5f00\u59cb\u5411\u4e0a\u589e\u957f\uff08\u8ddf\u786c\u4ef6\u548c\u5185\u6838\u7248\u672c\u6709\u5173\uff09 6 \u6808\u6bb5\uff0c\u5305\u62ec\u5c40\u90e8\u53d8\u91cf\u548c\u51fd\u6570\u8c03\u7528\u7684\u4e0a\u4e0b\u6587\u7b49\u3002\u6808\u7684\u5927\u5c0f\u662f\u56fa\u5b9a\u7684\uff0c\u4e00\u822c\u662f 8 MB\u3002\u5f53\u7136\u7cfb\u7edf\u4e5f\u63d0\u4f9b\u4e86\u53c2\u6570\uff0c\u4ee5\u4fbf\u6211\u4eec\u81ea\u5b9a\u4e49\u5927\u5c0f\uff1b 7 \u5185\u5b58\u7684\u6700\u9ad8\u7aef\u5b58\u653e\u7684\u662f\u547d\u4ee4\u884c\u53c2\u6570\u548c\u73af\u5883\u53d8\u91cf. Linux \u4e0b\u5185\u5b58\u5b50\u7cfb\u7edf\u7684\u4f18\u5316\u6280\u80fd 1 KSM \u548c \u900f\u660e\u5927\u9875\u7684\u533a\u522b \u5982\u679c\u5f00\u542f KSM\uff0ckernel \u5c42\u9762\u4f1a\u6709 ksmd \u8fdb\u7a0b\u628a\u5185\u5bb9\u5b8c\u5168\u4e00\u6837\u7684\u7269\u7406\u9875\u8fdb\u884c\u5408\u5e76\uff0c\u5e76\u6807\u8bb0\u4e3a cow (copy on write)\uff0c \u4ee5\u51cf\u5c11\u7269\u7406\u9875\u6d88\u8017 \u900f\u660e\u5927\u9875\u7684\u4f5c\u7528\u662f: \u4e00\u4e2a\u8fdb\u7a0b\u5982\u679c\u9700\u8981\u5927\u91cf\u5185\u5b58\uff0c\u90a3\u4e48\u5e95\u5c42\u7533\u8bf7\u7684\u7269\u7406\u9875\u53ef\u4ee5\u5927\u4e8e 4KB\uff0c\u6bd4\u5982 16KB \u4e00\u4e2a\u7269\u7406\u9875\uff0c\u51cf\u5c11\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u7684\u6620\u5c04\u6761\u76ee\uff0c\u4ece\u800c\u51cf\u5c11\u9875\u8868\u5927\u5c0f\uff0c\u52a0\u5feb\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u7684\u7ffb\u8bd1\u901f\u5ea6 2 Linux \u5185\u5b58\u5b50\u7cfb\u7edf\u6240\u6709\u4f18\u5316\u70b9\u7f57\u5217 \uff08\u4e00\uff09 \u8282\u7ea6\u5185\u5b58 1 KSM 2 \u7236\u5b50\u8fdb\u7a0b\u7684 COW\uff08\u5199\u65f6 Copy\uff09 3 \u80fd\u591f\u5206\u914d\u5c0f\u4e8e\u4e00\u4e2a page \u7684\u5185\u5b58\uff0cslab \u5206\u914d\u5668 \uff08\u4e8c\uff09 \u63d0\u9ad8\u6548\u7387 1 \u900f\u660e\u5927\u9875\uff08\u901a\u8fc7\u51cf\u5c11\u9875\u8868\u6620\u5c04\u6761\u76ee\uff09 2 NUMBA \u3002\u8ba9 CPU \u5c31\u8fd1\u8bbf\u95ee\u5185\u5b58","title":"\u7b2c\u56db\u7bc7 Linux\u5185\u5b58\u7ba1\u7406\u57fa\u7840\u7bc7"},{"location":"chapter_6/4_linux_mem_theory/#_1","text":"\u603b\u7ed3 Linux \u5185\u5b58\u7ba1\u7406\u539f\u7406. \u8bb2\u8ff0\u865a\u62df\u5185\u5b58\u3001\u5206\u6bb5\u3001\u5206\u9875\u7684\u8fdb\u5316\u8fc7\u7a0b. \u8ba1\u7b97\u673a\u542f\u52a8\u65f6, \u5206\u9875\u673a\u5236\u5fc5\u987b\u63d0\u4ea4\u51c6\u5907\u597d\u624d\u53ef\u4ee5\u8fd0\u884c\u771f\u6b63\u7684 start_kernel() \u51fd\u6570.","title":"\u6982\u8ff0"},{"location":"chapter_6/4_linux_mem_theory/#_2","text":"\u5982\u679c\u4f60\u662f\u7535\u5b50\u76f8\u5173\u4e13\u4e1a\u7684\uff0c\u80af\u5b9a\u5728\u5927\u5b66\u91cc\u6363\u9f13\u8fc7\u5355\u7247\u673a\u3002 \u5355\u7247\u673a\u662f\u6ca1\u6709\u64cd\u4f5c\u7cfb\u7edf\u7684\uff0c\u6240\u4ee5\u6bcf\u6b21\u5199\u5b8c\u4ee3\u7801\uff0c\u90fd\u9700\u8981\u501f\u52a9\u5de5\u5177\u628a\u7a0b\u5e8f\u70e7\u5f55\u8fdb\u53bb\uff0c\u8fd9\u6837\u7a0b\u5e8f\u624d\u80fd\u8dd1\u8d77\u6765\u3002 \u53e6\u5916\uff0c \u5355\u7247\u673a\u7684 CPU \u662f\u76f4\u63a5\u64cd\u4f5c\u5185\u5b58\u7684\u300c\u7269\u7406\u5730\u5740\u300d \u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8981\u60f3\u5728\u5185\u5b58\u4e2d\u540c\u65f6\u8fd0\u884c\u4e24\u4e2a\u7a0b\u5e8f\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u5982\u679c\u7b2c\u4e8c\u4e2a\u7a0b\u5e8f\u5728 2000 \u7684\u4f4d\u7f6e\u5199\u5165\u4e00\u4e2a\u65b0\u7684\u503c\uff0c\u5c06\u4f1a\u64e6\u6389\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u5b58\u653e\u5728\u76f8\u540c\u4f4d\u7f6e\u4e0a\u7684\u6240\u6709\u5185\u5bb9\uff0c\u6240\u4ee5\u540c\u65f6\u8fd0\u884c\u4e24\u4e2a\u7a0b\u5e8f\u662f\u6839\u672c\u884c\u4e0d\u901a\u7684\uff0c\u8fd9\u4e24\u4e2a\u7a0b\u5e8f\u4f1a\u7acb\u523b\u5d29\u6e83\u3002 \u64cd\u4f5c\u7cfb\u7edf\u662f\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462\uff1f \u8fd9\u91cc\u5173\u952e\u7684\u95ee\u9898\u662f\u8fd9\u4e24\u4e2a\u7a0b\u5e8f\u90fd\u5f15\u7528\u4e86\u7edd\u5bf9\u7269\u7406\u5730\u5740\uff0c\u800c\u8fd9\u6b63\u662f\u6211\u4eec\u6700\u9700\u8981\u907f\u514d\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u628a\u8fdb\u7a0b\u6240\u4f7f\u7528\u7684\u5730\u5740 \u300c\u9694\u79bb\u300d \u5f00\u6765\uff0c\u5373\u8ba9\u64cd\u4f5c\u7cfb\u7edf\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u5206\u914d\u72ec\u7acb\u7684\u4e00\u5957\u300c\u865a\u62df\u5730\u5740\u300d\uff0c\u4eba\u4eba\u90fd\u6709\uff0c\u5927\u5bb6\u81ea\u5df1\u73a9\u81ea\u5df1\u7684\u5730\u5740\u5c31\u884c\uff0c\u4e92\u4e0d\u5e72\u6d89\u3002\u4f46\u662f\u6709\u4e2a\u524d\u63d0\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u4e0d\u80fd\u8bbf\u95ee\u7269\u7406\u5730\u5740\uff0c\u81f3\u4e8e\u865a\u62df\u5730\u5740\u6700\u7ec8\u600e\u4e48\u843d\u5230\u7269\u7406\u5185\u5b58\u91cc\uff0c\u5bf9\u8fdb\u7a0b\u6765\u8bf4\u662f\u900f\u660e\u7684\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5df2\u7ecf\u628a\u8fd9\u4e9b\u90fd\u5b89\u6392\u7684\u660e\u660e\u767d\u767d\u4e86\u3002 \u64cd\u4f5c\u7cfb\u7edf\u4f1a\u63d0\u4f9b\u4e00\u79cd\u673a\u5236\uff0c\u5c06\u4e0d\u540c\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u548c\u4e0d\u540c\u5185\u5b58\u7684\u7269\u7406\u5730\u5740\u6620\u5c04\u8d77\u6765\u3002 \u5982\u679c\u7a0b\u5e8f\u8981\u8bbf\u95ee\u865a\u62df\u5730\u5740\u7684\u65f6\u5019\uff0c\u7531\u64cd\u4f5c\u7cfb\u7edf\u8f6c\u6362\u6210\u4e0d\u540c\u7684\u7269\u7406\u5730\u5740\uff0c\u8fd9\u6837\u4e0d\u540c\u7684\u8fdb\u7a0b\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u5199\u5165\u7684\u662f\u4e0d\u540c\u7684\u7269\u7406\u5730\u5740\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u51b2\u7a81\u4e86\u3002 \u4e8e\u662f\uff0c\u8fd9\u91cc\u5c31\u5f15\u51fa\u4e86\u4e24\u79cd\u5730\u5740\u7684\u6982\u5ff5\uff1a \u6211\u4eec\u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u5185\u5b58\u5730\u5740\u53eb\u505a \u865a\u62df\u5185\u5b58\u5730\u5740\uff08Virtual Memory Address\uff09 \u5b9e\u9645\u5b58\u5728\u786c\u4ef6\u91cc\u9762\u7684\u7a7a\u95f4\u5730\u5740\u53eb \u7269\u7406\u5185\u5b58\u5730\u5740\uff08Physical Memory Address\uff09 \u3002 \u64cd\u4f5c\u7cfb\u7edf\u5f15\u5165\u4e86\u865a\u62df\u5185\u5b58\uff0c\u8fdb\u7a0b\u6301\u6709\u7684\u865a\u62df\u5730\u5740\u4f1a\u901a\u8fc7 CPU \u82af\u7247\u4e2d\u7684\u5185\u5b58\u7ba1\u7406\u5355\u5143\uff08MMU\uff09\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u6765\u8f6c\u6362\u53d8\u6210\u7269\u7406\u5730\u5740\uff0c\u7136\u540e\u518d\u901a\u8fc7\u7269\u7406\u5730\u5740\u8bbf\u95ee\u5185\u5b58\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u64cd\u4f5c\u7cfb\u7edf\u662f\u5982\u4f55\u7ba1\u7406\u865a\u62df\u5730\u5740\u4e0e\u7269\u7406\u5730\u5740\u4e4b\u95f4\u7684\u5173\u7cfb\uff1f \u4e3b\u8981\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u5206\u522b\u662f \u5185\u5b58\u5206\u6bb5 \u548c \u5185\u5b58\u5206\u9875 \uff0c\u5206\u6bb5\u662f\u6bd4\u8f83\u65e9\u63d0\u51fa\u7684\uff0c\u6211\u4eec\u5148\u6765\u770b\u770b\u5185\u5b58\u5206\u6bb5\u3002 \u4e86\u89e3\u5206\u6bb5\u7684\u539f\u7406\u4e4b\u524d\u6211\u4eec\u9700\u8981\u63d0\u524d\u8bf4\u660e\u4e00\u4e9b CPU \u5bc4\u5b58\u5668.","title":"\u865a\u62df\u5185\u5b58\u7684\u7531\u6765"},{"location":"chapter_6/4_linux_mem_theory/#cpu","text":"cs \uff08\u4ee3\u7801\u6bb5\u5bc4\u5b58\u5668\uff09 ss \uff08\u6808\u6bb5\u5bc4\u5b58\u5668\uff09 ds \uff08\u6570\u636e\u6bb5\u5bc4\u5b58\u5668\uff09 gdtr \u5bc4\u5b58\u5668, \u5b58\u653e \u5168\u5c40\u63cf\u8ff0\u7b26GDT\uff08Global Descriptor Table) \u7684\u5730\u5740. GDT \u672c\u8eab\u5219\u5b58\u653e\u5728\u5185\u5b58\u4e2d. idtr\uff0c\u5b58\u653e\u4e2d\u65ad\u5411\u91cf\u8868\u7684\u5730\u5740. \u4e2d\u65ad\u5411\u91cf\u8868IDT(Interrupt Descriptor Table) \u6709\u591a\u884c\uff0c\u6bcf\u4e00\u884c\u4ee3\u8868\u67d0\u4e00\u4e2a\u4e2d\u65ad\u53f7\u53d1\u751f\u4e4b\u540e\uff0c\u8981\u6267\u884c\u7684\u51fd\u6570. IDT \u672c\u8eab\u5219\u5b58\u653e\u5728\u5185\u5b58\u4e2d","title":"\u8457\u540d\u7684 CPU \u5bc4\u5b58\u5668"},{"location":"chapter_6/4_linux_mem_theory/#_3","text":"\u7a0b\u5e8f\u662f\u7531\u82e5\u5e72\u4e2a\u903b\u8f91\u5206\u6bb5\u7ec4\u6210\u7684\uff0c\u5982\u53ef\u7531 \u4ee3\u7801\u5206\u6bb5 \u3001 \u6570\u636e\u5206\u6bb5 \u3001 \u6808\u6bb5 \u3001 \u5806\u6bb5 \u7ec4\u6210\u3002\u4e0d\u540c\u7684\u6bb5\u662f\u6709\u4e0d\u540c\u7684\u5c5e\u6027\u7684\uff0c\u6240\u4ee5\u5c31\u7528 \u5206\u6bb5\uff08Segmentation\uff09 \u7684\u5f62\u5f0f\u628a\u8fd9\u4e9b\u6bb5\u5206\u79bb\u51fa\u6765\u3002 \u5206\u6bb5\u673a\u5236\u4e0b\u7684\u865a\u62df\u5730\u5740\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff0c \u6bb5\u9009\u62e9\u5b50 \u548c \u6bb5\u5185\u504f\u79fb\u91cf \u3002 \u6bb5\u9009\u62e9\u5b50 \u5c31\u4fdd\u5b58\u5728\u6bb5\u5bc4\u5b58\u5668\u91cc\u9762\u3002\u6bb5\u9009\u62e9\u5b50\u91cc\u9762\u6700\u91cd\u8981\u7684\u662f \u6bb5\u53f7 \uff0c\u7528\u4f5c \u6bb5\u8868 \u7684\u7d22\u5f15\u3002 \u6bb5\u8868 \u91cc\u9762\u4fdd\u5b58\u7684\u662f\u8fd9\u4e2a \u6bb5\u7684\u57fa\u5730\u5740\u3001\u6bb5\u7684\u754c\u9650\u548c\u7279\u6743\u7b49\u7ea7 \u7b49\u3002 \u865a\u62df\u5730\u5740\u4e2d\u7684 \u6bb5\u5185\u504f\u79fb\u91cf \u5e94\u8be5\u4f4d\u4e8e 0 \u548c\u6bb5\u754c\u9650\u4e4b\u95f4\uff0c\u5982\u679c\u6bb5\u5185\u504f\u79fb\u91cf\u662f\u5408\u6cd5\u7684\uff0c\u5c31\u5c06\u6bb5\u57fa\u5730\u5740\u52a0\u4e0a\u6bb5\u5185\u504f\u79fb\u91cf\u5f97\u5230\u7269\u7406\u5185\u5b58\u5730\u5740\u3002 \u8fd9\u91cc\u63d0\u5230\u7684 \u6bb5\u8868 , \u5c31\u662f \u5168\u5c40\u63cf\u8ff0\u7b26\u8868GDT\uff08Global Descriptor Table) , \u5b83\u7684\u5b9e\u9645\u4f4d\u7f6e\u5b58\u653e\u5728\u5185\u5b58\u4e2d, CPU \u7684 gdtr\u5bc4\u5b58\u5668 \u5b58\u653e\u4e86 GDT \u7684\u5730\u5740. \u5728\u4e0a\u9762\u4e86\uff0c\u77e5\u9053\u4e86\u865a\u62df\u5730\u5740\u662f\u901a\u8fc7 \u6bb5\u8868 \u4e0e\u7269\u7406\u5730\u5740\u8fdb\u884c\u6620\u5c04\u7684\uff0c\u5206\u6bb5\u673a\u5236\u4f1a\u628a\u7a0b\u5e8f\u7684\u865a\u62df\u5730\u5740\u5206\u6210 4 \u4e2a\u6bb5\uff0c\u6bcf\u4e2a\u6bb5\u5728\u6bb5\u8868\u4e2d\u6709\u4e00\u4e2a\u9879\uff0c\u5728\u8fd9\u4e00\u9879\u627e\u5230\u6bb5\u7684\u57fa\u5730\u5740\uff0c\u518d\u52a0\u4e0a\u504f\u79fb\u91cf\uff0c\u4e8e\u662f\u5c31\u80fd\u627e\u5230\u7269\u7406\u5185\u5b58\u4e2d\u7684\u5730\u5740\uff0c\u5982\u4e0b\u56fe\uff1a \u5982\u679c\u8981\u8bbf\u95ee\u6bb5 3 \u4e2d\u504f\u79fb\u91cf 500 \u7684\u865a\u62df\u5730\u5740\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\u7269\u7406\u5730\u5740\u4e3a\uff0c\u6bb5 3 \u57fa\u5730\u5740 7000 + \u504f\u79fb\u91cf 500 = 7500\u3002","title":"\u5185\u5b58\u5206\u6bb5"},{"location":"chapter_6/4_linux_mem_theory/#_4","text":"\u3010\u6bb5\u9009\u62e9\u5b50+\u6bb5\u504f\u79fb\u5730\u5740\u3011 \u4e2d\u7684 \u6bb5\u9009\u62e9\u5b50 \u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e00\u4e2a\u7d22\u5f15\uff0c\u8fd9\u4e2a\u7d22\u5f15\u6307\u5411\u4e86 \u5168\u5c40\u6bb5\u63cf\u8ff0\u7b26\u8868 \u4e2d\u7684\u4e00\u9879\uff0c\u5168\u5c40\u6bb5\u63cf\u8ff0\u8868\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\uff0c\u5b83\u7684\u8d77\u59cb\u5730\u5740\u5b58\u50a8\u5728\u5168\u5c40\u6bb5\u63cf\u8ff0\u7b26\u5bc4\u5b58\u5668\u4e2d\u3002 \u5168\u5c40\u6bb5\u63cf\u8ff0\u7b26\u8868\u6709\u5f88\u591a\u4e2a \u6bb5\u63cf\u8ff0\u7b26 \uff0c\u6bcf\u4e2a \u6bb5\u63cf\u8ff0\u7b26 \u5360\u7528 8 \u4e2a\u5b57\u8282\uff0c\u8fd9\u4e2a \u6bb5\u63cf\u8ff0\u7b26 \u91cc\u9762\u5c31\u5305\u62ec\u4e86 \u6bb5\u57fa\u5740 \uff0c\u53e6\u5916\u8fd8\u6709\u4e00\u4e9b\u5b89\u5168\u6027\u76f8\u5173\u7684\u63cf\u8ff0\u4fe1\u606f\u4f8b\u5982\u6bb5\u7684 \u53ef\u8bfb\uff0c\u53ef\u5199\uff0c\u53ef\u6267\u884c\uff0c\u6bb5\u7684\u5927\u5c0f \u7b49\u3002 \u6bb5\u9009\u62e9\u5b50\u5b58\u50a8\u5728\u4e86\u6bb5\u5bc4\u5b58\u5668\u4e2d\uff0c\u603b\u5171 16 \u4f4d,\u5176\u4e2d\u9ad8 13 \u4f4d\u5c31\u662f\u5168\u5c40\u6bb5\u63cf\u8ff0\u8868\u7684\u7d22\u5f15\u3002 \u6bb5\u9009\u62e9\u7b26\uff08\u6bb5\u9009\u62e9\u5b50\uff09\u7ed3\u6784\uff1a \u5f53 CPU \u5f00\u59cb\u6267\u884c\u4ee3\u7801\u6bb5\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u65f6,\u4f1a\u5c06\u4ee3\u7801\u6bb5\u7684\u9009\u62e9\u5b50\u653e\u5165\u5230 CS \u6bb5\u5bc4\u5b58\u5668\u4e2d,\u7136\u540e CPU \u4ece\u6bb5\u5bc4\u5b58\u5668\u4e2d\u7684\u83b7\u53d6\u6bb5\u9009\u62e9\u5b50\uff0c\u7136\u540e\u622a\u53d6\u9009\u62e9\u5b50\u7684\u9ad8 13 \u4f4d\u83b7\u53d6\u7d22\u5f15\uff0c\u7136\u540e\u6839\u636e\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\u5bc4\u5b58\u5668\u7684\u5730\u5740\u627e\u5230\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\u7684\u8d77\u59cb\u5730\u5740\uff0c\u6839\u636e\u8d77\u59cb\u5730\u5740+\u7d22\u5f15*8 \u627e\u5230\u6bb5\u63cf\u8ff0\u7b26,\u7136\u540e\u6839\u636e\u6bb5\u63cf\u8ff0\u7b26\u83b7\u53d6\u6bb5\u7684\u57fa\u5740\uff0c\u6bb5\u7684\u57fa\u5740\u52a0\u4e0a ip \u5bc4\u5b58\u5668\u4e2d\u7684\u504f\u79fb\u5730\u5740\u5c31\u662f\u6307\u4ee4\u7684\u7269\u7406\u5730\u5740\uff0c\u5982\u4e0b\u56fe\u6240\u793a 1~6 \u6b65\u9aa4\u6240\u793a \u5f53 CPU \u6267\u884c\u5230 0x00600000 \u5904\u7684\u4ee3\u7801\u6307\u4ee4\u65f6\uff0c\u8be5\u6307\u4ee4\u4e3a MOV AX,[0]\uff0c\u8be5\u6307\u4ee4\u7684\u610f\u601d\u662f\u628a\u5730\u5740 0 \u5904\u7684\u6570\u636e\u5b58\u50a8\u5230 AX \u5bc4\u5b58\u5668\uff0c\u8fd9\u4e2a 0 \u5c31\u662f\u6570\u636e\u6bb5\u7684\u504f\u79fb\u5730\u5740\uff0c\u6b64\u65f6 CPU \u4f1a\u5c06\u6570\u636e\u6bb5\u7684\u9009\u62e9\u5b50\u52a0\u5165\u5230 DS \u6bb5\u5bc4\u5b58\u5668\u4e2d,\u7136\u540e CPU \u83b7\u53d6\u6bb5\u9009\u62e9\u7684\u9ad8 13 \u4f4d\u83b7\u53d6\u7d22\u5f15\uff0c\u7136\u540e\u6839\u636e\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\u5bc4\u5b58\u5668\u7684\u5730\u5740\u627e\u5230\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\u7684\u8d77\u59cb\u5730\u5740\uff0c\u6839\u636e\u8d77\u59cb\u5730\u5740+\u7d22\u5f15*8 \u627e\u5230\u6bb5\u63cf\u8ff0\u7b26,\u7136\u540e\u6839\u636e\u6bb5\u63cf\u8ff0\u7b26\u83b7\u53d6\u6bb5\u7684\u57fa\u5740\uff0c\u6bb5\u7684\u57fa\u5740\u52a0\u4e0a\u6570\u636e\u6bb5\u7684\u504f\u79fb\u5730\u5740\u5c31\u662f\u6570\u636e\u7684\u7269\u7406\u5730\u5740\uff0c\u5982\u4e0b\u56fe 1~6 \u6b65\u9aa4\u6240\u793a","title":"\u5982\u4f55\u4ece\u865a\u62df\u5730\u5740\u5f97\u5230\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740"},{"location":"chapter_6/4_linux_mem_theory/#_5","text":"\u5206\u6bb5\u7684\u529e\u6cd5\u5f88\u597d\uff0c\u89e3\u51b3\u4e86\u7a0b\u5e8f\u672c\u8eab\u4e0d\u9700\u8981\u5173\u5fc3\u5177\u4f53\u7684\u7269\u7406\u5185\u5b58\u5730\u5740\u7684\u95ee\u9898\uff0c\u4f46\u5b83\u4e5f\u6709\u4e00\u4e9b\u4e0d\u8db3\u4e4b\u5904\uff1a \u7b2c\u4e00\u4e2a\u5c31\u662f\u5185\u5b58\u788e\u7247\u7684\u95ee\u9898\u3002 \u7b2c\u4e8c\u4e2a\u5c31\u662f\u5185\u5b58\u4ea4\u6362\u7684\u6548\u7387\u4f4e\u7684\u95ee\u9898\u3002 \u63a5\u4e0b\u6765\uff0c\u8bf4\u8bf4\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u4e24\u4e2a\u95ee\u9898\u3002 \u6211\u4eec\u5148\u6765\u770b\u770b\uff0c\u5206\u6bb5\u4e3a\u4ec0\u4e48\u4f1a\u4ea7\u751f\u5185\u5b58\u788e\u7247\u7684\u95ee\u9898\uff1f","title":"\u5206\u6bb5\u673a\u5236\u7684\u95ee\u9898"},{"location":"chapter_6/4_linux_mem_theory/#1g","text":"\u6e38\u620f\u5360\u7528\u4e86 512MB \u5185\u5b58 \u6d4f\u89c8\u5668\u5360\u7528\u4e86 128MB \u5185\u5b58 \u97f3\u4e50\u5360\u7528\u4e86 256 MB \u5185\u5b58\u3002 \u8fd9\u4e2a\u65f6\u5019\uff0c\u5982\u679c\u6211\u4eec\u5173\u95ed\u4e86\u6d4f\u89c8\u5668\uff0c\u5219\u7a7a\u95f2\u5185\u5b58\u8fd8\u6709 1024 - 512 - 256 = 256MB\u3002 \u5982\u679c\u8fd9\u4e2a 256MB \u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u88ab\u5206\u6210\u4e86\u4e24\u6bb5 128 MB \u5185\u5b58\uff0c\u8fd9\u5c31\u4f1a\u5bfc\u81f4\u6ca1\u6709\u7a7a\u95f4\u518d\u6253\u5f00\u4e00\u4e2a 200MB \u7684\u7a0b\u5e8f\u3002 \u8fd9\u91cc\u7684\u5185\u5b58\u788e\u7247\u7684\u95ee\u9898\u5171\u6709\u4e24\u5904\u5730\u65b9\uff1a \u5916\u90e8\u5185\u5b58\u788e\u7247\uff0c\u4e5f\u5c31\u662f\u4ea7\u751f\u4e86\u591a\u4e2a\u4e0d\u8fde\u7eed\u7684\u5c0f\u7269\u7406\u5185\u5b58\uff0c\u5bfc\u81f4\u65b0\u7684\u7a0b\u5e8f\u65e0\u6cd5\u88ab\u88c5\u8f7d\uff1b \u5185\u90e8\u5185\u5b58\u788e\u7247\uff0c\u7a0b\u5e8f\u6240\u6709\u7684\u5185\u5b58\u90fd\u88ab\u88c5\u8f7d\u5230\u4e86\u7269\u7406\u5185\u5b58\uff0c\u4f46\u662f\u8fd9\u4e2a\u7a0b\u5e8f\u6709\u90e8\u5206\u7684\u5185\u5b58\u53ef\u80fd\u5e76\u4e0d\u662f\u5f88\u5e38\u4f7f\u7528\uff0c\u8fd9\u4e5f\u4f1a\u5bfc\u81f4\u5185\u5b58\u7684\u6d6a\u8d39\uff1b \u9488\u5bf9\u4e0a\u9762\u4e24\u79cd\u5185\u5b58\u788e\u7247\u7684\u95ee\u9898\uff0c\u89e3\u51b3\u7684\u65b9\u5f0f\u4f1a\u6709\u6240\u4e0d\u540c\u3002 \u89e3\u51b3\u5916\u90e8\u5185\u5b58\u788e\u7247\u7684\u95ee\u9898\u5c31\u662f \u5185\u5b58\u4ea4\u6362 \u3002 \u53ef\u4ee5\u628a\u97f3\u4e50\u7a0b\u5e8f\u5360\u7528\u7684\u90a3 256MB \u5185\u5b58\u5199\u5230\u786c\u76d8\u4e0a\uff0c\u7136\u540e\u518d\u4ece\u786c\u76d8\u4e0a\u8bfb\u56de\u6765\u5230\u5185\u5b58\u91cc\u3002\u4e0d\u8fc7\u518d\u8bfb\u56de\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e0d\u80fd\u88c5\u8f7d\u56de\u539f\u6765\u7684\u4f4d\u7f6e\uff0c\u800c\u662f\u7d27\u7d27\u8ddf\u7740\u90a3\u5df2\u7ecf\u88ab\u5360\u7528\u4e86\u7684 512MB \u5185\u5b58\u540e\u9762\u3002\u8fd9\u6837\u5c31\u80fd\u7a7a\u7f3a\u51fa\u8fde\u7eed\u7684 256MB \u7a7a\u95f4\uff0c\u4e8e\u662f\u65b0\u7684 200MB \u7a0b\u5e8f\u5c31\u53ef\u4ee5\u88c5\u8f7d\u8fdb\u6765\u3002 \u8fd9\u4e2a\u5185\u5b58\u4ea4\u6362\u7a7a\u95f4\uff0c\u5728 Linux \u7cfb\u7edf\u91cc\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u5e38\u770b\u5230\u7684 Swap \u7a7a\u95f4\uff0c\u8fd9\u5757\u7a7a\u95f4\u662f\u4ece\u786c\u76d8\u5212\u5206\u51fa\u6765\u7684\uff0c\u7528\u4e8e\u5185\u5b58\u4e0e\u786c\u76d8\u7684\u7a7a\u95f4\u4ea4\u6362\u3002","title":"\u6211\u4eec\u6765\u770b\u770b\u8fd9\u6837\u4e00\u4e2a\u4f8b\u5b50\u3002\u5047\u8bbe\u6709 1G \u7684\u7269\u7406\u5185\u5b58\uff0c\u7528\u6237\u6267\u884c\u4e86\u591a\u4e2a\u7a0b\u5e8f\uff0c\u5176\u4e2d\uff1a"},{"location":"chapter_6/4_linux_mem_theory/#_6","text":"\u5bf9\u4e8e\u591a\u8fdb\u7a0b\u7684\u7cfb\u7edf\u6765\u8bf4\uff0c\u7528\u5206\u6bb5\u7684\u65b9\u5f0f\uff0c\u5185\u5b58\u788e\u7247\u662f\u5f88\u5bb9\u6613\u4ea7\u751f\u7684\uff0c\u4ea7\u751f\u4e86\u5185\u5b58\u788e\u7247\uff0c\u90a3\u4e0d\u5f97\u4e0d\u91cd\u65b0 Swap \u5185\u5b58\u533a\u57df \uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u4ea7\u751f\u6027\u80fd\u74f6\u9888\u3002 \u56e0\u4e3a\u786c\u76d8\u7684\u8bbf\u95ee\u901f\u5ea6\u8981\u6bd4\u5185\u5b58\u6162\u592a\u591a\u4e86\uff0c\u6bcf\u4e00\u6b21\u5185\u5b58\u4ea4\u6362\uff0c\u6211\u4eec\u90fd\u9700\u8981\u628a\u4e00\u5927\u6bb5\u8fde\u7eed\u7684\u5185\u5b58\u6570\u636e\u5199\u5230\u786c\u76d8\u4e0a\u3002 \u6240\u4ee5\uff0c \u5982\u679c\u5185\u5b58\u4ea4\u6362\u7684\u65f6\u5019\uff0c\u4ea4\u6362\u7684\u662f\u4e00\u4e2a\u5360\u5185\u5b58\u7a7a\u95f4\u5f88\u5927\u7684\u7a0b\u5e8f\uff0c\u8fd9\u6837\u6574\u4e2a\u673a\u5668\u90fd\u4f1a\u663e\u5f97\u5361\u987f \u3002 \u4e3a\u4e86\u89e3\u51b3\u5185\u5b58\u5206\u6bb5\u7684\u5185\u5b58\u788e\u7247\u548c\u5185\u5b58\u4ea4\u6362\u6548\u7387\u4f4e\u7684\u95ee\u9898\uff0c\u5c31\u51fa\u73b0\u4e86\u5185\u5b58\u5206\u9875\u3002","title":"\u518d\u6765\u770b\u770b\uff0c\u5206\u6bb5\u4e3a\u4ec0\u4e48\u4f1a\u5bfc\u81f4\u5185\u5b58\u4ea4\u6362\u6548\u7387\u4f4e\u7684\u95ee\u9898\uff1f"},{"location":"chapter_6/4_linux_mem_theory/#_7","text":"\u5206\u6bb5\u7684\u597d\u5904\u5c31\u662f\u80fd\u4ea7\u751f\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u4f46\u662f\u4f1a\u51fa\u73b0\u5185\u5b58\u788e\u7247\u548c\u5185\u5b58\u4ea4\u6362\u7684\u7a7a\u95f4\u592a\u5927\u7684\u95ee\u9898\u3002 \u8981\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u90a3\u4e48\u5c31\u8981\u60f3\u51fa\u80fd\u5c11\u51fa\u73b0\u4e00\u4e9b\u5185\u5b58\u788e\u7247\u7684\u529e\u6cd5\u3002\u53e6\u5916\uff0c\u5f53\u9700\u8981\u8fdb\u884c\u5185\u5b58\u4ea4\u6362\u7684\u65f6\u5019\uff0c\u8ba9\u9700\u8981\u4ea4\u6362\u5199\u5165\u6216\u8005\u4ece\u78c1\u76d8\u88c5\u8f7d\u7684\u6570\u636e\u66f4\u5c11\u4e00\u70b9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u89e3\u51b3\u95ee\u9898\u4e86\u3002\u8fd9\u4e2a\u529e\u6cd5\uff0c\u4e5f\u5c31\u662f \u5185\u5b58\u5206\u9875\uff08Paging\uff09 \u3002 \u5206\u9875\u662f\u628a\u6574\u4e2a\u865a\u62df\u548c\u7269\u7406\u5185\u5b58\u7a7a\u95f4\u5207\u6210\u4e00\u6bb5\u6bb5\u56fa\u5b9a\u5c3a\u5bf8\u7684\u5927\u5c0f\u3002 \u8fd9\u6837\u4e00\u4e2a\u8fde\u7eed\u5e76\u4e14\u5c3a\u5bf8\u56fa\u5b9a\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u6211\u4eec\u53eb \u9875\uff08Page\uff09 \u3002\u5728 Linux \u4e0b\uff0c\u6bcf\u4e00\u9875\u7684\u5927\u5c0f\u4e3a 4KB \u3002 \u865a\u62df\u5730\u5740 \u4e0e \u7269\u7406\u5730\u5740 \u4e4b\u95f4\u901a\u8fc7 \u9875\u8868 \u6765\u6620\u5c04\uff0c\u5982\u4e0b\u56fe\uff1a \u9875\u8868\u5b9e\u9645\u4e0a\u5b58\u50a8\u5728 CPU \u7684 \u5185\u5b58\u7ba1\u7406\u5355\u5143 \uff08MMU\uff09 \u4e2d\uff0c\u4e8e\u662f CPU \u5c31\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 MMU \uff0c\u627e\u51fa\u8981\u5b9e\u9645\u8981\u8bbf\u95ee\u7684\u7269\u7406\u5185\u5b58\u5730\u5740\u3002 \u800c\u5f53\u8fdb\u7a0b\u8bbf\u95ee\u7684\u865a\u62df\u5730\u5740\u5728\u9875\u8868\u4e2d\u67e5\u4e0d\u5230\u65f6\uff0c\u7cfb\u7edf\u4f1a\u4ea7\u751f\u4e00\u4e2a \u7f3a\u9875\u5f02\u5e38 \uff0c\u8fdb\u5165\u7cfb\u7edf\u5185\u6838\u7a7a\u95f4\u5206\u914d\u7269\u7406\u5185\u5b58\u3001\u66f4\u65b0\u8fdb\u7a0b\u9875\u8868\uff0c\u6700\u540e\u518d\u8fd4\u56de\u7528\u6237\u7a7a\u95f4\uff0c\u6062\u590d\u8fdb\u7a0b\u7684\u8fd0\u884c\u3002 \u5206\u9875\u662f\u600e\u4e48\u89e3\u51b3\u5206\u6bb5\u7684\u5185\u5b58\u788e\u7247\u3001\u5185\u5b58\u4ea4\u6362\u6548\u7387\u4f4e\u7684\u95ee\u9898\uff1f \u7531\u4e8e\u5185\u5b58\u7a7a\u95f4\u90fd\u662f\u9884\u5148\u5212\u5206\u597d\u7684\uff0c\u4e5f\u5c31\u4e0d\u4f1a\u50cf\u5206\u6bb5\u4f1a\u4ea7\u751f\u95f4\u9699\u975e\u5e38\u5c0f\u7684\u5185\u5b58\uff0c\u8fd9\u6b63\u662f\u5206\u6bb5\u4f1a\u4ea7\u751f\u5185\u5b58\u788e\u7247\u7684\u539f\u56e0\u3002\u800c \u91c7\u7528\u4e86\u5206\u9875\uff0c\u90a3\u4e48\u91ca\u653e\u7684\u5185\u5b58\u90fd\u662f\u4ee5\u9875\u4e3a\u5355\u4f4d\u91ca\u653e\u7684\uff0c\u4e5f\u5c31\u4e0d\u4f1a\u4ea7\u751f\u65e0\u6cd5\u7ed9\u8fdb\u7a0b\u4f7f\u7528\u7684\u5c0f\u5185\u5b58 \u3002 \u5982\u679c\u5185\u5b58\u7a7a\u95f4\u4e0d\u591f\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u628a\u5176\u4ed6\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u4e2d\u7684\u300c\u6700\u8fd1\u6ca1\u88ab\u4f7f\u7528\u300d\u7684\u5185\u5b58\u9875\u9762\u7ed9\u91ca\u653e\u6389\uff0c\u4e5f\u5c31\u662f\u6682\u65f6\u5199\u5728\u786c\u76d8\u4e0a\uff0c\u79f0\u4e3a \u6362\u51fa\uff08Swap Out\uff09 \u3002\u4e00\u65e6\u9700\u8981\u7684\u65f6\u5019\uff0c\u518d\u52a0\u8f7d\u8fdb\u6765\uff0c\u79f0\u4e3a \u6362\u5165\uff08Swap In\uff09 \u3002\u6240\u4ee5\uff0c\u4e00\u6b21\u6027\u5199\u5165\u78c1\u76d8\u7684\u4e5f\u53ea\u6709\u5c11\u6570\u7684\u4e00\u4e2a\u9875\u6216\u8005\u51e0\u4e2a\u9875\uff0c\u4e0d\u4f1a\u82b1\u592a\u591a\u65f6\u95f4\uff0c \u5185\u5b58\u4ea4\u6362\u7684\u6548\u7387\u5c31\u76f8\u5bf9\u6bd4\u8f83\u9ad8 \u3002 \u66f4\u8fdb\u4e00\u6b65\u5730\uff0c\u5206\u9875\u7684\u65b9\u5f0f\u4f7f\u5f97\u6211\u4eec\u5728\u52a0\u8f7d\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u4e0d\u518d\u9700\u8981\u4e00\u6b21\u6027\u90fd\u628a\u7a0b\u5e8f\u52a0\u8f7d\u5230\u7269\u7406\u5185\u5b58\u4e2d\u3002\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u5728\u8fdb\u884c\u865a\u62df\u5185\u5b58\u548c\u7269\u7406\u5185\u5b58\u7684\u9875\u4e4b\u95f4\u7684\u6620\u5c04\u4e4b\u540e\uff0c\u5e76\u4e0d\u771f\u7684\u628a\u9875\u52a0\u8f7d\u5230\u7269\u7406\u5185\u5b58\u91cc\uff0c\u800c\u662f \u53ea\u6709\u5728\u7a0b\u5e8f\u8fd0\u884c\u4e2d\uff0c\u9700\u8981\u7528\u5230\u5bf9\u5e94\u865a\u62df\u5185\u5b58\u9875\u91cc\u9762\u7684\u6307\u4ee4\u548c\u6570\u636e\u65f6\uff0c\u518d\u52a0\u8f7d\u5230\u7269\u7406\u5185\u5b58\u91cc\u9762\u53bb \u3002 \u5206\u9875\u673a\u5236\u4e0b\uff0c\u865a\u62df\u5730\u5740\u548c\u7269\u7406\u5730\u5740\u662f\u5982\u4f55\u6620\u5c04\u7684\uff1f \u5728\u5206\u9875\u673a\u5236\u4e0b\uff0c\u865a\u62df\u5730\u5740\u5206\u4e3a\u4e24\u90e8\u5206\uff0c \u9875\u53f7 \u548c \u9875\u5185\u504f\u79fb \u3002 \u9875\u53f7 \u4f5c\u4e3a \u9875\u8868 \u7684\u7d22\u5f15\uff0c \u9875\u8868 \u5305\u542b\u7269\u7406\u9875\u6bcf\u9875\u6240\u5728 \u7269\u7406\u5185\u5b58\u7684\u57fa\u5730\u5740 \uff0c\u8fd9\u4e2a\u57fa\u5730\u5740\u4e0e\u9875\u5185\u504f\u79fb\u7684\u7ec4\u5408\u5c31\u5f62\u6210\u4e86\u7269\u7406\u5185\u5b58\u5730\u5740\uff0c\u89c1\u4e0b\u56fe\u3002","title":"\u5185\u5b58\u5206\u9875"},{"location":"chapter_6/4_linux_mem_theory/#linux","text":"Linux \u4e2d\u4f7f\u7528 struct mm_struct \u8868\u793a\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4 mm_struct \u4e2d\u6709\u4e00\u4e2a pgd \u57df, \u6307\u5411 struct pgd_t \u8868\u793a\u8fdb\u7a0b\u7684\u9875\u8868 \u603b\u7ed3\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5185\u5b58\u5730\u5740\u8f6c\u6362\uff0c\u5176\u5b9e\u5c31\u662f\u8fd9\u6837\u4e09\u4e2a\u6b65\u9aa4\uff1a \u628a\u865a\u62df\u5185\u5b58\u5730\u5740\uff0c\u5207\u5206\u6210\u9875\u53f7\u548c\u504f\u79fb\u91cf\uff1b \u6839\u636e\u9875\u53f7\uff0c\u4ece\u9875\u8868\u91cc\u9762\uff0c\u67e5\u8be2\u5bf9\u5e94\u7684\u7269\u7406\u9875\u53f7\uff1b \u76f4\u63a5\u62ff\u7269\u7406\u9875\u53f7\uff0c\u52a0\u4e0a\u524d\u9762\u7684\u504f\u79fb\u91cf\uff0c\u5c31\u5f97\u5230\u4e86\u7269\u7406\u5185\u5b58\u5730\u5740\u3002 \u4e0b\u9762\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u865a\u62df\u5185\u5b58\u4e2d\u7684\u9875\u901a\u8fc7\u9875\u8868\u6620\u5c04\u4e3a\u4e86\u7269\u7406\u5185\u5b58\u4e2d\u7684\u9875\uff0c\u5982\u4e0b\u56fe\uff1a","title":"Linux \u4e0b\u9875\u8868"},{"location":"chapter_6/4_linux_mem_theory/#_8","text":"\u53c2\u8003 1 \u53c2\u8003 2","title":"\u5355\u6781\u9875\u8868\u7684\u95ee\u9898\u548c\u591a\u7ea7\u9875\u8868\u7684\u5f15\u5165"},{"location":"chapter_6/4_linux_mem_theory/#linux_1","text":"","title":"Linux \u4e0b\u6bb5\u9875\u5f0f\u5185\u5b58\u7ba1\u7406"},{"location":"chapter_6/4_linux_mem_theory/#1","text":"\u5185\u5b58\u5206\u6bb5\u548c\u5185\u5b58\u5206\u9875\u5e76\u4e0d\u662f\u5bf9\u7acb\u7684\uff0c\u5b83\u4eec\u662f\u53ef\u4ee5\u7ec4\u5408\u8d77\u6765\u5728\u540c\u4e00\u4e2a\u7cfb\u7edf\u4e2d\u4f7f\u7528\u7684\uff0c\u90a3\u4e48\u7ec4\u5408\u8d77\u6765\u540e\uff0c\u901a\u5e38\u79f0\u4e3a \u6bb5\u9875\u5f0f\u5185\u5b58\u7ba1\u7406 \u3002 \u6bb5\u9875\u5f0f\u5185\u5b58\u7ba1\u7406\u5b9e\u73b0\u7684\u65b9\u5f0f\uff1a \u5148\u5c06\u7a0b\u5e8f\u5212\u5206\u4e3a\u591a\u4e2a\u6709\u903b\u8f91\u610f\u4e49\u7684\u6bb5\uff0c\u4e5f\u5c31\u662f\u524d\u9762\u63d0\u5230\u7684\u5206\u6bb5\u673a\u5236\uff1b \u63a5\u7740\u518d\u628a\u6bcf\u4e2a\u6bb5\u5212\u5206\u4e3a\u591a\u4e2a\u9875\uff0c\u4e5f\u5c31\u662f\u5bf9\u5206\u6bb5\u5212\u5206\u51fa\u6765\u7684\u8fde\u7eed\u7a7a\u95f4\uff0c\u518d\u5212\u5206\u56fa\u5b9a\u5927\u5c0f\u7684\u9875\uff1b \u8fd9\u6837\uff0c\u5730\u5740\u7ed3\u6784\u5c31\u7531 \u6bb5\u53f7 \u3001 \u6bb5\u5185\u9875\u53f7 \u548c \u9875\u5185\u4f4d\u79fb \u4e09\u90e8\u5206\u7ec4\u6210\u3002 \u7528\u4e8e\u6bb5\u9875\u5f0f\u5730\u5740\u53d8\u6362\u7684\u6570\u636e\u7ed3\u6784\u662f\u6bcf\u4e00\u4e2a\u7a0b\u5e8f\u4e00\u5f20\u6bb5\u8868\uff0c\u6bcf\u4e2a\u6bb5\u53c8\u5efa\u7acb\u4e00\u5f20\u9875\u8868\uff0c\u6bb5\u8868\u4e2d\u7684\u5730\u5740\u662f\u9875\u8868\u7684\u8d77\u59cb\u5730\u5740\uff0c\u800c\u9875\u8868\u4e2d\u7684\u5730\u5740\u5219\u4e3a\u67d0\u9875\u7684\u7269\u7406\u9875\u53f7\uff0c\u5982\u56fe\u6240\u793a\uff1a \u6bb5\u9875\u5f0f\u5730\u5740\u53d8\u6362\u4e2d\u8981\u5f97\u5230\u7269\u7406\u5730\u5740\u987b\u7ecf\u8fc7\u4e09\u6b21\u5185\u5b58\u8bbf\u95ee\uff1a \u7b2c\u4e00\u6b21\u8bbf\u95ee\u6bb5\u8868\uff0c\u5f97\u5230\u9875\u8868\u8d77\u59cb\u5730\u5740\uff1b \u7b2c\u4e8c\u6b21\u8bbf\u95ee\u9875\u8868\uff0c\u5f97\u5230\u7269\u7406\u9875\u53f7\uff1b \u7b2c\u4e09\u6b21\u5c06\u7269\u7406\u9875\u53f7\u4e0e\u9875\u5185\u4f4d\u79fb\u7ec4\u5408\uff0c\u5f97\u5230\u7269\u7406\u5730\u5740\u3002 \u53ef\u7528\u8f6f\u3001\u786c\u4ef6\u76f8\u7ed3\u5408\u7684\u65b9\u6cd5\u5b9e\u73b0\u6bb5\u9875\u5f0f\u5730\u5740\u53d8\u6362\uff0c\u8fd9\u6837\u867d\u7136\u589e\u52a0\u4e86\u786c\u4ef6\u6210\u672c\u548c\u7cfb\u7edf\u5f00\u9500\uff0c\u4f46\u63d0\u9ad8\u4e86\u5185\u5b58\u7684\u5229\u7528\u7387\u3002","title":"1 \u4ec0\u4e48\u662f\u6bb5\u9875\u5f0f\u5185\u5b58\u7ba1\u7406"},{"location":"chapter_6/4_linux_mem_theory/#2-linux","text":"\u90a3\u4e48\uff0cLinux \u64cd\u4f5c\u7cfb\u7edf\u91c7\u7528\u4e86\u54ea\u79cd\u65b9\u5f0f\u6765\u7ba1\u7406\u5185\u5b58\u5462\uff1f \u5728\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\u524d\uff0c\u6211\u4eec\u5f97\u5148\u770b\u770b Intel \u5904\u7406\u5668\u7684\u53d1\u5c55\u5386\u53f2. \u65e9\u671f Intel \u7684\u5904\u7406\u5668\u4ece 80286 \u5f00\u59cb\u4f7f\u7528\u7684\u662f\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\u3002\u4f46\u662f\u5f88\u5feb\u53d1\u73b0\uff0c\u5149\u6709\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\u800c\u6ca1\u6709\u9875\u5f0f\u5185\u5b58\u7ba1\u7406\u662f\u4e0d\u591f\u7684\uff0c\u8fd9\u4f1a\u4f7f\u5b83\u7684 X86 \u7cfb\u5217\u4f1a\u5931\u53bb\u5e02\u573a\u7684\u7ade\u4e89\u529b\u3002\u56e0\u6b64\uff0c\u5728\u4e0d\u4e45\u4ee5\u540e\u7684 80386 \u4e2d\u5c31\u5b9e\u73b0\u4e86\u5bf9\u9875\u5f0f\u5185\u5b58\u7ba1\u7406\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c80386 \u9664\u4e86\u5b8c\u6210\u5e76\u5b8c\u5584\u4ece 80286 \u5f00\u59cb\u7684\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\u7684\u540c\u65f6\u8fd8\u5b9e\u73b0\u4e86\u9875\u5f0f\u5185\u5b58\u7ba1\u7406\u3002 \u4f46\u662f\u8fd9\u4e2a 80386 \u7684\u9875\u5f0f\u5185\u5b58\u7ba1\u7406\u8bbe\u8ba1\u65f6\uff0c\u6ca1\u6709\u7ed5\u5f00\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\uff0c\u800c\u662f\u5efa\u7acb\u5728\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\u7684\u57fa\u7840\u4e0a\uff0c\u8fd9\u5c31\u610f\u5473\u7740\uff0c \u9875\u5f0f\u5185\u5b58\u7ba1\u7406\u7684\u4f5c\u7528\u662f\u5728\u7531\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\u6240\u6620\u5c04\u800c\u6210\u7684\u7684\u5730\u5740\u4e0a\u518d\u52a0\u4e0a\u4e00\u5c42\u5730\u5740\u6620\u5c04\u3002 \u7531\u4e8e\u6b64\u65f6\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\u6620\u5c04\u800c\u6210\u7684\u5730\u5740\u4e0d\u518d\u662f\u201c\u7269\u7406\u5730\u5740\u201d\u4e86\uff0cIntel \u5c31\u79f0\u4e4b\u4e3a\u201c\u7ebf\u6027\u5730\u5740\u201d\uff08\u4e5f\u79f0\u865a\u62df\u5730\u5740\uff09\u3002\u4e8e\u662f\uff0c\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\u5148\u5c06\u903b\u8f91\u5730\u5740\u6620\u5c04\u6210\u7ebf\u6027\u5730\u5740\uff0c\u7136\u540e\u518d\u7531\u9875\u5f0f\u5185\u5b58\u7ba1\u7406\u5c06\u7ebf\u6027\u5730\u5740\u6620\u5c04\u6210\u7269\u7406\u5730\u5740\u3002 \u8fd9\u91cc\u8bf4\u660e\u4e0b\u903b\u8f91\u5730\u5740\u548c\u7ebf\u6027\u5730\u5740\uff1a \u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u5730\u5740\uff0c\u901a\u5e38\u662f\u6ca1\u88ab\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\u6620\u5c04\u7684\u5730\u5740\uff0c\u79f0\u4e3a \u903b\u8f91\u5730\u5740 \uff1b \u901a\u8fc7\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\u6620\u5c04\u7684\u5730\u5740\uff0c\u79f0\u4e3a \u7ebf\u6027\u5730\u5740 \uff0c\u4e5f\u53eb\u865a\u62df\u5730\u5740\uff1b \u903b\u8f91\u5730\u5740 \u662f \u300c\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\u300d \u8f6c\u6362\u524d\u7684\u5730\u5740\uff0c \u7ebf\u6027\u5730\u5740 \u5219\u662f \u300c\u9875\u5f0f\u5185\u5b58\u7ba1\u7406\u300d \u8f6c\u6362\u524d\u7684\u5730\u5740\u3002","title":"2 Linux \u4e0b\u7684\u6bb5\u9875\u5f0f\u5185\u5b58\u7ba1\u7406"},{"location":"chapter_6/4_linux_mem_theory/#21-linux","text":"\u8fd9\u4e3b\u8981\u662f\u4e0a\u9762 Intel \u5904\u7406\u5668\u53d1\u5c55\u5386\u53f2\u5bfc\u81f4\u7684\uff0c\u56e0\u4e3a Intel X86 CPU \u4e00\u5f8b\u5bf9\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7684\u5730\u5740\u5148\u8fdb\u884c\u6bb5\u5f0f\u6620\u5c04\uff0c\u7136\u540e\u624d\u80fd\u8fdb\u884c\u9875\u5f0f\u6620\u5c04\u3002\u65e2\u7136 CPU \u7684\u786c\u4ef6\u7ed3\u6784\u662f\u8fd9\u6837\uff0cLinux \u5185\u6838\u4e5f\u53ea\u597d\u670d\u4ece Intel \u7684\u9009\u62e9\u3002 \u4f46\u662f\u4e8b\u5b9e\u4e0a\uff0cLinux \u5185\u6838\u6240\u91c7\u53d6\u7684\u529e\u6cd5\u662f\u4f7f\u6bb5\u5f0f\u6620\u5c04\u7684\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u4e0d\u8d77\u4ec0\u4e48\u4f5c\u7528\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u201c\u4e0a\u6709\u653f\u7b56\uff0c\u4e0b\u6709\u5bf9\u7b56\u201d\uff0c\u82e5\u60f9\u4e0d\u8d77\u5c31\u8eb2\u7740\u8d70\u3002 Linux \u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e2a\u6bb5\u90fd\u662f\u4ece 0 \u5730\u5740\u5f00\u59cb\u7684\u6574\u4e2a 4GB \u865a\u62df\u7a7a\u95f4\uff0832 \u4f4d\u73af\u5883\u4e0b\uff09\uff0c\u4e5f\u5c31\u662f\u6240\u6709\u7684\u6bb5\u7684\u8d77\u59cb\u5730\u5740\u90fd\u662f\u4e00\u6837\u7684\u3002\u8fd9\u610f\u5473\u7740\uff0cLinux \u7cfb\u7edf\u4e2d\u7684\u4ee3\u7801\uff0c\u5305\u62ec\u64cd\u4f5c\u7cfb\u7edf\u672c\u8eab\u7684\u4ee3\u7801\u548c\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\uff0c\u6240\u9762\u5bf9\u7684\u5730\u5740\u7a7a\u95f4\u90fd\u662f\u7ebf\u6027\u5730\u5740\u7a7a\u95f4\uff08\u865a\u62df\u5730\u5740\uff09\uff0c\u8fd9\u79cd\u505a\u6cd5\u76f8\u5f53\u4e8e\u5c4f\u853d\u4e86\u5904\u7406\u5668\u4e2d\u7684\u903b\u8f91\u5730\u5740\u6982\u5ff5\uff0c\u6bb5\u53ea\u88ab\u7528\u4e8e\u8bbf\u95ee\u63a7\u5236\u548c\u5185\u5b58\u4fdd\u62a4\u3002 \u56db\u4e2a\u4e3b\u8981\u7684 Linux \u6bb5\u7684\u6bb5\u63cf\u8ff0\u7b26\u5b57\u6bb5\u7684\u503c \u6bb5 Base G Limit S Type DPL D/B P \u7528\u6237\u4ee3\u7801\u6bb5 0x00000000 1 0xfffff 1 10 3 1 1 \u7528\u6237\u6570\u636e\u6bb5 0x00000000 1 0xfffff 1 2 3 1 1 \u5185\u6838\u4ee3\u7801\u6bb5 0x00000000 1 0xfffff 1 10 0 1 1 \u5185\u6838\u6570\u636e\u6bb5 0x00000000 1 0xfffff 1 2 0 1 1 \u76f8\u5e94\u7684 \u6bb5\u9009\u62e9\u7b26 \u7531\u5b8f __USER_CS , __USER_DS , __KERNEL_CS , __KERNEL_DS \u5206\u522b\u5b9a\u4e49.\u4f8b\u5982, \u4e3a\u4e86\u5bf9\u5185\u6838\u4ee3\u7801\u6bb5\u5bfb\u5740\uff0c\u5185\u6838\u53ea\u9700\u8981\u628a __KERNEL_CS \u5b8f\u4ea7\u751f\u7684\u503c\u88c5\u8fdb cs\u6bb5\u5bc4\u5b58\u5668 \u5373\u53ef. \u6ce8\u610f 1 \u4e0e\u6bb5\u76f8\u5173\u7684\u7ebf\u6027\u5730\u5740\u90fd 0 \u5f00\u59cb\uff0c\u8fbe\u5230 2 \u7684 32 \u6b21\u65b9-1 \u7684\u5bfb\u5740\u9650\u957f. \u8fd9\u5c31\u610f\u5473\u7740\u5728\u7528\u6237\u6001\u6216\u5185\u6838\u6001\u4e0b\u7684\u6240\u6709\u8fdb\u7a0b\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u903b\u8f91\u5730\u5740. 2 \u6240\u6709\u6bb5\u90fd\u4ece 0x00000000 \u5f00\u59cb, \u8868\u660e Linux \u4e0b \u903b\u8f91\u5730\u5740 \u4e0e \u7ebf\u6027\u5730\u5740 \u662f\u4e00\u81f4\u7684,\u5373 \u903b\u8f91\u5730\u5740 \u7684\u504f\u79fb\u91cf\u5b57\u6bb5\u7684\u503c\u4e0e\u76f8\u5e94 \u7ebf\u6027\u5730\u5740 \u7684\u503c\u603b\u662f\u4e00\u81f4. \u6211\u4eec\u518d\u6765\u77a7\u4e00\u77a7\uff0cLinux \u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u662f\u5982\u4f55\u5206\u5e03\u7684\uff1f \u5728 Linux \u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u5185\u90e8\u53c8\u88ab\u5206\u4e3a \u5185\u6838\u7a7a\u95f4 \u548c \u7528\u6237\u7a7a\u95f4 \u4e24\u90e8\u5206\uff0c\u4e0d\u540c\u4f4d\u6570\u7684\u7cfb\u7edf\uff0c\u5730\u5740\u7a7a\u95f4\u7684\u8303\u56f4\u4e5f\u4e0d\u540c\u3002\u6bd4\u5982\u6700\u5e38\u89c1\u7684 32 \u4f4d\u548c 64 \u4f4d\u7cfb\u7edf\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u901a\u8fc7\u8fd9\u91cc\u53ef\u4ee5\u770b\u51fa\uff1a 32 \u4f4d\u7cfb\u7edf\u7684\u5185\u6838\u7a7a\u95f4\u5360\u7528 1G\uff0c\u4f4d\u4e8e\u6700\u9ad8\u5904\uff0c\u5269\u4e0b\u7684 3G \u662f\u7528\u6237\u7a7a\u95f4\uff1b 64 \u4f4d\u7cfb\u7edf\u7684\u5185\u6838\u7a7a\u95f4\u548c\u7528\u6237\u7a7a\u95f4\u90fd\u662f 128T\uff0c\u5206\u522b\u5360\u636e\u6574\u4e2a\u5185\u5b58\u7a7a\u95f4\u7684\u6700\u9ad8\u548c\u6700\u4f4e\u5904\uff0c\u5269\u4e0b\u7684\u4e2d\u95f4\u90e8\u5206\u662f\u672a\u5b9a\u4e49\u7684\u3002 \u518d\u6765\u8bf4\u8bf4\uff0c\u5185\u6838\u7a7a\u95f4\u4e0e\u7528\u6237\u7a7a\u95f4\u7684\u533a\u522b\uff1a \u8fdb\u7a0b\u5728\u7528\u6237\u6001\u65f6\uff0c\u53ea\u80fd\u8bbf\u95ee\u7528\u6237\u7a7a\u95f4\u5185\u5b58\uff1b \u53ea\u6709\u8fdb\u5165\u5185\u6838\u6001\u540e\uff0c\u624d\u53ef\u4ee5\u8bbf\u95ee\u5185\u6838\u7a7a\u95f4\u7684\u5185\u5b58\uff1b \u867d\u7136\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u5404\u81ea\u6709\u72ec\u7acb\u7684\u865a\u62df\u5185\u5b58\uff0c\u4f46\u662f \u6bcf\u4e2a\u865a\u62df\u5185\u5b58\u4e2d\u7684\u5185\u6838\u5730\u5740\uff0c\u5176\u5b9e\u5173\u8054\u7684\u90fd\u662f\u76f8\u540c\u7684\u7269\u7406\u5185\u5b58 \u3002\u8fd9\u6837\uff0c\u8fdb\u7a0b\u5207\u6362\u5230\u5185\u6838\u6001\u540e\uff0c\u5c31\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u8bbf\u95ee\u5185\u6838\u7a7a\u95f4\u5185\u5b58\u3002 \u63a5\u4e0b\u6765\uff0c\u8fdb\u4e00\u6b65\u4e86\u89e3\u865a\u62df\u7a7a\u95f4\u7684\u5212\u5206\u60c5\u51b5\uff0c\u7528\u6237\u7a7a\u95f4\u548c\u5185\u6838\u7a7a\u95f4\u5212\u5206\u7684\u65b9\u5f0f\u662f\u4e0d\u540c\u7684\uff0c\u5185\u6838\u7a7a\u95f4\u7684\u5206\u5e03\u60c5\u51b5\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002 \u6211\u4eec\u770b\u770b\u7528\u6237\u7a7a\u95f4\u5206\u5e03\u7684\u60c5\u51b5\uff0c\u4ee5 32 \u4f4d\u7cfb\u7edf\u4e3a\u4f8b\uff0c\u6211\u753b\u4e86\u4e00\u5f20\u56fe\u6765\u8868\u793a\u5b83\u4eec\u7684\u5173\u7cfb\uff1a \u901a\u8fc7\u8fd9\u5f20\u56fe\u4f60\u53ef\u4ee5\u770b\u5230\uff0c\u7528\u6237\u7a7a\u95f4\u5185\u5b58\uff0c\u4ece \u4f4e\u5230\u9ad8 \u5206\u522b\u662f 7 \u79cd\u4e0d\u540c\u7684\u5185\u5b58\u6bb5\uff1a 1 \u7a0b\u5e8f\u6587\u4ef6\u6bb5\uff0c\u5305\u62ec\u4e8c\u8fdb\u5236\u53ef\u6267\u884c\u4ee3\u7801\uff1b 2 \u5df2\u521d\u59cb\u5316\u6570\u636e\u6bb5\uff0c\u5305\u62ec\u9759\u6001\u5e38\u91cf\uff1b 3 \u672a\u521d\u59cb\u5316\u6570\u636e\u6bb5\uff0c\u5305\u62ec\u672a\u521d\u59cb\u5316\u7684\u9759\u6001\u53d8\u91cf\uff1b 4 \u5806\u6bb5\uff0c\u5305\u62ec\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\uff0c\u4ece\u4f4e\u5730\u5740\u5f00\u59cb\u5411\u4e0a\u589e\u957f\uff1b 5 \u6587\u4ef6\u6620\u5c04\u6bb5\uff0c\u5305\u62ec\u52a8\u6001\u5e93\u3001\u5171\u4eab\u5185\u5b58\u7b49\uff0c\u4ece\u4f4e\u5730\u5740\u5f00\u59cb\u5411\u4e0a\u589e\u957f\uff08\u8ddf\u786c\u4ef6\u548c\u5185\u6838\u7248\u672c\u6709\u5173\uff09 6 \u6808\u6bb5\uff0c\u5305\u62ec\u5c40\u90e8\u53d8\u91cf\u548c\u51fd\u6570\u8c03\u7528\u7684\u4e0a\u4e0b\u6587\u7b49\u3002\u6808\u7684\u5927\u5c0f\u662f\u56fa\u5b9a\u7684\uff0c\u4e00\u822c\u662f 8 MB\u3002\u5f53\u7136\u7cfb\u7edf\u4e5f\u63d0\u4f9b\u4e86\u53c2\u6570\uff0c\u4ee5\u4fbf\u6211\u4eec\u81ea\u5b9a\u4e49\u5927\u5c0f\uff1b 7 \u5185\u5b58\u7684\u6700\u9ad8\u7aef\u5b58\u653e\u7684\u662f\u547d\u4ee4\u884c\u53c2\u6570\u548c\u73af\u5883\u53d8\u91cf.","title":"2.1 Linux \u5185\u5b58\u4e3b\u8981\u91c7\u7528\u7684\u662f\u9875\u5f0f\u5185\u5b58\u7ba1\u7406\uff0c\u4f46\u540c\u65f6\u4e5f\u4e0d\u53ef\u907f\u514d\u5730\u6d89\u53ca\u4e86\u6bb5\u673a\u5236\u3002"},{"location":"chapter_6/4_linux_mem_theory/#linux_2","text":"","title":"Linux \u4e0b\u5185\u5b58\u5b50\u7cfb\u7edf\u7684\u4f18\u5316\u6280\u80fd"},{"location":"chapter_6/4_linux_mem_theory/#1-ksm","text":"\u5982\u679c\u5f00\u542f KSM\uff0ckernel \u5c42\u9762\u4f1a\u6709 ksmd \u8fdb\u7a0b\u628a\u5185\u5bb9\u5b8c\u5168\u4e00\u6837\u7684\u7269\u7406\u9875\u8fdb\u884c\u5408\u5e76\uff0c\u5e76\u6807\u8bb0\u4e3a cow (copy on write)\uff0c \u4ee5\u51cf\u5c11\u7269\u7406\u9875\u6d88\u8017 \u900f\u660e\u5927\u9875\u7684\u4f5c\u7528\u662f: \u4e00\u4e2a\u8fdb\u7a0b\u5982\u679c\u9700\u8981\u5927\u91cf\u5185\u5b58\uff0c\u90a3\u4e48\u5e95\u5c42\u7533\u8bf7\u7684\u7269\u7406\u9875\u53ef\u4ee5\u5927\u4e8e 4KB\uff0c\u6bd4\u5982 16KB \u4e00\u4e2a\u7269\u7406\u9875\uff0c\u51cf\u5c11\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u7684\u6620\u5c04\u6761\u76ee\uff0c\u4ece\u800c\u51cf\u5c11\u9875\u8868\u5927\u5c0f\uff0c\u52a0\u5feb\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u7684\u7ffb\u8bd1\u901f\u5ea6","title":"1 KSM \u548c \u900f\u660e\u5927\u9875\u7684\u533a\u522b"},{"location":"chapter_6/4_linux_mem_theory/#2-linux_1","text":"\uff08\u4e00\uff09 \u8282\u7ea6\u5185\u5b58 1 KSM 2 \u7236\u5b50\u8fdb\u7a0b\u7684 COW\uff08\u5199\u65f6 Copy\uff09 3 \u80fd\u591f\u5206\u914d\u5c0f\u4e8e\u4e00\u4e2a page \u7684\u5185\u5b58\uff0cslab \u5206\u914d\u5668 \uff08\u4e8c\uff09 \u63d0\u9ad8\u6548\u7387 1 \u900f\u660e\u5927\u9875\uff08\u901a\u8fc7\u51cf\u5c11\u9875\u8868\u6620\u5c04\u6761\u76ee\uff09 2 NUMBA \u3002\u8ba9 CPU \u5c31\u8fd1\u8bbf\u95ee\u5185\u5b58","title":"2 Linux \u5185\u5b58\u5b50\u7cfb\u7edf\u6240\u6709\u4f18\u5316\u70b9\u7f57\u5217"},{"location":"chapter_6/5_buffers_cached/","text":"\u6982\u8ff0 \u672c\u7bc7\u6587\u6863\u603b\u7ed3Linux free\u547d\u4ee4\u5c55\u793a\u7684buffers \u548c cached\u533a\u522b # free total used free shared buffers cached Mem: 3848656 2983016 865640 5312 324432 2024904 -/+ buffers/cache: 633680 3214976 Swap: 2031612 \u7ed3\u8bba buffers \u8868\u793a\u5757\u8bbe\u5907(block device)\u6240\u5360\u7528\u7684\u7f13\u5b58\u9875\uff0c\u5305\u62ec\uff1a\u76f4\u63a5\u8bfb\u5199\u5757\u8bbe\u5907\u3001\u4ee5\u53ca\u6587\u4ef6\u7cfb\u7edf\u5143\u6570\u636e(metadata)\u6bd4\u5982SuperBlock\u6240\u4f7f\u7528\u7684\u7f13\u5b58\u9875\uff1b cached \u8868\u793a\u666e\u901a\u6587\u4ef6\u6570\u636e\u6240\u5360\u7528\u7684\u7f13\u5b58\u9875, \u4e5f\u5c31\u662f Page Cache . \u8fd9\u91cc\u7a0d\u5fae\u591a\u8bf4\u4e00\u70b9buffers \u548ccached\u3002Linux 2.4.10 \u5185\u6838\u4e4b\u524d\uff0c\u78c1\u76d8\u7684\u7f13\u5b58\u6709\u4e24\u79cd\uff0c\u5373 Buffer Cache\u548c Page Cache\u3002\u524d\u8005\u7f13\u5b58\u7ba1\u7406\u78c1\u76d8\u6587\u4ef6\u7cfb\u7edf\u65f6\u8bfb\u53d6\u7684\u5757\uff0c\u540e\u8005\u5b58\u653e\u8bbf\u95ee\u5177\u4f53\u6587\u4ef6\u5185\u5bb9\u65f6\u751f\u6210\u7684\u9875\u3002\u5728 2.4.10 \u4e4b\u540e\uff0cBuffer Cache\u8fd9\u4e2a\u6982\u5ff5\u5c31\u4e0d\u5b58\u5728\u4e86\uff0c\u8fd9\u4e9b\u6570\u636e\u88ab\u653e\u5728Page Cache\u4e2d\uff08\u8fd9\u79cd Page \u88ab\u79f0\u4e3a Buffer Pages\uff09\u3002 \u7b80\u800c\u8a00\u4e4b\uff0c\u73b0\u5728\u78c1\u76d8\u7684 cache \u53ea\u6709 Page Cache \u4e00\u79cd\uff0c\u5728Page Cache \u4e2d\uff0c\u6709\u4e00\u79cdPage\u53ebBuffer Page \uff0c\u8fd9\u79cdPage\u90fd\u4e0e\u4e00\u4e2a\u53ebbuffer_head\u7684\u6570\u636e\u7ed3\u6784\u5173\u8054\uff0c\u8fd9\u4e9b\u9875\u4e5f\u5c31\u5728\u5185\u5b58\u7edf\u8ba1\u4e2d\u7528buffers\u8fd9\u4e2a\u6307\u6807\u6765\u5355\u72ec\u7edf\u8ba1\u4e86\u3002 buffers\u4e3b\u8981\u67092\u4e2a\u7528\u6237\uff082\u79cd\u4f7f\u7528\u573a\u666f\uff09\uff1a \u5e94\u7528\u76f4\u63a5\u8bbf\u95ee\u88f8\u5206\u533a (\u5373\u4f7f\u662fDirect IO \uff0c\u4ecd\u7136\u7ed5\u4e0d\u5f00\u7684buffers\u548c\u5757IO\u5c42) \u6587\u4ef6\u7cfb\u7edf\u672c\u8eab\u7684\u5b9e\u73b0\uff0c\u4f1a\u8ba4\u4e3a/dev/sda1\u662f\u4e2a\u88f8\u8bbe\u5907\uff0c\u56e0\u6b64\u6587\u4ef6\u7cfb\u7edf\u7684metadata\u4f1a\u7f13\u5b58\u5230buffers \u5982\u679c\u4f60cat /dev/sda1 > /dev/null\uff0c\u8fd9\u6837/dev/sda1\u5185\u5bb9\u8fdb\u5165buffers\uff0c\u5982\u679c\u4f60cat /mnt/aaa/bbb.c > /dev/null\uff0c\u5219/mnt/aaa/bbb.c\u7684\u5185\u5bb9\u8fdb\u5165cached\u3002\u6240\u4ee5\uff0c\u8fd9\u4e24\u79cdcache\uff0c\u4e00\u4e2a\u4ee5\u88f8\u8bbe\u5907\u6216\u5206\u533a\u4e3a\u80cc\u666f\uff0c\u4e00\u4e2a\u4ee5\u6587\u4ef6\u7cfb\u7edf\u91cc\u9762\u7684\u6587\u4ef6\u4e3a\u80cc\u666f\uff0c\u65e0\u8bba\u8bfb\u5199\u7686\u7136\u3002 \u8fc7\u7a0b free \u547d\u4ee4\u662f\u4ece /proc/meminfo \u4e2d\u8bfb\u53d6\u4fe1\u606f\u7684\uff0c\u8ddf\u6211\u4eec\u76f4\u63a5\u8bfb\u5230\u7684\u7ed3\u679c\u4e00\u6837 # cat /proc/meminfo MemTotal: 3848656 kB MemFree: 865640 kB Buffers: 324432 kB Cached: 2024904 kB ... SwapTotal: 2031612 kB SwapFree: 2031612 kB ... Shmem: 5312 kB ...","title":"\u6982\u8ff0"},{"location":"chapter_6/5_buffers_cached/#_1","text":"\u672c\u7bc7\u6587\u6863\u603b\u7ed3Linux free\u547d\u4ee4\u5c55\u793a\u7684buffers \u548c cached\u533a\u522b # free total used free shared buffers cached Mem: 3848656 2983016 865640 5312 324432 2024904 -/+ buffers/cache: 633680 3214976 Swap: 2031612","title":"\u6982\u8ff0"},{"location":"chapter_6/5_buffers_cached/#_2","text":"buffers \u8868\u793a\u5757\u8bbe\u5907(block device)\u6240\u5360\u7528\u7684\u7f13\u5b58\u9875\uff0c\u5305\u62ec\uff1a\u76f4\u63a5\u8bfb\u5199\u5757\u8bbe\u5907\u3001\u4ee5\u53ca\u6587\u4ef6\u7cfb\u7edf\u5143\u6570\u636e(metadata)\u6bd4\u5982SuperBlock\u6240\u4f7f\u7528\u7684\u7f13\u5b58\u9875\uff1b cached \u8868\u793a\u666e\u901a\u6587\u4ef6\u6570\u636e\u6240\u5360\u7528\u7684\u7f13\u5b58\u9875, \u4e5f\u5c31\u662f Page Cache . \u8fd9\u91cc\u7a0d\u5fae\u591a\u8bf4\u4e00\u70b9buffers \u548ccached\u3002Linux 2.4.10 \u5185\u6838\u4e4b\u524d\uff0c\u78c1\u76d8\u7684\u7f13\u5b58\u6709\u4e24\u79cd\uff0c\u5373 Buffer Cache\u548c Page Cache\u3002\u524d\u8005\u7f13\u5b58\u7ba1\u7406\u78c1\u76d8\u6587\u4ef6\u7cfb\u7edf\u65f6\u8bfb\u53d6\u7684\u5757\uff0c\u540e\u8005\u5b58\u653e\u8bbf\u95ee\u5177\u4f53\u6587\u4ef6\u5185\u5bb9\u65f6\u751f\u6210\u7684\u9875\u3002\u5728 2.4.10 \u4e4b\u540e\uff0cBuffer Cache\u8fd9\u4e2a\u6982\u5ff5\u5c31\u4e0d\u5b58\u5728\u4e86\uff0c\u8fd9\u4e9b\u6570\u636e\u88ab\u653e\u5728Page Cache\u4e2d\uff08\u8fd9\u79cd Page \u88ab\u79f0\u4e3a Buffer Pages\uff09\u3002 \u7b80\u800c\u8a00\u4e4b\uff0c\u73b0\u5728\u78c1\u76d8\u7684 cache \u53ea\u6709 Page Cache \u4e00\u79cd\uff0c\u5728Page Cache \u4e2d\uff0c\u6709\u4e00\u79cdPage\u53ebBuffer Page \uff0c\u8fd9\u79cdPage\u90fd\u4e0e\u4e00\u4e2a\u53ebbuffer_head\u7684\u6570\u636e\u7ed3\u6784\u5173\u8054\uff0c\u8fd9\u4e9b\u9875\u4e5f\u5c31\u5728\u5185\u5b58\u7edf\u8ba1\u4e2d\u7528buffers\u8fd9\u4e2a\u6307\u6807\u6765\u5355\u72ec\u7edf\u8ba1\u4e86\u3002","title":"\u7ed3\u8bba"},{"location":"chapter_6/5_buffers_cached/#buffers22","text":"\u5e94\u7528\u76f4\u63a5\u8bbf\u95ee\u88f8\u5206\u533a (\u5373\u4f7f\u662fDirect IO \uff0c\u4ecd\u7136\u7ed5\u4e0d\u5f00\u7684buffers\u548c\u5757IO\u5c42) \u6587\u4ef6\u7cfb\u7edf\u672c\u8eab\u7684\u5b9e\u73b0\uff0c\u4f1a\u8ba4\u4e3a/dev/sda1\u662f\u4e2a\u88f8\u8bbe\u5907\uff0c\u56e0\u6b64\u6587\u4ef6\u7cfb\u7edf\u7684metadata\u4f1a\u7f13\u5b58\u5230buffers \u5982\u679c\u4f60cat /dev/sda1 > /dev/null\uff0c\u8fd9\u6837/dev/sda1\u5185\u5bb9\u8fdb\u5165buffers\uff0c\u5982\u679c\u4f60cat /mnt/aaa/bbb.c > /dev/null\uff0c\u5219/mnt/aaa/bbb.c\u7684\u5185\u5bb9\u8fdb\u5165cached\u3002\u6240\u4ee5\uff0c\u8fd9\u4e24\u79cdcache\uff0c\u4e00\u4e2a\u4ee5\u88f8\u8bbe\u5907\u6216\u5206\u533a\u4e3a\u80cc\u666f\uff0c\u4e00\u4e2a\u4ee5\u6587\u4ef6\u7cfb\u7edf\u91cc\u9762\u7684\u6587\u4ef6\u4e3a\u80cc\u666f\uff0c\u65e0\u8bba\u8bfb\u5199\u7686\u7136\u3002","title":"buffers\u4e3b\u8981\u67092\u4e2a\u7528\u6237\uff082\u79cd\u4f7f\u7528\u573a\u666f\uff09\uff1a"},{"location":"chapter_6/5_buffers_cached/#_3","text":"free \u547d\u4ee4\u662f\u4ece /proc/meminfo \u4e2d\u8bfb\u53d6\u4fe1\u606f\u7684\uff0c\u8ddf\u6211\u4eec\u76f4\u63a5\u8bfb\u5230\u7684\u7ed3\u679c\u4e00\u6837 # cat /proc/meminfo MemTotal: 3848656 kB MemFree: 865640 kB Buffers: 324432 kB Cached: 2024904 kB ... SwapTotal: 2031612 kB SwapFree: 2031612 kB ... Shmem: 5312 kB ...","title":"\u8fc7\u7a0b"},{"location":"chapter_6/6_alloc_mem_apis/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3\u5404\u7c7b Linux \u5185\u6838\u5185\u5b58\u5206\u914d\u7684 API \u51fd\u6570 \u5177\u4f53\u5206\u7c7b 1 alloc page \u5185\u5b58 \u76f4\u63a5\u8c03\u7528__get_free_page/alloc_pages \u7b49\u51fd\u6570\u4ece\u4f19\u4f34\u7cfb\u7edf\u7533\u8bf7\u5355\u4e2a\u6216\u591a\u4e2a\u8fde\u7eed\u7684\u9875\u9762\u3002 2 slab \u5185\u5b58 \u4f7f\u7528 kmalloc()/kmem_cache_alloc() \u7b49 slab \u63a5\u53e3\u7533\u8bf7\u5185\u5b58\u3002kmalloc()\u53ef\u4ee5\u7533\u8bf7\u7269\u7406\u4e0a\u8fde\u7eed\u7684\u5185\u5b58,\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de \u4e00\u4e2a\u6307\u5411\u5185\u5b58\u5757\u7684\u6307\u9488\uff0c\u5176\u5185\u5b58\u5757\u81f3\u5c11\u8981\u6709 size \u5927\u5c0f\u3002 \u6240\u5206\u914d\u7684\u5185\u5b58\u533a\u5728\u7269 \u7406\u4e0a\u662f\u8fde\u7eed\u7684\u3002 slab \u5206\u914d\u5668\u57fa\u4e8e\u4f19\u4f34\u7cfb\u7edf\uff0c\u63d0\u4f9b\u4e86\u5c0f\u5185\u5b58\u7684\u5206\u914d\u80fd\u529b(\u867d\u7136\u4e5f\u517c\u5bb9\u5927\u5185\u5b58\u5206\u914d)\u3002 slab \u5206\u914d\u5668\u4ece\u4f19\u4f34\u7cfb\u7edf\"\u6279\u53d1\"\u5927\u5185\u5b58\uff0c\u7136\u540e\u628a\u5927\u5185\u5b58\u5206\u6210\u8bb8\u591a\u5c0f\u5757\u5185\u5b58\uff0c\u4e00\u4e2a\u5c0f\u5757\u5185\u5b58\u5757\u79f0\u4e3a object, \u6700\u540e\u628a object \"\u96f6\u552e\"\u7ed9\u5176\u4ed6\u5185\u6838\u7ec4\u4ef6\u4f7f\u7528 3 vmalloc \u5185\u5b58 vmalloc \u5185\u5b58\u4e5f\u662f\u57fa\u4e8e\u4f19\u4f34\u7cfb\u7edf\uff0c\u5b9e\u73b0\u4e86\u7ebf\u6027\u6620\u5c04\u975e\u8fde\u7eed\u5185\u5b58\u7684\u80fd\u529b\uff0c\u80fd\u591f\u5206\u914d\u66f4\u591a\uff0c\u66f4\u5927\u7684\u5185\u5b58\u3002 vmalloc \u51fd\u6570\u7684\u5de5\u4f5c\u65b9\u5f0f\u7c7b\u4f3c\u4e8e kmalloc \u51fd\u6570\uff0c\u53ea\u4e0d\u8fc7 \u524d\u8005\u5206\u914d\u7684\u5185\u5b58\u865b\u62df\u5730\u5740\u662f\u8fde\u7eed\u7684 \uff0c \u800c\u7269\u7406\u5730\u5740\u5219\u65e0\u987b\u8fde\u7eed\u3002 \u8fd9\u4e5f\u662f\u7528\u6237\u7a7a\u95f4\u5206\u914d\u897f\u6570\u7684\u5de5\u4f5c\u65b9\u5f0f:\u7531 malloc \u51fd\u6570 \u8fd4\u56de\u7684\u9875\u5728\u8fdb\u7a0b\u7684\u865b\u62df \u5730\u5740\u7a7a\u95f4\u5185\u662f\u8fde\u7eed\u7684\uff0c\u4f46\u662f\uff0c\u8fd9\u5e76\u4e0d\u4fdd\u8bc1\u5b83\u4eec\u5728\u7269\u7406 RAM \u4e2d\u4e5f\u662f\u8fde\u7eed\u7684\u3002 kmalloc \u51fd\u6570\u786e\u4fdd\u9875 \u5728\u7269\u7406\u5730\u5740\u4e0a\u662f\u8fde\u7eed\u7684 (\u865b\u62df\u5730\u5740\u81ea\u7136\u4e5f\u662f\u8fde\u7eed\u7684)\u3002 vmalloc \u51fd\u6570\u53ea\u786e\u4fdd\u9875\u5728\u865a\u62df\u5730\u5740\u7a7a\u95f4\u5185 \u662f\u8fde\u7eed\u7684\u3002\u5b83\u901a\u8fc7\u5206\u914d\u975e\u8fde\u7eed\u7684\u7269\u7406\u5185\u5b58\u5757\uff0c\u518d\u201c\u4fee\u6b63\u201d \u9875\u8868\uff0c\u628a\u5185\u5b58\u6620\u5c04\u5230\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u7684\u8fde \u7eed\u533a\u57df\u4e2d\uff0c\u5c31\u80fd\u505a\u5230\u8fd9\u70b9\u3002 4 \u7528\u6237\u6001\u5185\u5b58 \u4e3b\u8981\u6307 anon page \u548c file cache\uff0c\u6700\u7ec8\u7531\u5185\u6838\u4e00\u4e2a\u4e2a\u5355\u4e00\u7684\u9875\u9762\u6620\u5c04\u800c\u6210. \u7528\u6237\u7a7a\u95f4\u7684 malloc() 5 \u6c47\u603b\u56fe","title":"\u7b2c\u516d\u7bc7 Linux\u5185\u6838\u5185\u5b58\u5206\u914dAPI\u51fd\u6570\u5206\u7c7b"},{"location":"chapter_6/6_alloc_mem_apis/#_1","text":"\u672c\u7bc7\u603b\u7ed3\u5404\u7c7b Linux \u5185\u6838\u5185\u5b58\u5206\u914d\u7684 API \u51fd\u6570","title":"\u6982\u8ff0"},{"location":"chapter_6/6_alloc_mem_apis/#_2","text":"","title":"\u5177\u4f53\u5206\u7c7b"},{"location":"chapter_6/6_alloc_mem_apis/#1-alloc-page","text":"\u76f4\u63a5\u8c03\u7528__get_free_page/alloc_pages \u7b49\u51fd\u6570\u4ece\u4f19\u4f34\u7cfb\u7edf\u7533\u8bf7\u5355\u4e2a\u6216\u591a\u4e2a\u8fde\u7eed\u7684\u9875\u9762\u3002","title":"1 alloc page \u5185\u5b58"},{"location":"chapter_6/6_alloc_mem_apis/#2-slab","text":"\u4f7f\u7528 kmalloc()/kmem_cache_alloc() \u7b49 slab \u63a5\u53e3\u7533\u8bf7\u5185\u5b58\u3002kmalloc()\u53ef\u4ee5\u7533\u8bf7\u7269\u7406\u4e0a\u8fde\u7eed\u7684\u5185\u5b58,\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de \u4e00\u4e2a\u6307\u5411\u5185\u5b58\u5757\u7684\u6307\u9488\uff0c\u5176\u5185\u5b58\u5757\u81f3\u5c11\u8981\u6709 size \u5927\u5c0f\u3002 \u6240\u5206\u914d\u7684\u5185\u5b58\u533a\u5728\u7269 \u7406\u4e0a\u662f\u8fde\u7eed\u7684\u3002 slab \u5206\u914d\u5668\u57fa\u4e8e\u4f19\u4f34\u7cfb\u7edf\uff0c\u63d0\u4f9b\u4e86\u5c0f\u5185\u5b58\u7684\u5206\u914d\u80fd\u529b(\u867d\u7136\u4e5f\u517c\u5bb9\u5927\u5185\u5b58\u5206\u914d)\u3002 slab \u5206\u914d\u5668\u4ece\u4f19\u4f34\u7cfb\u7edf\"\u6279\u53d1\"\u5927\u5185\u5b58\uff0c\u7136\u540e\u628a\u5927\u5185\u5b58\u5206\u6210\u8bb8\u591a\u5c0f\u5757\u5185\u5b58\uff0c\u4e00\u4e2a\u5c0f\u5757\u5185\u5b58\u5757\u79f0\u4e3a object, \u6700\u540e\u628a object \"\u96f6\u552e\"\u7ed9\u5176\u4ed6\u5185\u6838\u7ec4\u4ef6\u4f7f\u7528","title":"2 slab \u5185\u5b58"},{"location":"chapter_6/6_alloc_mem_apis/#3-vmalloc","text":"vmalloc \u5185\u5b58\u4e5f\u662f\u57fa\u4e8e\u4f19\u4f34\u7cfb\u7edf\uff0c\u5b9e\u73b0\u4e86\u7ebf\u6027\u6620\u5c04\u975e\u8fde\u7eed\u5185\u5b58\u7684\u80fd\u529b\uff0c\u80fd\u591f\u5206\u914d\u66f4\u591a\uff0c\u66f4\u5927\u7684\u5185\u5b58\u3002 vmalloc \u51fd\u6570\u7684\u5de5\u4f5c\u65b9\u5f0f\u7c7b\u4f3c\u4e8e kmalloc \u51fd\u6570\uff0c\u53ea\u4e0d\u8fc7 \u524d\u8005\u5206\u914d\u7684\u5185\u5b58\u865b\u62df\u5730\u5740\u662f\u8fde\u7eed\u7684 \uff0c \u800c\u7269\u7406\u5730\u5740\u5219\u65e0\u987b\u8fde\u7eed\u3002 \u8fd9\u4e5f\u662f\u7528\u6237\u7a7a\u95f4\u5206\u914d\u897f\u6570\u7684\u5de5\u4f5c\u65b9\u5f0f:\u7531 malloc \u51fd\u6570 \u8fd4\u56de\u7684\u9875\u5728\u8fdb\u7a0b\u7684\u865b\u62df \u5730\u5740\u7a7a\u95f4\u5185\u662f\u8fde\u7eed\u7684\uff0c\u4f46\u662f\uff0c\u8fd9\u5e76\u4e0d\u4fdd\u8bc1\u5b83\u4eec\u5728\u7269\u7406 RAM \u4e2d\u4e5f\u662f\u8fde\u7eed\u7684\u3002 kmalloc \u51fd\u6570\u786e\u4fdd\u9875 \u5728\u7269\u7406\u5730\u5740\u4e0a\u662f\u8fde\u7eed\u7684 (\u865b\u62df\u5730\u5740\u81ea\u7136\u4e5f\u662f\u8fde\u7eed\u7684)\u3002 vmalloc \u51fd\u6570\u53ea\u786e\u4fdd\u9875\u5728\u865a\u62df\u5730\u5740\u7a7a\u95f4\u5185 \u662f\u8fde\u7eed\u7684\u3002\u5b83\u901a\u8fc7\u5206\u914d\u975e\u8fde\u7eed\u7684\u7269\u7406\u5185\u5b58\u5757\uff0c\u518d\u201c\u4fee\u6b63\u201d \u9875\u8868\uff0c\u628a\u5185\u5b58\u6620\u5c04\u5230\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u7684\u8fde \u7eed\u533a\u57df\u4e2d\uff0c\u5c31\u80fd\u505a\u5230\u8fd9\u70b9\u3002","title":"3 vmalloc \u5185\u5b58"},{"location":"chapter_6/6_alloc_mem_apis/#4","text":"\u4e3b\u8981\u6307 anon page \u548c file cache\uff0c\u6700\u7ec8\u7531\u5185\u6838\u4e00\u4e2a\u4e2a\u5355\u4e00\u7684\u9875\u9762\u6620\u5c04\u800c\u6210. \u7528\u6237\u7a7a\u95f4\u7684 malloc()","title":"4 \u7528\u6237\u6001\u5185\u5b58"},{"location":"chapter_6/6_alloc_mem_apis/#5","text":"","title":"5 \u6c47\u603b\u56fe"},{"location":"chapter_6/7_physical_memory/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3 Linux \u5185\u6838\u5bf9\u4e8e\u7269\u7406\u5185\u5b58\u7684\u7ba1\u7406 \u4ece\u5185\u6838\u89d2\u5ea6\u5176\u5b9e\u53ef\u4ee5\u628a\u7269\u7406\u5185\u5b58\u60f3\u8c61\u4e3a\u7269\u7406\u786c\u76d8\u7684\u7ba1\u7406\u6a21\u5f0f, \u90fd\u662f\u5f80\u76f8\u5e94\u5bc4\u5b58\u5668\u53d1\u9001\u7ba1\u7406\u6307\u4ee4, \u7136\u540e\u4ee5 \u9875\u5e27 \u4e3a\u6700\u5c0f\u5355\u4f4d\u8fdb\u884c \u8bfb\u53d6/\u5199\u5165 \u6570\u636e. \u4e3a\u5565\u5462? \u56e0\u4e3a\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\u5185\u5b58\u5c31\u662f\u4e00\u5757\u901f\u5ea6\u8d85\u5feb\u7684\u786c\u76d8. \u53e6\u5916,\u6211\u4eec\u53ef\u4ee5\u628a\u7269\u7406\u5185\u5b58\u7b80\u5355\u5730\u770b\u6210\u4e00\u4e2a\u5927\u7684\u6570\u7ec4\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5b57\u8282\u90fd\u53ef\u4ee5\u901a\u8fc7\u7269\u7406\u5730\u5740\u8fdb\u884c\u8bbf\u95ee\u3002 \u4e00 CPU \u8bbf\u95ee\u7269\u7406\u5185\u5b58\u7684\u5168\u8fc7\u7a0b CPU \u5199\u7269\u7406\u5185\u5b58\u7684\u8fc7\u7a0b\uff1a CPU \u5148\u7ed9\u51fa\u8981\u5199\u5165\u6570\u636e\u7684\u7269\u7406\u5730\u5740\u5bf9\u5e94\u7684\u865a\u62df\u5730\u5740\uff0c\u901a\u8fc7 MMU \u8f6c\u5316\u4e3a\u7269\u7406\u5730\u5740\uff0c\u82e5 cache \u4e2d\u6ca1\u6709\u547d\u4e2d\uff0c\u5219\u5c06\u8981\u5199\u5165\u6570\u636e\u7684\u7269\u7406\u5730\u5740\u653e\u5230\u7cfb\u7edf\u603b\u7ebf\u4e0a\u3002DDR \u7684\u63a7\u5236\u5668\u611f\u53d7\u5230\u603b\u7ebf\u4e0a\u7684\u5730\u5740\u4fe1\u53f7\u4ee5\u53ca\u5199\u63a7\u5236\u4fe1\u53f7\uff0c\u5c06\u7269\u7406\u5730\u5740\u4ece\u603b\u7ebf\u4e0a\u8bfb\u51fa\u6765\uff0c\u5e76\u7b49\u5f85\u6570\u636e\u7684\u5230\u8fbe\u3002CPU \u5c06\u6570\u636e\u53d1\u9001\u5230\u7cfb\u7edf\u603b\u7ebf\u4e0a\uff0cDDR \u63a7\u5236\u5668\u611f\u53d7\u5230\u603b\u7ebf\u4e0a\u7684\u6570\u636e\u4fe1\u53f7\uff0c\u5c06\u6570\u636e\u4ece\u603b\u7ebf\u4e0a\u8bfb\u53d6\u51fa\u6765\u3002DDR \u63a7\u5236\u5668\u901a\u8fc7\u7269\u7406\u5730\u5740\u627e\u5230\u76f8\u5e94\u7684\u5b58\u50a8\u6a21\u5757\uff0c\u7136\u540e\u5c06\u6570\u636e\u5199\u5165\u5230\u7269\u7406\u5730\u5740\u5bf9\u5e94\u7684\u5b58\u50a8\u6a21\u5757\u3002 CPU \u8bfb\u7269\u7406\u5185\u5b58\u7684\u8fc7\u7a0b\uff1a CPU \u7ed9\u51fa\u8981\u8bfb\u6570\u636e\u7684\u7269\u7406\u5730\u5740\u5bf9\u5e94\u7684\u865a\u62df\u5730\u5740\uff0c\u901a\u8fc7 MMU \u8f6c\u5316\u4e3a\u7269\u7406\u5730\u5740\uff0c\u82e5 cache \u4e2d\u6ca1\u6709\u547d\u4e2d\uff0c\u5219\u5c06\u7269\u7406\u5730\u5740\u653e\u5230\u7cfb\u7edf\u603b\u7ebf\u4e0a\u3002DDR \u63a7\u5236\u5668\u611f\u53d7\u5230\u603b\u7ebf\u4e0a\u7684\u5730\u5740\u578b\u53f7\u53ca\u8bfb\u63a7\u5236\u4fe1\u53f7\uff0c\u5c06\u7269\u7406\u5730\u5740\u4ece\u603b\u7ebf\u4e0a\u8bfb\u53d6\u51fa\u6765\uff0cDDR \u63a7\u5236\u5668\u6839\u636e\u7269\u7406\u5730\u5740\u627e\u5230\u5b58\u50a8\u6a21\u5757\u4e2d\u6570\u636e\u7684\u4f4d\u7f6e\uff0c\u5e76\u4ece SDRAM \u82af\u7247\u4e2d\u53d6\u51fa\u7269\u7406\u5730\u5740\u5bf9\u5e94\u7684\u6570\u636e\uff0cDDR \u63a7\u5236\u5668\u5c06\u6570\u636e\u653e\u5230\u603b\u7ebf\u4e0a\uff0cCPU \u4ece\u603b\u7ebf\u4e0a\u83b7\u53d6\u6570\u636e\uff0c\u5e76\u5b58\u653e\u5230\u5bc4\u5b58\u5668\u4e0a\u3002 \u4e8c \u5185\u6838\u4e2d\u76f8\u5173\u6570\u636e\u7ed3\u6784 \u8fd9\u4e2a\u5728\u7b2c\u4e00\u7bc7\u300a\u4f19\u4f34\u7cfb\u7edf\u300b\u4e2d\u5df2\u6709\u4ecb\u7ecd, \u8fd9\u91cc\u518d\u590d\u4e60\u4e00\u4e0b \u4e0e\u7269\u7406\u5185\u5b58\u76f8\u5173\u7684\u6570\u636e\u7ed3\u6784\u6709\u5185\u5b58\u8282\u70b9\uff08pglist_data\uff09\u3001\u5185\u5b58\u7ba1\u7406\u533a\uff08zone\uff09\u3001\u7269\u7406\u9875\u9762\uff08page\uff09\u3001mem_map \u6570\u7ec4\u3001\u9875\u8868\u9879\uff08PTE\uff09\u3001\u9875\u5e27\u53f7\uff08PFN\uff09\u3001\u7269\u7406\u5730\u5740\uff08paddress\uff09\u3002 Linux \u5185\u6838\u901a\u8fc7 struct page \u6765\u7ba1\u7406\u7269\u7406\u5185\u5b58\u4e2d\u7684\u4e00\u4e2a\u9875\u3002\u5185\u6838\u4e3a\u6bcf\u4e2a\u7269\u7406\u9875\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7d22\u5f15\u7f16\u53f7 PFN\uff08Page Frame Number\uff0c\u9875\u5e27\u53f7\uff09 \uff0c\u8fd9\u4e2a PFN \u4e0e struct page \u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002\u901a\u8fc7 page_to_pfn/pfn_to_page \u4e24\u4e2a\u5b8f\u5b9e\u73b0\u7269\u7406\u9875\u548c struct page \u4e4b\u95f4\u7684\u76f8\u4e92\u8f6c\u6362\u3002 \u4e09 \u6846\u67b6 3.1 \u5185\u5b58\u6846\u67b6 \u5728\u5f53\u524d\u7684\u8ba1\u7b97\u673a\u3001\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u4ee5\u5185\u5b58\u4e3a\u7814\u7a76\u5bf9\u8c61\u53ef\u4ee5\u5206\u6210\u4e24\u79cd\u67b6\u6784\u3002\u4e00\u79cd\u662f UMA\uff08Uniform Memory Access\uff0c\u7edf\u4e00\u5185\u5b58\u8bbf\u95ee\uff09\u67b6\u6784\uff0c\u53e6\u5916\u4e00\u79cd\u662f NUMA\uff08Non-Uniform Memory Access\uff0c\u975e\u7edf\u4e00\u5185\u5b58\u8bbf\u95ee\uff09\u67b6\u6784\u3002 3.1.1 UMA \u67b6\u6784 \u5185\u5b58\u53ef\u4ee5\u88ab\u5176\u4ed6\u6a21\u5757\u7edf\u4e00\u5bfb\u5740\uff0c\u6709\u7edf\u4e00\u7684\u7ed3\u6784\u3002\u76ee\u524d\uff0c\u5927\u90e8\u5206\u5d4c\u5165\u5f0f\u7cfb\u7edf\u53ca\u8ba1\u7b97\u673a\u7cfb\u7edf\u90fd\u91c7\u7528 UMA \u67b6\u6784\u3002\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u662f\u4e00\u4e2a UMA \u67b6\u6784\u7684\u7cfb\u7edf\uff0c\u6709\u4e24\u4e2a cpu \u4f4d\u4e8e\u540c\u4e00\u4e2a cluster \u4e2d\uff0ccpu \u5206\u522b\u6709\u81ea\u5df1\u7684 L1D\u3001L1I cache \u53ca L2 cache\u3002\u4e24\u4e2a cpu \u5171\u4eab L3 cache\uff0c\u901a\u8fc7\u7cfb\u7edf\u603b\u7ebf\u53ef\u4ee5\u8bbf\u95ee\u7269\u7406\u5185\u5b58 DDR\uff0cSRAM\u3001SSD \u7b49\u6a21\u5757\uff0c\u5e76\u4e14\u4e24\u4e2a CPU \u5bf9\u7269\u7406\u5185\u5b58\u7684\u8bbf\u95ee\u6d88\u8017\u662f\u4e00\u6837\u7684\u3002\u8fd9\u79cd\u8bbf\u95ee\u6a21\u5f0f\u7684\u5904\u7406\u5668\u88ab\u6210\u4e3a SMP\uff08Aymmetric Multiprocessing\uff0c\u5bf9\u79f0\u591a\u5904\u7406\u5668\uff09 3.1.2 NUMA \u67b6\u6784 \u7cfb\u7edf\u4e2d\u6709\u591a\u4e2a\u5185\u5b58\u8282\u70b9\u548c\u591a\u4e2a cpu cluster\uff0cCPU \u8bbf\u95ee\u672c\u5730\u5185\u5b58\u8282\u70b9\u7684\u65f6\u95f4\u5f00\u9500\u6700\u5c0f\uff0c\u8bbf\u95ee\u8fdc\u7aef\u7684\u5185\u5b58\u8282\u70b9\u7684\u65f6\u95f4\u5f00\u9500\u8981\u5927\u3002\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u662f\u4e00\u4e2a NUMA \u67b6\u6784\u7684\u7cfb\u7edf\uff0c\u5176\u4e2d cpu0\u3001cpu1 \u5728 cluster0 \u4e2d\uff0c\u4e0e\u76f8\u5e94\u7684 L1I/L1D cache\u3001L2 cache\u3001L3 cache \u53ca DDR \u7ec4\u6210 node0 \u8282\u70b9\u3002\u540c\u6837\u7684\uff0cCPU2\u3001CPU3 \u5728 cluster1 \u4e2d\uff0c\u4e0e\u76f8\u5e94\u7684 L1I/L1D cache\u3001L2 cache\u3001L3 cache \u53ca DDR \u7ec4\u6210 node1 \u8282\u70b9\u3002\u4e24\u4e2a node \u8282\u70b9\uff0c\u901a\u8fc7 UPI\uff08Ultra Path Interconnect\uff0c\u8d85\u8def\u5f84\u4e92\u8054\uff09\u603b\u7ebf\u8fde\u63a5\u3002CPU0 \u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a UPI \u8bbf\u95ee\u8fdc\u7aef node1 \u4e0a\u7684\u7269\u7406\u5185\u5b58\uff0c\u4f46\u662f\u8981\u6bd4\u672c\u5730 node0 \u7684\u5185\u5b58\u8bbf\u95ee\u6162\u5f97\u591a\u3002 3.2 \u5185\u5b58\u6a21\u578b \u5185\u6838\u662f\u4ee5\u9875\u4e3a\u5355\u4f4d\u4f7f\u7528 struct page \u6570\u636e\u7ed3\u6784\u6765\u7ba1\u7406\u7269\u7406\u5185\u5b58\u7684\u3002\u5185\u6838\u901a\u8fc7\u7269\u7406\u5185\u5b58\u6a21\u578b\u6765\u5b9e\u73b0\u7ec4\u7ec7\u7ba1\u7406\u8fd9\u4e9b\u7269\u7406\u5185\u5b58\u9875\uff0c\u4e0d\u540c\u7684\u7269\u7406\u5185\u5b58\u6a21\u578b\uff0c\u5e94\u5bf9\u7684\u573a\u666f\u53ca\u9875\u5e27\u53f7\u4e0e\u7269\u7406\u9875\u4e4b\u95f4\u7684\u8ba1\u7b97\u65b9\u5f0f\u4e5f\u4e0d\u4e00\u6837\u3002 3.2.1 \u5e73\u5766\u5185\u5b58\u6a21\u578b\uff1aFLATMEM Linux \u65e9\u671f\u4f7f\u7528\u7684\u7269\u7406\u5185\u5b58\u6bd4\u8f83\u5c0f\uff0c\u6bd4\u5982\u51e0\u5341 MB\uff0c\u5e76\u4e14\u8fd9\u4e9b\u7269\u7406\u5185\u5b58\u662f\u4e00\u7247\u8fde\u7eed\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u8fd9\u6837\u7269\u7406\u5730\u5740\u4e5f\u662f\u8fde\u7eed\u7684\uff0c\u6309\u56fa\u5b9a\u9875\u5927\u5c0f\u5212\u5206\u51fa\u6765\u7684\u7269\u7406\u9875\u4e5f\u662f\u8fde\u7eed\u7684\u3002Linux \u5185\u6838\u4f1a\u7528\u4e00\u4e2a mem_map \u5168\u5c40\u6570\u7ec4\u6765\u7ec4\u7ec7\u7ba1\u7406\u6240\u6709\u7684\u7269\u7406\u9875\uff0c\u5176\u4e2d\u7269\u7406\u9875\u662f\u901a\u8fc7 struct page \u6765\u7ba1\u7406\uff0c\u8fd9\u6837\u6bcf\u4e2a\u6570\u7ec4\u7684\u4e0b\u6807\u4fbf\u662f PFN\u3002\u8fd9\u79cd\u8fde\u7eed\u7684\u7269\u7406\u5185\u5b58\u4fbf\u662f\u5e73\u5766\u5185\u5b58\u6a21\u578b\u3002 3.2.2 \u975e\u8fde\u7eed\u5185\u5b58\u6a21\u578b\uff1aDISCONTIGMEM \u5bf9\u4e8e PLATMEM \u9002\u5408\u7ba1\u7406\u4e00\u6574\u5757\u8fde\u7eed\u7684\u7269\u7406\u5185\u5b58\uff0c\u4f46\u662f\u5bf9\u4e8e\u591a\u5757\u975e\u8fde\u7eed\u7684\u7269\u7406\u5185\u5b58\uff0c\u82e5\u4f7f\u7528 FLATMEM \u6765\u7ba1\u7406\uff0c\u8fd9\u65f6 mem_map \u5168\u5c40\u6570\u7ec4\u4e2d\u4f1a\u6709\u4e0d\u8fde\u7eed\u5185\u5b58\u5730\u5740\u533a\u7684\u5185\u5b58\u7a7a\u6d1e\uff0c\u8fd9\u4f1a\u9020\u6210\u5185\u5b58\u7a7a\u95f4\u7684\u6d6a\u8d39\u3002\u4e3a\u4e86\u7ba1\u7406\u8fd9\u79cd\u4e0d\u8fde\u7eed\u7684\u7269\u7406\u5185\u5b58\uff0c\u5185\u6838\u5f15\u5165\u4e86 DISCONTIGMEM \u975e\u8fde\u7eed\u5185\u5b58\u6a21\u578b\u6765\u7ba1\u7406\uff0c\u4ee5\u4fbf\u6d88\u9664\u4e0d\u8fde\u7eed\u7684\u5185\u5b58\u5730\u5740\u7a7a\u6d1e\u5bf9 mem_map \u5168\u5c40\u6570\u7ec4\u9020\u6210\u7684\u7a7a\u95f4\u6d6a\u8d39\u3002 DISCONTIGMEM \u975e\u8fde\u7eed\u5185\u5b58\u6a21\u578b\u7684\u601d\u8def\u662f\uff1a\u5c06\u7269\u7406\u5185\u5b58\u4ece\u5b8f\u89c2\u4e0a\u5212\u5206\u6210\u4e00\u4e2a\u4e2a\u8282\u70b9 node\uff0c\u4f46\u662f\u5fae\u89c2\u4e0a\u8fd8\u662f\u4ee5\u7269\u7406\u9875\u4e3a\u5355\u4f4d\uff0c\u6bcf\u4e2a node \u8282\u70b9\u7ba1\u7406\u4e00\u5757\u8fde\u7eed\u7684\u7269\u7406\u5185\u5b58\uff0c\u8fd9\u6837\u8fd9\u4e9b\u975e\u8fde\u7eed\u7684\u5185\u5b58\uff0c\u4f1a\u4ee5\u8fde\u7eed\u7684\u5185\u5b58\u65b9\u5f0f\u5212\u5206\u5230 node \u8282\u70b9\u4e2d\u7ba1\u7406\u8d77\u6765\uff0c\u8fd9\u6837\u4fbf\u53ef\u4ee5\u907f\u514d\u5185\u5b58\u7a7a\u6d1e\u9020\u6210\u7684\u7a7a\u95f4\u6d6a\u8d39\u3002 3.2.3 \u7a00\u758f\u5185\u5b58\u6a21\u578b\uff1aSPARSEMEM \u7531\u4e8e\u7269\u7406\u5185\u5b58\u5728\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u4f1a\u6709\u5f88\u591a\u7a7a\u6d1e\uff0c\u8fd9\u6837\u7269\u7406\u5185\u5b58\u5b58\u5728\u591a\u5904\u4e0d\u8fde\u7eed\u3002\u5982\u679c\u5229\u7528\u4e0a\u9762\u8bb2\u7684 DISCONTIGMEM \u5185\u5b58\u6a21\u578b\uff0c\u4f1a\u9020\u6210 node \u4f17\u591a\uff0c\u8fd9\u6837\u5f00\u9500\u5c31\u5927\u4e86\u3002\u4e3a\u4e86\u80fd\u591f\u66f4\u7075\u6d3b\u3001\u66f4\u9ad8\u6548\u7684\u3001\u66f4\u5c0f\u7684\u7ba1\u7406\u8fde\u7eed\u7269\u7406\u5185\u5b58\u3002SPARSEMEM \u7cfb\u6570\u5185\u5b58\u6a21\u578b\u5c31\u662f\u4e3a\u4e86\u5bf9\u7c92\u5ea6\u66f4\u5c0f\u7684\u8fde\u7eed\u5185\u5b58\u5757\u8fdb\u884c\u7cbe\u7ec6\u7684\u7ba1\u7406\uff0c\u7528\u4e8e\u7ba1\u7406\u8fde\u7eed\u5185\u5b58\u5757\u7684\u5355\u5143\u88ab\u79f0\u4e3a section\u3002\u5728\u5185\u5b58\u4e2d\u7528 struct mem_section \u7ed3\u6784\u4f53\u8868\u793a SPARSEMEM \u6a21\u578b\u4e2d\u7684 section\u3002 \u7531\u4e8e section \u88ab\u7528\u4f5c\u7ba1\u7406\u5c0f\u7c92\u5ea6\u7684\u8fde\u7eed\u5185\u5b58\u5757\uff0c\u8fd9\u4e9b\u5c0f\u7684\u8fde\u7eed\u7269\u7406\u5185\u5b58\u5728 section \u4e2d\u4e5f\u662f\u901a\u8fc7\u6570\u7ec4\u7684\u65b9\u5f0f\u88ab\u7ec4\u7ec7\u7ba1\u7406\uff0c\u5176\u4e2d mem_section \u7ed3\u6784\u4f53\u4e2d\u7684 section_mem_map \u6307\u9488\u7528\u4e8e\u6307\u5411 section \u4e2d\u7ba1\u7406\u8fde\u7eed\u5185\u5b58\u7684 page \u6570\u7ec4\u3002SPARSEMEM \u5185\u5b58\u6a21\u578b\u4e2d\u7684 mem_section \u4f1a\u5b58\u5728\u653e\u5728\u4e00\u4e2a\u5168\u5c40\u7684\u6570\u7ec4\u4e2d\uff0c\u5e76\u4e14\u6bcf\u4e2a mem_section \u90fd\u53ef\u4ee5\u5728\u7cfb\u7edf\u8fd0\u884c\u7684\u65f6\u5019\u8fdb\u884c\u5185\u5b58\u7684 offline/online\uff0c\u8fd9\u6837\u4fbf\u53ef\u4ee5\u652f\u6301\u5185\u5b58\u7684\u70ed\u62d4\u63d2\u3002 \u56db \u7269\u7406\u5185\u5b58\u521d\u59cb\u5316 4.1 \u5185\u5b58\u5927\u5c0f\u521d\u59cb\u5316 \u7269\u7406\u5185\u5b58\u7684\u5927\u5c0f\u4f1a\u5728 DTS\uff08Device Tree Source\uff0c\u8bbe\u5907\u6811\uff09\u4e2d\u63cf\u8ff0\uff0c\u5982\u4e0b dts \u7684\u63cf\u8ff0\uff1a memory { device_type = \"memory\"; reg = <0x000000000 0x80000000 0x00000000 0x40000000>; }; \u8d77\u59cb\u5730\u5740\u4e3a0x80000000\uff0c\u5927\u5c0f\u4e3a0x40000000 4.2 memblock \u5185\u5b58\u5206\u914d\u5668 \u5728\u4f19\u4f34\u7cfb\u7edf\u6ca1\u6709\u521d\u59cb\u5316\u524d\uff0c\u5728\u5185\u6838\u4e2d\u9700\u8981\u4e00\u5957\u673a\u5236\u7ba1\u7406\u5185\u5b58\u7684\u7533\u8bf7\u4e0e\u91ca\u653e\u3002\u5728\u542f\u52a8\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u89e3\u6790\u8bbe\u5907\u6811\u4e2d\u7684 memory \u8282\u70b9\uff0c\u628a\u6240\u6709\u7269\u7406\u5185\u5b58\u6dfb\u52a0\u5230 memblock \u4e2d\u3002 int memblock_add(phys_addr_t base, phys_addr_t size); \u6dfb\u52a0\u5185\u5b58\u533a\u57df\u51fd\u6570\u3002 int memblock_remove(phys_addr_t base, phys_addr_t size) \u5220\u9664\u5185\u5b58\u533a\u57df\u7684\u51fd\u6570\u3002 void * __init memblock_alloc(phys_addr_t size, phys_addr_t align) \u5206\u914d\u5185\u5b58\u7684\u51fd\u6570\u3002 int memblock_free(phys_addr_t base, phys_addr_t size) \u91ca\u653e\u5185\u5b58\u7684\u51fd\u6570 4.3 ZONE \u521d\u59cb\u5316 \u5728\u5bf9\u9875\u8868\u521d\u59cb\u5316\u540e\uff0c\u5185\u6838\u5c31\u4f1a\u5bf9\u5185\u5b58\u8fdb\u884c\u7ba1\u7406\u3002\u5185\u6838\u4f1a\u5c06\u8fd9\u4e9b\u7269\u7406\u5185\u5b58\u5206\u914d\u6210\u4e0d\u540c\u7684\u5185\u5b58\u7ba1\u7406\u533a\uff08ZONE\uff09\uff0c\u5206\u522b\u9488\u5bf9\u8fd9\u4e9b\u5185\u5b58\u7ba1\u7406\u533a\u8fdb\u884c\u7ba1\u7406\u3002 \u6570\u636e\u7ed3\u6784 zone \u4e2d\u5173\u952e\u7684\u6210\u5458\u5982\u4e0b\uff1a Watermark\uff1a\u6bcf\u4e2a zone \u5728\u7cfb\u7edf\u542f\u52a8\u65f6\u4f1a\u8ba1\u7b97\u51fa 3 \u4e2a\u6c34\u4f4d\uff0c\u5206\u522b\u662f WMARK_MIN\uff08\u6700\u4f4e\u8b66\u6212\u6c34\u4f4d\uff09\u3001WMARK_LOW\uff08\u4f4e\u6c34\u4f4d\uff09\u3001WMARK_HIGH\uff08\u9ad8\u6c34\u4f4d\uff09\uff0c\u8fd9\u4e9b\u5728\u9875\u9762\u5206\u914d\u5668\u548c kswapd \u9875\u9762\u56de\u6536\u4e2d\u4f1a\u7528\u5230\u3002 Lowemem_reserve\uff1a\u9632\u6b62\u9875\u9762\u5206\u914d\u5668\u8fc7\u6e21\u4f7f\u7528\u4f4e\u7aef zone \u7684\u5185\u5b58\u3002 Zone_pgdat\uff1a\u6307\u5411\u5185\u5b58\u8282\u70b9\u3002 Pageset\uff1a\u7528\u4e8e\u7ef4\u62a4\u6bcf\u4e2a cpu \u4e0a\u7684\u4e00\u4e9b\u5217\u9875\u9762\uff0c\u4ee5\u51cf\u5c11\u81ea\u65cb\u9501\u7684\u4f7f\u7528 Zone_start_pfn\uff1azone \u7684\u8d77\u59cb\u9875\u5e27\u53f7\u3002 Managed_pages\uff1azone \u4e2d\u88ab\u4f19\u4f34\u7cfb\u7edf\u7ba1\u7406\u7684\u9875\u9762\u6570\u91cf\u3002 Spanned_pages\uff1azone \u4e2d\u5305\u542b\u7684\u9875\u9762\u6570\u91cf\u3002 Present_pages\uff1azone \u91cc\u5b9e\u9645\u7ba1\u7406\u7684\u9875\u9762\u6570\u91cf\u3002\u5bf9\u4e8e\u4e00\u4e9b\u67b6\u6784\u6765\u8bf4\uff0c\u5b83\u548c spanned_pages \u6570\u91cf\u4e00\u81f4\u3002 Free_area\uff1a\u4f19\u4f34\u7cfb\u7edf\u6838\u5fc3\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7ba1\u7406\u7a7a\u95f2\u4e5f\u5feb\u94fe\u8868\u7684\u6570\u7ec4\u3002 Lock\uff1a\u5e76\u884c\u8bbf\u95ee\u65f6\u7528\u4e8e\u4fdd\u62a4 zone \u7684\u81ea\u65cb\u9501\u3002 Lruvec\uff1aLRU \u94fe\u8868\u96c6\u5408\u3002 4.4 \u4f19\u4f34\u7cfb\u7edf \u5185\u6838\u542f\u52a8\u5b8c\u6210\u540e\uff0c\u7269\u7406\u5185\u5b58\u7684\u9875\u9762\u5c31\u8981\u6dfb\u52a0\u5230\u4f19\u4f34\u7cfb\u7edf\u4e2d\u6765\u7ba1\u7406\u4e86\u3002\u53c2\u8003\u7b2c\u4e00\u7bc7 \u300a\u4f19\u4f34\u7cfb\u7edf\u300b \u53c2\u8003 \u4e00\u6587\u641e\u61c2 linux \u7269\u7406\u5185\u5b58\u7ba1\u7406","title":"\u7b2c\u4e03\u7bc7 \u5173\u4e8e\u7269\u7406\u5185\u5b58\u7ba1\u7406"},{"location":"chapter_6/7_physical_memory/#_1","text":"\u672c\u7bc7\u603b\u7ed3 Linux \u5185\u6838\u5bf9\u4e8e\u7269\u7406\u5185\u5b58\u7684\u7ba1\u7406 \u4ece\u5185\u6838\u89d2\u5ea6\u5176\u5b9e\u53ef\u4ee5\u628a\u7269\u7406\u5185\u5b58\u60f3\u8c61\u4e3a\u7269\u7406\u786c\u76d8\u7684\u7ba1\u7406\u6a21\u5f0f, \u90fd\u662f\u5f80\u76f8\u5e94\u5bc4\u5b58\u5668\u53d1\u9001\u7ba1\u7406\u6307\u4ee4, \u7136\u540e\u4ee5 \u9875\u5e27 \u4e3a\u6700\u5c0f\u5355\u4f4d\u8fdb\u884c \u8bfb\u53d6/\u5199\u5165 \u6570\u636e. \u4e3a\u5565\u5462? \u56e0\u4e3a\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\u5185\u5b58\u5c31\u662f\u4e00\u5757\u901f\u5ea6\u8d85\u5feb\u7684\u786c\u76d8. \u53e6\u5916,\u6211\u4eec\u53ef\u4ee5\u628a\u7269\u7406\u5185\u5b58\u7b80\u5355\u5730\u770b\u6210\u4e00\u4e2a\u5927\u7684\u6570\u7ec4\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5b57\u8282\u90fd\u53ef\u4ee5\u901a\u8fc7\u7269\u7406\u5730\u5740\u8fdb\u884c\u8bbf\u95ee\u3002","title":"\u6982\u8ff0"},{"location":"chapter_6/7_physical_memory/#cpu","text":"CPU \u5199\u7269\u7406\u5185\u5b58\u7684\u8fc7\u7a0b\uff1a CPU \u5148\u7ed9\u51fa\u8981\u5199\u5165\u6570\u636e\u7684\u7269\u7406\u5730\u5740\u5bf9\u5e94\u7684\u865a\u62df\u5730\u5740\uff0c\u901a\u8fc7 MMU \u8f6c\u5316\u4e3a\u7269\u7406\u5730\u5740\uff0c\u82e5 cache \u4e2d\u6ca1\u6709\u547d\u4e2d\uff0c\u5219\u5c06\u8981\u5199\u5165\u6570\u636e\u7684\u7269\u7406\u5730\u5740\u653e\u5230\u7cfb\u7edf\u603b\u7ebf\u4e0a\u3002DDR \u7684\u63a7\u5236\u5668\u611f\u53d7\u5230\u603b\u7ebf\u4e0a\u7684\u5730\u5740\u4fe1\u53f7\u4ee5\u53ca\u5199\u63a7\u5236\u4fe1\u53f7\uff0c\u5c06\u7269\u7406\u5730\u5740\u4ece\u603b\u7ebf\u4e0a\u8bfb\u51fa\u6765\uff0c\u5e76\u7b49\u5f85\u6570\u636e\u7684\u5230\u8fbe\u3002CPU \u5c06\u6570\u636e\u53d1\u9001\u5230\u7cfb\u7edf\u603b\u7ebf\u4e0a\uff0cDDR \u63a7\u5236\u5668\u611f\u53d7\u5230\u603b\u7ebf\u4e0a\u7684\u6570\u636e\u4fe1\u53f7\uff0c\u5c06\u6570\u636e\u4ece\u603b\u7ebf\u4e0a\u8bfb\u53d6\u51fa\u6765\u3002DDR \u63a7\u5236\u5668\u901a\u8fc7\u7269\u7406\u5730\u5740\u627e\u5230\u76f8\u5e94\u7684\u5b58\u50a8\u6a21\u5757\uff0c\u7136\u540e\u5c06\u6570\u636e\u5199\u5165\u5230\u7269\u7406\u5730\u5740\u5bf9\u5e94\u7684\u5b58\u50a8\u6a21\u5757\u3002 CPU \u8bfb\u7269\u7406\u5185\u5b58\u7684\u8fc7\u7a0b\uff1a CPU \u7ed9\u51fa\u8981\u8bfb\u6570\u636e\u7684\u7269\u7406\u5730\u5740\u5bf9\u5e94\u7684\u865a\u62df\u5730\u5740\uff0c\u901a\u8fc7 MMU \u8f6c\u5316\u4e3a\u7269\u7406\u5730\u5740\uff0c\u82e5 cache \u4e2d\u6ca1\u6709\u547d\u4e2d\uff0c\u5219\u5c06\u7269\u7406\u5730\u5740\u653e\u5230\u7cfb\u7edf\u603b\u7ebf\u4e0a\u3002DDR \u63a7\u5236\u5668\u611f\u53d7\u5230\u603b\u7ebf\u4e0a\u7684\u5730\u5740\u578b\u53f7\u53ca\u8bfb\u63a7\u5236\u4fe1\u53f7\uff0c\u5c06\u7269\u7406\u5730\u5740\u4ece\u603b\u7ebf\u4e0a\u8bfb\u53d6\u51fa\u6765\uff0cDDR \u63a7\u5236\u5668\u6839\u636e\u7269\u7406\u5730\u5740\u627e\u5230\u5b58\u50a8\u6a21\u5757\u4e2d\u6570\u636e\u7684\u4f4d\u7f6e\uff0c\u5e76\u4ece SDRAM \u82af\u7247\u4e2d\u53d6\u51fa\u7269\u7406\u5730\u5740\u5bf9\u5e94\u7684\u6570\u636e\uff0cDDR \u63a7\u5236\u5668\u5c06\u6570\u636e\u653e\u5230\u603b\u7ebf\u4e0a\uff0cCPU \u4ece\u603b\u7ebf\u4e0a\u83b7\u53d6\u6570\u636e\uff0c\u5e76\u5b58\u653e\u5230\u5bc4\u5b58\u5668\u4e0a\u3002","title":"\u4e00 CPU \u8bbf\u95ee\u7269\u7406\u5185\u5b58\u7684\u5168\u8fc7\u7a0b"},{"location":"chapter_6/7_physical_memory/#_2","text":"\u8fd9\u4e2a\u5728\u7b2c\u4e00\u7bc7\u300a\u4f19\u4f34\u7cfb\u7edf\u300b\u4e2d\u5df2\u6709\u4ecb\u7ecd, \u8fd9\u91cc\u518d\u590d\u4e60\u4e00\u4e0b \u4e0e\u7269\u7406\u5185\u5b58\u76f8\u5173\u7684\u6570\u636e\u7ed3\u6784\u6709\u5185\u5b58\u8282\u70b9\uff08pglist_data\uff09\u3001\u5185\u5b58\u7ba1\u7406\u533a\uff08zone\uff09\u3001\u7269\u7406\u9875\u9762\uff08page\uff09\u3001mem_map \u6570\u7ec4\u3001\u9875\u8868\u9879\uff08PTE\uff09\u3001\u9875\u5e27\u53f7\uff08PFN\uff09\u3001\u7269\u7406\u5730\u5740\uff08paddress\uff09\u3002 Linux \u5185\u6838\u901a\u8fc7 struct page \u6765\u7ba1\u7406\u7269\u7406\u5185\u5b58\u4e2d\u7684\u4e00\u4e2a\u9875\u3002\u5185\u6838\u4e3a\u6bcf\u4e2a\u7269\u7406\u9875\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7d22\u5f15\u7f16\u53f7 PFN\uff08Page Frame Number\uff0c\u9875\u5e27\u53f7\uff09 \uff0c\u8fd9\u4e2a PFN \u4e0e struct page \u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002\u901a\u8fc7 page_to_pfn/pfn_to_page \u4e24\u4e2a\u5b8f\u5b9e\u73b0\u7269\u7406\u9875\u548c struct page \u4e4b\u95f4\u7684\u76f8\u4e92\u8f6c\u6362\u3002","title":"\u4e8c \u5185\u6838\u4e2d\u76f8\u5173\u6570\u636e\u7ed3\u6784"},{"location":"chapter_6/7_physical_memory/#_3","text":"","title":"\u4e09 \u6846\u67b6"},{"location":"chapter_6/7_physical_memory/#31","text":"\u5728\u5f53\u524d\u7684\u8ba1\u7b97\u673a\u3001\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u4ee5\u5185\u5b58\u4e3a\u7814\u7a76\u5bf9\u8c61\u53ef\u4ee5\u5206\u6210\u4e24\u79cd\u67b6\u6784\u3002\u4e00\u79cd\u662f UMA\uff08Uniform Memory Access\uff0c\u7edf\u4e00\u5185\u5b58\u8bbf\u95ee\uff09\u67b6\u6784\uff0c\u53e6\u5916\u4e00\u79cd\u662f NUMA\uff08Non-Uniform Memory Access\uff0c\u975e\u7edf\u4e00\u5185\u5b58\u8bbf\u95ee\uff09\u67b6\u6784\u3002","title":"3.1 \u5185\u5b58\u6846\u67b6"},{"location":"chapter_6/7_physical_memory/#311-uma","text":"\u5185\u5b58\u53ef\u4ee5\u88ab\u5176\u4ed6\u6a21\u5757\u7edf\u4e00\u5bfb\u5740\uff0c\u6709\u7edf\u4e00\u7684\u7ed3\u6784\u3002\u76ee\u524d\uff0c\u5927\u90e8\u5206\u5d4c\u5165\u5f0f\u7cfb\u7edf\u53ca\u8ba1\u7b97\u673a\u7cfb\u7edf\u90fd\u91c7\u7528 UMA \u67b6\u6784\u3002\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u662f\u4e00\u4e2a UMA \u67b6\u6784\u7684\u7cfb\u7edf\uff0c\u6709\u4e24\u4e2a cpu \u4f4d\u4e8e\u540c\u4e00\u4e2a cluster \u4e2d\uff0ccpu \u5206\u522b\u6709\u81ea\u5df1\u7684 L1D\u3001L1I cache \u53ca L2 cache\u3002\u4e24\u4e2a cpu \u5171\u4eab L3 cache\uff0c\u901a\u8fc7\u7cfb\u7edf\u603b\u7ebf\u53ef\u4ee5\u8bbf\u95ee\u7269\u7406\u5185\u5b58 DDR\uff0cSRAM\u3001SSD \u7b49\u6a21\u5757\uff0c\u5e76\u4e14\u4e24\u4e2a CPU \u5bf9\u7269\u7406\u5185\u5b58\u7684\u8bbf\u95ee\u6d88\u8017\u662f\u4e00\u6837\u7684\u3002\u8fd9\u79cd\u8bbf\u95ee\u6a21\u5f0f\u7684\u5904\u7406\u5668\u88ab\u6210\u4e3a SMP\uff08Aymmetric Multiprocessing\uff0c\u5bf9\u79f0\u591a\u5904\u7406\u5668\uff09","title":"3.1.1 UMA \u67b6\u6784"},{"location":"chapter_6/7_physical_memory/#312-numa","text":"\u7cfb\u7edf\u4e2d\u6709\u591a\u4e2a\u5185\u5b58\u8282\u70b9\u548c\u591a\u4e2a cpu cluster\uff0cCPU \u8bbf\u95ee\u672c\u5730\u5185\u5b58\u8282\u70b9\u7684\u65f6\u95f4\u5f00\u9500\u6700\u5c0f\uff0c\u8bbf\u95ee\u8fdc\u7aef\u7684\u5185\u5b58\u8282\u70b9\u7684\u65f6\u95f4\u5f00\u9500\u8981\u5927\u3002\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u662f\u4e00\u4e2a NUMA \u67b6\u6784\u7684\u7cfb\u7edf\uff0c\u5176\u4e2d cpu0\u3001cpu1 \u5728 cluster0 \u4e2d\uff0c\u4e0e\u76f8\u5e94\u7684 L1I/L1D cache\u3001L2 cache\u3001L3 cache \u53ca DDR \u7ec4\u6210 node0 \u8282\u70b9\u3002\u540c\u6837\u7684\uff0cCPU2\u3001CPU3 \u5728 cluster1 \u4e2d\uff0c\u4e0e\u76f8\u5e94\u7684 L1I/L1D cache\u3001L2 cache\u3001L3 cache \u53ca DDR \u7ec4\u6210 node1 \u8282\u70b9\u3002\u4e24\u4e2a node \u8282\u70b9\uff0c\u901a\u8fc7 UPI\uff08Ultra Path Interconnect\uff0c\u8d85\u8def\u5f84\u4e92\u8054\uff09\u603b\u7ebf\u8fde\u63a5\u3002CPU0 \u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a UPI \u8bbf\u95ee\u8fdc\u7aef node1 \u4e0a\u7684\u7269\u7406\u5185\u5b58\uff0c\u4f46\u662f\u8981\u6bd4\u672c\u5730 node0 \u7684\u5185\u5b58\u8bbf\u95ee\u6162\u5f97\u591a\u3002","title":"3.1.2 NUMA \u67b6\u6784"},{"location":"chapter_6/7_physical_memory/#32","text":"\u5185\u6838\u662f\u4ee5\u9875\u4e3a\u5355\u4f4d\u4f7f\u7528 struct page \u6570\u636e\u7ed3\u6784\u6765\u7ba1\u7406\u7269\u7406\u5185\u5b58\u7684\u3002\u5185\u6838\u901a\u8fc7\u7269\u7406\u5185\u5b58\u6a21\u578b\u6765\u5b9e\u73b0\u7ec4\u7ec7\u7ba1\u7406\u8fd9\u4e9b\u7269\u7406\u5185\u5b58\u9875\uff0c\u4e0d\u540c\u7684\u7269\u7406\u5185\u5b58\u6a21\u578b\uff0c\u5e94\u5bf9\u7684\u573a\u666f\u53ca\u9875\u5e27\u53f7\u4e0e\u7269\u7406\u9875\u4e4b\u95f4\u7684\u8ba1\u7b97\u65b9\u5f0f\u4e5f\u4e0d\u4e00\u6837\u3002","title":"3.2 \u5185\u5b58\u6a21\u578b"},{"location":"chapter_6/7_physical_memory/#321-flatmem","text":"Linux \u65e9\u671f\u4f7f\u7528\u7684\u7269\u7406\u5185\u5b58\u6bd4\u8f83\u5c0f\uff0c\u6bd4\u5982\u51e0\u5341 MB\uff0c\u5e76\u4e14\u8fd9\u4e9b\u7269\u7406\u5185\u5b58\u662f\u4e00\u7247\u8fde\u7eed\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u8fd9\u6837\u7269\u7406\u5730\u5740\u4e5f\u662f\u8fde\u7eed\u7684\uff0c\u6309\u56fa\u5b9a\u9875\u5927\u5c0f\u5212\u5206\u51fa\u6765\u7684\u7269\u7406\u9875\u4e5f\u662f\u8fde\u7eed\u7684\u3002Linux \u5185\u6838\u4f1a\u7528\u4e00\u4e2a mem_map \u5168\u5c40\u6570\u7ec4\u6765\u7ec4\u7ec7\u7ba1\u7406\u6240\u6709\u7684\u7269\u7406\u9875\uff0c\u5176\u4e2d\u7269\u7406\u9875\u662f\u901a\u8fc7 struct page \u6765\u7ba1\u7406\uff0c\u8fd9\u6837\u6bcf\u4e2a\u6570\u7ec4\u7684\u4e0b\u6807\u4fbf\u662f PFN\u3002\u8fd9\u79cd\u8fde\u7eed\u7684\u7269\u7406\u5185\u5b58\u4fbf\u662f\u5e73\u5766\u5185\u5b58\u6a21\u578b\u3002","title":"3.2.1 \u5e73\u5766\u5185\u5b58\u6a21\u578b\uff1aFLATMEM"},{"location":"chapter_6/7_physical_memory/#322-discontigmem","text":"\u5bf9\u4e8e PLATMEM \u9002\u5408\u7ba1\u7406\u4e00\u6574\u5757\u8fde\u7eed\u7684\u7269\u7406\u5185\u5b58\uff0c\u4f46\u662f\u5bf9\u4e8e\u591a\u5757\u975e\u8fde\u7eed\u7684\u7269\u7406\u5185\u5b58\uff0c\u82e5\u4f7f\u7528 FLATMEM \u6765\u7ba1\u7406\uff0c\u8fd9\u65f6 mem_map \u5168\u5c40\u6570\u7ec4\u4e2d\u4f1a\u6709\u4e0d\u8fde\u7eed\u5185\u5b58\u5730\u5740\u533a\u7684\u5185\u5b58\u7a7a\u6d1e\uff0c\u8fd9\u4f1a\u9020\u6210\u5185\u5b58\u7a7a\u95f4\u7684\u6d6a\u8d39\u3002\u4e3a\u4e86\u7ba1\u7406\u8fd9\u79cd\u4e0d\u8fde\u7eed\u7684\u7269\u7406\u5185\u5b58\uff0c\u5185\u6838\u5f15\u5165\u4e86 DISCONTIGMEM \u975e\u8fde\u7eed\u5185\u5b58\u6a21\u578b\u6765\u7ba1\u7406\uff0c\u4ee5\u4fbf\u6d88\u9664\u4e0d\u8fde\u7eed\u7684\u5185\u5b58\u5730\u5740\u7a7a\u6d1e\u5bf9 mem_map \u5168\u5c40\u6570\u7ec4\u9020\u6210\u7684\u7a7a\u95f4\u6d6a\u8d39\u3002 DISCONTIGMEM \u975e\u8fde\u7eed\u5185\u5b58\u6a21\u578b\u7684\u601d\u8def\u662f\uff1a\u5c06\u7269\u7406\u5185\u5b58\u4ece\u5b8f\u89c2\u4e0a\u5212\u5206\u6210\u4e00\u4e2a\u4e2a\u8282\u70b9 node\uff0c\u4f46\u662f\u5fae\u89c2\u4e0a\u8fd8\u662f\u4ee5\u7269\u7406\u9875\u4e3a\u5355\u4f4d\uff0c\u6bcf\u4e2a node \u8282\u70b9\u7ba1\u7406\u4e00\u5757\u8fde\u7eed\u7684\u7269\u7406\u5185\u5b58\uff0c\u8fd9\u6837\u8fd9\u4e9b\u975e\u8fde\u7eed\u7684\u5185\u5b58\uff0c\u4f1a\u4ee5\u8fde\u7eed\u7684\u5185\u5b58\u65b9\u5f0f\u5212\u5206\u5230 node \u8282\u70b9\u4e2d\u7ba1\u7406\u8d77\u6765\uff0c\u8fd9\u6837\u4fbf\u53ef\u4ee5\u907f\u514d\u5185\u5b58\u7a7a\u6d1e\u9020\u6210\u7684\u7a7a\u95f4\u6d6a\u8d39\u3002","title":"3.2.2 \u975e\u8fde\u7eed\u5185\u5b58\u6a21\u578b\uff1aDISCONTIGMEM"},{"location":"chapter_6/7_physical_memory/#323-sparsemem","text":"\u7531\u4e8e\u7269\u7406\u5185\u5b58\u5728\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u4f1a\u6709\u5f88\u591a\u7a7a\u6d1e\uff0c\u8fd9\u6837\u7269\u7406\u5185\u5b58\u5b58\u5728\u591a\u5904\u4e0d\u8fde\u7eed\u3002\u5982\u679c\u5229\u7528\u4e0a\u9762\u8bb2\u7684 DISCONTIGMEM \u5185\u5b58\u6a21\u578b\uff0c\u4f1a\u9020\u6210 node \u4f17\u591a\uff0c\u8fd9\u6837\u5f00\u9500\u5c31\u5927\u4e86\u3002\u4e3a\u4e86\u80fd\u591f\u66f4\u7075\u6d3b\u3001\u66f4\u9ad8\u6548\u7684\u3001\u66f4\u5c0f\u7684\u7ba1\u7406\u8fde\u7eed\u7269\u7406\u5185\u5b58\u3002SPARSEMEM \u7cfb\u6570\u5185\u5b58\u6a21\u578b\u5c31\u662f\u4e3a\u4e86\u5bf9\u7c92\u5ea6\u66f4\u5c0f\u7684\u8fde\u7eed\u5185\u5b58\u5757\u8fdb\u884c\u7cbe\u7ec6\u7684\u7ba1\u7406\uff0c\u7528\u4e8e\u7ba1\u7406\u8fde\u7eed\u5185\u5b58\u5757\u7684\u5355\u5143\u88ab\u79f0\u4e3a section\u3002\u5728\u5185\u5b58\u4e2d\u7528 struct mem_section \u7ed3\u6784\u4f53\u8868\u793a SPARSEMEM \u6a21\u578b\u4e2d\u7684 section\u3002 \u7531\u4e8e section \u88ab\u7528\u4f5c\u7ba1\u7406\u5c0f\u7c92\u5ea6\u7684\u8fde\u7eed\u5185\u5b58\u5757\uff0c\u8fd9\u4e9b\u5c0f\u7684\u8fde\u7eed\u7269\u7406\u5185\u5b58\u5728 section \u4e2d\u4e5f\u662f\u901a\u8fc7\u6570\u7ec4\u7684\u65b9\u5f0f\u88ab\u7ec4\u7ec7\u7ba1\u7406\uff0c\u5176\u4e2d mem_section \u7ed3\u6784\u4f53\u4e2d\u7684 section_mem_map \u6307\u9488\u7528\u4e8e\u6307\u5411 section \u4e2d\u7ba1\u7406\u8fde\u7eed\u5185\u5b58\u7684 page \u6570\u7ec4\u3002SPARSEMEM \u5185\u5b58\u6a21\u578b\u4e2d\u7684 mem_section \u4f1a\u5b58\u5728\u653e\u5728\u4e00\u4e2a\u5168\u5c40\u7684\u6570\u7ec4\u4e2d\uff0c\u5e76\u4e14\u6bcf\u4e2a mem_section \u90fd\u53ef\u4ee5\u5728\u7cfb\u7edf\u8fd0\u884c\u7684\u65f6\u5019\u8fdb\u884c\u5185\u5b58\u7684 offline/online\uff0c\u8fd9\u6837\u4fbf\u53ef\u4ee5\u652f\u6301\u5185\u5b58\u7684\u70ed\u62d4\u63d2\u3002","title":"3.2.3 \u7a00\u758f\u5185\u5b58\u6a21\u578b\uff1aSPARSEMEM"},{"location":"chapter_6/7_physical_memory/#_4","text":"","title":"\u56db \u7269\u7406\u5185\u5b58\u521d\u59cb\u5316"},{"location":"chapter_6/7_physical_memory/#41","text":"\u7269\u7406\u5185\u5b58\u7684\u5927\u5c0f\u4f1a\u5728 DTS\uff08Device Tree Source\uff0c\u8bbe\u5907\u6811\uff09\u4e2d\u63cf\u8ff0\uff0c\u5982\u4e0b dts \u7684\u63cf\u8ff0\uff1a memory { device_type = \"memory\"; reg = <0x000000000 0x80000000 0x00000000 0x40000000>; }; \u8d77\u59cb\u5730\u5740\u4e3a0x80000000\uff0c\u5927\u5c0f\u4e3a0x40000000","title":"4.1 \u5185\u5b58\u5927\u5c0f\u521d\u59cb\u5316"},{"location":"chapter_6/7_physical_memory/#42-memblock","text":"\u5728\u4f19\u4f34\u7cfb\u7edf\u6ca1\u6709\u521d\u59cb\u5316\u524d\uff0c\u5728\u5185\u6838\u4e2d\u9700\u8981\u4e00\u5957\u673a\u5236\u7ba1\u7406\u5185\u5b58\u7684\u7533\u8bf7\u4e0e\u91ca\u653e\u3002\u5728\u542f\u52a8\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u89e3\u6790\u8bbe\u5907\u6811\u4e2d\u7684 memory \u8282\u70b9\uff0c\u628a\u6240\u6709\u7269\u7406\u5185\u5b58\u6dfb\u52a0\u5230 memblock \u4e2d\u3002 int memblock_add(phys_addr_t base, phys_addr_t size); \u6dfb\u52a0\u5185\u5b58\u533a\u57df\u51fd\u6570\u3002 int memblock_remove(phys_addr_t base, phys_addr_t size) \u5220\u9664\u5185\u5b58\u533a\u57df\u7684\u51fd\u6570\u3002 void * __init memblock_alloc(phys_addr_t size, phys_addr_t align) \u5206\u914d\u5185\u5b58\u7684\u51fd\u6570\u3002 int memblock_free(phys_addr_t base, phys_addr_t size) \u91ca\u653e\u5185\u5b58\u7684\u51fd\u6570","title":"4.2 memblock \u5185\u5b58\u5206\u914d\u5668"},{"location":"chapter_6/7_physical_memory/#43-zone","text":"\u5728\u5bf9\u9875\u8868\u521d\u59cb\u5316\u540e\uff0c\u5185\u6838\u5c31\u4f1a\u5bf9\u5185\u5b58\u8fdb\u884c\u7ba1\u7406\u3002\u5185\u6838\u4f1a\u5c06\u8fd9\u4e9b\u7269\u7406\u5185\u5b58\u5206\u914d\u6210\u4e0d\u540c\u7684\u5185\u5b58\u7ba1\u7406\u533a\uff08ZONE\uff09\uff0c\u5206\u522b\u9488\u5bf9\u8fd9\u4e9b\u5185\u5b58\u7ba1\u7406\u533a\u8fdb\u884c\u7ba1\u7406\u3002 \u6570\u636e\u7ed3\u6784 zone \u4e2d\u5173\u952e\u7684\u6210\u5458\u5982\u4e0b\uff1a Watermark\uff1a\u6bcf\u4e2a zone \u5728\u7cfb\u7edf\u542f\u52a8\u65f6\u4f1a\u8ba1\u7b97\u51fa 3 \u4e2a\u6c34\u4f4d\uff0c\u5206\u522b\u662f WMARK_MIN\uff08\u6700\u4f4e\u8b66\u6212\u6c34\u4f4d\uff09\u3001WMARK_LOW\uff08\u4f4e\u6c34\u4f4d\uff09\u3001WMARK_HIGH\uff08\u9ad8\u6c34\u4f4d\uff09\uff0c\u8fd9\u4e9b\u5728\u9875\u9762\u5206\u914d\u5668\u548c kswapd \u9875\u9762\u56de\u6536\u4e2d\u4f1a\u7528\u5230\u3002 Lowemem_reserve\uff1a\u9632\u6b62\u9875\u9762\u5206\u914d\u5668\u8fc7\u6e21\u4f7f\u7528\u4f4e\u7aef zone \u7684\u5185\u5b58\u3002 Zone_pgdat\uff1a\u6307\u5411\u5185\u5b58\u8282\u70b9\u3002 Pageset\uff1a\u7528\u4e8e\u7ef4\u62a4\u6bcf\u4e2a cpu \u4e0a\u7684\u4e00\u4e9b\u5217\u9875\u9762\uff0c\u4ee5\u51cf\u5c11\u81ea\u65cb\u9501\u7684\u4f7f\u7528 Zone_start_pfn\uff1azone \u7684\u8d77\u59cb\u9875\u5e27\u53f7\u3002 Managed_pages\uff1azone \u4e2d\u88ab\u4f19\u4f34\u7cfb\u7edf\u7ba1\u7406\u7684\u9875\u9762\u6570\u91cf\u3002 Spanned_pages\uff1azone \u4e2d\u5305\u542b\u7684\u9875\u9762\u6570\u91cf\u3002 Present_pages\uff1azone \u91cc\u5b9e\u9645\u7ba1\u7406\u7684\u9875\u9762\u6570\u91cf\u3002\u5bf9\u4e8e\u4e00\u4e9b\u67b6\u6784\u6765\u8bf4\uff0c\u5b83\u548c spanned_pages \u6570\u91cf\u4e00\u81f4\u3002 Free_area\uff1a\u4f19\u4f34\u7cfb\u7edf\u6838\u5fc3\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7ba1\u7406\u7a7a\u95f2\u4e5f\u5feb\u94fe\u8868\u7684\u6570\u7ec4\u3002 Lock\uff1a\u5e76\u884c\u8bbf\u95ee\u65f6\u7528\u4e8e\u4fdd\u62a4 zone \u7684\u81ea\u65cb\u9501\u3002 Lruvec\uff1aLRU \u94fe\u8868\u96c6\u5408\u3002","title":"4.3 ZONE \u521d\u59cb\u5316"},{"location":"chapter_6/7_physical_memory/#44","text":"\u5185\u6838\u542f\u52a8\u5b8c\u6210\u540e\uff0c\u7269\u7406\u5185\u5b58\u7684\u9875\u9762\u5c31\u8981\u6dfb\u52a0\u5230\u4f19\u4f34\u7cfb\u7edf\u4e2d\u6765\u7ba1\u7406\u4e86\u3002\u53c2\u8003\u7b2c\u4e00\u7bc7 \u300a\u4f19\u4f34\u7cfb\u7edf\u300b","title":"4.4 \u4f19\u4f34\u7cfb\u7edf"},{"location":"chapter_6/7_physical_memory/#_5","text":"\u4e00\u6587\u641e\u61c2 linux \u7269\u7406\u5185\u5b58\u7ba1\u7406","title":"\u53c2\u8003"},{"location":"chapter_6/8_linux_mm_update/","text":"\u6982\u8ff0 \u4e00 Linux \u5982\u4f55\u5bf9\u7528\u6237\u7a7a\u95f4\u7684\u865a\u62df\u5185\u5b58\u8fdb\u884c\u7ba1\u7406 1 \u6570\u636e\u7ed3\u6784 \u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u662f\u7ebf\u6027\u7684\uff0c\u4f7f\u7528\u7ed3\u6784\u4f53 vm_area_struct \u6765\u63cf\u8ff0\u3002\u5185\u6838\u5c06\u6bcf\u4e00\u6bb5\u5177\u6709\u76f8\u540c\u5c5e\u6027\u7684\u5185\u5b58\u533a\u57df\u5f53\u4f5c\u4e00\u4e2a vm_area_struct \u8fdb\u884c\u7ba1\u7406\uff0c\u6bcf\u4e2a vm_area_struct \u662f\u4e00\u4e2a\u8fde\u7eed\u7684\u865a\u62df\u5730\u5740\u8303\u56f4\uff0c\u8fd9\u4e9b\u533a\u57df\u4e0d\u4f1a\u4e92\u76f8\u91cd\u53e0\u3002 mm_struct \u91cc\u9762\u6709\u4e00\u4e2a\u5355\u94fe\u8868 mmap\uff0c\u7528\u4e8e\u5c06 vm_area_struct \u4e32\u8054\u8d77\u6765\uff0c\u53e6\u5916\u8fd8\u6709\u4e00\u9897\u7ea2\u9ed1\u6811 mm_rb \uff0cvm_area_struct \u6839\u636e\u8d77\u59cb\u5730\u5740\u6302\u5728\u8fd9\u9897\u6811\u4e0a\u3002\u4f7f\u7528\u7ea2\u9ed1\u6811\u53ef\u4ee5\u6839\u636e\u5730\u5740\uff0c\u5feb\u901f\u67e5\u627e\u4e00\u4e2a\u5185\u5b58\u533a\u57df\u3002 vm_area_struct \u53ef\u4ee5\u76f4\u63a5\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\uff0c\u4e5f\u53ef\u4ee5\u5173\u8054\u6587\u4ef6\u3002 \u5982\u679c vm_area_struct \u662f\u6587\u4ef6\u6620\u5c04\uff0c\u7531\u6210\u5458 vm_file \u6307\u5411\u5bf9\u5e94\u7684\u6587\u4ef6\u6307\u9488\u3002\u4e00\u4e2a\u6ca1\u6709\u5173\u8054\u6587\u4ef6\u7684 vm_area_struct \u662f\u533f\u540d\u5185\u5b58\u3002 \u5f00\u53d1\u8005\u4f7f\u7528 malloc \u7b49 glibc \u5e93\u51fd\u6570\u5206\u914d\u5185\u5b58\u7684\u65f6\u5019\uff0c\u4e0d\u662f\u76f4\u63a5\u5206\u914d\u7269\u7406\u5185\u5b58\uff0c\u800c\u662f\u5728\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u7a7a\u95f4\u4e2d\u7533\u8bf7\u4e00\u6bb5\u865a\u62df\u5185\u5b58\uff0c\u751f\u6210\u76f8\u5e94\u7684\u6570\u636e\u7ed3\u6784 vm_area_struct \uff0c\u7136\u540e\u5c06\u5b83\u63d2\u8fdb mm_struct \u7684\u94fe\u8868 mmap\uff0c\u540c\u65f6\u6302\u5728\u7ea2\u9ed1\u6811 mm_rb \u4e0a\uff0c\u5c31\u7b97\u5b8c\u6210\u4e86\u5de5\u4f5c\uff0c\u6839\u672c\u6ca1\u6709\u6d89\u53ca\u5230\u7269\u7406\u5185\u5b58\u7684\u5206\u914d\u3002\u53ea\u6709\u5f53\u7b2c\u4e00\u6b21\u5bf9\u8fd9\u5757\u865a\u62df\u5185\u5b58\u8fdb\u884c\u8bfb\u5199\u65f6\uff0c\u53d1\u73b0\u8be5\u5185\u5b58\u533a\u57df\u6ca1\u6709\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\uff0c\u8fd9\u65f6\u4f1a\u89e6\u53d1\u7f3a\u9875\u4e2d\u65ad\uff0c\u7136\u540e\u7531\u5185\u6838\u586b\u5199\u9875\u8868\uff0c\u5b8c\u6210\u865a\u62df\u5185\u5b58\u5230\u7269\u7406\u5185\u5b58\u7684\u6620\u5c04\u3002 \u5f53\u5f00\u53d1\u8005\u4f7f\u7528 mmap \u8fdb\u884c\u6587\u4ef6\u6620\u5c04\u65f6\uff0c\u5185\u6838\u6839\u636e vm_area_struct \u4e2d\u4ee3\u8868\u6587\u4ef6\u6620\u5c04\u5173\u7cfb vm_file\uff0c\u5c06\u6587\u4ef6\u5185\u5bb9\u4ece\u78c1\u76d8\u52a0\u8f7d\u5230\u7269\u7406\u5185\u5b58\uff0c\u4e5f\u5c31\u662f Page Cache \u4e2d\uff0c\u6700\u540e\u5efa\u7acb\u8fd9\u6bb5\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u7684\u6620\u5c04\u3002 inode \u901a\u8fc7 address_space \u7ba1\u7406\u7740\u6587\u4ef6\u5df2\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f Page Cache\u3002address_space \u7684\u5b57\u6bb5 i_pages \u6307\u5411\u4e00\u68f5 xarray \u6811\uff0c\u4e0e\u8fd9\u4e2a\u6587\u4ef6\u76f8\u5173\u7684 Page Cache \u9875\u90fd\u6302\u5728\u8fd9\u9897\u6811\u4e0a\u3002\u6211\u4eec\u5728\u8bbf\u95ee\u6587\u4ef6\u5185\u5bb9\u7684\u65f6\u5019\uff0c\u6839\u636e\u6307\u5b9a\u6587\u4ef6\u548c\u76f8\u5e94\u7684\u9875\u504f\u79fb\u91cf\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7 xarray \u6811\u5feb\u901f\u5224\u65ad\u8be5\u9875\u662f\u5426\u5df2\u7ecf\u5728 Page Cache \u4e2d\u3002\u5982\u679c\u8be5\u9875\u5b58\u5728\uff0c\u8bf4\u660e\u6587\u4ef6\u5185\u5bb9\u5df2\u7ecf\u88ab\u8bfb\u53d6\u5230\u4e86\u5185\u5b58\uff0c\u4e5f\u5c31\u662f\u5b58\u5728\u4e8e Page Cache \u4e2d\uff1b\u5982\u679c\u8be5\u9875\u4e0d\u5b58\u5728\uff0c\u5c31\u8bf4\u660e\u5185\u5bb9\u4e0d\u5728 Page Cache \u4e2d\uff0c\u9700\u8981\u4ece\u78c1\u76d8\u4e2d\u53bb\u8bfb\u53d6\u3002 \u7531\u4e8e\u6587\u4ef6\u548c inode \u4e00\u4e00\u5bf9\u5e94\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a inode \u662f Page Cache \u7684\u5bbf\u4e3b\uff08host\uff09\uff0c\u5185\u6838\u901a\u8fc7 inode->imapping->i_pages \u6307\u5411\u7684\u6811\uff0c\u7ba1\u7406\u7ef4\u62a4\u7740 Page Cache \u3002 \u4e00\u4e2a\u6587\u4ef6(inode)\u53ea\u80fd\u6709 \u4e00\u4e2a address_space \u6570\u636e\u7ed3\u6784, \u8868\u793a Page Cache \u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\uff08\u5047\u8bbe Page Cache \u662f\u6709\u591a\u4e2a\u5b9e\u4f8b\u7ec4\u6210, \u5206\u4e24\u5c42\u770b\uff0c\u4e0a\u5c42\u7684\u5355\u4e2a\u5b9e\u4f8b\u5c31\u662f\u4e00\u4e2a address_space \u5b9e\u4f8b\uff0c\u5e95\u5c42\u7684\u5355\u4e2a\u5b9e\u4f8b\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a struct page) 2 \u5173\u4e8e\u865a\u62df\u5185\u5b58\u7a7a\u95f4\u7684\u6743\u9650 3 \u5b9a\u4e49\u865a\u62df\u5185\u5b58\u533a\u57df\u7684\u8bbf\u95ee\u6743\u9650\u548c\u884c\u4e3a\u89c4\u8303 vm_page_prot \u548c vm_flags \u90fd\u662f\u7528\u6765\u6807\u8bb0 vm_area_struct \u7ed3\u6784\u8868\u793a\u7684\u8fd9\u5757\u865a\u62df\u5185\u5b58\u533a\u57df\u7684\u8bbf\u95ee\u6743\u9650\u548c\u884c\u4e3a\u89c4\u8303\u3002 \u4e0a\u8fb9\u5c0f\u8282\u4e2d\u6211\u4eec\u4e5f\u63d0\u5230\uff0c\u5185\u6838\u4f1a\u5c06\u6574\u5757\u7269\u7406\u5185\u5b58\u5212\u5206\u4e3a\u4e00\u9875\u4e00\u9875\u5927\u5c0f\u7684\u533a\u57df\uff0c\u4ee5\u9875\u4e3a\u5355\u4f4d\u6765\u7ba1\u7406\u8fd9\u4e9b\u7269\u7406\u5185\u5b58\uff0c\u6bcf\u9875\u5927\u5c0f\u9ed8\u8ba4 4K \u3002\u800c\u865a\u62df\u5185\u5b58\u6700\u7ec8\u4e5f\u662f\u8981\u548c\u7269\u7406\u5185\u5b58\u4e00\u4e00\u6620\u5c04\u8d77\u6765\u7684\uff0c\u6240\u4ee5\u5728\u865a\u62df\u5185\u5b58\u7a7a\u95f4\u4e2d\u4e5f\u6709\u865a\u62df\u9875\u7684\u6982\u5ff5\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u865a\u62df\u5185\u5b58\u4e2d\u7684\u865a\u62df\u9875\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\u4e2d\u7684\u7269\u7406\u9875\u3002\u65e0\u8bba\u662f\u5728\u865a\u62df\u5185\u5b58\u7a7a\u95f4\u4e2d\u8fd8\u662f\u5728\u7269\u7406\u5185\u5b58\u4e2d\uff0c\u5185\u6838\u7ba1\u7406\u5185\u5b58\u7684\u6700\u5c0f\u5355\u4f4d\u90fd\u662f\u9875\u3002 vm_page_prot \u504f\u5411\u4e8e\u5b9a\u4e49\u5e95\u5c42\u5185\u5b58\u7ba1\u7406\u67b6\u6784\u4e2d\u9875\u8fd9\u4e00\u7ea7\u522b\u7684\u8bbf\u95ee\u63a7\u5236\u6743\u9650\uff0c\u5b83\u53ef\u4ee5\u76f4\u63a5\u5e94\u7528\u5728\u5e95\u5c42\u9875\u8868\u4e2d\uff0c\u5b83\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u6982\u5ff5\u3002 \u865a\u62df\u5185\u5b58\u533a\u57df VMA \u7531\u8bb8\u591a\u7684\u865a\u62df\u9875 (page) \u7ec4\u6210\uff0c\u6bcf\u4e2a\u865a\u62df\u9875\u9700\u8981\u7ecf\u8fc7\u9875\u8868\u7684\u8f6c\u6362\u624d\u80fd\u627e\u5230\u5bf9\u5e94\u7684\u7269\u7406\u9875\u9762\u3002\u9875\u8868\u4e2d\u5173\u4e8e\u5185\u5b58\u9875\u7684\u8bbf\u95ee\u6743\u9650\u5c31\u662f\u7531 vm_page_prot \u51b3\u5b9a\u7684\u3002 vm_flags \u5219\u504f\u5411\u4e8e\u5b9a\u4e8e\u6574\u4e2a\u865a\u62df\u5185\u5b58\u533a\u57df\u7684\u8bbf\u95ee\u6743\u9650\u4ee5\u53ca\u884c\u4e3a\u89c4\u8303\u3002 \u63cf\u8ff0\u7684\u662f\u865a\u62df\u5185\u5b58\u533a\u57df\u4e2d\u7684\u6574\u4f53\u4fe1\u606f\uff0c\u800c\u4e0d\u662f\u865a\u62df\u5185\u5b58\u533a\u57df\u4e2d\u5177\u4f53\u7684\u67d0\u4e2a\u72ec\u7acb\u9875\u9762\u3002\u5b83\u662f\u4e00\u4e2a\u62bd\u8c61\u7684\u6982\u5ff5\u3002\u53ef\u4ee5\u901a\u8fc7 vma->vm_page_prot = vm_get_page_prot(vma->vm_flags) \u5b9e\u73b0\u5230\u5177\u4f53\u9875\u9762\u8bbf\u95ee\u6743\u9650 vm_page_prot \u7684\u8f6c\u6362 \u4e0b\u9762\u7b14\u8005\u5217\u4e3e\u4e00\u4e9b\u5e38\u7528\u5230\u7684 vm_flags \u65b9\u4fbf\u5927\u5bb6\u6709\u4e00\u4e2a\u76f4\u89c2\u7684\u611f\u53d7\uff1a vm_flags \u8bbf\u95ee\u6743\u9650 VM_READ \u53ef\u8bfb VM_WRITE \u53ef\u5199 VM_EXEC \u53ef\u6267\u884c VM_SHARD \u53ef\u591a\u8fdb\u7a0b\u4e4b\u95f4\u5171\u4eab VM_IO \u53ef\u6620\u5c04\u81f3\u8bbe\u5907 IO \u7a7a\u95f4 VM_RESERVED \u5185\u5b58\u533a\u57df\u4e0d\u53ef\u88ab\u6362\u51fa VM_SEQ_READ \u5185\u5b58\u533a\u57df\u53ef\u80fd\u88ab\u987a\u5e8f\u8bbf\u95ee VM_RAND_READ \u5185\u5b58\u533a\u57df\u53ef\u80fd\u88ab\u968f\u673a\u8bbf\u95ee VM_READ\uff0cVM_WRITE\uff0cVM_EXEC \u5b9a\u4e49\u4e86\u865a\u62df\u5185\u5b58\u533a\u57df\u662f\u5426\u53ef\u4ee5\u88ab\u8bfb\u53d6\uff0c\u5199\u5165\uff0c\u6267\u884c\u7b49\u6743\u9650\u3002 \u6bd4\u5982 \u4ee3\u7801\u6bb5\u8fd9\u5757\u5185\u5b58\u533a\u57df\u7684\u6743\u9650\u662f\u53ef\u8bfb\uff0c\u53ef\u6267\u884c\uff0c\u4f46\u662f\u4e0d\u53ef\u5199 \u3002 \u6570\u636e\u6bb5\u5177\u6709\u53ef\u8bfb\u53ef\u5199\u7684\u6743\u9650\u4f46\u662f\u4e0d\u53ef\u6267\u884c \u3002\u5806\u5219\u5177\u6709\u53ef\u8bfb\u53ef\u5199\uff0c\u53ef\u6267\u884c\u7684\u6743\u9650\uff08Java \u4e2d\u7684\u5b57\u8282\u7801\u5b58\u50a8\u5728\u5806\u4e2d\uff0c\u6240\u4ee5\u9700\u8981\u53ef\u6267\u884c\u6743\u9650\uff09\uff0c\u6808\u4e00\u822c\u662f\u53ef\u8bfb\u53ef\u5199\u7684\u6743\u9650\uff0c\u4e00\u822c\u5f88\u5c11\u6709\u53ef\u6267\u884c\u6743\u9650\u3002\u800c\u6587\u4ef6\u6620\u5c04\u4e0e\u533f\u540d\u6620\u5c04\u533a\u5b58\u653e\u4e86\u5171\u4eab\u94fe\u63a5\u5e93\uff0c\u6240\u4ee5\u4e5f\u9700\u8981\u53ef\u6267\u884c\u7684\u6743\u9650\u3002 \u4e8c Linux \u5982\u4f55\u5bf9\u5185\u6838\u7a7a\u95f4\u7684\u865a\u62df\u5185\u5b58\u8fdb\u884c\u7ba1\u7406 1 32 \u548c 64 \u4f4d Linux \u865a\u62df\u7a7a\u95f4\u7684\u6574\u4f53\u5e03\u5c40 2 \u5404\u4e2a zone \u7684\u7528\u9014\u548c\u6c34\u4f4d\u7684\u4f5c\u7528 zone_dma zone_normal zone_high \u6ce8\u610f, \u8fd9\u91cc\u7684 zone_dma \u548c zone_normal \u662f\u76f4\u63a5\u6620\u5c04\u533a\u57df, \u548c\u7269\u7406\u5185\u5b58\u533a\u57df\u662f\u4e00\u4e00\u5bf9\u5e94\u7684 \u5176\u4ed6\u5404\u7c7b zone, \u6bd4\u5982 zone_high \u5c31\u548c\u7269\u7406\u5185\u5b58\u533a\u57df\u4e0d\u662f\u4e00\u4e00\u5bf9\u5e94\u7684. 64 \u4f4d Linux \u4e0a\u4e5f\u662f\u5982\u6b64, \u6709\u76f4\u63a5\u6620\u5c04\u533a\u57df\u548c\u975e\u76f4\u63a5\u6620\u5c04\u533a\u57df \u4e09 Linux \u5982\u4f55\u5bf9\u7269\u7406\u5185\u5b58\u8fdb\u884c\u7ba1\u7406 \u9996\u5148\u4e0a\u6765\u4e09\u79cd\u7269\u7406\u5185\u5b58\u6a21\u578b, \u5e73\u5766\u6a21\u578b\u3001\u975e\u8fde\u7eed\u5185\u5b58\u6a21\u578b\u3001\u7a00\u758f\u5185\u5b58\u6a21\u578b \u518d\u6b21\u662f\u4e24\u79cd\u5185\u5b58\u67b6\u6784, UMA \u548c NUMA. \u7136\u540e\u662f\u300a\u7b2c\u516d\u7ae0 \u7b2c\u4e00\u7bc7\u300b\u63d0\u5230\u7684 Node\u3001Zone\u3001free_area\u3001Page \u4e4b\u95f4\u7684\u5173\u7cfb \u56db \u6587\u4ef6\u6620\u5c04\uff08Page Cache \u7533\u8bf7\u4f7f\u7528\u548c\u91ca\u653e) 1 Page Cache \u662f\u4ec0\u4e48 \u5047\u8bbe\u7cfb\u7edf\u6240\u6709\u5185\u5b58\u90fd\u662f\u4e00\u4e2a\u6570\u7ec4\u7684\u8bdd, \u6570\u7ec4\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a struct page, \u5176\u4e2d\u90e8\u5206\u5143\u7d20\uff08page\uff09\u5c31\u662f Page Cache inode \u662f Page Cache \u7684\u5bbf\u4e3b\uff08host\uff09\uff0c\u5185\u6838\u901a\u8fc7 inode->imapping->i_pages \u6307\u5411\u7684\u6811\uff0c\u7ba1\u7406\u7ef4\u62a4\u7740 Page Cache\u3002 2 \u7528\u4e86 Page Cache \u4e4b\u540e\u6709\u4ec0\u4e48\u597d \u5728\u672c\u673a\u505a\u4e86\u5b9e\u9a8c\uff0c\u6765\u4f53\u4f1a\u4e00\u4e0b Page Cache \u7684\u4f5c\u7528\u3002\u9996\u5148\u751f\u6210\u4e00\u4e2a 1G \u5927\u5c0f\u7684\u6587\u4ef6\uff1a # dd if=/dev/zero of=/root/dd.out bs=4096 count=262144 \u6e05\u7a7a Page Cache\uff1a # sync && echo 3 > /proc/sys/vm/drop_caches \u7edf\u8ba1\u7b2c\u4e00\u6b21\u8bfb\u53d6\u6587\u4ef6\u7684\u8017\u65f6\uff1a # time cat /root/dd.out &> /dev/null real 0m2.097s user 0m0.010s sys 0m0.638s \u518d\u6b64\u8bfb\u53d6\u540c\u4e00\u4e2a\u6587\u4ef6\uff0c\u7531\u4e8e\u7cfb\u7edf\u5df2\u7ecf\u5c06\u8bfb\u53d6\u8fc7\u7684\u6587\u4ef6\u5185\u5bb9\u653e\u5165\u4e86 Page Cache \uff0c\u8fd9\u6b21\u8017\u65f6\u5927\u5927\u7f29\u77ed\uff1a # time cat /root/dd.out &> /dev/null real 0m0.186s user 0m0.004s sys 0m0.182s Page Cache \u4e0d\u4ec5\u80fd\u52a0\u901f\u5bf9\u6587\u4ef6\u5185\u5bb9\u7684\u8bbf\u95ee\uff0c\u5bf9\u5171\u4eab\u5e93\u5efa\u7acb Page Cache\uff0c\u53ef\u4ee5\u5728\u591a\u4e2a\u8fdb\u7a0b\u95f4\u5171\u4eab\uff0c\u907f\u514d\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u5355\u72ec\u52a0\u8f7d\uff0c\u9020\u6210\u5b9d\u8d35\u5185\u5b58\u8d44\u6e90\u7684\u6d6a\u8d39\u3002 3 \u600e\u4e48\u7533\u8bf7\u548c\u91ca\u653e inode \u662f Page Cache \u7684\u5bbf\u4e3b\uff08host\uff09\uff0c\u5185\u6838\u901a\u8fc7 inode->imapping->i_pages \u6307\u5411\u7684\u6811\uff0c\u7ba1\u7406\u7ef4\u62a4\u7740 Page Cache\u3002\u90a3\u4e48\u5185\u6838\u662f\u5982\u4f55\u5b8c\u6210\u5185\u5b58\u6587\u4ef6\u6620\u5c04\uff0c\u76f4\u63a5\u628a\u7f13\u5b58\u4e86\u6587\u4ef6\u5185\u5bb9\u7684 Page Cache \u6620\u5c04\u5230\u8fdb\u7a0b\u865a\u62df\u5185\u5b58\u7a7a\u95f4\u7684\u5462\uff1f \u6211\u4eec\u77e5\u9053\uff0c\u8fdb\u7a0b\u7ed3\u6784\u4f53 task_struct \u4e2d\u7684\u5b57\u6bb5 mm \u6307\u5411\u8be5\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4 mm_struct \uff0c\u800c\u4e00\u6bb5\u865a\u62df\u5185\u5b58\u7531\u7ed3\u6784\u4f53 vm_area_struct \u6240\u63cf\u8ff0\uff0c\u5c06 vm_area_struct \u4e32\u5728\u4e00\u8d77\u7684\u94fe\u8868 mmap \u5c31\u4ee3\u8868\u4e86\u5df2\u7ecf\u7533\u8bf7\u5206\u914d\u7684\u865a\u62df\u5185\u5b58\u3002 \u5982\u679c\u662f\u8fdb\u884c\u5185\u5b58\u6587\u4ef6\u6620\u5c04\uff0c\u90a3\u4e48\u6620\u5c04\u4e86\u6587\u4ef6\u7684\u865a\u62df\u5185\u5b58\u533a\u57df vm_area_struct \uff0c\u5b83\u7684 vm_file \u4f1a\u6307\u5411\u88ab\u6620\u5c04\u7684\u6587\u4ef6\u7ed3\u6784\u4f53 file\u3002file \u8868\u793a\u8fdb\u7a0b\u6253\u5f00\u7684\u6587\u4ef6\uff0c\u5b83\u7684\u6210\u5458 f_mapping \u6307\u5411 address_space\uff0c\u8fd9\u6837\u5c31\u548c\u7ba1\u7406\u6587\u4ef6\u7740 Page Cache \u7684 address_space \u5173\u8054\u4e86\u8d77\u6765\u3002 \u5f53\u7b2c\u4e00\u6b21\u8bbf\u95ee\u6587\u4ef6\u6620\u5c04\u7684\u865a\u62df\u5185\u5b58\u533a\u57df\u65f6\uff0c\u8fd9\u6bb5\u865a\u62df\u5185\u5b58\u5e76\u6ca1\u6709\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\uff0c\u8fd9\u65f6\u4f1a\u89e6\u53d1\u7f3a\u9875\u4e2d\u65ad\u3002\u5185\u6838\u5728\u5904\u7406\u7f3a\u9875\u4e2d\u65ad\u65f6\uff0c\u53d1\u73b0\u4ee3\u8868\u8fd9\u6bb5\u865a\u62df\u5185\u5b58\u7684 vm_area_struct \u6709\u5173\u8054\u7684\u6587\u4ef6\uff0c\u5373 vm_file \u5b57\u6bb5\u6307\u5411\u4e00\u4e2a\u6587\u4ef6\u7ed3\u6784\u4f53 file\u3002\u5185\u6838\u62ff\u5230\u8be5\u6587\u4ef6\u7684 address_space\uff0c\u6839\u636e\u8981\u8bbf\u95ee\u5185\u5bb9\u7684\u9875\u504f\u79fb\u91cf\uff0c\u5bf9 address_space->i_pages \u6307\u5411\u7684 xarray \u6811\u8fdb\u884c\u67e5\u627e\u3002\u8fd9\u9897\u6811\u4e0a\u6302\u7684\u90fd\u662f\u9875\u504f\u79fb\u91cf\u5bf9\u5e94\u7684\u5185\u5b58\u9875\uff0c\u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u8bf4\u660e\u6587\u4ef6\u5185\u5bb9\u8fd8\u6ca1\u52a0\u8f7d\u8fdb\u5185\u5b58\uff0c\u5c31\u4f1a\u5206\u914d\u5185\u5b58\u9875\uff0c\u5c06\u6587\u4ef6\u5185\u5bb9\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u628a\u5185\u5b58\u9875\u6302\u5728 xarray \u6811\u4e0a\u3002\u4e0b\u6b21\u518d\u8bbf\u95ee\u540c\u6837\u7684\u9875\u504f\u79fb\u91cf\u65f6\uff0c\u6587\u4ef6\u5185\u5bb9\u5df2\u7ecf\u5728\u6811\u4e0a\uff0c\u53ef\u76f4\u63a5\u8fd4\u56de\u3002 address_space->i_pages \u6307\u5411\u7684\u6811\u5c31\u662f\u5185\u6838\u7ba1\u7406\u7684 Page Cache\u3002 \u5c06\u6587\u4ef6\u5185\u5bb9\u52a0\u8f7d\u5230 Page Cache \u540e\uff0c\u5185\u6838\u5c31\u53ef\u4ee5\u586b\u5199\u8fdb\u7a0b\u76f8\u5173\u7684\u9875\u8868\u9879\uff0c\u5c06\u8fd9\u5757\u6587\u4ef6\u6620\u5c04\u7684\u865a\u62df\u5730\u5740\u533a\u57df\uff0c\u76f4\u63a5\u6620\u5c04\u5230 Page Cache \u9875\uff0c\u5b8c\u6210\u7f3a\u9875\u4e2d\u65ad\u7684\u5904\u7406\u3002 \u5f53\u5185\u5b58\u7d27\u5f20\u9700\u8981\u56de\u6536 Page Cache \u65f6\uff0c\u5185\u6838\u9700\u8981\u77e5\u9053\u8fd9\u4e9b Page Cache \u9875\u6620\u5c04\u5230\u4e86\u54ea\u4e9b\u8fdb\u7a0b\uff0c\u8fd9\u6837\u624d\u80fd\u4fee\u6539\u8fdb\u7a0b\u7684\u9875\u8868\uff0c\u89e3\u9664\u865a\u62df\u5185\u5b58\u548c\u7269\u7406\u5185\u5b58\u7684\u6620\u5c04\u3002\u6211\u4eec\u77e5\u9053\uff0c\u540c\u4e00\u4e2a\u6587\u4ef6\u53ef\u4ee5\u6620\u5c04\u5230\u591a\u4e2a\u8fdb\u7a0b\u7a7a\u95f4\uff0c\u6240\u4ee5\u9700\u8981\u4fdd\u5b58\u53cd\u5411\u6620\u5c04\u5173\u7cfb\uff0c\u5373\u6839\u636e Page Cache \u9875\u627e\u5230\u8fdb\u7a0b\u3002 Page Cache \u9875\u7684\u53cd\u5411\u6620\u5c04\u5173\u7cfb\u4fdd\u5b58\u5728 address_space \u7ef4\u62a4\u7684\u53e6\u4e00\u9897\u6811 i_mmap\u3002address_space->i_mmap \u662f\u4e00\u4e2a\u4f18\u5148\u67e5\u627e\u6811\uff08Priority Search Tree\uff09\uff0c\u5173\u8054\u4e86\u8fd9\u4e2a\u6587\u4ef6 Page Cache \u9875\u7684 vm_area_struct \u5c31\u6302\u5728\u8fd9\u68f5\u6811\u4e0a\uff0c\u800c\u8fd9\u4e9b vm_area_struct \u90fd\u5c06\u6307\u5411\u5404\u81ea\u7684\u8fdb\u7a0b\u7a7a\u95f4\u63cf\u8ff0\u7b26 mm_struct\uff0c\u4ece\u800c\u5efa\u7acb\u4e86 Page Cache \u9875\u5230\u8fdb\u7a0b\u7684\u8054\u7cfb\u3002 \u5f53\u9700\u8981\u89e3\u9664\u4e00\u4e2a Page Cache \u9875\u7684\u6620\u5c04\u65f6\uff0c\u5229\u7528 address_space->i_mmap \u6307\u5411\u7684\u6811\uff0c\u67e5\u627e Page Cache \u9875\u6620\u5c04\u5230\u54ea\u4e9b\u8fdb\u7a0b\u7684\u54ea\u4e9b vm_area_struct\uff0c\u4ece\u800c\u786e\u5b9a\u9700\u8981\u4fee\u6539\u7684\u8fdb\u7a0b\u9875\u8868\u9879\u5185\u5bb9\u3002 \u7b80\u5355\u603b\u7ed3\u4e00\u4e0b\uff0c\u4e00\u4e2a inode \u5bf9\u5e94\u7684 address_space \u4e3b\u8981\u7ba1\u7406\u7740\u4e24\u9897\u6811\uff1ai_pages \u6307\u5411\u7684 xarray \u6811 \uff0c\u7ef4\u62a4\u7740\u7684\u6240\u6709 Page Cache \u9875\uff1b i_mmap \u6307\u5411\u7684 PST \u6811 \uff0c\u7ef4\u62a4\u7740\u6587\u4ef6\u6620\u5c04\u6240\u5f62\u6210\u7684 vm_area_struct \u865a\u62df\u5185\u5b58\u533a\u57df\uff0c\u7528\u6765\u5728\u91ca\u653e Page Cache \u9875\u65f6\uff0c\u67e5\u627e\u6620\u5c04\u4e86\u8be5\u6587\u4ef6\u7684\u8fdb\u7a0b\u3002\u5982\u679c\u6587\u4ef6\u6ca1\u6709\u88ab\u6620\u5c04\u5230\u8fdb\u7a0b\u7a7a\u95f4\uff0c\u90a3\u4e48 i_mmap \u5bf9\u5e94\u7684 PST \u6811\u4e3a\u7a7a\u3002 \u53c2\u8003 \u4e00\u6b65\u4e00\u56fe\u5e26\u4f60\u6df1\u5165\u7406\u89e3 Linux \u865a\u62df\u5185\u5b58\u7ba1\u7406 \u4e00\u6b65\u4e00\u56fe\u5e26\u4f60\u6df1\u5165\u7406\u89e3 Linux \u7269\u7406\u5185\u5b58\u7ba1\u7406","title":"\u7b2c\u516b\u7bc7 Linux\u5185\u5b58\u7ba1\u7406\u5347\u7ea7\u7bc7"},{"location":"chapter_6/8_linux_mm_update/#_1","text":"","title":"\u6982\u8ff0"},{"location":"chapter_6/8_linux_mm_update/#linux","text":"","title":"\u4e00 Linux \u5982\u4f55\u5bf9\u7528\u6237\u7a7a\u95f4\u7684\u865a\u62df\u5185\u5b58\u8fdb\u884c\u7ba1\u7406"},{"location":"chapter_6/8_linux_mm_update/#1","text":"\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u662f\u7ebf\u6027\u7684\uff0c\u4f7f\u7528\u7ed3\u6784\u4f53 vm_area_struct \u6765\u63cf\u8ff0\u3002\u5185\u6838\u5c06\u6bcf\u4e00\u6bb5\u5177\u6709\u76f8\u540c\u5c5e\u6027\u7684\u5185\u5b58\u533a\u57df\u5f53\u4f5c\u4e00\u4e2a vm_area_struct \u8fdb\u884c\u7ba1\u7406\uff0c\u6bcf\u4e2a vm_area_struct \u662f\u4e00\u4e2a\u8fde\u7eed\u7684\u865a\u62df\u5730\u5740\u8303\u56f4\uff0c\u8fd9\u4e9b\u533a\u57df\u4e0d\u4f1a\u4e92\u76f8\u91cd\u53e0\u3002 mm_struct \u91cc\u9762\u6709\u4e00\u4e2a\u5355\u94fe\u8868 mmap\uff0c\u7528\u4e8e\u5c06 vm_area_struct \u4e32\u8054\u8d77\u6765\uff0c\u53e6\u5916\u8fd8\u6709\u4e00\u9897\u7ea2\u9ed1\u6811 mm_rb \uff0cvm_area_struct \u6839\u636e\u8d77\u59cb\u5730\u5740\u6302\u5728\u8fd9\u9897\u6811\u4e0a\u3002\u4f7f\u7528\u7ea2\u9ed1\u6811\u53ef\u4ee5\u6839\u636e\u5730\u5740\uff0c\u5feb\u901f\u67e5\u627e\u4e00\u4e2a\u5185\u5b58\u533a\u57df\u3002 vm_area_struct \u53ef\u4ee5\u76f4\u63a5\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\uff0c\u4e5f\u53ef\u4ee5\u5173\u8054\u6587\u4ef6\u3002 \u5982\u679c vm_area_struct \u662f\u6587\u4ef6\u6620\u5c04\uff0c\u7531\u6210\u5458 vm_file \u6307\u5411\u5bf9\u5e94\u7684\u6587\u4ef6\u6307\u9488\u3002\u4e00\u4e2a\u6ca1\u6709\u5173\u8054\u6587\u4ef6\u7684 vm_area_struct \u662f\u533f\u540d\u5185\u5b58\u3002 \u5f00\u53d1\u8005\u4f7f\u7528 malloc \u7b49 glibc \u5e93\u51fd\u6570\u5206\u914d\u5185\u5b58\u7684\u65f6\u5019\uff0c\u4e0d\u662f\u76f4\u63a5\u5206\u914d\u7269\u7406\u5185\u5b58\uff0c\u800c\u662f\u5728\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u7a7a\u95f4\u4e2d\u7533\u8bf7\u4e00\u6bb5\u865a\u62df\u5185\u5b58\uff0c\u751f\u6210\u76f8\u5e94\u7684\u6570\u636e\u7ed3\u6784 vm_area_struct \uff0c\u7136\u540e\u5c06\u5b83\u63d2\u8fdb mm_struct \u7684\u94fe\u8868 mmap\uff0c\u540c\u65f6\u6302\u5728\u7ea2\u9ed1\u6811 mm_rb \u4e0a\uff0c\u5c31\u7b97\u5b8c\u6210\u4e86\u5de5\u4f5c\uff0c\u6839\u672c\u6ca1\u6709\u6d89\u53ca\u5230\u7269\u7406\u5185\u5b58\u7684\u5206\u914d\u3002\u53ea\u6709\u5f53\u7b2c\u4e00\u6b21\u5bf9\u8fd9\u5757\u865a\u62df\u5185\u5b58\u8fdb\u884c\u8bfb\u5199\u65f6\uff0c\u53d1\u73b0\u8be5\u5185\u5b58\u533a\u57df\u6ca1\u6709\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\uff0c\u8fd9\u65f6\u4f1a\u89e6\u53d1\u7f3a\u9875\u4e2d\u65ad\uff0c\u7136\u540e\u7531\u5185\u6838\u586b\u5199\u9875\u8868\uff0c\u5b8c\u6210\u865a\u62df\u5185\u5b58\u5230\u7269\u7406\u5185\u5b58\u7684\u6620\u5c04\u3002 \u5f53\u5f00\u53d1\u8005\u4f7f\u7528 mmap \u8fdb\u884c\u6587\u4ef6\u6620\u5c04\u65f6\uff0c\u5185\u6838\u6839\u636e vm_area_struct \u4e2d\u4ee3\u8868\u6587\u4ef6\u6620\u5c04\u5173\u7cfb vm_file\uff0c\u5c06\u6587\u4ef6\u5185\u5bb9\u4ece\u78c1\u76d8\u52a0\u8f7d\u5230\u7269\u7406\u5185\u5b58\uff0c\u4e5f\u5c31\u662f Page Cache \u4e2d\uff0c\u6700\u540e\u5efa\u7acb\u8fd9\u6bb5\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u7684\u6620\u5c04\u3002 inode \u901a\u8fc7 address_space \u7ba1\u7406\u7740\u6587\u4ef6\u5df2\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f Page Cache\u3002address_space \u7684\u5b57\u6bb5 i_pages \u6307\u5411\u4e00\u68f5 xarray \u6811\uff0c\u4e0e\u8fd9\u4e2a\u6587\u4ef6\u76f8\u5173\u7684 Page Cache \u9875\u90fd\u6302\u5728\u8fd9\u9897\u6811\u4e0a\u3002\u6211\u4eec\u5728\u8bbf\u95ee\u6587\u4ef6\u5185\u5bb9\u7684\u65f6\u5019\uff0c\u6839\u636e\u6307\u5b9a\u6587\u4ef6\u548c\u76f8\u5e94\u7684\u9875\u504f\u79fb\u91cf\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7 xarray \u6811\u5feb\u901f\u5224\u65ad\u8be5\u9875\u662f\u5426\u5df2\u7ecf\u5728 Page Cache \u4e2d\u3002\u5982\u679c\u8be5\u9875\u5b58\u5728\uff0c\u8bf4\u660e\u6587\u4ef6\u5185\u5bb9\u5df2\u7ecf\u88ab\u8bfb\u53d6\u5230\u4e86\u5185\u5b58\uff0c\u4e5f\u5c31\u662f\u5b58\u5728\u4e8e Page Cache \u4e2d\uff1b\u5982\u679c\u8be5\u9875\u4e0d\u5b58\u5728\uff0c\u5c31\u8bf4\u660e\u5185\u5bb9\u4e0d\u5728 Page Cache \u4e2d\uff0c\u9700\u8981\u4ece\u78c1\u76d8\u4e2d\u53bb\u8bfb\u53d6\u3002 \u7531\u4e8e\u6587\u4ef6\u548c inode \u4e00\u4e00\u5bf9\u5e94\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a inode \u662f Page Cache \u7684\u5bbf\u4e3b\uff08host\uff09\uff0c\u5185\u6838\u901a\u8fc7 inode->imapping->i_pages \u6307\u5411\u7684\u6811\uff0c\u7ba1\u7406\u7ef4\u62a4\u7740 Page Cache \u3002 \u4e00\u4e2a\u6587\u4ef6(inode)\u53ea\u80fd\u6709 \u4e00\u4e2a address_space \u6570\u636e\u7ed3\u6784, \u8868\u793a Page Cache \u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\uff08\u5047\u8bbe Page Cache \u662f\u6709\u591a\u4e2a\u5b9e\u4f8b\u7ec4\u6210, \u5206\u4e24\u5c42\u770b\uff0c\u4e0a\u5c42\u7684\u5355\u4e2a\u5b9e\u4f8b\u5c31\u662f\u4e00\u4e2a address_space \u5b9e\u4f8b\uff0c\u5e95\u5c42\u7684\u5355\u4e2a\u5b9e\u4f8b\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a struct page)","title":"1 \u6570\u636e\u7ed3\u6784"},{"location":"chapter_6/8_linux_mm_update/#2","text":"","title":"2 \u5173\u4e8e\u865a\u62df\u5185\u5b58\u7a7a\u95f4\u7684\u6743\u9650"},{"location":"chapter_6/8_linux_mm_update/#3","text":"vm_page_prot \u548c vm_flags \u90fd\u662f\u7528\u6765\u6807\u8bb0 vm_area_struct \u7ed3\u6784\u8868\u793a\u7684\u8fd9\u5757\u865a\u62df\u5185\u5b58\u533a\u57df\u7684\u8bbf\u95ee\u6743\u9650\u548c\u884c\u4e3a\u89c4\u8303\u3002 \u4e0a\u8fb9\u5c0f\u8282\u4e2d\u6211\u4eec\u4e5f\u63d0\u5230\uff0c\u5185\u6838\u4f1a\u5c06\u6574\u5757\u7269\u7406\u5185\u5b58\u5212\u5206\u4e3a\u4e00\u9875\u4e00\u9875\u5927\u5c0f\u7684\u533a\u57df\uff0c\u4ee5\u9875\u4e3a\u5355\u4f4d\u6765\u7ba1\u7406\u8fd9\u4e9b\u7269\u7406\u5185\u5b58\uff0c\u6bcf\u9875\u5927\u5c0f\u9ed8\u8ba4 4K \u3002\u800c\u865a\u62df\u5185\u5b58\u6700\u7ec8\u4e5f\u662f\u8981\u548c\u7269\u7406\u5185\u5b58\u4e00\u4e00\u6620\u5c04\u8d77\u6765\u7684\uff0c\u6240\u4ee5\u5728\u865a\u62df\u5185\u5b58\u7a7a\u95f4\u4e2d\u4e5f\u6709\u865a\u62df\u9875\u7684\u6982\u5ff5\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u865a\u62df\u5185\u5b58\u4e2d\u7684\u865a\u62df\u9875\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\u4e2d\u7684\u7269\u7406\u9875\u3002\u65e0\u8bba\u662f\u5728\u865a\u62df\u5185\u5b58\u7a7a\u95f4\u4e2d\u8fd8\u662f\u5728\u7269\u7406\u5185\u5b58\u4e2d\uff0c\u5185\u6838\u7ba1\u7406\u5185\u5b58\u7684\u6700\u5c0f\u5355\u4f4d\u90fd\u662f\u9875\u3002 vm_page_prot \u504f\u5411\u4e8e\u5b9a\u4e49\u5e95\u5c42\u5185\u5b58\u7ba1\u7406\u67b6\u6784\u4e2d\u9875\u8fd9\u4e00\u7ea7\u522b\u7684\u8bbf\u95ee\u63a7\u5236\u6743\u9650\uff0c\u5b83\u53ef\u4ee5\u76f4\u63a5\u5e94\u7528\u5728\u5e95\u5c42\u9875\u8868\u4e2d\uff0c\u5b83\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u6982\u5ff5\u3002 \u865a\u62df\u5185\u5b58\u533a\u57df VMA \u7531\u8bb8\u591a\u7684\u865a\u62df\u9875 (page) \u7ec4\u6210\uff0c\u6bcf\u4e2a\u865a\u62df\u9875\u9700\u8981\u7ecf\u8fc7\u9875\u8868\u7684\u8f6c\u6362\u624d\u80fd\u627e\u5230\u5bf9\u5e94\u7684\u7269\u7406\u9875\u9762\u3002\u9875\u8868\u4e2d\u5173\u4e8e\u5185\u5b58\u9875\u7684\u8bbf\u95ee\u6743\u9650\u5c31\u662f\u7531 vm_page_prot \u51b3\u5b9a\u7684\u3002 vm_flags \u5219\u504f\u5411\u4e8e\u5b9a\u4e8e\u6574\u4e2a\u865a\u62df\u5185\u5b58\u533a\u57df\u7684\u8bbf\u95ee\u6743\u9650\u4ee5\u53ca\u884c\u4e3a\u89c4\u8303\u3002 \u63cf\u8ff0\u7684\u662f\u865a\u62df\u5185\u5b58\u533a\u57df\u4e2d\u7684\u6574\u4f53\u4fe1\u606f\uff0c\u800c\u4e0d\u662f\u865a\u62df\u5185\u5b58\u533a\u57df\u4e2d\u5177\u4f53\u7684\u67d0\u4e2a\u72ec\u7acb\u9875\u9762\u3002\u5b83\u662f\u4e00\u4e2a\u62bd\u8c61\u7684\u6982\u5ff5\u3002\u53ef\u4ee5\u901a\u8fc7 vma->vm_page_prot = vm_get_page_prot(vma->vm_flags) \u5b9e\u73b0\u5230\u5177\u4f53\u9875\u9762\u8bbf\u95ee\u6743\u9650 vm_page_prot \u7684\u8f6c\u6362 \u4e0b\u9762\u7b14\u8005\u5217\u4e3e\u4e00\u4e9b\u5e38\u7528\u5230\u7684 vm_flags \u65b9\u4fbf\u5927\u5bb6\u6709\u4e00\u4e2a\u76f4\u89c2\u7684\u611f\u53d7\uff1a vm_flags \u8bbf\u95ee\u6743\u9650 VM_READ \u53ef\u8bfb VM_WRITE \u53ef\u5199 VM_EXEC \u53ef\u6267\u884c VM_SHARD \u53ef\u591a\u8fdb\u7a0b\u4e4b\u95f4\u5171\u4eab VM_IO \u53ef\u6620\u5c04\u81f3\u8bbe\u5907 IO \u7a7a\u95f4 VM_RESERVED \u5185\u5b58\u533a\u57df\u4e0d\u53ef\u88ab\u6362\u51fa VM_SEQ_READ \u5185\u5b58\u533a\u57df\u53ef\u80fd\u88ab\u987a\u5e8f\u8bbf\u95ee VM_RAND_READ \u5185\u5b58\u533a\u57df\u53ef\u80fd\u88ab\u968f\u673a\u8bbf\u95ee VM_READ\uff0cVM_WRITE\uff0cVM_EXEC \u5b9a\u4e49\u4e86\u865a\u62df\u5185\u5b58\u533a\u57df\u662f\u5426\u53ef\u4ee5\u88ab\u8bfb\u53d6\uff0c\u5199\u5165\uff0c\u6267\u884c\u7b49\u6743\u9650\u3002 \u6bd4\u5982 \u4ee3\u7801\u6bb5\u8fd9\u5757\u5185\u5b58\u533a\u57df\u7684\u6743\u9650\u662f\u53ef\u8bfb\uff0c\u53ef\u6267\u884c\uff0c\u4f46\u662f\u4e0d\u53ef\u5199 \u3002 \u6570\u636e\u6bb5\u5177\u6709\u53ef\u8bfb\u53ef\u5199\u7684\u6743\u9650\u4f46\u662f\u4e0d\u53ef\u6267\u884c \u3002\u5806\u5219\u5177\u6709\u53ef\u8bfb\u53ef\u5199\uff0c\u53ef\u6267\u884c\u7684\u6743\u9650\uff08Java \u4e2d\u7684\u5b57\u8282\u7801\u5b58\u50a8\u5728\u5806\u4e2d\uff0c\u6240\u4ee5\u9700\u8981\u53ef\u6267\u884c\u6743\u9650\uff09\uff0c\u6808\u4e00\u822c\u662f\u53ef\u8bfb\u53ef\u5199\u7684\u6743\u9650\uff0c\u4e00\u822c\u5f88\u5c11\u6709\u53ef\u6267\u884c\u6743\u9650\u3002\u800c\u6587\u4ef6\u6620\u5c04\u4e0e\u533f\u540d\u6620\u5c04\u533a\u5b58\u653e\u4e86\u5171\u4eab\u94fe\u63a5\u5e93\uff0c\u6240\u4ee5\u4e5f\u9700\u8981\u53ef\u6267\u884c\u7684\u6743\u9650\u3002","title":"3 \u5b9a\u4e49\u865a\u62df\u5185\u5b58\u533a\u57df\u7684\u8bbf\u95ee\u6743\u9650\u548c\u884c\u4e3a\u89c4\u8303"},{"location":"chapter_6/8_linux_mm_update/#linux_1","text":"","title":"\u4e8c Linux \u5982\u4f55\u5bf9\u5185\u6838\u7a7a\u95f4\u7684\u865a\u62df\u5185\u5b58\u8fdb\u884c\u7ba1\u7406"},{"location":"chapter_6/8_linux_mm_update/#1-32-64-linux","text":"","title":"1 32 \u548c 64 \u4f4d Linux \u865a\u62df\u7a7a\u95f4\u7684\u6574\u4f53\u5e03\u5c40"},{"location":"chapter_6/8_linux_mm_update/#2-zone","text":"zone_dma zone_normal zone_high \u6ce8\u610f, \u8fd9\u91cc\u7684 zone_dma \u548c zone_normal \u662f\u76f4\u63a5\u6620\u5c04\u533a\u57df, \u548c\u7269\u7406\u5185\u5b58\u533a\u57df\u662f\u4e00\u4e00\u5bf9\u5e94\u7684 \u5176\u4ed6\u5404\u7c7b zone, \u6bd4\u5982 zone_high \u5c31\u548c\u7269\u7406\u5185\u5b58\u533a\u57df\u4e0d\u662f\u4e00\u4e00\u5bf9\u5e94\u7684. 64 \u4f4d Linux \u4e0a\u4e5f\u662f\u5982\u6b64, \u6709\u76f4\u63a5\u6620\u5c04\u533a\u57df\u548c\u975e\u76f4\u63a5\u6620\u5c04\u533a\u57df","title":"2 \u5404\u4e2a zone \u7684\u7528\u9014\u548c\u6c34\u4f4d\u7684\u4f5c\u7528"},{"location":"chapter_6/8_linux_mm_update/#linux_2","text":"\u9996\u5148\u4e0a\u6765\u4e09\u79cd\u7269\u7406\u5185\u5b58\u6a21\u578b, \u5e73\u5766\u6a21\u578b\u3001\u975e\u8fde\u7eed\u5185\u5b58\u6a21\u578b\u3001\u7a00\u758f\u5185\u5b58\u6a21\u578b \u518d\u6b21\u662f\u4e24\u79cd\u5185\u5b58\u67b6\u6784, UMA \u548c NUMA. \u7136\u540e\u662f\u300a\u7b2c\u516d\u7ae0 \u7b2c\u4e00\u7bc7\u300b\u63d0\u5230\u7684 Node\u3001Zone\u3001free_area\u3001Page \u4e4b\u95f4\u7684\u5173\u7cfb","title":"\u4e09 Linux \u5982\u4f55\u5bf9\u7269\u7406\u5185\u5b58\u8fdb\u884c\u7ba1\u7406"},{"location":"chapter_6/8_linux_mm_update/#page-cache","text":"","title":"\u56db \u6587\u4ef6\u6620\u5c04\uff08Page Cache \u7533\u8bf7\u4f7f\u7528\u548c\u91ca\u653e)"},{"location":"chapter_6/8_linux_mm_update/#1-page-cache","text":"\u5047\u8bbe\u7cfb\u7edf\u6240\u6709\u5185\u5b58\u90fd\u662f\u4e00\u4e2a\u6570\u7ec4\u7684\u8bdd, \u6570\u7ec4\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a struct page, \u5176\u4e2d\u90e8\u5206\u5143\u7d20\uff08page\uff09\u5c31\u662f Page Cache inode \u662f Page Cache \u7684\u5bbf\u4e3b\uff08host\uff09\uff0c\u5185\u6838\u901a\u8fc7 inode->imapping->i_pages \u6307\u5411\u7684\u6811\uff0c\u7ba1\u7406\u7ef4\u62a4\u7740 Page Cache\u3002","title":"1 Page Cache \u662f\u4ec0\u4e48"},{"location":"chapter_6/8_linux_mm_update/#2-page-cache","text":"\u5728\u672c\u673a\u505a\u4e86\u5b9e\u9a8c\uff0c\u6765\u4f53\u4f1a\u4e00\u4e0b Page Cache \u7684\u4f5c\u7528\u3002\u9996\u5148\u751f\u6210\u4e00\u4e2a 1G \u5927\u5c0f\u7684\u6587\u4ef6\uff1a # dd if=/dev/zero of=/root/dd.out bs=4096 count=262144 \u6e05\u7a7a Page Cache\uff1a # sync && echo 3 > /proc/sys/vm/drop_caches \u7edf\u8ba1\u7b2c\u4e00\u6b21\u8bfb\u53d6\u6587\u4ef6\u7684\u8017\u65f6\uff1a # time cat /root/dd.out &> /dev/null real 0m2.097s user 0m0.010s sys 0m0.638s \u518d\u6b64\u8bfb\u53d6\u540c\u4e00\u4e2a\u6587\u4ef6\uff0c\u7531\u4e8e\u7cfb\u7edf\u5df2\u7ecf\u5c06\u8bfb\u53d6\u8fc7\u7684\u6587\u4ef6\u5185\u5bb9\u653e\u5165\u4e86 Page Cache \uff0c\u8fd9\u6b21\u8017\u65f6\u5927\u5927\u7f29\u77ed\uff1a # time cat /root/dd.out &> /dev/null real 0m0.186s user 0m0.004s sys 0m0.182s Page Cache \u4e0d\u4ec5\u80fd\u52a0\u901f\u5bf9\u6587\u4ef6\u5185\u5bb9\u7684\u8bbf\u95ee\uff0c\u5bf9\u5171\u4eab\u5e93\u5efa\u7acb Page Cache\uff0c\u53ef\u4ee5\u5728\u591a\u4e2a\u8fdb\u7a0b\u95f4\u5171\u4eab\uff0c\u907f\u514d\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u5355\u72ec\u52a0\u8f7d\uff0c\u9020\u6210\u5b9d\u8d35\u5185\u5b58\u8d44\u6e90\u7684\u6d6a\u8d39\u3002","title":"2 \u7528\u4e86 Page Cache \u4e4b\u540e\u6709\u4ec0\u4e48\u597d"},{"location":"chapter_6/8_linux_mm_update/#3_1","text":"inode \u662f Page Cache \u7684\u5bbf\u4e3b\uff08host\uff09\uff0c\u5185\u6838\u901a\u8fc7 inode->imapping->i_pages \u6307\u5411\u7684\u6811\uff0c\u7ba1\u7406\u7ef4\u62a4\u7740 Page Cache\u3002\u90a3\u4e48\u5185\u6838\u662f\u5982\u4f55\u5b8c\u6210\u5185\u5b58\u6587\u4ef6\u6620\u5c04\uff0c\u76f4\u63a5\u628a\u7f13\u5b58\u4e86\u6587\u4ef6\u5185\u5bb9\u7684 Page Cache \u6620\u5c04\u5230\u8fdb\u7a0b\u865a\u62df\u5185\u5b58\u7a7a\u95f4\u7684\u5462\uff1f \u6211\u4eec\u77e5\u9053\uff0c\u8fdb\u7a0b\u7ed3\u6784\u4f53 task_struct \u4e2d\u7684\u5b57\u6bb5 mm \u6307\u5411\u8be5\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4 mm_struct \uff0c\u800c\u4e00\u6bb5\u865a\u62df\u5185\u5b58\u7531\u7ed3\u6784\u4f53 vm_area_struct \u6240\u63cf\u8ff0\uff0c\u5c06 vm_area_struct \u4e32\u5728\u4e00\u8d77\u7684\u94fe\u8868 mmap \u5c31\u4ee3\u8868\u4e86\u5df2\u7ecf\u7533\u8bf7\u5206\u914d\u7684\u865a\u62df\u5185\u5b58\u3002 \u5982\u679c\u662f\u8fdb\u884c\u5185\u5b58\u6587\u4ef6\u6620\u5c04\uff0c\u90a3\u4e48\u6620\u5c04\u4e86\u6587\u4ef6\u7684\u865a\u62df\u5185\u5b58\u533a\u57df vm_area_struct \uff0c\u5b83\u7684 vm_file \u4f1a\u6307\u5411\u88ab\u6620\u5c04\u7684\u6587\u4ef6\u7ed3\u6784\u4f53 file\u3002file \u8868\u793a\u8fdb\u7a0b\u6253\u5f00\u7684\u6587\u4ef6\uff0c\u5b83\u7684\u6210\u5458 f_mapping \u6307\u5411 address_space\uff0c\u8fd9\u6837\u5c31\u548c\u7ba1\u7406\u6587\u4ef6\u7740 Page Cache \u7684 address_space \u5173\u8054\u4e86\u8d77\u6765\u3002 \u5f53\u7b2c\u4e00\u6b21\u8bbf\u95ee\u6587\u4ef6\u6620\u5c04\u7684\u865a\u62df\u5185\u5b58\u533a\u57df\u65f6\uff0c\u8fd9\u6bb5\u865a\u62df\u5185\u5b58\u5e76\u6ca1\u6709\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\uff0c\u8fd9\u65f6\u4f1a\u89e6\u53d1\u7f3a\u9875\u4e2d\u65ad\u3002\u5185\u6838\u5728\u5904\u7406\u7f3a\u9875\u4e2d\u65ad\u65f6\uff0c\u53d1\u73b0\u4ee3\u8868\u8fd9\u6bb5\u865a\u62df\u5185\u5b58\u7684 vm_area_struct \u6709\u5173\u8054\u7684\u6587\u4ef6\uff0c\u5373 vm_file \u5b57\u6bb5\u6307\u5411\u4e00\u4e2a\u6587\u4ef6\u7ed3\u6784\u4f53 file\u3002\u5185\u6838\u62ff\u5230\u8be5\u6587\u4ef6\u7684 address_space\uff0c\u6839\u636e\u8981\u8bbf\u95ee\u5185\u5bb9\u7684\u9875\u504f\u79fb\u91cf\uff0c\u5bf9 address_space->i_pages \u6307\u5411\u7684 xarray \u6811\u8fdb\u884c\u67e5\u627e\u3002\u8fd9\u9897\u6811\u4e0a\u6302\u7684\u90fd\u662f\u9875\u504f\u79fb\u91cf\u5bf9\u5e94\u7684\u5185\u5b58\u9875\uff0c\u5982\u679c\u6ca1\u627e\u5230\uff0c\u5c31\u8bf4\u660e\u6587\u4ef6\u5185\u5bb9\u8fd8\u6ca1\u52a0\u8f7d\u8fdb\u5185\u5b58\uff0c\u5c31\u4f1a\u5206\u914d\u5185\u5b58\u9875\uff0c\u5c06\u6587\u4ef6\u5185\u5bb9\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u628a\u5185\u5b58\u9875\u6302\u5728 xarray \u6811\u4e0a\u3002\u4e0b\u6b21\u518d\u8bbf\u95ee\u540c\u6837\u7684\u9875\u504f\u79fb\u91cf\u65f6\uff0c\u6587\u4ef6\u5185\u5bb9\u5df2\u7ecf\u5728\u6811\u4e0a\uff0c\u53ef\u76f4\u63a5\u8fd4\u56de\u3002 address_space->i_pages \u6307\u5411\u7684\u6811\u5c31\u662f\u5185\u6838\u7ba1\u7406\u7684 Page Cache\u3002 \u5c06\u6587\u4ef6\u5185\u5bb9\u52a0\u8f7d\u5230 Page Cache \u540e\uff0c\u5185\u6838\u5c31\u53ef\u4ee5\u586b\u5199\u8fdb\u7a0b\u76f8\u5173\u7684\u9875\u8868\u9879\uff0c\u5c06\u8fd9\u5757\u6587\u4ef6\u6620\u5c04\u7684\u865a\u62df\u5730\u5740\u533a\u57df\uff0c\u76f4\u63a5\u6620\u5c04\u5230 Page Cache \u9875\uff0c\u5b8c\u6210\u7f3a\u9875\u4e2d\u65ad\u7684\u5904\u7406\u3002 \u5f53\u5185\u5b58\u7d27\u5f20\u9700\u8981\u56de\u6536 Page Cache \u65f6\uff0c\u5185\u6838\u9700\u8981\u77e5\u9053\u8fd9\u4e9b Page Cache \u9875\u6620\u5c04\u5230\u4e86\u54ea\u4e9b\u8fdb\u7a0b\uff0c\u8fd9\u6837\u624d\u80fd\u4fee\u6539\u8fdb\u7a0b\u7684\u9875\u8868\uff0c\u89e3\u9664\u865a\u62df\u5185\u5b58\u548c\u7269\u7406\u5185\u5b58\u7684\u6620\u5c04\u3002\u6211\u4eec\u77e5\u9053\uff0c\u540c\u4e00\u4e2a\u6587\u4ef6\u53ef\u4ee5\u6620\u5c04\u5230\u591a\u4e2a\u8fdb\u7a0b\u7a7a\u95f4\uff0c\u6240\u4ee5\u9700\u8981\u4fdd\u5b58\u53cd\u5411\u6620\u5c04\u5173\u7cfb\uff0c\u5373\u6839\u636e Page Cache \u9875\u627e\u5230\u8fdb\u7a0b\u3002 Page Cache \u9875\u7684\u53cd\u5411\u6620\u5c04\u5173\u7cfb\u4fdd\u5b58\u5728 address_space \u7ef4\u62a4\u7684\u53e6\u4e00\u9897\u6811 i_mmap\u3002address_space->i_mmap \u662f\u4e00\u4e2a\u4f18\u5148\u67e5\u627e\u6811\uff08Priority Search Tree\uff09\uff0c\u5173\u8054\u4e86\u8fd9\u4e2a\u6587\u4ef6 Page Cache \u9875\u7684 vm_area_struct \u5c31\u6302\u5728\u8fd9\u68f5\u6811\u4e0a\uff0c\u800c\u8fd9\u4e9b vm_area_struct \u90fd\u5c06\u6307\u5411\u5404\u81ea\u7684\u8fdb\u7a0b\u7a7a\u95f4\u63cf\u8ff0\u7b26 mm_struct\uff0c\u4ece\u800c\u5efa\u7acb\u4e86 Page Cache \u9875\u5230\u8fdb\u7a0b\u7684\u8054\u7cfb\u3002 \u5f53\u9700\u8981\u89e3\u9664\u4e00\u4e2a Page Cache \u9875\u7684\u6620\u5c04\u65f6\uff0c\u5229\u7528 address_space->i_mmap \u6307\u5411\u7684\u6811\uff0c\u67e5\u627e Page Cache \u9875\u6620\u5c04\u5230\u54ea\u4e9b\u8fdb\u7a0b\u7684\u54ea\u4e9b vm_area_struct\uff0c\u4ece\u800c\u786e\u5b9a\u9700\u8981\u4fee\u6539\u7684\u8fdb\u7a0b\u9875\u8868\u9879\u5185\u5bb9\u3002 \u7b80\u5355\u603b\u7ed3\u4e00\u4e0b\uff0c\u4e00\u4e2a inode \u5bf9\u5e94\u7684 address_space \u4e3b\u8981\u7ba1\u7406\u7740\u4e24\u9897\u6811\uff1ai_pages \u6307\u5411\u7684 xarray \u6811 \uff0c\u7ef4\u62a4\u7740\u7684\u6240\u6709 Page Cache \u9875\uff1b i_mmap \u6307\u5411\u7684 PST \u6811 \uff0c\u7ef4\u62a4\u7740\u6587\u4ef6\u6620\u5c04\u6240\u5f62\u6210\u7684 vm_area_struct \u865a\u62df\u5185\u5b58\u533a\u57df\uff0c\u7528\u6765\u5728\u91ca\u653e Page Cache \u9875\u65f6\uff0c\u67e5\u627e\u6620\u5c04\u4e86\u8be5\u6587\u4ef6\u7684\u8fdb\u7a0b\u3002\u5982\u679c\u6587\u4ef6\u6ca1\u6709\u88ab\u6620\u5c04\u5230\u8fdb\u7a0b\u7a7a\u95f4\uff0c\u90a3\u4e48 i_mmap \u5bf9\u5e94\u7684 PST \u6811\u4e3a\u7a7a\u3002","title":"3 \u600e\u4e48\u7533\u8bf7\u548c\u91ca\u653e"},{"location":"chapter_6/8_linux_mm_update/#_2","text":"\u4e00\u6b65\u4e00\u56fe\u5e26\u4f60\u6df1\u5165\u7406\u89e3 Linux \u865a\u62df\u5185\u5b58\u7ba1\u7406 \u4e00\u6b65\u4e00\u56fe\u5e26\u4f60\u6df1\u5165\u7406\u89e3 Linux \u7269\u7406\u5185\u5b58\u7ba1\u7406","title":"\u53c2\u8003"},{"location":"chapter_6/9_page_cache_and_buffer_cache/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3 PageCache \u548c BufferCache \u7684\u4e00\u4e9b\u6f14\u8fdb\u603b\u7ed3\u548c\u73b0\u72b6 PageCache \u662f\u4ec0\u4e48? \u53ef\u4ee5\u53c2\u8003 \u300a\u7b2c\u516d\u7ae0 \u7b2c 8 \u7bc7\u300b , \u8fd9\u91cc\u7b80\u8ff0\u4e00\u4e0b\uff1a \u5047\u8bbe\u5185\u5b58\u662f\u7531\u4e00\u4e2a\u8d85\u5927\u6570\u7ec4\u7ec4\u6210\uff0c\u6570\u7ec4\u91cc\u6bcf\u4e2a\u5143\u7d20\u5c31\u662f\u4e00\u4e2a struct page , \u90a3\u4e48\u5176\u4e2d\u67d0\u4e9b page \u5c31\u6784\u6210\u4e86 PageCache . \u5177\u4f53\u4e00\u4e2a\u4e2a page \u7531\u6bcf\u4e2a inode \u5bf9\u5e94\u7684 address_space \u7ed3\u6784\u4f53\u7684 xarray \u6811\u7ba1\u7406(\u5177\u4f53\u662f address_space->i_pages \u6210\u5458). BufferCache \u662f\u4ec0\u4e48? Linux2.6 \u4e4b\u540e, \u5176\u5b9e\u5c31\u662f struct buffer_head \u7ed3\u6784\u4f53, buffer_head \u7684 b_page \u6210\u5458\u6307\u5411\u5bf9\u5e94\u7684 page \u7ed3\u6784\u4f53, BufferCache \u7684\u5177\u4f53\u5185\u5bb9\u8fd8\u662f\u5b58\u653e\u5728 page \u4e2d. buffer_head \u662f\u78c1\u76d8\u5757\u7684\u4e00\u4e2a\u62bd\u8c61,\u4e00\u4e2a buffer_head \u5bf9\u5e94\u4e00\u4e2a\u78c1\u76d8\u5757 BufferCache \u6709\u4ec0\u4e48\u4f5c\u7528? \u4ee5\u88f8\u8bbe\u5907\u6216\u5206\u533a\u4e3a\u80cc\u666f\u8fdb\u884c\u7f13\u5b58\uff0c\u4e3b\u8981\u9488\u5bf9\u4e24\u79cd\u573a\u666f: 1 \u5e94\u7528\u76f4\u63a5\u8bbf\u95ee\u88f8\u5206\u533a, \u6bd4\u5982(cat /dev/sda1 > /dev/null\uff0c\u8fd9\u6837/dev/sda1 \u5185\u5bb9\u8fdb\u5165 buffers) 2 \u6587\u4ef6\u7cfb\u7edf\u672c\u8eab\u7684\u5b9e\u73b0\u662f\u4f1a\u628a/dev/sda1 \u5f53\u6210\u4e00\u4e2a\u88f8\u5206\u533a \u4e00 Linux 2.6 \u4e4b\u540e\u7684\u5173\u7cfb \u4ecb\u4e8e\u4e0a\u8ff0 Page Cache\u3001Buffer Cache \u5206\u79bb\u8bbe\u8ba1\u7684\u5f0a\u7aef\uff0cLinux-2.4 \u7248\u672c\u4e2d\u5bf9 Page Cache\u3001Buffer Cache \u7684\u5b9e\u73b0\u8fdb\u884c\u4e86\u878d\u5408\uff0c\u878d\u5408\u540e\u7684 Buffer Cache \u4e0d\u518d\u4ee5\u72ec\u7acb\u7684\u5f62\u5f0f\u5b58\u5728\uff0cBuffer Cache \u7684\u5185\u5bb9\uff0c\u76f4\u63a5\u5b58\u5728\u4e8e Page Cache \u4e2d\uff0c\u540c\u65f6\uff0c\u4fdd\u7559\u4e86\u5bf9 Buffer Cache \u7684\u63cf\u8ff0\u7b26\u5355\u5143\uff1a buffer_head page \u7ed3\u6784\u4e2d\uff0c\u901a\u8fc7 buffers \u5b57\u6bb5\u662f\u5426\u4e3a\u7a7a\uff0c\u6765\u5224\u5b9a\u8fd9\u4e2a Page \u662f\u5426\u4e0e\u4e00\u7ec4 Buffer Cache \u5173\u8054\uff08\u5728\u540e\u7eed\u7684\u6f14\u8fdb\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e2a\u5224\u65ad\uff0c\u8f6c\u53d8\u4e3a\u7531 private \u5b57\u6bb5\u6765\u5224\u5b9a\uff09\u3002 \u800c\u5bf9\u5e94\u7684\uff0c buffer_head \u5219\u589e\u52a0\u4e86\u5b57\u6bb5 b_page \uff0c\u76f4\u63a5\u6307\u5411\u5bf9\u5e94\u7684 page\u3002 \u81f3\u6b64\uff0c\u4e24\u8005\u7684\u5173\u7cfb\u5df2\u7ecf\u76f8\u4e92\u878d\u5408\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4e00\u4e2a\u6587\u4ef6\u7684 PageCache(page)\uff0c\u901a\u8fc7 buffers \u5b57\u6bb5\u80fd\u591f\u975e\u5e38\u5feb\u6377\u7684\u786e\u5b9a\u8be5 page \u5bf9\u5e94\u7684 buffer_head \u4fe1\u606f\uff0c\u8fdb\u800c\u660e\u786e\u8be5 page \u5bf9\u5e94\u7684 device, block \u7b49\u4fe1\u606f\u3002 \u4ece\u903b\u8f91\u4e0a\u6765\u770b\uff0c\u5f53\u9488\u5bf9\u4e00\u4e2a\u6587\u4ef6\u7684 write \u8bf7\u6c42\u8fdb\u5165\u5185\u6838\u65f6\uff0c\u4f1a\u6267\u884c generic_file_write \uff0c\u5728\u8fd9\u4e00\u5c42\uff0c\u901a\u8fc7 inode \u7684 address_space \u7ed3\u6784 mapping \u4f1a\u5206\u914d\u4e00\u4e2a\u65b0\u7684 page \u6765\u4f5c\u4e3a\u5bf9\u5e94\u5199\u5165\u7684 page cache(\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u662f\u4e00\u4e2a\u65b0\u7684\u5199\u5165\uff0c\u4e14\u6570\u636e\u91cf\u4ec5\u4e00\u4e2a page)\uff1a __grab_cache_page \uff0c\u800c\u5728\u5206\u914d\u4e86\u5185\u5b58\u7a7a\u95f4 page \u4e4b\u540e\uff0c\u5219\u901a\u8fc7 prepare_write \uff0c\u6765\u5b8c\u6210\u5bf9\u5e94\u7684 buffer_head \u7684\u6784\u5efa\u3002 prepare_write \u5b9e\u9645\u6267\u884c\u7684\u662f\uff1a __block_prepare_write \uff0c\u5728\u5176\u4e2d\uff0c\u4f1a\u9488\u5bf9\u8be5 page \u5206\u914d\u5bf9\u5e94\u7684 buffer_head( create_empty_buffers )\uff0c\u5e76\u8ba1\u7b97\u5b9e\u9645\u5199\u5165\u7684\u5728 device \u4e0a\u7684\u5177\u4f53\u4f4d\u7f6e\uff1ablocknr\uff0c\u8fdb\u800c\u521d\u59cb\u5316 buffer_head( get_block ) \u5728 create_empty_buffers \u5185\u90e8\uff0c\u5219\u901a\u8fc7 create_buffers \u4ee5\u53ca set_bh_page \u7b49\u4e00\u7cfb\u5217\u64cd\u4f5c\uff0c\u5c06 page \u4e0e buffer_head \u7ec4\u7ec7\u6210\u5982\u524d\u56fe\u6240\u793a\u7684\u901a\u8fc7 buffers\u3001b_page \u7b49\u76f8\u4e92\u5173\u8054\u7684\u5173\u7cfb\u3002 \u901a\u8fc7 create_buffers \u5206\u914d\u4e00\u7ec4\u4e32\u8054\u597d\u7684 buffer_head \u901a\u8fc7 set_bh_page \u5c06\u5404 buffer_head \u5173\u8054\u5230\u5bf9\u5e94\u7684 page\uff0c\u4ee5\u53ca data \u7684\u5177\u4f53\u4f4d\u7f6e \u6b63\u662f\u5982\u4e0a\u7684\u4e00\u7cfb\u5217\u52a8\u4f5c\uff0c\u4f7f\u5f97 Page Cache \u4e0e Buffer Cache(buffer_head)\u76f8\u4e92\u7ed1\u5b9a\u3002\u5bf9\u4e0a\uff0c\u5728\u6587\u4ef6\u8bfb\u5199\u65f6\uff0c\u4ee5 page \u4e3a\u5355\u4f4d\u8fdb\u884c\u5904\u7406\u3002\u800c\u5bf9\u4e0b\uff0c\u5728\u6570\u636e\u5411 device \u8fdb\u884c\u5237\u65b0\u65f6\uff0c\u5219\u53ef\u4ee5\u4ee5 buffer_head(block)\u4e3a\u5355\u4f4d\u8fdb\u884c\u5904\u7406\u3002 \u5728\u540e\u7eed\u7684 linux-2.5 \u7248\u672c\u4e2d\uff0c\u5f15\u5165\u4e86 bio \u7ed3\u6784\u6765\u66ff\u6362\u57fa\u4e8e buffer_head \u7684\u5757\u8bbe\u5907 IO \u64cd\u4f5c\u3002 [\u6ce8\u610f]\uff1a \u8fd9\u91cc\u7684 Page Cache \u4e0e Buffer Cache \u7684\u878d\u5408\uff0c\u662f\u9488\u5bf9\u6587\u4ef6\u8fd9\u4e00\u5c42\u9762\u7684 Page Cache \u4e0e Buffer Cache \u7684\u878d\u5408\u3002\u5bf9\u4e8e\u8de8\u5c42\u7684\uff1aFile \u5c42\u9762\u7684 Page Cache \u548c\u88f8\u8bbe\u5907 Buffer Cache\uff0c\u867d\u7136\u90fd\u7edf\u4e00\u5230\u4e86\u57fa\u4e8e Page \u7684\u5b9e\u73b0\uff0c\u4f46 File \u7684 Page Cache \u548c\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684 Block \u5728\u88f8\u8bbe\u5907\u5c42\u8bbf\u95ee\u7684 Buffer Cache\uff0c\u8fd9\u4e24\u4e2a\u662f\u5b8c\u5168\u72ec\u7acb\u7684 Page\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u7269\u7406\u78c1\u76d8 Block \u4e0a\u7684\u6570\u636e\uff0c\u4ecd\u7136\u5bf9\u5e94\u4e86 Linux \u5185\u6838\u4e2d\u7684\u4e24\u4efd Page\uff0c\u4e00\u4e2a\u662f\u901a\u8fc7\u6587\u4ef6\u5c42\u8bbf\u95ee\u7684 File \u7684 Page Cache(Page Cache)\uff0c\u4e00\u4e2a\u662f\u901a\u8fc7\u88f8\u8bbe\u5907\u5c42\u8bbf\u95ee\u7684 Page Cache(Buffer Cache)\u3002 \u4e8c \u6838\u5fc3\u7ed3\u6784\u4f53 1 buffer_head Linux 6.7\u7248\u672c /* * Historically, a buffer_head was used to map a single block * within a page, and of course as the unit of I/O through the * filesystem and block layers. Nowadays the basic I/O unit * is the bio, and buffer_heads are used for extracting block * mappings (via a get_block_t call), for tracking state within * a page (via a page_mapping) and for wrapping bio submission * for backward compatibility reasons (e.g. submit_bh). */ struct buffer_head { unsigned long b_state; /* buffer state bitmap (see above) */ struct buffer_head *b_this_page;/* circular list of page's buffers */ union { struct page *b_page; /* the page this bh is mapped to */ struct folio *b_folio; /* the folio this bh is mapped to */ }; sector_t b_blocknr; /* start block number */ size_t b_size; /* size of mapping */ char *b_data; /* pointer to data within the page */ struct block_device *b_bdev; bh_end_io_t *b_end_io; /* I/O completion */ void *b_private; /* reserved for b_end_io */ struct list_head b_assoc_buffers; /* associated with another mapping */ struct address_space *b_assoc_map; /* mapping this buffer is associated with */ atomic_t b_count; /* users using this buffer_head */ spinlock_t b_uptodate_lock; /* Used by the first bh in a page, to * serialise IO completion of other * buffers in the page */ }; Linux 3.16\u7248\u672c /* * Historically, a buffer_head was used to map a single block * within a page, and of course as the unit of I/O through the * filesystem and block layers. Nowadays the basic I/O unit * is the bio, and buffer_heads are used for extracting block * mappings (via a get_block_t call), for tracking state within * a page (via a page_mapping) and for wrapping bio submission * for backward compatibility reasons (e.g. submit_bh). */ struct buffer_head { unsigned long b_state; /* buffer state bitmap (see above) */ struct buffer_head *b_this_page;/* circular list of page's buffers */ struct page *b_page; /* the page this bh is mapped to */ sector_t b_blocknr; /* start block number */ size_t b_size; /* size of mapping */ char *b_data; /* pointer to data within the page */ struct block_device *b_bdev; bh_end_io_t *b_end_io; /* I/O completion */ void *b_private; /* reserved for b_end_io */ struct list_head b_assoc_buffers; /* associated with another mapping */ struct address_space *b_assoc_map; /* mapping this buffer is associated with */ atomic_t b_count; /* users using this buffer_head */ }; Linux 2.6\u7248\u672c /* * Historically, a buffer_head was used to map a single block * within a page, and of course as the unit of I/O through the * filesystem and block layers. Nowadays the basic I/O unit * is the bio, and buffer_heads are used for extracting block * mappings (via a get_block_t call), for tracking state within * a page (via a page_mapping) and for wrapping bio submission * for backward compatibility reasons (e.g. submit_bh). */ struct buffer_head { unsigned long b_state; /* buffer state bitmap (see above) */ struct buffer_head *b_this_page;/* circular list of page's buffers */ struct page *b_page; /* the page this bh is mapped to */ sector_t b_blocknr; /* start block number */ size_t b_size; /* size of mapping */ char *b_data; /* pointer to data within the page */ struct block_device *b_bdev; bh_end_io_t *b_end_io; /* I/O completion */ void *b_private; /* reserved for b_end_io */ struct list_head b_assoc_buffers; /* associated with another mapping */ struct address_space *b_assoc_map; /* mapping this buffer is associated with */ atomic_t b_count; /* users using this buffer_head */ }; buffer_head \u662f\u78c1\u76d8\u5757\u7684\u4e00\u4e2a\u62bd\u8c61,\u4e00\u4e2a buffer_head \u5bf9\u5e94\u4e00\u4e2a\u78c1\u76d8\u5757\uff0cbuffer_head \u4e2d\u4fdd\u5b58\u5bf9\u5e94\u7684\u78c1\u76d8\u53f7 buffer_head \u628a page \u4e0e\u78c1\u76d8\u5757\u8054\u7cfb\u8d77\u6765\uff0c\u7531\u4e8e page \u548c\u78c1\u76d8\u5757\u7684\u5927\u5c0f\u53ef\u80fd\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u4e00\u4e2a page \u53ef\u80fd\u7ba1\u7406\u591a\u4e2a buffer_head \u8fd9\u91cc\u5047\u8bbe page \u5927\u5c0f 4K\uff0c\u5757\u5927\u5c0f\u4e3a 1K, buffer_head,page \u548c\u78c1\u76d8\u5757\u5173\u7cfb\u5982\u4e0b\uff1a 2 request \u7ed3\u6784\u4f53 3 bio \u7ed3\u6784\u4f53\u548c\u5199\u78c1\u76d8\u7684\u6574\u4f53\u8fc7\u7a0b \u9996\u5148 submit_bh()\u51fd\u6570\uff0c\u5176\u4f5c\u7528\uff1a\u6839\u636e\u7f13\u51b2\u533a\u9996\u90e8\u7684\u5185\u5bb9\u521b\u5efa\u4e00\u4e2a bio\uff0c\u5728\u8be5\u51fd\u6570\u4e2d\u901a\u8fc7 buffer_head \u4f20\u8fdb\u6765\u7684\u4fe1\u606f\u5bf9 bio \u7684\u4fe1\u606f\u8d4b\u503c\u3002\u5982\u4e0b bio->bi_sector = bh->b_blocknr * (bh->b_size >> 9); //\u6247\u533a\u53f7 bio->bi_bdev = bh->b_bdev; //\u8bbe\u5907\uff0c\u5982\u5206\u533a bio->bi_io_vec[0].bv_page = bh->b_page; //\u5bf9\u5e94\u9875 bio->bi_io_vec[0].bv_len = bh->b_size; //\u5757\u5927\u5c0f bio->bi_io_vec[0].bv_offset = bh_offset(bh); //buffer_head\u6307\u5411\u7684\u7f13\u5b58\u533a\u76f8\u5bf9\u4e8e\u5176\u6240\u5728\u9875\u7684\u504f\u79fb 4 bio \u7ed3\u6784\u4f53\u548c bio_vec \u7ed3\u6784\u4f53\u5173\u7cfb: bio \u548c bio_vec \u7684\u5173\u7cfb\u53ef\u4ee5\u53c2\u8003 \u6587\u4ef6\u8bfb\u5199\uff08BIO\uff09\u6ce2\u6f9c\u58ee\u9614\u7684\u4e00\u751f , \u5982\u4e0b\u56fe: bio \u7684\u5b9a\u4e49\u5982\u4e0b(include/linux/blk_types.h) struct bio_vec { struct page *bv_page; unsigned int bv_len; unsigned int bv_offset; }; struct bio { struct bio *bi_next; /* request queue link */ struct block_device *bi_bdev; struct bvec_iter bi_iter; /* Number of segments in this BIO after * physical address coalescing is performed. */ unsigned int bi_phys_segments; bio_end_io_t *bi_end_io; void *bi_private; unsigned short bi_vcnt; /* how many bio_vec's */ atomic_t bi_cnt; /* pin count */ struct bio_vec *bi_io_vec; /* the actual vec list */ }; \u5b83\u662f\u4e00\u4e2a\u63cf\u8ff0\u786c\u76d8\u91cc\u9762\u7684\u4f4d\u7f6e\u4e0e page cache \u7684\u9875\u5bf9\u5e94\u5173\u7cfb\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6bcf\u4e2a bio \u5bf9\u5e94\u7684\u786c\u76d8\u91cc\u9762\u4e00\u5757\u8fde\u7eed\u7684\u4f4d\u7f6e\uff0c\u6bcf\u4e00\u5757\u786c\u76d8\u91cc\u9762\u8fde\u7eed\u7684\u4f4d\u7f6e\uff0c\u53ef\u80fd\u5bf9\u5e94\u7740 page cache \u7684\u591a\u9875\uff0c\u6216\u8005\u4e00\u9875\uff0c\u6240\u4ee5\u5b83\u91cc\u9762\u4f1a\u6709\u4e00\u4e2a bio_vec *bi_io_vec \u7684\u8868\u3002 \u6211\u4eec\u73b0\u5728\u5047\u8bbe 3 \u79cd\u60c5\u51b5 \u7b2c 1 \u79cd\u60c5\u51b5\u662f page_cache_sync_readahead()\u8981\u8bfb\u7684 0~16KB \u6570\u636e\uff0c\u5728\u786c\u76d8\u91cc\u9762\u6b63\u597d\u662f\u987a\u5e8f\u6392\u5217\u7684(\u662f\u5426\u987a\u5e8f\u6392\u5217\uff0c\u8981\u67e5\u6587\u4ef6\u7cfb\u7edf\uff0c\u5982 ext3\u3001ext4)\uff0cLinux \u4f1a\u4e3a\u8fd9\u4e00\u6b21 4 \u9875\u7684\u8bfb\uff0c\u5206\u914d 1 \u4e2a bio \u5c31\u8db3\u591f\u4e86\uff0c\u5e76\u4e14\u8ba9\u8fd9\u4e2a bio \u91cc\u9762\u5206\u914d 4 \u4e2a bi_io_vec\uff0c\u6307\u5411 4 \u4e2a\u4e0d\u540c\u7684\u5185\u5b58\u9875\uff1a \u7b2c 2 \u79cd\u60c5\u51b5\u662f page_cache_sync_readahead()\u8981\u8bfb\u7684 0~16KB \u6570\u636e\uff0c\u5728\u786c\u76d8\u91cc\u9762\u6b63\u597d\u662f\u5b8c\u5168\u4e0d\u8fde\u7eed\u7684 4 \u5757 (\u662f\u5426\u987a\u5e8f\u6392\u5217\uff0c\u8981\u67e5\u6587\u4ef6\u7cfb\u7edf\uff0c\u5982 ext3\u3001ext4)\uff0cLinux \u4f1a\u4e3a\u8fd9\u4e00\u6b21 4 \u9875\u7684\u8bfb\uff0c\u5206\u914d 4 \u4e2a bio\uff0c\u5e76\u4e14\u8ba9\u8fd9 4 \u4e2a bio \u91cc\u9762\uff0c\u6bcf\u4e2a\u5206\u914d 1 \u4e2a bi_io_vec\uff0c\u6307\u5411 4 \u4e2a\u4e0d\u540c\u7684\u5185\u5b58\u9875\u9762\uff1a \u5f53\u7136\u4f60\u8fd8\u53ef\u4ee5\u6709\u7b2c 3 \u79cd\u60c5\u51b5\uff0c\u6bd4\u5982 0~8KB \u5728\u786c\u76d8\u91cc\u9762\u8fde\u7eed\uff0c8~16KB \u4e0d\u8fde\u7eed\uff0c\u90a3\u53ef\u4ee5\u662f\u8fd9\u6837\u7684: \u56db \u7406\u89e3 free \u547d\u4ee4\u7684\u8f93\u51fa 1 \u73b0\u8c61 \u672c\u7bc7\u6587\u6863\u603b\u7ed3 Linux free \u547d\u4ee4\u5c55\u793a\u7684 buffers \u548c cached \u533a\u522b # free total used free shared buffers cached Mem: 3848656 2983016 865640 5312 324432 2024904 -/+ buffers/cache: 633680 3214976 Swap: 2031612 2 \u7ed3\u8bba buffers \u8868\u793a\u5757\u8bbe\u5907(block device)\u6240\u5360\u7528\u7684\u7f13\u5b58\u9875\uff0c\u5305\u62ec\uff1a\u76f4\u63a5\u8bfb\u5199\u5757\u8bbe\u5907\u3001\u4ee5\u53ca\u6587\u4ef6\u7cfb\u7edf\u5143\u6570\u636e(metadata)\u6bd4\u5982 SuperBlock \u6240\u4f7f\u7528\u7684\u7f13\u5b58\u9875\uff1b cached \u8868\u793a\u666e\u901a\u6587\u4ef6\u6570\u636e\u6240\u5360\u7528\u7684\u7f13\u5b58\u9875, \u4e5f\u5c31\u662f Page Cache . \u8fd9\u91cc\u7a0d\u5fae\u591a\u8bf4\u4e00\u70b9 buffers \u548c cached\u3002Linux 2.4.10 \u5185\u6838\u4e4b\u524d\uff0c\u78c1\u76d8\u7684\u7f13\u5b58\u6709\u4e24\u79cd\uff0c\u5373 Buffer Cache \u548c Page Cache \u3002\u524d\u8005\u7f13\u5b58\u7ba1\u7406\u78c1\u76d8\u6587\u4ef6\u7cfb\u7edf\u65f6\u8bfb\u53d6\u7684\u5757\uff0c\u540e\u8005\u5b58\u653e\u8bbf\u95ee\u5177\u4f53\u6587\u4ef6\u5185\u5bb9\u65f6\u751f\u6210\u7684\u9875\u3002\u5728 2.4.10 \u4e4b\u540e\uff0c Buffer Cache \u8fd9\u4e2a\u6982\u5ff5\u5c31\u4e0d\u5b58\u5728\u4e86\uff0c\u8fd9\u4e9b\u6570\u636e\u88ab\u653e\u5728 Page Cache \u4e2d\uff08\u8fd9\u79cd Page \u88ab\u79f0\u4e3a Buffer Pages \uff09\u3002 \u7b80\u800c\u8a00\u4e4b\uff0c\u73b0\u5728\u78c1\u76d8\u7684 cache \u53ea\u6709 Page Cache \u4e00\u79cd\uff0c\u5728 Page Cache \u4e2d\uff0c\u6709\u4e00\u79cd Page \u53eb Buffer Page \uff0c\u8fd9\u79cd Page \u90fd\u4e0e\u4e00\u4e2a\u53eb buffer_head \u7684\u6570\u636e\u7ed3\u6784\u5173\u8054\uff0c\u8fd9\u4e9b\u9875\u4e5f\u5c31\u5728\u5185\u5b58\u7edf\u8ba1\u4e2d\u7528 buffers \u8fd9\u4e2a\u6307\u6807\u6765\u5355\u72ec\u7edf\u8ba1\u4e86\u3002 \u7b80\u800c\u8a00\u4e4b, bdev \u6587\u4ef6\u7cfb\u7edf\u4ea7\u751f\u7684 page cache \u7edf\u8ba1\u5230 Buffers\uff0c\u5176\u4ed6\u6587\u4ef6\u7cfb\u7edf\u4ea7\u751f\u7684 page cache \u7edf\u8ba1\u5230 Cached\u3002\u56e0\u4e3a\u7ecf\u8fc7\u6587\u4ef6\u7cfb\u7edf\u4ea7\u751f\u7684\u6587\u4ef6\u5fc5\u7136\u6709 inode , inode \u6210\u5458\u4e2d\u5176\u5b9e\u6709\u8bb0\u5f55\u5bf9\u5e94 blocks \u4fe1\u606f\uff0c\u6240\u4ee5\u65e0\u9700 struct buffer_head 3 buffers(BufferPage)\u4e3b\u8981\u6709 2 \u4e2a\u7528\u6237\uff082 \u79cd\u4f7f\u7528\u573a\u666f\uff09\uff1a \u5e94\u7528\u76f4\u63a5\u8bbf\u95ee\u88f8\u5206\u533a (\u5373\u4f7f\u662f Direct IO \uff0c\u4ecd\u7136\u7ed5\u4e0d\u5f00\u7684 buffers \u548c\u5757 IO \u5c42) \u6587\u4ef6\u7cfb\u7edf\u672c\u8eab\u7684\u5b9e\u73b0\uff0c\u4f1a\u8ba4\u4e3a/dev/sda1 \u662f\u4e2a\u88f8\u8bbe\u5907\uff0c\u56e0\u6b64\u6587\u4ef6\u7cfb\u7edf\u7684 metadata \u4f1a\u7f13\u5b58\u5230 buffers \u5982\u679c\u4f60 cat /dev/sda1 > /dev/null\uff0c\u8fd9\u6837/dev/sda1 \u5185\u5bb9\u8fdb\u5165 buffers\uff0c\u5982\u679c\u4f60 cat /mnt/aaa/bbb.c > /dev/null\uff0c\u5219/mnt/aaa/bbb.c \u7684\u5185\u5bb9\u8fdb\u5165 cached\u3002\u6240\u4ee5\uff0c\u8fd9\u4e24\u79cd cache\uff0c\u4e00\u4e2a\u4ee5\u88f8\u8bbe\u5907\u6216\u5206\u533a\u4e3a\u80cc\u666f\uff0c\u4e00\u4e2a\u4ee5\u6587\u4ef6\u7cfb\u7edf\u91cc\u9762\u7684\u6587\u4ef6\u4e3a\u80cc\u666f\uff0c\u65e0\u8bba\u8bfb\u5199\u7686\u7136\u3002 4 free \u8bfb\u53d6\u4fe1\u606f\u8fc7\u7a0b free \u547d\u4ee4\u662f\u4ece /proc/meminfo \u4e2d\u8bfb\u53d6\u4fe1\u606f\u7684\uff0c\u8ddf\u6211\u4eec\u76f4\u63a5\u8bfb\u5230\u7684\u7ed3\u679c\u4e00\u6837 # cat /proc/meminfo MemTotal: 3848656 kB MemFree: 865640 kB Buffers: 324432 kB Cached: 2024904 kB ... SwapTotal: 2031612 kB SwapFree: 2031612 kB ... Shmem: 5312 kB ... \u4e94 \u53c2\u8003 Linux \u5185\u6838-Page Cache \u548c Buffer Cache \u5173\u7cfb\u53ca\u6f14\u5316\u5386\u53f2 Linux \u9875\u9ad8\u901f\u7f13\u5b58\u4e4b buffer head buffer_head \u7684\u7406\u89e3","title":"\u7b2c\u4e5d\u7bc7 PageCache\u548cBufferCache\u6f14\u8fdb\u8fc7\u7a0b"},{"location":"chapter_6/9_page_cache_and_buffer_cache/#_1","text":"\u672c\u7bc7\u603b\u7ed3 PageCache \u548c BufferCache \u7684\u4e00\u4e9b\u6f14\u8fdb\u603b\u7ed3\u548c\u73b0\u72b6 PageCache \u662f\u4ec0\u4e48? \u53ef\u4ee5\u53c2\u8003 \u300a\u7b2c\u516d\u7ae0 \u7b2c 8 \u7bc7\u300b , \u8fd9\u91cc\u7b80\u8ff0\u4e00\u4e0b\uff1a \u5047\u8bbe\u5185\u5b58\u662f\u7531\u4e00\u4e2a\u8d85\u5927\u6570\u7ec4\u7ec4\u6210\uff0c\u6570\u7ec4\u91cc\u6bcf\u4e2a\u5143\u7d20\u5c31\u662f\u4e00\u4e2a struct page , \u90a3\u4e48\u5176\u4e2d\u67d0\u4e9b page \u5c31\u6784\u6210\u4e86 PageCache . \u5177\u4f53\u4e00\u4e2a\u4e2a page \u7531\u6bcf\u4e2a inode \u5bf9\u5e94\u7684 address_space \u7ed3\u6784\u4f53\u7684 xarray \u6811\u7ba1\u7406(\u5177\u4f53\u662f address_space->i_pages \u6210\u5458). BufferCache \u662f\u4ec0\u4e48? Linux2.6 \u4e4b\u540e, \u5176\u5b9e\u5c31\u662f struct buffer_head \u7ed3\u6784\u4f53, buffer_head \u7684 b_page \u6210\u5458\u6307\u5411\u5bf9\u5e94\u7684 page \u7ed3\u6784\u4f53, BufferCache \u7684\u5177\u4f53\u5185\u5bb9\u8fd8\u662f\u5b58\u653e\u5728 page \u4e2d. buffer_head \u662f\u78c1\u76d8\u5757\u7684\u4e00\u4e2a\u62bd\u8c61,\u4e00\u4e2a buffer_head \u5bf9\u5e94\u4e00\u4e2a\u78c1\u76d8\u5757 BufferCache \u6709\u4ec0\u4e48\u4f5c\u7528? \u4ee5\u88f8\u8bbe\u5907\u6216\u5206\u533a\u4e3a\u80cc\u666f\u8fdb\u884c\u7f13\u5b58\uff0c\u4e3b\u8981\u9488\u5bf9\u4e24\u79cd\u573a\u666f: 1 \u5e94\u7528\u76f4\u63a5\u8bbf\u95ee\u88f8\u5206\u533a, \u6bd4\u5982(cat /dev/sda1 > /dev/null\uff0c\u8fd9\u6837/dev/sda1 \u5185\u5bb9\u8fdb\u5165 buffers) 2 \u6587\u4ef6\u7cfb\u7edf\u672c\u8eab\u7684\u5b9e\u73b0\u662f\u4f1a\u628a/dev/sda1 \u5f53\u6210\u4e00\u4e2a\u88f8\u5206\u533a","title":"\u6982\u8ff0"},{"location":"chapter_6/9_page_cache_and_buffer_cache/#linux-26","text":"\u4ecb\u4e8e\u4e0a\u8ff0 Page Cache\u3001Buffer Cache \u5206\u79bb\u8bbe\u8ba1\u7684\u5f0a\u7aef\uff0cLinux-2.4 \u7248\u672c\u4e2d\u5bf9 Page Cache\u3001Buffer Cache \u7684\u5b9e\u73b0\u8fdb\u884c\u4e86\u878d\u5408\uff0c\u878d\u5408\u540e\u7684 Buffer Cache \u4e0d\u518d\u4ee5\u72ec\u7acb\u7684\u5f62\u5f0f\u5b58\u5728\uff0cBuffer Cache \u7684\u5185\u5bb9\uff0c\u76f4\u63a5\u5b58\u5728\u4e8e Page Cache \u4e2d\uff0c\u540c\u65f6\uff0c\u4fdd\u7559\u4e86\u5bf9 Buffer Cache \u7684\u63cf\u8ff0\u7b26\u5355\u5143\uff1a buffer_head page \u7ed3\u6784\u4e2d\uff0c\u901a\u8fc7 buffers \u5b57\u6bb5\u662f\u5426\u4e3a\u7a7a\uff0c\u6765\u5224\u5b9a\u8fd9\u4e2a Page \u662f\u5426\u4e0e\u4e00\u7ec4 Buffer Cache \u5173\u8054\uff08\u5728\u540e\u7eed\u7684\u6f14\u8fdb\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e2a\u5224\u65ad\uff0c\u8f6c\u53d8\u4e3a\u7531 private \u5b57\u6bb5\u6765\u5224\u5b9a\uff09\u3002 \u800c\u5bf9\u5e94\u7684\uff0c buffer_head \u5219\u589e\u52a0\u4e86\u5b57\u6bb5 b_page \uff0c\u76f4\u63a5\u6307\u5411\u5bf9\u5e94\u7684 page\u3002 \u81f3\u6b64\uff0c\u4e24\u8005\u7684\u5173\u7cfb\u5df2\u7ecf\u76f8\u4e92\u878d\u5408\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4e00\u4e2a\u6587\u4ef6\u7684 PageCache(page)\uff0c\u901a\u8fc7 buffers \u5b57\u6bb5\u80fd\u591f\u975e\u5e38\u5feb\u6377\u7684\u786e\u5b9a\u8be5 page \u5bf9\u5e94\u7684 buffer_head \u4fe1\u606f\uff0c\u8fdb\u800c\u660e\u786e\u8be5 page \u5bf9\u5e94\u7684 device, block \u7b49\u4fe1\u606f\u3002 \u4ece\u903b\u8f91\u4e0a\u6765\u770b\uff0c\u5f53\u9488\u5bf9\u4e00\u4e2a\u6587\u4ef6\u7684 write \u8bf7\u6c42\u8fdb\u5165\u5185\u6838\u65f6\uff0c\u4f1a\u6267\u884c generic_file_write \uff0c\u5728\u8fd9\u4e00\u5c42\uff0c\u901a\u8fc7 inode \u7684 address_space \u7ed3\u6784 mapping \u4f1a\u5206\u914d\u4e00\u4e2a\u65b0\u7684 page \u6765\u4f5c\u4e3a\u5bf9\u5e94\u5199\u5165\u7684 page cache(\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u662f\u4e00\u4e2a\u65b0\u7684\u5199\u5165\uff0c\u4e14\u6570\u636e\u91cf\u4ec5\u4e00\u4e2a page)\uff1a __grab_cache_page \uff0c\u800c\u5728\u5206\u914d\u4e86\u5185\u5b58\u7a7a\u95f4 page \u4e4b\u540e\uff0c\u5219\u901a\u8fc7 prepare_write \uff0c\u6765\u5b8c\u6210\u5bf9\u5e94\u7684 buffer_head \u7684\u6784\u5efa\u3002 prepare_write \u5b9e\u9645\u6267\u884c\u7684\u662f\uff1a __block_prepare_write \uff0c\u5728\u5176\u4e2d\uff0c\u4f1a\u9488\u5bf9\u8be5 page \u5206\u914d\u5bf9\u5e94\u7684 buffer_head( create_empty_buffers )\uff0c\u5e76\u8ba1\u7b97\u5b9e\u9645\u5199\u5165\u7684\u5728 device \u4e0a\u7684\u5177\u4f53\u4f4d\u7f6e\uff1ablocknr\uff0c\u8fdb\u800c\u521d\u59cb\u5316 buffer_head( get_block ) \u5728 create_empty_buffers \u5185\u90e8\uff0c\u5219\u901a\u8fc7 create_buffers \u4ee5\u53ca set_bh_page \u7b49\u4e00\u7cfb\u5217\u64cd\u4f5c\uff0c\u5c06 page \u4e0e buffer_head \u7ec4\u7ec7\u6210\u5982\u524d\u56fe\u6240\u793a\u7684\u901a\u8fc7 buffers\u3001b_page \u7b49\u76f8\u4e92\u5173\u8054\u7684\u5173\u7cfb\u3002 \u901a\u8fc7 create_buffers \u5206\u914d\u4e00\u7ec4\u4e32\u8054\u597d\u7684 buffer_head \u901a\u8fc7 set_bh_page \u5c06\u5404 buffer_head \u5173\u8054\u5230\u5bf9\u5e94\u7684 page\uff0c\u4ee5\u53ca data \u7684\u5177\u4f53\u4f4d\u7f6e \u6b63\u662f\u5982\u4e0a\u7684\u4e00\u7cfb\u5217\u52a8\u4f5c\uff0c\u4f7f\u5f97 Page Cache \u4e0e Buffer Cache(buffer_head)\u76f8\u4e92\u7ed1\u5b9a\u3002\u5bf9\u4e0a\uff0c\u5728\u6587\u4ef6\u8bfb\u5199\u65f6\uff0c\u4ee5 page \u4e3a\u5355\u4f4d\u8fdb\u884c\u5904\u7406\u3002\u800c\u5bf9\u4e0b\uff0c\u5728\u6570\u636e\u5411 device \u8fdb\u884c\u5237\u65b0\u65f6\uff0c\u5219\u53ef\u4ee5\u4ee5 buffer_head(block)\u4e3a\u5355\u4f4d\u8fdb\u884c\u5904\u7406\u3002 \u5728\u540e\u7eed\u7684 linux-2.5 \u7248\u672c\u4e2d\uff0c\u5f15\u5165\u4e86 bio \u7ed3\u6784\u6765\u66ff\u6362\u57fa\u4e8e buffer_head \u7684\u5757\u8bbe\u5907 IO \u64cd\u4f5c\u3002 [\u6ce8\u610f]\uff1a \u8fd9\u91cc\u7684 Page Cache \u4e0e Buffer Cache \u7684\u878d\u5408\uff0c\u662f\u9488\u5bf9\u6587\u4ef6\u8fd9\u4e00\u5c42\u9762\u7684 Page Cache \u4e0e Buffer Cache \u7684\u878d\u5408\u3002\u5bf9\u4e8e\u8de8\u5c42\u7684\uff1aFile \u5c42\u9762\u7684 Page Cache \u548c\u88f8\u8bbe\u5907 Buffer Cache\uff0c\u867d\u7136\u90fd\u7edf\u4e00\u5230\u4e86\u57fa\u4e8e Page \u7684\u5b9e\u73b0\uff0c\u4f46 File \u7684 Page Cache \u548c\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684 Block \u5728\u88f8\u8bbe\u5907\u5c42\u8bbf\u95ee\u7684 Buffer Cache\uff0c\u8fd9\u4e24\u4e2a\u662f\u5b8c\u5168\u72ec\u7acb\u7684 Page\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u7269\u7406\u78c1\u76d8 Block \u4e0a\u7684\u6570\u636e\uff0c\u4ecd\u7136\u5bf9\u5e94\u4e86 Linux \u5185\u6838\u4e2d\u7684\u4e24\u4efd Page\uff0c\u4e00\u4e2a\u662f\u901a\u8fc7\u6587\u4ef6\u5c42\u8bbf\u95ee\u7684 File \u7684 Page Cache(Page Cache)\uff0c\u4e00\u4e2a\u662f\u901a\u8fc7\u88f8\u8bbe\u5907\u5c42\u8bbf\u95ee\u7684 Page Cache(Buffer Cache)\u3002","title":"\u4e00 Linux 2.6 \u4e4b\u540e\u7684\u5173\u7cfb"},{"location":"chapter_6/9_page_cache_and_buffer_cache/#_2","text":"","title":"\u4e8c \u6838\u5fc3\u7ed3\u6784\u4f53"},{"location":"chapter_6/9_page_cache_and_buffer_cache/#1-buffer_head","text":"Linux 6.7\u7248\u672c /* * Historically, a buffer_head was used to map a single block * within a page, and of course as the unit of I/O through the * filesystem and block layers. Nowadays the basic I/O unit * is the bio, and buffer_heads are used for extracting block * mappings (via a get_block_t call), for tracking state within * a page (via a page_mapping) and for wrapping bio submission * for backward compatibility reasons (e.g. submit_bh). */ struct buffer_head { unsigned long b_state; /* buffer state bitmap (see above) */ struct buffer_head *b_this_page;/* circular list of page's buffers */ union { struct page *b_page; /* the page this bh is mapped to */ struct folio *b_folio; /* the folio this bh is mapped to */ }; sector_t b_blocknr; /* start block number */ size_t b_size; /* size of mapping */ char *b_data; /* pointer to data within the page */ struct block_device *b_bdev; bh_end_io_t *b_end_io; /* I/O completion */ void *b_private; /* reserved for b_end_io */ struct list_head b_assoc_buffers; /* associated with another mapping */ struct address_space *b_assoc_map; /* mapping this buffer is associated with */ atomic_t b_count; /* users using this buffer_head */ spinlock_t b_uptodate_lock; /* Used by the first bh in a page, to * serialise IO completion of other * buffers in the page */ }; Linux 3.16\u7248\u672c /* * Historically, a buffer_head was used to map a single block * within a page, and of course as the unit of I/O through the * filesystem and block layers. Nowadays the basic I/O unit * is the bio, and buffer_heads are used for extracting block * mappings (via a get_block_t call), for tracking state within * a page (via a page_mapping) and for wrapping bio submission * for backward compatibility reasons (e.g. submit_bh). */ struct buffer_head { unsigned long b_state; /* buffer state bitmap (see above) */ struct buffer_head *b_this_page;/* circular list of page's buffers */ struct page *b_page; /* the page this bh is mapped to */ sector_t b_blocknr; /* start block number */ size_t b_size; /* size of mapping */ char *b_data; /* pointer to data within the page */ struct block_device *b_bdev; bh_end_io_t *b_end_io; /* I/O completion */ void *b_private; /* reserved for b_end_io */ struct list_head b_assoc_buffers; /* associated with another mapping */ struct address_space *b_assoc_map; /* mapping this buffer is associated with */ atomic_t b_count; /* users using this buffer_head */ }; Linux 2.6\u7248\u672c /* * Historically, a buffer_head was used to map a single block * within a page, and of course as the unit of I/O through the * filesystem and block layers. Nowadays the basic I/O unit * is the bio, and buffer_heads are used for extracting block * mappings (via a get_block_t call), for tracking state within * a page (via a page_mapping) and for wrapping bio submission * for backward compatibility reasons (e.g. submit_bh). */ struct buffer_head { unsigned long b_state; /* buffer state bitmap (see above) */ struct buffer_head *b_this_page;/* circular list of page's buffers */ struct page *b_page; /* the page this bh is mapped to */ sector_t b_blocknr; /* start block number */ size_t b_size; /* size of mapping */ char *b_data; /* pointer to data within the page */ struct block_device *b_bdev; bh_end_io_t *b_end_io; /* I/O completion */ void *b_private; /* reserved for b_end_io */ struct list_head b_assoc_buffers; /* associated with another mapping */ struct address_space *b_assoc_map; /* mapping this buffer is associated with */ atomic_t b_count; /* users using this buffer_head */ }; buffer_head \u662f\u78c1\u76d8\u5757\u7684\u4e00\u4e2a\u62bd\u8c61,\u4e00\u4e2a buffer_head \u5bf9\u5e94\u4e00\u4e2a\u78c1\u76d8\u5757\uff0cbuffer_head \u4e2d\u4fdd\u5b58\u5bf9\u5e94\u7684\u78c1\u76d8\u53f7 buffer_head \u628a page \u4e0e\u78c1\u76d8\u5757\u8054\u7cfb\u8d77\u6765\uff0c\u7531\u4e8e page \u548c\u78c1\u76d8\u5757\u7684\u5927\u5c0f\u53ef\u80fd\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u4e00\u4e2a page \u53ef\u80fd\u7ba1\u7406\u591a\u4e2a buffer_head \u8fd9\u91cc\u5047\u8bbe page \u5927\u5c0f 4K\uff0c\u5757\u5927\u5c0f\u4e3a 1K, buffer_head,page \u548c\u78c1\u76d8\u5757\u5173\u7cfb\u5982\u4e0b\uff1a","title":"1 buffer_head"},{"location":"chapter_6/9_page_cache_and_buffer_cache/#2-request","text":"","title":"2 request \u7ed3\u6784\u4f53"},{"location":"chapter_6/9_page_cache_and_buffer_cache/#3-bio","text":"\u9996\u5148 submit_bh()\u51fd\u6570\uff0c\u5176\u4f5c\u7528\uff1a\u6839\u636e\u7f13\u51b2\u533a\u9996\u90e8\u7684\u5185\u5bb9\u521b\u5efa\u4e00\u4e2a bio\uff0c\u5728\u8be5\u51fd\u6570\u4e2d\u901a\u8fc7 buffer_head \u4f20\u8fdb\u6765\u7684\u4fe1\u606f\u5bf9 bio \u7684\u4fe1\u606f\u8d4b\u503c\u3002\u5982\u4e0b bio->bi_sector = bh->b_blocknr * (bh->b_size >> 9); //\u6247\u533a\u53f7 bio->bi_bdev = bh->b_bdev; //\u8bbe\u5907\uff0c\u5982\u5206\u533a bio->bi_io_vec[0].bv_page = bh->b_page; //\u5bf9\u5e94\u9875 bio->bi_io_vec[0].bv_len = bh->b_size; //\u5757\u5927\u5c0f bio->bi_io_vec[0].bv_offset = bh_offset(bh); //buffer_head\u6307\u5411\u7684\u7f13\u5b58\u533a\u76f8\u5bf9\u4e8e\u5176\u6240\u5728\u9875\u7684\u504f\u79fb","title":"3 bio \u7ed3\u6784\u4f53\u548c\u5199\u78c1\u76d8\u7684\u6574\u4f53\u8fc7\u7a0b"},{"location":"chapter_6/9_page_cache_and_buffer_cache/#4-bio-bio_vec","text":"bio \u548c bio_vec \u7684\u5173\u7cfb\u53ef\u4ee5\u53c2\u8003 \u6587\u4ef6\u8bfb\u5199\uff08BIO\uff09\u6ce2\u6f9c\u58ee\u9614\u7684\u4e00\u751f , \u5982\u4e0b\u56fe: bio \u7684\u5b9a\u4e49\u5982\u4e0b(include/linux/blk_types.h) struct bio_vec { struct page *bv_page; unsigned int bv_len; unsigned int bv_offset; }; struct bio { struct bio *bi_next; /* request queue link */ struct block_device *bi_bdev; struct bvec_iter bi_iter; /* Number of segments in this BIO after * physical address coalescing is performed. */ unsigned int bi_phys_segments; bio_end_io_t *bi_end_io; void *bi_private; unsigned short bi_vcnt; /* how many bio_vec's */ atomic_t bi_cnt; /* pin count */ struct bio_vec *bi_io_vec; /* the actual vec list */ }; \u5b83\u662f\u4e00\u4e2a\u63cf\u8ff0\u786c\u76d8\u91cc\u9762\u7684\u4f4d\u7f6e\u4e0e page cache \u7684\u9875\u5bf9\u5e94\u5173\u7cfb\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6bcf\u4e2a bio \u5bf9\u5e94\u7684\u786c\u76d8\u91cc\u9762\u4e00\u5757\u8fde\u7eed\u7684\u4f4d\u7f6e\uff0c\u6bcf\u4e00\u5757\u786c\u76d8\u91cc\u9762\u8fde\u7eed\u7684\u4f4d\u7f6e\uff0c\u53ef\u80fd\u5bf9\u5e94\u7740 page cache \u7684\u591a\u9875\uff0c\u6216\u8005\u4e00\u9875\uff0c\u6240\u4ee5\u5b83\u91cc\u9762\u4f1a\u6709\u4e00\u4e2a bio_vec *bi_io_vec \u7684\u8868\u3002 \u6211\u4eec\u73b0\u5728\u5047\u8bbe 3 \u79cd\u60c5\u51b5 \u7b2c 1 \u79cd\u60c5\u51b5\u662f page_cache_sync_readahead()\u8981\u8bfb\u7684 0~16KB \u6570\u636e\uff0c\u5728\u786c\u76d8\u91cc\u9762\u6b63\u597d\u662f\u987a\u5e8f\u6392\u5217\u7684(\u662f\u5426\u987a\u5e8f\u6392\u5217\uff0c\u8981\u67e5\u6587\u4ef6\u7cfb\u7edf\uff0c\u5982 ext3\u3001ext4)\uff0cLinux \u4f1a\u4e3a\u8fd9\u4e00\u6b21 4 \u9875\u7684\u8bfb\uff0c\u5206\u914d 1 \u4e2a bio \u5c31\u8db3\u591f\u4e86\uff0c\u5e76\u4e14\u8ba9\u8fd9\u4e2a bio \u91cc\u9762\u5206\u914d 4 \u4e2a bi_io_vec\uff0c\u6307\u5411 4 \u4e2a\u4e0d\u540c\u7684\u5185\u5b58\u9875\uff1a \u7b2c 2 \u79cd\u60c5\u51b5\u662f page_cache_sync_readahead()\u8981\u8bfb\u7684 0~16KB \u6570\u636e\uff0c\u5728\u786c\u76d8\u91cc\u9762\u6b63\u597d\u662f\u5b8c\u5168\u4e0d\u8fde\u7eed\u7684 4 \u5757 (\u662f\u5426\u987a\u5e8f\u6392\u5217\uff0c\u8981\u67e5\u6587\u4ef6\u7cfb\u7edf\uff0c\u5982 ext3\u3001ext4)\uff0cLinux \u4f1a\u4e3a\u8fd9\u4e00\u6b21 4 \u9875\u7684\u8bfb\uff0c\u5206\u914d 4 \u4e2a bio\uff0c\u5e76\u4e14\u8ba9\u8fd9 4 \u4e2a bio \u91cc\u9762\uff0c\u6bcf\u4e2a\u5206\u914d 1 \u4e2a bi_io_vec\uff0c\u6307\u5411 4 \u4e2a\u4e0d\u540c\u7684\u5185\u5b58\u9875\u9762\uff1a \u5f53\u7136\u4f60\u8fd8\u53ef\u4ee5\u6709\u7b2c 3 \u79cd\u60c5\u51b5\uff0c\u6bd4\u5982 0~8KB \u5728\u786c\u76d8\u91cc\u9762\u8fde\u7eed\uff0c8~16KB \u4e0d\u8fde\u7eed\uff0c\u90a3\u53ef\u4ee5\u662f\u8fd9\u6837\u7684:","title":"4 bio \u7ed3\u6784\u4f53\u548c bio_vec \u7ed3\u6784\u4f53\u5173\u7cfb:"},{"location":"chapter_6/9_page_cache_and_buffer_cache/#free","text":"","title":"\u56db \u7406\u89e3 free \u547d\u4ee4\u7684\u8f93\u51fa"},{"location":"chapter_6/9_page_cache_and_buffer_cache/#1","text":"\u672c\u7bc7\u6587\u6863\u603b\u7ed3 Linux free \u547d\u4ee4\u5c55\u793a\u7684 buffers \u548c cached \u533a\u522b # free total used free shared buffers cached Mem: 3848656 2983016 865640 5312 324432 2024904 -/+ buffers/cache: 633680 3214976 Swap: 2031612","title":"1 \u73b0\u8c61"},{"location":"chapter_6/9_page_cache_and_buffer_cache/#2","text":"buffers \u8868\u793a\u5757\u8bbe\u5907(block device)\u6240\u5360\u7528\u7684\u7f13\u5b58\u9875\uff0c\u5305\u62ec\uff1a\u76f4\u63a5\u8bfb\u5199\u5757\u8bbe\u5907\u3001\u4ee5\u53ca\u6587\u4ef6\u7cfb\u7edf\u5143\u6570\u636e(metadata)\u6bd4\u5982 SuperBlock \u6240\u4f7f\u7528\u7684\u7f13\u5b58\u9875\uff1b cached \u8868\u793a\u666e\u901a\u6587\u4ef6\u6570\u636e\u6240\u5360\u7528\u7684\u7f13\u5b58\u9875, \u4e5f\u5c31\u662f Page Cache . \u8fd9\u91cc\u7a0d\u5fae\u591a\u8bf4\u4e00\u70b9 buffers \u548c cached\u3002Linux 2.4.10 \u5185\u6838\u4e4b\u524d\uff0c\u78c1\u76d8\u7684\u7f13\u5b58\u6709\u4e24\u79cd\uff0c\u5373 Buffer Cache \u548c Page Cache \u3002\u524d\u8005\u7f13\u5b58\u7ba1\u7406\u78c1\u76d8\u6587\u4ef6\u7cfb\u7edf\u65f6\u8bfb\u53d6\u7684\u5757\uff0c\u540e\u8005\u5b58\u653e\u8bbf\u95ee\u5177\u4f53\u6587\u4ef6\u5185\u5bb9\u65f6\u751f\u6210\u7684\u9875\u3002\u5728 2.4.10 \u4e4b\u540e\uff0c Buffer Cache \u8fd9\u4e2a\u6982\u5ff5\u5c31\u4e0d\u5b58\u5728\u4e86\uff0c\u8fd9\u4e9b\u6570\u636e\u88ab\u653e\u5728 Page Cache \u4e2d\uff08\u8fd9\u79cd Page \u88ab\u79f0\u4e3a Buffer Pages \uff09\u3002 \u7b80\u800c\u8a00\u4e4b\uff0c\u73b0\u5728\u78c1\u76d8\u7684 cache \u53ea\u6709 Page Cache \u4e00\u79cd\uff0c\u5728 Page Cache \u4e2d\uff0c\u6709\u4e00\u79cd Page \u53eb Buffer Page \uff0c\u8fd9\u79cd Page \u90fd\u4e0e\u4e00\u4e2a\u53eb buffer_head \u7684\u6570\u636e\u7ed3\u6784\u5173\u8054\uff0c\u8fd9\u4e9b\u9875\u4e5f\u5c31\u5728\u5185\u5b58\u7edf\u8ba1\u4e2d\u7528 buffers \u8fd9\u4e2a\u6307\u6807\u6765\u5355\u72ec\u7edf\u8ba1\u4e86\u3002 \u7b80\u800c\u8a00\u4e4b, bdev \u6587\u4ef6\u7cfb\u7edf\u4ea7\u751f\u7684 page cache \u7edf\u8ba1\u5230 Buffers\uff0c\u5176\u4ed6\u6587\u4ef6\u7cfb\u7edf\u4ea7\u751f\u7684 page cache \u7edf\u8ba1\u5230 Cached\u3002\u56e0\u4e3a\u7ecf\u8fc7\u6587\u4ef6\u7cfb\u7edf\u4ea7\u751f\u7684\u6587\u4ef6\u5fc5\u7136\u6709 inode , inode \u6210\u5458\u4e2d\u5176\u5b9e\u6709\u8bb0\u5f55\u5bf9\u5e94 blocks \u4fe1\u606f\uff0c\u6240\u4ee5\u65e0\u9700 struct buffer_head","title":"2 \u7ed3\u8bba"},{"location":"chapter_6/9_page_cache_and_buffer_cache/#3-buffersbufferpage-2-2","text":"\u5e94\u7528\u76f4\u63a5\u8bbf\u95ee\u88f8\u5206\u533a (\u5373\u4f7f\u662f Direct IO \uff0c\u4ecd\u7136\u7ed5\u4e0d\u5f00\u7684 buffers \u548c\u5757 IO \u5c42) \u6587\u4ef6\u7cfb\u7edf\u672c\u8eab\u7684\u5b9e\u73b0\uff0c\u4f1a\u8ba4\u4e3a/dev/sda1 \u662f\u4e2a\u88f8\u8bbe\u5907\uff0c\u56e0\u6b64\u6587\u4ef6\u7cfb\u7edf\u7684 metadata \u4f1a\u7f13\u5b58\u5230 buffers \u5982\u679c\u4f60 cat /dev/sda1 > /dev/null\uff0c\u8fd9\u6837/dev/sda1 \u5185\u5bb9\u8fdb\u5165 buffers\uff0c\u5982\u679c\u4f60 cat /mnt/aaa/bbb.c > /dev/null\uff0c\u5219/mnt/aaa/bbb.c \u7684\u5185\u5bb9\u8fdb\u5165 cached\u3002\u6240\u4ee5\uff0c\u8fd9\u4e24\u79cd cache\uff0c\u4e00\u4e2a\u4ee5\u88f8\u8bbe\u5907\u6216\u5206\u533a\u4e3a\u80cc\u666f\uff0c\u4e00\u4e2a\u4ee5\u6587\u4ef6\u7cfb\u7edf\u91cc\u9762\u7684\u6587\u4ef6\u4e3a\u80cc\u666f\uff0c\u65e0\u8bba\u8bfb\u5199\u7686\u7136\u3002","title":"3 buffers(BufferPage)\u4e3b\u8981\u6709 2 \u4e2a\u7528\u6237\uff082 \u79cd\u4f7f\u7528\u573a\u666f\uff09\uff1a"},{"location":"chapter_6/9_page_cache_and_buffer_cache/#4-free","text":"free \u547d\u4ee4\u662f\u4ece /proc/meminfo \u4e2d\u8bfb\u53d6\u4fe1\u606f\u7684\uff0c\u8ddf\u6211\u4eec\u76f4\u63a5\u8bfb\u5230\u7684\u7ed3\u679c\u4e00\u6837 # cat /proc/meminfo MemTotal: 3848656 kB MemFree: 865640 kB Buffers: 324432 kB Cached: 2024904 kB ... SwapTotal: 2031612 kB SwapFree: 2031612 kB ... Shmem: 5312 kB ...","title":"4 free \u8bfb\u53d6\u4fe1\u606f\u8fc7\u7a0b"},{"location":"chapter_6/9_page_cache_and_buffer_cache/#_3","text":"Linux \u5185\u6838-Page Cache \u548c Buffer Cache \u5173\u7cfb\u53ca\u6f14\u5316\u5386\u53f2 Linux \u9875\u9ad8\u901f\u7f13\u5b58\u4e4b buffer head buffer_head \u7684\u7406\u89e3","title":"\u4e94 \u53c2\u8003"},{"location":"chapter_7/10_http_cookie_session_token/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3 cookie \u3001 session \u3001 token \u7684\u4e00\u4e9b\u539f\u7406\u548c\u5b9e\u8df5\u7ecf\u9a8c 1 \u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0cookie \u4f17\u6240\u5468\u77e5\uff0cHTTP \u662f\u4e00\u4e2a\u65e0\u72b6\u6001\u534f\u8bae\uff0c\u6240\u4ee5\u5ba2\u6237\u7aef\u6bcf\u6b21\u53d1\u51fa\u8bf7\u6c42\u65f6\uff0c\u4e0b\u4e00\u6b21\u8bf7\u6c42\u65e0\u6cd5\u5f97\u77e5\u4e0a\u4e00\u6b21\u8bf7\u6c42\u6240\u5305\u542b\u7684\u72b6\u6001\u6570\u636e\uff0c\u5982\u4f55\u80fd\u628a\u4e00\u4e2a\u7528\u6237\u7684\u72b6\u6001\u6570\u636e\u5173\u8054\u8d77\u6765\u5462\uff1f \u6bd4\u5982\u5728\u6dd8\u5b9d\u7684\u67d0\u4e2a\u9875\u9762\u4e2d\uff0c\u4f60\u8fdb\u884c\u4e86\u767b\u9646\u64cd\u4f5c\u3002\u5f53\u4f60\u8df3\u8f6c\u5230\u5546\u54c1\u9875\u65f6\uff0c\u670d\u52a1\u7aef\u5982\u4f55\u77e5\u9053\u4f60\u662f\u5df2\u7ecf\u767b\u9646\u7684\u72b6\u6001\uff1f 1 \u9996\u5148\u4ea7\u751f\u4e86 cookie \u8fd9\u95e8\u6280\u672f\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0ccookie \u662f http \u534f\u8bae\u7684\u4e00\u90e8\u5206\uff0c\u5b83\u7684\u5904\u7406\u5206\u4e3a\u5982\u4e0b\u51e0\u6b65\uff1a 1.1 \u670d\u52a1\u5668\u5411\u5ba2\u6237\u7aef\u53d1\u9001 cookie\u3002 1.1.1 \u901a\u5e38\u4f7f\u7528 HTTP \u534f\u8bae\u89c4\u5b9a\u7684 set-cookie \u5934\u64cd\u4f5c\u3002 1.1.2 \u89c4\u8303\u89c4\u5b9a cookie \u7684\u683c\u5f0f\u4e3a name = value \u683c\u5f0f\uff0c\u4e14\u5fc5\u987b\u5305\u542b\u8fd9\u90e8\u5206\u3002 1.2 \u6d4f\u89c8\u5668\u5c06 cookie \u4fdd\u5b58\u3002 1.3 \u6bcf\u6b21\u8bf7\u6c42\u6d4f\u89c8\u5668\u90fd\u4f1a\u5c06 cookie \u53d1\u5411\u670d\u52a1\u5668\u3002 2 \u5176\u4ed6\u53ef\u9009\u7684 cookie \u53c2\u6570\u4f1a\u5f71\u54cd\u5c06 cookie \u53d1\u9001\u7ed9\u670d\u52a1\u5668\u7aef\u7684\u8fc7\u7a0b\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u79cd\uff1a 2.1 path\uff1a\u8868\u793a cookie \u5f71\u54cd\u5230\u7684\u8def\u5f84\uff0c\u5339\u914d\u8be5\u8def\u5f84\u624d\u53d1\u9001\u8fd9\u4e2a cookie\u3002 2.2 expires \u548c maxAge\uff1a\u544a\u8bc9\u6d4f\u89c8\u5668\u8fd9\u4e2a cookie \u4ec0\u4e48\u65f6\u5019\u8fc7\u671f\uff0cexpires \u662f UTC \u683c\u5f0f\u65f6\u95f4\uff0cmaxAge \u662f cookie \u591a\u4e45\u540e\u8fc7\u671f\u7684\u76f8\u5bf9\u65f6\u95f4\u3002\u5f53\u4e0d\u8bbe\u7f6e\u8fd9\u4e24\u4e2a\u9009\u9879\u65f6\uff0c\u4f1a\u4ea7\u751f session cookie\uff0csession cookie \u662f transient \u7684\uff0c\u5f53\u7528\u6237\u5173\u95ed\u6d4f\u89c8\u5668\u65f6\uff0c\u5c31\u88ab\u6e05\u9664\u3002\u4e00\u822c\u7528\u6765\u4fdd\u5b58 session \u7684 session_id\u3002 2.3 secure\uff1a\u5f53 secure \u503c\u4e3a true \u65f6\uff0ccookie \u5728 HTTP \u4e2d\u662f\u65e0\u6548\uff0c\u5728 HTTPS \u4e2d\u624d\u6709\u6548\u3002 2.4 httpOnly\uff1a\u6d4f\u89c8\u5668\u4e0d\u5141\u8bb8\u811a\u672c\u64cd\u4f5c document.cookie \u53bb\u66f4\u6539 cookie\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u5e94\u8be5\u8bbe\u7f6e\u8fd9\u4e2a\u4e3a true\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u88ab xss \u653b\u51fb\u62ff\u5230 cookie\u3002 2 \u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0Session 1 cookie \u867d\u7136\u5f88\u65b9\u4fbf\uff0c\u4f46\u662f\u4f7f\u7528 cookie \u6709\u4e00\u4e2a\u5f88\u5927\u7684\u5f0a\u7aef\uff0ccookie \u4e2d\u7684\u6240\u6709\u6570\u636e\u5728\u5ba2\u6237\u7aef\u5c31\u53ef\u4ee5\u88ab\u4fee\u6539\uff0c\u6570\u636e\u975e\u5e38\u5bb9\u6613\u88ab\u4f2a\u9020\uff0c\u90a3\u4e48\u4e00\u4e9b\u91cd\u8981\u7684\u6570\u636e\u5c31\u4e0d\u80fd\u5b58\u653e\u5728 cookie \u4e2d\u4e86 2 \u800c\u4e14\u5982\u679c cookie \u4e2d\u6570\u636e\u5b57\u6bb5\u592a\u591a\u4f1a\u5f71\u54cd\u4f20\u8f93\u6548\u7387\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u5c31\u4ea7\u751f\u4e86 session\uff0c session \u4e2d\u7684\u6570\u636e\u662f\u4fdd\u7559\u5728\u670d\u52a1\u5668\u7aef\u7684 \u3002 cookie\u4e2d\u53ea\u5b58\u50a8 session_id (\u6216\u8005\u662f sid \u4e4b\u7c7b\u7684) \u5f53\u4f60\u6d4f\u89c8\u4e00\u4e2a\u7f51\u9875\u65f6\uff0c\u670d\u52a1\u7aef\u968f\u673a\u4ea7\u751f\u4e00\u4e2a 1024 \u6bd4\u7279\u957f\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5b58\u5728\u4f60 cookie \u4e2d\u7684 sid \u5b57\u6bb5\u4e2d\u3002\u5f53\u4f60\u4e0b\u6b21\u8bbf\u95ee\u65f6\uff0ccookie \u4f1a\u5e26\u6709\u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u6d4f\u89c8\u5668\u5c31\u77e5\u9053\u4f60\u662f\u4e0a\u6b21\u8bbf\u95ee\u8fc7\u7684\u67d0\u67d0\u67d0\uff0c\u7136\u540e\u4ece\u670d\u52a1\u5668\u7684\u5b58\u50a8\u4e2d\u53d6\u51fa\u4e0a\u6b21\u8bb0\u5f55\u5728\u4f60\u8eab\u4e0a\u7684\u6570\u636e\u3002\u7531\u4e8e\u5b57\u7b26\u4e32\u662f\u968f\u673a\u4ea7\u751f\u7684\uff0c\u800c\u4e14\u4f4d\u6570\u8db3\u591f\u591a\uff0c\u6240\u4ee5\u4e5f\u4e0d\u62c5\u5fc3\u6709\u4eba\u80fd\u591f\u4f2a\u9020\u3002 \u5bf9\u670d\u52a1\u5668\u6765\u8bf4,session \u53ef\u4ee5\u5b58\u653e\u5728 1\uff09\u5185\u5b58 2\uff09cookie\u672c\u8eab 3\uff09redis \u6216 memcached \u7b49\u7f13\u5b58\u4e2d 4\uff09\u6570\u636e\u5e93\u4e2d\u3002 \u7ebf\u4e0a\u6765\u8bf4\uff0c\u7f13\u5b58\u7684\u65b9\u6848\u6bd4\u8f83\u5e38\u89c1\uff0c 3 \u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0Token token\u7684\u76ee\u7684\u662f\uff1a no session token\u7684\u4f18\u52bf\uff1a token\u4fe1\u606f\u91cc\u9762\u5305\u542b\u4e86 \u7528\u6237ID \u3001 \u670d\u52a1\u5668\u7b7e\u540d \u4fe1\u606f\u3002\u56e0\u6b64\u5ba2\u6237\u7aef\u8fd9\u8fb9\u53d1\u9001\u8bf7\u6c42\u65f6\uff0c\u90fd\u5728Header\u91cc\u9762\u5e26\u4e0aToken\u4fe1\u606f\uff0c\u4e0d\u540c\u7684\u670d\u52a1\u5668\u90fd\u80fd\u591f\u77e5\u9053\u8be5\u7528\u6237\u662f\u8c01\u3002\u800c\u4e14\u670d\u52a1\u7aef\u5982\u679c\u6709\u591a\u53f0\u673a\u5668\uff0c\u65e0\u9700\u90e8\u7f72Redis\u7b49\u4e2d\u95f4\u4ef6. \u6700\u5e38\u7528\u7684\u573a\u666f\uff1a \u4e2d\u5fc3\u5316\u8ba4\u8bc1\u3002 \u516c\u53f8\u6709\u4e2d\u5fc3\u7684\u8ba4\u8bc1\u7cfb\u7edf\uff0c\u53ebAuth\uff0c\u6bcf\u6b21\u7528\u6237\u5148\u4eceAuth\u7cfb\u7edf\u90a3\u8fb9\u62ff\u5230AuthToken \u7528\u6237\u8bf7\u6c42\u5176\u4ed6\u7cfb\u7edf\uff08\u6bd4\u5982\u516c\u53f8\u7684CMDB\u7cfb\u7edf\uff0c\u516c\u53f8\u7684Workflow\u7cfb\u7edf\uff09\u65f6\uff0c\u90fd\u5728Header\u91cc\u9762\u5e26\u4e0aAuthToken\u3002\u5176\u4ed6\u7cfb\u7edf\u518d\u53bbAuth\u7cfb\u7edf\u90a3\u8fb9\u6821\u9a8c\uff1a\u8be5AuthToken\u662f\u5426\u5904\u4e8e\u6709\u6548\u671f\u5185\uff0c\u5982\u679c\u6709\u6548\uff0cToken\u91cc\u9762\u4e5f\u8bf4\u660e\u8be5\u7528\u6237\u7684\u7528\u6237ID Cookie \u4e0e Token \u7684\u7b80\u5355\u603b\u7ed3 Cookie \u6709\u54ea\u4e9b\u5c40\u9650\u6027\uff1f 1\u3001 Cookie \u8de8\u7ad9\u662f\u4e0d\u80fd\u5171\u4eab\u7684\uff0c\u8fd9\u6837\u7684\u8bdd\u5982\u679c\u4f60\u8981\u5b9e\u73b0\u591a\u5e94\u7528\uff08\u591a\u7cfb\u7edf\uff09\u7684\u5355\u70b9\u767b\u5f55\uff08SSO\uff09\uff0c\u4f7f\u7528 Cookie \u6765\u505a\u9700\u8981\u7684\u8bdd\u5c31\u5f88\u56f0\u96be\u4e86 \u753b\u5916\u97f3: \u6240\u8c13\u5355\u70b9\u767b\u5f55\uff0c\u662f\u6307\u5728\u591a\u4e2a\u5e94\u7528\u7cfb\u7edf\u4e2d\uff0c\u7528\u6237\u53ea\u9700\u8981\u767b\u5f55\u4e00\u6b21\u5c31\u53ef\u4ee5\u8bbf\u95ee\u6240\u6709\u76f8\u4e92\u4fe1\u4efb\u7684\u5e94\u7528\u7cfb\u7edf\u3002 2 \u4f46\u5982\u679c\u7528 token \u6765\u5b9e\u73b0 SSO \u4f1a\u975e\u5e38\u7b80\u5355\uff0c\u5982\u4e0b 2.1 \u53ea\u8981\u5728 header \u4e2d\u7684 authorize \u5b57\u6bb5\uff08\u6216\u5176\u4ed6\u81ea\u5b9a\u4e49\uff09\u52a0\u4e0a token \u5373\u53ef\u5b8c\u6210\u6240\u6709\u8de8\u57df\u7ad9\u70b9\u7684\u8ba4\u8bc1\u3002 2.2 \u5728\u79fb\u52a8\u7aef\u539f\u751f\u8bf7\u6c42\u662f\u6ca1\u6709 cookie \u4e4b\u8bf4\u7684\uff0c\u800c sessionid \u4f9d\u8d56\u4e8e cookie\uff0csessionid \u5c31\u4e0d\u80fd\u7528 cookie \u6765\u4f20\u4e86\uff0c\u5982\u679c\u7528 token \u7684\u8bdd\uff0c\u7531\u4e8e\u5b83\u662f\u968f\u7740 header \u7684 authoriize \u4f20\u8fc7\u6765\u7684\uff0c\u4e5f\u5c31\u4e0d\u5b58\u5728\u6b64\u95ee\u9898\uff0c\u6362\u53e5\u8bdd\u8bf4token \u5929\u751f\u652f\u6301\u79fb\u52a8\u5e73\u53f0\uff0c\u53ef\u6269\u5c55\u6027\u597d. token\u548csession\u7684\u6bd4\u8f83 \u539f\u672c\u8981\u653e\u5230\u5ba2\u6237\u7aef\u90a3\u8fb9\u7684\u6570\u636e\u8f83\u5c11\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u4f7f\u7528cookie\u5c31\u53ef\u4ee5\u3002\u4f46\u662f\u968f\u7740\u6570\u636e\u91cf\u589e\u5927\uff0c\u5c31\u4e0d\u5f97\u4e0d\u7528session\u3002\u56e0\u6b64session\u662f\u5927\u5382\u6807\u914d\uff0c\u4f8b\u5982\u6dd8\u5b9d\u3001\u4eac\u4e1c\u7b49\u7f51\u7ad9 token\u5219\u66f4\u9002\u5408\u5728\u516c\u53f8\u5185\u90e8\u7cfb\u7edf\u4e4b\u95f4\uff0c\u8fdb\u884cAPI\u8c03\u7528\u65f6\u7684\u8ba4\u8bc1\uff0c\u63a8\u8350\u8bbe\u7f6e\u4e00\u4e2a\u6bd4\u8f83\u77ed\u7684\u6709\u6548\u671f \u76f8\u540c\u70b9\uff1a \u90fd\u662f\u4e3a\u4e86\u8868\u660e\u7528\u6237ID\u3001\u7ed9\u7528\u6237\u63d0\u524d\u52a0\u8f7d\u597d\u4e00\u4e9b\u6570\u636e 4 CSRF\u653b\u51fb\u4ecb\u7ecd \u4e2d\u6587\u540d\u79f0\u53eb\uff1a\u8de8\u7ad9\u653b\u51fb \u7b80\u5355\u6765\u8bf4\uff1a A\u7f51\u7ad9\uff0c\u4f60\u521a\u521a\u767b\u5f55\u8fc7\uff0c\u6709A\u7f51\u7ad9\u7684cookie\uff0ccookie\u91cc\u9762\u6709\u7528\u6237\u7684sessionID \u6b64\u65f6\u7528\u6237\u8bbf\u95eeB\u7f51\u7ad9\uff0cB\u7f51\u7ad9\u6b63\u5e38\u6765\u8bf4\u548cA\u7f51\u7ad9\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\uff0c\u4f46\u662fB\u7f51\u7ad9\u4e3a\u4e86\u725f\u5229\uff0c\u6f5c\u5165\u4e86A\u7f51\u7ad9\u7684\u4e00\u4e9b\u91cd\u8981\u94fe\u63a5\uff08\u6bd4\u5982A\u7f51\u7ad9\u521a\u597d\u65f6\u94f6\u884c\u7f51\u7ad9\u3001\u91cc\u9762\u6709\u4e00\u4e2a\u63a5\u53e3\u662f\u7528\u6237\u8f6c\u8d26\u7684\u63a5\u53e3\uff0c\u53ea\u8981\u8bf7\u6c42\u8be5\u63a5\u53e3\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u8f6c\u8d26\uff09\uff0c\u6b64\u65f6\u7528\u6237\u660e\u660e\u5728\u6d4f\u89c8B\u7f51\u7ad9\uff0c\u5374\u4e0d\u77e5\u4e0d\u89c9\u7684\u89e6\u53d1\u4e86\u4e00\u4e9bA\u7f51\u7ad9\u7684\u64cd\u4f5c\u6216\u8005\u6d41\u7a0b\u3002 \u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u5bf9\u4e8e\u76f8\u540c\u57df\u540d\u7684\u8bf7\u6c42\uff0c\u5982\u679c\u8be5\u7f51\u7ad9\u6709\u8bbe\u7f6ecookie\uff0c\u90a3\u4e48\u6bcf\u6b21\u6d4f\u89c8\u5668\u53d1\u8d77\u8bf7\u6c42\u65f6\uff0c\u90fd\u4f1a\u5e26\u4e0a\u76f8\u5e94\u7684cookie\uff0c\u8fd9\u662f\u4e00\u4e2a\u6d4f\u89c8\u5668\u673a\u5236\u3002 \u5982\u679c\u662f\u4f7f\u7528Token\u673a\u5236\uff0c\u5219\u4e0d\u4f1a\u51fa\u73b0\u8de8\u7ad9\u653b\u51fb\u3002 \u4f46\u662f Token \u548c Cookie \u5176\u5b9e\u672c\u8d28\u4e0a\u90fd\u5b58\u50a8\u5728\u5ba2\u6237\u7aef\uff08\u6587\u4ef6\u7cfb\u7edf\u4e5f\u597d\u3001\u5185\u5b58\u4e5f\u597d\uff09\uff0c\u5176\u5b9e\u90fd\u662f\u53ef\u80fd\u88ab\u4fee\u6539\u7684\u3002\u5982\u4f55\u786e\u4fdd\u5176\u5b89\u5168\u6027\u5462\uff1f\u5c31\u662f\u786e\u4fdd\u4f20\u8f93\u8fc7\u7a0b\u7684\u5b89\u5168\uff0c\u4f20\u8f93\u8fc7\u7a0b\u4f7f\u7528https\u8fdb\u884c\u4f20\u8f93\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48Google\u6d4f\u89c8\u5668\uff0c\u6253\u5f00\u4e00\u4e2ahttps\u9875\u9762\uff0c\u9ed8\u8ba4\u4e0d\u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\u3002\u9664\u975e\u88ab\u8de8\u7684\u90a3\u4e2a\u7f51\u7ad9\u3002 Access-Control-Allow-Origin is a CORS (Cross-Origin Resource Sharing) header. When Site A tries to fetch content from Site B, Site B can send an Access-Control-Allow-Origin response header to tell the browser that the content of this page is accessible to certain origins.","title":"\u7b2c\u5341\u7bc7 cookie\u548csession\u548ctoken\u603b\u7ed3"},{"location":"chapter_7/10_http_cookie_session_token/#_1","text":"\u672c\u7bc7\u603b\u7ed3 cookie \u3001 session \u3001 token \u7684\u4e00\u4e9b\u539f\u7406\u548c\u5b9e\u8df5\u7ecf\u9a8c","title":"\u6982\u8ff0"},{"location":"chapter_7/10_http_cookie_session_token/#1-cookie","text":"\u4f17\u6240\u5468\u77e5\uff0cHTTP \u662f\u4e00\u4e2a\u65e0\u72b6\u6001\u534f\u8bae\uff0c\u6240\u4ee5\u5ba2\u6237\u7aef\u6bcf\u6b21\u53d1\u51fa\u8bf7\u6c42\u65f6\uff0c\u4e0b\u4e00\u6b21\u8bf7\u6c42\u65e0\u6cd5\u5f97\u77e5\u4e0a\u4e00\u6b21\u8bf7\u6c42\u6240\u5305\u542b\u7684\u72b6\u6001\u6570\u636e\uff0c\u5982\u4f55\u80fd\u628a\u4e00\u4e2a\u7528\u6237\u7684\u72b6\u6001\u6570\u636e\u5173\u8054\u8d77\u6765\u5462\uff1f \u6bd4\u5982\u5728\u6dd8\u5b9d\u7684\u67d0\u4e2a\u9875\u9762\u4e2d\uff0c\u4f60\u8fdb\u884c\u4e86\u767b\u9646\u64cd\u4f5c\u3002\u5f53\u4f60\u8df3\u8f6c\u5230\u5546\u54c1\u9875\u65f6\uff0c\u670d\u52a1\u7aef\u5982\u4f55\u77e5\u9053\u4f60\u662f\u5df2\u7ecf\u767b\u9646\u7684\u72b6\u6001\uff1f 1 \u9996\u5148\u4ea7\u751f\u4e86 cookie \u8fd9\u95e8\u6280\u672f\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0ccookie \u662f http \u534f\u8bae\u7684\u4e00\u90e8\u5206\uff0c\u5b83\u7684\u5904\u7406\u5206\u4e3a\u5982\u4e0b\u51e0\u6b65\uff1a 1.1 \u670d\u52a1\u5668\u5411\u5ba2\u6237\u7aef\u53d1\u9001 cookie\u3002 1.1.1 \u901a\u5e38\u4f7f\u7528 HTTP \u534f\u8bae\u89c4\u5b9a\u7684 set-cookie \u5934\u64cd\u4f5c\u3002 1.1.2 \u89c4\u8303\u89c4\u5b9a cookie \u7684\u683c\u5f0f\u4e3a name = value \u683c\u5f0f\uff0c\u4e14\u5fc5\u987b\u5305\u542b\u8fd9\u90e8\u5206\u3002 1.2 \u6d4f\u89c8\u5668\u5c06 cookie \u4fdd\u5b58\u3002 1.3 \u6bcf\u6b21\u8bf7\u6c42\u6d4f\u89c8\u5668\u90fd\u4f1a\u5c06 cookie \u53d1\u5411\u670d\u52a1\u5668\u3002 2 \u5176\u4ed6\u53ef\u9009\u7684 cookie \u53c2\u6570\u4f1a\u5f71\u54cd\u5c06 cookie \u53d1\u9001\u7ed9\u670d\u52a1\u5668\u7aef\u7684\u8fc7\u7a0b\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u79cd\uff1a 2.1 path\uff1a\u8868\u793a cookie \u5f71\u54cd\u5230\u7684\u8def\u5f84\uff0c\u5339\u914d\u8be5\u8def\u5f84\u624d\u53d1\u9001\u8fd9\u4e2a cookie\u3002 2.2 expires \u548c maxAge\uff1a\u544a\u8bc9\u6d4f\u89c8\u5668\u8fd9\u4e2a cookie \u4ec0\u4e48\u65f6\u5019\u8fc7\u671f\uff0cexpires \u662f UTC \u683c\u5f0f\u65f6\u95f4\uff0cmaxAge \u662f cookie \u591a\u4e45\u540e\u8fc7\u671f\u7684\u76f8\u5bf9\u65f6\u95f4\u3002\u5f53\u4e0d\u8bbe\u7f6e\u8fd9\u4e24\u4e2a\u9009\u9879\u65f6\uff0c\u4f1a\u4ea7\u751f session cookie\uff0csession cookie \u662f transient \u7684\uff0c\u5f53\u7528\u6237\u5173\u95ed\u6d4f\u89c8\u5668\u65f6\uff0c\u5c31\u88ab\u6e05\u9664\u3002\u4e00\u822c\u7528\u6765\u4fdd\u5b58 session \u7684 session_id\u3002 2.3 secure\uff1a\u5f53 secure \u503c\u4e3a true \u65f6\uff0ccookie \u5728 HTTP \u4e2d\u662f\u65e0\u6548\uff0c\u5728 HTTPS \u4e2d\u624d\u6709\u6548\u3002 2.4 httpOnly\uff1a\u6d4f\u89c8\u5668\u4e0d\u5141\u8bb8\u811a\u672c\u64cd\u4f5c document.cookie \u53bb\u66f4\u6539 cookie\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u5e94\u8be5\u8bbe\u7f6e\u8fd9\u4e2a\u4e3a true\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u88ab xss \u653b\u51fb\u62ff\u5230 cookie\u3002","title":"1 \u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0cookie"},{"location":"chapter_7/10_http_cookie_session_token/#2-session","text":"1 cookie \u867d\u7136\u5f88\u65b9\u4fbf\uff0c\u4f46\u662f\u4f7f\u7528 cookie \u6709\u4e00\u4e2a\u5f88\u5927\u7684\u5f0a\u7aef\uff0ccookie \u4e2d\u7684\u6240\u6709\u6570\u636e\u5728\u5ba2\u6237\u7aef\u5c31\u53ef\u4ee5\u88ab\u4fee\u6539\uff0c\u6570\u636e\u975e\u5e38\u5bb9\u6613\u88ab\u4f2a\u9020\uff0c\u90a3\u4e48\u4e00\u4e9b\u91cd\u8981\u7684\u6570\u636e\u5c31\u4e0d\u80fd\u5b58\u653e\u5728 cookie \u4e2d\u4e86 2 \u800c\u4e14\u5982\u679c cookie \u4e2d\u6570\u636e\u5b57\u6bb5\u592a\u591a\u4f1a\u5f71\u54cd\u4f20\u8f93\u6548\u7387\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u5c31\u4ea7\u751f\u4e86 session\uff0c session \u4e2d\u7684\u6570\u636e\u662f\u4fdd\u7559\u5728\u670d\u52a1\u5668\u7aef\u7684 \u3002 cookie\u4e2d\u53ea\u5b58\u50a8 session_id (\u6216\u8005\u662f sid \u4e4b\u7c7b\u7684) \u5f53\u4f60\u6d4f\u89c8\u4e00\u4e2a\u7f51\u9875\u65f6\uff0c\u670d\u52a1\u7aef\u968f\u673a\u4ea7\u751f\u4e00\u4e2a 1024 \u6bd4\u7279\u957f\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5b58\u5728\u4f60 cookie \u4e2d\u7684 sid \u5b57\u6bb5\u4e2d\u3002\u5f53\u4f60\u4e0b\u6b21\u8bbf\u95ee\u65f6\uff0ccookie \u4f1a\u5e26\u6709\u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u6d4f\u89c8\u5668\u5c31\u77e5\u9053\u4f60\u662f\u4e0a\u6b21\u8bbf\u95ee\u8fc7\u7684\u67d0\u67d0\u67d0\uff0c\u7136\u540e\u4ece\u670d\u52a1\u5668\u7684\u5b58\u50a8\u4e2d\u53d6\u51fa\u4e0a\u6b21\u8bb0\u5f55\u5728\u4f60\u8eab\u4e0a\u7684\u6570\u636e\u3002\u7531\u4e8e\u5b57\u7b26\u4e32\u662f\u968f\u673a\u4ea7\u751f\u7684\uff0c\u800c\u4e14\u4f4d\u6570\u8db3\u591f\u591a\uff0c\u6240\u4ee5\u4e5f\u4e0d\u62c5\u5fc3\u6709\u4eba\u80fd\u591f\u4f2a\u9020\u3002 \u5bf9\u670d\u52a1\u5668\u6765\u8bf4,session \u53ef\u4ee5\u5b58\u653e\u5728 1\uff09\u5185\u5b58 2\uff09cookie\u672c\u8eab 3\uff09redis \u6216 memcached \u7b49\u7f13\u5b58\u4e2d 4\uff09\u6570\u636e\u5e93\u4e2d\u3002 \u7ebf\u4e0a\u6765\u8bf4\uff0c\u7f13\u5b58\u7684\u65b9\u6848\u6bd4\u8f83\u5e38\u89c1\uff0c","title":"2 \u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0Session"},{"location":"chapter_7/10_http_cookie_session_token/#3-token","text":"token\u7684\u76ee\u7684\u662f\uff1a no session token\u7684\u4f18\u52bf\uff1a token\u4fe1\u606f\u91cc\u9762\u5305\u542b\u4e86 \u7528\u6237ID \u3001 \u670d\u52a1\u5668\u7b7e\u540d \u4fe1\u606f\u3002\u56e0\u6b64\u5ba2\u6237\u7aef\u8fd9\u8fb9\u53d1\u9001\u8bf7\u6c42\u65f6\uff0c\u90fd\u5728Header\u91cc\u9762\u5e26\u4e0aToken\u4fe1\u606f\uff0c\u4e0d\u540c\u7684\u670d\u52a1\u5668\u90fd\u80fd\u591f\u77e5\u9053\u8be5\u7528\u6237\u662f\u8c01\u3002\u800c\u4e14\u670d\u52a1\u7aef\u5982\u679c\u6709\u591a\u53f0\u673a\u5668\uff0c\u65e0\u9700\u90e8\u7f72Redis\u7b49\u4e2d\u95f4\u4ef6. \u6700\u5e38\u7528\u7684\u573a\u666f\uff1a \u4e2d\u5fc3\u5316\u8ba4\u8bc1\u3002 \u516c\u53f8\u6709\u4e2d\u5fc3\u7684\u8ba4\u8bc1\u7cfb\u7edf\uff0c\u53ebAuth\uff0c\u6bcf\u6b21\u7528\u6237\u5148\u4eceAuth\u7cfb\u7edf\u90a3\u8fb9\u62ff\u5230AuthToken \u7528\u6237\u8bf7\u6c42\u5176\u4ed6\u7cfb\u7edf\uff08\u6bd4\u5982\u516c\u53f8\u7684CMDB\u7cfb\u7edf\uff0c\u516c\u53f8\u7684Workflow\u7cfb\u7edf\uff09\u65f6\uff0c\u90fd\u5728Header\u91cc\u9762\u5e26\u4e0aAuthToken\u3002\u5176\u4ed6\u7cfb\u7edf\u518d\u53bbAuth\u7cfb\u7edf\u90a3\u8fb9\u6821\u9a8c\uff1a\u8be5AuthToken\u662f\u5426\u5904\u4e8e\u6709\u6548\u671f\u5185\uff0c\u5982\u679c\u6709\u6548\uff0cToken\u91cc\u9762\u4e5f\u8bf4\u660e\u8be5\u7528\u6237\u7684\u7528\u6237ID","title":"3 \u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0Token"},{"location":"chapter_7/10_http_cookie_session_token/#cookie-token","text":"Cookie \u6709\u54ea\u4e9b\u5c40\u9650\u6027\uff1f 1\u3001 Cookie \u8de8\u7ad9\u662f\u4e0d\u80fd\u5171\u4eab\u7684\uff0c\u8fd9\u6837\u7684\u8bdd\u5982\u679c\u4f60\u8981\u5b9e\u73b0\u591a\u5e94\u7528\uff08\u591a\u7cfb\u7edf\uff09\u7684\u5355\u70b9\u767b\u5f55\uff08SSO\uff09\uff0c\u4f7f\u7528 Cookie \u6765\u505a\u9700\u8981\u7684\u8bdd\u5c31\u5f88\u56f0\u96be\u4e86 \u753b\u5916\u97f3: \u6240\u8c13\u5355\u70b9\u767b\u5f55\uff0c\u662f\u6307\u5728\u591a\u4e2a\u5e94\u7528\u7cfb\u7edf\u4e2d\uff0c\u7528\u6237\u53ea\u9700\u8981\u767b\u5f55\u4e00\u6b21\u5c31\u53ef\u4ee5\u8bbf\u95ee\u6240\u6709\u76f8\u4e92\u4fe1\u4efb\u7684\u5e94\u7528\u7cfb\u7edf\u3002 2 \u4f46\u5982\u679c\u7528 token \u6765\u5b9e\u73b0 SSO \u4f1a\u975e\u5e38\u7b80\u5355\uff0c\u5982\u4e0b 2.1 \u53ea\u8981\u5728 header \u4e2d\u7684 authorize \u5b57\u6bb5\uff08\u6216\u5176\u4ed6\u81ea\u5b9a\u4e49\uff09\u52a0\u4e0a token \u5373\u53ef\u5b8c\u6210\u6240\u6709\u8de8\u57df\u7ad9\u70b9\u7684\u8ba4\u8bc1\u3002 2.2 \u5728\u79fb\u52a8\u7aef\u539f\u751f\u8bf7\u6c42\u662f\u6ca1\u6709 cookie \u4e4b\u8bf4\u7684\uff0c\u800c sessionid \u4f9d\u8d56\u4e8e cookie\uff0csessionid \u5c31\u4e0d\u80fd\u7528 cookie \u6765\u4f20\u4e86\uff0c\u5982\u679c\u7528 token \u7684\u8bdd\uff0c\u7531\u4e8e\u5b83\u662f\u968f\u7740 header \u7684 authoriize \u4f20\u8fc7\u6765\u7684\uff0c\u4e5f\u5c31\u4e0d\u5b58\u5728\u6b64\u95ee\u9898\uff0c\u6362\u53e5\u8bdd\u8bf4token \u5929\u751f\u652f\u6301\u79fb\u52a8\u5e73\u53f0\uff0c\u53ef\u6269\u5c55\u6027\u597d.","title":"Cookie \u4e0e Token \u7684\u7b80\u5355\u603b\u7ed3"},{"location":"chapter_7/10_http_cookie_session_token/#tokensession","text":"\u539f\u672c\u8981\u653e\u5230\u5ba2\u6237\u7aef\u90a3\u8fb9\u7684\u6570\u636e\u8f83\u5c11\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u4f7f\u7528cookie\u5c31\u53ef\u4ee5\u3002\u4f46\u662f\u968f\u7740\u6570\u636e\u91cf\u589e\u5927\uff0c\u5c31\u4e0d\u5f97\u4e0d\u7528session\u3002\u56e0\u6b64session\u662f\u5927\u5382\u6807\u914d\uff0c\u4f8b\u5982\u6dd8\u5b9d\u3001\u4eac\u4e1c\u7b49\u7f51\u7ad9 token\u5219\u66f4\u9002\u5408\u5728\u516c\u53f8\u5185\u90e8\u7cfb\u7edf\u4e4b\u95f4\uff0c\u8fdb\u884cAPI\u8c03\u7528\u65f6\u7684\u8ba4\u8bc1\uff0c\u63a8\u8350\u8bbe\u7f6e\u4e00\u4e2a\u6bd4\u8f83\u77ed\u7684\u6709\u6548\u671f \u76f8\u540c\u70b9\uff1a \u90fd\u662f\u4e3a\u4e86\u8868\u660e\u7528\u6237ID\u3001\u7ed9\u7528\u6237\u63d0\u524d\u52a0\u8f7d\u597d\u4e00\u4e9b\u6570\u636e","title":"token\u548csession\u7684\u6bd4\u8f83"},{"location":"chapter_7/10_http_cookie_session_token/#4-csrf","text":"\u4e2d\u6587\u540d\u79f0\u53eb\uff1a\u8de8\u7ad9\u653b\u51fb \u7b80\u5355\u6765\u8bf4\uff1a A\u7f51\u7ad9\uff0c\u4f60\u521a\u521a\u767b\u5f55\u8fc7\uff0c\u6709A\u7f51\u7ad9\u7684cookie\uff0ccookie\u91cc\u9762\u6709\u7528\u6237\u7684sessionID \u6b64\u65f6\u7528\u6237\u8bbf\u95eeB\u7f51\u7ad9\uff0cB\u7f51\u7ad9\u6b63\u5e38\u6765\u8bf4\u548cA\u7f51\u7ad9\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\uff0c\u4f46\u662fB\u7f51\u7ad9\u4e3a\u4e86\u725f\u5229\uff0c\u6f5c\u5165\u4e86A\u7f51\u7ad9\u7684\u4e00\u4e9b\u91cd\u8981\u94fe\u63a5\uff08\u6bd4\u5982A\u7f51\u7ad9\u521a\u597d\u65f6\u94f6\u884c\u7f51\u7ad9\u3001\u91cc\u9762\u6709\u4e00\u4e2a\u63a5\u53e3\u662f\u7528\u6237\u8f6c\u8d26\u7684\u63a5\u53e3\uff0c\u53ea\u8981\u8bf7\u6c42\u8be5\u63a5\u53e3\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u8f6c\u8d26\uff09\uff0c\u6b64\u65f6\u7528\u6237\u660e\u660e\u5728\u6d4f\u89c8B\u7f51\u7ad9\uff0c\u5374\u4e0d\u77e5\u4e0d\u89c9\u7684\u89e6\u53d1\u4e86\u4e00\u4e9bA\u7f51\u7ad9\u7684\u64cd\u4f5c\u6216\u8005\u6d41\u7a0b\u3002 \u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u5bf9\u4e8e\u76f8\u540c\u57df\u540d\u7684\u8bf7\u6c42\uff0c\u5982\u679c\u8be5\u7f51\u7ad9\u6709\u8bbe\u7f6ecookie\uff0c\u90a3\u4e48\u6bcf\u6b21\u6d4f\u89c8\u5668\u53d1\u8d77\u8bf7\u6c42\u65f6\uff0c\u90fd\u4f1a\u5e26\u4e0a\u76f8\u5e94\u7684cookie\uff0c\u8fd9\u662f\u4e00\u4e2a\u6d4f\u89c8\u5668\u673a\u5236\u3002 \u5982\u679c\u662f\u4f7f\u7528Token\u673a\u5236\uff0c\u5219\u4e0d\u4f1a\u51fa\u73b0\u8de8\u7ad9\u653b\u51fb\u3002 \u4f46\u662f Token \u548c Cookie \u5176\u5b9e\u672c\u8d28\u4e0a\u90fd\u5b58\u50a8\u5728\u5ba2\u6237\u7aef\uff08\u6587\u4ef6\u7cfb\u7edf\u4e5f\u597d\u3001\u5185\u5b58\u4e5f\u597d\uff09\uff0c\u5176\u5b9e\u90fd\u662f\u53ef\u80fd\u88ab\u4fee\u6539\u7684\u3002\u5982\u4f55\u786e\u4fdd\u5176\u5b89\u5168\u6027\u5462\uff1f\u5c31\u662f\u786e\u4fdd\u4f20\u8f93\u8fc7\u7a0b\u7684\u5b89\u5168\uff0c\u4f20\u8f93\u8fc7\u7a0b\u4f7f\u7528https\u8fdb\u884c\u4f20\u8f93\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48Google\u6d4f\u89c8\u5668\uff0c\u6253\u5f00\u4e00\u4e2ahttps\u9875\u9762\uff0c\u9ed8\u8ba4\u4e0d\u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\u3002\u9664\u975e\u88ab\u8de8\u7684\u90a3\u4e2a\u7f51\u7ad9\u3002 Access-Control-Allow-Origin is a CORS (Cross-Origin Resource Sharing) header. When Site A tries to fetch content from Site B, Site B can send an Access-Control-Allow-Origin response header to tell the browser that the content of this page is accessible to certain origins.","title":"4 CSRF\u653b\u51fb\u4ecb\u7ecd"},{"location":"chapter_7/1_sync_file/","text":"\u4e00 \u8bf4\u660e \u672c\u7bc7\u535a\u5ba2\u7528\u4e8e\u8bb0\u5f55\u548c\u603b\u7ed3\u8fd0\u7ef4\u5de5\u4f5c\u4e2d\u5728\u4e0d\u540c\u4e3b\u673a\u4e4b\u95f4\u4f20\u8f93\u6587\u4ef6\u7684\u4e00\u4e9b\u6280\u80fd \u4e8c \u7ebf\u4e0a\u4e0d\u540c\u7684Linux\u4e3b\u673a\u4e4b\u95f4 (\u4e00) \u901a\u8fc7nc\u547d\u4ee4\u4f20\u8f93 \u5728\u76ee\u6807\u4e3b\u673a\u4e0a\u6267\u884c: nc -l 1234 |tar -xvf - \u5728\u88ab\u8fc1\u79fb\u673a\u4e0a\u6267\u884c: tar -cvf - \u76ee\u5f55\u6216\u8005\u6587\u4ef6 |nc \u76ee\u6807\u673aIP 1234 \u80fd\u5b9e\u73b0\u5757\u7ea7\u522b\u7684\u538b\u7f29\u8fc1\u79fb,\u901f\u5ea6\u662f\u6700\u5feb\u7684,\u9047\u5230\u5927\u91cf\u96f6\u788e\u5c0f\u6587\u4ef6\u8981\u540c\u6b65\u7684\u65f6\u5019\u5f88\u6709\u7528\u3002 Redhat\u7cfb\u5217\u7cfb\u7edf\u548cDebian\u7cfb\u5217\u7684\u7cfb\u7edf\u7684\u5177\u4f53\u547d\u4ee4\u7565\u6709\u4e0d\u540c. (\u4e8c) \u901a\u8fc7http\u670d\u52a1\u4e0b\u8f7d \u5728\u88ab\u8fc1\u79fb\u673a\u5668\u4e0a\u6267\u884c: python -m SimpleHTTPServer 9000 \u5728\u76ee\u6807\u4e3b\u673a\u4e0a\u6267\u884c: wget http://\u76ee\u6807IP:9000/\u6587\u4ef6\u540d ,\u8fdb\u884c\u4e0b\u8f7d (\u4e09) \u5176\u4ed6\u80fd\u60f3\u5230\u7684\u65b9\u5f0f scp ftp\u4e0b\u8f7d rsync \u4e09 \u7ebf\u4e0a\u4e3b\u673a\u548c\u672c\u673a\u4e4b\u95f4 \u535a\u4e3b\u4e00\u76f4\u4f7f\u7528\u7684Mac\u7cfb\u7edf,\u6240\u4ee5\u8fd9\u8fb9\u672c\u673a\u662f\u6307Mac\u7cfb\u7edf (\u4e00) rsync\u547d\u4ee4 rsync -avz -e 'ssh -p 58422' \u76ee\u6807IP:/path/to/file ./ \u628a\u76ee\u6807\u673a\u5668\u4e0a\u7684\u6587\u4ef6,copy\u5230\u672c\u5730 rsync -avz -e 'ssh -p 58422' /path/to/file \u76ee\u6807IP:/path/to/dir \u628a\u672c\u673a\u6587\u4ef6copy\u5230\u76ee\u6807\u673a\u5668\u7684\u67d0\u4e2a\u76ee\u5f55\u4e0b (\u4e8c) rz/sz Linux\u4e3b\u673a\u4e0a\u9700\u8981\u5b89\u88c5lrzsz\u5305. \u672c\u5730\u8981\u6c42\u4f7f\u7528SecureCRT. \u5982\u679c\u662fWindows,\u8fd8\u53ef\u4ee5\u4f7f\u7528Xshell. Mac\u4e0b\u5e38\u7528\u7684ssh\u5ba2\u6237\u7aefiTerm2\u9ed8\u8ba4\u5e76\u4e0d\u652f\u6301. \u5176\u672c\u8d28\u662f\u662f\u9700\u89812\u8fb9\u540c\u65f6\u652f\u6301\u67d0\u4e9b\u6587\u4ef6\u4f20\u8f93\u534f\u8bae(Xmodem/Ymodem/Zmodem) sz \u547d\u4ee4\u7528\u4e8e\u4eceLinux\u4e3b\u673a\u4e0b\u8f7d\u6587\u4ef6. rz \u547d\u4ee4\u7528\u4e8e\u4e0a\u4f20\u672c\u5730\u6587\u4ef6\u5230Linux\u4e3b\u673a.","title":"\u7b2c\u4e00\u7bc7 \u4e0d\u540c\u4e3b\u673a\u4e4b\u95f4\u7684\u6587\u4ef6\u4f20\u8f93"},{"location":"chapter_7/1_sync_file/#_1","text":"\u672c\u7bc7\u535a\u5ba2\u7528\u4e8e\u8bb0\u5f55\u548c\u603b\u7ed3\u8fd0\u7ef4\u5de5\u4f5c\u4e2d\u5728\u4e0d\u540c\u4e3b\u673a\u4e4b\u95f4\u4f20\u8f93\u6587\u4ef6\u7684\u4e00\u4e9b\u6280\u80fd","title":"\u4e00 \u8bf4\u660e"},{"location":"chapter_7/1_sync_file/#linux","text":"","title":"\u4e8c \u7ebf\u4e0a\u4e0d\u540c\u7684Linux\u4e3b\u673a\u4e4b\u95f4"},{"location":"chapter_7/1_sync_file/#nc","text":"\u5728\u76ee\u6807\u4e3b\u673a\u4e0a\u6267\u884c: nc -l 1234 |tar -xvf - \u5728\u88ab\u8fc1\u79fb\u673a\u4e0a\u6267\u884c: tar -cvf - \u76ee\u5f55\u6216\u8005\u6587\u4ef6 |nc \u76ee\u6807\u673aIP 1234 \u80fd\u5b9e\u73b0\u5757\u7ea7\u522b\u7684\u538b\u7f29\u8fc1\u79fb,\u901f\u5ea6\u662f\u6700\u5feb\u7684,\u9047\u5230\u5927\u91cf\u96f6\u788e\u5c0f\u6587\u4ef6\u8981\u540c\u6b65\u7684\u65f6\u5019\u5f88\u6709\u7528\u3002 Redhat\u7cfb\u5217\u7cfb\u7edf\u548cDebian\u7cfb\u5217\u7684\u7cfb\u7edf\u7684\u5177\u4f53\u547d\u4ee4\u7565\u6709\u4e0d\u540c.","title":"(\u4e00) \u901a\u8fc7nc\u547d\u4ee4\u4f20\u8f93"},{"location":"chapter_7/1_sync_file/#http","text":"\u5728\u88ab\u8fc1\u79fb\u673a\u5668\u4e0a\u6267\u884c: python -m SimpleHTTPServer 9000 \u5728\u76ee\u6807\u4e3b\u673a\u4e0a\u6267\u884c: wget http://\u76ee\u6807IP:9000/\u6587\u4ef6\u540d ,\u8fdb\u884c\u4e0b\u8f7d","title":"(\u4e8c) \u901a\u8fc7http\u670d\u52a1\u4e0b\u8f7d"},{"location":"chapter_7/1_sync_file/#_2","text":"scp ftp\u4e0b\u8f7d rsync","title":"(\u4e09) \u5176\u4ed6\u80fd\u60f3\u5230\u7684\u65b9\u5f0f"},{"location":"chapter_7/1_sync_file/#_3","text":"\u535a\u4e3b\u4e00\u76f4\u4f7f\u7528\u7684Mac\u7cfb\u7edf,\u6240\u4ee5\u8fd9\u8fb9\u672c\u673a\u662f\u6307Mac\u7cfb\u7edf","title":"\u4e09 \u7ebf\u4e0a\u4e3b\u673a\u548c\u672c\u673a\u4e4b\u95f4"},{"location":"chapter_7/1_sync_file/#rsync","text":"rsync -avz -e 'ssh -p 58422' \u76ee\u6807IP:/path/to/file ./ \u628a\u76ee\u6807\u673a\u5668\u4e0a\u7684\u6587\u4ef6,copy\u5230\u672c\u5730 rsync -avz -e 'ssh -p 58422' /path/to/file \u76ee\u6807IP:/path/to/dir \u628a\u672c\u673a\u6587\u4ef6copy\u5230\u76ee\u6807\u673a\u5668\u7684\u67d0\u4e2a\u76ee\u5f55\u4e0b","title":"(\u4e00) rsync\u547d\u4ee4"},{"location":"chapter_7/1_sync_file/#rzsz","text":"Linux\u4e3b\u673a\u4e0a\u9700\u8981\u5b89\u88c5lrzsz\u5305. \u672c\u5730\u8981\u6c42\u4f7f\u7528SecureCRT. \u5982\u679c\u662fWindows,\u8fd8\u53ef\u4ee5\u4f7f\u7528Xshell. Mac\u4e0b\u5e38\u7528\u7684ssh\u5ba2\u6237\u7aefiTerm2\u9ed8\u8ba4\u5e76\u4e0d\u652f\u6301. \u5176\u672c\u8d28\u662f\u662f\u9700\u89812\u8fb9\u540c\u65f6\u652f\u6301\u67d0\u4e9b\u6587\u4ef6\u4f20\u8f93\u534f\u8bae(Xmodem/Ymodem/Zmodem) sz \u547d\u4ee4\u7528\u4e8e\u4eceLinux\u4e3b\u673a\u4e0b\u8f7d\u6587\u4ef6. rz \u547d\u4ee4\u7528\u4e8e\u4e0a\u4f20\u672c\u5730\u6587\u4ef6\u5230Linux\u4e3b\u673a.","title":"(\u4e8c) rz/sz"},{"location":"chapter_7/2_sre_tools_python/","text":"\u4e00 \u4ee5\u66f4\u53cb\u597d\u7684\u65b9\u5f0f\u67e5\u770bjson\u6587\u4ef6 \u6bd4\u5982\u6709\u4e2ajson\u6587\u4ef6\u5185\u5bb9\u662f\u8fd9\u6837: \u4f7f\u7528json.tool,\u4f7f\u5f97\u663e\u793a\u66f4\u52a0\u53cb\u597d: \u6587\u4ef6\u5185\u5bb9\u590d\u6742\u7684\u65f6\u5019,\u6548\u679c\u66f4\u597d. \u4e8c \u4f7f\u7528python\u89e3\u538b\u7f29\u548c\u538b\u7f29zip\u5305 \u4f7f\u7528zipfile\u6a21\u5757\u63d0\u4f9b\u4e86\u547d\u4ee4\u884c\u63a5\u53e3\u3002\u8bfb\u8005\u4ee5\u540e\u53ef\u4ee5\u5728Linux\u4e0b\uff0c\u4f7f\u7528Python\u547d\u4ee4\u521b\u5efa\u548c\u89e3\u538bzip\u683c\u5f0f\u7684\u538b\u7f29\u5305\u3002zipfile\u6a21\u5757\u63d0\u4f9b\u7684\u547d\u4ee4\u884c\u63a5\u53e3\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u9009\u9879\uff1a -l \u663e\u793azip\u683c\u5f0f\u538b\u7f29\u5305\u4e2d\u7684\u6587\u4ef6\u5217\u8868 -c \u521b\u5efazip\u683c\u5f0f\u538b\u7f29\u5305 -e \u63d0\u53d6zip\u683c\u5f0f\u538b\u7f29\u5305 -t \u9a8c\u8bc1\u6587\u4ef6\u662f\u4e00\u4e2a\u6709\u6548\u7684zip\u683c\u5f0f\u538b\u7f29\u5305 \u4e0b\u9762\u7684\u547d\u4ee4\u4f7f\u7528Python\u7684zipfile\u6a21\u5757\u63d0\u4f9b\u7684\u547d\u4ee4\u884c\u63a5\u53e3\uff0c\u521b\u5efa\u3001\u67e5\u770b\u548c\u63d0\u53d6zip\u683c\u5f0f\u538b\u7f29\u5305\uff1a python -m zipfile -c monty.zip spam.txt eggs.txt python -m zipfile -e monty.zip target-dir/ python -m zipfile -l monty.zip \u4e09 \u4f7f\u7528python\u811a\u672c\u5360\u7528\u6307\u5b9a\u5927\u5c0f\u7684\u5185\u5b58 #!/usr/bin/python # -*- coding: utf-8 -*- import sys import re import time def print_help(): print 'Usage: ' print ' python mem.py 100MB' print ' python mem.py 1GB' if __name__ == \"__main__\": if len(sys.argv) == 2: pattern = re.compile('^(\\d*)([M|G]B)$') match = pattern.match(sys.argv[1].upper()) if match: num = int(match.group(1)) unit = match.group(2) if unit == 'MB': s = ' ' * (num * 1024 * 1024) else: s = ' ' * (num * 1024 * 1024 * 1024) time.sleep(40000) else: print_help() else: print_help() \u628a\u4e0a\u9762\u7684\u811a\u672c\u4fdd\u5b58\u4e3amem.py, python mem.py 100MB \u5373\u53ef\u7533\u8bf7100MB\u5185\u5b58 \u56db \u4f7f\u7528python\u811a\u672c\u9020\u6210\u9ad8CPU\u5229\u7528\u7387 # coding:utf-8 \"\"\" runing.py -c 2 -t 0.01 -m 10 -c cpu\u6838\u6570\uff0c\u4e0d\u52a0-c\u53c2\u6570\u4e3a\u6700\u5927\u6838\u6570 -t cpu\u8fd0\u7b97\u9891\u7387\u65f6\u95f4\uff0c\u95f4\u9694\uff0c\u8d8a\u5c0f\u5360\u7528\u8d8a\u9ad8 -m \u5185\u5b58\u5360\u7528\uff0c10MB \"\"\" import sys import time from time import clock import argparse from multiprocessing import Process from multiprocessing import cpu_count import math # import tempfile # # \u5c4f\u853d Traceback\u4fe1\u606f # sys.stderr=tempfile.TemporaryFile() def exec_func(bt): while True: for i in range(0, 9600000): pass time.sleep(bt) if __name__ == \"__main__\": parse = argparse.ArgumentParser(description='runing') parse.add_argument( \"-c\", \"--count\", default= cpu_count(), help='cpu count' ) parse.add_argument( \"-t\", \"--time\", default= 0.01, help='cpu time' ) parse.add_argument( \"-m\", \"--memory\", default= 10, help='memory' ) args = parse.parse_args() cpu_logical_count = int(args.count) cpu_sleep_time = args.time memory_used_mb = int(args.memory) try: cpu_sleep_time = int(args.time) except ValueError: try: cpu_sleep_time = float(args.time) except ValueError as ex: raise ValueError(ex) _doc = \"\"\" runing.py -c 2 -t 0.01 -m 1000 -c \u6307\u5b9acpu\u6838\u6570\uff0c\u4e0d\u52a0-c\u53c2\u6570\u9ed8\u8ba4\u4e3a\u5f53\u524dcpu\u6700\u5927\u6838\u6570 -t cpu\u8fd0\u7b97\u9891\u7387\u65f6\u95f4\uff0c\u95f4\u9694\uff0c\u8d8a\u5c0f\u5360\u7528\u8d8a\u9ad8 -m \u5185\u5b58\u5360\u7528\uff0c1000MB CPU\u4f7f\u7528\u7387\u9700\u8981\u624b\u52a8\u589e\u52a0\u51cf\u5c11-t\u53c2\u6570\u6765\u8fbe\u5230\uff0c\u9884\u671f\u4f7f\u7528\u7387\u3002 \"\"\" print(\"\\n====================\u4f7f\u7528\u8bf4\u660e=========================\") print(\"{}\".format(_doc)) print(\"\\n====================================================\") print('\\n\u5f53\u524d\u5360\u7528CPU\u6838\u6570:{}'.format(cpu_logical_count)) print('\\n\u5185\u5b58\u9884\u8ba1\u5360\u7528:{}MB'.format(memory_used_mb)) print('\\n\u8d44\u6e90\u6d6a\u8d39\u4e2d......') try: # \u5185\u5b58\u5360\u7528 s = ' ' * (memory_used_mb * 1024 * 1024) except MemoryError: print(\"\u5269\u4f59\u5185\u5b58\u4e0d\u8db3\uff0c\u5185\u5b58\u6709\u6ea2\u51fa......\") try: p = Process(target=exec_func, args=(\"bt\",)) ps_list = [] for i in range(0, cpu_logical_count): ps_list.append(Process(target=exec_func, args=(cpu_sleep_time,))) for p in ps_list: p.start() for p in ps_list: p.join() except KeyboardInterrupt: print(\"\u8d44\u6e90\u6d6a\u8d39\u7ed3\u675f!\u201d) \u628a\u4e0a\u9762\u7684\u811a\u672c\u4fdd\u5b58\u4e3acpu.py python cpu.py \u5373\u53ef\u9020\u621090%\u4ee5\u4e0a\u7684CPU\u5229\u7528\u7387","title":"\u7b2c\u4e8c\u7bc7 \u8fd0\u7ef4\u751f\u4ea7\u529b\u5de5\u5177(python\u7bc7)"},{"location":"chapter_7/2_sre_tools_python/#json","text":"\u6bd4\u5982\u6709\u4e2ajson\u6587\u4ef6\u5185\u5bb9\u662f\u8fd9\u6837: \u4f7f\u7528json.tool,\u4f7f\u5f97\u663e\u793a\u66f4\u52a0\u53cb\u597d: \u6587\u4ef6\u5185\u5bb9\u590d\u6742\u7684\u65f6\u5019,\u6548\u679c\u66f4\u597d.","title":"\u4e00 \u4ee5\u66f4\u53cb\u597d\u7684\u65b9\u5f0f\u67e5\u770bjson\u6587\u4ef6"},{"location":"chapter_7/2_sre_tools_python/#pythonzip","text":"\u4f7f\u7528zipfile\u6a21\u5757\u63d0\u4f9b\u4e86\u547d\u4ee4\u884c\u63a5\u53e3\u3002\u8bfb\u8005\u4ee5\u540e\u53ef\u4ee5\u5728Linux\u4e0b\uff0c\u4f7f\u7528Python\u547d\u4ee4\u521b\u5efa\u548c\u89e3\u538bzip\u683c\u5f0f\u7684\u538b\u7f29\u5305\u3002zipfile\u6a21\u5757\u63d0\u4f9b\u7684\u547d\u4ee4\u884c\u63a5\u53e3\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u9009\u9879\uff1a -l \u663e\u793azip\u683c\u5f0f\u538b\u7f29\u5305\u4e2d\u7684\u6587\u4ef6\u5217\u8868 -c \u521b\u5efazip\u683c\u5f0f\u538b\u7f29\u5305 -e \u63d0\u53d6zip\u683c\u5f0f\u538b\u7f29\u5305 -t \u9a8c\u8bc1\u6587\u4ef6\u662f\u4e00\u4e2a\u6709\u6548\u7684zip\u683c\u5f0f\u538b\u7f29\u5305 \u4e0b\u9762\u7684\u547d\u4ee4\u4f7f\u7528Python\u7684zipfile\u6a21\u5757\u63d0\u4f9b\u7684\u547d\u4ee4\u884c\u63a5\u53e3\uff0c\u521b\u5efa\u3001\u67e5\u770b\u548c\u63d0\u53d6zip\u683c\u5f0f\u538b\u7f29\u5305\uff1a python -m zipfile -c monty.zip spam.txt eggs.txt python -m zipfile -e monty.zip target-dir/ python -m zipfile -l monty.zip","title":"\u4e8c \u4f7f\u7528python\u89e3\u538b\u7f29\u548c\u538b\u7f29zip\u5305"},{"location":"chapter_7/2_sre_tools_python/#python","text":"#!/usr/bin/python # -*- coding: utf-8 -*- import sys import re import time def print_help(): print 'Usage: ' print ' python mem.py 100MB' print ' python mem.py 1GB' if __name__ == \"__main__\": if len(sys.argv) == 2: pattern = re.compile('^(\\d*)([M|G]B)$') match = pattern.match(sys.argv[1].upper()) if match: num = int(match.group(1)) unit = match.group(2) if unit == 'MB': s = ' ' * (num * 1024 * 1024) else: s = ' ' * (num * 1024 * 1024 * 1024) time.sleep(40000) else: print_help() else: print_help() \u628a\u4e0a\u9762\u7684\u811a\u672c\u4fdd\u5b58\u4e3amem.py, python mem.py 100MB \u5373\u53ef\u7533\u8bf7100MB\u5185\u5b58","title":"\u4e09 \u4f7f\u7528python\u811a\u672c\u5360\u7528\u6307\u5b9a\u5927\u5c0f\u7684\u5185\u5b58"},{"location":"chapter_7/2_sre_tools_python/#pythoncpu","text":"# coding:utf-8 \"\"\" runing.py -c 2 -t 0.01 -m 10 -c cpu\u6838\u6570\uff0c\u4e0d\u52a0-c\u53c2\u6570\u4e3a\u6700\u5927\u6838\u6570 -t cpu\u8fd0\u7b97\u9891\u7387\u65f6\u95f4\uff0c\u95f4\u9694\uff0c\u8d8a\u5c0f\u5360\u7528\u8d8a\u9ad8 -m \u5185\u5b58\u5360\u7528\uff0c10MB \"\"\" import sys import time from time import clock import argparse from multiprocessing import Process from multiprocessing import cpu_count import math # import tempfile # # \u5c4f\u853d Traceback\u4fe1\u606f # sys.stderr=tempfile.TemporaryFile() def exec_func(bt): while True: for i in range(0, 9600000): pass time.sleep(bt) if __name__ == \"__main__\": parse = argparse.ArgumentParser(description='runing') parse.add_argument( \"-c\", \"--count\", default= cpu_count(), help='cpu count' ) parse.add_argument( \"-t\", \"--time\", default= 0.01, help='cpu time' ) parse.add_argument( \"-m\", \"--memory\", default= 10, help='memory' ) args = parse.parse_args() cpu_logical_count = int(args.count) cpu_sleep_time = args.time memory_used_mb = int(args.memory) try: cpu_sleep_time = int(args.time) except ValueError: try: cpu_sleep_time = float(args.time) except ValueError as ex: raise ValueError(ex) _doc = \"\"\" runing.py -c 2 -t 0.01 -m 1000 -c \u6307\u5b9acpu\u6838\u6570\uff0c\u4e0d\u52a0-c\u53c2\u6570\u9ed8\u8ba4\u4e3a\u5f53\u524dcpu\u6700\u5927\u6838\u6570 -t cpu\u8fd0\u7b97\u9891\u7387\u65f6\u95f4\uff0c\u95f4\u9694\uff0c\u8d8a\u5c0f\u5360\u7528\u8d8a\u9ad8 -m \u5185\u5b58\u5360\u7528\uff0c1000MB CPU\u4f7f\u7528\u7387\u9700\u8981\u624b\u52a8\u589e\u52a0\u51cf\u5c11-t\u53c2\u6570\u6765\u8fbe\u5230\uff0c\u9884\u671f\u4f7f\u7528\u7387\u3002 \"\"\" print(\"\\n====================\u4f7f\u7528\u8bf4\u660e=========================\") print(\"{}\".format(_doc)) print(\"\\n====================================================\") print('\\n\u5f53\u524d\u5360\u7528CPU\u6838\u6570:{}'.format(cpu_logical_count)) print('\\n\u5185\u5b58\u9884\u8ba1\u5360\u7528:{}MB'.format(memory_used_mb)) print('\\n\u8d44\u6e90\u6d6a\u8d39\u4e2d......') try: # \u5185\u5b58\u5360\u7528 s = ' ' * (memory_used_mb * 1024 * 1024) except MemoryError: print(\"\u5269\u4f59\u5185\u5b58\u4e0d\u8db3\uff0c\u5185\u5b58\u6709\u6ea2\u51fa......\") try: p = Process(target=exec_func, args=(\"bt\",)) ps_list = [] for i in range(0, cpu_logical_count): ps_list.append(Process(target=exec_func, args=(cpu_sleep_time,))) for p in ps_list: p.start() for p in ps_list: p.join() except KeyboardInterrupt: print(\"\u8d44\u6e90\u6d6a\u8d39\u7ed3\u675f!\u201d) \u628a\u4e0a\u9762\u7684\u811a\u672c\u4fdd\u5b58\u4e3acpu.py python cpu.py \u5373\u53ef\u9020\u621090%\u4ee5\u4e0a\u7684CPU\u5229\u7528\u7387","title":"\u56db \u4f7f\u7528python\u811a\u672c\u9020\u6210\u9ad8CPU\u5229\u7528\u7387"},{"location":"chapter_7/3_sre_tools_website/","text":"\u4e00 \u8bf4\u660e \u8fd9\u7bc7\u535a\u6587\u4e2d,\u8bb0\u5f55\u901a\u8fc7\u5404\u79cd\u6e20\u9053\u6536\u83b7\u7684\u795e\u5947\u7f51\u7ad9,\u4e3b\u8981\u7528\u4e8e\u63d0\u5347\u5e73\u65f6\u8fd0\u7ef4\u5de5\u4f5c\u4e2d\u7684\u6548\u7387. \u5927\u90e8\u5206\u662f\u8f6c\u8f7d\u800c\u6765. \u4e8c \u53d8\u91cf\u547d\u540d\u7684\u7f51\u7ad9 \u5199\u4ee3\u7801\u65f6,\u7ecf\u5e38\u9700\u8981\u7ed9\u5404\u79cd\u53d8\u91cf\u547d\u540d,\u6709\u65f6\u5019\u7ed9\u53d8\u91cf\u547d\u540d\u786e\u5b9e\u5934\u75bc,\u4e00\u4e2a\u597d\u7684\u53d8\u91cf\u547d\u540d\u8981\u80fd\u591f\u6e05\u6670\u7684\u8868\u8fbe\u7a0b\u5e8f\u5458\u7684\u610f\u56fe. \u5e76\u4e14\u65b9\u4fbf\u8fc7\u6bb5\u65f6\u95f4\u56de\u987e\u4ee3\u7801\u65f6,\u5feb\u901f\u56de\u5fc6\u8d77\u5f53\u65f6\u7684\u601d\u8def. https://unbug.github.io/codelf/ \u8fd9\u4e2a\u795e\u5947\u7684\u7f51\u7ad9,\u53ef\u4ee5\u6839\u636e\u4f60\u8f93\u5165\u7684\u5173\u952e\u5b57,\u63a8\u8350\u4e00\u5806\u7684\u53d8\u91cf\u540d.\u5feb\u53bb\u8bd5\u8bd5\u5427. \u4e09 \u4f18\u54c1PPT \u4e00\u4e2a\u5b8c\u5168\u514d\u8d39\u7684PPT\u7d20\u6750\u4e0b\u8f7d\u7f51\u7ad9\uff0c\u5728\u8fd9\u4e2a\u7f51\u7ad9\u8fde\u6ce8\u518c\u767b\u5f55\u90fd\u4e0d\u9700\u8981\uff0c\u627e\u5230\u81ea\u5df1\u559c\u6b22\u7684\u6a21\u7248\u6216\u7d20\u6750\u5c31\u53ef\u4ee5\u76f4\u63a5\u4e00\u952e\u4e0b\u8f7d\uff0c\u6ca1\u6709\u4efb\u4f55\u5957\u8def\uff0c\u8fd9\u4e2a\u7f51\u7ad9\u6211\u76f8\u4fe1\u5927\u591a\u6570\u4eba\u90fd\u662f\u9700\u8981\u7684\uff01 http://www.ypppt.com/ \u56db \u4e00\u4e2a\u4e0b\u8f7dChrome\u6d4f\u89c8\u5668\u79bb\u7ebf\u63d2\u4ef6\u7684\u7ad9\u70b9 \u4e00\u4e2a\u4e0b\u8f7dChrome\u6d4f\u89c8\u5668\u79bb\u7ebf\u63d2\u4ef6\u7684\u7ad9\u70b9\uff0c\u5bf9\u4e8e\u5f88\u591a\u5c0f\u4f19\u4eec\u6765\u8bf4\u8fd8\u662f\u975e\u5e38\u9700\u8981\u7684\uff0c\u5728\u8fd9\u91cc\u5df2\u7ecf\u4e3a\u6211\u4eec\u7f57\u5217\u4e86\u5f88\u591a\u7684\u5206\u7c7b\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u627e\u81ea\u5df1\u9700\u8981\u7684\u6269\u5c55\u63d2\u4ef6\u5b89\u88c5\u6765\u5f3a\u5316\u6d4f\u89c8\u5668\uff01 https://chrome.zzzmh.cn/ \u4e94 \u4e00\u4e2a\u4e34\u65f6\u6587\u4ef6\u4f20\u8f93\u5e73\u53f0 \u6700\u597d\u7528\u7684\u4e34\u65f6\u6587\u4ef6\u4f20\u8f93\u5e73\u53f0\uff0c\u522b\u8ddf\u6211\u63d0\u67d0\u5ea6\u76d8\uff0c\u4e0d\u5f00\u4f1a\u5458\u901f\u5ea6\u5c3110KB/s\uff0c\u6839\u672c\u4e0d\u80fd\u5fcd\uff0c\u6709\u65f6\u5019\u7ed9\u670b\u53cb\u53d1\u4e00\u4e2a\u6e38\u620f\u53d1\u4e00\u4e2a\u89c6\u9891\u90a3\u4e48\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\uff0c\u4e0b\u8f7d\u4e0d\u9650\u901f\uff0c\u652f\u6301\u6587\u4ef6\u4e0b\u8f7d\u540e\u81ea\u52a8\u9500\u6bc1\uff01 https://cowtransfer.com \u8fd9\u4e2a\u7f51\u7ad9\u611f\u89c9\u9002\u5408\u5c0f\u767d\u7528\u6237 \u53e6\u5916\u5f97\u914d\u5957\u4e00\u4e2a\u65b9\u4fbf\u52a0\u5bc6\u89e3\u5bc6\u7684\u65b9\u6848,\u4e0d\u7136\u6587\u4ef6\u4e0a\u4f20\u4e0a\u53bb\u4e4b\u540e\u4e5f\u4e0d\u5b89\u5168","title":"\u7b2c\u4e09\u7bc7 \u8fd0\u7ef4\u751f\u4ea7\u529b\u5de5\u5177(\u7f51\u7ad9\u5de5\u5177)"},{"location":"chapter_7/3_sre_tools_website/#_1","text":"\u8fd9\u7bc7\u535a\u6587\u4e2d,\u8bb0\u5f55\u901a\u8fc7\u5404\u79cd\u6e20\u9053\u6536\u83b7\u7684\u795e\u5947\u7f51\u7ad9,\u4e3b\u8981\u7528\u4e8e\u63d0\u5347\u5e73\u65f6\u8fd0\u7ef4\u5de5\u4f5c\u4e2d\u7684\u6548\u7387. \u5927\u90e8\u5206\u662f\u8f6c\u8f7d\u800c\u6765.","title":"\u4e00 \u8bf4\u660e"},{"location":"chapter_7/3_sre_tools_website/#_2","text":"\u5199\u4ee3\u7801\u65f6,\u7ecf\u5e38\u9700\u8981\u7ed9\u5404\u79cd\u53d8\u91cf\u547d\u540d,\u6709\u65f6\u5019\u7ed9\u53d8\u91cf\u547d\u540d\u786e\u5b9e\u5934\u75bc,\u4e00\u4e2a\u597d\u7684\u53d8\u91cf\u547d\u540d\u8981\u80fd\u591f\u6e05\u6670\u7684\u8868\u8fbe\u7a0b\u5e8f\u5458\u7684\u610f\u56fe. \u5e76\u4e14\u65b9\u4fbf\u8fc7\u6bb5\u65f6\u95f4\u56de\u987e\u4ee3\u7801\u65f6,\u5feb\u901f\u56de\u5fc6\u8d77\u5f53\u65f6\u7684\u601d\u8def. https://unbug.github.io/codelf/ \u8fd9\u4e2a\u795e\u5947\u7684\u7f51\u7ad9,\u53ef\u4ee5\u6839\u636e\u4f60\u8f93\u5165\u7684\u5173\u952e\u5b57,\u63a8\u8350\u4e00\u5806\u7684\u53d8\u91cf\u540d.\u5feb\u53bb\u8bd5\u8bd5\u5427.","title":"\u4e8c \u53d8\u91cf\u547d\u540d\u7684\u7f51\u7ad9"},{"location":"chapter_7/3_sre_tools_website/#ppt","text":"\u4e00\u4e2a\u5b8c\u5168\u514d\u8d39\u7684PPT\u7d20\u6750\u4e0b\u8f7d\u7f51\u7ad9\uff0c\u5728\u8fd9\u4e2a\u7f51\u7ad9\u8fde\u6ce8\u518c\u767b\u5f55\u90fd\u4e0d\u9700\u8981\uff0c\u627e\u5230\u81ea\u5df1\u559c\u6b22\u7684\u6a21\u7248\u6216\u7d20\u6750\u5c31\u53ef\u4ee5\u76f4\u63a5\u4e00\u952e\u4e0b\u8f7d\uff0c\u6ca1\u6709\u4efb\u4f55\u5957\u8def\uff0c\u8fd9\u4e2a\u7f51\u7ad9\u6211\u76f8\u4fe1\u5927\u591a\u6570\u4eba\u90fd\u662f\u9700\u8981\u7684\uff01 http://www.ypppt.com/","title":"\u4e09 \u4f18\u54c1PPT"},{"location":"chapter_7/3_sre_tools_website/#chrome","text":"\u4e00\u4e2a\u4e0b\u8f7dChrome\u6d4f\u89c8\u5668\u79bb\u7ebf\u63d2\u4ef6\u7684\u7ad9\u70b9\uff0c\u5bf9\u4e8e\u5f88\u591a\u5c0f\u4f19\u4eec\u6765\u8bf4\u8fd8\u662f\u975e\u5e38\u9700\u8981\u7684\uff0c\u5728\u8fd9\u91cc\u5df2\u7ecf\u4e3a\u6211\u4eec\u7f57\u5217\u4e86\u5f88\u591a\u7684\u5206\u7c7b\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u627e\u81ea\u5df1\u9700\u8981\u7684\u6269\u5c55\u63d2\u4ef6\u5b89\u88c5\u6765\u5f3a\u5316\u6d4f\u89c8\u5668\uff01 https://chrome.zzzmh.cn/","title":"\u56db \u4e00\u4e2a\u4e0b\u8f7dChrome\u6d4f\u89c8\u5668\u79bb\u7ebf\u63d2\u4ef6\u7684\u7ad9\u70b9"},{"location":"chapter_7/3_sre_tools_website/#_3","text":"\u6700\u597d\u7528\u7684\u4e34\u65f6\u6587\u4ef6\u4f20\u8f93\u5e73\u53f0\uff0c\u522b\u8ddf\u6211\u63d0\u67d0\u5ea6\u76d8\uff0c\u4e0d\u5f00\u4f1a\u5458\u901f\u5ea6\u5c3110KB/s\uff0c\u6839\u672c\u4e0d\u80fd\u5fcd\uff0c\u6709\u65f6\u5019\u7ed9\u670b\u53cb\u53d1\u4e00\u4e2a\u6e38\u620f\u53d1\u4e00\u4e2a\u89c6\u9891\u90a3\u4e48\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\uff0c\u4e0b\u8f7d\u4e0d\u9650\u901f\uff0c\u652f\u6301\u6587\u4ef6\u4e0b\u8f7d\u540e\u81ea\u52a8\u9500\u6bc1\uff01 https://cowtransfer.com \u8fd9\u4e2a\u7f51\u7ad9\u611f\u89c9\u9002\u5408\u5c0f\u767d\u7528\u6237 \u53e6\u5916\u5f97\u914d\u5957\u4e00\u4e2a\u65b9\u4fbf\u52a0\u5bc6\u89e3\u5bc6\u7684\u65b9\u6848,\u4e0d\u7136\u6587\u4ef6\u4e0a\u4f20\u4e0a\u53bb\u4e4b\u540e\u4e5f\u4e0d\u5b89\u5168","title":"\u4e94 \u4e00\u4e2a\u4e34\u65f6\u6587\u4ef6\u4f20\u8f93\u5e73\u53f0"},{"location":"chapter_7/4_sre_tools_shell/","text":"\u4e00 shell\u811a\u672c\u901a\u7528\u6a21\u7248 \u8be5\u901a\u7528\u6a21\u7248\u5206\u4e3a2\u4e2a\u9636\u6bb5,\u521d\u59cb\u5316\u9636\u6bb5\u548cmain\u9636\u6bb5,\u521d\u59cb\u5316\u9636\u6bb5\u7684\u4e3b\u8981\u76ee\u7684\u662f: \u63d0\u4f9b\u5e26\u989c\u8272\u7684\u6253\u5370\u51fd\u6570,usage\u51fd\u6570,\u8f93\u5165\u53c2\u6570\u6821\u9a8c,\u4ee5\u4e0a3\u70b9\u5e94\u8be5\u662f\u6bcf\u4e2a\u811a\u672c\u5171\u901a\u7684;\u800c\u6bcf\u4e2a\u811a\u672c\u4e0d\u540c\u70b9\u5728\u4e8emain\u9636\u6bb5,\u662f\u4f60\u7684\u4e3b\u903b\u8f91 #!/bin/bash function echo_red() { echo -e \"\\033[0;31m$1\\033[0m\" } function echo_green() { echo -e \"\\033[0;32m$1\\033[0m\" } function echo_yellow() { echo -e \"\\033[0;33m$1\\033[0m\" } function echo_parting() { line=`printf \"%70s\" | tr ' ' =` echo_yellow \"$line\" } function printuse() { echo_red \"\u7528\u6cd5:\" echo -e \"\\t$0\" \"\u4e00\u4e9b\u53c2\u6570\u63d0\u793a\" echo_green \"\u6548\u679c:\" echo -e \"\\t\u811a\u672c\u7684\u6548\u679c\" } #main if [ -z \"$1\" ];then echo_parting printuse echo_parting fi \u4e8c \u4ece\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\u4e2d\u83b7\u53d6\u6240\u6709\u7684IP\u5730\u5740 grep -E -o \"(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\" yourfile.txt","title":"\u7b2c\u56db\u7bc7 \u8fd0\u7ef4\u751f\u4ea7\u529b\u5de5\u5177(shell\u7bc7)"},{"location":"chapter_7/4_sre_tools_shell/#shell","text":"\u8be5\u901a\u7528\u6a21\u7248\u5206\u4e3a2\u4e2a\u9636\u6bb5,\u521d\u59cb\u5316\u9636\u6bb5\u548cmain\u9636\u6bb5,\u521d\u59cb\u5316\u9636\u6bb5\u7684\u4e3b\u8981\u76ee\u7684\u662f: \u63d0\u4f9b\u5e26\u989c\u8272\u7684\u6253\u5370\u51fd\u6570,usage\u51fd\u6570,\u8f93\u5165\u53c2\u6570\u6821\u9a8c,\u4ee5\u4e0a3\u70b9\u5e94\u8be5\u662f\u6bcf\u4e2a\u811a\u672c\u5171\u901a\u7684;\u800c\u6bcf\u4e2a\u811a\u672c\u4e0d\u540c\u70b9\u5728\u4e8emain\u9636\u6bb5,\u662f\u4f60\u7684\u4e3b\u903b\u8f91 #!/bin/bash function echo_red() { echo -e \"\\033[0;31m$1\\033[0m\" } function echo_green() { echo -e \"\\033[0;32m$1\\033[0m\" } function echo_yellow() { echo -e \"\\033[0;33m$1\\033[0m\" } function echo_parting() { line=`printf \"%70s\" | tr ' ' =` echo_yellow \"$line\" } function printuse() { echo_red \"\u7528\u6cd5:\" echo -e \"\\t$0\" \"\u4e00\u4e9b\u53c2\u6570\u63d0\u793a\" echo_green \"\u6548\u679c:\" echo -e \"\\t\u811a\u672c\u7684\u6548\u679c\" } #main if [ -z \"$1\" ];then echo_parting printuse echo_parting fi","title":"\u4e00 shell\u811a\u672c\u901a\u7528\u6a21\u7248"},{"location":"chapter_7/4_sre_tools_shell/#ip","text":"grep -E -o \"(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\" yourfile.txt","title":"\u4e8c  \u4ece\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\u4e2d\u83b7\u53d6\u6240\u6709\u7684IP\u5730\u5740"},{"location":"chapter_7/5_server_side_evolution/","text":"\u6982\u8ff0 \u68b3\u7406\u4e00\u4e0b\u670d\u52a1\u7aef\u7684\u6f14\u5316\u8fc7\u7a0b\u3001\u4e86\u89e3\u4e0bserverless \u5c40\u57df\u7f51 ==> IDC ==> \u4e91\u8ba1\u7b97 ==> Serverless \u5c40\u57df\u7f51\u65f6\u4ee3 \u4e0a\u4e16\u7eaa90\u5e74\u4ee3\uff0c\u4f60\u662f\u4e00\u5bb6IT\u90e8\u95e8\u7684\u8d1f\u8d23\u4eba\uff0c\u516c\u53f8\u9700\u8981\u5efa\u7acb\u4e00\u4e2a\u4fe1\u606f\u7ba1\u7406\u7cfb\u7edf\uff0c \u8fd9\u65f6\u5019\u7684\u7cfb\u7edf\u90fd\u662f\u5c40\u57df\u7f51\u7684\uff0c \u662fC/S\u6a21\u5f0f\u7684\uff0c \u4e1a\u52a1\u903b\u8f91\u4e3b\u8981\u5728\u5ba2\u6237\u7aef\u8f6f\u4ef6\u4e2d\uff0c \u9700\u8981\u88ab\u5b89\u88c5\u5230\u5404\u4e2a\u7535\u8111\u4e0a\u53bb\uff0c\u7136\u540e\u8bbf\u95ee\u540c\u4e00\u4e2a\u6570\u636e\u5e93\u3002 \u5728\u90e8\u7f72\u8fd9\u4e2a\u7cfb\u7edf\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u505a\u5f88\u591a\u7684\u5de5\u4f5c\uff1a \u642d\u5efa\u5c40\u57df\u7f51\uff0c \u8d2d\u4e70\u4ea4\u6362\u673a\uff0c\u8def\u7531\u5668\u3002 \u4e70\u670d\u52a1\u5668\uff0c\u5b89\u88c5\u64cd\u4f5c\u7cfb\u7edf\uff0c\u6bd4\u5982Window NT \u5b89\u88c5\u6570\u636e\u5e93\u8f6f\u4ef6\uff0c\u4f8b\u5982Oracle\u3002 \u7136\u540e\u518d\u628a\u90a3\u4e9bDelphi/VB/PowerBuilder\u5199\u7684\u5ba2\u6237\u7aef\u5b89\u88c5\u5230\u7535\u8111\u4e0a, \u6574\u4e2a\u7cfb\u7edf\u8dd1\u8d77\u6765\u4e86\u3002 \u6bcf\u5bb6\u516c\u53f8\u81ea\u5efa\u6570\u636e\u4e2d\u5fc3\u65f6\u4ee3 C/S\u6a21\u5f0f\u7684\u5f88\u5927\u5f0a\u7aef\u5c31\u662f\u5ba2\u6237\u7aef\u66f4\u65b0\u7279\u522b\u9ebb\u70e6\uff0c\u4e0d\u80fd\u5728\u7528\u6237\u65e0\u611f\u77e5\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u5347\u7ea7\uff0c\u8fd8\u6709\u81ed\u540d\u5353\u8457\u7684DLL\u5730\u72f1\u95ee\u9898\uff0c\u8ba9\u7a0b\u5e8f\u5458\u6293\u72c2\u3002\u53e6\u5916\u670d\u52a1\u5668\u80fd\u652f\u6491\u7684\u7528\u6237\u4e5f\u4e0d\u5927\u3002 Web\u5174\u8d77\u540e\uff0c\u4f60\u4eec\u516c\u53f8\u7684\u5e94\u7528\u4e5f\u4e0e\u65f6\u4ff1\u8fdb\uff0c\u4eceC/S\u6a21\u5f0f\u53d8\u6210\u4e86B/S\u6a21\u5f0f\uff0c\u7528\u6237\u4e3b\u8981\u4f7f\u7528\u6d4f\u89c8\u5668\u6765\u8bbf\u95ee\u5e94\u7528\uff0c\u4e1a\u52a1\u903b\u8f91\u5728\u670d\u52a1\u5668\u7aef\u8fd0\u884c\u3002 \u8fd9\u65f6\u5019\uff0c\u4f60\u8fd8\u9700\u8981\u4e70\u670d\u52a1\u5668\uff0c\u7136\u540e\u653e\u5230\u6570\u636e\u4e2d\u5fc3\u53bb\u6258\u7ba1\uff0c\u6bd5\u7adf\u90a3\u91cc\u7684\u6761\u4ef6\u66f4\u597d\uff0c\u66f4\u7a33\u5b9a\u3002 \u7f51\u7edc\u4e0d\u9700\u8981\u81ea\u5df1\u6765\u642d\u5efa\u4e86\uff0c \u638f\u94b1\u4e70\u6570\u636e\u4e2d\u5fc3\u7684\u7f51\u7edc\u5e26\u5bbd\u5c31\u597d\u3002 \u8fd8\u9700\u8981\u81ea\u5df1\u5b89\u88c5\u8f6f\u4ef6\uff0c \u6bd4\u5982Linux\u64cd\u4f5c\u7cfb\u7edf\u3001Tomcat\u3001Ngnix\u3001MySQL\u7b49\u7b49\u3002 \u968f\u7740\u529f\u80fd\u7684\u589e\u52a0\uff0c\u4f60\u8fd8\u9700\u8981\u65b0\u7684\u670d\u52a1\u5668\u6765\u5904\u7406\u7f13\u5b58\uff0c\u641c\u7d22\u7b49\u529f\u80fd\u3002 \u4e3a\u4e86\u5e94\u5bf9\u9ad8\u5e76\u53d1\u3001\u8fd8\u9700\u8981\u5206\u5e03\u5f0f\u3001\u8d1f\u8f7d\u5747\u8861\u3001\u6570\u636e\u590d\u5236\u3002 \u4f60\u9700\u8981\u4ed4\u7ec6\u5730\u89c4\u5212\uff0c \u770b\u770b\u8fd9\u4e9b\u7f13\u5b58\u3001\u641c\u7d22\u3001\u6570\u636e\u5e93\u3001 \u8d1f\u8f7d\u5747\u8861\u7b49\u90fd\u9700\u8981\u4ec0\u4e48\u6837\u7684\u670d\u52a1\u5668\uff0c\u6709\u4e9b\u8981\u6c42CPU\u5f88\u5f3a\uff0c\u6709\u4e9b\u8981\u6c42\u5185\u5b58\u5f88\u5927\uff0c\u6709\u4e9b\u8981\u6c42\u786c\u76d8\u5f88\u5feb\u3002 \u603b\u4e4b\uff0c\u81ea\u5df1\u8fd0\u7ef4\u8fd9\u6837\u4e00\u5957\u7cfb\u7edf\uff0c\u975e\u5e38\u9ebb\u70e6 \u865a\u62df\u5316\u65f6\u4ee3 \u4f46\u662f\uff0c\u5982\u679c\u4f60\u7684\u7f51\u7ad9\u6ca1\u4eba\u8bbf\u95ee\u4e86\uff0c\u8fd9\u4e00\u5957\u590d\u6742\u7684\u7cfb\u7edf\uff0c\u8fd9\u4e9b\u6602\u8d35\u7684\u670d\u52a1\u5668\u5c31\u4f1a\u53d8\u6210\u6446\u8bbe\uff0c\u4f60\u60f3\u5356\u90fd\u5f88\u96be\u5356\u6389\uff0c\u8fd9\u662f\u5de8\u5927\u7684\u6d6a\u8d39\u3002 \u4e00\u4e2a\u60f3\u6cd5\u5c31\u4f1a\u6d6e\u73b0\u51fa\u6765\uff1a \u4e3a\u4ec0\u4e48\u8981\u7528\u7269\u7406\u670d\u52a1\u5668\uff1f \u8c01\u8981\u662f\u80fd\u63d0\u4f9b\u865a\u62df\u673a\u7ed9\u6211\u5c31\u597d\u4e86\uff01 \u7528\u5b8c\u4e86\u5c31\u53ef\u4ee5\u201c\u6254\u6389\u201d\uff01 \u4e8e\u662f\u90a3\u4e9b\u6709\u5b9e\u529b\u7684\u5927\u5382\u5c31\u8fd9\u4e48\u505a\u4e86\uff0c\u6709\u4e9a\u9a6c\u900a\u5f00\u59cb\uff0c\u628a\u5e73\u65f6\u7a7a\u95f2\u7684\u7269\u7406\u670d\u52a1\u5668\u7684\u8ba1\u7b97\u80fd\u529b\uff0c\u5b58\u50a8\u80fd\u529b\u7edf\u4e00\u7ba1\u7406\uff0c\u7edf\u4e00\u8c03\u914d\uff0c\u5bf9\u5916\u63d0\u4f9b\u7684\u5c31\u662f\u865a\u62df\u673a\u3002 \u4ed6\u4eec\u628a\u8fd9\u79cd\u65b9\u5f0f\u53eb\u505a \u4e91\u8ba1\u7b97 \uff0c\u4f60\u4f7f\u7528\u4e86\u4e91\u8ba1\u7b97\u4ee5\u540e\uff0c\u6709\u5f88\u591a\u597d\u5904\uff1a \u7269\u7406\u670d\u52a1\u5668\u4e0d\u7528\u4e70\u4e86\uff0c\u7533\u8bf7\u865a\u62df\u673a\u5c31\u53ef\u4ee5\u4e86\u3002\u4ec0\u4e48\u6837\u7684CPU\uff0c \u591a\u5c11\u5185\u5b58\uff0c\u591a\u5927\u7684\u786c\u76d8\uff0c\u5bf9\u5e94\u7684\u4ef7\u683c\u4e5f\u4e0d\u540c\u3002 \u64cd\u4f5c\u7cfb\u7edf\u4f1a\u6309\u7167\u4f60\u7684\u8981\u6c42\u81ea\u52a8\u7ed9\u4f60\u5b89\u88c5\u597d\u3002\u7f51\u7edc\u81ea\u7136\u4e0d\u7528\u64cd\u5fc3\uff0c \u8981\u591a\u5927\u5e26\u5bbd\u76f4\u63a5\u4e70\u5c31\u884c\u3002 \u8fd9\u4e9b\u865a\u62df\u673a\u53ef\u4ee5\u5305\u6708\u3001\u5305\u5e74\u8ba1\u8d39\u3002\u4f46\u662f\uff0c\u5982\u679c\u6ca1\u6709\u4eba\u8bbf\u95ee\u4f60\u7684\u5e94\u7528\uff0c\u6ca1\u6709\u6d41\u91cf\uff0c\u4f60\u4e5f\u5f97\u638f\u94b1\u3002 \u8fd9\u91cc\u7684\u610f\u601d\u662f\u53ea\u8981\u4f60\u7684\u865a\u62df\u673a\u5f00\u8d77\u6765\uff0c\u4e0d\u7ba1\u6709\u6ca1\u6709\u4eba\u8bbf\u95ee\uff0c\u4f60\u5c31\u5f97\u4ed8\u8d39. \u53e6\u5916\u5373\u4f7f\u4f60\u8fdb\u884c\u5173\u673a\u8282\u7ea6\u6210\u672c\uff0c(\u5173\u673a\u53ef\u4ee5\u8282\u7ea6CPU\u548c\u5185\u5b58\u7684\u6210\u672c) \u90a3\u4e48\u78c1\u76d8\u90a3\u90e8\u5206\u8d39\u7528\u4e5f\u662f\u7701\u4e0d\u4e86\u7684. \u7406\u60f3\u6a21\u5f0f: Serverless \u60f3\u5fc5\u4f60\u7684\u8111\u6d77\u4e2d\u5df2\u7ecf\u6d6e\u73b0\u51fa\u4e86\u89e3\u51b3\u65b9\u6848\uff1a \u4e0d\u8981\u518d\u8003\u8651\u4ec0\u4e48\u7269\u7406\u670d\u52a1\u5668/\u865a\u62df\u673a\u4e86\uff0c \u628a\u4ee3\u7801\u4e0a\u4f20\u5230\u4e91\u7aef\uff0c\u76f4\u63a5\u8fd0\u884c\u3002 \u6309\u4f7f\u7528\u60c5\u51b5\uff08\u5982CPU\u65f6\u95f4\u3001\u5185\u5b58\u5927\u5c0f\uff09\u6765\u6536\u8d39 \u5982\u679c\u6ca1\u6709\u4eba\u8bbf\u95ee\u4f60\u7684\u5e94\u7528\uff0c\u5c31\u4e0d\u8981\u90e8\u7f72\u5b83\uff0c\u8fd9\u6837\u53ea\u4f1a\u5360\u7528\u4e00\u70b9\u70b9\u5b58\u50a8\u7a7a\u95f4\uff0c\u4e0d\u7528\u4f7f\u7528CPU\u548c\u5185\u5b58\uff1b\u5982\u679c\u6709\u4eba\u8bbf\u95ee\uff0c\u628a\u5e94\u7528\u8fc5\u901f\u90e8\u7f72\u5230\u67d0\u4e2a\u670d\u52a1\u5668\u4e0a\uff0c\u6267\u884c\u8fd9\u6b21\u8bf7\u6c42\uff0c\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u7136\u540e\u5378\u8f7d\u8fd9\u4e2a\u5e94\u7528\u3002 \u548c\u4e4b\u524d\u7684\u65b9\u5f0f\u76f8\u6bd4\uff0c\u6700\u5927\u7684\u7279\u8272\u662f \u5373\u7528\u5373\u8d70\uff0c\u4e0d\u4f1a\u5728\u670d\u52a1\u5668/\u865a\u62df\u673a\u4e2d\u5e38\u9a7b \u3002 \u4f46\u662f\u8fd9\u4e48\u505a\u53ef\u80fd\u5417\uff1f \u4e0d\u884c\uff0c\u5e94\u7528\u7684\u7c92\u5ea6\u592a\u5927\uff0c\u4e00\u4e2a\u5e94\u7528\u51e0\u5341\u3001\u4e0a\u767e\u6a21\u5757\uff0c\u6bcf\u4e2a\u8bf7\u6c42\u6765\u4e86\u5c31\u90e8\u7f72\u6574\u4e2a\u5e94\u7528\uff0c\u53ea\u6267\u884c\u90a3\u4e48\u4e00\u70b9\u513f\u4ee3\u7801\uff0c \u7136\u540e\u5c31\u5378\u8f7d\u6389\u3002 \u5982\u679c\u6bcf\u4e2a\u8bf7\u6c42\u8fd9\u4e48\u6765\u56de\u5730\u90e8\u7f72\u548c\u5378\u8f7d\uff0c\u4f60\u662f\u75af\u4e86\u5417\uff0c\u5144\u5f1f\uff1f \u90a3\u5fae\u670d\u52a1\u5462\uff1f\u7c92\u5ea6\u8fd8\u662f\u592a\u5927 \uff01 \u5982\u679c\u662f\u5fae\u670d\u52a1\u4e2d\u7684\u4e00\u4e2aAPI\uff0c\u6216\u8005\u8bf4\u5c31\u662f\u4e00\u4e2a\u201c\u51fd\u6570\u201d\u5462\uff1f \u8fd9\u4e2a\u7c92\u5ea6\u5e94\u8be5\u5dee\u4e0d\u591a\u4e86\u3002 \u8fd9\u91cc\u8bf4\u7684\u51fd\u6570\u5230\u5e95\u662f\u4ec0\u4e48\uff1f \u9700\u8981\u770b\u5177\u4f53\u7684\u4e1a\u52a1\u6765\u5212\u5206\uff0c\u6bd4\u5982\u641c\u7d22\u4ea7\u54c1\uff0c\u56fe\u50cf\u8f6c\u6362\uff0c \u5b83\u9700\u8981\u8db3\u591f\u5c0f\uff0c\u8db3\u591f\u5355\u4e00\uff0c\u80fd\u5feb\u901f\u542f\u52a8\uff0c\u8fd0\u884c\uff0c\u5378\u8f7d\u3002 \u4e00\u4e2a\u201c\u51fd\u6570\u201d\u771f\u7684\u53ea\u505a\u4e00\u4ef6\u4e8b\u60c5\uff0c\u5e76\u4e14\u4e0d\u4fdd\u6301\u72b6\u6001\u3002 \u8fd9\u6837\u4e00\u6765\u5b83\u53ef\u4ee5 \u8f7b\u677e\u5730\u88ab\u6269\u5c55\u5230\u4efb\u610f\u591a\u7684\u670d\u52a1\u5668/\u865a\u62df\u673a/docker\u5bb9\u5668\u4e2d\u53bb\u3002\u8bf7\u6c42\u591a\u4e86\u5c31\u6269\u5bb9\uff0c\u8bf7\u6c42\u5c11\u4e86\uff0c\u5c31\u6536\u7f29\uff0c\u8bf7\u6c42\u6ca1\u4e86\uff0c\u5c31\u5378\u8f7d\uff0c\u5b9e\u5728\u662f\u592a\u723d\u4e86 \u3002 \u8fd9\u79cd\u65b9\u5f0f\u73b0\u5728\u79f0\u4e3a Serverless \uff0c\u5e76\u4e0d\u662f\u8bf4\u6ca1\u6709\u670d\u52a1\u5668\uff0c\u800c\u662f\u8bf4 \u670d\u52a1\u5668\u5bf9\u7528\u6237\u6765\u8bf4\u662f\u900f\u660e\u7684 \u3002 \u5e94\u7528\u7684\u88c5\u8f7d\u3001\u542f\u52a8\u3001\u5378\u8f7d\uff0c\u8def\u7531\u662f\u9700\u8981\u5e73\u53f0\u6765\u641e\u5b9a\u3002 Serverless \u7684\u7279\u70b9 Serverless\u7684\u5f00\u53d1\u6a21\u5f0f\u548c\u8fd0\u884c\u6a21\u5f0f\u7c7b\u4f3c\u8fd9\u6837\uff1a \u7a0b\u5e8f\u5458\u7f16\u5199\u5b8c\u6210\u4e1a\u52a1\u7684\u51fd\u6570\u4ee3\u7801\u3002 \u4e0a\u4f20\u5230\u652f\u6301Serverless\u7684\u5e73\u53f0\uff0c\u8bbe\u5b9a\u89e6\u53d1\u7684\u89c4\u5219\u3002 \u8bf7\u6c42\u5230\u6765\uff0cServerless\u5e73\u53f0\u6839\u636e\u89e6\u53d1\u89c4\u5219\u52a0\u8f7d\u51fd\u6570\uff0c\u521b\u5efa\u51fd\u6570\u5b9e\u4f8b\uff0c\u8fd0\u884c \u5982\u679c\u8bf7\u6c42\u6bd4\u8f83\u591a\uff0c\u4f1a\u8fdb\u884c\u5b9e\u4f8b\u7684\u6269\u5c55\uff0c\u5982\u679c\u8bf7\u6c42\u8f83\u5c11\uff0c\u5c31\u8fdb\u884c\u5b9e\u4f8b\u7684\u6536\u7f29\u3002 \u5982\u679c\u65e0\u4eba\u8bbf\u95ee\uff0c\u5378\u8f7d\u51fd\u6570\u5b9e\u4f8b\u3002 \u5982\u679c\u6709\u591a\u4e2a\u51fd\u6570\uff0c\u600e\u4e48\u786e\u5b9a\u8c03\u7528\u54ea\u4e00\u4e2a\uff1f \u80af\u5b9a\u9700\u8981\u4e00\u4e2a\u4e1c\u897f\u6765\u8f6c\u53d1\u4e00\u4e0b\u3002 \u5982\u679c\u4e1a\u52a1\u6bd4\u8f83\u590d\u6742\uff0c\u4e00\u4e2a\u51fd\u6570\u641e\u4e0d\u5b9a\u600e\u4e48\u529e\uff1f \u53ef\u4ee5\u628a\u591a\u4e2a\u51fd\u6570\u7ed9\u7f16\u6392\u8d77\u6765\uff01 \u6309\u9700\u88c5\u8f7d\uff0c\u81ea\u52a8\u4f38\u7f29\uff0c\u4e0d\u7528\u4f60\u82e6\u903c\u5730\u53bb\u89c4\u5212\u786c\u4ef6\uff0c\u5b89\u88c5\u8f6f\u4ef6\uff0c\u8fd8\u53ef\u4ee5\u6309\u7167\u4f7f\u7528\u60c5\u51b5\u4ed8\u8d39\uff0c\u8fd9\u4e48\u597d\u7684\u4e1c\u897f\uff0c\u6211\u4eec\u662f\u4e0d\u662f\u9a6c\u4e0a\u6295\u5165Serverless\u7684\u6000\u62b1\uff1f \u6162\u7740\uff01 \u4e3a\u4e86\u8fbe\u5230\u4e0a\u9762\u7684\u76ee\u6807\uff0c\u4f60\u5fc5\u987b\u5f97\u727a\u7272\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u4e1c\u897f\uff1a \u72b6\u6001 \u3002 \u51fd\u6570\u6ca1\u6709\u72b6\u6001\u7684\uff0c\u6bcf\u6b21\u542f\u52a8\u90fd\u53ef\u80fd\u4f1a\u88ab\u90e8\u7f72\u5230\u4e00\u4e2a\u5168\u65b0\u7684\u201c\u670d\u52a1\u5668\u201d\u4e2d\uff0c\u8fd9\u5c31\u6709\u4e24\u4e2a\u95ee\u9898\uff1a \u7528\u6237\u7684\u4f1a\u8bdd\u72b6\u6001\u80af\u5b9a\u662f\u65e0\u6cd5\u4fdd\u6301\u7684\uff0c\u50cfsession sticky \u8fd9\u6837\u7684\u529f\u80fd\u5c31\u522b\u60f3\u4e86\u3002 \u51fd\u6570\u65e0\u6cd5\u505a\u672c\u5730\u7684\u6301\u4e45\u5316\uff0c\u6ca1\u6cd5\u8bbf\u95ee\u672c\u5730\u786c\u76d8\u7684\u4efb\u4f55\u4e1c\u897f\uff08\u670d\u52a1\u5668\u770b\u4e0d\u89c1\u4e86\uff0c\u600e\u4e48\u80fd\u770b\u89c1\u786c\u76d8\u5462\uff1f\uff09\u3002 \u6240\u6709\u60f3\u6301\u4e45\u5316\u7684\u4e1c\u897f\u5fc5\u987b\u5f97\u4fdd\u5b58\u5230\u5916\u90e8\u7684\u7cfb\u7edf\u6216\u8005\u5b58\u50a8\u4e2d\uff0c\u4f8b\u5982Redis\uff0cMySQL\u7b49\u3002 \u5f88\u660e\u663e\uff0c\u8fd9\u4e9b\u4e1c\u897f\u4e5f\u5e94\u8be5\u4ee5\u201c\u670d\u52a1\u201d\u7684\u65b9\u5f0f\u6765\u5448\u73b0\uff0c\u5373 Backend as a Service (BaaS) \u3002 \u5982\u679c\u4f60\u7684\u5e94\u7528\u65e0\u6cd5\u62c6\u5206\u6210\u65e0\u72b6\u6001\u7684\u51fd\u6570\uff0c\u662f\u65e0\u6cd5\u4eab\u53d7Serverless\u5e26\u6765\u7684\u79cd\u79cd\u597d\u5904\u7684\u3002 Serverless\u66f4\u9002\u5408\u90a3\u4e9b\u65e0\u72b6\u6001\u7684\u5e94\u7528 \uff0c\u4f8b\u5982\u56fe\u50cf\u548c\u89c6\u9891\u7684\u52a0\u5de5\uff0c\u8f6c\u6362\uff0c \u7269\u8054\u7f51\u8bbe\u5907\u72b6\u6001\u7684\u4fe1\u606f\u5904\u7406\u7b49\u7b49\u3002 \u8c08\u4e00\u4e0b\u865a\u62df\u673a\u548c\u5bb9\u5668\u4e91\u7684\u533a\u522b \u5bb9\u5668\u5316\u89e3\u51b3\u7684\u6700\u5927\u95ee\u9898\u662f: \u8de8\u8d8a\u5f00\u53d1\u73af\u5883\u3001\u6d4b\u8bd5\u73af\u5883\u3001\u751f\u6210\u73af\u5883\u7684\u73af\u5883\u4e00\u81f4\u6027\u95ee\u9898. \u5bb9\u5668\u7f16\u6392\u5de5\u5177(Kubenetes)\u6700\u5927\u7684\u4f5c\u7528\u662f: \u5bf9\u5185: \u53ef\u4ee5\u65b9\u4fbf\u7684\u628a\u8fdb\u7a0b\u62bd\u8c61\u4e3a\u4efb\u610f\u591a\u4e2a\u5fae\u670d\u52a1\uff0c\u5e76\u4e14\u65b9\u4fbf\u7684\u628a\u6bcf\u4e2a\u5fae\u670d\u52a1\u505a\u5230\u81ea\u52a8\u5316\u6269\u7f29\u5bb9. \u5bf9\u5916: \u53ef\u4ee5\u5c06\u5185\u90e8\u4f17\u591a\u673a\u5668\u62bd\u8c61, \u5bf9\u5916\u5448\u73b0\u51fa\u4e00\u53f0\u8d85\u5927\u673a\u5668. \u865a\u62df\u673a\u65f6\u4ee3, \u4e0a\u8ff02\u4e2a\u529f\u80fd\u90fd\u9700\u8981\u6bcf\u4e2a\u516c\u53f8\u81ea\u884c\u5236\u5b9a\u89c4\u8303\u3001\u7814\u53d1\u4ee5\u53ca\u7ef4\u62a4. \u53c2\u8003\u6587\u6863 \u53c2\u8003\u6587\u68631","title":"\u7b2c\u4e94\u7bc7 \u670d\u52a1\u7aef\u8fdb\u5316\u8fc7\u7a0b\u68b3\u7406"},{"location":"chapter_7/5_server_side_evolution/#_1","text":"\u68b3\u7406\u4e00\u4e0b\u670d\u52a1\u7aef\u7684\u6f14\u5316\u8fc7\u7a0b\u3001\u4e86\u89e3\u4e0bserverless \u5c40\u57df\u7f51 ==> IDC ==> \u4e91\u8ba1\u7b97 ==> Serverless","title":"\u6982\u8ff0"},{"location":"chapter_7/5_server_side_evolution/#_2","text":"\u4e0a\u4e16\u7eaa90\u5e74\u4ee3\uff0c\u4f60\u662f\u4e00\u5bb6IT\u90e8\u95e8\u7684\u8d1f\u8d23\u4eba\uff0c\u516c\u53f8\u9700\u8981\u5efa\u7acb\u4e00\u4e2a\u4fe1\u606f\u7ba1\u7406\u7cfb\u7edf\uff0c \u8fd9\u65f6\u5019\u7684\u7cfb\u7edf\u90fd\u662f\u5c40\u57df\u7f51\u7684\uff0c \u662fC/S\u6a21\u5f0f\u7684\uff0c \u4e1a\u52a1\u903b\u8f91\u4e3b\u8981\u5728\u5ba2\u6237\u7aef\u8f6f\u4ef6\u4e2d\uff0c \u9700\u8981\u88ab\u5b89\u88c5\u5230\u5404\u4e2a\u7535\u8111\u4e0a\u53bb\uff0c\u7136\u540e\u8bbf\u95ee\u540c\u4e00\u4e2a\u6570\u636e\u5e93\u3002 \u5728\u90e8\u7f72\u8fd9\u4e2a\u7cfb\u7edf\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u505a\u5f88\u591a\u7684\u5de5\u4f5c\uff1a \u642d\u5efa\u5c40\u57df\u7f51\uff0c \u8d2d\u4e70\u4ea4\u6362\u673a\uff0c\u8def\u7531\u5668\u3002 \u4e70\u670d\u52a1\u5668\uff0c\u5b89\u88c5\u64cd\u4f5c\u7cfb\u7edf\uff0c\u6bd4\u5982Window NT \u5b89\u88c5\u6570\u636e\u5e93\u8f6f\u4ef6\uff0c\u4f8b\u5982Oracle\u3002 \u7136\u540e\u518d\u628a\u90a3\u4e9bDelphi/VB/PowerBuilder\u5199\u7684\u5ba2\u6237\u7aef\u5b89\u88c5\u5230\u7535\u8111\u4e0a, \u6574\u4e2a\u7cfb\u7edf\u8dd1\u8d77\u6765\u4e86\u3002","title":"\u5c40\u57df\u7f51\u65f6\u4ee3"},{"location":"chapter_7/5_server_side_evolution/#_3","text":"C/S\u6a21\u5f0f\u7684\u5f88\u5927\u5f0a\u7aef\u5c31\u662f\u5ba2\u6237\u7aef\u66f4\u65b0\u7279\u522b\u9ebb\u70e6\uff0c\u4e0d\u80fd\u5728\u7528\u6237\u65e0\u611f\u77e5\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u5347\u7ea7\uff0c\u8fd8\u6709\u81ed\u540d\u5353\u8457\u7684DLL\u5730\u72f1\u95ee\u9898\uff0c\u8ba9\u7a0b\u5e8f\u5458\u6293\u72c2\u3002\u53e6\u5916\u670d\u52a1\u5668\u80fd\u652f\u6491\u7684\u7528\u6237\u4e5f\u4e0d\u5927\u3002 Web\u5174\u8d77\u540e\uff0c\u4f60\u4eec\u516c\u53f8\u7684\u5e94\u7528\u4e5f\u4e0e\u65f6\u4ff1\u8fdb\uff0c\u4eceC/S\u6a21\u5f0f\u53d8\u6210\u4e86B/S\u6a21\u5f0f\uff0c\u7528\u6237\u4e3b\u8981\u4f7f\u7528\u6d4f\u89c8\u5668\u6765\u8bbf\u95ee\u5e94\u7528\uff0c\u4e1a\u52a1\u903b\u8f91\u5728\u670d\u52a1\u5668\u7aef\u8fd0\u884c\u3002 \u8fd9\u65f6\u5019\uff0c\u4f60\u8fd8\u9700\u8981\u4e70\u670d\u52a1\u5668\uff0c\u7136\u540e\u653e\u5230\u6570\u636e\u4e2d\u5fc3\u53bb\u6258\u7ba1\uff0c\u6bd5\u7adf\u90a3\u91cc\u7684\u6761\u4ef6\u66f4\u597d\uff0c\u66f4\u7a33\u5b9a\u3002 \u7f51\u7edc\u4e0d\u9700\u8981\u81ea\u5df1\u6765\u642d\u5efa\u4e86\uff0c \u638f\u94b1\u4e70\u6570\u636e\u4e2d\u5fc3\u7684\u7f51\u7edc\u5e26\u5bbd\u5c31\u597d\u3002 \u8fd8\u9700\u8981\u81ea\u5df1\u5b89\u88c5\u8f6f\u4ef6\uff0c \u6bd4\u5982Linux\u64cd\u4f5c\u7cfb\u7edf\u3001Tomcat\u3001Ngnix\u3001MySQL\u7b49\u7b49\u3002 \u968f\u7740\u529f\u80fd\u7684\u589e\u52a0\uff0c\u4f60\u8fd8\u9700\u8981\u65b0\u7684\u670d\u52a1\u5668\u6765\u5904\u7406\u7f13\u5b58\uff0c\u641c\u7d22\u7b49\u529f\u80fd\u3002 \u4e3a\u4e86\u5e94\u5bf9\u9ad8\u5e76\u53d1\u3001\u8fd8\u9700\u8981\u5206\u5e03\u5f0f\u3001\u8d1f\u8f7d\u5747\u8861\u3001\u6570\u636e\u590d\u5236\u3002 \u4f60\u9700\u8981\u4ed4\u7ec6\u5730\u89c4\u5212\uff0c \u770b\u770b\u8fd9\u4e9b\u7f13\u5b58\u3001\u641c\u7d22\u3001\u6570\u636e\u5e93\u3001 \u8d1f\u8f7d\u5747\u8861\u7b49\u90fd\u9700\u8981\u4ec0\u4e48\u6837\u7684\u670d\u52a1\u5668\uff0c\u6709\u4e9b\u8981\u6c42CPU\u5f88\u5f3a\uff0c\u6709\u4e9b\u8981\u6c42\u5185\u5b58\u5f88\u5927\uff0c\u6709\u4e9b\u8981\u6c42\u786c\u76d8\u5f88\u5feb\u3002 \u603b\u4e4b\uff0c\u81ea\u5df1\u8fd0\u7ef4\u8fd9\u6837\u4e00\u5957\u7cfb\u7edf\uff0c\u975e\u5e38\u9ebb\u70e6","title":"\u6bcf\u5bb6\u516c\u53f8\u81ea\u5efa\u6570\u636e\u4e2d\u5fc3\u65f6\u4ee3"},{"location":"chapter_7/5_server_side_evolution/#_4","text":"\u4f46\u662f\uff0c\u5982\u679c\u4f60\u7684\u7f51\u7ad9\u6ca1\u4eba\u8bbf\u95ee\u4e86\uff0c\u8fd9\u4e00\u5957\u590d\u6742\u7684\u7cfb\u7edf\uff0c\u8fd9\u4e9b\u6602\u8d35\u7684\u670d\u52a1\u5668\u5c31\u4f1a\u53d8\u6210\u6446\u8bbe\uff0c\u4f60\u60f3\u5356\u90fd\u5f88\u96be\u5356\u6389\uff0c\u8fd9\u662f\u5de8\u5927\u7684\u6d6a\u8d39\u3002 \u4e00\u4e2a\u60f3\u6cd5\u5c31\u4f1a\u6d6e\u73b0\u51fa\u6765\uff1a \u4e3a\u4ec0\u4e48\u8981\u7528\u7269\u7406\u670d\u52a1\u5668\uff1f \u8c01\u8981\u662f\u80fd\u63d0\u4f9b\u865a\u62df\u673a\u7ed9\u6211\u5c31\u597d\u4e86\uff01 \u7528\u5b8c\u4e86\u5c31\u53ef\u4ee5\u201c\u6254\u6389\u201d\uff01 \u4e8e\u662f\u90a3\u4e9b\u6709\u5b9e\u529b\u7684\u5927\u5382\u5c31\u8fd9\u4e48\u505a\u4e86\uff0c\u6709\u4e9a\u9a6c\u900a\u5f00\u59cb\uff0c\u628a\u5e73\u65f6\u7a7a\u95f2\u7684\u7269\u7406\u670d\u52a1\u5668\u7684\u8ba1\u7b97\u80fd\u529b\uff0c\u5b58\u50a8\u80fd\u529b\u7edf\u4e00\u7ba1\u7406\uff0c\u7edf\u4e00\u8c03\u914d\uff0c\u5bf9\u5916\u63d0\u4f9b\u7684\u5c31\u662f\u865a\u62df\u673a\u3002 \u4ed6\u4eec\u628a\u8fd9\u79cd\u65b9\u5f0f\u53eb\u505a \u4e91\u8ba1\u7b97 \uff0c\u4f60\u4f7f\u7528\u4e86\u4e91\u8ba1\u7b97\u4ee5\u540e\uff0c\u6709\u5f88\u591a\u597d\u5904\uff1a \u7269\u7406\u670d\u52a1\u5668\u4e0d\u7528\u4e70\u4e86\uff0c\u7533\u8bf7\u865a\u62df\u673a\u5c31\u53ef\u4ee5\u4e86\u3002\u4ec0\u4e48\u6837\u7684CPU\uff0c \u591a\u5c11\u5185\u5b58\uff0c\u591a\u5927\u7684\u786c\u76d8\uff0c\u5bf9\u5e94\u7684\u4ef7\u683c\u4e5f\u4e0d\u540c\u3002 \u64cd\u4f5c\u7cfb\u7edf\u4f1a\u6309\u7167\u4f60\u7684\u8981\u6c42\u81ea\u52a8\u7ed9\u4f60\u5b89\u88c5\u597d\u3002\u7f51\u7edc\u81ea\u7136\u4e0d\u7528\u64cd\u5fc3\uff0c \u8981\u591a\u5927\u5e26\u5bbd\u76f4\u63a5\u4e70\u5c31\u884c\u3002 \u8fd9\u4e9b\u865a\u62df\u673a\u53ef\u4ee5\u5305\u6708\u3001\u5305\u5e74\u8ba1\u8d39\u3002\u4f46\u662f\uff0c\u5982\u679c\u6ca1\u6709\u4eba\u8bbf\u95ee\u4f60\u7684\u5e94\u7528\uff0c\u6ca1\u6709\u6d41\u91cf\uff0c\u4f60\u4e5f\u5f97\u638f\u94b1\u3002 \u8fd9\u91cc\u7684\u610f\u601d\u662f\u53ea\u8981\u4f60\u7684\u865a\u62df\u673a\u5f00\u8d77\u6765\uff0c\u4e0d\u7ba1\u6709\u6ca1\u6709\u4eba\u8bbf\u95ee\uff0c\u4f60\u5c31\u5f97\u4ed8\u8d39. \u53e6\u5916\u5373\u4f7f\u4f60\u8fdb\u884c\u5173\u673a\u8282\u7ea6\u6210\u672c\uff0c(\u5173\u673a\u53ef\u4ee5\u8282\u7ea6CPU\u548c\u5185\u5b58\u7684\u6210\u672c) \u90a3\u4e48\u78c1\u76d8\u90a3\u90e8\u5206\u8d39\u7528\u4e5f\u662f\u7701\u4e0d\u4e86\u7684.","title":"\u865a\u62df\u5316\u65f6\u4ee3"},{"location":"chapter_7/5_server_side_evolution/#serverless","text":"\u60f3\u5fc5\u4f60\u7684\u8111\u6d77\u4e2d\u5df2\u7ecf\u6d6e\u73b0\u51fa\u4e86\u89e3\u51b3\u65b9\u6848\uff1a \u4e0d\u8981\u518d\u8003\u8651\u4ec0\u4e48\u7269\u7406\u670d\u52a1\u5668/\u865a\u62df\u673a\u4e86\uff0c \u628a\u4ee3\u7801\u4e0a\u4f20\u5230\u4e91\u7aef\uff0c\u76f4\u63a5\u8fd0\u884c\u3002 \u6309\u4f7f\u7528\u60c5\u51b5\uff08\u5982CPU\u65f6\u95f4\u3001\u5185\u5b58\u5927\u5c0f\uff09\u6765\u6536\u8d39 \u5982\u679c\u6ca1\u6709\u4eba\u8bbf\u95ee\u4f60\u7684\u5e94\u7528\uff0c\u5c31\u4e0d\u8981\u90e8\u7f72\u5b83\uff0c\u8fd9\u6837\u53ea\u4f1a\u5360\u7528\u4e00\u70b9\u70b9\u5b58\u50a8\u7a7a\u95f4\uff0c\u4e0d\u7528\u4f7f\u7528CPU\u548c\u5185\u5b58\uff1b\u5982\u679c\u6709\u4eba\u8bbf\u95ee\uff0c\u628a\u5e94\u7528\u8fc5\u901f\u90e8\u7f72\u5230\u67d0\u4e2a\u670d\u52a1\u5668\u4e0a\uff0c\u6267\u884c\u8fd9\u6b21\u8bf7\u6c42\uff0c\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u7136\u540e\u5378\u8f7d\u8fd9\u4e2a\u5e94\u7528\u3002 \u548c\u4e4b\u524d\u7684\u65b9\u5f0f\u76f8\u6bd4\uff0c\u6700\u5927\u7684\u7279\u8272\u662f \u5373\u7528\u5373\u8d70\uff0c\u4e0d\u4f1a\u5728\u670d\u52a1\u5668/\u865a\u62df\u673a\u4e2d\u5e38\u9a7b \u3002 \u4f46\u662f\u8fd9\u4e48\u505a\u53ef\u80fd\u5417\uff1f \u4e0d\u884c\uff0c\u5e94\u7528\u7684\u7c92\u5ea6\u592a\u5927\uff0c\u4e00\u4e2a\u5e94\u7528\u51e0\u5341\u3001\u4e0a\u767e\u6a21\u5757\uff0c\u6bcf\u4e2a\u8bf7\u6c42\u6765\u4e86\u5c31\u90e8\u7f72\u6574\u4e2a\u5e94\u7528\uff0c\u53ea\u6267\u884c\u90a3\u4e48\u4e00\u70b9\u513f\u4ee3\u7801\uff0c \u7136\u540e\u5c31\u5378\u8f7d\u6389\u3002 \u5982\u679c\u6bcf\u4e2a\u8bf7\u6c42\u8fd9\u4e48\u6765\u56de\u5730\u90e8\u7f72\u548c\u5378\u8f7d\uff0c\u4f60\u662f\u75af\u4e86\u5417\uff0c\u5144\u5f1f\uff1f \u90a3\u5fae\u670d\u52a1\u5462\uff1f\u7c92\u5ea6\u8fd8\u662f\u592a\u5927 \uff01 \u5982\u679c\u662f\u5fae\u670d\u52a1\u4e2d\u7684\u4e00\u4e2aAPI\uff0c\u6216\u8005\u8bf4\u5c31\u662f\u4e00\u4e2a\u201c\u51fd\u6570\u201d\u5462\uff1f \u8fd9\u4e2a\u7c92\u5ea6\u5e94\u8be5\u5dee\u4e0d\u591a\u4e86\u3002 \u8fd9\u91cc\u8bf4\u7684\u51fd\u6570\u5230\u5e95\u662f\u4ec0\u4e48\uff1f \u9700\u8981\u770b\u5177\u4f53\u7684\u4e1a\u52a1\u6765\u5212\u5206\uff0c\u6bd4\u5982\u641c\u7d22\u4ea7\u54c1\uff0c\u56fe\u50cf\u8f6c\u6362\uff0c \u5b83\u9700\u8981\u8db3\u591f\u5c0f\uff0c\u8db3\u591f\u5355\u4e00\uff0c\u80fd\u5feb\u901f\u542f\u52a8\uff0c\u8fd0\u884c\uff0c\u5378\u8f7d\u3002 \u4e00\u4e2a\u201c\u51fd\u6570\u201d\u771f\u7684\u53ea\u505a\u4e00\u4ef6\u4e8b\u60c5\uff0c\u5e76\u4e14\u4e0d\u4fdd\u6301\u72b6\u6001\u3002 \u8fd9\u6837\u4e00\u6765\u5b83\u53ef\u4ee5 \u8f7b\u677e\u5730\u88ab\u6269\u5c55\u5230\u4efb\u610f\u591a\u7684\u670d\u52a1\u5668/\u865a\u62df\u673a/docker\u5bb9\u5668\u4e2d\u53bb\u3002\u8bf7\u6c42\u591a\u4e86\u5c31\u6269\u5bb9\uff0c\u8bf7\u6c42\u5c11\u4e86\uff0c\u5c31\u6536\u7f29\uff0c\u8bf7\u6c42\u6ca1\u4e86\uff0c\u5c31\u5378\u8f7d\uff0c\u5b9e\u5728\u662f\u592a\u723d\u4e86 \u3002 \u8fd9\u79cd\u65b9\u5f0f\u73b0\u5728\u79f0\u4e3a Serverless \uff0c\u5e76\u4e0d\u662f\u8bf4\u6ca1\u6709\u670d\u52a1\u5668\uff0c\u800c\u662f\u8bf4 \u670d\u52a1\u5668\u5bf9\u7528\u6237\u6765\u8bf4\u662f\u900f\u660e\u7684 \u3002 \u5e94\u7528\u7684\u88c5\u8f7d\u3001\u542f\u52a8\u3001\u5378\u8f7d\uff0c\u8def\u7531\u662f\u9700\u8981\u5e73\u53f0\u6765\u641e\u5b9a\u3002","title":"\u7406\u60f3\u6a21\u5f0f: Serverless"},{"location":"chapter_7/5_server_side_evolution/#serverless_1","text":"Serverless\u7684\u5f00\u53d1\u6a21\u5f0f\u548c\u8fd0\u884c\u6a21\u5f0f\u7c7b\u4f3c\u8fd9\u6837\uff1a \u7a0b\u5e8f\u5458\u7f16\u5199\u5b8c\u6210\u4e1a\u52a1\u7684\u51fd\u6570\u4ee3\u7801\u3002 \u4e0a\u4f20\u5230\u652f\u6301Serverless\u7684\u5e73\u53f0\uff0c\u8bbe\u5b9a\u89e6\u53d1\u7684\u89c4\u5219\u3002 \u8bf7\u6c42\u5230\u6765\uff0cServerless\u5e73\u53f0\u6839\u636e\u89e6\u53d1\u89c4\u5219\u52a0\u8f7d\u51fd\u6570\uff0c\u521b\u5efa\u51fd\u6570\u5b9e\u4f8b\uff0c\u8fd0\u884c \u5982\u679c\u8bf7\u6c42\u6bd4\u8f83\u591a\uff0c\u4f1a\u8fdb\u884c\u5b9e\u4f8b\u7684\u6269\u5c55\uff0c\u5982\u679c\u8bf7\u6c42\u8f83\u5c11\uff0c\u5c31\u8fdb\u884c\u5b9e\u4f8b\u7684\u6536\u7f29\u3002 \u5982\u679c\u65e0\u4eba\u8bbf\u95ee\uff0c\u5378\u8f7d\u51fd\u6570\u5b9e\u4f8b\u3002 \u5982\u679c\u6709\u591a\u4e2a\u51fd\u6570\uff0c\u600e\u4e48\u786e\u5b9a\u8c03\u7528\u54ea\u4e00\u4e2a\uff1f \u80af\u5b9a\u9700\u8981\u4e00\u4e2a\u4e1c\u897f\u6765\u8f6c\u53d1\u4e00\u4e0b\u3002 \u5982\u679c\u4e1a\u52a1\u6bd4\u8f83\u590d\u6742\uff0c\u4e00\u4e2a\u51fd\u6570\u641e\u4e0d\u5b9a\u600e\u4e48\u529e\uff1f \u53ef\u4ee5\u628a\u591a\u4e2a\u51fd\u6570\u7ed9\u7f16\u6392\u8d77\u6765\uff01 \u6309\u9700\u88c5\u8f7d\uff0c\u81ea\u52a8\u4f38\u7f29\uff0c\u4e0d\u7528\u4f60\u82e6\u903c\u5730\u53bb\u89c4\u5212\u786c\u4ef6\uff0c\u5b89\u88c5\u8f6f\u4ef6\uff0c\u8fd8\u53ef\u4ee5\u6309\u7167\u4f7f\u7528\u60c5\u51b5\u4ed8\u8d39\uff0c\u8fd9\u4e48\u597d\u7684\u4e1c\u897f\uff0c\u6211\u4eec\u662f\u4e0d\u662f\u9a6c\u4e0a\u6295\u5165Serverless\u7684\u6000\u62b1\uff1f \u6162\u7740\uff01 \u4e3a\u4e86\u8fbe\u5230\u4e0a\u9762\u7684\u76ee\u6807\uff0c\u4f60\u5fc5\u987b\u5f97\u727a\u7272\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u4e1c\u897f\uff1a \u72b6\u6001 \u3002 \u51fd\u6570\u6ca1\u6709\u72b6\u6001\u7684\uff0c\u6bcf\u6b21\u542f\u52a8\u90fd\u53ef\u80fd\u4f1a\u88ab\u90e8\u7f72\u5230\u4e00\u4e2a\u5168\u65b0\u7684\u201c\u670d\u52a1\u5668\u201d\u4e2d\uff0c\u8fd9\u5c31\u6709\u4e24\u4e2a\u95ee\u9898\uff1a \u7528\u6237\u7684\u4f1a\u8bdd\u72b6\u6001\u80af\u5b9a\u662f\u65e0\u6cd5\u4fdd\u6301\u7684\uff0c\u50cfsession sticky \u8fd9\u6837\u7684\u529f\u80fd\u5c31\u522b\u60f3\u4e86\u3002 \u51fd\u6570\u65e0\u6cd5\u505a\u672c\u5730\u7684\u6301\u4e45\u5316\uff0c\u6ca1\u6cd5\u8bbf\u95ee\u672c\u5730\u786c\u76d8\u7684\u4efb\u4f55\u4e1c\u897f\uff08\u670d\u52a1\u5668\u770b\u4e0d\u89c1\u4e86\uff0c\u600e\u4e48\u80fd\u770b\u89c1\u786c\u76d8\u5462\uff1f\uff09\u3002 \u6240\u6709\u60f3\u6301\u4e45\u5316\u7684\u4e1c\u897f\u5fc5\u987b\u5f97\u4fdd\u5b58\u5230\u5916\u90e8\u7684\u7cfb\u7edf\u6216\u8005\u5b58\u50a8\u4e2d\uff0c\u4f8b\u5982Redis\uff0cMySQL\u7b49\u3002 \u5f88\u660e\u663e\uff0c\u8fd9\u4e9b\u4e1c\u897f\u4e5f\u5e94\u8be5\u4ee5\u201c\u670d\u52a1\u201d\u7684\u65b9\u5f0f\u6765\u5448\u73b0\uff0c\u5373 Backend as a Service (BaaS) \u3002 \u5982\u679c\u4f60\u7684\u5e94\u7528\u65e0\u6cd5\u62c6\u5206\u6210\u65e0\u72b6\u6001\u7684\u51fd\u6570\uff0c\u662f\u65e0\u6cd5\u4eab\u53d7Serverless\u5e26\u6765\u7684\u79cd\u79cd\u597d\u5904\u7684\u3002 Serverless\u66f4\u9002\u5408\u90a3\u4e9b\u65e0\u72b6\u6001\u7684\u5e94\u7528 \uff0c\u4f8b\u5982\u56fe\u50cf\u548c\u89c6\u9891\u7684\u52a0\u5de5\uff0c\u8f6c\u6362\uff0c \u7269\u8054\u7f51\u8bbe\u5907\u72b6\u6001\u7684\u4fe1\u606f\u5904\u7406\u7b49\u7b49\u3002","title":"Serverless \u7684\u7279\u70b9"},{"location":"chapter_7/5_server_side_evolution/#_5","text":"\u5bb9\u5668\u5316\u89e3\u51b3\u7684\u6700\u5927\u95ee\u9898\u662f: \u8de8\u8d8a\u5f00\u53d1\u73af\u5883\u3001\u6d4b\u8bd5\u73af\u5883\u3001\u751f\u6210\u73af\u5883\u7684\u73af\u5883\u4e00\u81f4\u6027\u95ee\u9898. \u5bb9\u5668\u7f16\u6392\u5de5\u5177(Kubenetes)\u6700\u5927\u7684\u4f5c\u7528\u662f: \u5bf9\u5185: \u53ef\u4ee5\u65b9\u4fbf\u7684\u628a\u8fdb\u7a0b\u62bd\u8c61\u4e3a\u4efb\u610f\u591a\u4e2a\u5fae\u670d\u52a1\uff0c\u5e76\u4e14\u65b9\u4fbf\u7684\u628a\u6bcf\u4e2a\u5fae\u670d\u52a1\u505a\u5230\u81ea\u52a8\u5316\u6269\u7f29\u5bb9. \u5bf9\u5916: \u53ef\u4ee5\u5c06\u5185\u90e8\u4f17\u591a\u673a\u5668\u62bd\u8c61, \u5bf9\u5916\u5448\u73b0\u51fa\u4e00\u53f0\u8d85\u5927\u673a\u5668. \u865a\u62df\u673a\u65f6\u4ee3, \u4e0a\u8ff02\u4e2a\u529f\u80fd\u90fd\u9700\u8981\u6bcf\u4e2a\u516c\u53f8\u81ea\u884c\u5236\u5b9a\u89c4\u8303\u3001\u7814\u53d1\u4ee5\u53ca\u7ef4\u62a4.","title":"\u8c08\u4e00\u4e0b\u865a\u62df\u673a\u548c\u5bb9\u5668\u4e91\u7684\u533a\u522b"},{"location":"chapter_7/5_server_side_evolution/#_6","text":"\u53c2\u8003\u6587\u68631","title":"\u53c2\u8003\u6587\u6863"},{"location":"chapter_7/5_sre_tools_chrome_plug-in/","text":"\u4e00 \u8bf4\u660e \u8fd9\u7bc7\u535a\u6587\u4e2d,\u8bb0\u5f55\u901a\u8fc7\u5404\u79cd\u6e20\u9053\u6536\u83b7\u7684chrome\u63d2\u4ef6,\u4e3b\u8981\u7528\u4e8e\u63d0\u5347\u5e73\u65f6\u8fd0\u7ef4\u5de5\u4f5c\u4e2d\u7684\u6548\u7387. \u5927\u90e8\u5206\u662f\u8f6c\u8f7d\u800c\u6765. \u4e8c \u5f00\u53d1\u7c7b\u63d2\u4ef6 (\u4e00) JSONView \u662f\u4e00\u4e2a\u65b9\u4fbf\u67e5\u770b Json \u7ed3\u6784\u7684\u63d2\u4ef6\uff0c\u5c55\u5f00\uff0c\u6298\u53e0\uff0c\u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u67e5\u770b\u63a5\u53e3\u8fd4\u56de\u6570\u636e. \u5f53\u6211\u4eec\u8c03\u8bd5\u540e\u53f0API\u65f6\u975e\u5e38\u6709\u7528,\u56e0\u4e3a\u6211\u4eec\u540e\u53f0API\u8fd4\u56de\u7684\u7ed3\u679c\u51e0\u4e4e\u90fd\u662fjson\u683c\u5f0f,chrome\u5f00\u542f\u8fd9\u4e2a\u63d2\u4ef6 \u4e4b\u540e\u5c31\u80fd\u4ee5\u66f4\u53cb\u597d\u7684\u65b9\u5f0f\u5c55\u793a\u540e\u53f0\u8fd4\u56de\u7684\u6570\u636e. (\u4e8c) Postman \u76f8\u4fe1\u5f00\u53d1\u8005\u670b\u53cb\u4e00\u5b9a\u77e5\u9053\u8fd9\u6b3e\u63d2\u4ef6\uff0c\u8fd9\u662f\u4e00\u6b3e\u5f3a\u5927\u7684 API & HTTP \u8bf7\u6c42\u8c03\u8bd5\u5de5\u5177\uff0c\u5b83\u4e0d\u4ec5\u53ef\u4ee5\u8c03\u8bd5\u7b80\u5355\u7684 HTML\u3001CSS \u4ee5\u53ca\u811a\u672c\u7b49\u7b80\u5355\u7684\u7f51\u9875\u57fa\u672c\u4fe1\u606f\uff0c\u8fd9\u6b3e Chrome \u63d2\u4ef6\u751a\u81f3\u8fd8\u80fd\u53d1\u9001\u51e0\u4e4e\u6240\u6709\u7684 HTTP \u8bf7\u6c42\uff0c\u53ef\u8c13\u662f Web \u5f00\u53d1\u8005\u7684\u4e00\u5927\u5229\u5668\u3002 (\u4e09) Cookies \u7ba1\u7406chrome\u7684cookie \u4e09 \u901a\u7528\u7c7b\u63d2\u4ef6 (\u4e00) \u5e7f\u544a\u8fc7\u6ee4 \u5e7f\u544a\u7ec8\u7ed3\u8005. \u6e05\u9664\u7f51\u9875\u4e0a\u7684\u6240\u6709\u5e7f\u544a\uff1a\u6d6e\u52a8\u5e7f\u544a\uff0c\u8d2d\u7269\u5e7f\u544a\uff0c\u6076\u610f\u5f39\u7a97\uff0c\u8ddf\u8e2a\u4ee3\u7801\uff0c\u89c6\u9891\u5e7f\u544a\u3002\u8ba9\u4f60\u6d4f\u89c8\u7f51\u9875\u66f4\u5feb\u66f4\u6e05\u723d\u3002\u5e7f\u544a\u7ec8\u7ed3\u8005\uff0c\u4f60\u552f\u4e00\u9700\u8981\u7684\u5e7f\u544a\u63d2\u4ef6 WX20190829-172709 (\u4e8c) \u622a\u56fe\u63d2\u4ef6 \u7f51\u9875\u622a\u56fe:\u6ce8\u91ca&\u5f55\u5c4f. \u5f55\u5c4f\uff0c\u6355\u83b7\u6574\u4e2a\u9875\u9762\u6216\u4efb\u4f55\u90e8\u5206\uff0c\u77e9\u5f62\uff0c\u5706\u5f62\uff0c\u7bad\u5934\uff0c\u7ebf\u6761\u548c\u6587\u5b57\uff0c\u6a21\u7cca\u654f\u611f\u4fe1\u606f\uff0c\u4e00\u952e\u4e0a\u4f20\u5206\u4eab\u6ce8\u91ca\u3002\u652f\u6301PNG\u548c\u94fe\u63a5 (\u4e09) \u81ea\u52a8\u5237\u65b0\u7f51\u9875 Auto Refresh Auto Refresh is the best extension to refresh on a timer \uff08\u56db\uff09 \u753b\u6d41\u7a0b\u56fe draw.io \u662f\u4e00\u4e2a\u8457\u540d\u7684\u5728\u7ebf\u753b\u56fe\u7f51\u7ad9,\u8fd9\u4e2a\u63d2\u4ef6\u5c31\u662f\u8be5\u7f51\u7ad9\u7684\u4e00\u4e2achrome\u63d2\u4ef6,\u65b9\u4fbf\u672c\u5730\u76f4\u63a5\u753b\u56fe.","title":"\u4e00 \u8bf4\u660e"},{"location":"chapter_7/5_sre_tools_chrome_plug-in/#_1","text":"\u8fd9\u7bc7\u535a\u6587\u4e2d,\u8bb0\u5f55\u901a\u8fc7\u5404\u79cd\u6e20\u9053\u6536\u83b7\u7684chrome\u63d2\u4ef6,\u4e3b\u8981\u7528\u4e8e\u63d0\u5347\u5e73\u65f6\u8fd0\u7ef4\u5de5\u4f5c\u4e2d\u7684\u6548\u7387. \u5927\u90e8\u5206\u662f\u8f6c\u8f7d\u800c\u6765.","title":"\u4e00 \u8bf4\u660e"},{"location":"chapter_7/5_sre_tools_chrome_plug-in/#_2","text":"","title":"\u4e8c \u5f00\u53d1\u7c7b\u63d2\u4ef6"},{"location":"chapter_7/5_sre_tools_chrome_plug-in/#jsonview","text":"\u662f\u4e00\u4e2a\u65b9\u4fbf\u67e5\u770b Json \u7ed3\u6784\u7684\u63d2\u4ef6\uff0c\u5c55\u5f00\uff0c\u6298\u53e0\uff0c\u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u67e5\u770b\u63a5\u53e3\u8fd4\u56de\u6570\u636e. \u5f53\u6211\u4eec\u8c03\u8bd5\u540e\u53f0API\u65f6\u975e\u5e38\u6709\u7528,\u56e0\u4e3a\u6211\u4eec\u540e\u53f0API\u8fd4\u56de\u7684\u7ed3\u679c\u51e0\u4e4e\u90fd\u662fjson\u683c\u5f0f,chrome\u5f00\u542f\u8fd9\u4e2a\u63d2\u4ef6 \u4e4b\u540e\u5c31\u80fd\u4ee5\u66f4\u53cb\u597d\u7684\u65b9\u5f0f\u5c55\u793a\u540e\u53f0\u8fd4\u56de\u7684\u6570\u636e.","title":"(\u4e00) JSONView"},{"location":"chapter_7/5_sre_tools_chrome_plug-in/#postman","text":"\u76f8\u4fe1\u5f00\u53d1\u8005\u670b\u53cb\u4e00\u5b9a\u77e5\u9053\u8fd9\u6b3e\u63d2\u4ef6\uff0c\u8fd9\u662f\u4e00\u6b3e\u5f3a\u5927\u7684 API & HTTP \u8bf7\u6c42\u8c03\u8bd5\u5de5\u5177\uff0c\u5b83\u4e0d\u4ec5\u53ef\u4ee5\u8c03\u8bd5\u7b80\u5355\u7684 HTML\u3001CSS \u4ee5\u53ca\u811a\u672c\u7b49\u7b80\u5355\u7684\u7f51\u9875\u57fa\u672c\u4fe1\u606f\uff0c\u8fd9\u6b3e Chrome \u63d2\u4ef6\u751a\u81f3\u8fd8\u80fd\u53d1\u9001\u51e0\u4e4e\u6240\u6709\u7684 HTTP \u8bf7\u6c42\uff0c\u53ef\u8c13\u662f Web \u5f00\u53d1\u8005\u7684\u4e00\u5927\u5229\u5668\u3002","title":"(\u4e8c) Postman"},{"location":"chapter_7/5_sre_tools_chrome_plug-in/#cookies","text":"\u7ba1\u7406chrome\u7684cookie","title":"(\u4e09) Cookies"},{"location":"chapter_7/5_sre_tools_chrome_plug-in/#_3","text":"","title":"\u4e09 \u901a\u7528\u7c7b\u63d2\u4ef6"},{"location":"chapter_7/5_sre_tools_chrome_plug-in/#_4","text":"\u5e7f\u544a\u7ec8\u7ed3\u8005. \u6e05\u9664\u7f51\u9875\u4e0a\u7684\u6240\u6709\u5e7f\u544a\uff1a\u6d6e\u52a8\u5e7f\u544a\uff0c\u8d2d\u7269\u5e7f\u544a\uff0c\u6076\u610f\u5f39\u7a97\uff0c\u8ddf\u8e2a\u4ee3\u7801\uff0c\u89c6\u9891\u5e7f\u544a\u3002\u8ba9\u4f60\u6d4f\u89c8\u7f51\u9875\u66f4\u5feb\u66f4\u6e05\u723d\u3002\u5e7f\u544a\u7ec8\u7ed3\u8005\uff0c\u4f60\u552f\u4e00\u9700\u8981\u7684\u5e7f\u544a\u63d2\u4ef6 WX20190829-172709","title":"(\u4e00) \u5e7f\u544a\u8fc7\u6ee4"},{"location":"chapter_7/5_sre_tools_chrome_plug-in/#_5","text":"\u7f51\u9875\u622a\u56fe:\u6ce8\u91ca&\u5f55\u5c4f. \u5f55\u5c4f\uff0c\u6355\u83b7\u6574\u4e2a\u9875\u9762\u6216\u4efb\u4f55\u90e8\u5206\uff0c\u77e9\u5f62\uff0c\u5706\u5f62\uff0c\u7bad\u5934\uff0c\u7ebf\u6761\u548c\u6587\u5b57\uff0c\u6a21\u7cca\u654f\u611f\u4fe1\u606f\uff0c\u4e00\u952e\u4e0a\u4f20\u5206\u4eab\u6ce8\u91ca\u3002\u652f\u6301PNG\u548c\u94fe\u63a5","title":"(\u4e8c) \u622a\u56fe\u63d2\u4ef6"},{"location":"chapter_7/5_sre_tools_chrome_plug-in/#_6","text":"Auto Refresh Auto Refresh is the best extension to refresh on a timer","title":"(\u4e09) \u81ea\u52a8\u5237\u65b0\u7f51\u9875"},{"location":"chapter_7/5_sre_tools_chrome_plug-in/#_7","text":"draw.io \u662f\u4e00\u4e2a\u8457\u540d\u7684\u5728\u7ebf\u753b\u56fe\u7f51\u7ad9,\u8fd9\u4e2a\u63d2\u4ef6\u5c31\u662f\u8be5\u7f51\u7ad9\u7684\u4e00\u4e2achrome\u63d2\u4ef6,\u65b9\u4fbf\u672c\u5730\u76f4\u63a5\u753b\u56fe.","title":"\uff08\u56db\uff09 \u753b\u6d41\u7a0b\u56fe"},{"location":"chapter_7/6_elk/","text":"\u65e5\u5fd7\u7cfb\u7edf LogCenter\u65e5\u5fd7\u670d\u52a1\u5e73\u53f0\u662f\u9488\u5bf9\u65e5\u5fd7\u7c7b\u6570\u636e\u7684\u4e00\u7ad9\u5f0f\u670d\u52a1. \u5305\u542b\u5982\u4e0b\u529f\u80fd: \u65e5\u5fd7\u6536\u96c6\uff1a\u80fd\u591f\u91c7\u96c6\u591a\u79cd\u6765\u6e90\uff08\u5ba2\u6237\u7aef\u3001\u670d\u52a1\u7aef\u3001\u4e91\uff09\u7684\u65e5\u5fd7\u6570\u636e \u4f20\u8f93\u548c\u8fc7\u6ee4\uff1a\u80fd\u591f\u7a33\u5b9a\u7684\u628a\u65e5\u5fd7\u6570\u636e\u89e3\u6790\u8fc7\u6ee4\u5e76\u4f20\u8f93\u5230\u5b58\u50a8\u7cfb\u7edf (\u80fd\u591f\u6d41\u5165 Kafka\u3001ELK\u3001Redis \u7b49\u591a\u79cd\u4e0b\u6e38\u5b58\u50a8) \u5b58\u50a8\uff1a\u5b58\u50a8\u65e5\u5fd7\u6570\u636e \u5206\u6790\uff1a\u652f\u6301 UI \u68c0\u7d22\u548c\u5206\u6790 \u8b66\u544a\uff1a\u80fd\u591f\u63d0\u4f9b\u9519\u8bef\u62a5\u544a\uff0c\u76d1\u63a7\u673a\u5236 \u4f01\u4e1a\u7ea7LogCenter\u7684\u5efa\u8bbe\uff0c\u901a\u5e38\u90fd\u662f ELK\u6280\u672f\u6808 + \u81ea\u7814\u8fd0\u7ef4\u5e73\u53f0 \u7684\u7ed3\u5408, \u56e0\u6b64\u6211\u4eec\u5148\u6765\u8ba4\u8bc6\u4e0bES. \u524d\u7f6e\u77e5\u8bc6 Lucene \u901a\u8fc7\u5bf9\u751f\u6d3b\u4e2d\u6570\u636e\u7684\u7c7b\u578b\u4f5c\u4e86\u4e00\u4e2a\u7b80\u77ed\u4e86\u89e3\u4e4b\u540e\uff0c\u6211\u4eec\u77e5\u9053\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684 SQL \u68c0\u7d22\u662f\u5904\u7406\u4e0d\u4e86\u8fd9\u79cd\u975e\u7ed3\u6784\u5316\u6570\u636e\u7684\u3002 \u8fd9\u79cd\u975e\u7ed3\u6784\u5316\u6570\u636e\u7684\u5904\u7406\u9700\u8981\u4f9d\u8d56\u5168\u6587\u641c\u7d22\uff0c\u800c\u76ee\u524d\u5e02\u573a\u4e0a\u5f00\u653e\u6e90\u4ee3\u7801\u7684\u6700\u597d\u5168\u6587\u68c0\u7d22\u5f15\u64ce\u5de5\u5177\u5305\u5c31\u5c5e\u4e8e Apache \u7684 Lucene\u4e86\u3002 \u4f46\u662f Lucene \u53ea\u662f\u4e00\u4e2a\u5de5\u5177\u5305\uff0c\u5b83\u4e0d\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u5168\u6587\u68c0\u7d22\u5f15\u64ce\u3002Lucene \u7684\u76ee\u7684\u662f\u4e3a\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u4e00\u4e2a\u7b80\u5355\u6613\u7528\u7684\u5de5\u5177\u5305\uff0c\u4ee5\u65b9\u4fbf\u7684\u5728\u76ee\u6807\u7cfb\u7edf\u4e2d\u5b9e\u73b0\u5168\u6587\u68c0\u7d22\u7684\u529f\u80fd\uff0c\u6216\u8005\u662f\u4ee5\u6b64\u4e3a\u57fa\u7840\u5efa\u7acb\u8d77\u5b8c\u6574\u7684\u5168\u6587\u68c0\u7d22\u5f15\u64ce\u3002 \u76ee\u524d\u4ee5 Lucene \u4e3a\u57fa\u7840\u5efa\u7acb\u7684\u5f00\u6e90\u53ef\u7528\u5168\u6587\u641c\u7d22\u5f15\u64ce\u4e3b\u8981\u662f Solr \u548c Elasticsearch\u3002 Solr \u548c Elasticsearch \u90fd\u662f\u6bd4\u8f83\u6210\u719f\u7684\u5168\u6587\u641c\u7d22\u5f15\u64ce\uff0c\u80fd\u5b8c\u6210\u7684\u529f\u80fd\u548c\u6027\u80fd\u4e5f\u57fa\u672c\u4e00\u6837\u3002 \u4f46\u662f ES \u672c\u8eab\u5c31\u5177\u6709\u5206\u5e03\u5f0f\u7684\u7279\u6027\u548c\u6613\u5b89\u88c5\u4f7f\u7528\u7684\u7279\u70b9\uff0c\u800c Solr \u7684\u5206\u5e03\u5f0f\u9700\u8981\u501f\u52a9\u7b2c\u4e09\u65b9\u6765\u5b9e\u73b0\uff0c\u4f8b\u5982\u901a\u8fc7\u4f7f\u7528 ZooKeeper \u6765\u8fbe\u5230\u5206\u5e03\u5f0f\u534f\u8c03\u7ba1\u7406\u3002 \u4e0d\u7ba1\u662f Solr \u8fd8\u662f Elasticsearch \u5e95\u5c42\u90fd\u662f\u4f9d\u8d56\u4e8e Lucene\uff0c\u800c Lucene \u80fd\u5b9e\u73b0\u5168\u6587\u641c\u7d22\u4e3b\u8981\u662f\u56e0\u4e3a\u5b83\u5b9e\u73b0\u4e86\u5012\u6392\u7d22\u5f15\u7684\u67e5\u8be2\u7ed3\u6784\u3002 \u5982\u4f55\u7406\u89e3\u5012\u6392\u7d22\u5f15\u5462\uff1f \u5047\u5982\u73b0\u6709\u4e09\u4efd\u6570\u636e\u6587\u6863\uff0c\u6587\u6863\u7684\u5185\u5bb9\u5982\u4e0b\u5206\u522b\u662f\uff1a Java is the best programming language. PHP is the best programming language. Javascript is the best programming language. \u4e3a\u4e86\u521b\u5efa\u5012\u6392\u7d22\u5f15\uff0c\u6211\u4eec\u901a\u8fc7\u5206\u8bcd\u5668\u5c06\u6bcf\u4e2a\u6587\u6863\u7684\u5185\u5bb9\u57df\u62c6\u5206\u6210\u5355\u72ec\u7684\u8bcd\uff08\u6211\u4eec\u79f0\u5b83\u4e3a\u8bcd\u6761\u6216 Term\uff09\uff0c\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u6240\u6709\u4e0d\u91cd\u590d\u8bcd\u6761\u7684\u6392\u5e8f\u5217\u8868\uff0c\u7136\u540e\u5217\u51fa\u6bcf\u4e2a\u8bcd\u6761\u51fa\u73b0\u5728\u54ea\u4e2a\u6587\u6863\u3002 \u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a \u8fd9\u79cd\u7ed3\u6784\u7531\u6587\u6863\u4e2d\u6240\u6709\u4e0d\u91cd\u590d\u8bcd\u7684\u5217\u8868\u6784\u6210\uff0c\u5bf9\u4e8e\u5176\u4e2d\u6bcf\u4e2a\u8bcd\u90fd\u6709\u4e00\u4e2a\u6587\u6863\u5217\u8868\u4e0e\u4e4b\u5173\u8054\u3002 \u8fd9\u79cd\u7531\u5c5e\u6027\u503c\u6765\u786e\u5b9a\u8bb0\u5f55\u7684\u4f4d\u7f6e\u7684\u7ed3\u6784\u5c31\u662f\u5012\u6392\u7d22\u5f15\u3002\u5e26\u6709\u5012\u6392\u7d22\u5f15\u7684\u6587\u4ef6\u6211\u4eec\u79f0\u4e3a\u5012\u6392\u6587\u4ef6\u3002 \u6211\u4eec\u5c06\u4e0a\u9762\u7684\u5185\u5bb9\u8f6c\u6362\u4e3a\u56fe\u7684\u5f62\u5f0f\u6765\u8bf4\u660e\u5012\u6392\u7d22\u5f15\u7684\u7ed3\u6784\u4fe1\u606f\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5176\u4e2d\u4e3b\u8981\u6709\u5982\u4e0b\u51e0\u4e2a\u6838\u5fc3\u672f\u8bed\u9700\u8981\u7406\u89e3\uff1a \u8bcd\u6761\uff08Term\uff09\uff1a \u7d22\u5f15\u91cc\u9762\u6700\u5c0f\u7684\u5b58\u50a8\u548c\u67e5\u8be2\u5355\u5143\uff0c\u5bf9\u4e8e\u82f1\u6587\u6765\u8bf4\u662f\u4e00\u4e2a\u5355\u8bcd\uff0c\u5bf9\u4e8e\u4e2d\u6587\u6765\u8bf4\u4e00\u822c\u6307\u5206\u8bcd\u540e\u7684\u4e00\u4e2a\u8bcd\u3002 \u8bcd\u5178\uff08Term Dictionary\uff09\uff1a \u6216\u5b57\u5178\uff0c\u662f\u8bcd\u6761 Term \u7684\u96c6\u5408\u3002\u641c\u7d22\u5f15\u64ce\u7684\u901a\u5e38\u7d22\u5f15\u5355\u4f4d\u662f\u5355\u8bcd\uff0c\u5355\u8bcd\u8bcd\u5178\u662f\u7531\u6587\u6863\u96c6\u5408\u4e2d\u51fa\u73b0\u8fc7\u7684\u6240\u6709\u5355\u8bcd\u6784\u6210\u7684\u5b57\u7b26\u4e32\u96c6\u5408\uff0c\u5355\u8bcd\u8bcd\u5178\u5185\u6bcf\u6761\u7d22\u5f15\u9879\u8bb0\u8f7d\u5355\u8bcd\u672c\u8eab\u7684\u4e00\u4e9b\u4fe1\u606f\u4ee5\u53ca\u6307\u5411\u201c\u5012\u6392\u5217\u8868\u201d\u7684\u6307\u9488\u3002 \u5012\u6392\u8868\uff08Post list\uff09\uff1a \u4e00\u4e2a\u6587\u6863\u901a\u5e38\u7531\u591a\u4e2a\u8bcd\u7ec4\u6210\uff0c\u5012\u6392\u8868\u8bb0\u5f55\u7684\u662f\u67d0\u4e2a\u8bcd\u5728\u54ea\u4e9b\u6587\u6863\u91cc\u51fa\u73b0\u8fc7\u4ee5\u53ca\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\u6bcf\u6761\u8bb0\u5f55\u79f0\u4e3a\u4e00\u4e2a\u5012\u6392\u9879\uff08Posting\uff09\u3002\u5012\u6392\u8868\u8bb0\u5f55\u7684\u4e0d\u5355\u662f\u6587\u6863\u7f16\u53f7\uff0c\u8fd8\u5b58\u50a8\u4e86\u8bcd\u9891\u7b49\u4fe1\u606f\u3002 \u5012\u6392\u6587\u4ef6\uff08Inverted File\uff09\uff1a \u6240\u6709\u5355\u8bcd\u7684\u5012\u6392\u5217\u8868\u5f80\u5f80\u987a\u5e8f\u5730\u5b58\u50a8\u5728\u78c1\u76d8\u7684\u67d0\u4e2a\u6587\u4ef6\u91cc\uff0c\u8fd9\u4e2a\u6587\u4ef6\u88ab\u79f0\u4e4b\u4e3a\u5012\u6392\u6587\u4ef6\uff0c\u5012\u6392\u6587\u4ef6\u662f\u5b58\u50a8\u5012\u6392\u7d22\u5f15\u7684\u7269\u7406\u6587\u4ef6\u3002 \u4ece\u4e0a\u56fe\u6211\u4eec\u53ef\u4ee5\u4e86\u89e3\u5230\u5012\u6392\u7d22\u5f15\u4e3b\u8981\u7531\u4e24\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a \u8bcd\u5178 \u5012\u6392\u6587\u4ef6 \u8bcd\u5178\u548c\u5012\u6392\u8868\u662f Lucene \u4e2d\u5f88\u91cd\u8981\u7684\u4e24\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u662f\u5b9e\u73b0\u5feb\u901f\u68c0\u7d22\u7684\u91cd\u8981\u57fa\u77f3\u3002 \u8bcd\u5178\u548c\u5012\u6392\u6587\u4ef6\u662f\u5206\u4e24\u90e8\u5206\u5b58\u50a8\u7684\uff0c\u8bcd\u5178\u5728\u5185\u5b58\u4e2d\u800c\u5012\u6392\u6587\u4ef6\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a \u3002 ElasticSearch\u7684\u57fa\u7840\u6982\u5ff5 \u6bcf\u4e2a Index \u7531\u4e00\u4e2a\u6216\u8005\u591a\u4e2a shard \u7ec4\u6210\uff0c\u5206\u5e03\u5728\u4e0d\u540c\u7684 node \uff0cdocument \u7531 Field \u7ec4\u6210\uff0c\u5b58\u50a8\u5728\u8fd9\u4e9b shard \u4e2d\u3002 ES vs \u5173\u7cfb\u578b\u6570\u636e\u5e93 \u548c\u4f20\u7edf\u7684\u5173\u7cfb\u578b\u6570\u636e\u5e93\u6709\u8fd9\u4e48\u4e00\u79cd\u5173\u7cfb \u63a5\u4e0b\u6765\u8bb2\u89e3\u4e0bElasticSearch\u4e2d7\u4e2a\u57fa\u672c\u6982\u5ff5 1 \u7d22\u5f15Index \u67093\u5c42\u542b\u4e49 \u540d\u8bcd Index (Indices\uff0cIndexes) \u662f\u6587\u6863\u7684\u96c6\u5408\uff0c\u7c7b\u4f3c\u4f20\u7edf\u7684\u5173\u7cfb\u578b\u6570\u636e\u5e93\u3002 \u662f\u5206\u7247\u7684\u96c6\u5408\uff0c\u6bcf\u4e2a\u5206\u7247\u76f8\u5f53\u4e8e Lucene \u4e2d\u7684\u7d22\u5f15\u3002 \u52a8\u8bcd \u7d22\u5f15\u4e00\u4e2a\u6587\u6863\uff0c\u5c31\u662f\u5b58\u50a8\u4e00\u4e2a\u6587\u6863\u5230\u4e00\u4e2a\u7d22\u5f15\u4e2d\u4ee5\u4fbf\u88ab\u68c0\u7d22 \u4e00\u79cd\u6570\u636e\u7ed3\u6784 \u8fd9\u91cc\u6307\uff1a\u5012\u6392\u7d22\u5f15 \uff0c\u5c31\u662f\u901a\u8fc7 value \u2014\u2014> Key \uff0c\u5982\u4e0b\ud83d\udc47 \u901a\u8fc7\u8bb0\u5f55\u8fd9\u4e2a\u8bcd\u548c\u5b83\u6240\u5728\u7684\u6587\u6863ID\uff0c\u5bf9\u5e94 Lucene \u4e2d\u7684 segments (\u5206\u6bb5) 2 \u7c7b\u578b Type ES 8.x \u7248\u672c\u5f00\u59cb, \u6587\u6863\u7684Type\u90fd\u662f _doc , \u4e0d\u662f\u652f\u6301\u4fee\u6539 3 \u6587\u6863 Document ElasticSearch \u662f\u9762\u5411\u6587\u6863\u7684\uff0c\u6587\u6863\u662f\u6570\u636e\u5b58\u50a8\u548c\u7d22\u5f15\u7684\u6700\u5c0f\u5355\u4f4d\uff0c\u662f\u5b57\u6bb5\u7684\u96c6\u5408 \uff0c\u5728 ElasticSearch \u4e2d\u4ee5\u5e8f\u5217\u5316 JSON \u7ed3\u6784\u5b58\u50a8\uff0c\u6587\u6863\u7ed3\u6784\u5982\u4e0b\ud83d\udc47\uff0c\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u662f\u5b98\u65b9\u63d0\u4f9b\u7684\u5b57\u6bb5\uff0c\u79f0\u4e3a \u5143\u6570\u636e { \"_index\" : \"java4ye\", \"_type\" : \"_doc\", \"_id\" : \"1001\", \"_score\" : 1.0, \"_source\" : { \"user\" : { \"id\" : \"123456789\", \"name\" : \"4ye\", \"age\" : 2, \"desc\" : \"nice to meet you 2!\" } } } \u8fd9\u4e2a\u6587\u6863\u4e3b\u8981\u770b _source \u5b57\u6bb5\uff0c\u91cc\u9762\u5c31\u662f\u6211\u4eec\u4e0a\u4f20\u7684\u6587\u6863\u6570\u636e 4 \u5b57\u6bb5 Field \u662f\u6587\u6863\u4e2d\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u4ee5\u952e\u503c\u5bf9\u7684\u5f62\u5f0f\u5b58\u5728\uff0c\u5982 \u4e0a\u9762\u7684 \"_id\" : \"1001\" \u53ef\u4ee5\u5728\u5b98\u7f51\u4e2d\u67e5\u770b\uff0c\u6709\u8fd9\u4e48\u4e00\u4e9b\u5143\u5b57\u6bb5\ud83d\udc16 5 \u6620\u5c04 Mapping 3\u4e2a\u89e3\u91ca: \u7528\u4e8e\u8868\u793a\u8fd9\u4e2a\u5b57\u6bb5\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5982 \u5b57\u7b26\u4e32\uff0c\u6574\u6570\uff0c\u6d6e\u70b9\u6570\uff0c\u65e5\u671f\u7b49\uff0c\u4e0d\u6307\u5b9a\u65f6\u4f1a\u81ea\u52a8\u521b\u5efa \u7528\u6765\u5b9a\u4e49\u4e00\u4e2a\u6587\u6863\u4ee5\u53ca\u5176\u6240\u5305\u542b\u7684\u5b57\u6bb5\u5982\u4f55\u88ab\u5b58\u50a8\u548c\u7d22\u5f15\uff0c\u4f8b\u5982\u5728mapping\u4e2d\u5b9a\u4e49\u5b57\u6bb5\u7684\u540d\u79f0\u548c\u7c7b\u578b\uff0c\u4ee5\u53ca\u6240\u4f7f\u7528\u7684\u5206\u8bcd\u5668\u3002 Mapping\u5c31\u662f\u5bf9\u7d22\u5f15\u5e93\u4e2d\u7d22\u5f15\u7684\u5b57\u6bb5\u540d\u79f0\u53ca\u5176\u6570\u636e\u7c7b\u578b\u8fdb\u884c\u5b9a\u4e49\uff0c\u7c7b\u4f3c\u4e8emysql\u4e2d\u7684\u8868\u7ed3\u6784\u4fe1\u606f\u3002\u4e0d\u8fc7es\u7684mapping\u6bd4\u6570\u636e\u5e93\u7075\u6d3b\u5f88\u591a\uff0c\u5b83\u53ef\u4ee5\u52a8\u6001\u8bc6\u522b\u5b57\u6bb5\u3002\u4e00\u822c\u4e0d\u9700\u8981\u6307\u5b9amapping, \u56e0\u4e3aes\u4f1a\u81ea\u52a8\u6839\u636e\u6570\u636e\u683c\u5f0f\u8bc6\u522b\u5b83\u7684\u7c7b\u578b\uff0c\u5982\u679c\u4f60\u9700\u8981\u5bf9\u67d0\u4e9b\u5b57\u6bb5\u6dfb\u52a0\u7279\u6b8a\u5c5e\u6027\uff08\u5982\uff1a\u5b9a\u4e49\u4f7f\u7528\u5176\u5b83\u5206\u8bcd\u5668\u3001\u662f\u5426\u5206\u8bcd\u3001\u662f\u5426\u5b58\u50a8\u7b49\uff09\uff0c\u5c31\u5fc5\u987b\u624b\u52a8\u6dfb\u52a0mapping\u3002 6 \u8282\u70b9 node ElasticSearch \u662f\u4ee5\u96c6\u7fa4\u7684\u65b9\u5f0f\u8fd0\u884c\u7684\uff0c\u6bcf\u4e2a ElasticSearch \u5b9e\u4f8b\u5c31\u662f\u4e00\u4e2a\u8282\u70b9\u3002\uff08\u6bcf\u4e2aES\u8fdb\u7a0b\u5c31\u662f\u4e00\u4e2a\u8282\u70b9) \u800c\u8282\u70b9\u6709\u5f88\u591a\u79cd\u89d2\u8272 \ud83d\udc47\uff0c\u597d\u590d\u6742\ud83d\ude43 \u5f53\u4f60\u6ca1\u6709\u914d\u7f6e\u8fd9\u4e2a node.roles \uff0c\u8fd9\u4e2a\u8282\u70b9\u9ed8\u8ba4\u6709\u4e0b\u9762\u8fd9\u4e9b\u89d2\u8272 6.1 \u4e3b\u8282\u70b9 MasterNode \u8d1f\u8d23\u96c6\u7fa4\u8282\u70b9\u72b6\u6001\u7684\u7ef4\u62a4\uff0c\u7d22\u5f15\u7684\u521b\u5efa\uff0c\u5220\u9664\uff0c\u6570\u636e\u7684 rebalance\uff0c\u5206\u7247\u7684\u5206\u914d\u7b49\u5de5\u4f5c\uff0c\u4e0d\u8d1f\u8d23\u5177\u4f53\u6570\u636e\u7684\u7d22\u5f15\u548c\u68c0\u7d22 6.2 \u6570\u636e\u8282\u70b9 DataNode \u8d1f\u8d23\u96c6\u7fa4\u4e2d\u6570\u636e\u7684\u5199\u5165\u548c\u68c0\u7d22\uff0c\u5c5e\u4e8e IO\uff0c\u5185\u5b58 \u548c CPU \u5bc6\u96c6\u578b\u64cd\u4f5c\uff0c\u9700\u8981\u7684\u8ba1\u7b97\u8d44\u6e90\u5927 6.3 \u63d0\u53d6\u8282\u70b9 IngestNode \u6570\u636e\u9884\u5904\u7406\u901a\u9053\uff0c\u5728\u6570\u636e\u88ab\u7d22\u5f15\u524d\u9884\u5148\u5904\u7406\u6587\u6863\u3002 6.4 \u534f\u8c03\u8282\u70b9 CoordinatingNode \u63a5\u53d7\u5ba2\u6237\u7aef\u8bf7\u6c42\uff0c\u7136\u540e\u8f6c\u53d1\u5230\u6570\u636e\u8282\u70b9\uff0c\u6700\u540e\u5c06\u5404\u4e2a\u8282\u70b9\u8fd4\u56de\u6765\u7684\u6570\u636e\u8fdb\u884c\u6574\u5408\u3002\u5bf9\u5e94\u7740\u4e24\u4e2a\u9636\u6bb5 \u5206\u6563\u9636\u6bb5\uff0c\u534f\u8c03\u8282\u70b9\u5c06\u8bf7\u6c42\u8f6c\u53d1\u5230\u4fdd\u5b58\u6570\u636e\u7684\u6570\u636e\u8282\u70b9 \u6536\u96c6\u9636\u6bb5\uff0c\u534f\u8c03\u8282\u70b9\u5c06\u6bcf\u4e2a\u6570\u636e\u8282\u70b9\u7684\u7ed3\u679c\u7f29\u51cf\u4e3a\u5355\u4e2a\u5168\u5c40\u7ed3\u679c\u96c6 \u96c6\u7fa4\u5185\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u534f\u8c03\u8282\u70b9 7 \u5206\u7247 Shard \u548c \u526f\u672c Replica Elasticsearch \u7684 \u7d22\u5f15\u662f\u4ee5\u5206\u7247\u7684\u65b9\u5f0f\u6765\u7ec4\u7ec7\u7684. \u5206\u7247\u5206\u4e3a \u4e3b\u5206\u7247 \u548c \u526f\u672c\u5206\u7247\uff0c\u9ed8\u8ba4\u914d\u7f6e\u662f \u6bcf\u4e2a\u7d22\u5f15 5 \u4e2a\u4e3b\u5206\u7247\uff0c\u6bcf\u4e2a\u4e3b\u5206\u7247\u90fd\u6709\u4e00\u4e2a\u526f\u672c\u5206\u7247\uff0c\u4e3b\u5206\u7247\u548c\u5b83\u7684\u526f\u672c\u4e0d\u5728\u4e00\u4e2a\u8282\u70b9\u4e0a\uff0c\u4e3b\u8981\u4f5c\u7528\u662f \u6545\u969c\u8f6c\u79fb\u548c\u8d1f\u8f7d\u5747\u8861 \u6587\u6863\u600e\u4e48\u8def\u7531\u5230\u5bf9\u5e94\u7684\u5206\u7247\u4e0a\u5462\uff1f \u516c\u5f0f\u5982\u4e0b \ud83d\udc47 shard = hash(routing) % number_of_primary_shards routing \u662f\u4e00\u4e2a\u53ef\u53d8\u503c\uff0c\u9ed8\u8ba4\u662f\u6587\u6863\u7684 _id \uff0c\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u6210\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u503c\u3002routing \u901a\u8fc7 hash \u51fd\u6570\u751f\u6210\u4e00\u4e2a\u6570\u5b57\uff0c\u7136\u540e\u8fd9\u4e2a\u6570\u5b57\u518d\u9664\u4ee5 number_of_primary_shards \uff08\u4e3b\u5206\u7247\u7684\u6570\u91cf\uff09\u540e\u5f97\u5230 \u4f59\u6570 \u3002\u8fd9\u4e2a\u5206\u5e03\u5728 0 \u5230 number_of_primary_shards-1 \u4e4b\u95f4\u7684\u4f59\u6570\uff0c\u5c31\u662f\u6211\u4eec\u6240\u5bfb\u6c42\u7684\u6587\u6863\u6240\u5728\u5206\u7247\u7684\u4f4d\u7f6e\u3002 \u8fd9\u5c31\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u5728\u521b\u5efa\u7d22\u5f15\u7684\u65f6\u5019\u5c31\u786e\u5b9a\u597d\u4e3b\u5206\u7247\u7684\u6570\u91cf \u5e76\u4e14\u6c38\u8fdc\u4e0d\u4f1a\u6539\u53d8\u8fd9\u4e2a\u6570\u91cf\uff1a\u56e0\u4e3a\u5982\u679c\u6570\u91cf\u53d8\u5316\u4e86\uff0c\u90a3\u4e48\u6240\u6709\u4e4b\u524d\u8def\u7531\u7684\u503c\u90fd\u4f1a\u65e0\u6548\uff0c\u6587\u6863\u4e5f\u518d\u4e5f\u627e\u4e0d\u5230\u4e86\u3002 8 ES\u5b57\u6bb5\u7c7b\u578b text \u7528\u4e8e\u7d22\u5f15\u5168\u6587\u503c\u7684\u5b57\u6bb5\uff0c\u4f8b\u5982\u7535\u5b50\u90ae\u4ef6\u6b63\u6587\u6216\u4ea7\u54c1\u8bf4\u660e\u3002\u8fd9\u4e9b\u5b57\u6bb5\u662f\u88ab\u5206\u8bcd\u7684\uff0c\u5b83\u4eec\u901a\u8fc7\u5206\u8bcd\u5668\u4f20\u9012 \uff0c\u4ee5\u5728\u88ab\u7d22\u5f15\u4e4b\u524d\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5355\u4e2a\u672f\u8bed\u7684\u5217\u8868\u3002 \u5206\u6790\u8fc7\u7a0b\u5141\u8bb8 Elasticsearch \u641c\u7d22\u5355\u4e2a\u5355\u8bcd\u4e2d\u6bcf\u4e2a\u5b8c\u6574\u7684\u6587\u672c\u5b57\u6bb5\u3002\u6587\u672c\u5b57\u6bb5\u4e0d\u7528\u4e8e\u6392\u5e8f\uff0c\u5f88\u5c11\u7528\u4e8e\u805a\u5408\u3002 Keyword \u7528\u4e8e\u7d22\u5f15\u7ed3\u6784\u5316\u5185\u5bb9\u7684\u5b57\u6bb5\uff0c\u4f8b\u5982\u7535\u5b50\u90ae\u4ef6\u5730\u5740\uff0c\u4e3b\u673a\u540d\uff0c\u72b6\u6001\u4ee3\u7801\uff0c\u90ae\u653f\u7f16\u7801\u6216\u6807\u7b7e\u3002\u5b83\u4eec\u901a\u5e38\u7528\u4e8e\u8fc7\u6ee4\uff0c\u6392\u5e8f\uff0c\u548c\u805a\u5408\u3002Keyword \u5b57\u6bb5\u53ea\u80fd\u6309\u5176\u786e\u5207\u503c\u8fdb\u884c\u641c\u7d22\u3002 \u901a\u8fc7\u5bf9\u5b57\u6bb5\u7c7b\u578b\u7684\u4e86\u89e3\u6211\u4eec\u77e5\u9053\u6709\u4e9b\u5b57\u6bb5\u9700\u8981\u660e\u786e\u5b9a\u4e49\u7684\uff0c\u4f8b\u5982\u67d0\u4e2a\u5b57\u6bb5\u662f Text \u7c7b\u578b\u8fd8\u662f Keyword \u7c7b\u578b\u5dee\u522b\u662f\u5f88\u5927\u7684\uff0c\u65f6\u95f4\u5b57\u6bb5\u4e5f\u8bb8\u6211\u4eec\u9700\u8981\u6307\u5b9a\u5b83\u7684\u65f6\u95f4\u683c\u5f0f\uff0c\u8fd8\u6709\u4e00\u4e9b\u5b57\u6bb5\u6211\u4eec\u9700\u8981\u6307\u5b9a\u7279\u5b9a\u7684\u5206\u8bcd\u5668\u7b49\u7b49\u3002 \u5982\u679c\u91c7\u7528\u52a8\u6001\u6620\u5c04\u662f\u4e0d\u80fd\u7cbe\u786e\u505a\u5230\u8fd9\u4e9b\u7684\uff0c\u81ea\u52a8\u8bc6\u522b\u5e38\u5e38\u4f1a\u4e0e\u6211\u4eec\u671f\u671b\u7684\u6709\u4e9b\u5dee\u5f02\u3002 \u6240\u4ee5\u521b\u5efa\u7d22\u5f15\u7684\u65f6\u5019\u4e00\u4e2a\u5b8c\u6574\u7684\u683c\u5f0f\u5e94\u8be5\u662f\u6307\u5b9a\u5206\u7247\u548c\u526f\u672c\u6570\u4ee5\u53ca Mapping \u7684\u5b9a\u4e49\uff0c\u5982\u4e0b\uff1a PUT my_index { \"settings\" : { \"number_of_shards\" : 5, \"number_of_replicas\" : 1 } \"mappings\": { \"_doc\": { \"properties\": { \"title\": { \"type\": \"text\" }, \"name\": { \"type\": \"text\" }, \"age\": { \"type\": \"integer\" }, \"created\": { \"type\": \"date\", \"format\": \"strict_date_optional_time||epoch_millis\" } } } } } 8.1 \u5b98\u65b9\u8bf4\u660e Each field has a field data type , or field type . This type indicates the kind of data the field contains, such as strings or boolean values, and its intended use. For example, you can index strings to both text and keyword fields. However, text field values are analyzed for full-text search while keyword strings are left as-is for filtering and sorting. Field types are grouped by family . Types in the same family have exactly the same search behavior but may have different space usage or performance characteristics. \u5b98\u65b9\u6587\u6863 8.2 \u5e38\u89c1\u7684field type\u8bf4\u660e \u7c7b\u578b \u8bf4\u660e Numbers \u4f8b\u5982 int\u3001long\u3001float\uff0c\u82e5\u9700\u8981\u8303\u56f4\u67e5\u8be2\u6216\u9700\u8981\u505a\u6570\u5b57\u805a\u5408\u5982\u5e73\u5747\u503c\u3001\u767e\u5206\u4f4d\u7b49\uff0c\u5219\u9700\u8981\u8bbe\u7f6e\u4e3a\u6570\u5b57\u7c7b\u578b keyword \u5b57\u7b26\u4e32(\u4e0d\u5206\u8bcd) \uff0c\u5b57\u6bb5\u641c\u7d22\u529f\u80fd\u5f31\u5f88\u591a\uff0c\u65e0\u6cd5\u4f7f\u7528\u8bcd\u7d20\u8fdb\u884c\u641c\u7d22\uff0c\u4f46\u662f\u53ef\u4ee5\u5b8c\u6210\u805a\u5408\u64cd\u4f5c\uff0c\u540c\u65f6\u4e0d\u5206\u8bcd\u5b57\u6bb5\u53d7\u5230\u6700\u5927\u957f\u5ea6 32K \u7684\u9650\u5236 text \u5b57\u7b26\u4e32(\u5206\u8bcd)\uff0c\u53ef\u4ee5\u76f4\u63a5\u641c\u7d22\u8be5\u5b57\u6bb5\u88ab\u5206\u8bcd\u540e\u7684\u8bcd\u7d20(Term)\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u901a\u914d\u7b26\u641c\u7d22\u7b49\u529f\u80fd\uff0c\u4f46\u662f\u65e0\u6cd5\u5229\u7528\u8be5\u5b57\u6bb5\u5b8c\u6210\u805a\u5408\u7b49\u64cd\u4f5c ip \u4f1a\u5bf9\u8be5 ip \u5730\u5740\u8fdb\u884c geoip \u89e3\u6790\uff0c\u83b7\u53d6\u5730\u7406\u4f4d\u7f6e\u4ee5\u53ca\u8fd0\u8425\u5546\u4fe1\u606f json \u4f1a\u5bf9\u8be5\u5b57\u6bb5\u7684\u6587\u672c\u5185\u5bb9\u8fdb\u884c json \u89e3\u6790\uff0c\u4ee5 kv \u5f62\u5f0f\u5448\u73b0\u89e3\u6790\u7ed3\u679c\uff0c\u5b89\u5168\u8d77\u89c1\uff0c\u539f\u59cb\u5b57\u6bb5\u5185\u5bb9\u4e5f\u5c06\u4fdd\u7559 date \u5982\u679c\u9700\u8981\u4f7f\u7528\u65e5\u5fd7\u7684\u65f6\u95f4\u4f5c\u4e3a\u65f6\u95f4\u6233 \uff0c\u60a8\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u5b57\u6bb5\u4e3a date \u7c7b\u578b\uff0c\u4f5c\u4e3a\u65e5\u5fd7\u7684\u65f6\u95f4\u5b57\u6bb5\uff0c\u7136\u540e\u4f60\u9700\u8981\u65f6\u95f4\u89e3\u6790\u89c4\u5219\u3002\u65f6\u95f4\u683c\u5f0f\u53c2\u8003\uff1aplugins-filters-date\uff0c\u65f6\u95f4\u6233\u683c\u5f0f\u6bd4\u8f83\u91cd\u8981\uff0c\u540e\u53f0\u81ea\u52a8\u5339\u914d\u5230\u7684\u4e0d\u4e00\u5b9a\u662f\u6b63\u786e\u7684\uff0c\u9700\u8981\u518d\u6b21\u786e\u8ba4\u3002\uff08\u82e5\u6ca1\u6709\u65f6\u95f4\u5b57\u6bb5\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u7cfb\u7edf\u65f6\u95f4\uff09 9 @timestamp\uff08\u65f6\u95f4\u6233\uff09 \u5f53\u65e5\u5fd7\u88ab\u67d0\u4e2a\u4e8b\u4ef6\u89e6\u53d1\uff0c\u65f6\u95f4\u6233\u4f5c\u4e3a\u65e5\u5fd7\u4e8b\u4ef6\u7684\u4e00\u90e8\u5206\u8868\u660e\u4e8b\u4ef6\u662f\u4f55\u65f6\u53d1\u751f\u7684\u3002\u5728 ELK \u4e2d\u65f6\u95f4\u6233\u7684\u4f5c\u7528\u975e\u5e38\u91cd\u8981\uff0c\u6211\u4eec\u4f7f\u7528\u65f6\u95f4\u6233\u6765\u8fc7\u6ee4\u641c\u7d22\u7ed3\u679c\uff0c\u540c\u65f6\u4e5f\u4f7f\u7528\u65f6\u95f4\u6233\u786e\u5b9a\u60a8\u9879\u76ee\u4e0b\u7684\u54ea\u4e9b\u65e5\u5fd7\u8d85\u51fa\u4fdd\u5b58\u671f\u9650\u9700\u8981\u6e05\u9664\u3002 \u83b7\u53d6\u65f6\u95f4\u6233\u53d6\u51b3\u4e8e\u60a8\u53d1\u9001\u7684\u65e5\u5fd7\u6570\u636e\u7c7b\u578b\uff0c\u65f6\u95f4\u6233\u5c06\u6309\u4ee5\u4e0b\u987a\u5e8f\u4f18\u5148\u5904\u7406\uff1a \u5206\u6790\u65e5\u5fd7\u6570\u636e\uff1a\u5982\u679c\u60a8\u7684\u65e5\u5fd7\u5185\u65f6\u95f4\u6233\u80fd\u591f\u88ab\u89e3\u6790\uff0cELK \u5c06\u76f4\u63a5\u4f7f\u7528\u65e5\u5fd7\u4e2d\u7684\u65f6\u95f4\u6233\uff0c\u5b83\u662f\u7531\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u8bb0\u5f55\u4e0b\u6765\u7684\u3002 syslog\uff1a\u5982\u679c\u60a8\u7684\u65e5\u5fd7\u7531syslog\u8f6c\u53d1\uff0c\u90a3\u4e48\u4f1a\u6709\u65f6\u95f4\u6233\u88ab\u5d4c\u5165\u65e5\u5fd7\u5934\u90e8\uff0cELK \u4f1a\u63d0\u53d6\u4f7f\u7528\u3002 doc\u91cc\u82e5\u6ca1\u6709\u65f6\u95f4\u5b57\u6bb5\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528ES\u7cfb\u7edf\u65f6\u95f4. \u65e5\u5fd7\u63a5\u5165ES\u65f6\u8be6\u7ec6\u8fc7\u7a0b \u65e5\u5fd7\u63a5\u5165ES\u65f6, \u987b\u8bbe\u7f6e\u65e5\u5fd7\u89e3\u6790\u89c4\u5219 \u76ee\u524d\u63d0\u4f9b\u4e86\u4e24\u79cd\u5207\u5272\u65e5\u5fd7\u7684\u65b9\u5f0f \u5212\u8bcd\u63d0\u53d6\uff08\u901f\u5ea6\u5feb\uff0c\u4f46\u8981\u6c42\u65e5\u5fd7\u683c\u5f0f\u7edf\u4e00\uff09 \u6b63\u5219\u89e3\u6790 \u5212\u8bcd\u63d0\u53d6 \u5212\u8bcd\u63d0\u53d6\u662f\u6307\u901a\u8fc7\u7279\u5b9a\u5206\u9694\u7b26\u53f7\u6216\u8005\u7279\u5b9a\u5b57\u7b26\u4e32\uff08\u6bcf\u6761\u65e5\u5fd7\u4e2d\u90fd\u4f1a\u51fa\u73b0\u7684\u76f8\u540c\u5185\u5bb9\uff09\u6765\u63d0\u53d6\u65e5\u5fd7\u4e2d\u5173\u952e\u4fe1\u606f\u7684\u89e3\u6790\u65b9\u6cd5\u3002 \u6b63\u5219\u89e3\u6790 \u6b63\u5219\u89e3\u6790\u5219\u662f\u901a\u8fc7GROK\u6b63\u5219\u89e3\u6790, \u6765\u63d0\u53d6\u65e5\u5fd7\u4e2d\u7684\u5173\u952e\u5b57. \u5f7b\u5e95\u641e\u61c2\u5206\u8bcd \u4ec0\u4e48\u662f\u5206\u8bcd? \u5206\u8bcd\u662f\u6307\u5c06\u6587\u672c\u8f6c\u6362\u6210\u4e00\u7cfb\u5217\u5355\u8bcd\uff08term or token\uff09\u7684\u8fc7\u7a0b\uff0c\u4e5f\u53ef\u4ee5\u53eb\u505a\u6587\u672c\u5206\u6790\uff0c\u5728es\u91cc\u9762\u79f0\u4e3aAnalysis. (\u8fd9\u91cc\u7684term\u7b49\u4e8etoken, \u4ea7\u751ftoken\u5373\u4ea7\u751fterm\uff09 \u641c\u7d22\u5f15\u64ce\u7684\u6838\u5fc3\u662f\u5012\u6392\u7d22\u5f15\uff0c\u800c\u5012\u6392\u7d22\u5f15\u7684\u57fa\u7840\u5c31\u662f\u5206\u8bcd\u3002\u6240\u8c13\u5206\u8bcd\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\u5c06\u4e00\u4e2a\u5b8c\u6574\u7684\u53e5\u5b50\u5207\u5272\u4e3a\u4e00\u4e2a\u4e2a\u5355\u8bcd\u7684\u8fc7\u7a0b\u3002\u5728 es \u4e2d\u5355\u8bcd\u5bf9\u5e94\u82f1\u6587\u4e3a term\u3002 \u6211\u4eec\u7b80\u5355\u770b\u4e2a\u4f8b\u5b50 ES \u7684\u5012\u6392\u7d22\u5f15\u5373\u662f\u6839\u636e\u5206\u8bcd\u540e\u7684\u5355\u8bcd\u521b\u5efa\uff0c\u5373 \u6211 \u3001 \u7231 \u3001 \u5317\u4eac \u3001 \u5929\u5b89\u95e8 \u8fd94\u4e2a\u5355\u8bcd\u3002\u8fd9\u4e5f\u610f\u5473\u7740\u4f60\u5728\u641c\u7d22\u7684\u65f6\u5019\u4e5f\u53ea\u80fd\u641c\u7d22\u8fd94\u4e2a\u5355\u8bcd\u624d\u80fd\u547d\u4e2d\u8be5\u6587\u6863. \u6574\u4e2a\u8fc7\u7a0b \u5982\u4e0b\u56fe\u6240\u793a \u5728\u65e5\u5fd7\u5207\u5272\u9636\u6bb5, \u5982\u679c\u4f60\u6307\u5b9a\u4e86\u67d0\u4e2a\u5b57\u7b26\u4e32\u4e3a keyword \u7c7b\u578b, \u90a3\u8fd9\u4e2a\u5b57\u6bb5\u5c31\u662fTerm, \u5c06\u6765\u53ef\u7528\u4e8e\u641c\u7d22. \u9636\u6bb5 \u9636\u6bb5\u82f1\u6587\u540d \u4f5c\u7528 \u4e3e\u4f8b \u524d Character Filter \u5bf9\u539f\u59cb\u6587\u672c\u8fdb\u884c\u5904\u7406 \u4f8b\uff1a\u53bb\u9664html\u6807\u7b7e\u3001\u7279\u6b8a\u5b57\u7b26\u7b49 \u4e2d Tokenizer \u5c06\u539f\u59cb\u6587\u672c\u8fdb\u884c\u5206\u8bcd \u4f8b\uff1a\u4e0a\u8bfe\u5b66\u4e60\u2013>\u4e0a\u8bfe,\u5b66\u4e60 \u540e Token Filters \u5206\u8bcd\u540e\u7684\u5173\u952e\u5b57\u8fdb\u884c\u52a0\u5de5 \u4f8b\uff1a\u8f6c\u5c0f\u5199\u3001\u5220\u9664\u8bed\u6c14\u8bcd\u3001\u8fd1\u4e49\u8bcd\u548c\u540c\u4e49\u8bcd\u7b49 1 ES\u6709\u54ea\u4e9b Character Filter \u5728\u8fdb\u884cTokenizer\u4e4b\u524d\u5bf9\u539f\u59cb\u6587\u672c\u8fdb\u884c\u5904\u7406\uff0c\u5982\u589e\u52a0\u3001\u5220\u9664\u6216\u66ff\u6362\u5b57\u7b26\u7b49 \u540d\u79f0 \u4f5c\u7528 HTML Strip \u53bb\u9664html\u6807\u7b7e\u548c\u8f6c\u6362html\u5b9e\u4f53 Mapping \u5b57\u7b26\u4e32\u66ff\u6362\u64cd\u4f5c Pattern Replace \u6b63\u5219\u5339\u914d\u66ff\u6362 2 ES\u6709\u54ea\u4e9b Tokenizer \u901a\u5e38\u662f\u5bf9\u54ea\u4e9b\u7c7b\u578b\u4e3a text \u7684 filed \u8fdb\u884c\u5206\u8bcd \u5206\u8bcd\u5668\uff08Analyzer\uff09 \u7279\u70b9 Standard\uff08es\u9ed8\u8ba4\uff09 \u652f\u6301\u591a\u8bed\u8a00\uff0c\u6309\u8bcd\u5207\u5206\u5e76\u505a\u5c0f\u5199\u5904\u7406 Simple \u6309\u7167\u975e\u5b57\u6bcd\u5207\u5206\uff0c\u5c0f\u5199\u5904\u7406 Whitespace \u6309\u7167\u7a7a\u683c\u6765\u5207\u5206 Stop \u53bb\u9664\u8bed\u6c14\u52a9\u8bcd\uff0c\u5982the\u3001an\u3001\u7684\u3001\u8fd9\u7b49 Keyword \u4e0d\u5206\u8bcd Pattern \u6b63\u5219\u5206\u8bcd\uff0c\u9ed8\u8ba4\\w+,\u5373\u975e\u5b57\u8bcd\u7b26\u53f7\u505a\u5206\u5272\u7b26 Language \u5e38\u89c1\u8bed\u8a00\u7684\u5206\u8bcd\u5668\uff0830+\uff09 3 ES\u6709\u54ea\u4e9bToken Filter \u5bf9\u8f93\u51fa\u7684\u5355\u8bcd\uff08term\uff09\u8fdb\u884c\u589e\u52a0\u3001\u5220\u9664\u3001\u4fee\u6539\u7b49\u64cd\u4f5c \u540d\u79f0 \u4f5c\u7528 Lowercase \u5c06\u6240\u6709term\u8f6c\u6362\u4e3a\u5c0f\u5199 stop \u5220\u9664stop words NGram \u548cEdge NGram\u8fde\u8bcd\u5206\u5272 Synonym \u6dfb\u52a0\u8fd1\u4e49\u8bcd\u7684term 4 \u539f\u59cb\u7684API\u91cc\u5982\u4f55\u5206\u522b\u6307\u5b9a Character Filter Tokenizer Token Filter POST _analyze { \"char_filter\": [\"html_strip\"], ---> \u6307\u5b9aCharacter Filter \"tokenizer\": \"standard\", ---> \u6307\u5b9aTokenizer \"filter\": [\"lowercase\"], ---> \u6307\u5b9aToken Filter \"text\":\"Hello WORLD\" } \u5176\u4ed6\u95ee\u9898 1 \u5982\u4f55\u6307\u5b9a\u4f7f\u7528\u4ec0\u4e48\u5206\u8bcd\u5668 \u5199\u65f6\u5206\u8bcd\u5668\u9700\u8981\u5728 mapping \u4e2d\u6307\u5b9a\uff0c\u800c\u4e14\u4e00\u7ecf\u6307\u5b9a\u5c31\u4e0d\u80fd\u518d\u4fee\u6539\uff0c\u82e5\u8981\u4fee\u6539\u5fc5\u987b\u65b0\u5efa\u7d22\u5f15\u3002\u5982\u4e0b\u6240\u793a\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u540d\u4e3ams_english \u7684\u5b57\u6bb5\uff0c\u6307\u5b9a\u5176\u5206\u8bcd\u5668\u4e3a english\uff1a PUT test/_mapping/doc { \"properties\": { \"msg_english\":{ \"type\":\"text\", \"analyzer\": \"english\" } } } \u5176\u4e2dtest\u4e3a\u7d22\u5f15\u540d\u79f0 \u4f7f\u7528\"analyzer\"\u6307\u5b9a\u5206\u8bcd\u5668\u540d\u79f0 2 ES\u9ed8\u8ba4\u7684\u5206\u8bcd\u5668\u662f\u5565 \u9ed8\u8ba4\u662fstandard 3 \u5982\u679cdoc\u91cc\u67d0\u4e2afiled\u4e0d\u9700\u8981\u5206\u8bcd\u600e\u4e48\u505a \u628a\u8be5field\u7684type\u8bbe\u7f6e\u4e3akeyword \u4f7f\u7528Kibana Logstash\u76f8\u5173 \u53c2\u8003\u6587\u6863 ElasticSearch\u6743\u5a01\u6307\u5357 ElasticSearch\u5012\u6392\u7d22\u5f15 2\u4e07\u5b57\u8be6\u89e3\uff0c\u5403\u900f ES \u4e07\u5b57\u957f\u6587\u5e26\u4f60\u5165\u95e8 Elasticsearch es\u81ea\u5e26\u5e38\u89c1\u5206\u8bcd\u4ee5\u53ca\u81ea\u5b9a\u4e49\u5206\u8bcd \u521d\u6b21\u4f7f\u7528 Elasticsearch \u9047\u591a\u79cd\u5206\u8bcd\u96be\u9898\uff1f","title":"\u7b2c\u516d\u7bc7 elk\u6280\u672f\u6808"},{"location":"chapter_7/6_elk/#_1","text":"","title":"\u65e5\u5fd7\u7cfb\u7edf"},{"location":"chapter_7/6_elk/#logcenter","text":"\u65e5\u5fd7\u6536\u96c6\uff1a\u80fd\u591f\u91c7\u96c6\u591a\u79cd\u6765\u6e90\uff08\u5ba2\u6237\u7aef\u3001\u670d\u52a1\u7aef\u3001\u4e91\uff09\u7684\u65e5\u5fd7\u6570\u636e \u4f20\u8f93\u548c\u8fc7\u6ee4\uff1a\u80fd\u591f\u7a33\u5b9a\u7684\u628a\u65e5\u5fd7\u6570\u636e\u89e3\u6790\u8fc7\u6ee4\u5e76\u4f20\u8f93\u5230\u5b58\u50a8\u7cfb\u7edf (\u80fd\u591f\u6d41\u5165 Kafka\u3001ELK\u3001Redis \u7b49\u591a\u79cd\u4e0b\u6e38\u5b58\u50a8) \u5b58\u50a8\uff1a\u5b58\u50a8\u65e5\u5fd7\u6570\u636e \u5206\u6790\uff1a\u652f\u6301 UI \u68c0\u7d22\u548c\u5206\u6790 \u8b66\u544a\uff1a\u80fd\u591f\u63d0\u4f9b\u9519\u8bef\u62a5\u544a\uff0c\u76d1\u63a7\u673a\u5236 \u4f01\u4e1a\u7ea7LogCenter\u7684\u5efa\u8bbe\uff0c\u901a\u5e38\u90fd\u662f ELK\u6280\u672f\u6808 + \u81ea\u7814\u8fd0\u7ef4\u5e73\u53f0 \u7684\u7ed3\u5408, \u56e0\u6b64\u6211\u4eec\u5148\u6765\u8ba4\u8bc6\u4e0bES.","title":"LogCenter\u65e5\u5fd7\u670d\u52a1\u5e73\u53f0\u662f\u9488\u5bf9\u65e5\u5fd7\u7c7b\u6570\u636e\u7684\u4e00\u7ad9\u5f0f\u670d\u52a1. \u5305\u542b\u5982\u4e0b\u529f\u80fd:"},{"location":"chapter_7/6_elk/#lucene","text":"\u901a\u8fc7\u5bf9\u751f\u6d3b\u4e2d\u6570\u636e\u7684\u7c7b\u578b\u4f5c\u4e86\u4e00\u4e2a\u7b80\u77ed\u4e86\u89e3\u4e4b\u540e\uff0c\u6211\u4eec\u77e5\u9053\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684 SQL \u68c0\u7d22\u662f\u5904\u7406\u4e0d\u4e86\u8fd9\u79cd\u975e\u7ed3\u6784\u5316\u6570\u636e\u7684\u3002 \u8fd9\u79cd\u975e\u7ed3\u6784\u5316\u6570\u636e\u7684\u5904\u7406\u9700\u8981\u4f9d\u8d56\u5168\u6587\u641c\u7d22\uff0c\u800c\u76ee\u524d\u5e02\u573a\u4e0a\u5f00\u653e\u6e90\u4ee3\u7801\u7684\u6700\u597d\u5168\u6587\u68c0\u7d22\u5f15\u64ce\u5de5\u5177\u5305\u5c31\u5c5e\u4e8e Apache \u7684 Lucene\u4e86\u3002 \u4f46\u662f Lucene \u53ea\u662f\u4e00\u4e2a\u5de5\u5177\u5305\uff0c\u5b83\u4e0d\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u5168\u6587\u68c0\u7d22\u5f15\u64ce\u3002Lucene \u7684\u76ee\u7684\u662f\u4e3a\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u4e00\u4e2a\u7b80\u5355\u6613\u7528\u7684\u5de5\u5177\u5305\uff0c\u4ee5\u65b9\u4fbf\u7684\u5728\u76ee\u6807\u7cfb\u7edf\u4e2d\u5b9e\u73b0\u5168\u6587\u68c0\u7d22\u7684\u529f\u80fd\uff0c\u6216\u8005\u662f\u4ee5\u6b64\u4e3a\u57fa\u7840\u5efa\u7acb\u8d77\u5b8c\u6574\u7684\u5168\u6587\u68c0\u7d22\u5f15\u64ce\u3002 \u76ee\u524d\u4ee5 Lucene \u4e3a\u57fa\u7840\u5efa\u7acb\u7684\u5f00\u6e90\u53ef\u7528\u5168\u6587\u641c\u7d22\u5f15\u64ce\u4e3b\u8981\u662f Solr \u548c Elasticsearch\u3002 Solr \u548c Elasticsearch \u90fd\u662f\u6bd4\u8f83\u6210\u719f\u7684\u5168\u6587\u641c\u7d22\u5f15\u64ce\uff0c\u80fd\u5b8c\u6210\u7684\u529f\u80fd\u548c\u6027\u80fd\u4e5f\u57fa\u672c\u4e00\u6837\u3002 \u4f46\u662f ES \u672c\u8eab\u5c31\u5177\u6709\u5206\u5e03\u5f0f\u7684\u7279\u6027\u548c\u6613\u5b89\u88c5\u4f7f\u7528\u7684\u7279\u70b9\uff0c\u800c Solr \u7684\u5206\u5e03\u5f0f\u9700\u8981\u501f\u52a9\u7b2c\u4e09\u65b9\u6765\u5b9e\u73b0\uff0c\u4f8b\u5982\u901a\u8fc7\u4f7f\u7528 ZooKeeper \u6765\u8fbe\u5230\u5206\u5e03\u5f0f\u534f\u8c03\u7ba1\u7406\u3002 \u4e0d\u7ba1\u662f Solr \u8fd8\u662f Elasticsearch \u5e95\u5c42\u90fd\u662f\u4f9d\u8d56\u4e8e Lucene\uff0c\u800c Lucene \u80fd\u5b9e\u73b0\u5168\u6587\u641c\u7d22\u4e3b\u8981\u662f\u56e0\u4e3a\u5b83\u5b9e\u73b0\u4e86\u5012\u6392\u7d22\u5f15\u7684\u67e5\u8be2\u7ed3\u6784\u3002 \u5982\u4f55\u7406\u89e3\u5012\u6392\u7d22\u5f15\u5462\uff1f \u5047\u5982\u73b0\u6709\u4e09\u4efd\u6570\u636e\u6587\u6863\uff0c\u6587\u6863\u7684\u5185\u5bb9\u5982\u4e0b\u5206\u522b\u662f\uff1a Java is the best programming language. PHP is the best programming language. Javascript is the best programming language. \u4e3a\u4e86\u521b\u5efa\u5012\u6392\u7d22\u5f15\uff0c\u6211\u4eec\u901a\u8fc7\u5206\u8bcd\u5668\u5c06\u6bcf\u4e2a\u6587\u6863\u7684\u5185\u5bb9\u57df\u62c6\u5206\u6210\u5355\u72ec\u7684\u8bcd\uff08\u6211\u4eec\u79f0\u5b83\u4e3a\u8bcd\u6761\u6216 Term\uff09\uff0c\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u6240\u6709\u4e0d\u91cd\u590d\u8bcd\u6761\u7684\u6392\u5e8f\u5217\u8868\uff0c\u7136\u540e\u5217\u51fa\u6bcf\u4e2a\u8bcd\u6761\u51fa\u73b0\u5728\u54ea\u4e2a\u6587\u6863\u3002 \u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a \u8fd9\u79cd\u7ed3\u6784\u7531\u6587\u6863\u4e2d\u6240\u6709\u4e0d\u91cd\u590d\u8bcd\u7684\u5217\u8868\u6784\u6210\uff0c\u5bf9\u4e8e\u5176\u4e2d\u6bcf\u4e2a\u8bcd\u90fd\u6709\u4e00\u4e2a\u6587\u6863\u5217\u8868\u4e0e\u4e4b\u5173\u8054\u3002 \u8fd9\u79cd\u7531\u5c5e\u6027\u503c\u6765\u786e\u5b9a\u8bb0\u5f55\u7684\u4f4d\u7f6e\u7684\u7ed3\u6784\u5c31\u662f\u5012\u6392\u7d22\u5f15\u3002\u5e26\u6709\u5012\u6392\u7d22\u5f15\u7684\u6587\u4ef6\u6211\u4eec\u79f0\u4e3a\u5012\u6392\u6587\u4ef6\u3002 \u6211\u4eec\u5c06\u4e0a\u9762\u7684\u5185\u5bb9\u8f6c\u6362\u4e3a\u56fe\u7684\u5f62\u5f0f\u6765\u8bf4\u660e\u5012\u6392\u7d22\u5f15\u7684\u7ed3\u6784\u4fe1\u606f\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a","title":"\u524d\u7f6e\u77e5\u8bc6  Lucene"},{"location":"chapter_7/6_elk/#_2","text":"\u8bcd\u6761\uff08Term\uff09\uff1a \u7d22\u5f15\u91cc\u9762\u6700\u5c0f\u7684\u5b58\u50a8\u548c\u67e5\u8be2\u5355\u5143\uff0c\u5bf9\u4e8e\u82f1\u6587\u6765\u8bf4\u662f\u4e00\u4e2a\u5355\u8bcd\uff0c\u5bf9\u4e8e\u4e2d\u6587\u6765\u8bf4\u4e00\u822c\u6307\u5206\u8bcd\u540e\u7684\u4e00\u4e2a\u8bcd\u3002 \u8bcd\u5178\uff08Term Dictionary\uff09\uff1a \u6216\u5b57\u5178\uff0c\u662f\u8bcd\u6761 Term \u7684\u96c6\u5408\u3002\u641c\u7d22\u5f15\u64ce\u7684\u901a\u5e38\u7d22\u5f15\u5355\u4f4d\u662f\u5355\u8bcd\uff0c\u5355\u8bcd\u8bcd\u5178\u662f\u7531\u6587\u6863\u96c6\u5408\u4e2d\u51fa\u73b0\u8fc7\u7684\u6240\u6709\u5355\u8bcd\u6784\u6210\u7684\u5b57\u7b26\u4e32\u96c6\u5408\uff0c\u5355\u8bcd\u8bcd\u5178\u5185\u6bcf\u6761\u7d22\u5f15\u9879\u8bb0\u8f7d\u5355\u8bcd\u672c\u8eab\u7684\u4e00\u4e9b\u4fe1\u606f\u4ee5\u53ca\u6307\u5411\u201c\u5012\u6392\u5217\u8868\u201d\u7684\u6307\u9488\u3002 \u5012\u6392\u8868\uff08Post list\uff09\uff1a \u4e00\u4e2a\u6587\u6863\u901a\u5e38\u7531\u591a\u4e2a\u8bcd\u7ec4\u6210\uff0c\u5012\u6392\u8868\u8bb0\u5f55\u7684\u662f\u67d0\u4e2a\u8bcd\u5728\u54ea\u4e9b\u6587\u6863\u91cc\u51fa\u73b0\u8fc7\u4ee5\u53ca\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\u6bcf\u6761\u8bb0\u5f55\u79f0\u4e3a\u4e00\u4e2a\u5012\u6392\u9879\uff08Posting\uff09\u3002\u5012\u6392\u8868\u8bb0\u5f55\u7684\u4e0d\u5355\u662f\u6587\u6863\u7f16\u53f7\uff0c\u8fd8\u5b58\u50a8\u4e86\u8bcd\u9891\u7b49\u4fe1\u606f\u3002 \u5012\u6392\u6587\u4ef6\uff08Inverted File\uff09\uff1a \u6240\u6709\u5355\u8bcd\u7684\u5012\u6392\u5217\u8868\u5f80\u5f80\u987a\u5e8f\u5730\u5b58\u50a8\u5728\u78c1\u76d8\u7684\u67d0\u4e2a\u6587\u4ef6\u91cc\uff0c\u8fd9\u4e2a\u6587\u4ef6\u88ab\u79f0\u4e4b\u4e3a\u5012\u6392\u6587\u4ef6\uff0c\u5012\u6392\u6587\u4ef6\u662f\u5b58\u50a8\u5012\u6392\u7d22\u5f15\u7684\u7269\u7406\u6587\u4ef6\u3002 \u4ece\u4e0a\u56fe\u6211\u4eec\u53ef\u4ee5\u4e86\u89e3\u5230\u5012\u6392\u7d22\u5f15\u4e3b\u8981\u7531\u4e24\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a \u8bcd\u5178 \u5012\u6392\u6587\u4ef6 \u8bcd\u5178\u548c\u5012\u6392\u8868\u662f Lucene \u4e2d\u5f88\u91cd\u8981\u7684\u4e24\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u662f\u5b9e\u73b0\u5feb\u901f\u68c0\u7d22\u7684\u91cd\u8981\u57fa\u77f3\u3002 \u8bcd\u5178\u548c\u5012\u6392\u6587\u4ef6\u662f\u5206\u4e24\u90e8\u5206\u5b58\u50a8\u7684\uff0c\u8bcd\u5178\u5728\u5185\u5b58\u4e2d\u800c\u5012\u6392\u6587\u4ef6\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a \u3002","title":"\u5176\u4e2d\u4e3b\u8981\u6709\u5982\u4e0b\u51e0\u4e2a\u6838\u5fc3\u672f\u8bed\u9700\u8981\u7406\u89e3\uff1a"},{"location":"chapter_7/6_elk/#elasticsearch","text":"\u6bcf\u4e2a Index \u7531\u4e00\u4e2a\u6216\u8005\u591a\u4e2a shard \u7ec4\u6210\uff0c\u5206\u5e03\u5728\u4e0d\u540c\u7684 node \uff0cdocument \u7531 Field \u7ec4\u6210\uff0c\u5b58\u50a8\u5728\u8fd9\u4e9b shard \u4e2d\u3002","title":"ElasticSearch\u7684\u57fa\u7840\u6982\u5ff5"},{"location":"chapter_7/6_elk/#es-vs","text":"\u548c\u4f20\u7edf\u7684\u5173\u7cfb\u578b\u6570\u636e\u5e93\u6709\u8fd9\u4e48\u4e00\u79cd\u5173\u7cfb \u63a5\u4e0b\u6765\u8bb2\u89e3\u4e0bElasticSearch\u4e2d7\u4e2a\u57fa\u672c\u6982\u5ff5","title":"ES vs \u5173\u7cfb\u578b\u6570\u636e\u5e93"},{"location":"chapter_7/6_elk/#1-index","text":"\u67093\u5c42\u542b\u4e49 \u540d\u8bcd Index (Indices\uff0cIndexes) \u662f\u6587\u6863\u7684\u96c6\u5408\uff0c\u7c7b\u4f3c\u4f20\u7edf\u7684\u5173\u7cfb\u578b\u6570\u636e\u5e93\u3002 \u662f\u5206\u7247\u7684\u96c6\u5408\uff0c\u6bcf\u4e2a\u5206\u7247\u76f8\u5f53\u4e8e Lucene \u4e2d\u7684\u7d22\u5f15\u3002 \u52a8\u8bcd \u7d22\u5f15\u4e00\u4e2a\u6587\u6863\uff0c\u5c31\u662f\u5b58\u50a8\u4e00\u4e2a\u6587\u6863\u5230\u4e00\u4e2a\u7d22\u5f15\u4e2d\u4ee5\u4fbf\u88ab\u68c0\u7d22 \u4e00\u79cd\u6570\u636e\u7ed3\u6784 \u8fd9\u91cc\u6307\uff1a\u5012\u6392\u7d22\u5f15 \uff0c\u5c31\u662f\u901a\u8fc7 value \u2014\u2014> Key \uff0c\u5982\u4e0b\ud83d\udc47 \u901a\u8fc7\u8bb0\u5f55\u8fd9\u4e2a\u8bcd\u548c\u5b83\u6240\u5728\u7684\u6587\u6863ID\uff0c\u5bf9\u5e94 Lucene \u4e2d\u7684 segments (\u5206\u6bb5)","title":"1 \u7d22\u5f15Index"},{"location":"chapter_7/6_elk/#2-type","text":"ES 8.x \u7248\u672c\u5f00\u59cb, \u6587\u6863\u7684Type\u90fd\u662f _doc , \u4e0d\u662f\u652f\u6301\u4fee\u6539","title":"2 \u7c7b\u578b Type"},{"location":"chapter_7/6_elk/#3-document","text":"ElasticSearch \u662f\u9762\u5411\u6587\u6863\u7684\uff0c\u6587\u6863\u662f\u6570\u636e\u5b58\u50a8\u548c\u7d22\u5f15\u7684\u6700\u5c0f\u5355\u4f4d\uff0c\u662f\u5b57\u6bb5\u7684\u96c6\u5408 \uff0c\u5728 ElasticSearch \u4e2d\u4ee5\u5e8f\u5217\u5316 JSON \u7ed3\u6784\u5b58\u50a8\uff0c\u6587\u6863\u7ed3\u6784\u5982\u4e0b\ud83d\udc47\uff0c\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u662f\u5b98\u65b9\u63d0\u4f9b\u7684\u5b57\u6bb5\uff0c\u79f0\u4e3a \u5143\u6570\u636e { \"_index\" : \"java4ye\", \"_type\" : \"_doc\", \"_id\" : \"1001\", \"_score\" : 1.0, \"_source\" : { \"user\" : { \"id\" : \"123456789\", \"name\" : \"4ye\", \"age\" : 2, \"desc\" : \"nice to meet you 2!\" } } } \u8fd9\u4e2a\u6587\u6863\u4e3b\u8981\u770b _source \u5b57\u6bb5\uff0c\u91cc\u9762\u5c31\u662f\u6211\u4eec\u4e0a\u4f20\u7684\u6587\u6863\u6570\u636e","title":"3 \u6587\u6863 Document"},{"location":"chapter_7/6_elk/#4-field","text":"\u662f\u6587\u6863\u4e2d\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u4ee5\u952e\u503c\u5bf9\u7684\u5f62\u5f0f\u5b58\u5728\uff0c\u5982 \u4e0a\u9762\u7684 \"_id\" : \"1001\" \u53ef\u4ee5\u5728\u5b98\u7f51\u4e2d\u67e5\u770b\uff0c\u6709\u8fd9\u4e48\u4e00\u4e9b\u5143\u5b57\u6bb5\ud83d\udc16","title":"4 \u5b57\u6bb5 Field"},{"location":"chapter_7/6_elk/#5-mapping","text":"3\u4e2a\u89e3\u91ca: \u7528\u4e8e\u8868\u793a\u8fd9\u4e2a\u5b57\u6bb5\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5982 \u5b57\u7b26\u4e32\uff0c\u6574\u6570\uff0c\u6d6e\u70b9\u6570\uff0c\u65e5\u671f\u7b49\uff0c\u4e0d\u6307\u5b9a\u65f6\u4f1a\u81ea\u52a8\u521b\u5efa \u7528\u6765\u5b9a\u4e49\u4e00\u4e2a\u6587\u6863\u4ee5\u53ca\u5176\u6240\u5305\u542b\u7684\u5b57\u6bb5\u5982\u4f55\u88ab\u5b58\u50a8\u548c\u7d22\u5f15\uff0c\u4f8b\u5982\u5728mapping\u4e2d\u5b9a\u4e49\u5b57\u6bb5\u7684\u540d\u79f0\u548c\u7c7b\u578b\uff0c\u4ee5\u53ca\u6240\u4f7f\u7528\u7684\u5206\u8bcd\u5668\u3002 Mapping\u5c31\u662f\u5bf9\u7d22\u5f15\u5e93\u4e2d\u7d22\u5f15\u7684\u5b57\u6bb5\u540d\u79f0\u53ca\u5176\u6570\u636e\u7c7b\u578b\u8fdb\u884c\u5b9a\u4e49\uff0c\u7c7b\u4f3c\u4e8emysql\u4e2d\u7684\u8868\u7ed3\u6784\u4fe1\u606f\u3002\u4e0d\u8fc7es\u7684mapping\u6bd4\u6570\u636e\u5e93\u7075\u6d3b\u5f88\u591a\uff0c\u5b83\u53ef\u4ee5\u52a8\u6001\u8bc6\u522b\u5b57\u6bb5\u3002\u4e00\u822c\u4e0d\u9700\u8981\u6307\u5b9amapping, \u56e0\u4e3aes\u4f1a\u81ea\u52a8\u6839\u636e\u6570\u636e\u683c\u5f0f\u8bc6\u522b\u5b83\u7684\u7c7b\u578b\uff0c\u5982\u679c\u4f60\u9700\u8981\u5bf9\u67d0\u4e9b\u5b57\u6bb5\u6dfb\u52a0\u7279\u6b8a\u5c5e\u6027\uff08\u5982\uff1a\u5b9a\u4e49\u4f7f\u7528\u5176\u5b83\u5206\u8bcd\u5668\u3001\u662f\u5426\u5206\u8bcd\u3001\u662f\u5426\u5b58\u50a8\u7b49\uff09\uff0c\u5c31\u5fc5\u987b\u624b\u52a8\u6dfb\u52a0mapping\u3002","title":"5 \u6620\u5c04 Mapping"},{"location":"chapter_7/6_elk/#6-node","text":"ElasticSearch \u662f\u4ee5\u96c6\u7fa4\u7684\u65b9\u5f0f\u8fd0\u884c\u7684\uff0c\u6bcf\u4e2a ElasticSearch \u5b9e\u4f8b\u5c31\u662f\u4e00\u4e2a\u8282\u70b9\u3002\uff08\u6bcf\u4e2aES\u8fdb\u7a0b\u5c31\u662f\u4e00\u4e2a\u8282\u70b9) \u800c\u8282\u70b9\u6709\u5f88\u591a\u79cd\u89d2\u8272 \ud83d\udc47\uff0c\u597d\u590d\u6742\ud83d\ude43 \u5f53\u4f60\u6ca1\u6709\u914d\u7f6e\u8fd9\u4e2a node.roles \uff0c\u8fd9\u4e2a\u8282\u70b9\u9ed8\u8ba4\u6709\u4e0b\u9762\u8fd9\u4e9b\u89d2\u8272","title":"6 \u8282\u70b9 node"},{"location":"chapter_7/6_elk/#61-masternode","text":"\u8d1f\u8d23\u96c6\u7fa4\u8282\u70b9\u72b6\u6001\u7684\u7ef4\u62a4\uff0c\u7d22\u5f15\u7684\u521b\u5efa\uff0c\u5220\u9664\uff0c\u6570\u636e\u7684 rebalance\uff0c\u5206\u7247\u7684\u5206\u914d\u7b49\u5de5\u4f5c\uff0c\u4e0d\u8d1f\u8d23\u5177\u4f53\u6570\u636e\u7684\u7d22\u5f15\u548c\u68c0\u7d22","title":"6.1 \u4e3b\u8282\u70b9 MasterNode"},{"location":"chapter_7/6_elk/#62-datanode","text":"\u8d1f\u8d23\u96c6\u7fa4\u4e2d\u6570\u636e\u7684\u5199\u5165\u548c\u68c0\u7d22\uff0c\u5c5e\u4e8e IO\uff0c\u5185\u5b58 \u548c CPU \u5bc6\u96c6\u578b\u64cd\u4f5c\uff0c\u9700\u8981\u7684\u8ba1\u7b97\u8d44\u6e90\u5927","title":"6.2 \u6570\u636e\u8282\u70b9 DataNode"},{"location":"chapter_7/6_elk/#63-ingestnode","text":"\u6570\u636e\u9884\u5904\u7406\u901a\u9053\uff0c\u5728\u6570\u636e\u88ab\u7d22\u5f15\u524d\u9884\u5148\u5904\u7406\u6587\u6863\u3002","title":"6.3 \u63d0\u53d6\u8282\u70b9 IngestNode"},{"location":"chapter_7/6_elk/#64-coordinatingnode","text":"\u63a5\u53d7\u5ba2\u6237\u7aef\u8bf7\u6c42\uff0c\u7136\u540e\u8f6c\u53d1\u5230\u6570\u636e\u8282\u70b9\uff0c\u6700\u540e\u5c06\u5404\u4e2a\u8282\u70b9\u8fd4\u56de\u6765\u7684\u6570\u636e\u8fdb\u884c\u6574\u5408\u3002\u5bf9\u5e94\u7740\u4e24\u4e2a\u9636\u6bb5 \u5206\u6563\u9636\u6bb5\uff0c\u534f\u8c03\u8282\u70b9\u5c06\u8bf7\u6c42\u8f6c\u53d1\u5230\u4fdd\u5b58\u6570\u636e\u7684\u6570\u636e\u8282\u70b9 \u6536\u96c6\u9636\u6bb5\uff0c\u534f\u8c03\u8282\u70b9\u5c06\u6bcf\u4e2a\u6570\u636e\u8282\u70b9\u7684\u7ed3\u679c\u7f29\u51cf\u4e3a\u5355\u4e2a\u5168\u5c40\u7ed3\u679c\u96c6 \u96c6\u7fa4\u5185\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u534f\u8c03\u8282\u70b9","title":"6.4 \u534f\u8c03\u8282\u70b9 CoordinatingNode"},{"location":"chapter_7/6_elk/#7-shard-replica","text":"Elasticsearch \u7684 \u7d22\u5f15\u662f\u4ee5\u5206\u7247\u7684\u65b9\u5f0f\u6765\u7ec4\u7ec7\u7684. \u5206\u7247\u5206\u4e3a \u4e3b\u5206\u7247 \u548c \u526f\u672c\u5206\u7247\uff0c\u9ed8\u8ba4\u914d\u7f6e\u662f \u6bcf\u4e2a\u7d22\u5f15 5 \u4e2a\u4e3b\u5206\u7247\uff0c\u6bcf\u4e2a\u4e3b\u5206\u7247\u90fd\u6709\u4e00\u4e2a\u526f\u672c\u5206\u7247\uff0c\u4e3b\u5206\u7247\u548c\u5b83\u7684\u526f\u672c\u4e0d\u5728\u4e00\u4e2a\u8282\u70b9\u4e0a\uff0c\u4e3b\u8981\u4f5c\u7528\u662f \u6545\u969c\u8f6c\u79fb\u548c\u8d1f\u8f7d\u5747\u8861 \u6587\u6863\u600e\u4e48\u8def\u7531\u5230\u5bf9\u5e94\u7684\u5206\u7247\u4e0a\u5462\uff1f \u516c\u5f0f\u5982\u4e0b \ud83d\udc47 shard = hash(routing) % number_of_primary_shards routing \u662f\u4e00\u4e2a\u53ef\u53d8\u503c\uff0c\u9ed8\u8ba4\u662f\u6587\u6863\u7684 _id \uff0c\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u6210\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u503c\u3002routing \u901a\u8fc7 hash \u51fd\u6570\u751f\u6210\u4e00\u4e2a\u6570\u5b57\uff0c\u7136\u540e\u8fd9\u4e2a\u6570\u5b57\u518d\u9664\u4ee5 number_of_primary_shards \uff08\u4e3b\u5206\u7247\u7684\u6570\u91cf\uff09\u540e\u5f97\u5230 \u4f59\u6570 \u3002\u8fd9\u4e2a\u5206\u5e03\u5728 0 \u5230 number_of_primary_shards-1 \u4e4b\u95f4\u7684\u4f59\u6570\uff0c\u5c31\u662f\u6211\u4eec\u6240\u5bfb\u6c42\u7684\u6587\u6863\u6240\u5728\u5206\u7247\u7684\u4f4d\u7f6e\u3002 \u8fd9\u5c31\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u5728\u521b\u5efa\u7d22\u5f15\u7684\u65f6\u5019\u5c31\u786e\u5b9a\u597d\u4e3b\u5206\u7247\u7684\u6570\u91cf \u5e76\u4e14\u6c38\u8fdc\u4e0d\u4f1a\u6539\u53d8\u8fd9\u4e2a\u6570\u91cf\uff1a\u56e0\u4e3a\u5982\u679c\u6570\u91cf\u53d8\u5316\u4e86\uff0c\u90a3\u4e48\u6240\u6709\u4e4b\u524d\u8def\u7531\u7684\u503c\u90fd\u4f1a\u65e0\u6548\uff0c\u6587\u6863\u4e5f\u518d\u4e5f\u627e\u4e0d\u5230\u4e86\u3002","title":"7 \u5206\u7247 Shard \u548c \u526f\u672c Replica"},{"location":"chapter_7/6_elk/#8-es","text":"text \u7528\u4e8e\u7d22\u5f15\u5168\u6587\u503c\u7684\u5b57\u6bb5\uff0c\u4f8b\u5982\u7535\u5b50\u90ae\u4ef6\u6b63\u6587\u6216\u4ea7\u54c1\u8bf4\u660e\u3002\u8fd9\u4e9b\u5b57\u6bb5\u662f\u88ab\u5206\u8bcd\u7684\uff0c\u5b83\u4eec\u901a\u8fc7\u5206\u8bcd\u5668\u4f20\u9012 \uff0c\u4ee5\u5728\u88ab\u7d22\u5f15\u4e4b\u524d\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5355\u4e2a\u672f\u8bed\u7684\u5217\u8868\u3002 \u5206\u6790\u8fc7\u7a0b\u5141\u8bb8 Elasticsearch \u641c\u7d22\u5355\u4e2a\u5355\u8bcd\u4e2d\u6bcf\u4e2a\u5b8c\u6574\u7684\u6587\u672c\u5b57\u6bb5\u3002\u6587\u672c\u5b57\u6bb5\u4e0d\u7528\u4e8e\u6392\u5e8f\uff0c\u5f88\u5c11\u7528\u4e8e\u805a\u5408\u3002 Keyword \u7528\u4e8e\u7d22\u5f15\u7ed3\u6784\u5316\u5185\u5bb9\u7684\u5b57\u6bb5\uff0c\u4f8b\u5982\u7535\u5b50\u90ae\u4ef6\u5730\u5740\uff0c\u4e3b\u673a\u540d\uff0c\u72b6\u6001\u4ee3\u7801\uff0c\u90ae\u653f\u7f16\u7801\u6216\u6807\u7b7e\u3002\u5b83\u4eec\u901a\u5e38\u7528\u4e8e\u8fc7\u6ee4\uff0c\u6392\u5e8f\uff0c\u548c\u805a\u5408\u3002Keyword \u5b57\u6bb5\u53ea\u80fd\u6309\u5176\u786e\u5207\u503c\u8fdb\u884c\u641c\u7d22\u3002 \u901a\u8fc7\u5bf9\u5b57\u6bb5\u7c7b\u578b\u7684\u4e86\u89e3\u6211\u4eec\u77e5\u9053\u6709\u4e9b\u5b57\u6bb5\u9700\u8981\u660e\u786e\u5b9a\u4e49\u7684\uff0c\u4f8b\u5982\u67d0\u4e2a\u5b57\u6bb5\u662f Text \u7c7b\u578b\u8fd8\u662f Keyword \u7c7b\u578b\u5dee\u522b\u662f\u5f88\u5927\u7684\uff0c\u65f6\u95f4\u5b57\u6bb5\u4e5f\u8bb8\u6211\u4eec\u9700\u8981\u6307\u5b9a\u5b83\u7684\u65f6\u95f4\u683c\u5f0f\uff0c\u8fd8\u6709\u4e00\u4e9b\u5b57\u6bb5\u6211\u4eec\u9700\u8981\u6307\u5b9a\u7279\u5b9a\u7684\u5206\u8bcd\u5668\u7b49\u7b49\u3002 \u5982\u679c\u91c7\u7528\u52a8\u6001\u6620\u5c04\u662f\u4e0d\u80fd\u7cbe\u786e\u505a\u5230\u8fd9\u4e9b\u7684\uff0c\u81ea\u52a8\u8bc6\u522b\u5e38\u5e38\u4f1a\u4e0e\u6211\u4eec\u671f\u671b\u7684\u6709\u4e9b\u5dee\u5f02\u3002 \u6240\u4ee5\u521b\u5efa\u7d22\u5f15\u7684\u65f6\u5019\u4e00\u4e2a\u5b8c\u6574\u7684\u683c\u5f0f\u5e94\u8be5\u662f\u6307\u5b9a\u5206\u7247\u548c\u526f\u672c\u6570\u4ee5\u53ca Mapping \u7684\u5b9a\u4e49\uff0c\u5982\u4e0b\uff1a PUT my_index { \"settings\" : { \"number_of_shards\" : 5, \"number_of_replicas\" : 1 } \"mappings\": { \"_doc\": { \"properties\": { \"title\": { \"type\": \"text\" }, \"name\": { \"type\": \"text\" }, \"age\": { \"type\": \"integer\" }, \"created\": { \"type\": \"date\", \"format\": \"strict_date_optional_time||epoch_millis\" } } } } }","title":"8 ES\u5b57\u6bb5\u7c7b\u578b"},{"location":"chapter_7/6_elk/#81","text":"Each field has a field data type , or field type . This type indicates the kind of data the field contains, such as strings or boolean values, and its intended use. For example, you can index strings to both text and keyword fields. However, text field values are analyzed for full-text search while keyword strings are left as-is for filtering and sorting. Field types are grouped by family . Types in the same family have exactly the same search behavior but may have different space usage or performance characteristics. \u5b98\u65b9\u6587\u6863","title":"8.1 \u5b98\u65b9\u8bf4\u660e"},{"location":"chapter_7/6_elk/#82-field-type","text":"\u7c7b\u578b \u8bf4\u660e Numbers \u4f8b\u5982 int\u3001long\u3001float\uff0c\u82e5\u9700\u8981\u8303\u56f4\u67e5\u8be2\u6216\u9700\u8981\u505a\u6570\u5b57\u805a\u5408\u5982\u5e73\u5747\u503c\u3001\u767e\u5206\u4f4d\u7b49\uff0c\u5219\u9700\u8981\u8bbe\u7f6e\u4e3a\u6570\u5b57\u7c7b\u578b keyword \u5b57\u7b26\u4e32(\u4e0d\u5206\u8bcd) \uff0c\u5b57\u6bb5\u641c\u7d22\u529f\u80fd\u5f31\u5f88\u591a\uff0c\u65e0\u6cd5\u4f7f\u7528\u8bcd\u7d20\u8fdb\u884c\u641c\u7d22\uff0c\u4f46\u662f\u53ef\u4ee5\u5b8c\u6210\u805a\u5408\u64cd\u4f5c\uff0c\u540c\u65f6\u4e0d\u5206\u8bcd\u5b57\u6bb5\u53d7\u5230\u6700\u5927\u957f\u5ea6 32K \u7684\u9650\u5236 text \u5b57\u7b26\u4e32(\u5206\u8bcd)\uff0c\u53ef\u4ee5\u76f4\u63a5\u641c\u7d22\u8be5\u5b57\u6bb5\u88ab\u5206\u8bcd\u540e\u7684\u8bcd\u7d20(Term)\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u901a\u914d\u7b26\u641c\u7d22\u7b49\u529f\u80fd\uff0c\u4f46\u662f\u65e0\u6cd5\u5229\u7528\u8be5\u5b57\u6bb5\u5b8c\u6210\u805a\u5408\u7b49\u64cd\u4f5c ip \u4f1a\u5bf9\u8be5 ip \u5730\u5740\u8fdb\u884c geoip \u89e3\u6790\uff0c\u83b7\u53d6\u5730\u7406\u4f4d\u7f6e\u4ee5\u53ca\u8fd0\u8425\u5546\u4fe1\u606f json \u4f1a\u5bf9\u8be5\u5b57\u6bb5\u7684\u6587\u672c\u5185\u5bb9\u8fdb\u884c json \u89e3\u6790\uff0c\u4ee5 kv \u5f62\u5f0f\u5448\u73b0\u89e3\u6790\u7ed3\u679c\uff0c\u5b89\u5168\u8d77\u89c1\uff0c\u539f\u59cb\u5b57\u6bb5\u5185\u5bb9\u4e5f\u5c06\u4fdd\u7559 date \u5982\u679c\u9700\u8981\u4f7f\u7528\u65e5\u5fd7\u7684\u65f6\u95f4\u4f5c\u4e3a\u65f6\u95f4\u6233 \uff0c\u60a8\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u5b57\u6bb5\u4e3a date \u7c7b\u578b\uff0c\u4f5c\u4e3a\u65e5\u5fd7\u7684\u65f6\u95f4\u5b57\u6bb5\uff0c\u7136\u540e\u4f60\u9700\u8981\u65f6\u95f4\u89e3\u6790\u89c4\u5219\u3002\u65f6\u95f4\u683c\u5f0f\u53c2\u8003\uff1aplugins-filters-date\uff0c\u65f6\u95f4\u6233\u683c\u5f0f\u6bd4\u8f83\u91cd\u8981\uff0c\u540e\u53f0\u81ea\u52a8\u5339\u914d\u5230\u7684\u4e0d\u4e00\u5b9a\u662f\u6b63\u786e\u7684\uff0c\u9700\u8981\u518d\u6b21\u786e\u8ba4\u3002\uff08\u82e5\u6ca1\u6709\u65f6\u95f4\u5b57\u6bb5\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u7cfb\u7edf\u65f6\u95f4\uff09","title":"8.2 \u5e38\u89c1\u7684field type\u8bf4\u660e"},{"location":"chapter_7/6_elk/#9-timestamp","text":"\u5f53\u65e5\u5fd7\u88ab\u67d0\u4e2a\u4e8b\u4ef6\u89e6\u53d1\uff0c\u65f6\u95f4\u6233\u4f5c\u4e3a\u65e5\u5fd7\u4e8b\u4ef6\u7684\u4e00\u90e8\u5206\u8868\u660e\u4e8b\u4ef6\u662f\u4f55\u65f6\u53d1\u751f\u7684\u3002\u5728 ELK \u4e2d\u65f6\u95f4\u6233\u7684\u4f5c\u7528\u975e\u5e38\u91cd\u8981\uff0c\u6211\u4eec\u4f7f\u7528\u65f6\u95f4\u6233\u6765\u8fc7\u6ee4\u641c\u7d22\u7ed3\u679c\uff0c\u540c\u65f6\u4e5f\u4f7f\u7528\u65f6\u95f4\u6233\u786e\u5b9a\u60a8\u9879\u76ee\u4e0b\u7684\u54ea\u4e9b\u65e5\u5fd7\u8d85\u51fa\u4fdd\u5b58\u671f\u9650\u9700\u8981\u6e05\u9664\u3002 \u83b7\u53d6\u65f6\u95f4\u6233\u53d6\u51b3\u4e8e\u60a8\u53d1\u9001\u7684\u65e5\u5fd7\u6570\u636e\u7c7b\u578b\uff0c\u65f6\u95f4\u6233\u5c06\u6309\u4ee5\u4e0b\u987a\u5e8f\u4f18\u5148\u5904\u7406\uff1a \u5206\u6790\u65e5\u5fd7\u6570\u636e\uff1a\u5982\u679c\u60a8\u7684\u65e5\u5fd7\u5185\u65f6\u95f4\u6233\u80fd\u591f\u88ab\u89e3\u6790\uff0cELK \u5c06\u76f4\u63a5\u4f7f\u7528\u65e5\u5fd7\u4e2d\u7684\u65f6\u95f4\u6233\uff0c\u5b83\u662f\u7531\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u8bb0\u5f55\u4e0b\u6765\u7684\u3002 syslog\uff1a\u5982\u679c\u60a8\u7684\u65e5\u5fd7\u7531syslog\u8f6c\u53d1\uff0c\u90a3\u4e48\u4f1a\u6709\u65f6\u95f4\u6233\u88ab\u5d4c\u5165\u65e5\u5fd7\u5934\u90e8\uff0cELK \u4f1a\u63d0\u53d6\u4f7f\u7528\u3002 doc\u91cc\u82e5\u6ca1\u6709\u65f6\u95f4\u5b57\u6bb5\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528ES\u7cfb\u7edf\u65f6\u95f4.","title":"9 @timestamp\uff08\u65f6\u95f4\u6233\uff09"},{"location":"chapter_7/6_elk/#es","text":"\u65e5\u5fd7\u63a5\u5165ES\u65f6, \u987b\u8bbe\u7f6e\u65e5\u5fd7\u89e3\u6790\u89c4\u5219 \u76ee\u524d\u63d0\u4f9b\u4e86\u4e24\u79cd\u5207\u5272\u65e5\u5fd7\u7684\u65b9\u5f0f \u5212\u8bcd\u63d0\u53d6\uff08\u901f\u5ea6\u5feb\uff0c\u4f46\u8981\u6c42\u65e5\u5fd7\u683c\u5f0f\u7edf\u4e00\uff09 \u6b63\u5219\u89e3\u6790","title":"\u65e5\u5fd7\u63a5\u5165ES\u65f6\u8be6\u7ec6\u8fc7\u7a0b"},{"location":"chapter_7/6_elk/#_3","text":"\u5212\u8bcd\u63d0\u53d6\u662f\u6307\u901a\u8fc7\u7279\u5b9a\u5206\u9694\u7b26\u53f7\u6216\u8005\u7279\u5b9a\u5b57\u7b26\u4e32\uff08\u6bcf\u6761\u65e5\u5fd7\u4e2d\u90fd\u4f1a\u51fa\u73b0\u7684\u76f8\u540c\u5185\u5bb9\uff09\u6765\u63d0\u53d6\u65e5\u5fd7\u4e2d\u5173\u952e\u4fe1\u606f\u7684\u89e3\u6790\u65b9\u6cd5\u3002","title":"\u5212\u8bcd\u63d0\u53d6"},{"location":"chapter_7/6_elk/#_4","text":"\u6b63\u5219\u89e3\u6790\u5219\u662f\u901a\u8fc7GROK\u6b63\u5219\u89e3\u6790, \u6765\u63d0\u53d6\u65e5\u5fd7\u4e2d\u7684\u5173\u952e\u5b57.","title":"\u6b63\u5219\u89e3\u6790"},{"location":"chapter_7/6_elk/#_5","text":"","title":"\u5f7b\u5e95\u641e\u61c2\u5206\u8bcd"},{"location":"chapter_7/6_elk/#_6","text":"\u5206\u8bcd\u662f\u6307\u5c06\u6587\u672c\u8f6c\u6362\u6210\u4e00\u7cfb\u5217\u5355\u8bcd\uff08term or token\uff09\u7684\u8fc7\u7a0b\uff0c\u4e5f\u53ef\u4ee5\u53eb\u505a\u6587\u672c\u5206\u6790\uff0c\u5728es\u91cc\u9762\u79f0\u4e3aAnalysis. (\u8fd9\u91cc\u7684term\u7b49\u4e8etoken, \u4ea7\u751ftoken\u5373\u4ea7\u751fterm\uff09 \u641c\u7d22\u5f15\u64ce\u7684\u6838\u5fc3\u662f\u5012\u6392\u7d22\u5f15\uff0c\u800c\u5012\u6392\u7d22\u5f15\u7684\u57fa\u7840\u5c31\u662f\u5206\u8bcd\u3002\u6240\u8c13\u5206\u8bcd\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\u5c06\u4e00\u4e2a\u5b8c\u6574\u7684\u53e5\u5b50\u5207\u5272\u4e3a\u4e00\u4e2a\u4e2a\u5355\u8bcd\u7684\u8fc7\u7a0b\u3002\u5728 es \u4e2d\u5355\u8bcd\u5bf9\u5e94\u82f1\u6587\u4e3a term\u3002 \u6211\u4eec\u7b80\u5355\u770b\u4e2a\u4f8b\u5b50 ES \u7684\u5012\u6392\u7d22\u5f15\u5373\u662f\u6839\u636e\u5206\u8bcd\u540e\u7684\u5355\u8bcd\u521b\u5efa\uff0c\u5373 \u6211 \u3001 \u7231 \u3001 \u5317\u4eac \u3001 \u5929\u5b89\u95e8 \u8fd94\u4e2a\u5355\u8bcd\u3002\u8fd9\u4e5f\u610f\u5473\u7740\u4f60\u5728\u641c\u7d22\u7684\u65f6\u5019\u4e5f\u53ea\u80fd\u641c\u7d22\u8fd94\u4e2a\u5355\u8bcd\u624d\u80fd\u547d\u4e2d\u8be5\u6587\u6863.","title":"\u4ec0\u4e48\u662f\u5206\u8bcd?"},{"location":"chapter_7/6_elk/#_7","text":"\u5982\u4e0b\u56fe\u6240\u793a \u5728\u65e5\u5fd7\u5207\u5272\u9636\u6bb5, \u5982\u679c\u4f60\u6307\u5b9a\u4e86\u67d0\u4e2a\u5b57\u7b26\u4e32\u4e3a keyword \u7c7b\u578b, \u90a3\u8fd9\u4e2a\u5b57\u6bb5\u5c31\u662fTerm, \u5c06\u6765\u53ef\u7528\u4e8e\u641c\u7d22. \u9636\u6bb5 \u9636\u6bb5\u82f1\u6587\u540d \u4f5c\u7528 \u4e3e\u4f8b \u524d Character Filter \u5bf9\u539f\u59cb\u6587\u672c\u8fdb\u884c\u5904\u7406 \u4f8b\uff1a\u53bb\u9664html\u6807\u7b7e\u3001\u7279\u6b8a\u5b57\u7b26\u7b49 \u4e2d Tokenizer \u5c06\u539f\u59cb\u6587\u672c\u8fdb\u884c\u5206\u8bcd \u4f8b\uff1a\u4e0a\u8bfe\u5b66\u4e60\u2013>\u4e0a\u8bfe,\u5b66\u4e60 \u540e Token Filters \u5206\u8bcd\u540e\u7684\u5173\u952e\u5b57\u8fdb\u884c\u52a0\u5de5 \u4f8b\uff1a\u8f6c\u5c0f\u5199\u3001\u5220\u9664\u8bed\u6c14\u8bcd\u3001\u8fd1\u4e49\u8bcd\u548c\u540c\u4e49\u8bcd\u7b49","title":"\u6574\u4e2a\u8fc7\u7a0b"},{"location":"chapter_7/6_elk/#1-es-character-filter","text":"\u5728\u8fdb\u884cTokenizer\u4e4b\u524d\u5bf9\u539f\u59cb\u6587\u672c\u8fdb\u884c\u5904\u7406\uff0c\u5982\u589e\u52a0\u3001\u5220\u9664\u6216\u66ff\u6362\u5b57\u7b26\u7b49 \u540d\u79f0 \u4f5c\u7528 HTML Strip \u53bb\u9664html\u6807\u7b7e\u548c\u8f6c\u6362html\u5b9e\u4f53 Mapping \u5b57\u7b26\u4e32\u66ff\u6362\u64cd\u4f5c Pattern Replace \u6b63\u5219\u5339\u914d\u66ff\u6362","title":"1 ES\u6709\u54ea\u4e9b Character Filter"},{"location":"chapter_7/6_elk/#2-es-tokenizer","text":"\u901a\u5e38\u662f\u5bf9\u54ea\u4e9b\u7c7b\u578b\u4e3a text \u7684 filed \u8fdb\u884c\u5206\u8bcd \u5206\u8bcd\u5668\uff08Analyzer\uff09 \u7279\u70b9 Standard\uff08es\u9ed8\u8ba4\uff09 \u652f\u6301\u591a\u8bed\u8a00\uff0c\u6309\u8bcd\u5207\u5206\u5e76\u505a\u5c0f\u5199\u5904\u7406 Simple \u6309\u7167\u975e\u5b57\u6bcd\u5207\u5206\uff0c\u5c0f\u5199\u5904\u7406 Whitespace \u6309\u7167\u7a7a\u683c\u6765\u5207\u5206 Stop \u53bb\u9664\u8bed\u6c14\u52a9\u8bcd\uff0c\u5982the\u3001an\u3001\u7684\u3001\u8fd9\u7b49 Keyword \u4e0d\u5206\u8bcd Pattern \u6b63\u5219\u5206\u8bcd\uff0c\u9ed8\u8ba4\\w+,\u5373\u975e\u5b57\u8bcd\u7b26\u53f7\u505a\u5206\u5272\u7b26 Language \u5e38\u89c1\u8bed\u8a00\u7684\u5206\u8bcd\u5668\uff0830+\uff09","title":"2 ES\u6709\u54ea\u4e9b Tokenizer"},{"location":"chapter_7/6_elk/#3-estoken-filter","text":"\u5bf9\u8f93\u51fa\u7684\u5355\u8bcd\uff08term\uff09\u8fdb\u884c\u589e\u52a0\u3001\u5220\u9664\u3001\u4fee\u6539\u7b49\u64cd\u4f5c \u540d\u79f0 \u4f5c\u7528 Lowercase \u5c06\u6240\u6709term\u8f6c\u6362\u4e3a\u5c0f\u5199 stop \u5220\u9664stop words NGram \u548cEdge NGram\u8fde\u8bcd\u5206\u5272 Synonym \u6dfb\u52a0\u8fd1\u4e49\u8bcd\u7684term","title":"3 ES\u6709\u54ea\u4e9bToken Filter"},{"location":"chapter_7/6_elk/#4-apicharacter-filter-tokenizer-token-filter","text":"POST _analyze { \"char_filter\": [\"html_strip\"], ---> \u6307\u5b9aCharacter Filter \"tokenizer\": \"standard\", ---> \u6307\u5b9aTokenizer \"filter\": [\"lowercase\"], ---> \u6307\u5b9aToken Filter \"text\":\"Hello WORLD\" }","title":"4 \u539f\u59cb\u7684API\u91cc\u5982\u4f55\u5206\u522b\u6307\u5b9aCharacter Filter Tokenizer Token Filter"},{"location":"chapter_7/6_elk/#_8","text":"","title":"\u5176\u4ed6\u95ee\u9898"},{"location":"chapter_7/6_elk/#1","text":"\u5199\u65f6\u5206\u8bcd\u5668\u9700\u8981\u5728 mapping \u4e2d\u6307\u5b9a\uff0c\u800c\u4e14\u4e00\u7ecf\u6307\u5b9a\u5c31\u4e0d\u80fd\u518d\u4fee\u6539\uff0c\u82e5\u8981\u4fee\u6539\u5fc5\u987b\u65b0\u5efa\u7d22\u5f15\u3002\u5982\u4e0b\u6240\u793a\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u540d\u4e3ams_english \u7684\u5b57\u6bb5\uff0c\u6307\u5b9a\u5176\u5206\u8bcd\u5668\u4e3a english\uff1a PUT test/_mapping/doc { \"properties\": { \"msg_english\":{ \"type\":\"text\", \"analyzer\": \"english\" } } } \u5176\u4e2dtest\u4e3a\u7d22\u5f15\u540d\u79f0 \u4f7f\u7528\"analyzer\"\u6307\u5b9a\u5206\u8bcd\u5668\u540d\u79f0","title":"1 \u5982\u4f55\u6307\u5b9a\u4f7f\u7528\u4ec0\u4e48\u5206\u8bcd\u5668"},{"location":"chapter_7/6_elk/#2-es","text":"\u9ed8\u8ba4\u662fstandard","title":"2 ES\u9ed8\u8ba4\u7684\u5206\u8bcd\u5668\u662f\u5565"},{"location":"chapter_7/6_elk/#3-docfiled","text":"\u628a\u8be5field\u7684type\u8bbe\u7f6e\u4e3akeyword","title":"3 \u5982\u679cdoc\u91cc\u67d0\u4e2afiled\u4e0d\u9700\u8981\u5206\u8bcd\u600e\u4e48\u505a"},{"location":"chapter_7/6_elk/#kibana","text":"","title":"\u4f7f\u7528Kibana"},{"location":"chapter_7/6_elk/#logstash","text":"","title":"Logstash\u76f8\u5173"},{"location":"chapter_7/6_elk/#_9","text":"ElasticSearch\u6743\u5a01\u6307\u5357 ElasticSearch\u5012\u6392\u7d22\u5f15 2\u4e07\u5b57\u8be6\u89e3\uff0c\u5403\u900f ES \u4e07\u5b57\u957f\u6587\u5e26\u4f60\u5165\u95e8 Elasticsearch es\u81ea\u5e26\u5e38\u89c1\u5206\u8bcd\u4ee5\u53ca\u81ea\u5b9a\u4e49\u5206\u8bcd \u521d\u6b21\u4f7f\u7528 Elasticsearch \u9047\u591a\u79cd\u5206\u8bcd\u96be\u9898\uff1f","title":"\u53c2\u8003\u6587\u6863"},{"location":"chapter_7/7_charset/","text":"\u6982\u8ff0 \u672c\u7bc7\u7528\u4e8e\u68b3\u7406\u5b57\u7b26\u96c6\u548c\u7f16\u7801\u77e5\u8bc6 1.\u57fa\u7840\u77e5\u8bc6 \u8ba1\u7b97\u673a\u4e2d\u50a8\u5b58\u7684\u4fe1\u606f\u90fd\u662f\u7528\u4e8c\u8fdb\u5236\u6570\u8868\u793a\u7684\uff1b\u800c\u6211\u4eec\u5728\u5c4f\u5e55\u4e0a\u770b\u5230\u7684\u82f1\u6587\u3001\u6c49\u5b57\u7b49\u5b57\u7b26\u662f\u4e8c\u8fdb\u5236\u6570\u8f6c\u6362\u4e4b\u540e\u7684\u7ed3\u679c\u3002\u901a\u4fd7\u7684\u8bf4\uff0c\u6309\u7167\u4f55\u79cd\u89c4\u5219\u5c06\u5b57\u7b26\u5b58\u50a8\u5728\u8ba1\u7b97\u673a\u4e2d\uff0c\u5982'a'\u7528\u4ec0\u4e48\u8868\u793a\uff0c\u79f0\u4e3a\"\u7f16\u7801\"\uff1b\u53cd\u4e4b\uff0c\u5c06\u5b58\u50a8\u5728\u8ba1\u7b97\u673a\u4e2d\u7684\u4e8c\u8fdb\u5236\u6570\u89e3\u6790\u663e\u793a\u51fa\u6765\uff0c\u79f0\u4e3a\"\u89e3\u7801\"\uff0c\u5982\u540c\u5bc6\u7801\u5b66\u4e2d\u7684\u52a0\u5bc6\u548c\u89e3\u5bc6\u3002\u5728\u89e3\u7801\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u4f7f\u7528\u4e86\u9519\u8bef\u7684\u89e3\u7801\u89c4\u5219\uff0c\u5219\u5bfc\u81f4'a'\u89e3\u6790\u6210'b'\u6216\u8005\u4e71\u7801\u3002 \u5b57\u7b26\u96c6\uff08Charset\uff09\uff1a \u662f\u4e00\u4e2a\u7cfb\u7edf\u652f\u6301\u7684\u6240\u6709\u62bd\u8c61\u5b57\u7b26\u7684\u96c6\u5408\u3002\u5b57\u7b26\u662f\u5404\u79cd\u6587\u5b57\u548c\u7b26\u53f7\u7684\u603b\u79f0\uff0c\u5305\u62ec\u5404\u56fd\u5bb6\u6587\u5b57\u3001\u6807\u70b9\u7b26\u53f7\u3001\u56fe\u5f62\u7b26\u53f7\u3001\u6570\u5b57\u7b49\u3002 \u5b57\u7b26\u7f16\u7801\uff08Character Encoding\uff09\uff1a \u662f\u4e00\u5957\u6cd5\u5219\uff0c\u4f7f\u7528\u8be5\u6cd5\u5219\u80fd\u591f\u5bf9\u81ea\u7136\u8bed\u8a00\u7684\u5b57\u7b26\u7684\u4e00\u4e2a\u96c6\u5408\uff08\u5982\u5b57\u6bcd\u8868\u6216\u97f3\u8282\u8868\uff09\uff0c\u4e0e\u5176\u4ed6\u4e1c\u897f\u7684\u4e00\u4e2a\u96c6\u5408\uff08\u5982\u53f7\u7801\u6216\u7535\u8109\u51b2\uff09\u8fdb\u884c\u914d\u5bf9\u3002\u5373\u5728\u7b26\u53f7\u96c6\u5408\u4e0e\u6570\u5b57\u7cfb\u7edf\u4e4b\u95f4\u5efa\u7acb\u5bf9\u5e94\u5173\u7cfb\uff0c\u5b83\u662f\u4fe1\u606f\u5904\u7406\u7684\u4e00\u9879\u57fa\u672c\u6280\u672f\u3002\u901a\u5e38\u4eba\u4eec\u7528\u7b26\u53f7\u96c6\u5408\uff08\u4e00\u822c\u60c5\u51b5\u4e0b\u5c31\u662f\u6587\u5b57\uff09\u6765\u8868\u8fbe\u4fe1\u606f\u3002\u800c\u4ee5\u8ba1\u7b97\u673a\u4e3a\u57fa\u7840\u7684\u4fe1\u606f\u5904\u7406\u7cfb\u7edf\u5219\u662f\u5229\u7528\u5143\u4ef6\uff08\u786c\u4ef6\uff09\u4e0d\u540c\u72b6\u6001\u7684\u7ec4\u5408\u6765\u5b58\u50a8\u548c\u5904\u7406\u4fe1\u606f\u7684\u3002\u5143\u4ef6\u4e0d\u540c\u72b6\u6001\u7684\u7ec4\u5408\u80fd\u4ee3\u8868\u6570\u5b57\u7cfb\u7edf\u7684\u6570\u5b57\uff0c\u56e0\u6b64 \u5b57\u7b26\u7f16\u7801\u5c31\u662f\u5c06\u7b26\u53f7\u8f6c\u6362\u4e3a\u8ba1\u7b97\u673a\u53ef\u4ee5\u63a5\u53d7\u7684\u6570\u5b57\u7cfb\u7edf\u7684\u6570 \uff0c\u79f0\u4e3a\u6570\u5b57\u4ee3\u7801\u3002 2. \u5e38\u7528\u5b57\u7b26\u96c6\u548c\u5b57\u7b26\u7f16\u7801 \u5e38\u89c1\u5b57\u7b26\u96c6\u540d\u79f0\uff1a \u6bd4\u5982: ASCII\u5b57\u7b26\u96c6\u3001GB2312\u5b57\u7b26\u96c6\u3001BIG5\u5b57\u7b26\u96c6\u3001GB18030\u5b57\u7b26\u96c6\u3001Unicode\u5b57\u7b26\u96c6\u7b49\u3002 \u8ba1\u7b97\u673a\u8981\u51c6\u786e\u7684\u5904\u7406\u5404\u79cd\u5b57\u7b26\u96c6\u6587\u5b57\uff0c\u9700\u8981\u8fdb\u884c\u5b57\u7b26\u7f16\u7801\uff0c\u4ee5\u4fbf\u8ba1\u7b97\u673a\u80fd\u591f\u8bc6\u522b\u548c\u5b58\u50a8\u5404\u79cd\u6587\u5b57\u3002 \u5b57\u7b26\u96c6 \u548c \u5b57\u7b26\u7f16\u7801 \u4e00\u822c\u90fd\u662f\u6210\u5bf9\u51fa\u73b0\u7684\uff0c\u5982ASCII\u3001IOS-8859-1\u3001GB2312\u3001GBK\uff0c\u90fd\u662f\u5373\u8868\u793a\u4e86\u5b57\u7b26\u96c6\u53c8\u8868\u793a\u4e86\u5bf9\u5e94\u7684\u5b57\u7b26\u7f16\u7801\uff0c\u4ee5\u540e\u7edf\u79f0\u4e3a\u7f16\u7801\u3002Unicode\u6bd4\u8f83\u7279\u6b8a\uff0c\u540e\u9762\u7ec6\u8bf4\u3002 \u4e2d\u6587\u7f16\u7801\u65b9\u5f0f\u7684\u96c6\u5408\u8303\u56f4 \u56e0\u6b64\uff0c\u5c31\u6211\u4eec\u5173\u5fc3\u7684\u6c49\u5b57\u800c\u8a00\uff0c\u4e09\u79cd\u7f16\u7801\u65b9\u5f0f\u7684\u8868\u793a\u8303\u56f4\u662f\uff1a GB18030 > GBK > GB2312 \u5373GBK\u662fGB2312\u7684\u8d85\u96c6\uff0cGB1803\u53c8\u662fGBK\u7684\u8d85\u96c6\u3002\u540e\u9762\u4e5f\u4f1a\u770b\u5230\uff0c\u4e00\u4e2a\u6c49\u5b57\u53ef\u4ee5\u7528GBK\u8868\u793a\uff0c\u4f46\u4e0d\u4e00\u5b9a\u80fd\u88abGB2312\u6240\u8868\u793a 3. \u5355\u72ec\u8bf4Unicode \u5f53\u8ba1\u7b97\u673a\u4f20\u5230\u4e16\u754c\u5404\u4e2a\u56fd\u5bb6\u65f6\uff0c\u4e3a\u4e86\u9002\u5408\u5f53\u5730\u8bed\u8a00\u548c\u5b57\u7b26\uff0c\u8bbe\u8ba1\u548c\u5b9e\u73b0\u7c7b\u4f3cGB232/GBK/GB18030/BIG5\u7684\u7f16\u7801\u65b9\u6848\u3002\u8fd9\u6837\u5404\u641e\u4e00\u5957\uff0c\u5728\u672c\u5730\u4f7f\u7528\u6ca1\u6709\u95ee\u9898\uff0c\u4e00\u65e6\u51fa\u73b0\u5728\u7f51\u7edc\u4e2d\uff0c\u7531\u4e8e\u4e0d\u517c\u5bb9\uff0c\u4e92\u76f8\u8bbf\u95ee\u5c31\u51fa\u73b0\u4e86\u4e71\u7801\u73b0\u8c61\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e00\u4e2a\u4f1f\u5927\u7684\u521b\u60f3\u4ea7\u751f\u4e86\u2014\u2014 Unicode \u3002 Unicode\u7f16\u7801\u7cfb\u7edf \u4e3a\u8868\u8fbe\u4efb\u610f\u8bed\u8a00\u7684\u4efb\u610f\u5b57\u7b26\u800c\u8bbe\u8ba1\u3002\u5b83\u4f7f\u7528 4\u5b57\u8282 \u7684\u6570\u5b57\u6765\u8868\u8fbe\u6bcf\u4e2a\u5b57\u6bcd\u3001\u7b26\u53f7\uff0c\u6216\u8005\u8868\u610f\u6587\u5b57(ideograph)\u3002\u6bcf\u4e2a\u6570\u5b57\u4ee3\u8868\u552f\u4e00\u7684\u81f3\u5c11\u5728\u67d0\u79cd\u8bed\u8a00\u4e2d\u4f7f\u7528\u7684\u7b26\u53f7\u3002\uff08\u5e76\u4e0d\u662f\u6240\u6709\u7684\u6570\u5b57\u90fd\u7528\u4e0a\u4e86\uff0c\u4f46\u662f\u603b\u6570\u5df2\u7ecf\u8d85\u8fc7\u4e8665535\uff0c\u6240\u4ee52\u4e2a\u5b57\u8282\u7684\u6570\u5b57\u662f\u4e0d\u591f\u7528\u7684\u3002\uff09\u88ab\u51e0\u79cd\u8bed\u8a00\u5171\u7528\u7684\u5b57\u7b26\u901a\u5e38\u4f7f\u7528\u76f8\u540c\u7684\u6570\u5b57\u6765\u7f16\u7801\uff0c\u9664\u975e\u5b58\u5728\u4e00\u4e2a\u5728\u7406\u7684\u8bed\u6e90\u5b66(etymological)\u7406\u7531\u4f7f\u4e0d\u8fd9\u6837\u505a\u3002\u4e0d\u8003\u8651\u8fd9\u79cd\u60c5\u51b5\u7684\u8bdd\uff0c\u6bcf\u4e2a\u5b57\u7b26\u5bf9\u5e94\u4e00\u4e2a\u6570\u5b57\uff0c\u6bcf\u4e2a\u6570\u5b57\u5bf9\u5e94\u4e00\u4e2a\u5b57\u7b26\u3002\u5373\u4e0d\u5b58\u5728\u4e8c\u4e49\u6027\u3002\u4e0d\u518d\u9700\u8981\u8bb0\u5f55\"\u6a21\u5f0f\"\u4e86\u3002U+0041\u603b\u662f\u4ee3\u8868'A'\uff0c\u5373\u4f7f\u8fd9\u79cd\u8bed\u8a00\u6ca1\u6709'A'\u8fd9\u4e2a\u5b57\u7b26\u3002 \u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\u4e2d\uff0c Unicode\uff08\u7edf\u4e00\u7801\u3001\u4e07\u56fd\u7801\u3001\u5355\u4e00\u7801\u3001\u6807\u51c6\u4e07\u56fd\u7801\uff09\u662f\u4e1a\u754c\u7684\u4e00\u79cd\u6807\u51c6 \uff0c\u5b83\u53ef\u4ee5\u4f7f\u7535\u8111\u5f97\u4ee5\u4f53\u73b0\u4e16\u754c\u4e0a\u6570\u5341\u79cd\u6587\u5b57\u7684\u7cfb\u7edf\u3002Unicode \u662f\u57fa\u4e8e\u901a\u7528\u5b57\u7b26\u96c6\uff08Universal Character Set\uff09\u7684\u6807\u51c6\u6765\u53d1\u5c55\uff0c\u5e76\u4e14\u540c\u65f6\u4e5f\u4ee5\u4e66\u672c\u7684\u5f62\u5f0f\u5bf9\u5916\u53d1\u8868\u3002 Unicode \u8fd8\u4e0d\u65ad\u5728\u6269\u589e\uff0c \u6bcf\u4e2a\u65b0\u7248\u672c\u63d2\u5165\u66f4\u591a\u65b0\u7684\u5b57\u7b26\u3002\u76f4\u81f3\u76ee\u524d\u4e3a\u6b62\u7684\u7b2c\u516d\u7248\uff0cUnicode \u5c31\u5df2\u7ecf\u5305\u542b\u4e86\u8d85\u8fc7\u5341\u4e07\u4e2a\u5b57\u7b26\uff08\u57282005\u5e74\uff0cUnicode \u7684\u7b2c\u5341\u4e07\u4e2a\u5b57\u7b26\u88ab\u91c7\u7eb3\u4e14\u8ba4\u53ef\u6210\u4e3a\u6807\u51c6\u4e4b\u4e00\uff09\u3001\u4e00\u7ec4\u53ef\u7528\u4ee5\u4f5c\u4e3a\u89c6\u89c9\u53c2\u8003\u7684\u4ee3\u7801\u56fe\u8868\u3001\u4e00\u5957\u7f16\u7801\u65b9\u6cd5\u4e0e\u4e00\u7ec4\u6807\u51c6\u5b57\u7b26\u7f16\u7801\u3001\u4e00\u5957\u5305\u542b\u4e86\u4e0a\u6807\u5b57\u3001\u4e0b\u6807\u5b57\u7b49\u5b57\u7b26\u7279\u6027\u7684\u679a\u4e3e\u7b49\u3002 Unicode \u7ec4\u7ec7\uff08The Unicode Consortium\uff09\u662f\u7531\u4e00\u4e2a\u975e\u8425\u5229\u6027\u7684\u673a\u6784\u6240\u8fd0\u4f5c\uff0c\u5e76\u4e3b\u5bfc Unicode \u7684\u540e\u7eed\u53d1\u5c55\uff0c\u5176\u76ee\u6807\u5728\u4e8e\uff1a\u5c06\u65e2\u6709\u7684\u5b57\u7b26\u7f16\u7801\u65b9\u6848\u4ee5Unicode \u7f16\u7801\u65b9\u6848\u6765\u52a0\u4ee5\u53d6\u4ee3\uff0c\u7279\u522b\u662f\u65e2\u6709\u7684\u65b9\u6848\u5728\u591a\u8bed\u73af\u5883\u4e0b\uff0c\u7686\u4ec5\u6709\u6709\u9650\u7684\u7a7a\u95f4\u4ee5\u53ca\u4e0d\u517c\u5bb9\u7684\u95ee\u9898\u3002 -\uff08\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1aUnicode\u662f\u5b57\u7b26\u96c6\uff0cUTF-32/ UTF-16/ UTF-8\u662f\u4e09\u79cd\u5b57\u7b26\u7f16\u7801\u65b9\u6848\u3002\uff09 4. Linux\u4e0b\u6587\u4ef6\u540d\u7f16\u7801\u8f6c\u6362 \u548c \u6587\u4ef6\u5185\u5bb9\u7f16\u7801\u8f6c\u6362 \u6587\u4ef6\u540d\u7f16\u7801\u8f6c\u6362 \u4f7f\u7528 convmv \u6587\u4ef6\u5185\u5bb9\u7f16\u7801\u8f6c\u6362 \u4f7f\u7528 iconv \u539f\u56e0\u5728\u4e8e\uff0cWindows \u7684\u6587\u4ef6\u540d\u4e2d\u6587\u7f16\u7801\u9ed8\u8ba4\u4e3aGBK\uff0c\u538b\u7f29\u6216\u8005\u4e0a\u4f20\u540e\uff0c\u6587\u4ef6\u540d\u8fd8\u4f1a\u662fGBK\u7f16\u7801\uff0c\u800cLinux\u4e2d\u9ed8\u8ba4\u6587\u4ef6\u540d\u7f16\u7801\u4e3aUTF8\uff0c\u7531\u4e8e\u7f16\u7801\u4e0d\u4e00\u81f4\u6240\u4ee5\u5bfc\u81f4\u4e86\u6587\u4ef6\u540d\u4e71\u7801\u7684\u95ee\u9898\uff0c\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u9700\u8981\u5bf9\u6587\u4ef6\u540d\u8fdb\u884c\u8f6c\u7801\u3002 yum install convmv convmv -f gbk -t utf-8 -r --notest /home/wwwroot 5. python\u5b57\u7b26\u96c6\u548c\u7f16\u7801 unicode\u7c7b\u578b \uff0c\u662f\u64cd\u4f5c\u7cfb\u7edf\u5c42\u9762\u771f\u6b63\u7684\u5b57\u7b26\u4e32 str\u7c7b\u578b \u662f\u5b57\u8282\u4e32\u4e00\u4e2a\u5e8f\u5217\u5bf9\u8c61\uff0c\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5bf9\u8c61 \u4e00\u4e2aunicode\u5bf9\u8c61,\u8c03\u7528encode( utf-8 ) \u65b9\u6cd5\uff0c \u624d\u4f1a\u53d8\u6210str\u5bf9\u8c61 \u4e00\u4e2astr\u5bf9\u8c61\uff0c\u8c03\u7528decode( utf-8 )\u65b9\u6cd5\uff0c\u624d\u4f1a\u53d8\u6210unicode\u5bf9\u8c61 \u6211\u4eec\u8981\u628a unicode \u7b26\u53f7 \u4fdd\u5b58\u5230\u6587\u4ef6\u6216\u8005\u4f20\u8f93\u5230\u7f51\u7edc\u5c31\u9700\u8981\u7ecf\u8fc7\u7f16\u7801\u5904\u7406\u8f6c\u6362\u6210 str \u7c7b\u578b\uff0c\u4e8e\u662f python \u63d0\u4f9b\u4e86 encode \u65b9\u6cd5\uff0c\u4ece unicode \u8f6c\u6362\u5230 str\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002 5.1 \u4e3a\u4ec0\u4e48python \u6e90\u6587\u4ef6\u5f00\u5934\u8981\u52a0 #-*- coding: utf-8 -*- \u56e0\u4e3apython\u662f\u8981\u5148\u7f16\u8bd1\uff0c\u518d\u6267\u884c\u7684\uff0c\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\uff0cpython\u89e3\u6790\u5668\u9ed8\u8ba4\u7684\u7f16\u7801\u65b9\u5f0f\u662fASCII\uff0c\u5982\u679c\u6e90\u6587\u4ef6\u91cc\u6709\u4e2d\u6587\uff0c\u7f16\u7801\u5c31\u4f1a\u62a5\u9519\uff0c\u5bfc\u81f4python\u89e3\u6790\u5668\u65e0\u6cd5\u5b8c\u6210\u7f16\u8bd1\u8fc7\u7a0b\uff0c\u56e0\u800c\u62a5\u9519\u9000\u51fa 5.2 \u4e0d\u540c\u7ec8\u7aef\u5bfc\u81f4\u7684\u7f16\u7801\u5dee\u5f02 \u540c\u6837\u4e00\u4e2a\u6c49\u5b57\uff0c\u540c\u6837\u662fstr\u7c7b\u578b\uff0c\u5728\u4e0d\u540c\u7ec8\u7aef\u4e0b\u6572\u5165\uff0c\u5176\u5b58\u50a8\u5f62\u5f0f\u662f\u4e0d\u4e00\u6837\u7684\u3002 \u6bd4\u5982\u7ec8\u7aef\u7f16\u7801\u662fgbk\uff0c\u90a3\u4e48\u8be5str\u5176\u4e8c\u8fdb\u5236\u5f62\u5f0f \u5c31\u662fgbk\u7684\u7f16\u7801 \u6bd4\u5982\u7ec8\u7aef\u7f16\u7801\u662futf-8\uff0c\u90a3\u4e48\u8be5str\u5176\u4e8c\u8fdb\u5236\u5f62\u5f0f\u5c31\u662futf-8\u7684\u7f16\u7801 \u5f53\u7136\uff0c\u5982\u679c\u8f93\u5165\u7684\u662funicode\u5b57\u7b26\uff0c\u90a3\u4e48\u5176\u5b58\u50a8\u7684\u59cb\u7ec8\u662funicode\u7f16\u7801\uff0c \u4f46\u662f\u95ee\u9898\u662f\u5982\u679c\u4f60\u7684\u7ec8\u7aef\u662fGBK\u7f16\u7801\uff0c\u5c31\u4e0d\u597d\u8f93\u5165unicode\u5b57\u7b26\u4e86 \u5f53\u8be5str\u8c03\u7528unicode(str)\u65f6\uff0c\u76f8\u5f53\u4e8e\u628astr\u5bf9\u8c61\u8fdb\u884cdecode\uff0c\u5982\u679c\u7f16\u7801\u65b9\u5f0f\u9009\u62e9\u4e0d\u5bf9\uff0c \u6bd4\u5982\u4e00\u4e2agbk\u7f16\u7801\u7684str\uff0cdecode()\u65f6\uff08\u4e5f\u5c31\u662f\u8c03\u7528unicode(str)\u65f6\uff09\uff0c\u65b9\u5f0f\u4e3autf-8\uff0c\u5c31\u4f1a\u51fa\u73b0unicodedecodeerror unicode()\u51fd\u6570\uff0c\u652f\u6301\u4f20\u5165\u89e3\u7801\u65b9\u5f0f(\u6bd4\u5982gbk\u6216\u8005utf-8)\uff0c\u5982\u679c\u4e0d\u4f20\u5165\uff0c\u9ed8\u8ba4\u5c31\u662f\u4f7f\u7528sys.getdefaultencoding(),python2\u91cc\uff0c\u9ed8\u8ba4\u662fascii 5.3 python2 print\u5168\u8fc7\u7a0b\uff1a \u6838\u5fc3\u8def\u5f84 unicode\u5bf9\u8c61\u6216\u8005str\u5bf9\u8c61 \u2014> \u89e3\u6790\u6210\u5176\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217 \u2014> \u4f7f\u7528\u7ec8\u7aef\u5bf9\u5e94\u7684\u89e3\u7801\u65b9\u5f0f\u6765\u89e3\u7801 \u7ec8\u7aef\u5bf9\u5e94\u7684\u89e3\u7801\u65b9\u5f0f\u662f\u5565\u5462 \uff1f locale.getdefaultlocale() \u8fd9\u91cc\u4e3a\u4ec0\u4e48\u4f1a\u663e\u793a\u4e71\u7801\u5462 \uff1f \u9996\u5148us\u662f\u4e00\u4e2aunicode\u5bf9\u8c61\uff0cus.encode(\u2018gbk\u2019)\u4f1a\u8f6c\u5316\u6210str\u5bf9\u8c61\uff0c \u7136\u540eprint\u8be5str\u5bf9\u8c61\u65f6\uff0c\u4f1a\u901a\u8fc7\u7ec8\u7aef\u7684\u7f16\u7801\u65b9\u5f0f\u8bbe\u7f6e\u6765\u89e3\u7801\uff0c\u8fd9\u91cc\u7ec8\u7aef\u7684\u7f16\u7801\u65b9\u5f0f\u4e3autf-8\uff0c\u5c31\u4f1a\u62a5\u9519 \u7ec8\u7aef\u7684\u7f16\u7801\u65b9\u5f0f\u5982\u679c\u662fgbk\uff0c\u5c31\u4e0d\u4f1a\u62a5\u9519 print\u8fc7\u7a0b\u5176\u5b9e\u5c31\u662f\u628a\u5185\u5b58\u91cc\u7684\u5b57\u7b26\u4e32\u8f6c\u4e3a\u4e8c\u8fdb\u5236\u5e8f\u5217\uff0c\u7136\u540e\u518d\u628a\u4e8c\u8fdb\u5236\u5e8f\u5217\u89e3\u7801\u3001\u5728\u5c4f\u5e55\u4e0a\u663e\u793a. 5.4 python3\u7684\u5b57\u7b26\u4e32 Python \u628a\u5b57\u7b26\u4e32\u7684\u7c7b\u578b\u8fd8\u641e\u6210\u4e24\u79cd\uff0cunicode \u548c str \uff0c\u4ee5\u81f3\u4e8e\u628a\u5f00\u53d1\u8005\u90fd\u5f04\u7cca\u6d82\u4e86\uff0c\u8fd9\u662f\u5176\u4e8c\u3002python3 \u5c31\u5f7b\u5e95\u628a \u5b57\u7b26\u4e32\u91cd\u65b0\u6539\u9020\u4e86\uff0c\u53ea\u4fdd\u7559\u4e00\u79cd\u7c7b\u578b","title":"\u7b2c\u4e03\u7bc7 \u5b57\u7b26\u96c6\u548c\u7f16\u7801"},{"location":"chapter_7/7_charset/#_1","text":"\u672c\u7bc7\u7528\u4e8e\u68b3\u7406\u5b57\u7b26\u96c6\u548c\u7f16\u7801\u77e5\u8bc6","title":"\u6982\u8ff0"},{"location":"chapter_7/7_charset/#1","text":"\u8ba1\u7b97\u673a\u4e2d\u50a8\u5b58\u7684\u4fe1\u606f\u90fd\u662f\u7528\u4e8c\u8fdb\u5236\u6570\u8868\u793a\u7684\uff1b\u800c\u6211\u4eec\u5728\u5c4f\u5e55\u4e0a\u770b\u5230\u7684\u82f1\u6587\u3001\u6c49\u5b57\u7b49\u5b57\u7b26\u662f\u4e8c\u8fdb\u5236\u6570\u8f6c\u6362\u4e4b\u540e\u7684\u7ed3\u679c\u3002\u901a\u4fd7\u7684\u8bf4\uff0c\u6309\u7167\u4f55\u79cd\u89c4\u5219\u5c06\u5b57\u7b26\u5b58\u50a8\u5728\u8ba1\u7b97\u673a\u4e2d\uff0c\u5982'a'\u7528\u4ec0\u4e48\u8868\u793a\uff0c\u79f0\u4e3a\"\u7f16\u7801\"\uff1b\u53cd\u4e4b\uff0c\u5c06\u5b58\u50a8\u5728\u8ba1\u7b97\u673a\u4e2d\u7684\u4e8c\u8fdb\u5236\u6570\u89e3\u6790\u663e\u793a\u51fa\u6765\uff0c\u79f0\u4e3a\"\u89e3\u7801\"\uff0c\u5982\u540c\u5bc6\u7801\u5b66\u4e2d\u7684\u52a0\u5bc6\u548c\u89e3\u5bc6\u3002\u5728\u89e3\u7801\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u4f7f\u7528\u4e86\u9519\u8bef\u7684\u89e3\u7801\u89c4\u5219\uff0c\u5219\u5bfc\u81f4'a'\u89e3\u6790\u6210'b'\u6216\u8005\u4e71\u7801\u3002","title":"1.\u57fa\u7840\u77e5\u8bc6"},{"location":"chapter_7/7_charset/#charset","text":"\u662f\u4e00\u4e2a\u7cfb\u7edf\u652f\u6301\u7684\u6240\u6709\u62bd\u8c61\u5b57\u7b26\u7684\u96c6\u5408\u3002\u5b57\u7b26\u662f\u5404\u79cd\u6587\u5b57\u548c\u7b26\u53f7\u7684\u603b\u79f0\uff0c\u5305\u62ec\u5404\u56fd\u5bb6\u6587\u5b57\u3001\u6807\u70b9\u7b26\u53f7\u3001\u56fe\u5f62\u7b26\u53f7\u3001\u6570\u5b57\u7b49\u3002","title":"\u5b57\u7b26\u96c6\uff08Charset\uff09\uff1a"},{"location":"chapter_7/7_charset/#character-encoding","text":"\u662f\u4e00\u5957\u6cd5\u5219\uff0c\u4f7f\u7528\u8be5\u6cd5\u5219\u80fd\u591f\u5bf9\u81ea\u7136\u8bed\u8a00\u7684\u5b57\u7b26\u7684\u4e00\u4e2a\u96c6\u5408\uff08\u5982\u5b57\u6bcd\u8868\u6216\u97f3\u8282\u8868\uff09\uff0c\u4e0e\u5176\u4ed6\u4e1c\u897f\u7684\u4e00\u4e2a\u96c6\u5408\uff08\u5982\u53f7\u7801\u6216\u7535\u8109\u51b2\uff09\u8fdb\u884c\u914d\u5bf9\u3002\u5373\u5728\u7b26\u53f7\u96c6\u5408\u4e0e\u6570\u5b57\u7cfb\u7edf\u4e4b\u95f4\u5efa\u7acb\u5bf9\u5e94\u5173\u7cfb\uff0c\u5b83\u662f\u4fe1\u606f\u5904\u7406\u7684\u4e00\u9879\u57fa\u672c\u6280\u672f\u3002\u901a\u5e38\u4eba\u4eec\u7528\u7b26\u53f7\u96c6\u5408\uff08\u4e00\u822c\u60c5\u51b5\u4e0b\u5c31\u662f\u6587\u5b57\uff09\u6765\u8868\u8fbe\u4fe1\u606f\u3002\u800c\u4ee5\u8ba1\u7b97\u673a\u4e3a\u57fa\u7840\u7684\u4fe1\u606f\u5904\u7406\u7cfb\u7edf\u5219\u662f\u5229\u7528\u5143\u4ef6\uff08\u786c\u4ef6\uff09\u4e0d\u540c\u72b6\u6001\u7684\u7ec4\u5408\u6765\u5b58\u50a8\u548c\u5904\u7406\u4fe1\u606f\u7684\u3002\u5143\u4ef6\u4e0d\u540c\u72b6\u6001\u7684\u7ec4\u5408\u80fd\u4ee3\u8868\u6570\u5b57\u7cfb\u7edf\u7684\u6570\u5b57\uff0c\u56e0\u6b64 \u5b57\u7b26\u7f16\u7801\u5c31\u662f\u5c06\u7b26\u53f7\u8f6c\u6362\u4e3a\u8ba1\u7b97\u673a\u53ef\u4ee5\u63a5\u53d7\u7684\u6570\u5b57\u7cfb\u7edf\u7684\u6570 \uff0c\u79f0\u4e3a\u6570\u5b57\u4ee3\u7801\u3002","title":"\u5b57\u7b26\u7f16\u7801\uff08Character Encoding\uff09\uff1a"},{"location":"chapter_7/7_charset/#2","text":"","title":"2. \u5e38\u7528\u5b57\u7b26\u96c6\u548c\u5b57\u7b26\u7f16\u7801"},{"location":"chapter_7/7_charset/#_2","text":"\u6bd4\u5982: ASCII\u5b57\u7b26\u96c6\u3001GB2312\u5b57\u7b26\u96c6\u3001BIG5\u5b57\u7b26\u96c6\u3001GB18030\u5b57\u7b26\u96c6\u3001Unicode\u5b57\u7b26\u96c6\u7b49\u3002 \u8ba1\u7b97\u673a\u8981\u51c6\u786e\u7684\u5904\u7406\u5404\u79cd\u5b57\u7b26\u96c6\u6587\u5b57\uff0c\u9700\u8981\u8fdb\u884c\u5b57\u7b26\u7f16\u7801\uff0c\u4ee5\u4fbf\u8ba1\u7b97\u673a\u80fd\u591f\u8bc6\u522b\u548c\u5b58\u50a8\u5404\u79cd\u6587\u5b57\u3002 \u5b57\u7b26\u96c6 \u548c \u5b57\u7b26\u7f16\u7801 \u4e00\u822c\u90fd\u662f\u6210\u5bf9\u51fa\u73b0\u7684\uff0c\u5982ASCII\u3001IOS-8859-1\u3001GB2312\u3001GBK\uff0c\u90fd\u662f\u5373\u8868\u793a\u4e86\u5b57\u7b26\u96c6\u53c8\u8868\u793a\u4e86\u5bf9\u5e94\u7684\u5b57\u7b26\u7f16\u7801\uff0c\u4ee5\u540e\u7edf\u79f0\u4e3a\u7f16\u7801\u3002Unicode\u6bd4\u8f83\u7279\u6b8a\uff0c\u540e\u9762\u7ec6\u8bf4\u3002","title":"\u5e38\u89c1\u5b57\u7b26\u96c6\u540d\u79f0\uff1a"},{"location":"chapter_7/7_charset/#_3","text":"\u56e0\u6b64\uff0c\u5c31\u6211\u4eec\u5173\u5fc3\u7684\u6c49\u5b57\u800c\u8a00\uff0c\u4e09\u79cd\u7f16\u7801\u65b9\u5f0f\u7684\u8868\u793a\u8303\u56f4\u662f\uff1a GB18030 > GBK > GB2312 \u5373GBK\u662fGB2312\u7684\u8d85\u96c6\uff0cGB1803\u53c8\u662fGBK\u7684\u8d85\u96c6\u3002\u540e\u9762\u4e5f\u4f1a\u770b\u5230\uff0c\u4e00\u4e2a\u6c49\u5b57\u53ef\u4ee5\u7528GBK\u8868\u793a\uff0c\u4f46\u4e0d\u4e00\u5b9a\u80fd\u88abGB2312\u6240\u8868\u793a","title":"\u4e2d\u6587\u7f16\u7801\u65b9\u5f0f\u7684\u96c6\u5408\u8303\u56f4"},{"location":"chapter_7/7_charset/#3-unicode","text":"\u5f53\u8ba1\u7b97\u673a\u4f20\u5230\u4e16\u754c\u5404\u4e2a\u56fd\u5bb6\u65f6\uff0c\u4e3a\u4e86\u9002\u5408\u5f53\u5730\u8bed\u8a00\u548c\u5b57\u7b26\uff0c\u8bbe\u8ba1\u548c\u5b9e\u73b0\u7c7b\u4f3cGB232/GBK/GB18030/BIG5\u7684\u7f16\u7801\u65b9\u6848\u3002\u8fd9\u6837\u5404\u641e\u4e00\u5957\uff0c\u5728\u672c\u5730\u4f7f\u7528\u6ca1\u6709\u95ee\u9898\uff0c\u4e00\u65e6\u51fa\u73b0\u5728\u7f51\u7edc\u4e2d\uff0c\u7531\u4e8e\u4e0d\u517c\u5bb9\uff0c\u4e92\u76f8\u8bbf\u95ee\u5c31\u51fa\u73b0\u4e86\u4e71\u7801\u73b0\u8c61\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e00\u4e2a\u4f1f\u5927\u7684\u521b\u60f3\u4ea7\u751f\u4e86\u2014\u2014 Unicode \u3002 Unicode\u7f16\u7801\u7cfb\u7edf \u4e3a\u8868\u8fbe\u4efb\u610f\u8bed\u8a00\u7684\u4efb\u610f\u5b57\u7b26\u800c\u8bbe\u8ba1\u3002\u5b83\u4f7f\u7528 4\u5b57\u8282 \u7684\u6570\u5b57\u6765\u8868\u8fbe\u6bcf\u4e2a\u5b57\u6bcd\u3001\u7b26\u53f7\uff0c\u6216\u8005\u8868\u610f\u6587\u5b57(ideograph)\u3002\u6bcf\u4e2a\u6570\u5b57\u4ee3\u8868\u552f\u4e00\u7684\u81f3\u5c11\u5728\u67d0\u79cd\u8bed\u8a00\u4e2d\u4f7f\u7528\u7684\u7b26\u53f7\u3002\uff08\u5e76\u4e0d\u662f\u6240\u6709\u7684\u6570\u5b57\u90fd\u7528\u4e0a\u4e86\uff0c\u4f46\u662f\u603b\u6570\u5df2\u7ecf\u8d85\u8fc7\u4e8665535\uff0c\u6240\u4ee52\u4e2a\u5b57\u8282\u7684\u6570\u5b57\u662f\u4e0d\u591f\u7528\u7684\u3002\uff09\u88ab\u51e0\u79cd\u8bed\u8a00\u5171\u7528\u7684\u5b57\u7b26\u901a\u5e38\u4f7f\u7528\u76f8\u540c\u7684\u6570\u5b57\u6765\u7f16\u7801\uff0c\u9664\u975e\u5b58\u5728\u4e00\u4e2a\u5728\u7406\u7684\u8bed\u6e90\u5b66(etymological)\u7406\u7531\u4f7f\u4e0d\u8fd9\u6837\u505a\u3002\u4e0d\u8003\u8651\u8fd9\u79cd\u60c5\u51b5\u7684\u8bdd\uff0c\u6bcf\u4e2a\u5b57\u7b26\u5bf9\u5e94\u4e00\u4e2a\u6570\u5b57\uff0c\u6bcf\u4e2a\u6570\u5b57\u5bf9\u5e94\u4e00\u4e2a\u5b57\u7b26\u3002\u5373\u4e0d\u5b58\u5728\u4e8c\u4e49\u6027\u3002\u4e0d\u518d\u9700\u8981\u8bb0\u5f55\"\u6a21\u5f0f\"\u4e86\u3002U+0041\u603b\u662f\u4ee3\u8868'A'\uff0c\u5373\u4f7f\u8fd9\u79cd\u8bed\u8a00\u6ca1\u6709'A'\u8fd9\u4e2a\u5b57\u7b26\u3002 \u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\u4e2d\uff0c Unicode\uff08\u7edf\u4e00\u7801\u3001\u4e07\u56fd\u7801\u3001\u5355\u4e00\u7801\u3001\u6807\u51c6\u4e07\u56fd\u7801\uff09\u662f\u4e1a\u754c\u7684\u4e00\u79cd\u6807\u51c6 \uff0c\u5b83\u53ef\u4ee5\u4f7f\u7535\u8111\u5f97\u4ee5\u4f53\u73b0\u4e16\u754c\u4e0a\u6570\u5341\u79cd\u6587\u5b57\u7684\u7cfb\u7edf\u3002Unicode \u662f\u57fa\u4e8e\u901a\u7528\u5b57\u7b26\u96c6\uff08Universal Character Set\uff09\u7684\u6807\u51c6\u6765\u53d1\u5c55\uff0c\u5e76\u4e14\u540c\u65f6\u4e5f\u4ee5\u4e66\u672c\u7684\u5f62\u5f0f\u5bf9\u5916\u53d1\u8868\u3002 Unicode \u8fd8\u4e0d\u65ad\u5728\u6269\u589e\uff0c \u6bcf\u4e2a\u65b0\u7248\u672c\u63d2\u5165\u66f4\u591a\u65b0\u7684\u5b57\u7b26\u3002\u76f4\u81f3\u76ee\u524d\u4e3a\u6b62\u7684\u7b2c\u516d\u7248\uff0cUnicode \u5c31\u5df2\u7ecf\u5305\u542b\u4e86\u8d85\u8fc7\u5341\u4e07\u4e2a\u5b57\u7b26\uff08\u57282005\u5e74\uff0cUnicode \u7684\u7b2c\u5341\u4e07\u4e2a\u5b57\u7b26\u88ab\u91c7\u7eb3\u4e14\u8ba4\u53ef\u6210\u4e3a\u6807\u51c6\u4e4b\u4e00\uff09\u3001\u4e00\u7ec4\u53ef\u7528\u4ee5\u4f5c\u4e3a\u89c6\u89c9\u53c2\u8003\u7684\u4ee3\u7801\u56fe\u8868\u3001\u4e00\u5957\u7f16\u7801\u65b9\u6cd5\u4e0e\u4e00\u7ec4\u6807\u51c6\u5b57\u7b26\u7f16\u7801\u3001\u4e00\u5957\u5305\u542b\u4e86\u4e0a\u6807\u5b57\u3001\u4e0b\u6807\u5b57\u7b49\u5b57\u7b26\u7279\u6027\u7684\u679a\u4e3e\u7b49\u3002 Unicode \u7ec4\u7ec7\uff08The Unicode Consortium\uff09\u662f\u7531\u4e00\u4e2a\u975e\u8425\u5229\u6027\u7684\u673a\u6784\u6240\u8fd0\u4f5c\uff0c\u5e76\u4e3b\u5bfc Unicode \u7684\u540e\u7eed\u53d1\u5c55\uff0c\u5176\u76ee\u6807\u5728\u4e8e\uff1a\u5c06\u65e2\u6709\u7684\u5b57\u7b26\u7f16\u7801\u65b9\u6848\u4ee5Unicode \u7f16\u7801\u65b9\u6848\u6765\u52a0\u4ee5\u53d6\u4ee3\uff0c\u7279\u522b\u662f\u65e2\u6709\u7684\u65b9\u6848\u5728\u591a\u8bed\u73af\u5883\u4e0b\uff0c\u7686\u4ec5\u6709\u6709\u9650\u7684\u7a7a\u95f4\u4ee5\u53ca\u4e0d\u517c\u5bb9\u7684\u95ee\u9898\u3002 -\uff08\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1aUnicode\u662f\u5b57\u7b26\u96c6\uff0cUTF-32/ UTF-16/ UTF-8\u662f\u4e09\u79cd\u5b57\u7b26\u7f16\u7801\u65b9\u6848\u3002\uff09","title":"3. \u5355\u72ec\u8bf4Unicode"},{"location":"chapter_7/7_charset/#4-linux","text":"\u6587\u4ef6\u540d\u7f16\u7801\u8f6c\u6362 \u4f7f\u7528 convmv \u6587\u4ef6\u5185\u5bb9\u7f16\u7801\u8f6c\u6362 \u4f7f\u7528 iconv \u539f\u56e0\u5728\u4e8e\uff0cWindows \u7684\u6587\u4ef6\u540d\u4e2d\u6587\u7f16\u7801\u9ed8\u8ba4\u4e3aGBK\uff0c\u538b\u7f29\u6216\u8005\u4e0a\u4f20\u540e\uff0c\u6587\u4ef6\u540d\u8fd8\u4f1a\u662fGBK\u7f16\u7801\uff0c\u800cLinux\u4e2d\u9ed8\u8ba4\u6587\u4ef6\u540d\u7f16\u7801\u4e3aUTF8\uff0c\u7531\u4e8e\u7f16\u7801\u4e0d\u4e00\u81f4\u6240\u4ee5\u5bfc\u81f4\u4e86\u6587\u4ef6\u540d\u4e71\u7801\u7684\u95ee\u9898\uff0c\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u9700\u8981\u5bf9\u6587\u4ef6\u540d\u8fdb\u884c\u8f6c\u7801\u3002 yum install convmv convmv -f gbk -t utf-8 -r --notest /home/wwwroot","title":"4. Linux\u4e0b\u6587\u4ef6\u540d\u7f16\u7801\u8f6c\u6362 \u548c \u6587\u4ef6\u5185\u5bb9\u7f16\u7801\u8f6c\u6362"},{"location":"chapter_7/7_charset/#5-python","text":"unicode\u7c7b\u578b \uff0c\u662f\u64cd\u4f5c\u7cfb\u7edf\u5c42\u9762\u771f\u6b63\u7684\u5b57\u7b26\u4e32 str\u7c7b\u578b \u662f\u5b57\u8282\u4e32\u4e00\u4e2a\u5e8f\u5217\u5bf9\u8c61\uff0c\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5bf9\u8c61 \u4e00\u4e2aunicode\u5bf9\u8c61,\u8c03\u7528encode( utf-8 ) \u65b9\u6cd5\uff0c \u624d\u4f1a\u53d8\u6210str\u5bf9\u8c61 \u4e00\u4e2astr\u5bf9\u8c61\uff0c\u8c03\u7528decode( utf-8 )\u65b9\u6cd5\uff0c\u624d\u4f1a\u53d8\u6210unicode\u5bf9\u8c61 \u6211\u4eec\u8981\u628a unicode \u7b26\u53f7 \u4fdd\u5b58\u5230\u6587\u4ef6\u6216\u8005\u4f20\u8f93\u5230\u7f51\u7edc\u5c31\u9700\u8981\u7ecf\u8fc7\u7f16\u7801\u5904\u7406\u8f6c\u6362\u6210 str \u7c7b\u578b\uff0c\u4e8e\u662f python \u63d0\u4f9b\u4e86 encode \u65b9\u6cd5\uff0c\u4ece unicode \u8f6c\u6362\u5230 str\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002","title":"5. python\u5b57\u7b26\u96c6\u548c\u7f16\u7801"},{"location":"chapter_7/7_charset/#51-python","text":"#-*- coding: utf-8 -*- \u56e0\u4e3apython\u662f\u8981\u5148\u7f16\u8bd1\uff0c\u518d\u6267\u884c\u7684\uff0c\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\uff0cpython\u89e3\u6790\u5668\u9ed8\u8ba4\u7684\u7f16\u7801\u65b9\u5f0f\u662fASCII\uff0c\u5982\u679c\u6e90\u6587\u4ef6\u91cc\u6709\u4e2d\u6587\uff0c\u7f16\u7801\u5c31\u4f1a\u62a5\u9519\uff0c\u5bfc\u81f4python\u89e3\u6790\u5668\u65e0\u6cd5\u5b8c\u6210\u7f16\u8bd1\u8fc7\u7a0b\uff0c\u56e0\u800c\u62a5\u9519\u9000\u51fa","title":"5.1 \u4e3a\u4ec0\u4e48python \u6e90\u6587\u4ef6\u5f00\u5934\u8981\u52a0"},{"location":"chapter_7/7_charset/#52","text":"\u540c\u6837\u4e00\u4e2a\u6c49\u5b57\uff0c\u540c\u6837\u662fstr\u7c7b\u578b\uff0c\u5728\u4e0d\u540c\u7ec8\u7aef\u4e0b\u6572\u5165\uff0c\u5176\u5b58\u50a8\u5f62\u5f0f\u662f\u4e0d\u4e00\u6837\u7684\u3002 \u6bd4\u5982\u7ec8\u7aef\u7f16\u7801\u662fgbk\uff0c\u90a3\u4e48\u8be5str\u5176\u4e8c\u8fdb\u5236\u5f62\u5f0f \u5c31\u662fgbk\u7684\u7f16\u7801 \u6bd4\u5982\u7ec8\u7aef\u7f16\u7801\u662futf-8\uff0c\u90a3\u4e48\u8be5str\u5176\u4e8c\u8fdb\u5236\u5f62\u5f0f\u5c31\u662futf-8\u7684\u7f16\u7801 \u5f53\u7136\uff0c\u5982\u679c\u8f93\u5165\u7684\u662funicode\u5b57\u7b26\uff0c\u90a3\u4e48\u5176\u5b58\u50a8\u7684\u59cb\u7ec8\u662funicode\u7f16\u7801\uff0c \u4f46\u662f\u95ee\u9898\u662f\u5982\u679c\u4f60\u7684\u7ec8\u7aef\u662fGBK\u7f16\u7801\uff0c\u5c31\u4e0d\u597d\u8f93\u5165unicode\u5b57\u7b26\u4e86 \u5f53\u8be5str\u8c03\u7528unicode(str)\u65f6\uff0c\u76f8\u5f53\u4e8e\u628astr\u5bf9\u8c61\u8fdb\u884cdecode\uff0c\u5982\u679c\u7f16\u7801\u65b9\u5f0f\u9009\u62e9\u4e0d\u5bf9\uff0c \u6bd4\u5982\u4e00\u4e2agbk\u7f16\u7801\u7684str\uff0cdecode()\u65f6\uff08\u4e5f\u5c31\u662f\u8c03\u7528unicode(str)\u65f6\uff09\uff0c\u65b9\u5f0f\u4e3autf-8\uff0c\u5c31\u4f1a\u51fa\u73b0unicodedecodeerror unicode()\u51fd\u6570\uff0c\u652f\u6301\u4f20\u5165\u89e3\u7801\u65b9\u5f0f(\u6bd4\u5982gbk\u6216\u8005utf-8)\uff0c\u5982\u679c\u4e0d\u4f20\u5165\uff0c\u9ed8\u8ba4\u5c31\u662f\u4f7f\u7528sys.getdefaultencoding(),python2\u91cc\uff0c\u9ed8\u8ba4\u662fascii","title":"5.2 \u4e0d\u540c\u7ec8\u7aef\u5bfc\u81f4\u7684\u7f16\u7801\u5dee\u5f02"},{"location":"chapter_7/7_charset/#53-python2-print","text":"unicode\u5bf9\u8c61\u6216\u8005str\u5bf9\u8c61 \u2014> \u89e3\u6790\u6210\u5176\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217 \u2014> \u4f7f\u7528\u7ec8\u7aef\u5bf9\u5e94\u7684\u89e3\u7801\u65b9\u5f0f\u6765\u89e3\u7801 \u7ec8\u7aef\u5bf9\u5e94\u7684\u89e3\u7801\u65b9\u5f0f\u662f\u5565\u5462 \uff1f locale.getdefaultlocale() \u8fd9\u91cc\u4e3a\u4ec0\u4e48\u4f1a\u663e\u793a\u4e71\u7801\u5462 \uff1f \u9996\u5148us\u662f\u4e00\u4e2aunicode\u5bf9\u8c61\uff0cus.encode(\u2018gbk\u2019)\u4f1a\u8f6c\u5316\u6210str\u5bf9\u8c61\uff0c \u7136\u540eprint\u8be5str\u5bf9\u8c61\u65f6\uff0c\u4f1a\u901a\u8fc7\u7ec8\u7aef\u7684\u7f16\u7801\u65b9\u5f0f\u8bbe\u7f6e\u6765\u89e3\u7801\uff0c\u8fd9\u91cc\u7ec8\u7aef\u7684\u7f16\u7801\u65b9\u5f0f\u4e3autf-8\uff0c\u5c31\u4f1a\u62a5\u9519 \u7ec8\u7aef\u7684\u7f16\u7801\u65b9\u5f0f\u5982\u679c\u662fgbk\uff0c\u5c31\u4e0d\u4f1a\u62a5\u9519 print\u8fc7\u7a0b\u5176\u5b9e\u5c31\u662f\u628a\u5185\u5b58\u91cc\u7684\u5b57\u7b26\u4e32\u8f6c\u4e3a\u4e8c\u8fdb\u5236\u5e8f\u5217\uff0c\u7136\u540e\u518d\u628a\u4e8c\u8fdb\u5236\u5e8f\u5217\u89e3\u7801\u3001\u5728\u5c4f\u5e55\u4e0a\u663e\u793a.","title":"5.3 python2 print\u5168\u8fc7\u7a0b\uff1a \u6838\u5fc3\u8def\u5f84"},{"location":"chapter_7/7_charset/#54-python3","text":"Python \u628a\u5b57\u7b26\u4e32\u7684\u7c7b\u578b\u8fd8\u641e\u6210\u4e24\u79cd\uff0cunicode \u548c str \uff0c\u4ee5\u81f3\u4e8e\u628a\u5f00\u53d1\u8005\u90fd\u5f04\u7cca\u6d82\u4e86\uff0c\u8fd9\u662f\u5176\u4e8c\u3002python3 \u5c31\u5f7b\u5e95\u628a \u5b57\u7b26\u4e32\u91cd\u65b0\u6539\u9020\u4e86\uff0c\u53ea\u4fdd\u7559\u4e00\u79cd\u7c7b\u578b","title":"5.4 python3\u7684\u5b57\u7b26\u4e32"},{"location":"chapter_7/8_locale/","text":"\u6982\u8ff0 \u672c\u7bc7\u7528\u4e8e\u68b3\u7406Linux Locale\u8bbe\u7f6e \u4ec0\u4e48\u662fLocale? locale \u5373\u533a\u57df\u8bbe\u7f6e\u3002 \u7528\u6237\u4f7f\u7528\u8be5\u8bbe\u7f6e\uff0c\u544a\u8bc9\u64cd\u4f5c\u7cfb\u7edf\u548c\u5e94\u7528\u8f6f\u4ef6\uff0c\u81ea\u5df1\u6240\u5904\u7684\u56fd\u5bb6\u3001\u5730\u533a\u3001\u6240\u4f7f\u7528\u7684\u8bed\u8a00\u3001\u8d27\u5e01\u73af\u5883\u7b49\u4fe1\u606f, \u5305\u62ec\u4f7f\u7528\u4ec0\u4e48 \u5b57\u7b26\u96c6\u548c\u7f16\u7801 . \u6709\u54ea\u4e9b\u662f\u53ef\u914d\u7f6e\u7684? \u4e00\u3001locale\u7684\u4e94\u810f\u516d\u8151 1\u3001 \u8bed\u8a00\u7b26\u53f7\u53ca\u5176\u5206\u7c7b(LC_CTYPE) 2\u3001 \u6570\u5b57(LC_NUMERIC) 3\u3001 \u6bd4\u8f83\u548c\u6392\u5e8f\u4e60\u60ef(LC_COLLATE) 4\u3001 \u65f6\u95f4\u663e\u793a\u683c\u5f0f(LC_TIME) 5\u3001 \u8d27\u5e01\u5355\u4f4d(LC_MONETARY) 6\u3001 \u4fe1\u606f\u4e3b\u8981\u662f\u63d0\u793a\u4fe1\u606f,\u9519\u8bef\u4fe1\u606f, \u72b6\u6001\u4fe1\u606f, \u6807\u9898, \u6807\u7b7e, \u6309\u94ae\u548c\u83dc\u5355\u7b49(LC_MESSAGES) 7\u3001 \u59d3\u540d\u4e66\u5199\u65b9\u5f0f(LC_NAME) 8\u3001 \u5730\u5740\u4e66\u5199\u65b9\u5f0f(LC_ADDRESS) 9\u3001 \u7535\u8bdd\u53f7\u7801\u4e66\u5199\u65b9\u5f0f(LC_TELEPHONE) 10\u3001\u5ea6\u91cf\u8861\u8868\u8fbe\u65b9\u5f0f(LC_MEASUREMENT) 11\u3001\u9ed8\u8ba4\u7eb8\u5f20\u5c3a\u5bf8\u5927\u5c0f(LC_PAPER) 12\u3001\u5bf9locale\u81ea\u8eab\u5305\u542b\u4fe1\u606f\u7684\u6982\u8ff0(LC_IDENTIFICATION)\u3002 \u4e8c\u3001\u7406\u89e3locale\u7684\u8bbe\u7f6e \u8bbe\u5b9alocale\u5c31\u662f\u8bbe\u5b9a12\u5927\u7c7b\u7684locale\u5206\u7c7b\u5c5e\u6027\uff0c\u5373 12\u4e2aLC_*\u3002\u9664\u4e86\u8fd912\u4e2a\u53d8\u91cf\u53ef\u4ee5\u8bbe\u5b9a\u4ee5\u5916\uff0c\u4e3a\u4e86\u7b80\u4fbf\u8d77\u89c1\uff0c\u8fd8\u6709\u4e24\u4e2a\u53d8\u91cf\uff1aLC_ALL\u548cLANG\u3002 \u5b83\u4eec\u4e4b\u95f4\u6709\u4e00\u4e2a\u4f18\u5148\u7ea7\u7684\u5173\u7cfb\uff1a LC_ALL > LC_* > LANG \u53ef\u4ee5\u8fd9\u4e48\u8bf4\uff0cLC_ALL\u662f\u6700\u4e0a\u7ea7\u8bbe\u5b9a\u6216\u8005\u5f3a\u5236\u8bbe\u5b9a\uff0c\u800cLANG\u662f\u9ed8\u8ba4\u8bbe\u5b9a\u503c\u3002 \u4e09\u3001Linux\u4e0b\u4e0d\u540c\u73af\u5883\u53d8\u91cf\u7684\u6548\u679c The following environment variables affect locale related behaviour of the system: \u73af\u5883\u53d8\u91cf \u8bf4\u660e LANG Determines the default locale in the absence of other locale related environment variables LANGUAGE List of fallback message translation languages (GNU only) LC_ADDRESS Convention used for formatting of street or postal addresses LC_ALL Overrides all other locale variables (except LANGUAGE) LC_COLLATE Collation order LC_CTYPE Character classification and case conversion LC_MONETARY Monetary formatting LC_MEASUREMENT Default measurement system used within the region LC_MESSAGES Format of interactive words and responses LC_NUMERIC Numeric formatting LC_PAPER Default paper size for region LC_RESPONSE Determines how responses (such as Yes and No) appear in the local language LC_TELEPHONE Conventions used for representation of telephone numbers LC_TIME Date and time formats \u901a\u8fc7\u4ec0\u4e48\u914d\u7f6e \u5728UNIX\u4e0b\uff0c\u901a\u5e38\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u6765\u63a7\u5236\u533a\u57df\u8bbe\u7f6e\u3002\u8fd9\u4e9b\u73af\u5883\u53d8\u91cf\u5305\u62ec\uff1a LC_ALL , LC_CTYPE , LC_TIME , \u7b49\u7b49\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u6539\u53d8\u8fd9\u4e9b\u73af\u5883\u53d8\u91cf\u6765\u63a7\u5236\u4f60\u7684\u7a0b\u5e8f\u6216\u8005\u547d\u4ee4\u6240\u8868\u73b0\u51fa\u6765\u7684\u533a\u57df\u8bbe\u7f6e\uff0c\u524d\u63d0\u662f\u8fd9\u4e9b\u7a0b\u5e8f\u6216\u8005\u547d\u4ee4\u5fc5\u987b\u662f\u5df2\u7ecf\u88ab\u56fd\u9645\u5316\u7684\u548c\u672c\u5730\u5316\u7684\u3002 \u6838\u5fc3\u94fe\u8def\uff1a 1 \u524d\u63d0\uff1a \u8f6f\u4ef6\u5df2\u7ecf\u652f\u6301\u56fd\u9645\u5316\u548c\u672c\u5730\u5316 2 \u7528\u6237\uff1a \u901a\u8fc7\u73af\u5883\u53d8\u91cf\u8bbe\u7f6e\uff0c\u6765\u9009\u62e9\u56fd\u9645\u5316\u754c\u9762\u6216\u8005\u672c\u5730\u5316\u754c\u9762 date\u547d\u4ee4\u7684\u4f8b\u5b50 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982date\u547d\u4ee4\uff0c\u652f\u6301\u56fd\u9645\u5316\u548c\u672c\u5730\u5316\uff0c\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u8bbe\u7f6e\uff0c\u6765\u9009\u62e9\u56fd\u9645\u5316\u6216\u8005\u672c\u5730\u5316\uff1a debian \u7cfb\u7edf\u4e2d\uff0c \u7cfb\u7edf\u5df2\u7ecf\u652f\u6301\u7684locale \u4f53\u73b0\u5728 /etc/locale.gen\u4e2d\uff0c\u53ef\u4ee5\u968f\u65f6\u8c03\u6574\uff08\u589e\u3001\u5220\u3001\u6539\u3001\u67e5\uff09\uff0c\u7136\u540e\u901a\u8fc7locale-gen\u547d\u4ee4\u751f\u6548 \u7136\u540e/etc/default/locale \u662f\u64cd\u4f5c\u7cfb\u7edf\u5c42\u9762\u7684\u9ed8\u8ba4\u8bbe\u7f6e. sshd\u670d\u52a1\u7684\u4f8b\u5b50 \u5bf9\u4e8esshd\u670d\u52a1\uff0c\u4ed6\u53ef\u4ee5\u8ba9ssh\u5ba2\u6237\u7aef\u53ef\u4ee5\u81ea\u5b9a\u4e49locale\u7684\u8bbe\u7f6e\uff0c\u6bd4\u5982\u6700\u91cd\u8981\u7684LANG\u53d8\u91cf. \u4e5f\u53ef\u4ee5\u8ba9\u5ba2\u6237\u7aef\u4e0d\u80fd\u81ea\u5b9a\u4e49locale\u8bbe\u7f6e\uff0c \u5982\u679c\u4e0d\u8ba9\u5ba2\u6237\u7aef\u81ea\u5b9a\u4e49locale\u8bbe\u7f6e\uff0c\u90a3\u4e48\u5728/etc/ssh/sshd_config\u4e2d\u53d6\u6d88\u6389\u76f8\u5173\u53d8\u91cf\u5373\u53ef \uff0c\u6bd4\u5982\u4e0d\u8ba9\u5ba2\u6237\u7aef\u81ea\u5b9a\u4e49LANG\u53d8\u91cf\uff1a \u8fd9\u91cc\u53bb\u6389LANG\u5373\u53ef","title":"\u7b2c\u516b\u7bc7 locale\u8bbe\u7f6e"},{"location":"chapter_7/8_locale/#_1","text":"\u672c\u7bc7\u7528\u4e8e\u68b3\u7406Linux Locale\u8bbe\u7f6e \u4ec0\u4e48\u662fLocale? locale \u5373\u533a\u57df\u8bbe\u7f6e\u3002 \u7528\u6237\u4f7f\u7528\u8be5\u8bbe\u7f6e\uff0c\u544a\u8bc9\u64cd\u4f5c\u7cfb\u7edf\u548c\u5e94\u7528\u8f6f\u4ef6\uff0c\u81ea\u5df1\u6240\u5904\u7684\u56fd\u5bb6\u3001\u5730\u533a\u3001\u6240\u4f7f\u7528\u7684\u8bed\u8a00\u3001\u8d27\u5e01\u73af\u5883\u7b49\u4fe1\u606f, \u5305\u62ec\u4f7f\u7528\u4ec0\u4e48 \u5b57\u7b26\u96c6\u548c\u7f16\u7801 .","title":"\u6982\u8ff0"},{"location":"chapter_7/8_locale/#_2","text":"\u4e00\u3001locale\u7684\u4e94\u810f\u516d\u8151 1\u3001 \u8bed\u8a00\u7b26\u53f7\u53ca\u5176\u5206\u7c7b(LC_CTYPE) 2\u3001 \u6570\u5b57(LC_NUMERIC) 3\u3001 \u6bd4\u8f83\u548c\u6392\u5e8f\u4e60\u60ef(LC_COLLATE) 4\u3001 \u65f6\u95f4\u663e\u793a\u683c\u5f0f(LC_TIME) 5\u3001 \u8d27\u5e01\u5355\u4f4d(LC_MONETARY) 6\u3001 \u4fe1\u606f\u4e3b\u8981\u662f\u63d0\u793a\u4fe1\u606f,\u9519\u8bef\u4fe1\u606f, \u72b6\u6001\u4fe1\u606f, \u6807\u9898, \u6807\u7b7e, \u6309\u94ae\u548c\u83dc\u5355\u7b49(LC_MESSAGES) 7\u3001 \u59d3\u540d\u4e66\u5199\u65b9\u5f0f(LC_NAME) 8\u3001 \u5730\u5740\u4e66\u5199\u65b9\u5f0f(LC_ADDRESS) 9\u3001 \u7535\u8bdd\u53f7\u7801\u4e66\u5199\u65b9\u5f0f(LC_TELEPHONE) 10\u3001\u5ea6\u91cf\u8861\u8868\u8fbe\u65b9\u5f0f(LC_MEASUREMENT) 11\u3001\u9ed8\u8ba4\u7eb8\u5f20\u5c3a\u5bf8\u5927\u5c0f(LC_PAPER) 12\u3001\u5bf9locale\u81ea\u8eab\u5305\u542b\u4fe1\u606f\u7684\u6982\u8ff0(LC_IDENTIFICATION)\u3002 \u4e8c\u3001\u7406\u89e3locale\u7684\u8bbe\u7f6e \u8bbe\u5b9alocale\u5c31\u662f\u8bbe\u5b9a12\u5927\u7c7b\u7684locale\u5206\u7c7b\u5c5e\u6027\uff0c\u5373 12\u4e2aLC_*\u3002\u9664\u4e86\u8fd912\u4e2a\u53d8\u91cf\u53ef\u4ee5\u8bbe\u5b9a\u4ee5\u5916\uff0c\u4e3a\u4e86\u7b80\u4fbf\u8d77\u89c1\uff0c\u8fd8\u6709\u4e24\u4e2a\u53d8\u91cf\uff1aLC_ALL\u548cLANG\u3002 \u5b83\u4eec\u4e4b\u95f4\u6709\u4e00\u4e2a\u4f18\u5148\u7ea7\u7684\u5173\u7cfb\uff1a LC_ALL > LC_* > LANG \u53ef\u4ee5\u8fd9\u4e48\u8bf4\uff0cLC_ALL\u662f\u6700\u4e0a\u7ea7\u8bbe\u5b9a\u6216\u8005\u5f3a\u5236\u8bbe\u5b9a\uff0c\u800cLANG\u662f\u9ed8\u8ba4\u8bbe\u5b9a\u503c\u3002 \u4e09\u3001Linux\u4e0b\u4e0d\u540c\u73af\u5883\u53d8\u91cf\u7684\u6548\u679c The following environment variables affect locale related behaviour of the system: \u73af\u5883\u53d8\u91cf \u8bf4\u660e LANG Determines the default locale in the absence of other locale related environment variables LANGUAGE List of fallback message translation languages (GNU only) LC_ADDRESS Convention used for formatting of street or postal addresses LC_ALL Overrides all other locale variables (except LANGUAGE) LC_COLLATE Collation order LC_CTYPE Character classification and case conversion LC_MONETARY Monetary formatting LC_MEASUREMENT Default measurement system used within the region LC_MESSAGES Format of interactive words and responses LC_NUMERIC Numeric formatting LC_PAPER Default paper size for region LC_RESPONSE Determines how responses (such as Yes and No) appear in the local language LC_TELEPHONE Conventions used for representation of telephone numbers LC_TIME Date and time formats","title":"\u6709\u54ea\u4e9b\u662f\u53ef\u914d\u7f6e\u7684?"},{"location":"chapter_7/8_locale/#_3","text":"\u5728UNIX\u4e0b\uff0c\u901a\u5e38\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u6765\u63a7\u5236\u533a\u57df\u8bbe\u7f6e\u3002\u8fd9\u4e9b\u73af\u5883\u53d8\u91cf\u5305\u62ec\uff1a LC_ALL , LC_CTYPE , LC_TIME , \u7b49\u7b49\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u6539\u53d8\u8fd9\u4e9b\u73af\u5883\u53d8\u91cf\u6765\u63a7\u5236\u4f60\u7684\u7a0b\u5e8f\u6216\u8005\u547d\u4ee4\u6240\u8868\u73b0\u51fa\u6765\u7684\u533a\u57df\u8bbe\u7f6e\uff0c\u524d\u63d0\u662f\u8fd9\u4e9b\u7a0b\u5e8f\u6216\u8005\u547d\u4ee4\u5fc5\u987b\u662f\u5df2\u7ecf\u88ab\u56fd\u9645\u5316\u7684\u548c\u672c\u5730\u5316\u7684\u3002","title":"\u901a\u8fc7\u4ec0\u4e48\u914d\u7f6e"},{"location":"chapter_7/8_locale/#_4","text":"1 \u524d\u63d0\uff1a \u8f6f\u4ef6\u5df2\u7ecf\u652f\u6301\u56fd\u9645\u5316\u548c\u672c\u5730\u5316 2 \u7528\u6237\uff1a \u901a\u8fc7\u73af\u5883\u53d8\u91cf\u8bbe\u7f6e\uff0c\u6765\u9009\u62e9\u56fd\u9645\u5316\u754c\u9762\u6216\u8005\u672c\u5730\u5316\u754c\u9762","title":"\u6838\u5fc3\u94fe\u8def\uff1a"},{"location":"chapter_7/8_locale/#date","text":"\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982date\u547d\u4ee4\uff0c\u652f\u6301\u56fd\u9645\u5316\u548c\u672c\u5730\u5316\uff0c\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u8bbe\u7f6e\uff0c\u6765\u9009\u62e9\u56fd\u9645\u5316\u6216\u8005\u672c\u5730\u5316\uff1a debian \u7cfb\u7edf\u4e2d\uff0c \u7cfb\u7edf\u5df2\u7ecf\u652f\u6301\u7684locale \u4f53\u73b0\u5728 /etc/locale.gen\u4e2d\uff0c\u53ef\u4ee5\u968f\u65f6\u8c03\u6574\uff08\u589e\u3001\u5220\u3001\u6539\u3001\u67e5\uff09\uff0c\u7136\u540e\u901a\u8fc7locale-gen\u547d\u4ee4\u751f\u6548 \u7136\u540e/etc/default/locale \u662f\u64cd\u4f5c\u7cfb\u7edf\u5c42\u9762\u7684\u9ed8\u8ba4\u8bbe\u7f6e.","title":"date\u547d\u4ee4\u7684\u4f8b\u5b50"},{"location":"chapter_7/8_locale/#sshd","text":"\u5bf9\u4e8esshd\u670d\u52a1\uff0c\u4ed6\u53ef\u4ee5\u8ba9ssh\u5ba2\u6237\u7aef\u53ef\u4ee5\u81ea\u5b9a\u4e49locale\u7684\u8bbe\u7f6e\uff0c\u6bd4\u5982\u6700\u91cd\u8981\u7684LANG\u53d8\u91cf. \u4e5f\u53ef\u4ee5\u8ba9\u5ba2\u6237\u7aef\u4e0d\u80fd\u81ea\u5b9a\u4e49locale\u8bbe\u7f6e\uff0c \u5982\u679c\u4e0d\u8ba9\u5ba2\u6237\u7aef\u81ea\u5b9a\u4e49locale\u8bbe\u7f6e\uff0c\u90a3\u4e48\u5728/etc/ssh/sshd_config\u4e2d\u53d6\u6d88\u6389\u76f8\u5173\u53d8\u91cf\u5373\u53ef \uff0c\u6bd4\u5982\u4e0d\u8ba9\u5ba2\u6237\u7aef\u81ea\u5b9a\u4e49LANG\u53d8\u91cf\uff1a \u8fd9\u91cc\u53bb\u6389LANG\u5373\u53ef","title":"sshd\u670d\u52a1\u7684\u4f8b\u5b50"},{"location":"chapter_7/9_http_protocol/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3http\u534f\u8bae\u76f8\u5173\u90e8\u5206 http\u5404\u4e2a\u7248\u672c\u534f\u8bae\u7684\u8fdb\u5316\u5386\u7a0b \u9996\u5148\u6765\u5f20\u6574\u4f53\u7684\u8bf4\u660e\u56fe HTTP/1.0 \u5230 HTTP/1.1 1 \u65e9\u671f HTTP/1.0 \u6027\u80fd\u4e0a\u7684\u4e00\u4e2a\u5f88\u5927\u7684\u95ee\u9898\uff0c\u90a3\u5c31\u662f\u6bcf\u53d1\u8d77\u4e00\u4e2a\u8bf7\u6c42\uff0c\u90fd\u8981\u65b0\u5efa\u4e00\u6b21 TCP \u8fde\u63a5(\u4e09\u6b21\u63e1\u624b)\uff0c\u800c\u4e14\u662f \u4e32\u884c\u8bf7\u6c42\uff0c\u505a\u4e86\u65e0\u8c13\u7684 TCP \u8fde\u63a5\u5efa\u7acb\u548c\u65ad\u5f00\uff0c\u589e\u52a0\u4e86\u901a\u4fe1\u5f00\u9500\u3002 \u4e3a\u4e86\u89e3\u51b3\u4e0a\u8ff0 TCP \u8fde\u63a5\u95ee\u9898\uff0cHTTP/1.1 \u63d0\u51fa\u4e86 \u2ed3\u8fde\u63a5 \u7684\u901a\u4fe1\u65b9\u5f0f\uff0c\u4e5f\u53eb \u6301\u4e45\u8fde\u63a5 \u3002\u8fd9\u79cd\u65b9\u5f0f\u7684\u597d\u5904\u5728\u4e8e\u51cf\u5c11\u4e86 TCP \u8fde\u63a5\u7684\udbff\udc00\u590d\u5efa\u7acb\u548c\u65ad\u5f00\u6240\u9020\u6210\u7684\u989d\u5916\u5f00\u9500\uff0c\u51cf\u8f7b\u4e86\u670d\u52a1\u5668\u7aef\u7684\u8d1f\u8f7d\u3002 \u6301\u4e45\u8fde\u63a5\u7684\u7279\u70b9\u662f\uff0c\u53ea\u8981\u4efb\u610f\u4e00\u7aef\u6ca1\u6709\u660e\u786e\u63d0\u51fa\u65ad\u5f00\u8fde\u63a5\uff0c\u5219\u4fdd\u6301 TCP \u8fde\u63a5\u72b6\u6001\u3002 2 HTTP/1.0 \u4e0d\u652f\u6301pipeline , HTTP/1.1 \u652f\u6301 3 HTTP/1.0 \u67097\u5c42\u548c4\u5c42\u7684\u961f\u5934\u963b\u585e\u95ee\u9898 HTTP/1.1\u89e3\u51b3\u4e867\u5c42\u7684\u961f\u5934\u963b\u585e\u95ee\u9898. \u56e0\u4e3ahttp\u534f\u8bae\u662f \u300c\u8bf7\u6c42 - \u5e94\u7b54\u300d \u6a21\u5f0f. \u5f53\u987a\u5e8f\u53d1\u9001\u7684\u8bf7\u6c42\u5e8f\u5217\u4e2d\u7684\u4e00\u4e2a\u8bf7\u6c42\u56e0\u4e3a\u67d0\u79cd\u539f\u56e0\u88ab\u963b\u585e\u65f6\uff0c\u5728\u540e\u9762\u6392\u961f\u7684\u6240\u6709\u8bf7\u6c42\u4e5f\u4e00\u540c\u88ab\u963b\u585e\u4e86\uff0c\u4f1a\u62db\u81f4 \u5ba2\u6237\u7aef\u4e00\u76f4\u8bf7\u6c42\u4e0d\u5230\u6570\u636e\uff0c\u8fd9\u4e5f\u5c31\u662f \u300c\u961f\u5934\u963b\u585e\u300d \u3002\u597d\u6bd4\u4e0a\u73ed\u7684\u8def\u4e0a\u585e\u2ecb\u3002 \u603b\u4e4b HTTP/1.1 \u7684\u6027\u80fd\u4e00\u822c\u822c\uff0c\u540e\u7eed\u7684 HTTP/2 \u548c HTTP/3 \u5c31\u662f\u5728\u4f18\u5316 HTTP \u7684\u6027\u80fd\u3002 HTTP/1.1 \u5230 HTTP/2 HTTP/1.1 \u6709\u4e24\u4e2a\u4e3b\u8981\u7684\u7f3a\u70b9\uff1a \u5b89\u5168\u4e0d\u8db3 \u548c \u6027\u80fd\u4e0d\u9ad8 1 \u5934\u90e8\u538b\u7f29 HTTP/2 \u4f1a\u538b\u7f29\u5934(Header)\u5982\u679c\u4f60\u540c\u65f6\u53d1\u51fa\u591a\u4e2a\u8bf7\u6c42\uff0c\u4ed6\u4eec\u7684\u5934\u662f\u4e00\u6837\u7684\u6216\u662f\u76f8\u4f3c\u7684\uff0c\u90a3\u4e48\uff0c\u534f\u8bae\u4f1a\u5e2e\u4f60\u6d88\u9664\u91cd \u590d\u7684\u90e8\u5206\u3002 \u8fd9\u5c31\u662f\u6240\u8c13\u7684 HPACK \u7b97\u6cd5 :\u5728\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u540c\u65f6\u7ef4\u62a4\u4e00\u5f20 \u5934\u4fe1\u606f\u8868 \uff0c\u6240\u6709\u5b57\u6bb5\u90fd\u4f1a\u5b58\u5165\u8fd9\u4e2a\u8868\uff0c\u751f\u6210\u4e00\u4e2a \u7d22\u5f15\u53f7 \uff0c\u4ee5\u540e\u5c31\u4e0d\u53d1\u9001\u540c\u6837\u5b57\u6bb5\u4e86\uff0c\u53ea\u53d1\u9001 \u7d22\u5f15\u53f7 \uff0c\u8fd9\u6837\u5c31\u63d0\u9ad8\u901f\u5ea6\u4e86\u3002 2 \u4e8c\u8fdb\u5236\u5206\u5e27(\u51cf\u5c11\u4e8c\u8fdb\u5236\u8f6c\u5316\u4e3a\u660e\u6587\u73af\u8282) \u9996\u5148\uff0cHTTP2 \u6ca1\u6709\u6539\u53d8 HTTP1 \u7684\u8bed\u4e49\uff0c\u53ea\u662f\u5728\u5e94\u7528\u5c42\u4f7f\u7528\u4e8c\u8fdb\u5236\u5206\u5e27\u65b9\u5f0f\u4f20\u8f93\u3002\u56e0\u6b64\uff0c\u4e5f\u5f15\u5165\u4e86\u65b0\u7684\u901a\u4fe1\u5355\u4f4d\uff1a \u5e27 \u3001 \u6d88\u606f \u3001 \u6d41 \u3002 HTTP/2 \u4e0d\u518d\u50cf HTTP/1.1 \u91cc\u7684\u7eaf\u6587\u672c\u5f62\u5f0f\u7684\u62a5\u6587\uff0c\u800c\u662f\u5168\u9762\u91c7\u7528\u4e86\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u5934\u4fe1\u606f\u548c\u6570\u636e\u4f53\u90fd\u662f\u4e8c\u8fdb\u5236\uff0c\u5e76 \u4e14\u7edf\u79f0\u4e3a\u5e27(frame): \u5934\u4fe1\u606f\u5e27 \u548c \u6570\u636e\u5e27 \u3002 \u6536\u5230\u62a5\u6587\u540e\uff0c\u65e0\u9700\u518d\u5c06\u660e\u6587\u7684\u62a5\u6587\u8f6c \u6210\u4e8c\u8fdb\u5236\uff0c\u800c\u662f\u76f4\u63a5\u89e3\u6790\u4e8c\u8fdb\u5236\u62a5\u6587\uff0c\u8fd9\u589e\u52a0\u4e86 \u6570\u636e\u4f20\u8f93\u7684\u6548\u7387 . 2.1 \u4e3a\u4ec0\u4e48\u8981\u4e8c\u8fdb\u5236\u5206\u5e27 2.1.1 \u8ba1\u7b97\u673a\u5c42\u9762\u65e0\u9700\u518d\u5c06\u4e8c\u8fdb\u5236\u8f6c\u5316\u4e3a\u660e\u6587, \u63d0\u5347\u6570\u636e\u7684\u5904\u7406\u6548\u7387. 2.1.2 \u6700\u91cd\u8981\u7684\u662f\uff0c\u4e3a \u591a\u8def\u590d\u7528 \u63d0\u4f9b\u4e86\u5e95\u5c42\u652f\u6301\u3002 3 \u6570\u636e\u6d41 HTTP/2 \u7684\u6570\u636e\u5305\u4e0d\u662f\u6309\u987a\u5e8f\u53d1\u9001\u7684\uff0c\u540c\u4e00\u4e2a\u8fde\u63a5\u91cc\u9762\u8fde\u7eed\u7684\u6570\u636e\u5305\uff0c\u53ef\u80fd\u5c5e\u4e8e\u4e0d\u540c\u7684\u56de\u5e94\u3002\u56e0\u6b64\uff0c\u5fc5\u987b\u8981\u5bf9\u6570\u636e\u5305\u505a\u6807\u8bb0\uff0c\u6307\u51fa\u5b83\u5c5e\u4e8e\u54ea\u4e2a\u56de\u5e94\u3002 \u6bcf\u4e2a\u8bf7\u6c42\u6216\u56de\u5e94\u7684\u6240\u6709\u6570\u636e\u5305\uff0c\u79f0\u4e3a\u4e00\u4e2a\u6570\u636e\u6d41( Stream ) \u3002\u6bcf\u4e2a \u6570\u636e\u6d41 \u90fd\u6807\u8bb0\u7740\u4e00\u4e2a\u72ec\u4e00\u65e0\u4e8c\u7684\u7f16\u53f7\uff0c\u5176\u4e2d\u89c4\u5b9a \u5ba2\u6237\u7aef\u53d1\u51fa\u7684\u6570\u636e\u6d41\u7f16\u53f7\u4e3a\u5947\u6570 \uff0c \u670d\u52a1\u5668\u53d1\u51fa\u7684\u6570\u636e\u6d41\u7f16\u53f7\u4e3a\u5076\u6570 \u5ba2\u6237\u7aef\u8fd8\u53ef\u4ee5\u6307\u5b9a\u6570\u636e\u6d41\u7684\u4f18\u5148\u7ea7\u3002\u4f18\u5148\u7ea7\u9ad8\u7684\u8bf7\u6c42\uff0c\u670d\u52a1\u5668\u5c31\u5148\u54cd\u5e94\u8be5\u8bf7\u6c42\u3002 4 \u4ec0\u4e48\u662f\u591a\u8def\u590d\u7528 \u4e00\u4e2a\u57df\u540d\u5bf9\u5e94\u4e00\u4e2a\u8fde\u63a5 \uff0c\u4e00\u4e2a \u6d41 \u4ee3\u8868\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684 \u8bf7\u6c42-\u54cd\u5e94 \u8fc7\u7a0b\u3002\u5e27\u662f\u6700\u5c0f\u7684\u6570\u636e\u5355\u4f4d\uff0c\u6bcf\u4e2a\u5e27\u4f1a\u6807\u8bc6\u51fa\u8be5\u5e27\u5c5e\u4e8e\u54ea\u4e2a \u6d41 \uff0c \u6d41 \u4e5f\u5c31\u662f\u591a\u4e2a\u5e27\u7ec4\u6210\u7684 \u6570\u636e\u6d41 \u3002\u591a\u8def\u590d\u7528\uff0c\u5c31\u662f\u5728\u4e00\u4e2a TCP \u8fde\u63a5\u4e2d\u53ef\u4ee5\u5b58\u5728\u591a\u4e2a \u6d41 \u3002 HTTP/2 \u662f\u53ef\u4ee5\u5728 \u4e00\u4e2a\u8fde\u63a5\u4e2d\u5e76\u53d1\u591a\u4e2a\u8bf7\u6c42\u6216\u56de\u5e94\uff0c\u800c\u4e0d\u7528\u6309\u7167\u987a\u5e8f\u4e00\u4e00\u5bf9\u5e94 \u3002 \u79fb\u9664\u4e86 HTTP/1.1 \u4e2d\u7684\u4e32\u884c\u8bf7\u6c42\uff0c\u4e0d\u9700\u8981\u6392\u961f\u7b49\u5f85\uff0c\u4e5f\u5c31\u4e0d\u4f1a\u518d\u51fa\u73b07\u5c42 \u300c\u961f\u5934\u963b\u585e\u300d \u95ee\u9898\uff0c\u964d\u4f4e\u4e86\u5ef6\u8fdf\uff0c\u5927\u5e45\u5ea6\u63d0\u9ad8\u4e86\u8fde\u63a5\u7684\u5229\u7528\u7387\u3002 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u5728\u4e00\u4e2a TCP \u8fde\u63a5\u91cc\uff0c\u670d\u52a1\u5668\u6536\u5230\u4e86\u5ba2\u6237\u7aef A \u548c B \u7684\u4e24\u4e2a\u8bf7\u6c42\uff0c\u5982\u679c\u53d1\u73b0 A \u5904\u7406\u8fc7\u7a0b\u975e\u5e38\u8017\u65f6\uff0c\u4e8e\u662f\u5c31 \u56de\u5e94 A \u8bf7\u6c42\u5df2\u7ecf\u5904\u7406\u597d\u7684\u90e8\u5206\uff0c\u63a5\u7740\u56de\u5e94 B \u8bf7\u6c42\uff0c\u5b8c\u6210\u540e\uff0c\u518d\u56de\u5e94 A \u8bf7\u6c42\u5269\u4e0b\u7684\u90e8\u5206\u3002 5 \u670d\u52a1\u5668\u63a8\u9001 HTTP/2 \u8fd8\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u6539\u5584\u4e86\u4f20\u7edf\u7684 \u300c\u8bf7\u6c42 - \u5e94\u7b54\u300d \u5de5\u4f5c\u6a21\u5f0f\uff0c\u670d\u52a1\u4e0d\u518d\u662f\u88ab\u52a8\u5730\u54cd\u5e94\uff0c\u4e5f\u53ef\u4ee5\u4e3b\u52a8\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u6d88\u606f\u3002 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u5728\u6d4f\u89c8\u5668\u521a\u8bf7\u6c42 HTML \u7684\u65f6\u5019\uff0c\u5c31\u63d0\u524d\u628a\u53ef\u80fd\u4f1a\u7528\u5230\u7684 JS\u3001CSS \u6587\u4ef6\u7b49\u9759\u6001\u8d44\u6e90\u4e3b\u52a8\u53d1\u7ed9\u5ba2\u6237\u7aef\uff0c\u51cf\u5c11\u5ef6\u65f6\u7684\u7b49\u5f85\uff0c\u4e5f\u5c31\u662f\u670d\u52a1\u5668\u63a8\u9001(Server Push\uff0c\u4e5f\u53eb Cache Push)\u3002 HTTP/2 \u5230 HTTP/3 1 HTTP/2\u5b58\u5728\u7684\u95ee\u9898 HTTP2 \u7684\u7f3a\u9677 - 1 TCP \u4ee5\u53ca TCP+TLS \u5efa\u7acb\u8fde\u63a5\u7684\u5ef6\u65f6 2 TCP(4\u5c42)\u7684\u961f\u5934\u963b\u585e\u5e76\u6ca1\u6709\u5f7b\u5e95\u89e3\u51b3 2 HTTP/3 \u5982\u4f55\u6539\u8fdb 2.1 HTTP/2 \u5efa\u8fde\u5ef6\u65f6 TCP \u8fde\u63a5\u9700\u8981\u548c\u670d\u52a1\u5668\u8fdb\u884c\u4e09\u6b21\u63e1\u624b\uff0c\u5373\u6d88\u8017\u5b8c 1.5 \u4e2a RTT \u4e4b\u540e\u624d\u80fd\u8fdb\u884c\u6570\u636e\u4f20\u8f93\u3002 TLS \u8fde\u63a5\u6709\u4e24\u4e2a\u7248\u672c\u2014\u2014 TLS1.2 \u548c TLS1.3\uff0c\u6bcf\u4e2a\u7248\u672c\u5efa\u7acb\u8fde\u63a5\u6240\u82b1\u7684\u65f6\u95f4\u4e0d\u540c\uff0c\u5927\u81f4\u9700\u8981 1~2 \u4e2a RTT\u3002 RTT\uff08Round-Trip Time\uff09:\u5f80\u8fd4\u65f6\u5ef6\u3002\u8868\u793a\u4ece\u53d1\u9001\u7aef\u53d1\u9001\u6570\u636e\u5f00\u59cb\uff0c\u5230\u53d1\u9001\u7aef\u6536\u5230\u6765\u81ea\u63a5\u6536\u7aef\u7684\u786e\u8ba4\uff08\u63a5\u6536\u7aef\u6536\u5230\u6570\u636e\u540e\u4fbf\u7acb\u5373\u53d1\u9001\u786e\u8ba4\uff09\uff0c\u603b\u5171\u7ecf\u5386\u7684\u65f6\u5ef6\u3002 2.2 HTTP/3 \u6539\u8fdb HTTPS \u8981\u5efa\u7acb\u4e00\u4e2a\u8fde\u63a5\uff0c\u8981\u82b1\u8d39 6 \u6b21\u4ea4\u4e92\uff0c\u5148\u662f\u5efa\u7acb\u4e09\u6b21\u63e1\u624b\uff0c\u7136\u540e\u662f TLS/1.3 \u7684\u4e09\u6b21\u63e1\u624b\u3002QUIC\u76f4\u63a5\u628a\u4ee5\u5f80\u7684 TCP \u548c TLS/1.3 \u7684 6 \u6b21\u4ea4\u4e92\u5408\u5e76\u6210\u4e86 3 \u6b21\uff0c\u51cf\u5c11\u4e86\u4ea4\u4e92\u6b21\u6570\u3002 2.2 HTTP/2 4\u5c42\u961f\u5934\u963b\u585e\u95ee\u9898\u6ca1\u6709\u5f7b\u5e95\u89e3\u51b3 \u4e3a\u4ec0\u4e48\u5462? \u5f88\u7b80\u5355\u5e94\u7528\u5c42\u901a\u8fc7 \u6570\u636e\u6d41Stream \u6765\u8fdb\u884c\u4ea4\u4e92, 4\u5c42\u6839\u672c\u4e0d\u5173\u5fc3\u4e0a\u5c42. \u56e0\u6b64\u4e00\u65e6\u51fa\u73b04\u5c42\u4e22\u5305, \u6bd4\u5982 \u4e00\u51717\u4e2a\u5305 1,2,3,4,5,6,7 , 4 \u8fd9\u4e2a\u5305\u4e22\u4e86, \u90a3\u4e48\u5ba2\u6237\u7aef\u53ef\u4ee5\u9009\u62e9\u786e\u8ba43, \u7136\u540e\u670d\u52a1\u5668\u4e5f\u53ef\u4ee5\u53ea\u91cd\u4f20 4 , \u4f46\u662f\u5ba2\u6237\u7aef\u8fd9\u8fb9\u53ea\u80fd\u5411\u4e0a\u5c42\u4ea4\u4ed8 1,2,3 \u91cc\u5305\u542b\u7684\u5e94\u7528\u6570\u636e, 4\u30015\u30016\u30017 \u5fc5\u987b\u7b49 4 \u91cd\u4f20\u56de\u6765\u4e86\u624d\u80fd\u5f80\u4e0a\u5c42\u4ea4\u4ed8. \u8fd9\u5c31\u662f\u5206\u5c42\u5e26\u6765\u7684\u95ee\u9898. QUIC\u600e\u4e48\u89e3\u51b3? \u5f88\u7b80\u5355\u5c31\u662f\u5f534\u5c42\u4e22\u5305\u65f6,\u4e0a\u5c42\u77e5\u9053\u662f\u54ea\u4e2a Stream \u4e22\u7684\u5305. \u56e0\u6b64\u53ef\u4ee5\u5148\u5904\u7406\u6ca1\u6709\u53d1\u751f\u4e22\u5305\u7684 Stream . \u5e26\u6765\u4ec0\u4e48\u95ee\u9898? \u5bf9\u4e8e\u4e0d\u652f\u6301QUIC\u534f\u8bae\u7684\u7f51\u7edc\u8bbe\u5907\u3001\u8ba1\u7b97\u673a, \u5c31\u53ea\u80fd\u5f53UDP\u6765\u5904\u7406. 3 HTTP/3 \u5176\u4ed6\u7684\u4e00\u4e9b\u6539\u8fdb TLS3 \u5347\u7ea7\u6210\u4e86\u6700\u65b0\u7684 1.3 \u7248\u672c(\u539f\u6765\u662f\u6709 1.2 \u548c 1.3 \u7248\u672c)\uff0c\u5934\u90e8\u538b\u7f29\u7b97\u6cd5\u4e5f\u5347\u7ea7\u6210\u4e86 QPack \u3002 \u4ec0\u4e48Pipeline\u548c WebSocket HTTP pipeline\u4ecb\u7ecd http\u7ba1\u7ebf\u5316\u662f\u4e00\u9879\u5b9e\u73b0\u4e86\u591a\u4e2ahttp\u8bf7\u6c42\u4e0d\u9700\u8981\u7b49\u5f85\u76f8\u5e94\u7684\u5e94\u7b54\u5c31\u80fd\u591f\u5199\u8fdb\u540c\u4e00\u4e2asocket\u7684\u6280\u672f.\u4ec5\u6709http1.1\u89c4\u8303\u652f\u6301http\u7ba1\u7ebf\u5316,1.0\u5e76\u4e0d\u652f\u6301. \u91c7\u7528\u7ba1\u7ebf\u5316\u7684\u8bf7\u6c42\u4f1a\u5bf9\u9875\u9762\u8f7d\u5165\u65f6\u95f4\u4ea7\u751f\u52a8\u6001\u7684\u63d0\u9ad8.\u5c24\u5176\u662f\u5f53\u901a\u8fc7\u9ad8\u5ef6\u8fdf\u7684\u7f51\u7edc,\u4f8b\u5982\u901a\u8fc7\u536b\u661f\u7f51\u7edc\u8fde\u63a5. \u5373\u4f7f\u901a\u5e38\u60c5\u51b5\u4e0b,\u53ef\u4ee5\u901a\u8fc7\u540c\u4e00\u4e2atcp\u6570\u636e\u5305\u53d1\u9001\u591a\u4e2ahttp\u8bf7\u6c42,http\u7ba1\u7ebf\u5316\u5411\u7f51\u7edc\u4e0a\u53d1\u9001\u66f4\u5c11\u7684tcp\u6570\u636e\u5305,\u4ee5\u4fbf\u51cf\u8f7b\u7f51\u7edc\u8d1f\u8f7d. \u53ea\u6709\u5e42\u7b49\u7684\u8bf7\u6c42\u80fd\u591f\u88ab\u7ba1\u7ebf\u5316 ,\u4f8b\u5982get\u548chead\u8bf7\u6c42.post\u8bf7\u6c42\u4e0d\u5e94\u8be5\u88ab\u7ba1\u7ebf\u5316.\u65b0\u5efa\u7acb\u8fde\u63a5\u4e0a\u7684\u8bf7\u6c42\u56e0\u4e3a\u65e0\u6cd5\u5224\u65ad\u6e90\u670d\u52a1\u5668(\u4ee3\u7406\u670d\u52a1\u5668)\u662f\u5426\u652f\u6301http1.1\u534f\u8bae,\u4e5f\u4e0d\u5e94\u8be5\u88ab\u7ba1\u7ebf\u5316\u5904\u7406.\u6240\u4ee5,\u4ec5\u5728\u91cd\u7528\u5df2\u7ecf\u6210\u529f\u5efa\u7acb\u7684\u6301\u4e45\u5316\u8fde\u63a5\u7684\u60c5\u51b5\u4e0b,\u624d\u53ef\u4ee5\u4f7f\u7528\u7ba1\u7ebf\u5316. Keepalive \u548c Pipeline \u548c WebSocket\u6bd4\u8f83 \u540d\u79f0 \u539f\u7406\u7b80\u8ff0 \u5b9e\u8df5\uff08\u5e38\u7528\u8f6f\u4ef6\u76f8\u5173\u5b9e\u8df5\uff09 http keepalive \u5728\u540c\u4e00\u4e2atcp\u8fde\u63a5\u4e0a\uff0c\u8fdb\u884c\u591a\u6b21http\u8bf7\u6c42\u548c\u54cd\u5e94\u3002\u907f\u514d\u6bcf\u4e00\u4e2ahttp\u8d44\u6e90\uff0c\u90fd\u8981\u5efa\u7acb\u4e00\u6b21tcp\u8fde\u63a5\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cNGINX\u3001Apache\u7b49\u90fd\u652f\u6301 http pipeline(\u7ba1\u7ebf\u5316) \u5728\u540c\u4e00\u4e2atcp\u8fde\u63a5\u4e0a\uff0c\u5bf9pipeline\u6765\u8bf4\uff0c\u5ba2\u6237\u7aef\u4e0d\u5fc5\u7b49\u5230\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u5904\u7406\u5b8c\u540e\uff0c\u5c31\u53ef\u4ee5\u9a6c\u4e0a\u53d1\u8d77\u7b2c\u4e8c\u4e2a\u8bf7\u6c42\u3002\u5f97\u5230\u4e24\u4e2a\u54cd\u5e94\u7684\u65f6\u95f4\u53ef\u80fd\u80fd\u591f\u8fbe\u52301RTT\u3002 \u53ea\u6709http 1.1\u624d\u652f\u6301,http 1.0\u4e0d\u652f\u6301\u3002NGINX\u9ed8\u8ba4\u652f\u6301http pipeline websocket \u89e3\u51b3http\u534f\u8bae\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7684\u201c\u88ab\u52a8\u6027\u201d\uff0c\u4e5f\u5c31\u662f\u53ea\u80fd\u5ba2\u6237\u7aef\u53d1\u8d77\u8bf7\u6c42\uff0c\u670d\u52a1\u5668\u54cd\u5e94\u3002\u670d\u52a1\u5668\u4e0d\u80fd\u4e3b\u52a8\u53d1\u6d88\u606f\u7ed9\u5ba2\u6237\u7aef\u3002 \u7c7b\u4f3cJava Socket\uff0c\u7531Http\u8bf7\u6c42\u6a21\u62df\u5b9e\u73b0\u7684socket\u3002 http\u5404\u4e2aheader\u542b\u4e49\u5927\u96c6\u5408 SSL\u534f\u8bae\u63e1\u624b\u8fc7\u7a0b 1 \u603b\u4f53\u8bf4\u660e ssl/tls\u534f\u8bae\uff0c\u603b\u4f53\u52062\u4e2a\u9636\u6bb5\uff1a \u9636\u6bb5 \u8bf4\u660e 1 \u8eab\u4efd\u9a8c\u8bc1\u9636\u6bb5\uff08\u63e1\u624b\u9636\u6bb5\uff09 \u91c7\u7528\u975e\u5bf9\u79f0\u52a0\u5bc6 2 \u6570\u636e\u4f20\u8f93\u9636\u6bb5 \u91c7\u7528\u5bf9\u79f0\u52a0\u5bc6 2 \u7ec6\u52064\u4e2a\u9636\u6bb5 2.1 Client Hello 2.2 Server Hello 2.3 \u5ba2\u6237\u7aef\u56de\u5e94 2.4 \u670d\u52a1\u7aef\u56de\u5e94 2.5 \u5c0f\u7ed3 \u4e00\u4e9b\u5b9e\u6218\u6280\u5de7 \u7edf\u8ba1\u6574\u4e2ahttp\u8def\u5f84\u4e2d\u5404\u4e2a\u9636\u6bb5\u7684\u8017\u65f6, \u660e\u786e\u670d\u52a1\u5668\u5904\u7406\u8017\u65f6\u3001\u7f51\u7edc\u4f20\u8f93\u8017\u65f6 curl \u6307\u4ee4\u662f\u4e00\u4e2a\u529f\u80fd\u975e\u5e38\u5f3a\u5927\u7684\u6307\u4ee4\uff0c\u4e5f\u53ef\u4ee5\u7edf\u8ba1 HTTP \u8bf7\u6c42\u5404\u4e2a\u9636\u6bb5\u7684\u8017\u65f6\uff0c\u4f7f\u7528\u5982\u4e0b\uff1a curl -o /dev/null -s -w \"time_namelookup: %{time_namelookup}\\ntime_connect: %{time_connect}\\ntime_appconnect: %{time_appconnect}\\ntime_redirect: %{time_redirect}\\ntime_pretransfer: %{time_pretransfer}\\ntime_starttransfer: %{time_starttransfer}\\ntime_total: %{time_total}\\n\" \"https://www.baidu.com\" \u53c2\u6570\u89e3\u6790\uff1a -o /dev/null \u628a\u8fd4\u56de\u503c\u4e22\u6389\uff0c\u4e0d\u7528\u8f93\u51fa -s \u9759\u9ed8\u8f93\u51fa\uff0c\u4e0d\u8f93\u51fa\u8fdb\u5ea6\u6761 -w \u6309\u6307\u5b9a\u683c\u5f0f\u6253\u5370\u4fe1\u606f\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e9b\u7279\u5b9a\u7684\u53c2\u6570\uff1a time_namelookup\uff1a\u4ece\u5f00\u59cb\u5230\u57df\u540d\u89e3\u6790\u5b8c\u6210\u65f6\u7684\u8017\u65f6 time_connect\uff1a\u4ece\u5f00\u59cb\u5230 TCP \u8fde\u63a5\u5efa\u7acb\u5b8c\u6210\u7684\u8017\u65f6 time_appconnect\uff1a\u4ece\u5f00\u59cb\u5230 TLS \u8fde\u63a5\u5efa\u7acb\u5b8c\u6210\u7684\u8017\u65f6 time_redirect\uff1a\u591a\u6b21\u91cd\u5b9a\u5411\uff08\u5982\u679c\u6709\uff09\u7684\u8017\u65f6 time_pretransfer\uff1a\u4ece\u5f00\u59cb\u5230\u51c6\u5907\u53d1\u9001\u8bf7\u6c42\u6d88\u606f\u524d\u7684\u8017\u65f6 time_starttransfer\uff1a\u4ece\u5f00\u59cb\u5230\u670d\u52a1\u5668\u51c6\u5907\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5b57\u8282\u65f6\u7684\u8017\u65f6 time_total\uff1a\u6574\u4e2a HTTP \u8bf7\u6c42\u64cd\u4f5c\u8017\u65f6 \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a time_namelookup: 0.002275 time_connect: 0.013750 time_appconnect: 0.039952 time_redirect: 0.000000 time_pretransfer: 0.040041 time_starttransfer: 0.051713 time_total: 0.135286 \u901a\u8fc7\u4e0a\u8ff0\u8f93\u51fa\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\u5404\u4e2a\u6b65\u9aa4\u7684\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a DNS \u89e3\u6790\uff1a2ms TCP \u8fde\u63a5\uff1atime_connect(13ms) - time_namelookup(2ms) = 11ms SSL \u63e1\u624b\u8017\u65f6: time_appconnect(39ms) - time_connect(13ms) = 26ms \u670d\u52a1\u5668\u5904\u7406\uff1atime_starttransfer(51ms) - time_pretransfer(40ms) = 11ms","title":"\u7b2c\u4e5d\u7bc7 http\u534f\u8bae"},{"location":"chapter_7/9_http_protocol/#_1","text":"\u672c\u7bc7\u603b\u7ed3http\u534f\u8bae\u76f8\u5173\u90e8\u5206","title":"\u6982\u8ff0"},{"location":"chapter_7/9_http_protocol/#http","text":"\u9996\u5148\u6765\u5f20\u6574\u4f53\u7684\u8bf4\u660e\u56fe","title":"http\u5404\u4e2a\u7248\u672c\u534f\u8bae\u7684\u8fdb\u5316\u5386\u7a0b"},{"location":"chapter_7/9_http_protocol/#http10-http11","text":"1 \u65e9\u671f HTTP/1.0 \u6027\u80fd\u4e0a\u7684\u4e00\u4e2a\u5f88\u5927\u7684\u95ee\u9898\uff0c\u90a3\u5c31\u662f\u6bcf\u53d1\u8d77\u4e00\u4e2a\u8bf7\u6c42\uff0c\u90fd\u8981\u65b0\u5efa\u4e00\u6b21 TCP \u8fde\u63a5(\u4e09\u6b21\u63e1\u624b)\uff0c\u800c\u4e14\u662f \u4e32\u884c\u8bf7\u6c42\uff0c\u505a\u4e86\u65e0\u8c13\u7684 TCP \u8fde\u63a5\u5efa\u7acb\u548c\u65ad\u5f00\uff0c\u589e\u52a0\u4e86\u901a\u4fe1\u5f00\u9500\u3002 \u4e3a\u4e86\u89e3\u51b3\u4e0a\u8ff0 TCP \u8fde\u63a5\u95ee\u9898\uff0cHTTP/1.1 \u63d0\u51fa\u4e86 \u2ed3\u8fde\u63a5 \u7684\u901a\u4fe1\u65b9\u5f0f\uff0c\u4e5f\u53eb \u6301\u4e45\u8fde\u63a5 \u3002\u8fd9\u79cd\u65b9\u5f0f\u7684\u597d\u5904\u5728\u4e8e\u51cf\u5c11\u4e86 TCP \u8fde\u63a5\u7684\udbff\udc00\u590d\u5efa\u7acb\u548c\u65ad\u5f00\u6240\u9020\u6210\u7684\u989d\u5916\u5f00\u9500\uff0c\u51cf\u8f7b\u4e86\u670d\u52a1\u5668\u7aef\u7684\u8d1f\u8f7d\u3002 \u6301\u4e45\u8fde\u63a5\u7684\u7279\u70b9\u662f\uff0c\u53ea\u8981\u4efb\u610f\u4e00\u7aef\u6ca1\u6709\u660e\u786e\u63d0\u51fa\u65ad\u5f00\u8fde\u63a5\uff0c\u5219\u4fdd\u6301 TCP \u8fde\u63a5\u72b6\u6001\u3002 2 HTTP/1.0 \u4e0d\u652f\u6301pipeline , HTTP/1.1 \u652f\u6301 3 HTTP/1.0 \u67097\u5c42\u548c4\u5c42\u7684\u961f\u5934\u963b\u585e\u95ee\u9898 HTTP/1.1\u89e3\u51b3\u4e867\u5c42\u7684\u961f\u5934\u963b\u585e\u95ee\u9898. \u56e0\u4e3ahttp\u534f\u8bae\u662f \u300c\u8bf7\u6c42 - \u5e94\u7b54\u300d \u6a21\u5f0f. \u5f53\u987a\u5e8f\u53d1\u9001\u7684\u8bf7\u6c42\u5e8f\u5217\u4e2d\u7684\u4e00\u4e2a\u8bf7\u6c42\u56e0\u4e3a\u67d0\u79cd\u539f\u56e0\u88ab\u963b\u585e\u65f6\uff0c\u5728\u540e\u9762\u6392\u961f\u7684\u6240\u6709\u8bf7\u6c42\u4e5f\u4e00\u540c\u88ab\u963b\u585e\u4e86\uff0c\u4f1a\u62db\u81f4 \u5ba2\u6237\u7aef\u4e00\u76f4\u8bf7\u6c42\u4e0d\u5230\u6570\u636e\uff0c\u8fd9\u4e5f\u5c31\u662f \u300c\u961f\u5934\u963b\u585e\u300d \u3002\u597d\u6bd4\u4e0a\u73ed\u7684\u8def\u4e0a\u585e\u2ecb\u3002 \u603b\u4e4b HTTP/1.1 \u7684\u6027\u80fd\u4e00\u822c\u822c\uff0c\u540e\u7eed\u7684 HTTP/2 \u548c HTTP/3 \u5c31\u662f\u5728\u4f18\u5316 HTTP \u7684\u6027\u80fd\u3002","title":"HTTP/1.0 \u5230 HTTP/1.1"},{"location":"chapter_7/9_http_protocol/#http11-http2","text":"HTTP/1.1 \u6709\u4e24\u4e2a\u4e3b\u8981\u7684\u7f3a\u70b9\uff1a \u5b89\u5168\u4e0d\u8db3 \u548c \u6027\u80fd\u4e0d\u9ad8","title":"HTTP/1.1 \u5230 HTTP/2"},{"location":"chapter_7/9_http_protocol/#1","text":"HTTP/2 \u4f1a\u538b\u7f29\u5934(Header)\u5982\u679c\u4f60\u540c\u65f6\u53d1\u51fa\u591a\u4e2a\u8bf7\u6c42\uff0c\u4ed6\u4eec\u7684\u5934\u662f\u4e00\u6837\u7684\u6216\u662f\u76f8\u4f3c\u7684\uff0c\u90a3\u4e48\uff0c\u534f\u8bae\u4f1a\u5e2e\u4f60\u6d88\u9664\u91cd \u590d\u7684\u90e8\u5206\u3002 \u8fd9\u5c31\u662f\u6240\u8c13\u7684 HPACK \u7b97\u6cd5 :\u5728\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u540c\u65f6\u7ef4\u62a4\u4e00\u5f20 \u5934\u4fe1\u606f\u8868 \uff0c\u6240\u6709\u5b57\u6bb5\u90fd\u4f1a\u5b58\u5165\u8fd9\u4e2a\u8868\uff0c\u751f\u6210\u4e00\u4e2a \u7d22\u5f15\u53f7 \uff0c\u4ee5\u540e\u5c31\u4e0d\u53d1\u9001\u540c\u6837\u5b57\u6bb5\u4e86\uff0c\u53ea\u53d1\u9001 \u7d22\u5f15\u53f7 \uff0c\u8fd9\u6837\u5c31\u63d0\u9ad8\u901f\u5ea6\u4e86\u3002","title":"1 \u5934\u90e8\u538b\u7f29"},{"location":"chapter_7/9_http_protocol/#2","text":"\u9996\u5148\uff0cHTTP2 \u6ca1\u6709\u6539\u53d8 HTTP1 \u7684\u8bed\u4e49\uff0c\u53ea\u662f\u5728\u5e94\u7528\u5c42\u4f7f\u7528\u4e8c\u8fdb\u5236\u5206\u5e27\u65b9\u5f0f\u4f20\u8f93\u3002\u56e0\u6b64\uff0c\u4e5f\u5f15\u5165\u4e86\u65b0\u7684\u901a\u4fe1\u5355\u4f4d\uff1a \u5e27 \u3001 \u6d88\u606f \u3001 \u6d41 \u3002 HTTP/2 \u4e0d\u518d\u50cf HTTP/1.1 \u91cc\u7684\u7eaf\u6587\u672c\u5f62\u5f0f\u7684\u62a5\u6587\uff0c\u800c\u662f\u5168\u9762\u91c7\u7528\u4e86\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u5934\u4fe1\u606f\u548c\u6570\u636e\u4f53\u90fd\u662f\u4e8c\u8fdb\u5236\uff0c\u5e76 \u4e14\u7edf\u79f0\u4e3a\u5e27(frame): \u5934\u4fe1\u606f\u5e27 \u548c \u6570\u636e\u5e27 \u3002 \u6536\u5230\u62a5\u6587\u540e\uff0c\u65e0\u9700\u518d\u5c06\u660e\u6587\u7684\u62a5\u6587\u8f6c \u6210\u4e8c\u8fdb\u5236\uff0c\u800c\u662f\u76f4\u63a5\u89e3\u6790\u4e8c\u8fdb\u5236\u62a5\u6587\uff0c\u8fd9\u589e\u52a0\u4e86 \u6570\u636e\u4f20\u8f93\u7684\u6548\u7387 .","title":"2 \u4e8c\u8fdb\u5236\u5206\u5e27(\u51cf\u5c11\u4e8c\u8fdb\u5236\u8f6c\u5316\u4e3a\u660e\u6587\u73af\u8282)"},{"location":"chapter_7/9_http_protocol/#21","text":"2.1.1 \u8ba1\u7b97\u673a\u5c42\u9762\u65e0\u9700\u518d\u5c06\u4e8c\u8fdb\u5236\u8f6c\u5316\u4e3a\u660e\u6587, \u63d0\u5347\u6570\u636e\u7684\u5904\u7406\u6548\u7387. 2.1.2 \u6700\u91cd\u8981\u7684\u662f\uff0c\u4e3a \u591a\u8def\u590d\u7528 \u63d0\u4f9b\u4e86\u5e95\u5c42\u652f\u6301\u3002","title":"2.1 \u4e3a\u4ec0\u4e48\u8981\u4e8c\u8fdb\u5236\u5206\u5e27"},{"location":"chapter_7/9_http_protocol/#3","text":"HTTP/2 \u7684\u6570\u636e\u5305\u4e0d\u662f\u6309\u987a\u5e8f\u53d1\u9001\u7684\uff0c\u540c\u4e00\u4e2a\u8fde\u63a5\u91cc\u9762\u8fde\u7eed\u7684\u6570\u636e\u5305\uff0c\u53ef\u80fd\u5c5e\u4e8e\u4e0d\u540c\u7684\u56de\u5e94\u3002\u56e0\u6b64\uff0c\u5fc5\u987b\u8981\u5bf9\u6570\u636e\u5305\u505a\u6807\u8bb0\uff0c\u6307\u51fa\u5b83\u5c5e\u4e8e\u54ea\u4e2a\u56de\u5e94\u3002 \u6bcf\u4e2a\u8bf7\u6c42\u6216\u56de\u5e94\u7684\u6240\u6709\u6570\u636e\u5305\uff0c\u79f0\u4e3a\u4e00\u4e2a\u6570\u636e\u6d41( Stream ) \u3002\u6bcf\u4e2a \u6570\u636e\u6d41 \u90fd\u6807\u8bb0\u7740\u4e00\u4e2a\u72ec\u4e00\u65e0\u4e8c\u7684\u7f16\u53f7\uff0c\u5176\u4e2d\u89c4\u5b9a \u5ba2\u6237\u7aef\u53d1\u51fa\u7684\u6570\u636e\u6d41\u7f16\u53f7\u4e3a\u5947\u6570 \uff0c \u670d\u52a1\u5668\u53d1\u51fa\u7684\u6570\u636e\u6d41\u7f16\u53f7\u4e3a\u5076\u6570 \u5ba2\u6237\u7aef\u8fd8\u53ef\u4ee5\u6307\u5b9a\u6570\u636e\u6d41\u7684\u4f18\u5148\u7ea7\u3002\u4f18\u5148\u7ea7\u9ad8\u7684\u8bf7\u6c42\uff0c\u670d\u52a1\u5668\u5c31\u5148\u54cd\u5e94\u8be5\u8bf7\u6c42\u3002","title":"3 \u6570\u636e\u6d41"},{"location":"chapter_7/9_http_protocol/#4","text":"\u4e00\u4e2a\u57df\u540d\u5bf9\u5e94\u4e00\u4e2a\u8fde\u63a5 \uff0c\u4e00\u4e2a \u6d41 \u4ee3\u8868\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684 \u8bf7\u6c42-\u54cd\u5e94 \u8fc7\u7a0b\u3002\u5e27\u662f\u6700\u5c0f\u7684\u6570\u636e\u5355\u4f4d\uff0c\u6bcf\u4e2a\u5e27\u4f1a\u6807\u8bc6\u51fa\u8be5\u5e27\u5c5e\u4e8e\u54ea\u4e2a \u6d41 \uff0c \u6d41 \u4e5f\u5c31\u662f\u591a\u4e2a\u5e27\u7ec4\u6210\u7684 \u6570\u636e\u6d41 \u3002\u591a\u8def\u590d\u7528\uff0c\u5c31\u662f\u5728\u4e00\u4e2a TCP \u8fde\u63a5\u4e2d\u53ef\u4ee5\u5b58\u5728\u591a\u4e2a \u6d41 \u3002 HTTP/2 \u662f\u53ef\u4ee5\u5728 \u4e00\u4e2a\u8fde\u63a5\u4e2d\u5e76\u53d1\u591a\u4e2a\u8bf7\u6c42\u6216\u56de\u5e94\uff0c\u800c\u4e0d\u7528\u6309\u7167\u987a\u5e8f\u4e00\u4e00\u5bf9\u5e94 \u3002 \u79fb\u9664\u4e86 HTTP/1.1 \u4e2d\u7684\u4e32\u884c\u8bf7\u6c42\uff0c\u4e0d\u9700\u8981\u6392\u961f\u7b49\u5f85\uff0c\u4e5f\u5c31\u4e0d\u4f1a\u518d\u51fa\u73b07\u5c42 \u300c\u961f\u5934\u963b\u585e\u300d \u95ee\u9898\uff0c\u964d\u4f4e\u4e86\u5ef6\u8fdf\uff0c\u5927\u5e45\u5ea6\u63d0\u9ad8\u4e86\u8fde\u63a5\u7684\u5229\u7528\u7387\u3002 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u5728\u4e00\u4e2a TCP \u8fde\u63a5\u91cc\uff0c\u670d\u52a1\u5668\u6536\u5230\u4e86\u5ba2\u6237\u7aef A \u548c B \u7684\u4e24\u4e2a\u8bf7\u6c42\uff0c\u5982\u679c\u53d1\u73b0 A \u5904\u7406\u8fc7\u7a0b\u975e\u5e38\u8017\u65f6\uff0c\u4e8e\u662f\u5c31 \u56de\u5e94 A \u8bf7\u6c42\u5df2\u7ecf\u5904\u7406\u597d\u7684\u90e8\u5206\uff0c\u63a5\u7740\u56de\u5e94 B \u8bf7\u6c42\uff0c\u5b8c\u6210\u540e\uff0c\u518d\u56de\u5e94 A \u8bf7\u6c42\u5269\u4e0b\u7684\u90e8\u5206\u3002","title":"4 \u4ec0\u4e48\u662f\u591a\u8def\u590d\u7528"},{"location":"chapter_7/9_http_protocol/#5","text":"HTTP/2 \u8fd8\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u6539\u5584\u4e86\u4f20\u7edf\u7684 \u300c\u8bf7\u6c42 - \u5e94\u7b54\u300d \u5de5\u4f5c\u6a21\u5f0f\uff0c\u670d\u52a1\u4e0d\u518d\u662f\u88ab\u52a8\u5730\u54cd\u5e94\uff0c\u4e5f\u53ef\u4ee5\u4e3b\u52a8\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u6d88\u606f\u3002 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u5728\u6d4f\u89c8\u5668\u521a\u8bf7\u6c42 HTML \u7684\u65f6\u5019\uff0c\u5c31\u63d0\u524d\u628a\u53ef\u80fd\u4f1a\u7528\u5230\u7684 JS\u3001CSS \u6587\u4ef6\u7b49\u9759\u6001\u8d44\u6e90\u4e3b\u52a8\u53d1\u7ed9\u5ba2\u6237\u7aef\uff0c\u51cf\u5c11\u5ef6\u65f6\u7684\u7b49\u5f85\uff0c\u4e5f\u5c31\u662f\u670d\u52a1\u5668\u63a8\u9001(Server Push\uff0c\u4e5f\u53eb Cache Push)\u3002","title":"5 \u670d\u52a1\u5668\u63a8\u9001"},{"location":"chapter_7/9_http_protocol/#http2-http3","text":"","title":"HTTP/2 \u5230 HTTP/3"},{"location":"chapter_7/9_http_protocol/#1-http2","text":"HTTP2 \u7684\u7f3a\u9677 - 1 TCP \u4ee5\u53ca TCP+TLS \u5efa\u7acb\u8fde\u63a5\u7684\u5ef6\u65f6 2 TCP(4\u5c42)\u7684\u961f\u5934\u963b\u585e\u5e76\u6ca1\u6709\u5f7b\u5e95\u89e3\u51b3","title":"1 HTTP/2\u5b58\u5728\u7684\u95ee\u9898"},{"location":"chapter_7/9_http_protocol/#2-http3","text":"2.1 HTTP/2 \u5efa\u8fde\u5ef6\u65f6 TCP \u8fde\u63a5\u9700\u8981\u548c\u670d\u52a1\u5668\u8fdb\u884c\u4e09\u6b21\u63e1\u624b\uff0c\u5373\u6d88\u8017\u5b8c 1.5 \u4e2a RTT \u4e4b\u540e\u624d\u80fd\u8fdb\u884c\u6570\u636e\u4f20\u8f93\u3002 TLS \u8fde\u63a5\u6709\u4e24\u4e2a\u7248\u672c\u2014\u2014 TLS1.2 \u548c TLS1.3\uff0c\u6bcf\u4e2a\u7248\u672c\u5efa\u7acb\u8fde\u63a5\u6240\u82b1\u7684\u65f6\u95f4\u4e0d\u540c\uff0c\u5927\u81f4\u9700\u8981 1~2 \u4e2a RTT\u3002 RTT\uff08Round-Trip Time\uff09:\u5f80\u8fd4\u65f6\u5ef6\u3002\u8868\u793a\u4ece\u53d1\u9001\u7aef\u53d1\u9001\u6570\u636e\u5f00\u59cb\uff0c\u5230\u53d1\u9001\u7aef\u6536\u5230\u6765\u81ea\u63a5\u6536\u7aef\u7684\u786e\u8ba4\uff08\u63a5\u6536\u7aef\u6536\u5230\u6570\u636e\u540e\u4fbf\u7acb\u5373\u53d1\u9001\u786e\u8ba4\uff09\uff0c\u603b\u5171\u7ecf\u5386\u7684\u65f6\u5ef6\u3002 2.2 HTTP/3 \u6539\u8fdb HTTPS \u8981\u5efa\u7acb\u4e00\u4e2a\u8fde\u63a5\uff0c\u8981\u82b1\u8d39 6 \u6b21\u4ea4\u4e92\uff0c\u5148\u662f\u5efa\u7acb\u4e09\u6b21\u63e1\u624b\uff0c\u7136\u540e\u662f TLS/1.3 \u7684\u4e09\u6b21\u63e1\u624b\u3002QUIC\u76f4\u63a5\u628a\u4ee5\u5f80\u7684 TCP \u548c TLS/1.3 \u7684 6 \u6b21\u4ea4\u4e92\u5408\u5e76\u6210\u4e86 3 \u6b21\uff0c\u51cf\u5c11\u4e86\u4ea4\u4e92\u6b21\u6570\u3002 2.2 HTTP/2 4\u5c42\u961f\u5934\u963b\u585e\u95ee\u9898\u6ca1\u6709\u5f7b\u5e95\u89e3\u51b3 \u4e3a\u4ec0\u4e48\u5462? \u5f88\u7b80\u5355\u5e94\u7528\u5c42\u901a\u8fc7 \u6570\u636e\u6d41Stream \u6765\u8fdb\u884c\u4ea4\u4e92, 4\u5c42\u6839\u672c\u4e0d\u5173\u5fc3\u4e0a\u5c42. \u56e0\u6b64\u4e00\u65e6\u51fa\u73b04\u5c42\u4e22\u5305, \u6bd4\u5982 \u4e00\u51717\u4e2a\u5305 1,2,3,4,5,6,7 , 4 \u8fd9\u4e2a\u5305\u4e22\u4e86, \u90a3\u4e48\u5ba2\u6237\u7aef\u53ef\u4ee5\u9009\u62e9\u786e\u8ba43, \u7136\u540e\u670d\u52a1\u5668\u4e5f\u53ef\u4ee5\u53ea\u91cd\u4f20 4 , \u4f46\u662f\u5ba2\u6237\u7aef\u8fd9\u8fb9\u53ea\u80fd\u5411\u4e0a\u5c42\u4ea4\u4ed8 1,2,3 \u91cc\u5305\u542b\u7684\u5e94\u7528\u6570\u636e, 4\u30015\u30016\u30017 \u5fc5\u987b\u7b49 4 \u91cd\u4f20\u56de\u6765\u4e86\u624d\u80fd\u5f80\u4e0a\u5c42\u4ea4\u4ed8. \u8fd9\u5c31\u662f\u5206\u5c42\u5e26\u6765\u7684\u95ee\u9898. QUIC\u600e\u4e48\u89e3\u51b3? \u5f88\u7b80\u5355\u5c31\u662f\u5f534\u5c42\u4e22\u5305\u65f6,\u4e0a\u5c42\u77e5\u9053\u662f\u54ea\u4e2a Stream \u4e22\u7684\u5305. \u56e0\u6b64\u53ef\u4ee5\u5148\u5904\u7406\u6ca1\u6709\u53d1\u751f\u4e22\u5305\u7684 Stream . \u5e26\u6765\u4ec0\u4e48\u95ee\u9898? \u5bf9\u4e8e\u4e0d\u652f\u6301QUIC\u534f\u8bae\u7684\u7f51\u7edc\u8bbe\u5907\u3001\u8ba1\u7b97\u673a, \u5c31\u53ea\u80fd\u5f53UDP\u6765\u5904\u7406.","title":"2 HTTP/3 \u5982\u4f55\u6539\u8fdb"},{"location":"chapter_7/9_http_protocol/#3-http3","text":"TLS3 \u5347\u7ea7\u6210\u4e86\u6700\u65b0\u7684 1.3 \u7248\u672c(\u539f\u6765\u662f\u6709 1.2 \u548c 1.3 \u7248\u672c)\uff0c\u5934\u90e8\u538b\u7f29\u7b97\u6cd5\u4e5f\u5347\u7ea7\u6210\u4e86 QPack \u3002","title":"3 HTTP/3 \u5176\u4ed6\u7684\u4e00\u4e9b\u6539\u8fdb"},{"location":"chapter_7/9_http_protocol/#pipeline-websocket","text":"","title":"\u4ec0\u4e48Pipeline\u548c WebSocket"},{"location":"chapter_7/9_http_protocol/#http-pipeline","text":"http\u7ba1\u7ebf\u5316\u662f\u4e00\u9879\u5b9e\u73b0\u4e86\u591a\u4e2ahttp\u8bf7\u6c42\u4e0d\u9700\u8981\u7b49\u5f85\u76f8\u5e94\u7684\u5e94\u7b54\u5c31\u80fd\u591f\u5199\u8fdb\u540c\u4e00\u4e2asocket\u7684\u6280\u672f.\u4ec5\u6709http1.1\u89c4\u8303\u652f\u6301http\u7ba1\u7ebf\u5316,1.0\u5e76\u4e0d\u652f\u6301. \u91c7\u7528\u7ba1\u7ebf\u5316\u7684\u8bf7\u6c42\u4f1a\u5bf9\u9875\u9762\u8f7d\u5165\u65f6\u95f4\u4ea7\u751f\u52a8\u6001\u7684\u63d0\u9ad8.\u5c24\u5176\u662f\u5f53\u901a\u8fc7\u9ad8\u5ef6\u8fdf\u7684\u7f51\u7edc,\u4f8b\u5982\u901a\u8fc7\u536b\u661f\u7f51\u7edc\u8fde\u63a5. \u5373\u4f7f\u901a\u5e38\u60c5\u51b5\u4e0b,\u53ef\u4ee5\u901a\u8fc7\u540c\u4e00\u4e2atcp\u6570\u636e\u5305\u53d1\u9001\u591a\u4e2ahttp\u8bf7\u6c42,http\u7ba1\u7ebf\u5316\u5411\u7f51\u7edc\u4e0a\u53d1\u9001\u66f4\u5c11\u7684tcp\u6570\u636e\u5305,\u4ee5\u4fbf\u51cf\u8f7b\u7f51\u7edc\u8d1f\u8f7d. \u53ea\u6709\u5e42\u7b49\u7684\u8bf7\u6c42\u80fd\u591f\u88ab\u7ba1\u7ebf\u5316 ,\u4f8b\u5982get\u548chead\u8bf7\u6c42.post\u8bf7\u6c42\u4e0d\u5e94\u8be5\u88ab\u7ba1\u7ebf\u5316.\u65b0\u5efa\u7acb\u8fde\u63a5\u4e0a\u7684\u8bf7\u6c42\u56e0\u4e3a\u65e0\u6cd5\u5224\u65ad\u6e90\u670d\u52a1\u5668(\u4ee3\u7406\u670d\u52a1\u5668)\u662f\u5426\u652f\u6301http1.1\u534f\u8bae,\u4e5f\u4e0d\u5e94\u8be5\u88ab\u7ba1\u7ebf\u5316\u5904\u7406.\u6240\u4ee5,\u4ec5\u5728\u91cd\u7528\u5df2\u7ecf\u6210\u529f\u5efa\u7acb\u7684\u6301\u4e45\u5316\u8fde\u63a5\u7684\u60c5\u51b5\u4e0b,\u624d\u53ef\u4ee5\u4f7f\u7528\u7ba1\u7ebf\u5316.","title":"HTTP pipeline\u4ecb\u7ecd"},{"location":"chapter_7/9_http_protocol/#keepalive-pipeline-websocket","text":"\u540d\u79f0 \u539f\u7406\u7b80\u8ff0 \u5b9e\u8df5\uff08\u5e38\u7528\u8f6f\u4ef6\u76f8\u5173\u5b9e\u8df5\uff09 http keepalive \u5728\u540c\u4e00\u4e2atcp\u8fde\u63a5\u4e0a\uff0c\u8fdb\u884c\u591a\u6b21http\u8bf7\u6c42\u548c\u54cd\u5e94\u3002\u907f\u514d\u6bcf\u4e00\u4e2ahttp\u8d44\u6e90\uff0c\u90fd\u8981\u5efa\u7acb\u4e00\u6b21tcp\u8fde\u63a5\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cNGINX\u3001Apache\u7b49\u90fd\u652f\u6301 http pipeline(\u7ba1\u7ebf\u5316) \u5728\u540c\u4e00\u4e2atcp\u8fde\u63a5\u4e0a\uff0c\u5bf9pipeline\u6765\u8bf4\uff0c\u5ba2\u6237\u7aef\u4e0d\u5fc5\u7b49\u5230\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u5904\u7406\u5b8c\u540e\uff0c\u5c31\u53ef\u4ee5\u9a6c\u4e0a\u53d1\u8d77\u7b2c\u4e8c\u4e2a\u8bf7\u6c42\u3002\u5f97\u5230\u4e24\u4e2a\u54cd\u5e94\u7684\u65f6\u95f4\u53ef\u80fd\u80fd\u591f\u8fbe\u52301RTT\u3002 \u53ea\u6709http 1.1\u624d\u652f\u6301,http 1.0\u4e0d\u652f\u6301\u3002NGINX\u9ed8\u8ba4\u652f\u6301http pipeline websocket \u89e3\u51b3http\u534f\u8bae\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7684\u201c\u88ab\u52a8\u6027\u201d\uff0c\u4e5f\u5c31\u662f\u53ea\u80fd\u5ba2\u6237\u7aef\u53d1\u8d77\u8bf7\u6c42\uff0c\u670d\u52a1\u5668\u54cd\u5e94\u3002\u670d\u52a1\u5668\u4e0d\u80fd\u4e3b\u52a8\u53d1\u6d88\u606f\u7ed9\u5ba2\u6237\u7aef\u3002 \u7c7b\u4f3cJava Socket\uff0c\u7531Http\u8bf7\u6c42\u6a21\u62df\u5b9e\u73b0\u7684socket\u3002","title":"Keepalive \u548c Pipeline \u548c WebSocket\u6bd4\u8f83"},{"location":"chapter_7/9_http_protocol/#httpheader","text":"","title":"http\u5404\u4e2aheader\u542b\u4e49\u5927\u96c6\u5408"},{"location":"chapter_7/9_http_protocol/#ssl","text":"","title":"SSL\u534f\u8bae\u63e1\u624b\u8fc7\u7a0b"},{"location":"chapter_7/9_http_protocol/#1_1","text":"ssl/tls\u534f\u8bae\uff0c\u603b\u4f53\u52062\u4e2a\u9636\u6bb5\uff1a \u9636\u6bb5 \u8bf4\u660e 1 \u8eab\u4efd\u9a8c\u8bc1\u9636\u6bb5\uff08\u63e1\u624b\u9636\u6bb5\uff09 \u91c7\u7528\u975e\u5bf9\u79f0\u52a0\u5bc6 2 \u6570\u636e\u4f20\u8f93\u9636\u6bb5 \u91c7\u7528\u5bf9\u79f0\u52a0\u5bc6","title":"1 \u603b\u4f53\u8bf4\u660e"},{"location":"chapter_7/9_http_protocol/#2-4","text":"","title":"2 \u7ec6\u52064\u4e2a\u9636\u6bb5"},{"location":"chapter_7/9_http_protocol/#21-client-hello","text":"","title":"2.1 Client Hello"},{"location":"chapter_7/9_http_protocol/#22-server-hello","text":"","title":"2.2 Server Hello"},{"location":"chapter_7/9_http_protocol/#23","text":"","title":"2.3 \u5ba2\u6237\u7aef\u56de\u5e94"},{"location":"chapter_7/9_http_protocol/#24","text":"","title":"2.4 \u670d\u52a1\u7aef\u56de\u5e94"},{"location":"chapter_7/9_http_protocol/#25","text":"","title":"2.5 \u5c0f\u7ed3"},{"location":"chapter_7/9_http_protocol/#_2","text":"\u7edf\u8ba1\u6574\u4e2ahttp\u8def\u5f84\u4e2d\u5404\u4e2a\u9636\u6bb5\u7684\u8017\u65f6, \u660e\u786e\u670d\u52a1\u5668\u5904\u7406\u8017\u65f6\u3001\u7f51\u7edc\u4f20\u8f93\u8017\u65f6 curl \u6307\u4ee4\u662f\u4e00\u4e2a\u529f\u80fd\u975e\u5e38\u5f3a\u5927\u7684\u6307\u4ee4\uff0c\u4e5f\u53ef\u4ee5\u7edf\u8ba1 HTTP \u8bf7\u6c42\u5404\u4e2a\u9636\u6bb5\u7684\u8017\u65f6\uff0c\u4f7f\u7528\u5982\u4e0b\uff1a curl -o /dev/null -s -w \"time_namelookup: %{time_namelookup}\\ntime_connect: %{time_connect}\\ntime_appconnect: %{time_appconnect}\\ntime_redirect: %{time_redirect}\\ntime_pretransfer: %{time_pretransfer}\\ntime_starttransfer: %{time_starttransfer}\\ntime_total: %{time_total}\\n\" \"https://www.baidu.com\" \u53c2\u6570\u89e3\u6790\uff1a -o /dev/null \u628a\u8fd4\u56de\u503c\u4e22\u6389\uff0c\u4e0d\u7528\u8f93\u51fa -s \u9759\u9ed8\u8f93\u51fa\uff0c\u4e0d\u8f93\u51fa\u8fdb\u5ea6\u6761 -w \u6309\u6307\u5b9a\u683c\u5f0f\u6253\u5370\u4fe1\u606f\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e9b\u7279\u5b9a\u7684\u53c2\u6570\uff1a time_namelookup\uff1a\u4ece\u5f00\u59cb\u5230\u57df\u540d\u89e3\u6790\u5b8c\u6210\u65f6\u7684\u8017\u65f6 time_connect\uff1a\u4ece\u5f00\u59cb\u5230 TCP \u8fde\u63a5\u5efa\u7acb\u5b8c\u6210\u7684\u8017\u65f6 time_appconnect\uff1a\u4ece\u5f00\u59cb\u5230 TLS \u8fde\u63a5\u5efa\u7acb\u5b8c\u6210\u7684\u8017\u65f6 time_redirect\uff1a\u591a\u6b21\u91cd\u5b9a\u5411\uff08\u5982\u679c\u6709\uff09\u7684\u8017\u65f6 time_pretransfer\uff1a\u4ece\u5f00\u59cb\u5230\u51c6\u5907\u53d1\u9001\u8bf7\u6c42\u6d88\u606f\u524d\u7684\u8017\u65f6 time_starttransfer\uff1a\u4ece\u5f00\u59cb\u5230\u670d\u52a1\u5668\u51c6\u5907\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5b57\u8282\u65f6\u7684\u8017\u65f6 time_total\uff1a\u6574\u4e2a HTTP \u8bf7\u6c42\u64cd\u4f5c\u8017\u65f6 \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a time_namelookup: 0.002275 time_connect: 0.013750 time_appconnect: 0.039952 time_redirect: 0.000000 time_pretransfer: 0.040041 time_starttransfer: 0.051713 time_total: 0.135286 \u901a\u8fc7\u4e0a\u8ff0\u8f93\u51fa\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\u5404\u4e2a\u6b65\u9aa4\u7684\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a DNS \u89e3\u6790\uff1a2ms TCP \u8fde\u63a5\uff1atime_connect(13ms) - time_namelookup(2ms) = 11ms SSL \u63e1\u624b\u8017\u65f6: time_appconnect(39ms) - time_connect(13ms) = 26ms \u670d\u52a1\u5668\u5904\u7406\uff1atime_starttransfer(51ms) - time_pretransfer(40ms) = 11ms","title":"\u4e00\u4e9b\u5b9e\u6218\u6280\u5de7"},{"location":"chapter_8/10_jixiaofangtan/","text":"\u6982\u8ff0 \u672c\u7bc7\u68b3\u7406\u4e00\u4e2a\u7ee9\u6548\u8bbf\u8c08\u7684\u6a21\u7248 \u4e00 \u603b\u4f53\u601d\u8def \u4e3b\u7ba1\u8981\u7ad9\u5728\u5458\u5de5\u89d2\u5ea6, \u804a\u5458\u5de5\u671f\u671b\u542c\u5230\u7684\u5185\u5bb9 \u4e8c \u5177\u4f53\u6a21\u7248 1 \u5458\u5de5\u672c\u8eab\u53ef\u5708\u53ef\u70b9\u53ef\u6539\u8fdb\u7684\u5730\u65b9 \u8ba9\u5458\u5de5\u81ea\u5df1\u8bf4\u505a\u7684\u597d\u7684\u5730\u65b9 \u8ba9\u5458\u5de5\u81ea\u5df1\u8bf4\u5f85\u6539\u8fdb\u7684\u5730\u65b9 \u4ece\u4e3b\u7ba1\u89d2\u5ea6\u6765\u9648\u8ff0\u4e00\u4e9b\u4e8b\u5b9e, \u8bf4\u660e\u5458\u5de5\u53ef\u5708\u53ef\u70b9\u53ef\u6539\u8fdb\u7684\u5730\u65b9, \u8ba9\u5458\u5de5\u81ea\u5df1\u5f97\u51fa\u7ed3\u8bba. \u542f\u53d1\u5f0f\u6c9f\u901a. 2 \u5458\u5de5\u4e0b\u4e00\u4e2a\u8003\u6838\u5468\u671f\u7684\u76ee\u6807 \u5177\u4f53\u600e\u4e48\u53bb\u505a \u4e3b\u7ba1\u53ef\u4ee5\u7ed9\u54ea\u4e9b\u652f\u6301 3 \u5458\u5de5\u5bf9\u4e3b\u7ba1\u6709\u54ea\u4e9b\u5efa\u8bae, \u8ba9\u5f7c\u6b64\u5408\u4f5c\u66f4\u52a0\u9ed8\u5951 \u6bd4\u5982\u6c9f\u901a\u65b9\u9762 \u6bd4\u5982\u56e2\u961f\u76ee\u524d\u5b58\u5728\u54ea\u4e9b\u95ee\u9898","title":"\u7b2c\u5341\u7bc7 \u7ee9\u6548\u8bbf\u8c08\u603b\u7ed3"},{"location":"chapter_8/10_jixiaofangtan/#_1","text":"\u672c\u7bc7\u68b3\u7406\u4e00\u4e2a\u7ee9\u6548\u8bbf\u8c08\u7684\u6a21\u7248","title":"\u6982\u8ff0"},{"location":"chapter_8/10_jixiaofangtan/#_2","text":"\u4e3b\u7ba1\u8981\u7ad9\u5728\u5458\u5de5\u89d2\u5ea6, \u804a\u5458\u5de5\u671f\u671b\u542c\u5230\u7684\u5185\u5bb9","title":"\u4e00 \u603b\u4f53\u601d\u8def"},{"location":"chapter_8/10_jixiaofangtan/#_3","text":"","title":"\u4e8c \u5177\u4f53\u6a21\u7248"},{"location":"chapter_8/10_jixiaofangtan/#1","text":"\u8ba9\u5458\u5de5\u81ea\u5df1\u8bf4\u505a\u7684\u597d\u7684\u5730\u65b9 \u8ba9\u5458\u5de5\u81ea\u5df1\u8bf4\u5f85\u6539\u8fdb\u7684\u5730\u65b9 \u4ece\u4e3b\u7ba1\u89d2\u5ea6\u6765\u9648\u8ff0\u4e00\u4e9b\u4e8b\u5b9e, \u8bf4\u660e\u5458\u5de5\u53ef\u5708\u53ef\u70b9\u53ef\u6539\u8fdb\u7684\u5730\u65b9, \u8ba9\u5458\u5de5\u81ea\u5df1\u5f97\u51fa\u7ed3\u8bba. \u542f\u53d1\u5f0f\u6c9f\u901a.","title":"1 \u5458\u5de5\u672c\u8eab\u53ef\u5708\u53ef\u70b9\u53ef\u6539\u8fdb\u7684\u5730\u65b9"},{"location":"chapter_8/10_jixiaofangtan/#2","text":"\u5177\u4f53\u600e\u4e48\u53bb\u505a \u4e3b\u7ba1\u53ef\u4ee5\u7ed9\u54ea\u4e9b\u652f\u6301","title":"2 \u5458\u5de5\u4e0b\u4e00\u4e2a\u8003\u6838\u5468\u671f\u7684\u76ee\u6807"},{"location":"chapter_8/10_jixiaofangtan/#3","text":"\u6bd4\u5982\u6c9f\u901a\u65b9\u9762 \u6bd4\u5982\u56e2\u961f\u76ee\u524d\u5b58\u5728\u54ea\u4e9b\u95ee\u9898","title":"3 \u5458\u5de5\u5bf9\u4e3b\u7ba1\u6709\u54ea\u4e9b\u5efa\u8bae, \u8ba9\u5f7c\u6b64\u5408\u4f5c\u66f4\u52a0\u9ed8\u5951"},{"location":"chapter_8/11_classic_technical_thinking/","text":"","title":"\u7b2c\u5341\u4e00\u7bc7 \u7ecf\u5178\u6280\u672f\u601d\u7ef4\u6c47\u603b"},{"location":"chapter_8/1_xuexixinde/","text":"\u8bf4\u660e \u672c\u7bc7\u535a\u5ba2\u7528\u4e8e\u8bb0\u5f55\u5728\u6280\u672f\u5b66\u4e60\u65b9\u9762\u7684\u4e00\u4e9b\u5fc3\u5f97\u4f53\u4f1a,\u671b\u8bfb\u8005\u591a\u591a\u53cd\u9988. \u4e00 \u4e2a\u4eba\u91cd\u70b9 \u505a\u4e8b\u4e4b\u524d, \u9996\u5148\u6309\u300a\u9879\u76ee\u7ba1\u7406\u300b\u6587\u6863, \u5148\u548c\u9886\u5bfc\u3001\u540c\u4e8b\u5bf9\u9f50\u76ee\u6807, \u5bf9\u9f50\u76ee\u6807\u600e\u4e48\u8861\u91cf, \u62c6\u5206\u4efb\u52a1\u3001\u786e\u5b9a\u6392\u671f. \u719f\u6089\u65b0\u7cfb\u7edf\u3001\u65b0\u6a21\u5757\u65f6, \u5148\u76d8\u70b9\u68b3\u7406\u73b0\u72b6, \u7136\u540e\u53d1\u73b0\u5f85\u4f18\u5316\u70b9, \u7136\u540e\u5bf9\u9f50\u76ee\u6807\u8fdb\u884c\u4f18\u5316. \u4e8c \u5b66\u4e60\u65b9\u6cd5,\u5982\u4f55\u4fdd\u8bc1\u81ea\u5df1\u5b66\u7684\u6bd4\u522b\u4eba\u9ad8\u6548 \uff08\u4e00\uff09\u6838\u5fc3\u6982\u5ff5\u548c\u6838\u5fc3\u6d41\u7a0b\u68b3\u7406\u6cd5 \u6bd4\u5982\u770b\u4e00\u672c\u5f88\u539a\u7684\u4e66\u4f8b\u5982\u300a\u6df1\u5165 Linux \u5185\u6838\u67b6\u6784\u300b,\u7531\u4e8e\u5185\u5bb9\u5f88\u591a\u975e\u5e38\u96be\u4ee5\u4e00\u4e0b\u5b50\u5168\u90e8\u641e\u61c2,\u9700\u8981\u5148\u628a\u5185\u5bb9\u8bfb\u8584 \u4e5f\u5c31\u662f\u770b\u5b8c\u4e00\u4e2a\u7ae0\u8282\u5185\u5bb9\u540e\uff0c\u8fdb\u884c\u68b3\u7406\u3002\u4f8b\u5982\u770b\u5b8c\u4e2d\u65ad\u5904\u7406\uff0c\u8981\u603b\u7ed3\u6838\u5fc3\u6a21\u578b\uff0c\u6838\u5fc3\u51fd\u6570\uff0c\u753b\u51fa\u4ed6\u4eec\u4e4b\u95f4\u7684\u8054\u7cfb\u56fe \u4e0b\u6b21\u8981\u7528\u5230\u672c\u7ae0\u5185\u5bb9\u65f6\uff0c\u5148\u7528\u81ea\u5df1\u68b3\u7406\u7684\u8054\u7cfb\u56fe,\u9047\u5230\u89e3\u91ca\u4e0d\u901a\u7684\u5730\u65b9\u518d\u53bb\u67e5\u7ec6\u8282. \u6bd4\u5982 SQLAlchemy,\u5b83\u603b\u5171\u5c31\u63d0\u4f9b 2 \u4e2a system\uff0c\u5982\u679c\u7ec6\u5206\u7684\u8bdd\uff0c\u5b83\u53c8\u6709\u5f88\u591a\u5b50\u7cfb\u7edf(\u5b50\u7ec4\u4ef6),\u6211\u4eec\u8981\u5bf9\u4ed6\u4eec\u8fdb\u884c\u9010\u4e00\u7406\u89e3,\u5206\u7c7b\uff0c\u7136\u540e\u753b\u51fa\u4ed6\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u53e6\u5916\uff0c\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u628a\u81ea\u5df1\u60f3\u8c61\u6210 Linux \u7684\u67d0\u4e2a\u5b50\u7cfb\u7edf, \u4f8b\u5982\u4f60\u662f Linux \u7684\u5185\u5b58\u5b50\u7cfb\u7edf\u3001\u6216\u8005\u5185\u6838\u534f\u8bae\u6808, \u4f60\u4f1a\u5982\u4f55\u8bbe\u8ba1\u3001\u5b8c\u6210\u9ad8\u6548\u3001\u9ad8\u8d28\u91cf\u7684\u7ba1\u7406\u5de5\u4f5c, \u8fd9\u6837\u66f4\u52a0\u6709\u52a9\u4e8e\u4f60\u7406\u89e3\u5e95\u5c42\u6280\u672f\u77e5\u8bc6. (\u4e8c) \u4e3e\u4e00\u53cd\u4e09\u6cd5. \u5f53\u65f6\u89e3\u51b3\u4e86\u95ee\u9898\uff0c\u4f46\u662f\u540e\u9762\u8981\u7528\u5230\u522b\u7684\u5c0f\u77e5\u8bc6\uff0c\u901a\u5e38\u8fd9\u79cd\u60c5\u51b5\u8981\u80fd\u65b9\u4fbf\u7684\u67e5\u8be2\u540e\u9762\u7684\u5c0f\u77e5\u8bc6\u3002 \u4e3e\u4f8b: \u6bd4\u5982 html \u4ee3\u7801\u91cc\uff0c\u5b57\u4f53\u3001\u80cc\u666f\u7684\u989c\u8272\uff0c\u8981\u80fd\u5728\u81ea\u5df1\u7684\u7b14\u8bb0\u91cc\u65b9\u4fbf\u7684\u67e5\u8be2\u3002 \u6bd4\u5982 smarty \u8fd9\u79cd\u5e73\u65f6\u8981\u7528\u5230\u4f46\u53c8\u4e0d\u4e3b\u6d41\u7684\u8bed\u8a00\uff0c\u5176\u6240\u6709\u7684\u5185\u7f6e\u51fd\u6570\u8981\u80fd\u5feb\u901f\u67e5\u8be2\u5230\u3002 \u5b66\u4e00\u8fbe\u767e \u996e\u4e00\u6c34\u800c\u77e5\u6c5f\u6cb3\u4e4b\u6ecb\u5473\uff0c\u89c1\u4e00\u53f6\u800c\u77e5\u79cb\u4e4b\u5c06\u81f3 \u4e09 \u5b66\u4e60\u65b9\u5411 \u6280\u672f\u77e5\u8bc6\u90a3\u4e48\u591a, \u5982\u6c6a\u6d0b\u5927\u6d77\u4e00\u822c, \u54ea\u4e9b\u624d\u662f\u5b66\u4e60\u7684\u91cd\u70b9\u548c\u65b9\u5411\u5462? 1 \u4ece\u5e73\u65f6\u7528\u7684\u4e0d\u65b9\u4fbf\u7684\u5730\u65b9\uff0c\u7740\u624b\u7814\u7a76\uff0c\u4f7f\u81ea\u5df1\u548c\u5927\u5bb6\u7528\u8d77\u6765\u65b9\u4fbf. \u4e00\u5b9a\u8981\u5b66\u4ee5\u81f4\u7528\uff0c\u628a\u4e0d\u65b9\u4fbf\u7684\u5de5\u4f5c\u53d8\u6210\u65b9\u4fbf\u4e4b\u540e\uff0c\u8981\u60f3\u529e\u6cd5\u5f62\u6210\u901a\u7528\u5de5\u5177\uff0c\u63d0\u4f9b\u7ed9\u5176\u4ed6\u540c\u5b66\u4f7f\u7528\uff0c\u7ed9\u5176\u4ed6\u540c\u5b66\u4e5f\u5e26\u6765\u65b9\u4fbf. \u4e3e\u4e00\u4e9b\u4f8b\u5b50: \u4e00\u5f00\u59cb\u4e00\u4e9b\u91cd\u8981\u7684\u9879\u76ee\u4e0a\u7ebf\u4e4b\u524d\u6bcf\u4e2a\u9879\u76ee\u4f1a\u6709\u4e00\u4e2a excel \u8868\u683c\u505a\u4e0a\u7ebf\u524d\u7684\u68c0\u67e5\uff0c\u628a\u5b83\u6f14\u53d8\u4e3a\u4e00\u4e2a\u901a\u7528\u7684 Web \u5de5\u5177\uff0c \u7edf\u4e00\u8fed\u4ee3\u89c4\u8303\u3001\u7edf\u4e00\u7edf\u8ba1\u4e0a\u7ebf\u68c0\u67e5\u8fdb\u5ea6\u3001\u7ed3\u679c 2 \u4ece\u522b\u4eba\u8e29\u8fc7\u7684\u5751\u5b66\u4e60\uff0c\u4f8b\u5982\u5176\u4ed6 SRE \u53d1\u51fa\u6765\u7684\u6545\u969c\u62a5\u544a\uff0c\u907f\u514d\u81ea\u5df1\u8e29\u5751 3 \u5f53\u4f60\u4ece\u6765\u6ca1\u6709\u5b9e\u73b0\u8fc7(\u62e5\u6709\u8fc7)\u67d0\u9879\u6280\u80fd\u65f6\uff0c\u4ece\u4f18\u79c0\u7684\u4eba\u3001\u4f18\u79c0\u7684\u4ea7\u54c1\u90a3\u91cc\u5b66\u4e60,\u591a\u548c\u4f18\u79c0\u7684\u3001\u4e13\u4e1a\u7684\u4eba\u4ea4\u6d41. \u56db \u597d\u7684\u4e60\u60ef \u53c2\u8003 \u300a\u6211\u5728\u7f8e\u56e2\u7684\u516b\u5e74\u300b \u4e0d\u7ba1\u4f60\u5728\u54ea\u91cc\u4e0a\u73ed\uff0c\u8bf7\u8bb0\u4f4f\u4ee5\u4e0b\u9ec4\u91d1\u5b9a\u5f8b \u8fd9\u6837\u7684\u5458\u5de5\u4e00\u5b9a\u4f1a\u6210\u4e3a\u9ad8\u7ba1 \u5982\u4f55\u505a\u4e00\u4e2a\u597d\u5458\u5de5 \u4e00\uff1a\u5fe0\u8bda\u2014\u2014\u5fe0\u5fc3\u8005\u4e0d\u88ab\u89e3\u96c7 \u5355\u4f4d\u53ef\u80fd\u5f00\u9664\u6709\u80fd\u529b\u7684\u5458\u5de5\uff0c\u4f46\u5bf9\u4e00\u4e2a\u5fe0\u5fc3\u803f\u803f\u7684\u4eba\uff0c\u4e0d\u4f1a\u6709\u9886\u5bfc\u613f\u610f\u8ba9\u4ed6\u8d70\uff0c\u4ed6\u4f1a\u6210\u4e3a\u5355\u4f4d\u8fd9\u4e2a\u94c1\u6253\u8425\u76d8\u4e2d\u6700\u957f\u4e45\u7684\u6218\u58eb\uff0c\u800c\u4e14\u662f\u6700\u6709\u53d1\u5c55\u524d\u666f\u7684\u5458\u5de5\u3002 1\u3001\u7ad9\u5728\u8001\u677f\u7684\u7acb\u573a\u4e0a\u601d\u8003\u95ee\u9898\uff1b 2\u3001\u4e0e\u4e0a\u7ea7\u5206\u4eab\u4f60\u7684\u60f3\u6cd5\uff1b 3\u3001\u65f6\u523b\u7ef4\u62a4\u516c\u53f8\u7684\u5229\u76ca\uff1b 4\u3001\u7422\u78e8\u4e3a\u516c\u53f8\u8d5a\u94b1\uff1b 5\u3001\u5728\u5916\u754c\u8bf1\u60d1\u9762\u524d\u7ecf\u5f97\u8d77\u8003\u9a8c\u3002 \u4e8c\uff1a\u656c\u4e1a\u2014\u2014\u6bcf\u5929\u6bd4\u8001\u677f\u591a\u505a\u4e00\u5c0f\u65f6 \u968f\u7740\u793e\u4f1a\u8fdb\u6b65\uff0c\u4eba\u4eec\u7684\u77e5\u8bc6\u80cc\u666f\u8d8a\u6765\u8d8a\u8d8b\u540c\u3002\u5b66\u5386\u3001\u6587\u51ed\u5df2\u4e0d\u518d\u662f\u516c\u53f8\u6311\u9009\u5458\u5de5\u7684\u9996\u8981\u6761\u4ef6\u3002\u5f88\u591a\u516c\u53f8\u8003\u5bdf\u5458\u5de5\u7684\u7b2c\u4e00\u6761\u4ef6\u5c31\u662f\u656c\u4e1a\uff0c\u5176\u6b21\u624d\u662f\u4e13\u4e1a\u6c34\u5e73\u3002 1\u3001\u5de5\u4f5c\u7684\u76ee\u7684\u4e0d\u4ec5\u4ec5\u5728\u4e8e\u62a5\u916c\uff1b 2\u3001\u63d0\u4f9b\u8d85\u51fa\u62a5\u916c\u7684\u670d\u52a1\u4e0e\u52aa\u529b\uff1b 3\u3001\u4e50\u610f\u4e3a\u5de5\u4f5c\u4f5c\u51fa\u4e2a\u4eba\u727a\u7272\uff1b 4\u3001\u6a21\u7cca\u4e0a\u4e0b\u73ed\u6982\u5ff5\uff0c\u5b8c\u6210\u5de5\u4f5c\u518d\u8c08\u4f11\u606f\uff1b 5\u3001\u91cd\u89c6\u5de5\u4f5c\u4e2d\u7684\u6bcf\u4e00\u4e2a\u7ec6\u8282\u3002 \u4e09\uff1a\u81ea\u52a8\u81ea\u53d1\u2014\u2014\u4e0d\u8981\u4e8b\u4e8b\u7b49\u4eba\u4ea4\u4ee3 \u4e0d\u8981\u4e8b\u4e8b\u7b49\u4eba\u4ea4\u4ee3\uff0c\u4e00\u4e2a\u4eba\u53ea\u8981\u80fd\u81ea\u52a8\u81ea\u53d1\u5730\u505a\u597d\u4e00\u5207\uff0c\u54ea\u6015\u8d77\u70b9\u6bd4\u522b\u4eba\u4f4e\uff0c\u4e5f\u4f1a\u6709\u5f88\u5927\u7684\u53d1\u5c55\uff0c\u81ea\u53d1\u7684\u4eba\u6c38\u8fdc\u53d7\u8001\u677f\u6b22\u8fce\u3002 1\u3001\u4ece\u201c\u8981\u6211\u505a\u201d\u5230\u201c\u6211\u8981\u505a\u201d\uff1b 2\u3001\u4e3b\u52a8\u5206\u62c5\u4e00\u4e9b\u201c\u5206\u5916\u201d\u4e8b\uff1b 3\u3001\u5148\u505a\u540e\u8bf4\uff0c\u7ed9\u4e0a\u53f8\u60ca\u559c\uff1b 4\u3001\u5b66\u4f1a\u6bdb\u9042\u81ea\u8350\uff1b 5\u3001\u9ad8\u6807\u51c6\u8981\u6c42\uff1a\u8981\u6c42\u4e00\u6b65\uff0c\u505a\u5230\u4e09\u6b65\uff1b 6\u3001\u62ff\u634f\u597d\u4e3b\u52a8\u7684\u5c3a\u5ea6\uff0c\u4e0d\u8981\u6025\u4e8e\u8868\u73b0\u3001\u51fa\u98ce\u5934\u751a\u81f3\u62a2\u522b\u4eba\u7684\u5de5\u4f5c\u3002 \u56db\uff1a\u8d1f\u8d23\u2014\u2014\u7edd\u5bf9\u6ca1\u6709\u501f\u53e3\uff0c\u4fdd\u8bc1\u5b8c\u6210\u4efb\u52a1 \u52c7\u4e8e\u627f\u62c5\u8d23\u4efb\u7684\u4eba\uff0c\u5bf9\u4f01\u4e1a\u6709\u7740\u91cd\u8981\u7684\u610f\u4e49\uff0c\u4e00\u4e2a\u4eba\u5de5\u4f5c\u80fd\u529b\u53ef\u4ee5\u6bd4\u522b\u4eba\u5dee\uff0c\u4f46\u662f\u4e00\u5b9a\u4e0d\u80fd\u7f3a\u4e4f\u8d23\u4efb\u611f\uff0c\u51e1\u4e8b\u63a8\u4e09\u963b\u56db\u3001\u627e\u5ba2\u89c2\u539f\u56e0\uff0c\u800c\u4e0d\u53cd\u601d\u81ea\u5df1\uff0c\u4e00\u5b9a\u4f1a\u5931\u53bb\u4e0a\u7ea7\u7684\u4fe1\u4efb\u3002 1\u3001\u8d23\u4efb\u7684\u6838\u5fc3\u5728\u4e8e\u8d23\u4efb\u5fc3\uff1b 2\u3001\u628a\u6bcf\u4e00\u4ef6\u5c0f\u4e8b\u90fd\u505a\u597d\uff1b 3\u3001\u8a00\u5fc5\u4fe1\uff0c\u884c\u5fc5\u679c\uff1b 4\u3001\u9519\u5c31\u662f\u9519\uff0c\u7edd\u5bf9\u4e0d\u8981\u627e\u501f\u53e3\uff1b 5\u3001\u8ba9\u95ee\u9898\u7684\u76ae\u7403\u81f3\u4e8e\u4f60\uff1b 6\u3001\u4e0d\u56e0\u4e00\u70b9\u758f\u5ffd\u800c\u94f8\u6210\u5927\u9519\u3002 \u4e94\uff1a\u6ce8\u91cd\u6548\u7387\u2014\u2014\u7b97\u7b97\u4f60\u7684\u4f7f\u7528\u6210\u672c \u9ad8\u6548\u7684\u5de5\u4f5c\u4e60\u60ef\u662f\u6bcf\u4e2a\u53ef\u671b\u6210\u529f\u7684\u4eba\u6240\u5fc5\u5907\u7684\uff0c\u4e5f\u662f\u6bcf\u4e2a\u5355\u4f4d\u90fd\u975e\u5e38\u770b\u91cd\u7684\u3002 1\u3001\u8ddf\u7a77\u5fd9\u3001\u778e\u5fd9\u8bf4\u201c\u518d\u89c1\u201d\uff1b 2\u3001\u5fc3\u65e0\u65c1\u9a9b\uff0c\u4e13\u5fc3\u81f4\u5fd7\uff1b 3\u3001\u91cf\u5316\u3001\u7ec6\u5316\u6bcf\u5929\u7684\u5de5\u4f5c\uff1b 4\u3001\u62d6\u5ef6\u662f\u6700\u72e0\u6bd2\u7684\u804c\u4e1a\u6740\u624b\uff1b 5\u3001\u7262\u8bb0\u4f18\u5148\uff0c\u8981\u4e8b\u7b2c\u4e00\uff1b 6\u3001\u9632\u6b62\u5b8c\u7f8e\u4e3b\u4e49\u6210\u4e3a\u6548\u7387\u7684\u5927\u654c\u3002 \u516d\uff1a\u7ed3\u679c\u5bfc\u5411\u2014\u2014\u54ac\u5b9a\u529f\u52b3\uff0c\u4e0d\u770b\u82e6\u52b3 \u201c\u65e0\u8bba\u9ed1\u732b\u3001\u767d\u732b\uff0c\u6293\u5f97\u5230\u8001\u9f20\u5c31\u662f\u597d\u732b\uff01\u201d\uff0c\u65e0\u8bba\u82e6\u5e72\u3001\u5de7\u5e72\uff0c\u51fa\u6210\u7ee9\u7684\u5458\u5de5\u624d\u4f1a\u53d7\u5230\u4f17\u4eba\u7684\u80af\u5b9a\u3002\u4f01\u4e1a\u91cd\u89c6\u7684\u662f\u4f60\u6709\u591a\u5c11\u201c\u529f\u201d\uff0c\u800c\u4e0d\u662f\u6709\u591a\u5c11\u201c\u82e6\u201d\u3002 1\u3001\u4e00\u5f00\u59cb\u5c31\u8981\u60f3\u600e\u6837\u628a\u4e8b\u60c5\u505a\u6210\uff1b 2\u3001\u529e\u6cd5\u6c38\u8fdc\u8981\u6bd4\u95ee\u9898\u591a\uff1b 3\u3001\u806a\u660e\u5730\u5de5\u4f5c\u800c\u4e0d\u4ec5\u4ec5\u662f\u52aa\u529b\u5de5\u4f5c\uff1b 4\u3001\u6ca1\u6709\u6761\u4ef6\uff0c\u5c31\u521b\u9020\u6761\u4ef6\uff1b 5\u3001\u628a\u4efb\u52a1\u5b8c\u6210\u5f97\u8d85\u51fa\u9884\u671f\u3002 \u4e03\uff1a\u5584\u4e8e\u6c9f\u901a\u2014\u2014\u5f53\u9762\u5f00\u53e3\uff0c\u5f53\u573a\u89e3\u51b3 \u4e0d\u597d\u6c9f\u901a\u8005\uff0c\u5373\u4fbf\u81ea\u5df1\u518d\u6709\u624d\uff0c\u4e5f\u53ea\u662f\u4e00\u4e2a\u4eba\u7684\u624d\u5e72\uff0c\u65e2\u4e0d\u80fd\u4f20\u627f\uff0c\u53c8\u65e0\u6cd5\u8fdb\u6b65\uff1b\u597d\u6c9f\u901a\u8005\uff0c\u54ea\u6015\u5f88\u5e73\u5eb8\uff0c\u4e5f\u53ef\u4ee5\u8fb9\u5e72\u8fb9\u5b66\uff0c\u6700\u7ec8\u5b9e\u73b0\u81ea\u5df1\u7684\u4ef7\u503c\u3002 1\u3001\u6c9f\u901a\u548c\u516b\u5366\u662f\u4e24\u56de\u4e8b\uff1b 2\u3001\u4e0d\u8bf4\u548c\u8bf4\u5f97\u8fc7\u591a\u90fd\u662f\u4e00\u79cd\u9519\uff1b 3\u3001\u5e26\u7740\u65b9\u6848\u53bb\u63d0\u95ee\u9898\uff0c\u5f53\u9762\u6c9f\u901a\uff0c\u5f53\u573a\u89e3\u51b3\uff1b 4\u3001\u57f9\u517b\u63a5\u53d7\u6279\u8bc4\u7684\u60c5\u5546\uff1b 5\u3001\u80f8\u6000\u5927\u5c40\uff0c\u65e2\u62a5\u559c\u4e5f\u62a5\u5fe7\uff1b 6\u3001\u5185\u90e8\u53ef\u4ee5\u6709\u77db\u76fe\uff0c\u5bf9\u5916\u4e00\u5b9a\u8981\u4e00\u81f4\u3002 \u516b\uff1a\u5408\u4f5c\u2014\u2014\u56e2\u961f\u63d0\u524d\uff0c\u81ea\u6211\u9000\u540e \u56e2\u961f\u63d0\u524d\uff0c\u81ea\u6211\u9000\u540e\u3002\u4e0d\u7ba1\u4e2a\u4eba\u80fd\u529b\u591a\u5f3a\uff0c\u53ea\u8981\u4f24\u5bb3\u5230\u56e2\u961f\uff0c\u516c\u53f8\u51b3\u4e0d\u4f1a\u8ba9\u4f60\u4e45\u7559\u2014\u2014\u4e0d\u8981\u8ba4\u4e3a\u7f3a\u4e86\u4f60\u4e00\u4e2a\uff0c\u56e2\u961f\u5c31\u65e0\u6cd5\u8fd0\u8f6c\uff01 1\u3001\u6ef4\u6c34\u878d\u5165\u5927\u6d77\uff0c\u4e2a\u4eba\u878d\u5165\u56e2\u961f\uff1b 2\u3001\u670d\u4ece\u603b\u4f53\u5b89\u6392\uff1b 3\u3001\u9075\u5b88\u7eaa\u5f8b\u624d\u80fd\u4fdd\u8bc1\u6218\u6597\u529b\uff1b 4\u3001\u4e0d\u505a\u56e2\u961f\u7684\u201c\u77ed\u677f\u201d\uff0c\u5982\u679c\u73b0\u5728\u662f\uff0c\u5c31\u8981\u7ed9\u81ea\u5df1\u201c\u589e\u9ad8\u201d\uff1b 5\u3001\u591a\u4e3a\u522b\u4eba\u3001\u4e3a\u56e2\u961f\u8003\u8651\u3002 \u4e5d\uff1a\u79ef\u6781\u8fdb\u53d6\u2014\u2014\u6c38\u8fdc\u8ddf\u4e0a\u4f01\u4e1a\u7684\u6b65\u4f10 \u4e2a\u4eba\u6c38\u8fdc\u8981\u8ddf\u4e0a\u4f01\u4e1a\u7684\u6b65\u4f10\uff0c\u4f01\u4e1a\u6c38\u8fdc\u8981\u8ddf\u4e0a\u5e02\u573a\u7684\u6b65\u4f10\uff1b\u65e0\u8bba\u662f\u804c\u573a\u8fd8\u662f\u5e02\u573a\uff0c\u65e0\u8bba\u662f\u4e2a\u4eba\u8fd8\u662f\u4f01\u4e1a\uff0c\u53c2\u4e0e\u8005\u90fd\u4e0d\u5e0c\u671b\u88ab\u6dd8\u6c70\u3002\u4e3a\u6b64\u5c31\u4e00\u5b9a\u8981\u524d\u8fdb\uff0c\u505c\u5c31\u610f\u5473\u7740\u653e\u5f03\uff0c\u610f\u5473\u7740\u51fa\u5c40\uff01 1\u3001\u4ee5\u7a7a\u676f\u5fc3\u6001\u53bb\u5b66\u4e60\u3001\u53bb\u6c72\u53d6\uff1b 2\u3001\u4e0d\u8981\u603b\u751f\u6c14\uff0c\u800c\u8981\u4e89\u6c14\uff1b 3\u3001\u4e0d\u8981\u4e00\u5e74\u7ecf\u9a8c\u91cd\u590d\u7528\u5341\u5e74\uff1b 4\u3001\u6324\u65f6\u95f4\u7ed9\u81ea\u5df1\u201c\u589e\u9ad8\u201d\u3001\u201c\u5145\u7535\u201d\uff1b 5\u3001\u53d1\u5c55\u81ea\u5df1\u7684\u201c\u6bd4\u8f83\u4f18\u52bf\u201d\uff1b 6\u3001\u6311\u6218\u81ea\u6211\uff0c\u672a\u96e8\u7ef8\u7f2a\u3002 \u5341\uff1a\u4f4e\u8c03\u2014\u2014\u624d\u9ad8\u4e0d\u5fc5\u81ea\u50b2 \u624d\u9ad8\u4e0d\u5fc5\u81ea\u50b2\uff0c\u4e0d\u8981\u4ee5\u4e3a\u81ea\u5df1\u4e0d\u8bf4\u3001\u4e0d\u5ba3\u626c\uff0c\u522b\u4eba\u5c31\u770b\u4e0d\u5230\u4f60\u7684\u529f\u52b3\u3002\u6240\u4ee5\u522b\u5728\u540c\u4e8b\u9762\u524d\u70ab\u8000\u3002 1\u3001\u4e0d\u8981\u9080\u529f\u8bf7\u8d4f\uff1b 2\u3001\u514b\u670d\u201c\u5927\u6750\u5c0f\u7528\u201d\u7684\u5fc3\u7406\uff1b 3\u3001\u4e0d\u8981\u6446\u67b6\u5b50\u800d\u8d44\u683c\uff1b 4\u3001\u51e1\u662f\u4eba\uff0c\u7686\u987b\u656c\uff1b 5\u3001\u52aa\u529b\u505a\u5230\u540d\u5b9e\u76f8\u7b26\uff0c\u8981\u914d\u7684\u4e0a\u81ea\u5df1\u7684\u4f4d\u7f6e\uff1b 6\u3001\u6210\u7ee9\u53ea\u662f\u5f00\u59cb\uff0c\u8363\u8a89\u5f53\u4f5c\u52a8\u529b\u3002 \u5341\u4e00\uff1a\u8282\u7ea6\u2014\u2014\u522b\u628a\u8001\u677f\u7684\u94b1\u4e0d\u5f53\u94b1 \u8282\u7ea6\u4e0d\u662f\u62a0\u95e8\uff0c\u800c\u662f\u7f8e\u5fb7\u3002\u4e0d\u8981\u628a\u516c\u53f8\u7684\u94b1\u4e0d\u5f53\u94b1\uff0c\u516c\u53f8\u201c\u9505\u201d\u91cc\u6709\uff0c\u5458\u5de5\u201c\u7897\u201d\u91cc\u624d\u6709\uff1b\u540c\u6837\uff0c\u201c\u9505\u201d\u91cc\u591a\uff0c\u201c\u7897\u201d\u91cc\u4e5f\u81ea\u7136\u5c31\u591a\u3002\u800c\u638c\u52fa\u7684\uff0c\u6070\u6070\u5c31\u662f\u4f60\u81ea\u5df1\u30021\u3001\u62a5\u9500\u8d26\u76ee\uff0c\u4e00\u5b9a\u8981\u8bda\u4fe1\uff1b 2\u3001\u4e0d\u800d\u5c0f\u806a\u660e\uff0c\u4e0d\u8d2a\u5c0f\u4fbf\u5b9c\uff1b 3\u3001\u4e0d\u6d6a\u8d39\u516c\u53f8\u7684\u8d44\u6e90\uff0c\u54ea\u6015\u662f\u4e00\u5f20\u7eb8\uff1b 4\u3001\u73cd\u60dc\u5de5\u4f5c\u7684\u6bcf\u4e00\u5206\u949f\u65f6\u95f4\uff1b 5\u3001\u6bcf\u4ed8\u51fa\u6210\u672c\uff0c\u90fd\u8981\u529b\u4e89\u6700\u5927\u6536\u76ca\uff1b 6\u3001\u8bb0\u4f4f\uff1a\u7701\u4e0b\u7684\uff0c\u5c31\u662f\u5229\u6da6\uff01 \u5341\u4e8c\uff1a\u611f\u6069\u2014\u2014\u60f3\u60f3\u662f\u8c01\u6210\u5c31\u4e86\u4eca\u5929\u7684\u4f60 \u4e3a\u4ec0\u4e48\u6211\u4eec\u80fd\u5141\u8bb8\u81ea\u5df1\u7684\u8fc7\u5931\uff0c\u5374\u5bf9\u4ed6\u4eba\u3001\u5bf9\u516c\u53f8\u6709\u8fd9\u4e48\u591a\u7684\u62b1\u6028\uff1f\u518d\u6709\u624d\u534e\u7684\u4eba\uff0c\u4e5f\u9700\u8981\u522b\u4eba\u7ed9\u4f60\u505a\u4e8b\u7684\u673a\u4f1a\uff0c\u4e5f\u9700\u8981\u4ed6\u4eba\u5bf9\u4f60\u6216\u5927\u6216\u5c0f\u7684\u5e2e\u52a9\u3002\u4f60\u73b0\u5728\u7684\u5e78\u798f\u4e0d\u662f\u4f60\u4e00\u4e2a\u4eba\u5c31\u80fd\u6210\u5c31\u7684\u3002 1\u3001\u8001\u677f\u7ed9\u4e86\u4f60\u996d\u7897\uff1b 2\u3001\u5de5\u4f5c\u7ed9\u4f60\u7684\u4e0d\u4ec5\u662f\u62a5\u916c\uff0c\u8fd8\u6709\u5b66\u4e60\u3001\u6210\u957f\u7684\u673a\u4f1a\uff1b 3\u3001\u540c\u4e8b\u7ed9\u4e86\u4f60\u5de5\u4f5c\u4e2d\u7684\u914d\u5408\uff1b 4\u3001\u5ba2\u6237\u5e2e\u4f60\u521b\u9020\u4e86\u4e1a\u7ee9\uff1b 5\u3001\u5bf9\u624b\u8ba9\u4f60\u770b\u5230\u8ddd\u79bb\u548c\u53d1\u5c55\u7a7a\u95f4\uff1b 6\u3001\u6279\u8bc4\u8005\u8ba9\u4f60\u4e0d\u65ad\u5b8c\u5584\u81ea\u6211\u3002 \u5341\u4e09: \u4ec0\u4e48\u53eb\u5de5\u4f5c\u5230\u4f4d \u6c47\u62a5\u5de5\u4f5c\u8bf4\u7ed3\u679c \u8bf7\u793a\u5de5\u4f5c\u8bf4\u65b9\u6848\uff08\u8ba9\u9886\u5bfc\u505a\u9009\u62e9\u9898\u3001\u800c\u4e0d\u662f\u95ee\u7b54\u9898\uff09 \u603b\u7ed3\u5de5\u4f5c\u8bf4\u6d41\u7a0b \u5e03\u7f6e\u5de5\u4f5c\u8bf4\u6807\u51c6 \u5173\u5fc3\u4e0b\u5c5e\u95ee\u8fc7\u7a0b \u5341\u56db: \u5982\u4f55\u505a\u4e2a\u597d\u5458\u5de5 1 \u6709\u5f3a\u5927\u7684\u540c\u7406\u5fc3 2 \u542c\u8bdd\u3001\u51fa\u6d3b 2.1 \u505a\u4e8b\u8981\u6709\u4f9d\u636e, \u505a\u5b8c\u8981\u6709\u8bc1\u636e. 2.2 \u51e1\u4e8b\u6709\u4ea4\u4ee3\uff0c\u4ef6\u4ef6\u6709\u7740\u843d\uff0c\u4e8b\u4e8b\u6709\u56de\u97f3. 3 \u60f3\u8981\u4eba\u524d\u663e\u8d35\u3001\u5fc5\u987b\u80cc\u5730\u91cc\u53d7\u7f6a 4 \u80fd\u5fcd\u591a\u5927\u4e8b\u513f\uff0c\u5c31\u80fd\u6210\u591a\u5927\u4e8b\u513f 5 \u603b\u8eb2\u7740\u9886\u5bfc\uff0c\u4f60\u5c31\u5371\u9669\u4e86 6 \u5e2e\u52a9\u522b\u4eba\u5343\u4e07\u522b\u541d\u556c 7 \u76ee\u6807\u518d\u76ee\u6807\u3001\u91cf\u5316\u518d\u91cf\u5316 \u6ca1\u6709\u76ee\u6807\u7684\uff0c\u90fd\u4e0d\u53eb\u5de5\u4f5c\uff1b\u6ca1\u6709\u91cf\u5316\u7684\uff0c\u90fd\u4e0d\u53eb\u76ee\u6807\u3002 8 \u89e3\u51b3\u95ee\u9898\u662f\u6211\u7684\u4e49\u52a1, \u505a\u4e00\u4e2a\u95ee\u9898\u7ec8\u7ed3\u8005. 9 \u6ca1\u6709\u54ea\u4e2a\u884c\u4e1a\u7684\u94b1\u662f\u597d\u8d5a\u7684\u3002\u5e72\u5de5\u4f5c\u3001\u53d7\u70b9\u6c14\u662f\u6b63\u5e38\u7684\u3002 10 \u8d5a\u4e0d\u5230\u94b1\uff0c\u8d5a\u77e5\u8bc6\uff1b \u8d5a\u4e0d\u5230\u77e5\u8bc6\uff0c\u8d5a\u7ecf\u5386\uff1b\u8d5a\u4e0d\u5230\u7ecf\u5386\uff0c\u8d5a\u9605\u5386\uff1b \u4ee5\u4e0a\u90fd\u8d5a\u5230\u4e86 \u5c31\u4e0d\u53ef\u80fd\u8d5a\u4e0d\u5230\u94b1\u3002 \u5341\u4e94: \u8001\u677f\u671f\u671b\u7684\u7ed3\u679c 1 \u5458\u5de5\u9047\u5230\u4e86\u4ec0\u4e48\u95ee\u9898. \u7136\u540e\u53bb\u89e3\u51b3. 2 \u7528\u54ea\u4e2a\u6307\u6807\u8861\u91cf\u7ed3\u679c, \u5177\u4f53\u6570\u5b57\u662f\u591a\u5c11. \u6bd4\u5982\u6210\u529f\u7387\u4ece 50%\u63d0\u5347\u5230 70%. \u6bd4\u5982\u4e0b\u9762\u8fd9\u5f20\u56fe: 3 \u5982\u4f55\u901a\u7528\u5316\u5230\u5176\u4ed6\u66f4\u591a\u9879\u76ee\u3001\u66f4\u591a\u56e2\u961f. \u6bd4\u5982\u6210\u529f\u7387\u4ece 50%\u63d0\u5347\u5230 70%\u4e4b\u540e, \u5458\u5de5\u603b\u7ed3\u4e86\u4e00\u5957\u673a\u5236\u3001\u65b9\u6848\u4fdd\u6301\u4f4f\u6210\u529f\u7387, \u540c\u65f6\u4e5f\u53ef\u4ee5\u901a\u7528\u5316\u5e94\u7528\u5230\u5176\u4ed6\u9879\u76ee.","title":"\u7b2c\u4e00\u7bc7 \u5b66\u4e60\u5fc3\u5f97\u548c\u5de5\u4f5c\u7bb4\u8a00"},{"location":"chapter_8/1_xuexixinde/#_1","text":"\u672c\u7bc7\u535a\u5ba2\u7528\u4e8e\u8bb0\u5f55\u5728\u6280\u672f\u5b66\u4e60\u65b9\u9762\u7684\u4e00\u4e9b\u5fc3\u5f97\u4f53\u4f1a,\u671b\u8bfb\u8005\u591a\u591a\u53cd\u9988.","title":"\u8bf4\u660e"},{"location":"chapter_8/1_xuexixinde/#_2","text":"\u505a\u4e8b\u4e4b\u524d, \u9996\u5148\u6309\u300a\u9879\u76ee\u7ba1\u7406\u300b\u6587\u6863, \u5148\u548c\u9886\u5bfc\u3001\u540c\u4e8b\u5bf9\u9f50\u76ee\u6807, \u5bf9\u9f50\u76ee\u6807\u600e\u4e48\u8861\u91cf, \u62c6\u5206\u4efb\u52a1\u3001\u786e\u5b9a\u6392\u671f. \u719f\u6089\u65b0\u7cfb\u7edf\u3001\u65b0\u6a21\u5757\u65f6, \u5148\u76d8\u70b9\u68b3\u7406\u73b0\u72b6, \u7136\u540e\u53d1\u73b0\u5f85\u4f18\u5316\u70b9, \u7136\u540e\u5bf9\u9f50\u76ee\u6807\u8fdb\u884c\u4f18\u5316.","title":"\u4e00 \u4e2a\u4eba\u91cd\u70b9"},{"location":"chapter_8/1_xuexixinde/#_3","text":"","title":"\u4e8c \u5b66\u4e60\u65b9\u6cd5,\u5982\u4f55\u4fdd\u8bc1\u81ea\u5df1\u5b66\u7684\u6bd4\u522b\u4eba\u9ad8\u6548"},{"location":"chapter_8/1_xuexixinde/#_4","text":"\u6bd4\u5982\u770b\u4e00\u672c\u5f88\u539a\u7684\u4e66\u4f8b\u5982\u300a\u6df1\u5165 Linux \u5185\u6838\u67b6\u6784\u300b,\u7531\u4e8e\u5185\u5bb9\u5f88\u591a\u975e\u5e38\u96be\u4ee5\u4e00\u4e0b\u5b50\u5168\u90e8\u641e\u61c2,\u9700\u8981\u5148\u628a\u5185\u5bb9\u8bfb\u8584 \u4e5f\u5c31\u662f\u770b\u5b8c\u4e00\u4e2a\u7ae0\u8282\u5185\u5bb9\u540e\uff0c\u8fdb\u884c\u68b3\u7406\u3002\u4f8b\u5982\u770b\u5b8c\u4e2d\u65ad\u5904\u7406\uff0c\u8981\u603b\u7ed3\u6838\u5fc3\u6a21\u578b\uff0c\u6838\u5fc3\u51fd\u6570\uff0c\u753b\u51fa\u4ed6\u4eec\u4e4b\u95f4\u7684\u8054\u7cfb\u56fe \u4e0b\u6b21\u8981\u7528\u5230\u672c\u7ae0\u5185\u5bb9\u65f6\uff0c\u5148\u7528\u81ea\u5df1\u68b3\u7406\u7684\u8054\u7cfb\u56fe,\u9047\u5230\u89e3\u91ca\u4e0d\u901a\u7684\u5730\u65b9\u518d\u53bb\u67e5\u7ec6\u8282. \u6bd4\u5982 SQLAlchemy,\u5b83\u603b\u5171\u5c31\u63d0\u4f9b 2 \u4e2a system\uff0c\u5982\u679c\u7ec6\u5206\u7684\u8bdd\uff0c\u5b83\u53c8\u6709\u5f88\u591a\u5b50\u7cfb\u7edf(\u5b50\u7ec4\u4ef6),\u6211\u4eec\u8981\u5bf9\u4ed6\u4eec\u8fdb\u884c\u9010\u4e00\u7406\u89e3,\u5206\u7c7b\uff0c\u7136\u540e\u753b\u51fa\u4ed6\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u53e6\u5916\uff0c\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u628a\u81ea\u5df1\u60f3\u8c61\u6210 Linux \u7684\u67d0\u4e2a\u5b50\u7cfb\u7edf, \u4f8b\u5982\u4f60\u662f Linux \u7684\u5185\u5b58\u5b50\u7cfb\u7edf\u3001\u6216\u8005\u5185\u6838\u534f\u8bae\u6808, \u4f60\u4f1a\u5982\u4f55\u8bbe\u8ba1\u3001\u5b8c\u6210\u9ad8\u6548\u3001\u9ad8\u8d28\u91cf\u7684\u7ba1\u7406\u5de5\u4f5c, \u8fd9\u6837\u66f4\u52a0\u6709\u52a9\u4e8e\u4f60\u7406\u89e3\u5e95\u5c42\u6280\u672f\u77e5\u8bc6.","title":"\uff08\u4e00\uff09\u6838\u5fc3\u6982\u5ff5\u548c\u6838\u5fc3\u6d41\u7a0b\u68b3\u7406\u6cd5"},{"location":"chapter_8/1_xuexixinde/#_5","text":"\u5f53\u65f6\u89e3\u51b3\u4e86\u95ee\u9898\uff0c\u4f46\u662f\u540e\u9762\u8981\u7528\u5230\u522b\u7684\u5c0f\u77e5\u8bc6\uff0c\u901a\u5e38\u8fd9\u79cd\u60c5\u51b5\u8981\u80fd\u65b9\u4fbf\u7684\u67e5\u8be2\u540e\u9762\u7684\u5c0f\u77e5\u8bc6\u3002 \u4e3e\u4f8b: \u6bd4\u5982 html \u4ee3\u7801\u91cc\uff0c\u5b57\u4f53\u3001\u80cc\u666f\u7684\u989c\u8272\uff0c\u8981\u80fd\u5728\u81ea\u5df1\u7684\u7b14\u8bb0\u91cc\u65b9\u4fbf\u7684\u67e5\u8be2\u3002 \u6bd4\u5982 smarty \u8fd9\u79cd\u5e73\u65f6\u8981\u7528\u5230\u4f46\u53c8\u4e0d\u4e3b\u6d41\u7684\u8bed\u8a00\uff0c\u5176\u6240\u6709\u7684\u5185\u7f6e\u51fd\u6570\u8981\u80fd\u5feb\u901f\u67e5\u8be2\u5230\u3002 \u5b66\u4e00\u8fbe\u767e \u996e\u4e00\u6c34\u800c\u77e5\u6c5f\u6cb3\u4e4b\u6ecb\u5473\uff0c\u89c1\u4e00\u53f6\u800c\u77e5\u79cb\u4e4b\u5c06\u81f3","title":"(\u4e8c) \u4e3e\u4e00\u53cd\u4e09\u6cd5."},{"location":"chapter_8/1_xuexixinde/#_6","text":"\u6280\u672f\u77e5\u8bc6\u90a3\u4e48\u591a, \u5982\u6c6a\u6d0b\u5927\u6d77\u4e00\u822c, \u54ea\u4e9b\u624d\u662f\u5b66\u4e60\u7684\u91cd\u70b9\u548c\u65b9\u5411\u5462?","title":"\u4e09 \u5b66\u4e60\u65b9\u5411"},{"location":"chapter_8/1_xuexixinde/#1","text":"\u4e00\u5b9a\u8981\u5b66\u4ee5\u81f4\u7528\uff0c\u628a\u4e0d\u65b9\u4fbf\u7684\u5de5\u4f5c\u53d8\u6210\u65b9\u4fbf\u4e4b\u540e\uff0c\u8981\u60f3\u529e\u6cd5\u5f62\u6210\u901a\u7528\u5de5\u5177\uff0c\u63d0\u4f9b\u7ed9\u5176\u4ed6\u540c\u5b66\u4f7f\u7528\uff0c\u7ed9\u5176\u4ed6\u540c\u5b66\u4e5f\u5e26\u6765\u65b9\u4fbf. \u4e3e\u4e00\u4e9b\u4f8b\u5b50: \u4e00\u5f00\u59cb\u4e00\u4e9b\u91cd\u8981\u7684\u9879\u76ee\u4e0a\u7ebf\u4e4b\u524d\u6bcf\u4e2a\u9879\u76ee\u4f1a\u6709\u4e00\u4e2a excel \u8868\u683c\u505a\u4e0a\u7ebf\u524d\u7684\u68c0\u67e5\uff0c\u628a\u5b83\u6f14\u53d8\u4e3a\u4e00\u4e2a\u901a\u7528\u7684 Web \u5de5\u5177\uff0c \u7edf\u4e00\u8fed\u4ee3\u89c4\u8303\u3001\u7edf\u4e00\u7edf\u8ba1\u4e0a\u7ebf\u68c0\u67e5\u8fdb\u5ea6\u3001\u7ed3\u679c","title":"1 \u4ece\u5e73\u65f6\u7528\u7684\u4e0d\u65b9\u4fbf\u7684\u5730\u65b9\uff0c\u7740\u624b\u7814\u7a76\uff0c\u4f7f\u81ea\u5df1\u548c\u5927\u5bb6\u7528\u8d77\u6765\u65b9\u4fbf."},{"location":"chapter_8/1_xuexixinde/#2-sre","text":"","title":"2 \u4ece\u522b\u4eba\u8e29\u8fc7\u7684\u5751\u5b66\u4e60\uff0c\u4f8b\u5982\u5176\u4ed6 SRE \u53d1\u51fa\u6765\u7684\u6545\u969c\u62a5\u544a\uff0c\u907f\u514d\u81ea\u5df1\u8e29\u5751"},{"location":"chapter_8/1_xuexixinde/#3","text":"","title":"3 \u5f53\u4f60\u4ece\u6765\u6ca1\u6709\u5b9e\u73b0\u8fc7(\u62e5\u6709\u8fc7)\u67d0\u9879\u6280\u80fd\u65f6\uff0c\u4ece\u4f18\u79c0\u7684\u4eba\u3001\u4f18\u79c0\u7684\u4ea7\u54c1\u90a3\u91cc\u5b66\u4e60,\u591a\u548c\u4f18\u79c0\u7684\u3001\u4e13\u4e1a\u7684\u4eba\u4ea4\u6d41."},{"location":"chapter_8/1_xuexixinde/#_7","text":"\u53c2\u8003 \u300a\u6211\u5728\u7f8e\u56e2\u7684\u516b\u5e74\u300b \u4e0d\u7ba1\u4f60\u5728\u54ea\u91cc\u4e0a\u73ed\uff0c\u8bf7\u8bb0\u4f4f\u4ee5\u4e0b\u9ec4\u91d1\u5b9a\u5f8b \u8fd9\u6837\u7684\u5458\u5de5\u4e00\u5b9a\u4f1a\u6210\u4e3a\u9ad8\u7ba1 \u5982\u4f55\u505a\u4e00\u4e2a\u597d\u5458\u5de5","title":"\u56db \u597d\u7684\u4e60\u60ef"},{"location":"chapter_8/1_xuexixinde/#_8","text":"\u5355\u4f4d\u53ef\u80fd\u5f00\u9664\u6709\u80fd\u529b\u7684\u5458\u5de5\uff0c\u4f46\u5bf9\u4e00\u4e2a\u5fe0\u5fc3\u803f\u803f\u7684\u4eba\uff0c\u4e0d\u4f1a\u6709\u9886\u5bfc\u613f\u610f\u8ba9\u4ed6\u8d70\uff0c\u4ed6\u4f1a\u6210\u4e3a\u5355\u4f4d\u8fd9\u4e2a\u94c1\u6253\u8425\u76d8\u4e2d\u6700\u957f\u4e45\u7684\u6218\u58eb\uff0c\u800c\u4e14\u662f\u6700\u6709\u53d1\u5c55\u524d\u666f\u7684\u5458\u5de5\u3002 1\u3001\u7ad9\u5728\u8001\u677f\u7684\u7acb\u573a\u4e0a\u601d\u8003\u95ee\u9898\uff1b 2\u3001\u4e0e\u4e0a\u7ea7\u5206\u4eab\u4f60\u7684\u60f3\u6cd5\uff1b 3\u3001\u65f6\u523b\u7ef4\u62a4\u516c\u53f8\u7684\u5229\u76ca\uff1b 4\u3001\u7422\u78e8\u4e3a\u516c\u53f8\u8d5a\u94b1\uff1b 5\u3001\u5728\u5916\u754c\u8bf1\u60d1\u9762\u524d\u7ecf\u5f97\u8d77\u8003\u9a8c\u3002","title":"\u4e00\uff1a\u5fe0\u8bda\u2014\u2014\u5fe0\u5fc3\u8005\u4e0d\u88ab\u89e3\u96c7"},{"location":"chapter_8/1_xuexixinde/#_9","text":"\u968f\u7740\u793e\u4f1a\u8fdb\u6b65\uff0c\u4eba\u4eec\u7684\u77e5\u8bc6\u80cc\u666f\u8d8a\u6765\u8d8a\u8d8b\u540c\u3002\u5b66\u5386\u3001\u6587\u51ed\u5df2\u4e0d\u518d\u662f\u516c\u53f8\u6311\u9009\u5458\u5de5\u7684\u9996\u8981\u6761\u4ef6\u3002\u5f88\u591a\u516c\u53f8\u8003\u5bdf\u5458\u5de5\u7684\u7b2c\u4e00\u6761\u4ef6\u5c31\u662f\u656c\u4e1a\uff0c\u5176\u6b21\u624d\u662f\u4e13\u4e1a\u6c34\u5e73\u3002 1\u3001\u5de5\u4f5c\u7684\u76ee\u7684\u4e0d\u4ec5\u4ec5\u5728\u4e8e\u62a5\u916c\uff1b 2\u3001\u63d0\u4f9b\u8d85\u51fa\u62a5\u916c\u7684\u670d\u52a1\u4e0e\u52aa\u529b\uff1b 3\u3001\u4e50\u610f\u4e3a\u5de5\u4f5c\u4f5c\u51fa\u4e2a\u4eba\u727a\u7272\uff1b 4\u3001\u6a21\u7cca\u4e0a\u4e0b\u73ed\u6982\u5ff5\uff0c\u5b8c\u6210\u5de5\u4f5c\u518d\u8c08\u4f11\u606f\uff1b 5\u3001\u91cd\u89c6\u5de5\u4f5c\u4e2d\u7684\u6bcf\u4e00\u4e2a\u7ec6\u8282\u3002","title":"\u4e8c\uff1a\u656c\u4e1a\u2014\u2014\u6bcf\u5929\u6bd4\u8001\u677f\u591a\u505a\u4e00\u5c0f\u65f6"},{"location":"chapter_8/1_xuexixinde/#_10","text":"\u4e0d\u8981\u4e8b\u4e8b\u7b49\u4eba\u4ea4\u4ee3\uff0c\u4e00\u4e2a\u4eba\u53ea\u8981\u80fd\u81ea\u52a8\u81ea\u53d1\u5730\u505a\u597d\u4e00\u5207\uff0c\u54ea\u6015\u8d77\u70b9\u6bd4\u522b\u4eba\u4f4e\uff0c\u4e5f\u4f1a\u6709\u5f88\u5927\u7684\u53d1\u5c55\uff0c\u81ea\u53d1\u7684\u4eba\u6c38\u8fdc\u53d7\u8001\u677f\u6b22\u8fce\u3002 1\u3001\u4ece\u201c\u8981\u6211\u505a\u201d\u5230\u201c\u6211\u8981\u505a\u201d\uff1b 2\u3001\u4e3b\u52a8\u5206\u62c5\u4e00\u4e9b\u201c\u5206\u5916\u201d\u4e8b\uff1b 3\u3001\u5148\u505a\u540e\u8bf4\uff0c\u7ed9\u4e0a\u53f8\u60ca\u559c\uff1b 4\u3001\u5b66\u4f1a\u6bdb\u9042\u81ea\u8350\uff1b 5\u3001\u9ad8\u6807\u51c6\u8981\u6c42\uff1a\u8981\u6c42\u4e00\u6b65\uff0c\u505a\u5230\u4e09\u6b65\uff1b 6\u3001\u62ff\u634f\u597d\u4e3b\u52a8\u7684\u5c3a\u5ea6\uff0c\u4e0d\u8981\u6025\u4e8e\u8868\u73b0\u3001\u51fa\u98ce\u5934\u751a\u81f3\u62a2\u522b\u4eba\u7684\u5de5\u4f5c\u3002","title":"\u4e09\uff1a\u81ea\u52a8\u81ea\u53d1\u2014\u2014\u4e0d\u8981\u4e8b\u4e8b\u7b49\u4eba\u4ea4\u4ee3"},{"location":"chapter_8/1_xuexixinde/#_11","text":"\u52c7\u4e8e\u627f\u62c5\u8d23\u4efb\u7684\u4eba\uff0c\u5bf9\u4f01\u4e1a\u6709\u7740\u91cd\u8981\u7684\u610f\u4e49\uff0c\u4e00\u4e2a\u4eba\u5de5\u4f5c\u80fd\u529b\u53ef\u4ee5\u6bd4\u522b\u4eba\u5dee\uff0c\u4f46\u662f\u4e00\u5b9a\u4e0d\u80fd\u7f3a\u4e4f\u8d23\u4efb\u611f\uff0c\u51e1\u4e8b\u63a8\u4e09\u963b\u56db\u3001\u627e\u5ba2\u89c2\u539f\u56e0\uff0c\u800c\u4e0d\u53cd\u601d\u81ea\u5df1\uff0c\u4e00\u5b9a\u4f1a\u5931\u53bb\u4e0a\u7ea7\u7684\u4fe1\u4efb\u3002 1\u3001\u8d23\u4efb\u7684\u6838\u5fc3\u5728\u4e8e\u8d23\u4efb\u5fc3\uff1b 2\u3001\u628a\u6bcf\u4e00\u4ef6\u5c0f\u4e8b\u90fd\u505a\u597d\uff1b 3\u3001\u8a00\u5fc5\u4fe1\uff0c\u884c\u5fc5\u679c\uff1b 4\u3001\u9519\u5c31\u662f\u9519\uff0c\u7edd\u5bf9\u4e0d\u8981\u627e\u501f\u53e3\uff1b 5\u3001\u8ba9\u95ee\u9898\u7684\u76ae\u7403\u81f3\u4e8e\u4f60\uff1b 6\u3001\u4e0d\u56e0\u4e00\u70b9\u758f\u5ffd\u800c\u94f8\u6210\u5927\u9519\u3002","title":"\u56db\uff1a\u8d1f\u8d23\u2014\u2014\u7edd\u5bf9\u6ca1\u6709\u501f\u53e3\uff0c\u4fdd\u8bc1\u5b8c\u6210\u4efb\u52a1"},{"location":"chapter_8/1_xuexixinde/#_12","text":"\u9ad8\u6548\u7684\u5de5\u4f5c\u4e60\u60ef\u662f\u6bcf\u4e2a\u53ef\u671b\u6210\u529f\u7684\u4eba\u6240\u5fc5\u5907\u7684\uff0c\u4e5f\u662f\u6bcf\u4e2a\u5355\u4f4d\u90fd\u975e\u5e38\u770b\u91cd\u7684\u3002 1\u3001\u8ddf\u7a77\u5fd9\u3001\u778e\u5fd9\u8bf4\u201c\u518d\u89c1\u201d\uff1b 2\u3001\u5fc3\u65e0\u65c1\u9a9b\uff0c\u4e13\u5fc3\u81f4\u5fd7\uff1b 3\u3001\u91cf\u5316\u3001\u7ec6\u5316\u6bcf\u5929\u7684\u5de5\u4f5c\uff1b 4\u3001\u62d6\u5ef6\u662f\u6700\u72e0\u6bd2\u7684\u804c\u4e1a\u6740\u624b\uff1b 5\u3001\u7262\u8bb0\u4f18\u5148\uff0c\u8981\u4e8b\u7b2c\u4e00\uff1b 6\u3001\u9632\u6b62\u5b8c\u7f8e\u4e3b\u4e49\u6210\u4e3a\u6548\u7387\u7684\u5927\u654c\u3002","title":"\u4e94\uff1a\u6ce8\u91cd\u6548\u7387\u2014\u2014\u7b97\u7b97\u4f60\u7684\u4f7f\u7528\u6210\u672c"},{"location":"chapter_8/1_xuexixinde/#_13","text":"\u201c\u65e0\u8bba\u9ed1\u732b\u3001\u767d\u732b\uff0c\u6293\u5f97\u5230\u8001\u9f20\u5c31\u662f\u597d\u732b\uff01\u201d\uff0c\u65e0\u8bba\u82e6\u5e72\u3001\u5de7\u5e72\uff0c\u51fa\u6210\u7ee9\u7684\u5458\u5de5\u624d\u4f1a\u53d7\u5230\u4f17\u4eba\u7684\u80af\u5b9a\u3002\u4f01\u4e1a\u91cd\u89c6\u7684\u662f\u4f60\u6709\u591a\u5c11\u201c\u529f\u201d\uff0c\u800c\u4e0d\u662f\u6709\u591a\u5c11\u201c\u82e6\u201d\u3002 1\u3001\u4e00\u5f00\u59cb\u5c31\u8981\u60f3\u600e\u6837\u628a\u4e8b\u60c5\u505a\u6210\uff1b 2\u3001\u529e\u6cd5\u6c38\u8fdc\u8981\u6bd4\u95ee\u9898\u591a\uff1b 3\u3001\u806a\u660e\u5730\u5de5\u4f5c\u800c\u4e0d\u4ec5\u4ec5\u662f\u52aa\u529b\u5de5\u4f5c\uff1b 4\u3001\u6ca1\u6709\u6761\u4ef6\uff0c\u5c31\u521b\u9020\u6761\u4ef6\uff1b 5\u3001\u628a\u4efb\u52a1\u5b8c\u6210\u5f97\u8d85\u51fa\u9884\u671f\u3002","title":"\u516d\uff1a\u7ed3\u679c\u5bfc\u5411\u2014\u2014\u54ac\u5b9a\u529f\u52b3\uff0c\u4e0d\u770b\u82e6\u52b3"},{"location":"chapter_8/1_xuexixinde/#_14","text":"\u4e0d\u597d\u6c9f\u901a\u8005\uff0c\u5373\u4fbf\u81ea\u5df1\u518d\u6709\u624d\uff0c\u4e5f\u53ea\u662f\u4e00\u4e2a\u4eba\u7684\u624d\u5e72\uff0c\u65e2\u4e0d\u80fd\u4f20\u627f\uff0c\u53c8\u65e0\u6cd5\u8fdb\u6b65\uff1b\u597d\u6c9f\u901a\u8005\uff0c\u54ea\u6015\u5f88\u5e73\u5eb8\uff0c\u4e5f\u53ef\u4ee5\u8fb9\u5e72\u8fb9\u5b66\uff0c\u6700\u7ec8\u5b9e\u73b0\u81ea\u5df1\u7684\u4ef7\u503c\u3002 1\u3001\u6c9f\u901a\u548c\u516b\u5366\u662f\u4e24\u56de\u4e8b\uff1b 2\u3001\u4e0d\u8bf4\u548c\u8bf4\u5f97\u8fc7\u591a\u90fd\u662f\u4e00\u79cd\u9519\uff1b 3\u3001\u5e26\u7740\u65b9\u6848\u53bb\u63d0\u95ee\u9898\uff0c\u5f53\u9762\u6c9f\u901a\uff0c\u5f53\u573a\u89e3\u51b3\uff1b 4\u3001\u57f9\u517b\u63a5\u53d7\u6279\u8bc4\u7684\u60c5\u5546\uff1b 5\u3001\u80f8\u6000\u5927\u5c40\uff0c\u65e2\u62a5\u559c\u4e5f\u62a5\u5fe7\uff1b 6\u3001\u5185\u90e8\u53ef\u4ee5\u6709\u77db\u76fe\uff0c\u5bf9\u5916\u4e00\u5b9a\u8981\u4e00\u81f4\u3002","title":"\u4e03\uff1a\u5584\u4e8e\u6c9f\u901a\u2014\u2014\u5f53\u9762\u5f00\u53e3\uff0c\u5f53\u573a\u89e3\u51b3"},{"location":"chapter_8/1_xuexixinde/#_15","text":"\u56e2\u961f\u63d0\u524d\uff0c\u81ea\u6211\u9000\u540e\u3002\u4e0d\u7ba1\u4e2a\u4eba\u80fd\u529b\u591a\u5f3a\uff0c\u53ea\u8981\u4f24\u5bb3\u5230\u56e2\u961f\uff0c\u516c\u53f8\u51b3\u4e0d\u4f1a\u8ba9\u4f60\u4e45\u7559\u2014\u2014\u4e0d\u8981\u8ba4\u4e3a\u7f3a\u4e86\u4f60\u4e00\u4e2a\uff0c\u56e2\u961f\u5c31\u65e0\u6cd5\u8fd0\u8f6c\uff01 1\u3001\u6ef4\u6c34\u878d\u5165\u5927\u6d77\uff0c\u4e2a\u4eba\u878d\u5165\u56e2\u961f\uff1b 2\u3001\u670d\u4ece\u603b\u4f53\u5b89\u6392\uff1b 3\u3001\u9075\u5b88\u7eaa\u5f8b\u624d\u80fd\u4fdd\u8bc1\u6218\u6597\u529b\uff1b 4\u3001\u4e0d\u505a\u56e2\u961f\u7684\u201c\u77ed\u677f\u201d\uff0c\u5982\u679c\u73b0\u5728\u662f\uff0c\u5c31\u8981\u7ed9\u81ea\u5df1\u201c\u589e\u9ad8\u201d\uff1b 5\u3001\u591a\u4e3a\u522b\u4eba\u3001\u4e3a\u56e2\u961f\u8003\u8651\u3002","title":"\u516b\uff1a\u5408\u4f5c\u2014\u2014\u56e2\u961f\u63d0\u524d\uff0c\u81ea\u6211\u9000\u540e"},{"location":"chapter_8/1_xuexixinde/#_16","text":"\u4e2a\u4eba\u6c38\u8fdc\u8981\u8ddf\u4e0a\u4f01\u4e1a\u7684\u6b65\u4f10\uff0c\u4f01\u4e1a\u6c38\u8fdc\u8981\u8ddf\u4e0a\u5e02\u573a\u7684\u6b65\u4f10\uff1b\u65e0\u8bba\u662f\u804c\u573a\u8fd8\u662f\u5e02\u573a\uff0c\u65e0\u8bba\u662f\u4e2a\u4eba\u8fd8\u662f\u4f01\u4e1a\uff0c\u53c2\u4e0e\u8005\u90fd\u4e0d\u5e0c\u671b\u88ab\u6dd8\u6c70\u3002\u4e3a\u6b64\u5c31\u4e00\u5b9a\u8981\u524d\u8fdb\uff0c\u505c\u5c31\u610f\u5473\u7740\u653e\u5f03\uff0c\u610f\u5473\u7740\u51fa\u5c40\uff01 1\u3001\u4ee5\u7a7a\u676f\u5fc3\u6001\u53bb\u5b66\u4e60\u3001\u53bb\u6c72\u53d6\uff1b 2\u3001\u4e0d\u8981\u603b\u751f\u6c14\uff0c\u800c\u8981\u4e89\u6c14\uff1b 3\u3001\u4e0d\u8981\u4e00\u5e74\u7ecf\u9a8c\u91cd\u590d\u7528\u5341\u5e74\uff1b 4\u3001\u6324\u65f6\u95f4\u7ed9\u81ea\u5df1\u201c\u589e\u9ad8\u201d\u3001\u201c\u5145\u7535\u201d\uff1b 5\u3001\u53d1\u5c55\u81ea\u5df1\u7684\u201c\u6bd4\u8f83\u4f18\u52bf\u201d\uff1b 6\u3001\u6311\u6218\u81ea\u6211\uff0c\u672a\u96e8\u7ef8\u7f2a\u3002","title":"\u4e5d\uff1a\u79ef\u6781\u8fdb\u53d6\u2014\u2014\u6c38\u8fdc\u8ddf\u4e0a\u4f01\u4e1a\u7684\u6b65\u4f10"},{"location":"chapter_8/1_xuexixinde/#_17","text":"\u624d\u9ad8\u4e0d\u5fc5\u81ea\u50b2\uff0c\u4e0d\u8981\u4ee5\u4e3a\u81ea\u5df1\u4e0d\u8bf4\u3001\u4e0d\u5ba3\u626c\uff0c\u522b\u4eba\u5c31\u770b\u4e0d\u5230\u4f60\u7684\u529f\u52b3\u3002\u6240\u4ee5\u522b\u5728\u540c\u4e8b\u9762\u524d\u70ab\u8000\u3002 1\u3001\u4e0d\u8981\u9080\u529f\u8bf7\u8d4f\uff1b 2\u3001\u514b\u670d\u201c\u5927\u6750\u5c0f\u7528\u201d\u7684\u5fc3\u7406\uff1b 3\u3001\u4e0d\u8981\u6446\u67b6\u5b50\u800d\u8d44\u683c\uff1b 4\u3001\u51e1\u662f\u4eba\uff0c\u7686\u987b\u656c\uff1b 5\u3001\u52aa\u529b\u505a\u5230\u540d\u5b9e\u76f8\u7b26\uff0c\u8981\u914d\u7684\u4e0a\u81ea\u5df1\u7684\u4f4d\u7f6e\uff1b 6\u3001\u6210\u7ee9\u53ea\u662f\u5f00\u59cb\uff0c\u8363\u8a89\u5f53\u4f5c\u52a8\u529b\u3002","title":"\u5341\uff1a\u4f4e\u8c03\u2014\u2014\u624d\u9ad8\u4e0d\u5fc5\u81ea\u50b2"},{"location":"chapter_8/1_xuexixinde/#_18","text":"\u8282\u7ea6\u4e0d\u662f\u62a0\u95e8\uff0c\u800c\u662f\u7f8e\u5fb7\u3002\u4e0d\u8981\u628a\u516c\u53f8\u7684\u94b1\u4e0d\u5f53\u94b1\uff0c\u516c\u53f8\u201c\u9505\u201d\u91cc\u6709\uff0c\u5458\u5de5\u201c\u7897\u201d\u91cc\u624d\u6709\uff1b\u540c\u6837\uff0c\u201c\u9505\u201d\u91cc\u591a\uff0c\u201c\u7897\u201d\u91cc\u4e5f\u81ea\u7136\u5c31\u591a\u3002\u800c\u638c\u52fa\u7684\uff0c\u6070\u6070\u5c31\u662f\u4f60\u81ea\u5df1\u30021\u3001\u62a5\u9500\u8d26\u76ee\uff0c\u4e00\u5b9a\u8981\u8bda\u4fe1\uff1b 2\u3001\u4e0d\u800d\u5c0f\u806a\u660e\uff0c\u4e0d\u8d2a\u5c0f\u4fbf\u5b9c\uff1b 3\u3001\u4e0d\u6d6a\u8d39\u516c\u53f8\u7684\u8d44\u6e90\uff0c\u54ea\u6015\u662f\u4e00\u5f20\u7eb8\uff1b 4\u3001\u73cd\u60dc\u5de5\u4f5c\u7684\u6bcf\u4e00\u5206\u949f\u65f6\u95f4\uff1b 5\u3001\u6bcf\u4ed8\u51fa\u6210\u672c\uff0c\u90fd\u8981\u529b\u4e89\u6700\u5927\u6536\u76ca\uff1b 6\u3001\u8bb0\u4f4f\uff1a\u7701\u4e0b\u7684\uff0c\u5c31\u662f\u5229\u6da6\uff01","title":"\u5341\u4e00\uff1a\u8282\u7ea6\u2014\u2014\u522b\u628a\u8001\u677f\u7684\u94b1\u4e0d\u5f53\u94b1"},{"location":"chapter_8/1_xuexixinde/#_19","text":"\u4e3a\u4ec0\u4e48\u6211\u4eec\u80fd\u5141\u8bb8\u81ea\u5df1\u7684\u8fc7\u5931\uff0c\u5374\u5bf9\u4ed6\u4eba\u3001\u5bf9\u516c\u53f8\u6709\u8fd9\u4e48\u591a\u7684\u62b1\u6028\uff1f\u518d\u6709\u624d\u534e\u7684\u4eba\uff0c\u4e5f\u9700\u8981\u522b\u4eba\u7ed9\u4f60\u505a\u4e8b\u7684\u673a\u4f1a\uff0c\u4e5f\u9700\u8981\u4ed6\u4eba\u5bf9\u4f60\u6216\u5927\u6216\u5c0f\u7684\u5e2e\u52a9\u3002\u4f60\u73b0\u5728\u7684\u5e78\u798f\u4e0d\u662f\u4f60\u4e00\u4e2a\u4eba\u5c31\u80fd\u6210\u5c31\u7684\u3002 1\u3001\u8001\u677f\u7ed9\u4e86\u4f60\u996d\u7897\uff1b 2\u3001\u5de5\u4f5c\u7ed9\u4f60\u7684\u4e0d\u4ec5\u662f\u62a5\u916c\uff0c\u8fd8\u6709\u5b66\u4e60\u3001\u6210\u957f\u7684\u673a\u4f1a\uff1b 3\u3001\u540c\u4e8b\u7ed9\u4e86\u4f60\u5de5\u4f5c\u4e2d\u7684\u914d\u5408\uff1b 4\u3001\u5ba2\u6237\u5e2e\u4f60\u521b\u9020\u4e86\u4e1a\u7ee9\uff1b 5\u3001\u5bf9\u624b\u8ba9\u4f60\u770b\u5230\u8ddd\u79bb\u548c\u53d1\u5c55\u7a7a\u95f4\uff1b 6\u3001\u6279\u8bc4\u8005\u8ba9\u4f60\u4e0d\u65ad\u5b8c\u5584\u81ea\u6211\u3002","title":"\u5341\u4e8c\uff1a\u611f\u6069\u2014\u2014\u60f3\u60f3\u662f\u8c01\u6210\u5c31\u4e86\u4eca\u5929\u7684\u4f60"},{"location":"chapter_8/1_xuexixinde/#_20","text":"\u6c47\u62a5\u5de5\u4f5c\u8bf4\u7ed3\u679c \u8bf7\u793a\u5de5\u4f5c\u8bf4\u65b9\u6848\uff08\u8ba9\u9886\u5bfc\u505a\u9009\u62e9\u9898\u3001\u800c\u4e0d\u662f\u95ee\u7b54\u9898\uff09 \u603b\u7ed3\u5de5\u4f5c\u8bf4\u6d41\u7a0b \u5e03\u7f6e\u5de5\u4f5c\u8bf4\u6807\u51c6 \u5173\u5fc3\u4e0b\u5c5e\u95ee\u8fc7\u7a0b","title":"\u5341\u4e09: \u4ec0\u4e48\u53eb\u5de5\u4f5c\u5230\u4f4d"},{"location":"chapter_8/1_xuexixinde/#_21","text":"1 \u6709\u5f3a\u5927\u7684\u540c\u7406\u5fc3 2 \u542c\u8bdd\u3001\u51fa\u6d3b 2.1 \u505a\u4e8b\u8981\u6709\u4f9d\u636e, \u505a\u5b8c\u8981\u6709\u8bc1\u636e. 2.2 \u51e1\u4e8b\u6709\u4ea4\u4ee3\uff0c\u4ef6\u4ef6\u6709\u7740\u843d\uff0c\u4e8b\u4e8b\u6709\u56de\u97f3. 3 \u60f3\u8981\u4eba\u524d\u663e\u8d35\u3001\u5fc5\u987b\u80cc\u5730\u91cc\u53d7\u7f6a 4 \u80fd\u5fcd\u591a\u5927\u4e8b\u513f\uff0c\u5c31\u80fd\u6210\u591a\u5927\u4e8b\u513f 5 \u603b\u8eb2\u7740\u9886\u5bfc\uff0c\u4f60\u5c31\u5371\u9669\u4e86 6 \u5e2e\u52a9\u522b\u4eba\u5343\u4e07\u522b\u541d\u556c 7 \u76ee\u6807\u518d\u76ee\u6807\u3001\u91cf\u5316\u518d\u91cf\u5316 \u6ca1\u6709\u76ee\u6807\u7684\uff0c\u90fd\u4e0d\u53eb\u5de5\u4f5c\uff1b\u6ca1\u6709\u91cf\u5316\u7684\uff0c\u90fd\u4e0d\u53eb\u76ee\u6807\u3002 8 \u89e3\u51b3\u95ee\u9898\u662f\u6211\u7684\u4e49\u52a1, \u505a\u4e00\u4e2a\u95ee\u9898\u7ec8\u7ed3\u8005. 9 \u6ca1\u6709\u54ea\u4e2a\u884c\u4e1a\u7684\u94b1\u662f\u597d\u8d5a\u7684\u3002\u5e72\u5de5\u4f5c\u3001\u53d7\u70b9\u6c14\u662f\u6b63\u5e38\u7684\u3002 10 \u8d5a\u4e0d\u5230\u94b1\uff0c\u8d5a\u77e5\u8bc6\uff1b \u8d5a\u4e0d\u5230\u77e5\u8bc6\uff0c\u8d5a\u7ecf\u5386\uff1b\u8d5a\u4e0d\u5230\u7ecf\u5386\uff0c\u8d5a\u9605\u5386\uff1b \u4ee5\u4e0a\u90fd\u8d5a\u5230\u4e86 \u5c31\u4e0d\u53ef\u80fd\u8d5a\u4e0d\u5230\u94b1\u3002","title":"\u5341\u56db: \u5982\u4f55\u505a\u4e2a\u597d\u5458\u5de5"},{"location":"chapter_8/1_xuexixinde/#_22","text":"1 \u5458\u5de5\u9047\u5230\u4e86\u4ec0\u4e48\u95ee\u9898. \u7136\u540e\u53bb\u89e3\u51b3. 2 \u7528\u54ea\u4e2a\u6307\u6807\u8861\u91cf\u7ed3\u679c, \u5177\u4f53\u6570\u5b57\u662f\u591a\u5c11. \u6bd4\u5982\u6210\u529f\u7387\u4ece 50%\u63d0\u5347\u5230 70%. \u6bd4\u5982\u4e0b\u9762\u8fd9\u5f20\u56fe: 3 \u5982\u4f55\u901a\u7528\u5316\u5230\u5176\u4ed6\u66f4\u591a\u9879\u76ee\u3001\u66f4\u591a\u56e2\u961f. \u6bd4\u5982\u6210\u529f\u7387\u4ece 50%\u63d0\u5347\u5230 70%\u4e4b\u540e, \u5458\u5de5\u603b\u7ed3\u4e86\u4e00\u5957\u673a\u5236\u3001\u65b9\u6848\u4fdd\u6301\u4f4f\u6210\u529f\u7387, \u540c\u65f6\u4e5f\u53ef\u4ee5\u901a\u7528\u5316\u5e94\u7528\u5230\u5176\u4ed6\u9879\u76ee.","title":"\u5341\u4e94: \u8001\u677f\u671f\u671b\u7684\u7ed3\u679c"},{"location":"chapter_8/2_bangzhuqitatongxue/","text":"\u6982\u8ff0 \u4e00 \u5982\u4f55\u5e2e\u52a9\u540c\u5b66\u63d0\u5347\u6280\u672f\u80fd\u529b(\u4e13\u4e1a\u80fd\u529b) \u68b3\u7406\u6bcf\u4f4d\u540c\u5b66\u7684\u957f\u5904 \u628a\u4e00\u4e9b\u96be\u70b9\u7684\u4efb\u52a1\u4ea4\u7ed9\u4ed6\u4eec\u53bb\u505a,\u8fc7\u7a0b\u4e2d\u63d0\u4f9b\u76f8\u5e94\u5e2e\u52a9,\u4ea4\u4ed8\u540e\u4e00\u5b9a\u8981\u68c0\u67e5\u6548\u679c \u4e25\u683c\u5c31\u662f\u5927\u7231 \u4e8c \u5177\u4f53\u5c97\u4f4d\u80dc\u4efb\u529b\u8bc4\u4ef7\u4f53\u7cfb \u8bc4\u4ef7\u7684\u51e0\u4e2a\u65b9\u9762: \u62db\u8058\u65f6\u8003\u6838\u7684\u80fd\u529b: \u5165\u804c\u540e\u6bd4\u4e13\u4e1a\u80fd\u529b\u66f4\u52a0\u91cd\u8981\u7684\u4e09\u4e2a\u80fd\u529b: 1\u3001\u6c9f\u901a\u8868\u8fbe\u80fd\u529b \u6c9f\u901a\u80fd\u529b\u6709\u4ee5\u4e0b\u4e24\u5c42\u5883\u754c\uff1a \u7b2c\u4e00\uff0c\u6709\u6761\u7406\u6709\u903b\u8f91\u3002 \u8bf4\u4e00\u4ef6\u4e8b\u65f6\u8981\u6709\u6761\u7406\uff0c\u6709\u903b\u8f91\uff0c\u80fd\u7528\u6e05\u6670\u7684\u8bed\u8a00\u8868\u8fbe\u51fa\u6765\u3002\u53ef\u662f\u5f88\u591a\u7a0b\u5e8f\u5458\u4e60\u60ef\u7528\u6280\u672f\u8bed\u8a00\u53bb\u8ddf\u5176\u4ed6\u9886\u57df\u7684\u4eba\u6c9f\u901a\uff0c\u6682\u4e14\u4e0d\u8c08\u8bed\u8a00\u6761\u7406\u548c\u903b\u8f91\uff0c\u8fd9\u79cd\u6c9f\u901a\u5c31\u662f\u65e0\u6548\u7684\uff0c\u56e0\u4e3a\u9e21\u540c\u9e2d\u8bb2\u3002 \u7b2c\u4e8c\uff0c\u8981\u5b66\u4f1a\u62bd\u8c61\u548c\u5f52\u7eb3\u3002 \u5728\u8ddf\u4ed6\u4eba\u6c9f\u901a\u65f6\uff0c\u4e0d\u8981\u4e1c\u4e00\u6994\u5934\u897f\u4e00\u68d2\u69cc\uff0c\u4e00\u4f1a\u63cf\u8ff0\u7ec6\u8282\uff0c\u4e00\u4f1a\u53c8\u6982\u62ec\u63cf\u8ff0\u3002\u600e\u4e48\u505a\u5462\uff1f\u8981\u628a\u6280\u672f\u6982\u5ff5\u62bd\u8c61\u51fa\u6765\uff0c\u5e76\u4e14\u6982\u62ec\u63d0\u70bc\u4f60\u8981\u8bf4\u7684\u5185\u5bb9\uff0c\u8fd9\u6837\u5bf9\u65b9\u5c31\u80fd\u5feb\u901f\u7406\u89e3\u4f60\u8981\u8868\u8fbe\u7684\u610f\u601d\uff0c\u5982\u679c\u6d89\u53ca\u5230\u7ec6\u8282\uff0c\u518d\u5c55\u5f00\u6765\u8bb2\u3002 2\u3001\u4e1a\u52a1\u80fd\u529b \u51e0\u4e4e\u6240\u6709\u7684\u516c\u53f8\u90fd\u662f\u4e1a\u52a1\u4e3a\u738b\uff0c\u6240\u4ee5\u719f\u6089\u4e1a\u52a1\u975e\u5e38\u91cd\u8981\uff0c\u6211\u8ba4\u4e3a\u51fa\u8272\u7684\u4e1a\u52a1\u80fd\u529b\u81f3\u5c11\u8981\u719f\u6089\u81ea\u5df1\u8d1f\u8d23\u7684\u9879\u76ee\u6838\u5fc3\u4e1a\u52a1\u6d41\u7a0b\u4ee5\u53ca\u4e86\u89e3\u4e0a\u4e0b\u6e38\u7cfb\u7edf\uff0c\u518d\u8005\u4e0d\u719f\u6089\u4e1a\u52a1\uff0c\u60f3\u5199\u51fa\u53ef\u590d\u7528\u3001\u53ef\u6269\u5c55\u7684\u4ee3\u7801\u90a3\u90fd\u662f\u5929\u65b9\u591c\u8c2d\u3002 \u53e6\u5916\uff0c\u4f60\u53ef\u4ee5\u770b\u770b\u516c\u53f8\u67b6\u6784\u5e08/\u603b\u76d1/CTO\uff0c\u90fd\u662f\u4e1a\u52a1\u9ad8\u624b\uff5e 3\u3001\u5411\u4e0a\u7ba1\u7406\u80fd\u529b \u8fc7\u6765\u4eba\u90fd\u77e5\u9053\uff0c\u5411\u4e0a\u7ba1\u7406\u6bd4\u6280\u672f\u80fd\u529b\u91cd\u8981\u5f97\u591a\uff0c\u6b63\u5e94\u4e86\u90a3\u5c31\u8bdd\u2014\u2014\u57cb\u5934\u82e6\u5e72\u4e0d\u62ac\u5934\u770b\u5929\u662f\u80af\u5b9a\u4e0d\u884c\u7684\uff01 \u90a3\u4e48\u5982\u4f55\u505a\u597d\u5411\u4e0a\u7ba1\u7406\u5462\uff1f\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u4ee5\u4e0b\u4e09\u6b65\u6cd5\uff1a \u505a\u4e8b\u524d\u548c\u9886\u5bfc\u7edf\u4e00\u76ee\u6807\u548c\u6280\u672f\u65b9\u6848 \u505a\u4e8b\u4e2d\u548c\u9886\u5bfc\u6c47\u62a5\u8fdb\u5ea6 \u505a\u4e8b\u540e\u505a\u597d\u4e2a\u4eba\u590d\u76d8\u603b\u7ed3\u5e76\u6c47\u62a5\u3002 \u4e09 \u5927\u5382\u5bf9\u4e8e\u5458\u5de5\u7684\u5206\u7c7b \u56db \u5173\u4e8e\u76ee\u6807\u5236\u5b9a\u7684 SMART \u539f\u5219 SMART\uff08\u806a\u660e\uff09\u539f\u5219\u5c06\u76ee\u6807\u4e00\u5171\u5206\u4e3a\u4e94\u4e2a\u7ef4\u5ea6\uff0c\u5373: \u76ee\u6807\u5fc5\u987b\u662f \u5177\u4f53\u7684 \uff08Specific\uff09, \u4e3a\u4e86\u5b9e\u73b0\u76ee\u6807\uff0c\u4f60\u7684\u884c\u52a8\u8ba1\u5212\u662f\u5426\u6e05\u6670\uff1f\u8981\u6709\u660e\u786e\u7684\u8def\u5f84. \u76ee\u6807\u5fc5\u987b\u662f \u53ef\u4ee5\u8861\u91cf\u7684 \uff08Measurable\uff09, \u76ee\u6807\u4e00\u5b9a\u662f\u53ef\u91cf\u5316\u7684 \u76ee\u6807\u5fc5\u987b\u662f \u53ef\u4ee5\u8fbe\u5230\u7684 \uff08Attainable\uff09, \u76ee\u6807\u5b9e\u73b0\u7684\u53ef\u884c\u6027\u6709\u591a\u5927? \u76ee\u6807\u5fc5\u987b\u548c\u5176\u4ed6\u76ee\u6807\u5177 \u6709\u76f8\u5173\u6027 \uff08Relevant\uff09, \u8be5\u76ee\u6807\u662f\u5426\u548c\u4f60\u4e0a\u7ea7\u7684\u76ee\u6807\u5177\u6709\u5173\u8054? \u76ee\u6807\u5fc5\u987b\u5177 \u6709\u660e\u786e\u7684\u622a\u6b62\u671f\u9650 \uff08Time-based\uff09, \u6709\u4e86\u5b9e\u73b0\u76ee\u6807\u7684\u8def\u5f84,\u8fd8\u9700\u8981\u6709\u5173\u952e\u65f6\u95f4\u8282\u70b9, \u6709\u4e00\u4e2a\u660e\u786e\u7684\u65f6\u95f4\u8f74 \u4e94 \u5de5\u4f5c\u80fd\u529b\u63d0\u5347\u8def\u5f84 \u600e\u4e48\u6837\u624d\u7b97\u662f\u4e00\u4e2a\u4eba\u624d \u89d2\u5ea6 1 - \u9762\u8bd5 1 \u6280\u672f\u5f88\u5389\u5bb3, \u8d85\u8fc7\u73b0\u6709\u56e2\u961f\u5e73\u5747\u6c34\u5e73 2 \u9879\u76ee\u7ecf\u5386\u5f88\u9ad8\u5927\u4e0a 3 \u901a\u4eba\u6027\u3001\u4f1a\u8bf4\u8bdd(\u8bf4\u8bdd\u8bf4\u5230\u4eba\u5fc3\u574e\u91cc) 4 \u5bf9\u9886\u5bfc\u5fe0\u8bda \u89d2\u5ea6 2 - \u5f80\u6280\u672f Leader \u65b9\u5411 1 \u4e00\u5957\u7ba1\u7406\u80fd\u529b\u3001\u5e26\u56e2\u961f\u65b9\u6cd5\u8bba 2 \u4e0e\u65f6\u4ff1\u8fdb\u7684\u786c\u6838\u6280\u672f\u80fd\u529b, \u7cbe\u901a\u5f53\u4e0b\u4e3b\u6d41\u6280\u672f(\u6bd4\u5982 Linux \u5185\u6838\u3001\u4e91\u539f\u751f) 3 SRE \u7a33\u5b9a\u6027\u7406\u8bba\uff08\u505a\u7a33\u5b9a\u6027\u7684\u5fc3\u6cd5, \u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u505a\u8be5\u5c97\u4f4d\u7684\u5fc3\u6cd5) 4 \u9879\u76ee\u7ba1\u7406\u80fd\u529b\u3001\u903b\u8f91\u601d\u7ef4\u5f3a","title":"\u7b2c\u4e8c\u7bc7 \u5de5\u4f5c\u80fd\u529b\u8bc4\u4ef7\u4f53\u7cfb"},{"location":"chapter_8/2_bangzhuqitatongxue/#_1","text":"","title":"\u6982\u8ff0"},{"location":"chapter_8/2_bangzhuqitatongxue/#_2","text":"\u68b3\u7406\u6bcf\u4f4d\u540c\u5b66\u7684\u957f\u5904 \u628a\u4e00\u4e9b\u96be\u70b9\u7684\u4efb\u52a1\u4ea4\u7ed9\u4ed6\u4eec\u53bb\u505a,\u8fc7\u7a0b\u4e2d\u63d0\u4f9b\u76f8\u5e94\u5e2e\u52a9,\u4ea4\u4ed8\u540e\u4e00\u5b9a\u8981\u68c0\u67e5\u6548\u679c","title":"\u4e00 \u5982\u4f55\u5e2e\u52a9\u540c\u5b66\u63d0\u5347\u6280\u672f\u80fd\u529b(\u4e13\u4e1a\u80fd\u529b)"},{"location":"chapter_8/2_bangzhuqitatongxue/#_3","text":"","title":"\u4e25\u683c\u5c31\u662f\u5927\u7231"},{"location":"chapter_8/2_bangzhuqitatongxue/#_4","text":"\u8bc4\u4ef7\u7684\u51e0\u4e2a\u65b9\u9762: \u62db\u8058\u65f6\u8003\u6838\u7684\u80fd\u529b: \u5165\u804c\u540e\u6bd4\u4e13\u4e1a\u80fd\u529b\u66f4\u52a0\u91cd\u8981\u7684\u4e09\u4e2a\u80fd\u529b:","title":"\u4e8c \u5177\u4f53\u5c97\u4f4d\u80dc\u4efb\u529b\u8bc4\u4ef7\u4f53\u7cfb"},{"location":"chapter_8/2_bangzhuqitatongxue/#1","text":"\u6c9f\u901a\u80fd\u529b\u6709\u4ee5\u4e0b\u4e24\u5c42\u5883\u754c\uff1a \u7b2c\u4e00\uff0c\u6709\u6761\u7406\u6709\u903b\u8f91\u3002 \u8bf4\u4e00\u4ef6\u4e8b\u65f6\u8981\u6709\u6761\u7406\uff0c\u6709\u903b\u8f91\uff0c\u80fd\u7528\u6e05\u6670\u7684\u8bed\u8a00\u8868\u8fbe\u51fa\u6765\u3002\u53ef\u662f\u5f88\u591a\u7a0b\u5e8f\u5458\u4e60\u60ef\u7528\u6280\u672f\u8bed\u8a00\u53bb\u8ddf\u5176\u4ed6\u9886\u57df\u7684\u4eba\u6c9f\u901a\uff0c\u6682\u4e14\u4e0d\u8c08\u8bed\u8a00\u6761\u7406\u548c\u903b\u8f91\uff0c\u8fd9\u79cd\u6c9f\u901a\u5c31\u662f\u65e0\u6548\u7684\uff0c\u56e0\u4e3a\u9e21\u540c\u9e2d\u8bb2\u3002 \u7b2c\u4e8c\uff0c\u8981\u5b66\u4f1a\u62bd\u8c61\u548c\u5f52\u7eb3\u3002 \u5728\u8ddf\u4ed6\u4eba\u6c9f\u901a\u65f6\uff0c\u4e0d\u8981\u4e1c\u4e00\u6994\u5934\u897f\u4e00\u68d2\u69cc\uff0c\u4e00\u4f1a\u63cf\u8ff0\u7ec6\u8282\uff0c\u4e00\u4f1a\u53c8\u6982\u62ec\u63cf\u8ff0\u3002\u600e\u4e48\u505a\u5462\uff1f\u8981\u628a\u6280\u672f\u6982\u5ff5\u62bd\u8c61\u51fa\u6765\uff0c\u5e76\u4e14\u6982\u62ec\u63d0\u70bc\u4f60\u8981\u8bf4\u7684\u5185\u5bb9\uff0c\u8fd9\u6837\u5bf9\u65b9\u5c31\u80fd\u5feb\u901f\u7406\u89e3\u4f60\u8981\u8868\u8fbe\u7684\u610f\u601d\uff0c\u5982\u679c\u6d89\u53ca\u5230\u7ec6\u8282\uff0c\u518d\u5c55\u5f00\u6765\u8bb2\u3002","title":"1\u3001\u6c9f\u901a\u8868\u8fbe\u80fd\u529b"},{"location":"chapter_8/2_bangzhuqitatongxue/#2","text":"\u51e0\u4e4e\u6240\u6709\u7684\u516c\u53f8\u90fd\u662f\u4e1a\u52a1\u4e3a\u738b\uff0c\u6240\u4ee5\u719f\u6089\u4e1a\u52a1\u975e\u5e38\u91cd\u8981\uff0c\u6211\u8ba4\u4e3a\u51fa\u8272\u7684\u4e1a\u52a1\u80fd\u529b\u81f3\u5c11\u8981\u719f\u6089\u81ea\u5df1\u8d1f\u8d23\u7684\u9879\u76ee\u6838\u5fc3\u4e1a\u52a1\u6d41\u7a0b\u4ee5\u53ca\u4e86\u89e3\u4e0a\u4e0b\u6e38\u7cfb\u7edf\uff0c\u518d\u8005\u4e0d\u719f\u6089\u4e1a\u52a1\uff0c\u60f3\u5199\u51fa\u53ef\u590d\u7528\u3001\u53ef\u6269\u5c55\u7684\u4ee3\u7801\u90a3\u90fd\u662f\u5929\u65b9\u591c\u8c2d\u3002 \u53e6\u5916\uff0c\u4f60\u53ef\u4ee5\u770b\u770b\u516c\u53f8\u67b6\u6784\u5e08/\u603b\u76d1/CTO\uff0c\u90fd\u662f\u4e1a\u52a1\u9ad8\u624b\uff5e","title":"2\u3001\u4e1a\u52a1\u80fd\u529b"},{"location":"chapter_8/2_bangzhuqitatongxue/#3","text":"\u8fc7\u6765\u4eba\u90fd\u77e5\u9053\uff0c\u5411\u4e0a\u7ba1\u7406\u6bd4\u6280\u672f\u80fd\u529b\u91cd\u8981\u5f97\u591a\uff0c\u6b63\u5e94\u4e86\u90a3\u5c31\u8bdd\u2014\u2014\u57cb\u5934\u82e6\u5e72\u4e0d\u62ac\u5934\u770b\u5929\u662f\u80af\u5b9a\u4e0d\u884c\u7684\uff01 \u90a3\u4e48\u5982\u4f55\u505a\u597d\u5411\u4e0a\u7ba1\u7406\u5462\uff1f\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u4ee5\u4e0b\u4e09\u6b65\u6cd5\uff1a \u505a\u4e8b\u524d\u548c\u9886\u5bfc\u7edf\u4e00\u76ee\u6807\u548c\u6280\u672f\u65b9\u6848 \u505a\u4e8b\u4e2d\u548c\u9886\u5bfc\u6c47\u62a5\u8fdb\u5ea6 \u505a\u4e8b\u540e\u505a\u597d\u4e2a\u4eba\u590d\u76d8\u603b\u7ed3\u5e76\u6c47\u62a5\u3002","title":"3\u3001\u5411\u4e0a\u7ba1\u7406\u80fd\u529b"},{"location":"chapter_8/2_bangzhuqitatongxue/#_5","text":"","title":"\u4e09 \u5927\u5382\u5bf9\u4e8e\u5458\u5de5\u7684\u5206\u7c7b"},{"location":"chapter_8/2_bangzhuqitatongxue/#smart","text":"SMART\uff08\u806a\u660e\uff09\u539f\u5219\u5c06\u76ee\u6807\u4e00\u5171\u5206\u4e3a\u4e94\u4e2a\u7ef4\u5ea6\uff0c\u5373: \u76ee\u6807\u5fc5\u987b\u662f \u5177\u4f53\u7684 \uff08Specific\uff09, \u4e3a\u4e86\u5b9e\u73b0\u76ee\u6807\uff0c\u4f60\u7684\u884c\u52a8\u8ba1\u5212\u662f\u5426\u6e05\u6670\uff1f\u8981\u6709\u660e\u786e\u7684\u8def\u5f84. \u76ee\u6807\u5fc5\u987b\u662f \u53ef\u4ee5\u8861\u91cf\u7684 \uff08Measurable\uff09, \u76ee\u6807\u4e00\u5b9a\u662f\u53ef\u91cf\u5316\u7684 \u76ee\u6807\u5fc5\u987b\u662f \u53ef\u4ee5\u8fbe\u5230\u7684 \uff08Attainable\uff09, \u76ee\u6807\u5b9e\u73b0\u7684\u53ef\u884c\u6027\u6709\u591a\u5927? \u76ee\u6807\u5fc5\u987b\u548c\u5176\u4ed6\u76ee\u6807\u5177 \u6709\u76f8\u5173\u6027 \uff08Relevant\uff09, \u8be5\u76ee\u6807\u662f\u5426\u548c\u4f60\u4e0a\u7ea7\u7684\u76ee\u6807\u5177\u6709\u5173\u8054? \u76ee\u6807\u5fc5\u987b\u5177 \u6709\u660e\u786e\u7684\u622a\u6b62\u671f\u9650 \uff08Time-based\uff09, \u6709\u4e86\u5b9e\u73b0\u76ee\u6807\u7684\u8def\u5f84,\u8fd8\u9700\u8981\u6709\u5173\u952e\u65f6\u95f4\u8282\u70b9, \u6709\u4e00\u4e2a\u660e\u786e\u7684\u65f6\u95f4\u8f74","title":"\u56db \u5173\u4e8e\u76ee\u6807\u5236\u5b9a\u7684 SMART \u539f\u5219"},{"location":"chapter_8/2_bangzhuqitatongxue/#_6","text":"\u600e\u4e48\u6837\u624d\u7b97\u662f\u4e00\u4e2a\u4eba\u624d","title":"\u4e94 \u5de5\u4f5c\u80fd\u529b\u63d0\u5347\u8def\u5f84"},{"location":"chapter_8/2_bangzhuqitatongxue/#1-","text":"1 \u6280\u672f\u5f88\u5389\u5bb3, \u8d85\u8fc7\u73b0\u6709\u56e2\u961f\u5e73\u5747\u6c34\u5e73 2 \u9879\u76ee\u7ecf\u5386\u5f88\u9ad8\u5927\u4e0a 3 \u901a\u4eba\u6027\u3001\u4f1a\u8bf4\u8bdd(\u8bf4\u8bdd\u8bf4\u5230\u4eba\u5fc3\u574e\u91cc) 4 \u5bf9\u9886\u5bfc\u5fe0\u8bda","title":"\u89d2\u5ea6 1 - \u9762\u8bd5"},{"location":"chapter_8/2_bangzhuqitatongxue/#2-leader","text":"1 \u4e00\u5957\u7ba1\u7406\u80fd\u529b\u3001\u5e26\u56e2\u961f\u65b9\u6cd5\u8bba 2 \u4e0e\u65f6\u4ff1\u8fdb\u7684\u786c\u6838\u6280\u672f\u80fd\u529b, \u7cbe\u901a\u5f53\u4e0b\u4e3b\u6d41\u6280\u672f(\u6bd4\u5982 Linux \u5185\u6838\u3001\u4e91\u539f\u751f) 3 SRE \u7a33\u5b9a\u6027\u7406\u8bba\uff08\u505a\u7a33\u5b9a\u6027\u7684\u5fc3\u6cd5, \u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u505a\u8be5\u5c97\u4f4d\u7684\u5fc3\u6cd5) 4 \u9879\u76ee\u7ba1\u7406\u80fd\u529b\u3001\u903b\u8f91\u601d\u7ef4\u5f3a","title":"\u89d2\u5ea6 2 - \u5f80\u6280\u672f Leader \u65b9\u5411"},{"location":"chapter_8/3_yewuliuchengshuyu/","text":"\u4e00 \u8bf4\u660e \u672c\u7bc7\u535a\u5ba2\u68b3\u7406\u4e86\u5e38\u7528\u7684\u4e1a\u52a1\u5c42\u7684\u6d41\u7a0b\u672f\u8bed\u548c\u9879\u76ee\u7ba1\u7406\u65b9\u5411\u7684\u603b\u7ed3,\u4f7f\u5f97 SRE \u548c\u4e1a\u52a1\u4fa7\u540c\u5b66\u4ea4\u6d41\u6c9f\u901a\u65f6\u66f4\u52a0\u4e13\u4e1a\u5316 \u4ee5\u4e0b\u5185\u5bb9\u662f\u8986\u76d6\u4e86\u4e00\u4e9b\u5173\u952e\u70b9,\u5177\u4f53\u4f7f\u7528\u65f6\u7075\u6d3b\u8fd0\u7528\u5373\u53ef \u4e8c \u9879\u76ee\u7ba1\u7406\u6a21\u7248 1 \u9879\u76ee\u80cc\u666f \u4ecb\u7ecd\u9879\u76ee\u80cc\u666f 2 \u9879\u76ee\u76ee\u6807 \u68b3\u7406\u9879\u76ee\u76ee\u6807 3 \u6210\u5458\u4e0e\u6c9f\u901a \u68b3\u7406\u6838\u5fc3\u6210\u5458 \u68b3\u7406\u548c\u6c47\u603b\u6c9f\u901a\u7fa4 4 \u5b9e\u73b0\u8def\u5f84 \u53ef\u4ee5\u662f\u8868\u683c\u5f62\u5f0f\uff0c\u4e5f\u53ef\u4ee5\u662f\u7518\u7279\u56fe \u6bcf\u4e00\u884c\u5fc5\u987b\u5305\u542b \u4efb\u52a1\u8bf4\u660e \u3001 \u8d23\u4efb\u4eba \u3001 \u6392\u671f(\u5177\u4f53\u5230\u5929) \u3001 \u4ea4\u4ed8\u7269 \u3001 \u5f53\u524d\u8fdb\u5ea6 5 \u5468\u4f1a\u8bb0\u5f55 \u628a\u6bcf\u4e00\u6b21\u4f1a\u8bae\u8bb0\u5f55\u8d34\u4e0a\u53bb, \u65b9\u4fbf\u540e\u671f\u68c0\u7d22 \u4e09 \u4f53\u73b0\u4e13\u4e1a\u5316\u7684\u8bcd\u8bed A \u4e13\u4e1a\u8bcd\u8bed 1 \u6f02\u4eae\u8bcd\u6c47 \u6536\u655b\u3001\u6cbb\u7406\u3001\u89e6\u8fbe\u3001\u8986\u76d6\u3001\u5173\u952e\u8def\u5f84\u3001\u5b58\u91cf\u95ee\u9898\u3001\u5173\u952e\u6307\u6807 2 \u6f02\u4eae\u53e5\u5b50 \u538b\u6d4b\u6d41\u7a0b: \u7814\u53d1\u63d0\u4f9b\u538b\u6d4b\u65b9\u6cd5\u3001\u538b\u6d4b\u673a\u5668\u4eba\uff0cQA \u8d1f\u8d23\u8ddf\u8fdb\u538b\u6d4b\u548c\u8bb0\u5f55\u538b\u6d4b\u6570\u636e \u505a\u67d0\u4e2a\u4e8b\u60c5\u4e4b\u524d\u5148\u56de\u7b54\u8981\u4ed8\u51fa\u7684\u6210\u672c\u548c\u9884\u8ba1\u7684\u6536\u76ca( \u6295\u4ea7\u6bd4 ) \u63a8\u51fa\u65b0\u670d\u52a1\u66ff\u4ee3\u8001\u670d\u52a1,\u901a\u5e38\u662f\u5148\u6536\u53e3,\u518d\u628a\u5b58\u91cf\u5b9e\u4f8b\u8fc1\u79fb\u5230\u65b0\u670d\u52a1\u4e0a \u8fd9\u4e2a\u65b9\u6848\u7684\u98ce\u9669\u3001\u6536\u76ca\u3001\u53c2\u4e0e\u9879\u76ee\u7684\u5404\u65b9\u5728\u4ec0\u4e48\u65f6\u95f4\u70b9\u4ea4\u4ed8\u4ec0\u4e48\u4e1c\u897f, \u8981\u660e\u786e\u4e0b\u6765 \u5728\u4ea4\u4ed8\u65f6\u95f4\u70b9\u4e4b\u524d\u8981\u53ca\u65f6\u540c\u6b65\u53ef\u80fd\u51fa\u73b0\u7684\u98ce\u9669,\u4ea4\u4ed8\u5b8c\u540e\u6709\u9a8c\u6536\u6d41\u7a0b. \u63d0\u51fa\u65b0\u65b9\u6848\u8005\uff0c\u8981\u56de\u7b54\u8be5\u65b9\u6848\u662f\u5426\u6ee1\u8db3\u4ea7\u54c1\u9700\u6c42 \u81ea\u5df1\u624b\u4e0a\u7684\u4efb\u52a1,\u5b8c\u6210\u4e86\u8981\u53ca\u65f6\u4ea4\u4ed8\u7ed3\u679c,\u6ca1\u5b8c\u6210\u8981\u53ca\u65f6\u8bf4\u660e\u6ca1\u5b8c\u6210\u7684\u539f\u56e0\u548c\u8ba1\u5212\u5b89\u6392 \u5185\u90e8\u8fd0\u7ef4\u5de5\u5177\u4e0d\u597d\u7528\uff0c\u5982\u679c\u6709\u4eba\u63d0\u51fa\u6765\uff0c\u90a3\u662f\u5de5\u5177\u5f00\u53d1\u8005\u7684\u9505\uff0c\u5982\u679c\u6ca1\u4eba\u63d0\u51fa\u6765\u800c\u5bfc\u81f4\u5b9e\u9645\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u6545\u969c\uff0c\u90a3\u662f\u4f7f\u7528\u8005\u7684\u9505 \u4e00\u4e2a\u597d\u7684\u76d1\u63a7\u7cfb\u7edf\u8981\u80fd\u591f\u5b9e\u73b0\u7aef\u5230\u7aef\u7684\u76d1\u63a7. 1 \u5206\u949f\u53d1\u73b0\u95ee\u9898\uff0c5 \u5206\u949f\u5b9a\u4f4d\u95ee\u9898\uff0c10 \u5206\u949f\u89e3\u51b3\u95ee\u9898. \u67d0\u4e2a\u5de5\u5177\u7684\u6210\u719f\u5ea6\u662f\u5426\u9ad8\uff0c\u9ad8\u7684\u8bdd\u624d\u80fd\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528 \u67d0\u4e2a\u65b9\u6848\u7684\u843d\u5730\u6027\u5f3a\u4e0d\u5f3a. \u53bb\u573a\u666f\u5316\u7684\u57fa\u7840\u80fd\u529b\u5411\u573a\u666f\u5316\u7684\u670d\u52a1\u80fd\u529b\u5ef6\u4f38 \u6301\u7eed\u5730\u987a\u7545\u5730\u9ad8\u8d28\u91cf\u4ea4\u4ed8\u6709\u6548\u4ef7\u503c \u5f88\u591a\u7ec6\u8282\u88ab\u6a21\u7cca\u6389 \u624b\u5de5\u7edf\u8ba1\u7684\u6570\u636e\u5bb9\u6613\u51fa\u73b0\u7cbe\u5ea6\u95ee\u9898 \u901a\u7528\u64cd\u4f5c\u5de5\u5177\u5316\u3001\u91cd\u590d\u64cd\u4f5c\u4e00\u952e\u5316 \u5206\u6790\u4e00\u4e2a\u95ee\u9898\u7684 \u73b0\u72b6 \u5c31\u662f\u4ece \u5de5\u5177\u3001\u6d41\u7a0b\u3001\u89d2\u8272 3 \u4e2a\u65b9\u9762\u53bb\u5206\u6790, \u7136\u540e\u4ece\u8be5\u95ee\u9898\u7684\u5168\u751f\u547d\u5468\u671f(\u4e0d\u4ec5\u662f \u6d41\u7a0b \u7ed3\u675f\u5c31\u7ed3\u675f\u4e86)\u53bb\u53d1\u73b0\u6539\u8fdb\u70b9 \u7ed9\u5ba2\u6237\u63d0\u4f9b\u591a\u4e2a\u65b9\u6848\u6a21\u578b,\u4f9b\u5ba2\u6237\u9009\u578b. \u63d0\u5347 SRE \u5de5\u4f5c\u7684\u5148\u8fdb\u6027. \u5b9e\u65bd\u8fc7\u7a0b\u4e2d\u8981\u505a\u597d\u63a7\u91cf. \u5c06\u4e00\u7ec4\u5546\u4e1a\u76ee\u6807\u8f6c\u5316\u4e3a\u660e\u786e\u7684\u53ef\u4ee5\u5b9e\u73b0\u7684\u5de5\u7a0b\u76ee\u6807. \u67d0\u9879\u529f\u80fd/\u4e8b\u60c5,\u6c89\u6dc0\u4e86\u5f88\u957f\u65f6\u95f4, \u73b0\u5728\u53ef\u4ee5 XXXX \u4e86 \u4ed6\u4eec\u7684\u8bc9\u6c42\u70b9\u62c6\u51fa\u6765\u7684\u5176\u5b9e\u662f XXXX \u67d0\u4e2a\u5c5e\u6027\u4e0a\u53ef\u63a7\u3001\u4e0d\u53ef\u63a7, \u6bd4\u5982 \u65f6\u95f4\u4e0a\u4e0d\u53ef\u63a7 \u3002\u901a\u8fc7\u4ec0\u4e48\u65b9\u5f0f\u6765\u63a7\u5236\u3002\u67d0\u4e2a\u5c5e\u6027\u8fbe\u5230\u4e86\u4e00\u6bd4\u8f83\u9ad8\u7684\u7a0b\u5ea6\u3002 \u67d0\u4e2a\u529f\u80fd\u5177\u5907\u4e86 ToB \u4ea7\u54c1\u5316\u7684\u80fd\u529b\u3002 B \u5404\u7c7b\u5bfc\u5411 \u7ed3\u679c\u5bfc\u5411/\u76ee\u6807\u5bfc\u5411 \u7528\u6237\u5bfc\u5411 \u56db \u9879\u76ee\u7ba1\u7406\u603b\u7ed3 A \u751f\u547d\u4e2d\u7684\u4e00\u5207\u4e8b\u60c5\uff0c\u672c\u8d28\u4e0a\u90fd\u662f\u4e00\u4e2a\u9879\u76ee\u3002 \u5728\u9879\u76ee\u7ba1\u7406\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u5173\u952e\u8981\u7d20\uff0c\u5c31\u662f\uff1a \u5faa\u73af \u3002 \u65e2\u7136\u662f\u6709\u5934\u6709\u5c3e\u7684\u4e8b\u60c5 \uff0c\u5c31\u8981\uff1a\u201c\u7528\u5faa\u73af\u89e3\u51b3\u95ee\u9898\u201d\u3002 \u5faa\u73af\u8fc7\u7a0b\u5206\u4e3a 5 \u4e2a\u6b65\u9aa4\uff1a \u542f\u52a8\u3001\u8ba1\u5212\u3001\u6267\u884c\u3001\u63a7\u5236(\u76d1\u63a7)\u3001\u6536\u5c3e \u3002 1\uff09\u4f55\u8c13\u542f\u52a8\uff1f \u8fd9\u4e8b\u513f\u503c\u4e0d\u503c\u5f97\u5e72\uff1f\u6211\u4eec\u8981\u4e0d\u8981\u5e72\uff1f\u9700\u8981\u54ea\u4e9b\u4eba\uff1f\u9700\u8981\u591a\u5c11\u94b1\uff1f 2\uff09\u4f55\u8c13\u8ba1\u5212\uff1f \u8fd9\u4e8b\u600e\u4e48\u5e72\uff1f\u6295\u5165\u591a\u5c11\u65f6\u95f4\uff1f\u8c01\u8d1f\u8d23\u4ec0\u4e48\u4e8b\uff1f\u4ec0\u4e48\u65f6\u95f4\u8282\u70b9\u5b8c\u6210\u4ec0\u4e48\u7ed3\u679c\uff1f\u8d44\u91d1\u600e\u4e48\u5206\u914d\uff1f\u8d44\u6e90\u600e\u4e48\u8c03\u914d\uff1f\u65f6\u95f4\u600e\u4e48\u5206\u914d\uff1f\u4efb\u52a1\u600e\u4e48\u5206\u914d\uff1f 3\uff09\u4f55\u8c13\u6267\u884c\uff1f \u65e2\u7136\u5206\u914d\u4e86\uff0c\u90a3\u5c31\u6309\u7167\u516c\u53f8\u6218\u7565\u5b8c\u5584\u9ad8\u6548\u6267\u884c\u4e0b\u53bb\uff0c\u4e0d\u8981\u773c\u9ad8\u624b\u4f4e\u3002 4\uff09\u4f55\u8c13\u63a7\u5236(\u76d1\u63a7)\uff1f \u8c01\u5728\u8d1f\u8d23\u8fd9\u4ef6\u4e8b\u60c5\uff1f\u505a\u7684\u8fdb\u5c55\u5982\u4f55\uff1f\u8fbe\u6210\u76ee\u6807\u4e86\u5417\uff1f\u6309\u7167\u8fdb\u5ea6\u8ddf\u8fdb\u4e86\u5417\uff1f 5\uff09\u4f55\u8c13\u6536\u5c3e\uff1f \u65e0\u8bba\u6210\u8d25\u4e0e\u5426\uff0c\u6211\u4eec\u6765\u590d\u76d8\u4e00\u4e0b\u6709\u4ec0\u4e48\u7ecf\u9a8c\uff1f\u4ec0\u4e48\u6559\u8bad\uff1f \u8fd9 5 \u4e2a\u6b65\u9aa4\uff0c\u6784\u6210\u5b8c\u6574\u5faa\u73af\uff0c\u4e14\u7f3a\u4e00\u4e0d\u53ef\u3002 \u51e1\u4e8b\u6709\u4ea4\u4ee3\u7684\u80cc\u540e\uff0c\u662f\u4e00\u7ec4\u4e25\u5bc6\u6267\u884c\u7684\u6b65\u9aa4\u3002 \u505a\u4e8b\u4e4b\u524d, \u5148\u548c\u9886\u5bfc\u3001\u540c\u4e8b\u5bf9\u9f50\u76ee\u6807, \u5bf9\u9f50\u8bc4\u4ef7\u4f53\u7cfb(\u76ee\u6807\u600e\u4e48\u8861\u91cf), \u62c6\u5206\u4efb\u52a1\u3001\u786e\u5b9a\u6392\u671f. \u4e8b\u4e2d\u6309\u8bc4\u4ef7\u4f53\u7cfb\u53ca\u65f6\u6c47\u62a5\u8fdb\u5ea6 \u4e8b\u540e\u53ca\u65f6\u590d\u76d8\u603b\u7ed3 B STAR \u539f\u5219 STAR \u539f\u5219(\u7248\u672c 1) \u5904\u5883\uff08situation\uff09 \u5728\u4ec0\u4e48\u6837\u7684\u73af\u5883\u4e0b \u4efb\u52a1(task) \u63a5\u5230\u4e86\u4ec0\u4e48\u6837\u7684\u4efb\u52a1 \u884c\u52a8(action) \u5177\u4f53\u662f\u600e\u4e48\u843d\u5730\u7684 \u7ed3\u679c(result) \u62ff\u5230\u4e86\u4ec0\u4e48\u7ed3\u679c STAR \u539f\u5219(\u7248\u672c 2) \u5904\u5883\uff08STtuation\uff09 \u5728\u4ec0\u4e48\u6837\u7684\u73af\u5883\u4e0b \u884c\u52a8(Action) \u91c7\u53d6\u4e86\u4ec0\u4e48\u884c\u52a8 \u7ed3\u679c(Result) \u62ff\u5230\u4e86\u4ec0\u4e48\u7ed3\u679c \u56db \u5404\u7c7b\u5f3a\u903b\u8f91 1 \u8fc7\u53bb\u73b0\u5728\u672a\u6765 2 \u67d0\u4e2a\u6838\u5fc3\u6a21\u578b\u4e0d\u662f XXXX\uff0c\u800c\u662f XXXX 3 \u65e0\u8bba\u4ec0\u4e48\u60c5\u51b5\u8bb2\u4e2a 1\u30012\u30013 4 \u4f60\u6709\u75c5\u554a\u6211\u6709\u836f, \u6211\u4eec\u5c31\u6210\u4ea4\u3002 \u4e0d\u8981\u7740\u6025\u56de\u7b54\u522b\u4eba\u7684\u95ee\u9898, \u4e00\u5b9a\u8981\u641e\u6e05\u695a\u5bf9\u65b9\u6709\u4ec0\u4e48\u75c5. \u95ee\u5c31\u95ee\u75db\u70b9\u3001\u8bf4\u5c31\u8bf4\u91cd\u70b9\u3001\u7b54\u5c31\u7b54\u4fdd\u8bc1 \u89c1\u9762\u5c31\u7ed9\u514d\u8d39\u5348\u9910\u3001\u62a5\u4ef7\u5c31\u8981\u9ad8\u5f00\u4f4e\u8d70\u3001\u6700\u540e\u8fd8\u8981\u4e70\u83dc\u9001\u8471 5 \u505a\u4e8b\u8981\u6709\u4f9d\u636e, \u505a\u5b8c\u8981\u6709\u8bc1\u636e. 6 \u4efb\u4f55\u65f6\u5019\u3001\u4efb\u4f55\u573a\u666f\uff0c\u90fd\u8981\u5148\u5904\u7406\u5fc3\u60c5\u3001\u518d\u5904\u7406\u4e8b\u60c5 1 \u5904\u7406\u5fc3\u60c5 2 \u5904\u7406\u4e8b\u60c5 3 \u5904\u7406\u4e8b\u4e1a 2 \u5904\u7406\u4e8b\u60c5\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u5c31\u662f\u627e\u5168\u5c40\u6027\u589e\u91cf \u6ca1\u6709\u7684\u4e8b\u60c5\uff0c\u4ece 0 \u5230 1 \u505a\u8d77\u6765. \u5df2\u6709\u7684\u4e8b\u60c5\uff0c\u589e\u6548\u964d\u672c, \u4ece 1 \u5230 N\u3002 \u6781\u81f4\u7684\u6309\u9700\u4f7f\u7528\uff08\u780d\u6389\u4e00\u4e9b\u4e0d\u9700\u8981\u7684\u3001\u60f3\u5c3d\u529e\u6cd5\u505a\u5230\u81ea\u52a8\u6269\u7f29\u5bb9\uff09\u3002 7 \u6bcf\u4e2a\u4eba\u8111\u95e8\u4e0a\u90fd\u6709\u4e00\u4e2a\u5927\u5927\u7684\u8981 \u6240\u6709\u4eba\u90fd\u60f3\u8981\uff1a\u4ee5\u6700\u5c11\u7684\u65f6\u95f4\u3001\u91d1\u94b1\uff0c\u6362\u53d6\u6700\u591a\u7684\u65f6\u95f4\u3001\u91d1\u94b1\u3002 \u4f60\u8ba9\u4ed6\u8fc7\u4e0a\u597d\u65e5\u5b50\uff0c\u4ed6\u5c31\u652f\u6301\u4f60\u62e5\u62a4\u4f60\uff1b\u4f60\u8ba9\u4ed6\u8fc7\u4e0d\u4e0a\u597d\u65e5\u5b50\uff0c\u4ed6\u5c31\u53cd\u5bf9\u4f60\u3002 8 \u662f\u4ec0\u4e48\u3001\u4e3a\u4ec0\u4e48\u3001\u600e\u4e48\u529e \u592a\u591a\u573a\u666f\u4e0b\u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u5957\u903b\u8f91","title":"\u7b2c\u4e09\u7bc7 \u9879\u76ee\u7ba1\u7406\u603b\u7ed3"},{"location":"chapter_8/3_yewuliuchengshuyu/#_1","text":"\u672c\u7bc7\u535a\u5ba2\u68b3\u7406\u4e86\u5e38\u7528\u7684\u4e1a\u52a1\u5c42\u7684\u6d41\u7a0b\u672f\u8bed\u548c\u9879\u76ee\u7ba1\u7406\u65b9\u5411\u7684\u603b\u7ed3,\u4f7f\u5f97 SRE \u548c\u4e1a\u52a1\u4fa7\u540c\u5b66\u4ea4\u6d41\u6c9f\u901a\u65f6\u66f4\u52a0\u4e13\u4e1a\u5316 \u4ee5\u4e0b\u5185\u5bb9\u662f\u8986\u76d6\u4e86\u4e00\u4e9b\u5173\u952e\u70b9,\u5177\u4f53\u4f7f\u7528\u65f6\u7075\u6d3b\u8fd0\u7528\u5373\u53ef","title":"\u4e00 \u8bf4\u660e"},{"location":"chapter_8/3_yewuliuchengshuyu/#_2","text":"","title":"\u4e8c \u9879\u76ee\u7ba1\u7406\u6a21\u7248"},{"location":"chapter_8/3_yewuliuchengshuyu/#1","text":"\u4ecb\u7ecd\u9879\u76ee\u80cc\u666f","title":"1 \u9879\u76ee\u80cc\u666f"},{"location":"chapter_8/3_yewuliuchengshuyu/#2","text":"\u68b3\u7406\u9879\u76ee\u76ee\u6807","title":"2 \u9879\u76ee\u76ee\u6807"},{"location":"chapter_8/3_yewuliuchengshuyu/#3","text":"\u68b3\u7406\u6838\u5fc3\u6210\u5458 \u68b3\u7406\u548c\u6c47\u603b\u6c9f\u901a\u7fa4","title":"3 \u6210\u5458\u4e0e\u6c9f\u901a"},{"location":"chapter_8/3_yewuliuchengshuyu/#4","text":"\u53ef\u4ee5\u662f\u8868\u683c\u5f62\u5f0f\uff0c\u4e5f\u53ef\u4ee5\u662f\u7518\u7279\u56fe \u6bcf\u4e00\u884c\u5fc5\u987b\u5305\u542b \u4efb\u52a1\u8bf4\u660e \u3001 \u8d23\u4efb\u4eba \u3001 \u6392\u671f(\u5177\u4f53\u5230\u5929) \u3001 \u4ea4\u4ed8\u7269 \u3001 \u5f53\u524d\u8fdb\u5ea6","title":"4 \u5b9e\u73b0\u8def\u5f84"},{"location":"chapter_8/3_yewuliuchengshuyu/#5","text":"\u628a\u6bcf\u4e00\u6b21\u4f1a\u8bae\u8bb0\u5f55\u8d34\u4e0a\u53bb, \u65b9\u4fbf\u540e\u671f\u68c0\u7d22","title":"5 \u5468\u4f1a\u8bb0\u5f55"},{"location":"chapter_8/3_yewuliuchengshuyu/#_3","text":"","title":"\u4e09 \u4f53\u73b0\u4e13\u4e1a\u5316\u7684\u8bcd\u8bed"},{"location":"chapter_8/3_yewuliuchengshuyu/#a","text":"","title":"A \u4e13\u4e1a\u8bcd\u8bed"},{"location":"chapter_8/3_yewuliuchengshuyu/#1_1","text":"\u6536\u655b\u3001\u6cbb\u7406\u3001\u89e6\u8fbe\u3001\u8986\u76d6\u3001\u5173\u952e\u8def\u5f84\u3001\u5b58\u91cf\u95ee\u9898\u3001\u5173\u952e\u6307\u6807","title":"1 \u6f02\u4eae\u8bcd\u6c47"},{"location":"chapter_8/3_yewuliuchengshuyu/#2_1","text":"\u538b\u6d4b\u6d41\u7a0b: \u7814\u53d1\u63d0\u4f9b\u538b\u6d4b\u65b9\u6cd5\u3001\u538b\u6d4b\u673a\u5668\u4eba\uff0cQA \u8d1f\u8d23\u8ddf\u8fdb\u538b\u6d4b\u548c\u8bb0\u5f55\u538b\u6d4b\u6570\u636e \u505a\u67d0\u4e2a\u4e8b\u60c5\u4e4b\u524d\u5148\u56de\u7b54\u8981\u4ed8\u51fa\u7684\u6210\u672c\u548c\u9884\u8ba1\u7684\u6536\u76ca( \u6295\u4ea7\u6bd4 ) \u63a8\u51fa\u65b0\u670d\u52a1\u66ff\u4ee3\u8001\u670d\u52a1,\u901a\u5e38\u662f\u5148\u6536\u53e3,\u518d\u628a\u5b58\u91cf\u5b9e\u4f8b\u8fc1\u79fb\u5230\u65b0\u670d\u52a1\u4e0a \u8fd9\u4e2a\u65b9\u6848\u7684\u98ce\u9669\u3001\u6536\u76ca\u3001\u53c2\u4e0e\u9879\u76ee\u7684\u5404\u65b9\u5728\u4ec0\u4e48\u65f6\u95f4\u70b9\u4ea4\u4ed8\u4ec0\u4e48\u4e1c\u897f, \u8981\u660e\u786e\u4e0b\u6765 \u5728\u4ea4\u4ed8\u65f6\u95f4\u70b9\u4e4b\u524d\u8981\u53ca\u65f6\u540c\u6b65\u53ef\u80fd\u51fa\u73b0\u7684\u98ce\u9669,\u4ea4\u4ed8\u5b8c\u540e\u6709\u9a8c\u6536\u6d41\u7a0b. \u63d0\u51fa\u65b0\u65b9\u6848\u8005\uff0c\u8981\u56de\u7b54\u8be5\u65b9\u6848\u662f\u5426\u6ee1\u8db3\u4ea7\u54c1\u9700\u6c42 \u81ea\u5df1\u624b\u4e0a\u7684\u4efb\u52a1,\u5b8c\u6210\u4e86\u8981\u53ca\u65f6\u4ea4\u4ed8\u7ed3\u679c,\u6ca1\u5b8c\u6210\u8981\u53ca\u65f6\u8bf4\u660e\u6ca1\u5b8c\u6210\u7684\u539f\u56e0\u548c\u8ba1\u5212\u5b89\u6392 \u5185\u90e8\u8fd0\u7ef4\u5de5\u5177\u4e0d\u597d\u7528\uff0c\u5982\u679c\u6709\u4eba\u63d0\u51fa\u6765\uff0c\u90a3\u662f\u5de5\u5177\u5f00\u53d1\u8005\u7684\u9505\uff0c\u5982\u679c\u6ca1\u4eba\u63d0\u51fa\u6765\u800c\u5bfc\u81f4\u5b9e\u9645\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u6545\u969c\uff0c\u90a3\u662f\u4f7f\u7528\u8005\u7684\u9505 \u4e00\u4e2a\u597d\u7684\u76d1\u63a7\u7cfb\u7edf\u8981\u80fd\u591f\u5b9e\u73b0\u7aef\u5230\u7aef\u7684\u76d1\u63a7. 1 \u5206\u949f\u53d1\u73b0\u95ee\u9898\uff0c5 \u5206\u949f\u5b9a\u4f4d\u95ee\u9898\uff0c10 \u5206\u949f\u89e3\u51b3\u95ee\u9898. \u67d0\u4e2a\u5de5\u5177\u7684\u6210\u719f\u5ea6\u662f\u5426\u9ad8\uff0c\u9ad8\u7684\u8bdd\u624d\u80fd\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528 \u67d0\u4e2a\u65b9\u6848\u7684\u843d\u5730\u6027\u5f3a\u4e0d\u5f3a. \u53bb\u573a\u666f\u5316\u7684\u57fa\u7840\u80fd\u529b\u5411\u573a\u666f\u5316\u7684\u670d\u52a1\u80fd\u529b\u5ef6\u4f38 \u6301\u7eed\u5730\u987a\u7545\u5730\u9ad8\u8d28\u91cf\u4ea4\u4ed8\u6709\u6548\u4ef7\u503c \u5f88\u591a\u7ec6\u8282\u88ab\u6a21\u7cca\u6389 \u624b\u5de5\u7edf\u8ba1\u7684\u6570\u636e\u5bb9\u6613\u51fa\u73b0\u7cbe\u5ea6\u95ee\u9898 \u901a\u7528\u64cd\u4f5c\u5de5\u5177\u5316\u3001\u91cd\u590d\u64cd\u4f5c\u4e00\u952e\u5316 \u5206\u6790\u4e00\u4e2a\u95ee\u9898\u7684 \u73b0\u72b6 \u5c31\u662f\u4ece \u5de5\u5177\u3001\u6d41\u7a0b\u3001\u89d2\u8272 3 \u4e2a\u65b9\u9762\u53bb\u5206\u6790, \u7136\u540e\u4ece\u8be5\u95ee\u9898\u7684\u5168\u751f\u547d\u5468\u671f(\u4e0d\u4ec5\u662f \u6d41\u7a0b \u7ed3\u675f\u5c31\u7ed3\u675f\u4e86)\u53bb\u53d1\u73b0\u6539\u8fdb\u70b9 \u7ed9\u5ba2\u6237\u63d0\u4f9b\u591a\u4e2a\u65b9\u6848\u6a21\u578b,\u4f9b\u5ba2\u6237\u9009\u578b. \u63d0\u5347 SRE \u5de5\u4f5c\u7684\u5148\u8fdb\u6027. \u5b9e\u65bd\u8fc7\u7a0b\u4e2d\u8981\u505a\u597d\u63a7\u91cf. \u5c06\u4e00\u7ec4\u5546\u4e1a\u76ee\u6807\u8f6c\u5316\u4e3a\u660e\u786e\u7684\u53ef\u4ee5\u5b9e\u73b0\u7684\u5de5\u7a0b\u76ee\u6807. \u67d0\u9879\u529f\u80fd/\u4e8b\u60c5,\u6c89\u6dc0\u4e86\u5f88\u957f\u65f6\u95f4, \u73b0\u5728\u53ef\u4ee5 XXXX \u4e86 \u4ed6\u4eec\u7684\u8bc9\u6c42\u70b9\u62c6\u51fa\u6765\u7684\u5176\u5b9e\u662f XXXX \u67d0\u4e2a\u5c5e\u6027\u4e0a\u53ef\u63a7\u3001\u4e0d\u53ef\u63a7, \u6bd4\u5982 \u65f6\u95f4\u4e0a\u4e0d\u53ef\u63a7 \u3002\u901a\u8fc7\u4ec0\u4e48\u65b9\u5f0f\u6765\u63a7\u5236\u3002\u67d0\u4e2a\u5c5e\u6027\u8fbe\u5230\u4e86\u4e00\u6bd4\u8f83\u9ad8\u7684\u7a0b\u5ea6\u3002 \u67d0\u4e2a\u529f\u80fd\u5177\u5907\u4e86 ToB \u4ea7\u54c1\u5316\u7684\u80fd\u529b\u3002","title":"2 \u6f02\u4eae\u53e5\u5b50"},{"location":"chapter_8/3_yewuliuchengshuyu/#b","text":"\u7ed3\u679c\u5bfc\u5411/\u76ee\u6807\u5bfc\u5411 \u7528\u6237\u5bfc\u5411","title":"B \u5404\u7c7b\u5bfc\u5411"},{"location":"chapter_8/3_yewuliuchengshuyu/#_4","text":"","title":"\u56db \u9879\u76ee\u7ba1\u7406\u603b\u7ed3"},{"location":"chapter_8/3_yewuliuchengshuyu/#a_1","text":"\u5728\u9879\u76ee\u7ba1\u7406\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u5173\u952e\u8981\u7d20\uff0c\u5c31\u662f\uff1a \u5faa\u73af \u3002 \u65e2\u7136\u662f\u6709\u5934\u6709\u5c3e\u7684\u4e8b\u60c5 \uff0c\u5c31\u8981\uff1a\u201c\u7528\u5faa\u73af\u89e3\u51b3\u95ee\u9898\u201d\u3002 \u5faa\u73af\u8fc7\u7a0b\u5206\u4e3a 5 \u4e2a\u6b65\u9aa4\uff1a \u542f\u52a8\u3001\u8ba1\u5212\u3001\u6267\u884c\u3001\u63a7\u5236(\u76d1\u63a7)\u3001\u6536\u5c3e \u3002 1\uff09\u4f55\u8c13\u542f\u52a8\uff1f \u8fd9\u4e8b\u513f\u503c\u4e0d\u503c\u5f97\u5e72\uff1f\u6211\u4eec\u8981\u4e0d\u8981\u5e72\uff1f\u9700\u8981\u54ea\u4e9b\u4eba\uff1f\u9700\u8981\u591a\u5c11\u94b1\uff1f 2\uff09\u4f55\u8c13\u8ba1\u5212\uff1f \u8fd9\u4e8b\u600e\u4e48\u5e72\uff1f\u6295\u5165\u591a\u5c11\u65f6\u95f4\uff1f\u8c01\u8d1f\u8d23\u4ec0\u4e48\u4e8b\uff1f\u4ec0\u4e48\u65f6\u95f4\u8282\u70b9\u5b8c\u6210\u4ec0\u4e48\u7ed3\u679c\uff1f\u8d44\u91d1\u600e\u4e48\u5206\u914d\uff1f\u8d44\u6e90\u600e\u4e48\u8c03\u914d\uff1f\u65f6\u95f4\u600e\u4e48\u5206\u914d\uff1f\u4efb\u52a1\u600e\u4e48\u5206\u914d\uff1f 3\uff09\u4f55\u8c13\u6267\u884c\uff1f \u65e2\u7136\u5206\u914d\u4e86\uff0c\u90a3\u5c31\u6309\u7167\u516c\u53f8\u6218\u7565\u5b8c\u5584\u9ad8\u6548\u6267\u884c\u4e0b\u53bb\uff0c\u4e0d\u8981\u773c\u9ad8\u624b\u4f4e\u3002 4\uff09\u4f55\u8c13\u63a7\u5236(\u76d1\u63a7)\uff1f \u8c01\u5728\u8d1f\u8d23\u8fd9\u4ef6\u4e8b\u60c5\uff1f\u505a\u7684\u8fdb\u5c55\u5982\u4f55\uff1f\u8fbe\u6210\u76ee\u6807\u4e86\u5417\uff1f\u6309\u7167\u8fdb\u5ea6\u8ddf\u8fdb\u4e86\u5417\uff1f 5\uff09\u4f55\u8c13\u6536\u5c3e\uff1f \u65e0\u8bba\u6210\u8d25\u4e0e\u5426\uff0c\u6211\u4eec\u6765\u590d\u76d8\u4e00\u4e0b\u6709\u4ec0\u4e48\u7ecf\u9a8c\uff1f\u4ec0\u4e48\u6559\u8bad\uff1f \u8fd9 5 \u4e2a\u6b65\u9aa4\uff0c\u6784\u6210\u5b8c\u6574\u5faa\u73af\uff0c\u4e14\u7f3a\u4e00\u4e0d\u53ef\u3002 \u51e1\u4e8b\u6709\u4ea4\u4ee3\u7684\u80cc\u540e\uff0c\u662f\u4e00\u7ec4\u4e25\u5bc6\u6267\u884c\u7684\u6b65\u9aa4\u3002 \u505a\u4e8b\u4e4b\u524d, \u5148\u548c\u9886\u5bfc\u3001\u540c\u4e8b\u5bf9\u9f50\u76ee\u6807, \u5bf9\u9f50\u8bc4\u4ef7\u4f53\u7cfb(\u76ee\u6807\u600e\u4e48\u8861\u91cf), \u62c6\u5206\u4efb\u52a1\u3001\u786e\u5b9a\u6392\u671f. \u4e8b\u4e2d\u6309\u8bc4\u4ef7\u4f53\u7cfb\u53ca\u65f6\u6c47\u62a5\u8fdb\u5ea6 \u4e8b\u540e\u53ca\u65f6\u590d\u76d8\u603b\u7ed3","title":"A \u751f\u547d\u4e2d\u7684\u4e00\u5207\u4e8b\u60c5\uff0c\u672c\u8d28\u4e0a\u90fd\u662f\u4e00\u4e2a\u9879\u76ee\u3002"},{"location":"chapter_8/3_yewuliuchengshuyu/#b-star","text":"STAR \u539f\u5219(\u7248\u672c 1) \u5904\u5883\uff08situation\uff09 \u5728\u4ec0\u4e48\u6837\u7684\u73af\u5883\u4e0b \u4efb\u52a1(task) \u63a5\u5230\u4e86\u4ec0\u4e48\u6837\u7684\u4efb\u52a1 \u884c\u52a8(action) \u5177\u4f53\u662f\u600e\u4e48\u843d\u5730\u7684 \u7ed3\u679c(result) \u62ff\u5230\u4e86\u4ec0\u4e48\u7ed3\u679c STAR \u539f\u5219(\u7248\u672c 2) \u5904\u5883\uff08STtuation\uff09 \u5728\u4ec0\u4e48\u6837\u7684\u73af\u5883\u4e0b \u884c\u52a8(Action) \u91c7\u53d6\u4e86\u4ec0\u4e48\u884c\u52a8 \u7ed3\u679c(Result) \u62ff\u5230\u4e86\u4ec0\u4e48\u7ed3\u679c","title":"B STAR \u539f\u5219"},{"location":"chapter_8/3_yewuliuchengshuyu/#_5","text":"","title":"\u56db \u5404\u7c7b\u5f3a\u903b\u8f91"},{"location":"chapter_8/3_yewuliuchengshuyu/#1_2","text":"","title":"1 \u8fc7\u53bb\u73b0\u5728\u672a\u6765"},{"location":"chapter_8/3_yewuliuchengshuyu/#2-xxxx-xxxx","text":"","title":"2 \u67d0\u4e2a\u6838\u5fc3\u6a21\u578b\u4e0d\u662f XXXX\uff0c\u800c\u662f XXXX"},{"location":"chapter_8/3_yewuliuchengshuyu/#3-123","text":"","title":"3 \u65e0\u8bba\u4ec0\u4e48\u60c5\u51b5\u8bb2\u4e2a 1\u30012\u30013"},{"location":"chapter_8/3_yewuliuchengshuyu/#4_1","text":"\u4e0d\u8981\u7740\u6025\u56de\u7b54\u522b\u4eba\u7684\u95ee\u9898, \u4e00\u5b9a\u8981\u641e\u6e05\u695a\u5bf9\u65b9\u6709\u4ec0\u4e48\u75c5. \u95ee\u5c31\u95ee\u75db\u70b9\u3001\u8bf4\u5c31\u8bf4\u91cd\u70b9\u3001\u7b54\u5c31\u7b54\u4fdd\u8bc1 \u89c1\u9762\u5c31\u7ed9\u514d\u8d39\u5348\u9910\u3001\u62a5\u4ef7\u5c31\u8981\u9ad8\u5f00\u4f4e\u8d70\u3001\u6700\u540e\u8fd8\u8981\u4e70\u83dc\u9001\u8471","title":"4 \u4f60\u6709\u75c5\u554a\u6211\u6709\u836f, \u6211\u4eec\u5c31\u6210\u4ea4\u3002"},{"location":"chapter_8/3_yewuliuchengshuyu/#5_1","text":"","title":"5 \u505a\u4e8b\u8981\u6709\u4f9d\u636e, \u505a\u5b8c\u8981\u6709\u8bc1\u636e."},{"location":"chapter_8/3_yewuliuchengshuyu/#6","text":"1 \u5904\u7406\u5fc3\u60c5 2 \u5904\u7406\u4e8b\u60c5 3 \u5904\u7406\u4e8b\u4e1a 2 \u5904\u7406\u4e8b\u60c5\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u5c31\u662f\u627e\u5168\u5c40\u6027\u589e\u91cf \u6ca1\u6709\u7684\u4e8b\u60c5\uff0c\u4ece 0 \u5230 1 \u505a\u8d77\u6765. \u5df2\u6709\u7684\u4e8b\u60c5\uff0c\u589e\u6548\u964d\u672c, \u4ece 1 \u5230 N\u3002 \u6781\u81f4\u7684\u6309\u9700\u4f7f\u7528\uff08\u780d\u6389\u4e00\u4e9b\u4e0d\u9700\u8981\u7684\u3001\u60f3\u5c3d\u529e\u6cd5\u505a\u5230\u81ea\u52a8\u6269\u7f29\u5bb9\uff09\u3002","title":"6 \u4efb\u4f55\u65f6\u5019\u3001\u4efb\u4f55\u573a\u666f\uff0c\u90fd\u8981\u5148\u5904\u7406\u5fc3\u60c5\u3001\u518d\u5904\u7406\u4e8b\u60c5"},{"location":"chapter_8/3_yewuliuchengshuyu/#7","text":"\u6240\u6709\u4eba\u90fd\u60f3\u8981\uff1a\u4ee5\u6700\u5c11\u7684\u65f6\u95f4\u3001\u91d1\u94b1\uff0c\u6362\u53d6\u6700\u591a\u7684\u65f6\u95f4\u3001\u91d1\u94b1\u3002 \u4f60\u8ba9\u4ed6\u8fc7\u4e0a\u597d\u65e5\u5b50\uff0c\u4ed6\u5c31\u652f\u6301\u4f60\u62e5\u62a4\u4f60\uff1b\u4f60\u8ba9\u4ed6\u8fc7\u4e0d\u4e0a\u597d\u65e5\u5b50\uff0c\u4ed6\u5c31\u53cd\u5bf9\u4f60\u3002","title":"7 \u6bcf\u4e2a\u4eba\u8111\u95e8\u4e0a\u90fd\u6709\u4e00\u4e2a\u5927\u5927\u7684\u8981"},{"location":"chapter_8/3_yewuliuchengshuyu/#8","text":"\u592a\u591a\u573a\u666f\u4e0b\u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u5957\u903b\u8f91","title":"8 \u662f\u4ec0\u4e48\u3001\u4e3a\u4ec0\u4e48\u3001\u600e\u4e48\u529e"},{"location":"chapter_8/4_jishunenglimoxing/","text":"\u6982\u8ff0 \u672c\u7bc7\u6587\u7ae0\u7528\u4e8e\u56de\u7b54\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898: \u540c\u6837\u662fSRE,\u4f60\u51ed\u4ec0\u4e48\u6bd4\u522b\u4eba\u4f18\u79c0? (\u6362\u8a00\u4e4b\u4e00\u4e2a\u4f18\u79c0\u7684SRE\u5e94\u8be5\u5177\u5907\u54ea\u4e9b\u5173\u952e\u7279\u8d28) \u4f7f\u7528\u963f\u91ccP6\u3001P7\u3001P8\u7684\u80fd\u529b\u6a21\u578b, \u65b9\u4fbf\u8bc4\u4f30\u81ea\u5df1/\u4ed6\u4eba\u5904\u4e8e\u54ea\u4e2a\u9636\u6bb5. 1 \u4e00\u4e2a\u4f18\u79c0SRE\u5e94\u8be5\u5177\u5907\u7684\u7279\u8d28 P6\u505aP7\u7684\u4e8b\u60c5\uff0c\u540c\u65f6\u8fd8\u8981\u6709P8\u7684\u601d\u7ef4. \u56e2\u961f\u5185\u90e8\u8ba8\u8bba\u65b9\u6848, \u5148\u60f3\u6e05\u695a\uff0c\u53d1\u51fa\u6765\u7ed9\u5927\u5bb6\u8bf4\u660e\u767d, \u518d\u5177\u4f53\u6267\u884c. \u6ca1\u6709\u8c03\u67e5\u5c31\u6ca1\u6709\u53d1\u8a00\u6743\u3002\u8981\u7528\u6570\u636e\u8bf4\u8bdd. \u62ff\u6570\u636e\u8bf4\u5de5\u4f5c\u6210\u679c, \u8981\u6709\u4e1a\u52a1\u6210\u679c, \u6bd4\u5982 0 \uff5e 1 , 1 \uff5e n , \u53d1\u73b0\u91cd\u5927\u9690\u60a3 , \u7a81\u7834\u91cd\u5927\u96be\u9898 . \u5f3a\u5927\u7684\u540c\u7406\u5fc3\u3002 \u7ad9\u5728\u5f53\u4e8b\u4eba\u7684\u89d2\u5ea6\u548c\u4f4d\u7f6e\u4e0a\uff0c\u5ba2\u89c2\u7684\u7406\u89e3\u5f53\u4e8b\u4eba\u7684\u5185\u5fc3\u611f\u53d7\uff0c\u8bbe\u8eab\u5904\u5730\u7684\u53bb\u4f53\u8c05\u4ed6\u4eba\uff0c\u5e2e\u4ed6\u4eec\u89e3\u51b3\u95ee\u9898. \u81ea\u52a8\u81ea\u53d1--\u4e0d\u8981\u4e8b\u4e8b\u7b49\u4eba\u4ea4\u4ee3. \u7231\u603b\u7ed3,\u7231\u5206\u4eab( \u603b\u7ed3\u662f\u8fdb\u6b65\u7684\u9636\u68af, \u5206\u4eab\u662f\u5feb\u4e50\u7684\u6e90\u6cc9 ). 2 \u600e\u4e48\u6837\u624d\u7b97\u662f\u4e00\u4e2a\u4eba\u624d 1 \u6280\u672f\u5f88\u5389\u5bb3 2 \u9879\u76ee\u7ecf\u5386\u5f88\u9ad8\u5927\u4e0a 3 \u901a\u4eba\u6027\u3001\u4f1a\u8bf4\u8bdd(\u8bf4\u8bdd\u8bf4\u5230\u4eba\u5fc3\u574e\u91cc) 4 \u5bf9\u9886\u5bfc\u5fe0\u8bda 3 \u963f\u91ccP6\u3001P7\u3001P8 \u7684\u80fd\u529b\u6a21\u578b 4 \u963f\u91ccP7\u5e94\u8be5\u5177\u5907\u7684\u80fd\u529b 1.\u6280\u672f \u6309\u4ee5\u4e0a\u7684\u601d\u7ef4\u5bfc\u56fe\uff0c\u6280\u672f\u90e8\u5206\u63d0\u70bc\u4e3a\u4ee5\u4e0b\u4e09\u70b9\uff1a 1\u3001\u8d1f\u8d23\u4e00\u4e2a\u9886\u57df\u7684\u6280\u672f\uff0c\u80fd\u5b9a\u4e49\u8be5\u9886\u57df\u7684\u6838\u5fc3\u95ee\u9898\uff0c\u6709\u601d\u8003\u89c4\u5212\u80fd\u529b\u548c\u8fed\u4ee3\u6f14\u8fdb\uff0c\u63d0\u4f9b\u5177\u6709\u884c\u4e1a\u7ade\u4e89\u529b\u7684\u6280\u672f\u65b9\u6848\u843d\u5730\uff0c\u5177\u5907\u4e00\u5b9a\u7684\u6280\u672f\u6df1\u5ea6\u548c\u5e7f\u5ea6\u3002 \u89e3\u8bfb\uff1a\u8fd9\u6761\u6211\u89e3\u8bfb\u4e00\u4e0b\u201c\u4e00\u5b9a\u7684\u6280\u672f\u6df1\u5ea6\u548c\u5e7f\u5ea6\u201d\uff0c\u8fd9\u53c8\u5230\u5e95\u5982\u4f55\u7cbe\u786e\u5b9a\u4e49\u5462\uff1f\u4f8b\u5982\u4f60\u662f\u4e00\u540d P7 \u7684\u4e1a\u52a1\u540e\u7aef\uff0c\u5e7f\u5ea6\u4e0a\u8981\u719f\u6089 MySQL\uff08\u8868\u8bbe\u8ba1\u548c\u7d22\u5f15\u8bbe\u8ba1\u548c\u4f18\u5316\uff09\uff0cJVM\u539f\u7406\uff0cJavaSE \u57fa\u7840\uff0c\u8bbe\u8ba1\u6a21\u5f0f\uff0cSpring\u5168\u5bb6\u6876\u7cfb\u5217\uff0c\u7f13\u5b58\u548cMQ\u7684\u6b63\u786e\u4f7f\u7528\u59ff\u52bf\uff0c\u5206\u5e03\u5f0f\u539f\u7406\uff0c\u5404\u79cd\u4e2d\u95f4\u4ef6\u6bd4\u5982\u914d\u7f6e\u4e2d\u5fc3\uff0c\u5fae\u670d\u52a1\u7b49\u7b49\uff0c\u751a\u81f3\u8fd8\u9700\u8981\u4e86\u89e3\u67b6\u6784\u8bbe\u8ba1\u4e09\u539f\u5219\uff08\u5408\u9002\u3001\u7b80\u5355\u548c\u6f14\u5316\u539f\u5219\uff09\uff0cDDD\uff0cCAP \u7406\u8bba\uff0cDocker\uff0cK8S \u548c\u62dc\u5360\u5ead\u5c06\u519b\u95ee\u9898\u7b49\u7b49\u3002 \u81f3\u4e8e\u6df1\u5ea6\u65b9\u9762\u6bd4\u5982JVM\uff0c\u5404\u79cd\u5783\u573e\u6536\u96c6\u7b97\u6cd5\u5f97\u4e86\u89e3\u5427\uff0c\u9047\u5230 outofmemory \u3001YGC\u3001 FullGC\uff0c\u53ef\u4ee5\u901f\u5ea6\u5b9a\u4f4d\u5230\u95ee\u9898\u5427\u3002\u9047\u5230\u67d0\u4e00\u4e2a SQL \u5ffd\u7136\u4e0d\u8d70\u7d22\u5f15\u4e86\uff0c\u5f97\u80fd\u5206\u6790\u51fa\u5177\u4f53\u4ec0\u4e48\u539f\u56e0\u5427\u3002\u5e94\u7528\u670d\u52a1\u5668 CPU Load \u7a81\u7136\u589e\u957f\u5230\u539f\u6765\u7684\u51e0\u5341\u500d\uff0c\u4f60\u9700\u8981\u5177\u5907\u7b2c\u4e00\u65f6\u95f4\u5b9a\u4f4d\u95ee\u9898\u7684\u80fd\u529b\u3002 2\u3001\u80fd\u9488\u5bf9\u590d\u6742\u95ee\u9898\u548c\u591a\u6837\u73af\u5883\u8bbe\u8ba1\u826f\u597d\u7684\u6280\u672f\u67b6\u6784\uff0c\u5bf9\u4e8e\u4e00\u7c7b\u4e1a\u52a1/\u6280\u672f\u95ee\u9898\u5177\u5907\u826f\u597d\u7684\u6269\u5c55\u6027\u548c\u9c81\u68d2\u6027\uff0c\u5177\u5907\u5f88\u5f3a\u7684\u6570\u636e\u5206\u6790\u610f\u8bc6\u3002 \u89e3\u8bfb\uff1a\u5904\u7406\u590d\u6742\u95ee\u9898\u7684\u65b9\u6cd5\u8bba\u6709\u4ee5\u4e0b\u51e0\u79cd\uff1a\u62bd\u8c61\u5171\u6027\u3001\u5316\u7e41\u4e3a\u7b80\u3001\u6a21\u5757\u548c\u7ec4\u4ef6\u5316\uff0c\u5148\u8dd1\u8d77\u6765\u518d\u4f18\u5316\u7b49\u7b49\u3002\u6240\u8c13\u7684\u9c81\u68d2\u6027\u6307\u7684\u662f\u7a0b\u5e8f\u5f3a\u58ee\u548c\u5065\u58ee\u6027\uff0c\u5927\u7684\u8bf4\u6bd4\u5982\u591a\u6d3b\u7684\u67b6\u6784\uff0c\u4e00\u4e2a\u673a\u623f\u6302\u4e86\uff0c\u7167\u6837\u4e0d\u5f71\u54cd\u6b63\u5e38\u4e1a\u52a1\u8fd0\u8f6c\uff0c\u5c0f\u7684\u6bd4\u5982\u7f13\u5b58\u96c6\u7fa4\u6302\u4e86\u7cfb\u7edf\u4e0d\u4f1a\u6302\uff0c\u7acb\u9a6c\u6545\u969c\u8f6c\u79fb\u3002 3\u3001\u4ece\u4e1a\u52a1\u53d1\u5c55\u80cc\u540e\u601d\u8003\u6280\u672f\u7b56\u7565\u548c\u6d1e\u5bdf\u6280\u672f\u9700\u6c42\uff0c\u5f62\u6210\u5bf9\u5e94\u7684\u6280\u672f\u4ea7\u54c1\u652f\u6491\u7cfb\u7edf\uff0c\u9a71\u52a8\u4e1a\u52a1\u7684\u6301\u7eed\u53d1\u5c55\u3002 \u89e3\u8bfb\uff1a\u636e\u6211\u6240\u77e5\uff0c\u7edd\u5927\u591a\u6570\u7684\u516c\u53f8\u6280\u672f\u90fd\u662f\u652f\u6491\u516c\u53f8\u4e1a\u52a1\u53d1\u5c55\uff0c\u6280\u672f\u9a71\u52a8\u516c\u53f8\u4e1a\u52a1\u662f\u6781\u5c11\u6570\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u6211\u5446\u8fc7\u7684\u516c\u53f8\u6bd4\u5982\u8d1d\u58f3\u7684 VR \u770b\u623f\u662f\u4e00\u4e2a\u573a\u666f\u3002 \u6280\u672f\u5c31\u5148\u804a\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u7ee7\u7eed..... 2.\u4e1a\u52a1 1\u3001\u8d1f\u8d23\u4e00\u5c0f\u578b\u4e1a\u52a1\u7ebf\uff0c\u80fd\u591f\u62c6\u89e3\u4ea7\u54c1\u9700\u6c42\u5e76\u8fdb\u884c\u5e73\u53f0\u5316\u6c89\u6dc0\uff0c\u540c\u65f6\u5177\u6709\u53cd\u5411\u9a71\u52a8\u4e1a\u52a1\u53d1\u5c55\u3002 \u89e3\u8bfb\uff1a\u91cd\u70b9\u8bf4\u4e00\u4e0b\u300c\u53cd\u5411\u9a71\u52a8\u4e1a\u52a1\u300d\uff0c\u5c31\u662f\u6280\u672f\u4ece\u652f\u6491\u4e1a\u52a1\u8fdb\u5316\u5230\u63a8\u7740\u4e1a\u52a1\u5f80\u524d\u8dd1\uff0c\u8fd9\u79cd\u573a\u666f\u6211\u76f8\u4fe1\u6280\u672f\u4eba\u662f\u975e\u5e38\u81ea\u8c6a\u7684\u3002 2\u3001\u6709\u7ed3\u6784\u5316\u601d\u7ef4\u548c\u5b9a\u4e49\u6307\u6807\u80fd\u529b\uff0c\u8d34\u5408\u4e1a\u52a1\u5927\u76ee\u6807\u6e05\u6670\u7684\u7406\u89e3\u81ea\u5df1\u56e2\u961f\u7684\u5b9a\u4f4d\u548c\u6838\u5fc3\u53d1\u529b\u70b9\uff0c\u5177\u6709\u67b6\u6784\u6f14\u8fdb\u548c\u89c4\u5212\u843d\u5730\u7684\u80fd\u529b\uff0c\u5e76\u53d6\u5f97\u6709\u6570\u636e\u4f50\u8bc1\u7684\u4e1a\u52a1\u7ed3\u679c\uff08\u6b63\u5411/\u53cd\u5411\uff09\u3002 \u89e3\u8bfb\uff1a\u7ed3\u6784\u5316\u601d\u7ef4\uff08Structured Thinking\uff09\u662f\u6307\u4e00\u4e2a\u4eba\u5728\u9762\u5bf9\u5de5\u4f5c\u4efb\u52a1\u6216\u8005\u96be\u9898\u65f6\u80fd\u4ece\u591a\u4e2a\u4fa7\u9762\u8fdb\u884c\u601d\u8003\uff0c\u6df1\u523b\u5206\u6790\u5bfc\u81f4\u95ee\u9898\u51fa\u73b0\u7684\u539f\u56e0\uff0c\u7cfb\u7edf\u5236\u5b9a\u884c\u52a8\u65b9\u6848\uff0c\u5e76\u91c7\u53d6\u6070\u5f53\u7684\u624b\u6bb5\u4f7f\u5de5\u4f5c\u5f97\u4ee5\u9ad8\u6548\u7387\u5f00\u5c55\uff0c\u53d6\u5f97\u9ad8\u7ee9\u6548\u3002\u4e00\u4e2a\u7b80\u5355\u4f8b\u5b50\u6211\u4eec\u6570\u636e\u5e93\u5b57\u6bb5\u7c7b\u578b\u5c31\u662f\u7ed3\u6784\u5316\u601d\u7ef4\u7684\uff0c\u6bd4\u5982\u6211\u4eec\u8861\u91cf\u4e00\u4e2a\u67b6\u6784\u662f\u5426\u4f18\u79c0\uff0c\u8981\u4ece\u7a33\u5b9a\u6027\u3001\u5065\u58ee\u6027\u3001\u6269\u5c55\u6027\u591a\u7ef4\u5ea6\u601d\u8003\u8fd9\u5c31\u662f\u7ed3\u6784\u5316\u601d\u7ef4\u3002 3\u3001\u5177\u6709\u534f\u8c03\u591a\u6761\u4e1a\u52a1\u7684\u6280\u672fPM\u80fd\u529b\uff0c\u6709\u8f83\u5f3a\u7684\u6280\u672f\u6574\u5408\u80fd\u529b\uff0c\u5bf9\u8d1f\u8d23\u4e1a\u52a1\u4e0a\u4e0b\u6e38\u94fe\u8def\u6280\u672f\u98ce\u9669\u5177\u5907\u8bc6\u522b\u80fd\u529b\uff0c\u4e14\u80fd\u63d0\u4f9b\u5408\u7406\u7684\u6ee1\u8db3\u5404\u65b9\u8bc9\u6c42\u7684\u603b\u4f53\u89e3\u51b3\u65b9\u6848\uff0c\u5e76\u4e14\u80fd\u62ff\u5230\u4e1a\u52a1\u7ed3\u679c\u3002 \u89e3\u8bfb\uff1a\u8fd9\u91cc\u7684\u6280\u672fPM\u4e0d\u662f\u6211\u4eec\u65e5\u5e38\u8bf4\u7684\u4e1a\u52a1PM\uff0c\u4ed6\u4e3b\u8981\u662f\u505a\u6280\u672f\u9879\u76ee\uff08\u6bd4\u5982\u7edf\u4e00\u670d\u52a1\u5316\u6539\u9020\uff0c\u591a\u4ea7\u54c1\u7ebf\u63a5\u5165\u7edf\u4e00SSO\u7cfb\u7edf\uff09\u7684\u8bbe\u8ba1\u3001\u63a8\u8fdb\u548c\u843d\u5730\u3002 \u5173\u4e86\u89e3\u9488\u5bf9\u6027\u6280\u672f\u548c\u4e1a\u52a1\u8fd8\u4e0d\u591f\u7684\uff0c\u8fd8\u6709\u4e00\u4e9b\u901a\u7528\u6027\u7684\u6280\u672f\u77e5\u8bc6\uff0c\u8bf7\u7ee7\u7eed\u770b\u4e0b\u6587\u3002 3.\u901a\u7528 1\u3001\u8de81\u52302\u4e2a\u6280\u672f\u6808\u5f00\u53d1\u548c\u65b9\u6848\u8bbe\u8ba1\u80fd\u529b\uff0c\u5177\u5907\u826f\u597d\u7684\u6280\u672f\u81ea\u9a71\u529b\u548c\u4e1a\u52a1\u601d\u8003\u529b\u3002 \u89e3\u8bfb\uff1a\u4f5c\u4e3a\u540e\u7aef\u9700\u8981\u5177\u5907\u4e00\u4e9b\u524d\u7aef\u7684\u77e5\u8bc6\uff0c\u5177\u5907\u591a\u9886\u57df\u77e5\u8bc6\u6211\u4eec\u89e3\u51b3\u95ee\u9898\u7684\u601d\u8def\u548c\u529e\u6cd5\u4f1a\u5f00\u9614\u5f88\u591a\u3002\u81f3\u4e8e\u4e1a\u52a1\u601d\u8003\u529b\u9700\u8981\u6211\u4eec\u8981\u975e\u5e38\u4e86\u89e3\u4e1a\u52a1\uff0c\u5e76\u591a\u53bb\u4e1a\u52a1\u73b0\u573a\u5b9e\u64cd\uff0c\u4e14\u591a\u601d\u8003\u624d\u53ef\u4ee5\u62e5\u6709\u8fd9\u9879\u80fd\u529b\u3002 2\u3001\u4e86\u89e3\u6574\u4e2a\u7cfb\u7edf\uff0c\u5177\u5907\u6838\u5fc3\u6a21\u5757\u7684\u7f16\u7801\u80fd\u529b\uff0c\u6709\u5f88\u5f3a\u7684\u5206\u6790\u548c\u89e3\u51b3\u95ee\u9898\u7684\u80fd\u529b\uff0c\u662f\u5173\u952e\u95ee\u9898\u7ec8\u7ed3\u8005\u3002 \u89e3\u8bfb\uff1a\u7b80\u5355\u4e00\u70b9\u8bf4\uff0c\u6211\u4eec\u8d1f\u8d23\u7684\u7cfb\u7edf\u6240\u6709\u7684\u6280\u672f\u96be\u9898\u90fd\u53ef\u4ee5\u5feb\u901f\u89e3\u51b3\u3002 4.\u5176\u4ed6 1\u3001\u5173\u6ce8\u4eba\u7684\u6f5c\u529b\u3001\u81ea\u9a71\u529b\u3001\u4e3b\u52a8\u6027\u548c\u597d\u5947\u5fc3 \u89e3\u8bfb\uff1a\u4e0a\u4e00\u7bc7\u5df2\u7ecf\u8bf4\u4e86\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86\uff08\u963f\u91cc\u6280\u672f\u4eba\u624d\u80fd\u529b\u6a21\u578b\uff08\u6df1\u5ea6\u89e3\u8bfb\u7cfb\u5217\u4e4b\u4e00\uff09\uff09\u3002 2\u3001\u6784\u5efa\u56e2\u961f\u7684\u80fd\u529b \u89e3\u8bfb\uff1a\u5177\u5907\u4ece0\u52301\u642d\u5efa\u4e00\u4e2a10\u4eba\u5de6\u53f3\u56e2\u961f\u7684\u80fd\u529b\uff0c\u6216\u5df2\u7ecf\u67093/4\u4e2a\u8001\u5458\u5de5\u5c06\u56e2\u961f\u642d\u5efa\u523010\u4eba\u5de6\u53f3\u7684\u80fd\u529b\u3002 3\u3001\u5e26\u9886\u5c0f\u578b\u56e2\u961f\u7684\u80fd\u529b \u89e3\u8bfb\uff1a\u53ef\u4ee5\u6839\u636e\u4e1a\u52a1\u7684\u6218\u7565\u65b9\u5411\uff0c\u7ed9\u56e2\u961f\u6307\u660e\u6280\u672f\u65b9\u5411\uff0c\u540c\u65f6\u53ef\u4ee5\u5e26\u9886\u56e2\u961f\u5b8c\u6210\u65e2\u5b9a\u7684\u76ee\u6807\uff0c\u540c\u65f6\u53ef\u4ee5\u6839\u636e\u6bcf\u4e2a\u4e0b\u5c5e\u7684\u7279\u70b9\u7ed9\u4e88\u6307\u5bfc\uff0c\u8ba9\u4e0b\u5c5e\u53ef\u4ee5\u8d5a\u5230\u94b1\u7684\u540c\u65f6\u8fd8\u53ef\u4ee5\u63d0\u5347\u81ea\u5df1\u7684\u80fd\u529b\u3002\u5f53\u7136\u5bf9\u4e8e\u4e0d\u7b26\u5408\u56e2\u961f\u4ef7\u503c\u89c2\u6216\u7ee9\u6548\u4e0d\u53ca\u683c\uff0c\u5fc5\u987b\u5feb\u5200\u65a9\u4e71\u9ebb\u3002 4\u3001\u6709\u57f9\u517b\u6280\u672f\u9aa8\u5e72\u7684\u80fd\u529b \u89e3\u8bfb\uff1a\u6211\u89c1\u8fc7\u975e\u5e38\u591a\u7684\u6280\u672f\u7ecf\u7406\u6216\u8005 P7 \u7684\u670b\u53cb\uff0c\u4ed6\u4eec\u53ef\u4ee5\u81ea\u5df1\u628a\u4e00\u4ef6\u5f88\u96be\u7684\u5de5\u4f5c\u505a\u597d\uff0c\u4f46\u662f\u5bf9\u4e8e\u57f9\u517b\u65b0\u4eba\uff0c\u57f9\u517b\u6280\u672f\u9aa8\u5e72\uff08P6\uff09\u7f3a\u4e4f\u7ecf\u9a8c\uff0c\u4f46\u662f\u4f5c\u4e3a P7\uff0c\u8fd9\u9879\u80fd\u529b\u662f\u5fc5\u987b\u5177\u5907\u7684\u3002 \u600e\u4e48\u505a\u5462\uff1f \u7b2c\u4e00\u7ed9\u4ed6\u6709\u6311\u6218\u6027\u7684\u9879\u76ee\uff0c\u7b2c\u4e8c\u5e2e\u52a9\u4ed6\u89e3\u51b3\u9879\u76ee\u4e2d\u9047\u5230\u7684\u5404\u79cd\u95ee\u9898\uff08\u5982\u7cfb\u7edf\u89c4\u5212\u3001\u8de8\u56e2\u961f\u6c9f\u901a\u7b49\u7b49\uff09\uff0c\u6211\u79f0\u4e4b\u4e3a\u201c\u6276\u4e0a\u9a6c\u518d\u9001\u4e00\u7a0b\u201d\u3002 5.\u8003\u5bdf\u91cd\u70b9 1\u3001\u7cfb\u7edf\u6027 \u89e3\u8bfb\uff1a\u7cfb\u7edf\u6027\u662f\u6307\u4e00\u4e2a\u5c42\u6b21\u5206\u660e\u7684\u6574\u4f53\uff0c\u4e0d\u540c\u7ef4\u5ea6\u7684\u5b50\u7cfb\u7edf\u5904\u4e8e\u4e0d\u540c\u5c42\u7ea7\uff0c\u540c\u5c42\u7ea7\u5b50\u7cfb\u7edf\u4e4b\u95f4\u5177\u6709\u6e05\u6670\u7684\u903b\u8f91\u5173\u7cfb\u3002\u6bd4\u5982\u753b\u4e00\u4e2a Redis \u7cfb\u7edf\u67b6\u6784\u56fe\uff1a 2\u3001\u5b50\u9886\u57df\u4ee3\u8868 \u89e3\u8bfb\uff1a\u4e00\u53e5\u8bdd\u89e3\u91ca\u5c31\u662f\u8fd9\u4e2a\u9886\u57df\u6700\u6709\u6743\u5a01\u7684\u6280\u672f\u8d1f\u8d23\u4eba\uff0c\u6bd4\u5982\u7535\u5546\u4e1a\u52a1\u4e2d\u7684\u4f1a\u5458\u3001\u5e93\u5b58\u6216\u8ba2\u5355\u3002 3\u3001\u90e8\u95e8\u5f71\u54cd\u529b \u89e3\u8bfb\uff1a\u80fd\u591f\u5bf9\u4e8c\u7ea7\u90e8\u95e8\uff08\u5927\u516c\u53f8\u6709\u591a\u4e2a\u6280\u672f\u90e8\u95e8\uff09\u51e0\u4e2a\u4e0d\u540c\u7684\u6a21\u5757\u90fd\u4ea7\u751f\u79ef\u6781\u7684\u5f71\u54cd. 5 \u53c2\u8003\u6587\u6863 \u4ee5\u4e0b\u8f6c\u8f7d\u81ea \u519b\u54e5\u624b\u8bb0 , \u53c2\u8003\u6587\u6863: \u6587\u68631 \u6587\u68632","title":"\u7b2c\u56db\u7bc7 \u6280\u672f\u80fd\u529b\u6a21\u578b\u603b\u7ed3"},{"location":"chapter_8/4_jishunenglimoxing/#_1","text":"\u672c\u7bc7\u6587\u7ae0\u7528\u4e8e\u56de\u7b54\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898: \u540c\u6837\u662fSRE,\u4f60\u51ed\u4ec0\u4e48\u6bd4\u522b\u4eba\u4f18\u79c0? (\u6362\u8a00\u4e4b\u4e00\u4e2a\u4f18\u79c0\u7684SRE\u5e94\u8be5\u5177\u5907\u54ea\u4e9b\u5173\u952e\u7279\u8d28) \u4f7f\u7528\u963f\u91ccP6\u3001P7\u3001P8\u7684\u80fd\u529b\u6a21\u578b, \u65b9\u4fbf\u8bc4\u4f30\u81ea\u5df1/\u4ed6\u4eba\u5904\u4e8e\u54ea\u4e2a\u9636\u6bb5.","title":"\u6982\u8ff0"},{"location":"chapter_8/4_jishunenglimoxing/#1-sre","text":"P6\u505aP7\u7684\u4e8b\u60c5\uff0c\u540c\u65f6\u8fd8\u8981\u6709P8\u7684\u601d\u7ef4. \u56e2\u961f\u5185\u90e8\u8ba8\u8bba\u65b9\u6848, \u5148\u60f3\u6e05\u695a\uff0c\u53d1\u51fa\u6765\u7ed9\u5927\u5bb6\u8bf4\u660e\u767d, \u518d\u5177\u4f53\u6267\u884c. \u6ca1\u6709\u8c03\u67e5\u5c31\u6ca1\u6709\u53d1\u8a00\u6743\u3002\u8981\u7528\u6570\u636e\u8bf4\u8bdd. \u62ff\u6570\u636e\u8bf4\u5de5\u4f5c\u6210\u679c, \u8981\u6709\u4e1a\u52a1\u6210\u679c, \u6bd4\u5982 0 \uff5e 1 , 1 \uff5e n , \u53d1\u73b0\u91cd\u5927\u9690\u60a3 , \u7a81\u7834\u91cd\u5927\u96be\u9898 . \u5f3a\u5927\u7684\u540c\u7406\u5fc3\u3002 \u7ad9\u5728\u5f53\u4e8b\u4eba\u7684\u89d2\u5ea6\u548c\u4f4d\u7f6e\u4e0a\uff0c\u5ba2\u89c2\u7684\u7406\u89e3\u5f53\u4e8b\u4eba\u7684\u5185\u5fc3\u611f\u53d7\uff0c\u8bbe\u8eab\u5904\u5730\u7684\u53bb\u4f53\u8c05\u4ed6\u4eba\uff0c\u5e2e\u4ed6\u4eec\u89e3\u51b3\u95ee\u9898. \u81ea\u52a8\u81ea\u53d1--\u4e0d\u8981\u4e8b\u4e8b\u7b49\u4eba\u4ea4\u4ee3. \u7231\u603b\u7ed3,\u7231\u5206\u4eab( \u603b\u7ed3\u662f\u8fdb\u6b65\u7684\u9636\u68af, \u5206\u4eab\u662f\u5feb\u4e50\u7684\u6e90\u6cc9 ).","title":"1 \u4e00\u4e2a\u4f18\u79c0SRE\u5e94\u8be5\u5177\u5907\u7684\u7279\u8d28"},{"location":"chapter_8/4_jishunenglimoxing/#2","text":"1 \u6280\u672f\u5f88\u5389\u5bb3 2 \u9879\u76ee\u7ecf\u5386\u5f88\u9ad8\u5927\u4e0a 3 \u901a\u4eba\u6027\u3001\u4f1a\u8bf4\u8bdd(\u8bf4\u8bdd\u8bf4\u5230\u4eba\u5fc3\u574e\u91cc) 4 \u5bf9\u9886\u5bfc\u5fe0\u8bda","title":"2 \u600e\u4e48\u6837\u624d\u7b97\u662f\u4e00\u4e2a\u4eba\u624d"},{"location":"chapter_8/4_jishunenglimoxing/#3-p6p7p8","text":"","title":"3 \u963f\u91ccP6\u3001P7\u3001P8 \u7684\u80fd\u529b\u6a21\u578b"},{"location":"chapter_8/4_jishunenglimoxing/#4-p7","text":"","title":"4 \u963f\u91ccP7\u5e94\u8be5\u5177\u5907\u7684\u80fd\u529b"},{"location":"chapter_8/4_jishunenglimoxing/#1","text":"\u6309\u4ee5\u4e0a\u7684\u601d\u7ef4\u5bfc\u56fe\uff0c\u6280\u672f\u90e8\u5206\u63d0\u70bc\u4e3a\u4ee5\u4e0b\u4e09\u70b9\uff1a","title":"1.\u6280\u672f"},{"location":"chapter_8/4_jishunenglimoxing/#1_1","text":"\u89e3\u8bfb\uff1a\u8fd9\u6761\u6211\u89e3\u8bfb\u4e00\u4e0b\u201c\u4e00\u5b9a\u7684\u6280\u672f\u6df1\u5ea6\u548c\u5e7f\u5ea6\u201d\uff0c\u8fd9\u53c8\u5230\u5e95\u5982\u4f55\u7cbe\u786e\u5b9a\u4e49\u5462\uff1f\u4f8b\u5982\u4f60\u662f\u4e00\u540d P7 \u7684\u4e1a\u52a1\u540e\u7aef\uff0c\u5e7f\u5ea6\u4e0a\u8981\u719f\u6089 MySQL\uff08\u8868\u8bbe\u8ba1\u548c\u7d22\u5f15\u8bbe\u8ba1\u548c\u4f18\u5316\uff09\uff0cJVM\u539f\u7406\uff0cJavaSE \u57fa\u7840\uff0c\u8bbe\u8ba1\u6a21\u5f0f\uff0cSpring\u5168\u5bb6\u6876\u7cfb\u5217\uff0c\u7f13\u5b58\u548cMQ\u7684\u6b63\u786e\u4f7f\u7528\u59ff\u52bf\uff0c\u5206\u5e03\u5f0f\u539f\u7406\uff0c\u5404\u79cd\u4e2d\u95f4\u4ef6\u6bd4\u5982\u914d\u7f6e\u4e2d\u5fc3\uff0c\u5fae\u670d\u52a1\u7b49\u7b49\uff0c\u751a\u81f3\u8fd8\u9700\u8981\u4e86\u89e3\u67b6\u6784\u8bbe\u8ba1\u4e09\u539f\u5219\uff08\u5408\u9002\u3001\u7b80\u5355\u548c\u6f14\u5316\u539f\u5219\uff09\uff0cDDD\uff0cCAP \u7406\u8bba\uff0cDocker\uff0cK8S \u548c\u62dc\u5360\u5ead\u5c06\u519b\u95ee\u9898\u7b49\u7b49\u3002 \u81f3\u4e8e\u6df1\u5ea6\u65b9\u9762\u6bd4\u5982JVM\uff0c\u5404\u79cd\u5783\u573e\u6536\u96c6\u7b97\u6cd5\u5f97\u4e86\u89e3\u5427\uff0c\u9047\u5230 outofmemory \u3001YGC\u3001 FullGC\uff0c\u53ef\u4ee5\u901f\u5ea6\u5b9a\u4f4d\u5230\u95ee\u9898\u5427\u3002\u9047\u5230\u67d0\u4e00\u4e2a SQL \u5ffd\u7136\u4e0d\u8d70\u7d22\u5f15\u4e86\uff0c\u5f97\u80fd\u5206\u6790\u51fa\u5177\u4f53\u4ec0\u4e48\u539f\u56e0\u5427\u3002\u5e94\u7528\u670d\u52a1\u5668 CPU Load \u7a81\u7136\u589e\u957f\u5230\u539f\u6765\u7684\u51e0\u5341\u500d\uff0c\u4f60\u9700\u8981\u5177\u5907\u7b2c\u4e00\u65f6\u95f4\u5b9a\u4f4d\u95ee\u9898\u7684\u80fd\u529b\u3002","title":"1\u3001\u8d1f\u8d23\u4e00\u4e2a\u9886\u57df\u7684\u6280\u672f\uff0c\u80fd\u5b9a\u4e49\u8be5\u9886\u57df\u7684\u6838\u5fc3\u95ee\u9898\uff0c\u6709\u601d\u8003\u89c4\u5212\u80fd\u529b\u548c\u8fed\u4ee3\u6f14\u8fdb\uff0c\u63d0\u4f9b\u5177\u6709\u884c\u4e1a\u7ade\u4e89\u529b\u7684\u6280\u672f\u65b9\u6848\u843d\u5730\uff0c\u5177\u5907\u4e00\u5b9a\u7684\u6280\u672f\u6df1\u5ea6\u548c\u5e7f\u5ea6\u3002"},{"location":"chapter_8/4_jishunenglimoxing/#2_1","text":"\u89e3\u8bfb\uff1a\u5904\u7406\u590d\u6742\u95ee\u9898\u7684\u65b9\u6cd5\u8bba\u6709\u4ee5\u4e0b\u51e0\u79cd\uff1a\u62bd\u8c61\u5171\u6027\u3001\u5316\u7e41\u4e3a\u7b80\u3001\u6a21\u5757\u548c\u7ec4\u4ef6\u5316\uff0c\u5148\u8dd1\u8d77\u6765\u518d\u4f18\u5316\u7b49\u7b49\u3002\u6240\u8c13\u7684\u9c81\u68d2\u6027\u6307\u7684\u662f\u7a0b\u5e8f\u5f3a\u58ee\u548c\u5065\u58ee\u6027\uff0c\u5927\u7684\u8bf4\u6bd4\u5982\u591a\u6d3b\u7684\u67b6\u6784\uff0c\u4e00\u4e2a\u673a\u623f\u6302\u4e86\uff0c\u7167\u6837\u4e0d\u5f71\u54cd\u6b63\u5e38\u4e1a\u52a1\u8fd0\u8f6c\uff0c\u5c0f\u7684\u6bd4\u5982\u7f13\u5b58\u96c6\u7fa4\u6302\u4e86\u7cfb\u7edf\u4e0d\u4f1a\u6302\uff0c\u7acb\u9a6c\u6545\u969c\u8f6c\u79fb\u3002","title":"2\u3001\u80fd\u9488\u5bf9\u590d\u6742\u95ee\u9898\u548c\u591a\u6837\u73af\u5883\u8bbe\u8ba1\u826f\u597d\u7684\u6280\u672f\u67b6\u6784\uff0c\u5bf9\u4e8e\u4e00\u7c7b\u4e1a\u52a1/\u6280\u672f\u95ee\u9898\u5177\u5907\u826f\u597d\u7684\u6269\u5c55\u6027\u548c\u9c81\u68d2\u6027\uff0c\u5177\u5907\u5f88\u5f3a\u7684\u6570\u636e\u5206\u6790\u610f\u8bc6\u3002"},{"location":"chapter_8/4_jishunenglimoxing/#3","text":"\u89e3\u8bfb\uff1a\u636e\u6211\u6240\u77e5\uff0c\u7edd\u5927\u591a\u6570\u7684\u516c\u53f8\u6280\u672f\u90fd\u662f\u652f\u6491\u516c\u53f8\u4e1a\u52a1\u53d1\u5c55\uff0c\u6280\u672f\u9a71\u52a8\u516c\u53f8\u4e1a\u52a1\u662f\u6781\u5c11\u6570\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u6211\u5446\u8fc7\u7684\u516c\u53f8\u6bd4\u5982\u8d1d\u58f3\u7684 VR \u770b\u623f\u662f\u4e00\u4e2a\u573a\u666f\u3002 \u6280\u672f\u5c31\u5148\u804a\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u7ee7\u7eed.....","title":"3\u3001\u4ece\u4e1a\u52a1\u53d1\u5c55\u80cc\u540e\u601d\u8003\u6280\u672f\u7b56\u7565\u548c\u6d1e\u5bdf\u6280\u672f\u9700\u6c42\uff0c\u5f62\u6210\u5bf9\u5e94\u7684\u6280\u672f\u4ea7\u54c1\u652f\u6491\u7cfb\u7edf\uff0c\u9a71\u52a8\u4e1a\u52a1\u7684\u6301\u7eed\u53d1\u5c55\u3002"},{"location":"chapter_8/4_jishunenglimoxing/#2_2","text":"","title":"2.\u4e1a\u52a1"},{"location":"chapter_8/4_jishunenglimoxing/#1_2","text":"\u89e3\u8bfb\uff1a\u91cd\u70b9\u8bf4\u4e00\u4e0b\u300c\u53cd\u5411\u9a71\u52a8\u4e1a\u52a1\u300d\uff0c\u5c31\u662f\u6280\u672f\u4ece\u652f\u6491\u4e1a\u52a1\u8fdb\u5316\u5230\u63a8\u7740\u4e1a\u52a1\u5f80\u524d\u8dd1\uff0c\u8fd9\u79cd\u573a\u666f\u6211\u76f8\u4fe1\u6280\u672f\u4eba\u662f\u975e\u5e38\u81ea\u8c6a\u7684\u3002","title":"1\u3001\u8d1f\u8d23\u4e00\u5c0f\u578b\u4e1a\u52a1\u7ebf\uff0c\u80fd\u591f\u62c6\u89e3\u4ea7\u54c1\u9700\u6c42\u5e76\u8fdb\u884c\u5e73\u53f0\u5316\u6c89\u6dc0\uff0c\u540c\u65f6\u5177\u6709\u53cd\u5411\u9a71\u52a8\u4e1a\u52a1\u53d1\u5c55\u3002"},{"location":"chapter_8/4_jishunenglimoxing/#2_3","text":"\u89e3\u8bfb\uff1a\u7ed3\u6784\u5316\u601d\u7ef4\uff08Structured Thinking\uff09\u662f\u6307\u4e00\u4e2a\u4eba\u5728\u9762\u5bf9\u5de5\u4f5c\u4efb\u52a1\u6216\u8005\u96be\u9898\u65f6\u80fd\u4ece\u591a\u4e2a\u4fa7\u9762\u8fdb\u884c\u601d\u8003\uff0c\u6df1\u523b\u5206\u6790\u5bfc\u81f4\u95ee\u9898\u51fa\u73b0\u7684\u539f\u56e0\uff0c\u7cfb\u7edf\u5236\u5b9a\u884c\u52a8\u65b9\u6848\uff0c\u5e76\u91c7\u53d6\u6070\u5f53\u7684\u624b\u6bb5\u4f7f\u5de5\u4f5c\u5f97\u4ee5\u9ad8\u6548\u7387\u5f00\u5c55\uff0c\u53d6\u5f97\u9ad8\u7ee9\u6548\u3002\u4e00\u4e2a\u7b80\u5355\u4f8b\u5b50\u6211\u4eec\u6570\u636e\u5e93\u5b57\u6bb5\u7c7b\u578b\u5c31\u662f\u7ed3\u6784\u5316\u601d\u7ef4\u7684\uff0c\u6bd4\u5982\u6211\u4eec\u8861\u91cf\u4e00\u4e2a\u67b6\u6784\u662f\u5426\u4f18\u79c0\uff0c\u8981\u4ece\u7a33\u5b9a\u6027\u3001\u5065\u58ee\u6027\u3001\u6269\u5c55\u6027\u591a\u7ef4\u5ea6\u601d\u8003\u8fd9\u5c31\u662f\u7ed3\u6784\u5316\u601d\u7ef4\u3002","title":"2\u3001\u6709\u7ed3\u6784\u5316\u601d\u7ef4\u548c\u5b9a\u4e49\u6307\u6807\u80fd\u529b\uff0c\u8d34\u5408\u4e1a\u52a1\u5927\u76ee\u6807\u6e05\u6670\u7684\u7406\u89e3\u81ea\u5df1\u56e2\u961f\u7684\u5b9a\u4f4d\u548c\u6838\u5fc3\u53d1\u529b\u70b9\uff0c\u5177\u6709\u67b6\u6784\u6f14\u8fdb\u548c\u89c4\u5212\u843d\u5730\u7684\u80fd\u529b\uff0c\u5e76\u53d6\u5f97\u6709\u6570\u636e\u4f50\u8bc1\u7684\u4e1a\u52a1\u7ed3\u679c\uff08\u6b63\u5411/\u53cd\u5411\uff09\u3002"},{"location":"chapter_8/4_jishunenglimoxing/#3pm","text":"\u89e3\u8bfb\uff1a\u8fd9\u91cc\u7684\u6280\u672fPM\u4e0d\u662f\u6211\u4eec\u65e5\u5e38\u8bf4\u7684\u4e1a\u52a1PM\uff0c\u4ed6\u4e3b\u8981\u662f\u505a\u6280\u672f\u9879\u76ee\uff08\u6bd4\u5982\u7edf\u4e00\u670d\u52a1\u5316\u6539\u9020\uff0c\u591a\u4ea7\u54c1\u7ebf\u63a5\u5165\u7edf\u4e00SSO\u7cfb\u7edf\uff09\u7684\u8bbe\u8ba1\u3001\u63a8\u8fdb\u548c\u843d\u5730\u3002 \u5173\u4e86\u89e3\u9488\u5bf9\u6027\u6280\u672f\u548c\u4e1a\u52a1\u8fd8\u4e0d\u591f\u7684\uff0c\u8fd8\u6709\u4e00\u4e9b\u901a\u7528\u6027\u7684\u6280\u672f\u77e5\u8bc6\uff0c\u8bf7\u7ee7\u7eed\u770b\u4e0b\u6587\u3002","title":"3\u3001\u5177\u6709\u534f\u8c03\u591a\u6761\u4e1a\u52a1\u7684\u6280\u672fPM\u80fd\u529b\uff0c\u6709\u8f83\u5f3a\u7684\u6280\u672f\u6574\u5408\u80fd\u529b\uff0c\u5bf9\u8d1f\u8d23\u4e1a\u52a1\u4e0a\u4e0b\u6e38\u94fe\u8def\u6280\u672f\u98ce\u9669\u5177\u5907\u8bc6\u522b\u80fd\u529b\uff0c\u4e14\u80fd\u63d0\u4f9b\u5408\u7406\u7684\u6ee1\u8db3\u5404\u65b9\u8bc9\u6c42\u7684\u603b\u4f53\u89e3\u51b3\u65b9\u6848\uff0c\u5e76\u4e14\u80fd\u62ff\u5230\u4e1a\u52a1\u7ed3\u679c\u3002"},{"location":"chapter_8/4_jishunenglimoxing/#3_1","text":"","title":"3.\u901a\u7528"},{"location":"chapter_8/4_jishunenglimoxing/#112","text":"\u89e3\u8bfb\uff1a\u4f5c\u4e3a\u540e\u7aef\u9700\u8981\u5177\u5907\u4e00\u4e9b\u524d\u7aef\u7684\u77e5\u8bc6\uff0c\u5177\u5907\u591a\u9886\u57df\u77e5\u8bc6\u6211\u4eec\u89e3\u51b3\u95ee\u9898\u7684\u601d\u8def\u548c\u529e\u6cd5\u4f1a\u5f00\u9614\u5f88\u591a\u3002\u81f3\u4e8e\u4e1a\u52a1\u601d\u8003\u529b\u9700\u8981\u6211\u4eec\u8981\u975e\u5e38\u4e86\u89e3\u4e1a\u52a1\uff0c\u5e76\u591a\u53bb\u4e1a\u52a1\u73b0\u573a\u5b9e\u64cd\uff0c\u4e14\u591a\u601d\u8003\u624d\u53ef\u4ee5\u62e5\u6709\u8fd9\u9879\u80fd\u529b\u3002","title":"1\u3001\u8de81\u52302\u4e2a\u6280\u672f\u6808\u5f00\u53d1\u548c\u65b9\u6848\u8bbe\u8ba1\u80fd\u529b\uff0c\u5177\u5907\u826f\u597d\u7684\u6280\u672f\u81ea\u9a71\u529b\u548c\u4e1a\u52a1\u601d\u8003\u529b\u3002"},{"location":"chapter_8/4_jishunenglimoxing/#2_4","text":"\u89e3\u8bfb\uff1a\u7b80\u5355\u4e00\u70b9\u8bf4\uff0c\u6211\u4eec\u8d1f\u8d23\u7684\u7cfb\u7edf\u6240\u6709\u7684\u6280\u672f\u96be\u9898\u90fd\u53ef\u4ee5\u5feb\u901f\u89e3\u51b3\u3002","title":"2\u3001\u4e86\u89e3\u6574\u4e2a\u7cfb\u7edf\uff0c\u5177\u5907\u6838\u5fc3\u6a21\u5757\u7684\u7f16\u7801\u80fd\u529b\uff0c\u6709\u5f88\u5f3a\u7684\u5206\u6790\u548c\u89e3\u51b3\u95ee\u9898\u7684\u80fd\u529b\uff0c\u662f\u5173\u952e\u95ee\u9898\u7ec8\u7ed3\u8005\u3002"},{"location":"chapter_8/4_jishunenglimoxing/#4","text":"","title":"4.\u5176\u4ed6"},{"location":"chapter_8/4_jishunenglimoxing/#1_3","text":"\u89e3\u8bfb\uff1a\u4e0a\u4e00\u7bc7\u5df2\u7ecf\u8bf4\u4e86\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86\uff08\u963f\u91cc\u6280\u672f\u4eba\u624d\u80fd\u529b\u6a21\u578b\uff08\u6df1\u5ea6\u89e3\u8bfb\u7cfb\u5217\u4e4b\u4e00\uff09\uff09\u3002","title":"1\u3001\u5173\u6ce8\u4eba\u7684\u6f5c\u529b\u3001\u81ea\u9a71\u529b\u3001\u4e3b\u52a8\u6027\u548c\u597d\u5947\u5fc3"},{"location":"chapter_8/4_jishunenglimoxing/#2_5","text":"\u89e3\u8bfb\uff1a\u5177\u5907\u4ece0\u52301\u642d\u5efa\u4e00\u4e2a10\u4eba\u5de6\u53f3\u56e2\u961f\u7684\u80fd\u529b\uff0c\u6216\u5df2\u7ecf\u67093/4\u4e2a\u8001\u5458\u5de5\u5c06\u56e2\u961f\u642d\u5efa\u523010\u4eba\u5de6\u53f3\u7684\u80fd\u529b\u3002","title":"2\u3001\u6784\u5efa\u56e2\u961f\u7684\u80fd\u529b"},{"location":"chapter_8/4_jishunenglimoxing/#3_2","text":"\u89e3\u8bfb\uff1a\u53ef\u4ee5\u6839\u636e\u4e1a\u52a1\u7684\u6218\u7565\u65b9\u5411\uff0c\u7ed9\u56e2\u961f\u6307\u660e\u6280\u672f\u65b9\u5411\uff0c\u540c\u65f6\u53ef\u4ee5\u5e26\u9886\u56e2\u961f\u5b8c\u6210\u65e2\u5b9a\u7684\u76ee\u6807\uff0c\u540c\u65f6\u53ef\u4ee5\u6839\u636e\u6bcf\u4e2a\u4e0b\u5c5e\u7684\u7279\u70b9\u7ed9\u4e88\u6307\u5bfc\uff0c\u8ba9\u4e0b\u5c5e\u53ef\u4ee5\u8d5a\u5230\u94b1\u7684\u540c\u65f6\u8fd8\u53ef\u4ee5\u63d0\u5347\u81ea\u5df1\u7684\u80fd\u529b\u3002\u5f53\u7136\u5bf9\u4e8e\u4e0d\u7b26\u5408\u56e2\u961f\u4ef7\u503c\u89c2\u6216\u7ee9\u6548\u4e0d\u53ca\u683c\uff0c\u5fc5\u987b\u5feb\u5200\u65a9\u4e71\u9ebb\u3002","title":"3\u3001\u5e26\u9886\u5c0f\u578b\u56e2\u961f\u7684\u80fd\u529b"},{"location":"chapter_8/4_jishunenglimoxing/#4_1","text":"\u89e3\u8bfb\uff1a\u6211\u89c1\u8fc7\u975e\u5e38\u591a\u7684\u6280\u672f\u7ecf\u7406\u6216\u8005 P7 \u7684\u670b\u53cb\uff0c\u4ed6\u4eec\u53ef\u4ee5\u81ea\u5df1\u628a\u4e00\u4ef6\u5f88\u96be\u7684\u5de5\u4f5c\u505a\u597d\uff0c\u4f46\u662f\u5bf9\u4e8e\u57f9\u517b\u65b0\u4eba\uff0c\u57f9\u517b\u6280\u672f\u9aa8\u5e72\uff08P6\uff09\u7f3a\u4e4f\u7ecf\u9a8c\uff0c\u4f46\u662f\u4f5c\u4e3a P7\uff0c\u8fd9\u9879\u80fd\u529b\u662f\u5fc5\u987b\u5177\u5907\u7684\u3002 \u600e\u4e48\u505a\u5462\uff1f \u7b2c\u4e00\u7ed9\u4ed6\u6709\u6311\u6218\u6027\u7684\u9879\u76ee\uff0c\u7b2c\u4e8c\u5e2e\u52a9\u4ed6\u89e3\u51b3\u9879\u76ee\u4e2d\u9047\u5230\u7684\u5404\u79cd\u95ee\u9898\uff08\u5982\u7cfb\u7edf\u89c4\u5212\u3001\u8de8\u56e2\u961f\u6c9f\u901a\u7b49\u7b49\uff09\uff0c\u6211\u79f0\u4e4b\u4e3a\u201c\u6276\u4e0a\u9a6c\u518d\u9001\u4e00\u7a0b\u201d\u3002","title":"4\u3001\u6709\u57f9\u517b\u6280\u672f\u9aa8\u5e72\u7684\u80fd\u529b"},{"location":"chapter_8/4_jishunenglimoxing/#5","text":"","title":"5.\u8003\u5bdf\u91cd\u70b9"},{"location":"chapter_8/4_jishunenglimoxing/#1_4","text":"\u89e3\u8bfb\uff1a\u7cfb\u7edf\u6027\u662f\u6307\u4e00\u4e2a\u5c42\u6b21\u5206\u660e\u7684\u6574\u4f53\uff0c\u4e0d\u540c\u7ef4\u5ea6\u7684\u5b50\u7cfb\u7edf\u5904\u4e8e\u4e0d\u540c\u5c42\u7ea7\uff0c\u540c\u5c42\u7ea7\u5b50\u7cfb\u7edf\u4e4b\u95f4\u5177\u6709\u6e05\u6670\u7684\u903b\u8f91\u5173\u7cfb\u3002\u6bd4\u5982\u753b\u4e00\u4e2a Redis \u7cfb\u7edf\u67b6\u6784\u56fe\uff1a","title":"1\u3001\u7cfb\u7edf\u6027"},{"location":"chapter_8/4_jishunenglimoxing/#2_6","text":"\u89e3\u8bfb\uff1a\u4e00\u53e5\u8bdd\u89e3\u91ca\u5c31\u662f\u8fd9\u4e2a\u9886\u57df\u6700\u6709\u6743\u5a01\u7684\u6280\u672f\u8d1f\u8d23\u4eba\uff0c\u6bd4\u5982\u7535\u5546\u4e1a\u52a1\u4e2d\u7684\u4f1a\u5458\u3001\u5e93\u5b58\u6216\u8ba2\u5355\u3002","title":"2\u3001\u5b50\u9886\u57df\u4ee3\u8868"},{"location":"chapter_8/4_jishunenglimoxing/#3_3","text":"\u89e3\u8bfb\uff1a\u80fd\u591f\u5bf9\u4e8c\u7ea7\u90e8\u95e8\uff08\u5927\u516c\u53f8\u6709\u591a\u4e2a\u6280\u672f\u90e8\u95e8\uff09\u51e0\u4e2a\u4e0d\u540c\u7684\u6a21\u5757\u90fd\u4ea7\u751f\u79ef\u6781\u7684\u5f71\u54cd.","title":"3\u3001\u90e8\u95e8\u5f71\u54cd\u529b"},{"location":"chapter_8/4_jishunenglimoxing/#5_1","text":"\u4ee5\u4e0b\u8f6c\u8f7d\u81ea \u519b\u54e5\u624b\u8bb0 , \u53c2\u8003\u6587\u6863: \u6587\u68631 \u6587\u68632","title":"5 \u53c2\u8003\u6587\u6863"},{"location":"chapter_8/5_chanpingsiwei_1/","text":"\u6982\u8ff0 \u5e73\u65f6\u4e00\u76f4\u505a\u6280\u672f\uff0c\u4e60\u60ef\u770b\u6280\u672f\u6587\u7ae0\u3001\u4ea4\u6d41\u6280\u672f\u95ee\u9898, \u4f46\u6280\u672f\u4eba\u5fc5\u987b\u5177\u5907\u4ea7\u54c1\u601d\u7ef4, \u624d\u80fd\u66f4\u597d\u7684\u4e3a\u4e1a\u52a1\u8f93\u51fa\u4ef7\u503c. \u5728\u8bbe\u8ba1\u8fd0\u7ef4\u5de5\u5177\u65f6, \u5904\u5904\u9700\u8981\u7528\u5230\u4ea7\u54c1\u601d\u7ef4. \u5f80\u6df1\u4e86\u770b, \u5176\u5b9e\u4e0d\u540c\u5c97\u4f4d\u7684 \u9053 \u662f\u76f8\u901a\u7684. \u672c\u7bc7\u4ee5 \u4ea7\u54c1\u7ecf\u7406\u7684\u9ad8\u9891\u9762\u8bd5\u9898 \u4e3a\u57fa\u7840, \u8fdb\u884c\u603b\u7ed3\u548c\u68b3\u7406\u5176\u4e2d\u7684\u4ea7\u54c1\u601d\u7ef4. \u4ea7\u54c1\u7ecf\u7406\u57fa\u7840\u6280\u80fd \u57fa\u7840\u6280\u80fd \u5305\u62ec \u9700\u6c42\u5206\u6790 \u3001 \u7528\u6237\u8c03\u7814 \u3001 \u7ade\u54c1\u5206\u6790 \u3001 \u4ea7\u54c1\u8bbe\u8ba1 \u3001 \u9879\u76ee\u7ba1\u7406 \u3001 \u6570\u636e\u5206\u6790 \u4ea7\u54c1\u80fd\u529b \u5305\u62ec \u6c9f\u901a\u80fd\u529b \u3001 \u6267\u884c\u80fd\u529b \u3001 \u903b\u8f91\u601d\u7ef4 \u3001 \u5b66\u4e60\u80fd\u529b \u3001 \u9886\u5bfc\u80fd\u529b \u3001 \u521b\u65b0\u80fd\u529b \u4e3a\u4ec0\u4e48\u89c9\u7740\u81ea\u5df1\u9002\u5408\u505a\u4ea7\u54c1\u7ecf\u7406 \u5efa\u8bae\u6309\u7167\u5982\u4e0b\u903b\u8f91\u6846\u67b6\u56de\u7b54\uff1a 1\uff09\u4ece\u6027\u683c\u4e0a\u6765\u8bf4\uff0c\u6211\u662f\u9002\u5408\u505a\u4ea7\u54c1\u7ecf\u7406\u7684\uff0c\u5df4\u62c9\u5df4\u62c9XXXXX\uff08\u4e3e\u4f8b\u8bc1\u660e\u6027\u683c\u9002\u5408\u505a\u4ea7\u54c1\u7684\u70b9\uff09 2\uff09\u4ece\u80fd\u529b\u4e0a\u6765\u8bf4\uff0c\u6211\u662f\u80fd\u591f\u80dc\u4efb\u505a\u4ea7\u54c1\u7ecf\u7406\u7684\uff0c\u5df4\u62c9\u5df4\u62c9XXXXX\uff08\u4e3e\u4f8b\u8bc1\u660e\u81ea\u5df1\u6240\u638c\u63e1\u7684\u4ea7\u54c1\u6280\u80fd\uff09 \u56de\u987e\u4e0b\u8fd0\u7ef4\u5de5\u4f5c: \u4e5f\u53ef\u4ee5\u4ece \u6027\u683c \u3001 \u80fd\u529b 2\u4e2a\u65b9\u9762\u6765\u8861\u91cf. \u4ec0\u4e48\u662f\u4e00\u6b3e\u6210\u529f\u7684\u4ea7\u54c1 \u6bcf\u4e2a\u4eba\u5bf9\u4e8e\u6210\u529f\u4ea7\u54c1\u7684\u5b9a\u4e49\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u8fd9\u4e00\u9898\u6ca1\u6709\u6807\u51c6\u7b54\u6848\uff0c\u4f46\u4e00\u5b9a\u8981\u6709\u81ea\u5df1\u7684\u601d\u8003\u6846\u67b6\uff0c\u5efa\u8bae\u6309\u7167\u5982\u4e0b\u65b9\u6cd5\u56de\u7b54\uff1a 1\uff09\u4ece\u7528\u6237\u7684\u89d2\u5ea6\uff1a\u80fd\u6301\u7eed\u4e0d\u65ad\u7684\u89e3\u51b3\u76ee\u6807\u7528\u6237\u7684\u9700\u6c42\uff1b\u7528\u6237\u64cd\u4f5c\u7b80\u5355\u65b9\u4fbf\uff0c\u5728\u4f7f\u7528\u4ea7\u54c1\u540e\u80fd\u591f\u5feb\u901f\u7684\u6709\u6548\u7684\u89e3\u51b3\u95ee\u9898\u3002 2\uff09\u4ece\u4ea7\u54c1\u7684\u89d2\u5ea6\uff1a\u8be5\u4ea7\u54c1\u76f8\u8f83\u4e8e\u5176\u4ed6\u7ade\u54c1\u6709\u7740\u72ec\u7279\u7684\u4f18\u52bf\uff0c\u4ea7\u54c1\u80fd\u591f\u6301\u7eed\u4e0d\u65ad\u7684\u8fed\u4ee3\u4ee5\u6ee1\u8db3\u76ee\u6807\u7528\u6237\u7684\u9700\u6c42\u3002 3\uff09\u4ece\u5546\u4e1a\u7684\u89d2\u5ea6\uff1a\u516c\u53f8\u7684\u6280\u672f\u5c42\u9762\u53ef\u4ee5\u5b9e\u73b0\u8be5\u4ea7\u54c1\uff0c\u5e76\u4e14\u53ef\u4ee5\u957f\u671f\u7ef4\u62a4\uff0c\u6301\u7eed\u5b8c\u5584\uff1b\u8be5\u4ea7\u54c1\u53ef\u4ee5\u4e3a\u516c\u53f8\u521b\u9020\u957f\u671f\u7684\u53ef\u6301\u7eed\u4ef7\u503c\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u5229\u6da6\uff0c\u76c8\u5229\u6a21\u5f0f\uff0c\u5e02\u573a\u4ef7\u503c\uff0c\u6218\u7565\u5730\u4f4d\u7b49\uff1b \u4ea7\u54c1\u7ecf\u7406\u7684\u9700\u6c42\u6765\u6e90\u6709\u54ea\u4e9b\uff1f \u8fd9\u4e2a\u95ee\u9898\u8003\u5bdf\u4f60\u5bf9\u4ea7\u54c1\u7ecf\u7406\u5de5\u4f5c\u6d41\u7a0b\u7684\u7406\u89e3\uff0c\u4e00\u822c\u5728\u5b9e\u9645\u5de5\u4f5c\u4e2d\u4ea7\u54c1\u7ecf\u7406\u7684\u9700\u6c42\u67094\u5927\u6765\u6e90\uff0c\u5206\u522b\u662f: 1\uff09\u4ea7\u54c1\u9700\u6c42\uff1a\u4ea7\u54c1\u7ecf\u7406\u901a\u8fc7\u6570\u636e\u5206\u6790\u3001\u7528\u6237\u8c03\u7814\u3001\u7ade\u54c1\u5206\u6790\u7b49\u65b9\u6cd5\u9a8c\u8bc1\u901a\u8fc7\u7684\u9700\u6c42. 2\uff09\u8fd0\u8425\u7b49\u4e1a\u52a1\u90e8\u95e8\u63d0\u4ea4\u7684\u9700\u6c42\uff1a\u6bd4\u5982\u4ee5\u4eac\u4e1c\u4e3a\u4f8b\uff0c\u670d\u9970\u4e1a\u52a1\u90e8/\u751f\u9c9c\u4e1a\u52a1\u90e8/\u5bb6\u7535\u4e8b\u4e1a\u90e8\u7684\u8fd0\u8425\u3001\u91c7\u9500\u7b49\u4eba\u5458\u51fa\u4e8e\u63d0\u5347\u4e1a\u52a1\u6307\u6807\u7684\u89d2\u5ea6\u4f1a\u63d0\u51fa\u5404\u79cd\u9700\u6c42. 3\uff09\u8001\u677f\u7684\u9700\u6c42\uff1a\u9886\u5bfc\u4ece\u5916\u90e8\u5408\u4f5c\u7684\u89d2\u5ea6\u6216\u8005\u4ea7\u54c1\u6218\u7565\u7684\u89d2\u5ea6\u4e5f\u4f1a\u7ed9\u624b\u4e0b\u7684\u4ea7\u54c1\u7ecf\u7406\u63d0\u4e00\u4e9b\u9700\u6c42\uff0c\u6bd4\u5982\u6211\u8fd8\u63a5\u5230\u8fc7\u5927Boss\u7684\u9700\u6c42. 4\uff09Bug\u4fee\u590d\u7b49\uff1a\u5728\u5de5\u4f5c\u4e2d\u4fee\u590dBUG\u662f\u4e00\u4ef6\u6bd4\u8f83\u5e38\u89c1\u7684\u4e8b\u60c5\uff0c\u5f71\u54cd\u9762\u5927\u7684BUG\u4f1a\u8d70\u7d27\u6025\u4fee\u590d\u6d41\u7a0b\uff0c\u4e0d\u592a\u4e25\u91cd\u7684BUG\u4f1a\u8d70\u8fed\u4ee3\u6392\u671f. \u56de\u987e\u4e0b\u8fd0\u7ef4\u5de5\u4f5c 1) \u8fd0\u7ef4\u5de5\u7a0b\u5e08\u7684\u9700\u6c42\u6765\u6e90\u6709\u54ea\u4e9b? \u5176\u5b9e\u7b54\u6848\u548c\u4e0a\u9762\u7684\u96f7\u540c, \u56e0\u4e3a\u6700\u7ec8\u80af\u5b9a\u9700\u8981\u8fd0\u7ef4\u56e2\u961f\u6765\u8fd0\u7ef4\u4e0a\u8ff0\u4ea7\u54c1. 2) \u8fd0\u7ef4\u5de5\u7a0b\u5e08\u5e73\u65f6\u5728\u505a\u54ea\u4e9b\u5de5\u4f5c\uff1f \u603b\u4f53\u6765\u8bf4, \u5206\u4e3a \u914d\u7f6e\u7ba1\u7406 \u3001 \u53d8\u66f4\u7ba1\u7406 \u3001 \u72b6\u6001\u7ba1\u7406 3\u5927\u7c7b. 3) \u8003\u6838\u76ee\u6807\u662f\u4ec0\u4e48? \u7a33\u5b9a \u3001 \u9ad8\u6548 \u3001 \u4f4e\u6210\u672c , \u4e5f\u5c31\u662f \u82b1\u66f4\u5c11\u7684\u94b1\uff0c\u8ba9\u4ea7\u54c1\u66f4\u52a0\u7a33\u5b9a\u8fd0\u884c\u3001\u66f4\u5feb\u901f\u8fed\u4ee3 \u4ea7\u54c1\u7ecf\u7406\u5982\u4f55\u8fdb\u884c\u9700\u6c42\u4f18\u5148\u7ea7\u7684\u6392\u5e03 \u5728\u5b9e\u9645\u5de5\u4f5c\u4e2d\uff0c\u9700\u6c42\u6765\u6e90\u4f1a\u975e\u5e38\u591a\uff0c\u9700\u6c42\u6c60\u4e2d\u4e5f\u4f1a\u6709\u5404\u79cd\u9700\u6c42\uff0c\u90a3\u9700\u6c42\u4f18\u5148\u7ea7\u5982\u4f55\u89c4\u5212\u5462\uff1f \u4e00\u822c\u6765\u8bf4\u6709\u4e24\u4e2a\u573a\u666f\uff1a 1\u3001\u4ece0\u52301\u8bbe\u8ba1\u4e00\u6b3e\u4ea7\u54c1 \u8fd9\u79cd\u573a\u666f\u4e0b\u7684\u9700\u6c42\u6765\u6e90\u57fa\u672c\u4e0a\u90fd\u662f\u4ea7\u54c1\u9700\u6c42\u3002\u5efa\u8bae\u5927\u5bb6\u53bb\u4e86\u89e3\u4e00\u4e0bKANO\u6a21\u578b\uff0c\u8fd9\u4e2a\u573a\u666f\u4e0b\u7684\u9700\u6c42\u4f18\u5148\u7ea7\u4e00\u822c\u6765\u8bf4\u662f\uff1a \u57fa\u672c\u578b\u9700\u6c42>\u671f\u671b\u578b\u9700\u6c42>\u5174\u594b\u578b\u9700\u6c42 2\u3001\u5728\u539f\u6709\u4ea7\u54c1\u57fa\u7840\u4e0a\u4f18\u5316 \u8fd9\u79cd\u573a\u666f\u7684\u9700\u6c42\u6765\u6e90\u4f1a\u975e\u5e38\u5e7f\u6cdb\uff0c\u53ef\u80fd\u4e4b\u524d\u8bb2\u5230\u76844\u4e2d\u6765\u6e90\u90fd\u662f\u6d89\u53ca\uff0c\u90a3\u5982\u4f55\u6392\u5b9a\u9700\u6c42\u4f18\u5148\u7ea7\u5462\uff1f\u4e00\u822c\u6309\u7167\u4ea7\u54c1\u4ef7\u503c\u548c\u5b9e\u73b0\u6210\u672c\u4e24\u4e2a\u7ef4\u5ea6\u3002 \u4ea7\u54c1\u4ef7\u503c\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\uff1a\u4e1a\u52a1\u4ef7\u503c\u548c\u7528\u6237\u4ef7\u503c\u3002 \u4ef7\u503c\u5b9a\u4e49\uff1a \u4e1a\u52a1\u4ef7\u503c \uff1a\u5bf9\u5e94\u5546\u4e1a\u7c7b\u4ea7\u54c1\uff0c\u79f0\u4e3a\u5546\u4e1a\u4ef7\u503c\uff0c\u4f53\u73b0\u5728\u80fd\u7ed9\u4e1a\u52a1\u5e26\u6765\u591a\u5c11\u6536\u76ca\u3002 \u7528\u6237\u4ef7\u503c \uff1a\u5bf9\u4e8e\u4f7f\u7528\u8005\u6765\u8bf4\uff0c\u80fd\u7ed9\u4ed6\u5e26\u6765\u7684\u4ef7\u503c\uff0c\u6bd4\u5982\u8bf4\u80fd\u51cf\u5c11\u64cd\u4f5c\u6b65\u9aa4\u3002 \u5728\u8fd9\u79cd\u65b9\u6cd5\u4e0b\uff0c\u4f18\u5148\u7ea7\u7684\u6392\u5e8f\u903b\u8f91\u662f\uff1a \u4ea7\u54c1\u4ef7\u503c\u5927\u5b9e\u73b0\u6210\u672c\u4f4e>\u4ea7\u54c1\u4ef7\u503c\u5927\u5b9e\u73b0\u6210\u672c\u9ad8>\u4ea7\u54c1\u4ef7\u503c\u5c0f\u5b9e\u73b0\u6210\u672c\u4f4e>\u4ea7\u54c1\u4ef7\u503c\u5c0f\u5b9e\u73b0\u6210\u672c\u9ad8 \u3002 \u8865\u5145: \u8981\u770b ROI . \u4e92\u8054\u7f51\u516c\u53f8\u5178\u578b\u7684\u5546\u4e1a\u6a21\u5f0f\u6709\u54ea\u4e9b\uff1f \u5b9e\u4e60\u671f\u95f4\u6709\u6ca1\u6709\u548c\u8bbe\u8ba1/\u7814\u53d1\u4e89\u6267\u8fc7\uff0c\u600e\u4e48\u89e3\u51b3\u7684\uff1f \u53c2\u8003\u89e3\u6790\uff1a \u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790\uff0c\u5982\u679c\u662fUI\u6216\u4ea7\u54c1\u5bf9\u4ea7\u54c1\u9700\u6c42\u672c\u8eab\u5b58\u5728\u7591\u95ee\uff0c\u53ef\u53c2\u8003\u5982\u4e0b\uff1a 1\uff09\u6446\u6570\u636e\uff1a\u8bc1\u660e\u505a\u8fd9\u4e2a\u9700\u6c42\u7684\u5fc5\u8981\u6027\u53ca\u5b8c\u6210\u4e4b\u540e\u7684\u6536\u76ca 2\uff09\u8bb2\u9053\u7406\uff1a\u8bf4\u660e\u8fd9\u4e2a\u9700\u6c42\u8ddf\u516c\u53f8\u6574\u4f53\u6218\u7565\u7684\u4e00\u81f4\u6027 3\uff09\u5411\u4e0a\u6c9f\u901a\uff1a\u5982\u679c\u57fa\u7840\u6c9f\u901a\u4e0d\u80fd\u8fbe\u6210\u4e00\u81f4\uff0c\u53ef\u5c06\u53cc\u65b9\u9886\u5bfc\u62c9\u5230\u4e00\u8d77\u8ba8\u8bba \u4ea7\u54c1\u4e0a\u7ebf\u4e4b\u540e\u9700\u8981\u5173\u6ce8\u54ea\u4e9b\u6570\u636e\u6307\u6807\uff1f \u8fd9\u4e2a\u95ee\u9898\u4e3b\u8981\u8003\u5bdf\u4f60\u5bf9\u6570\u636e\u5206\u6790\u7684\u7406\u89e3\uff0c\u5f53\u7136\u4e0d\u540c\u7c7b\u578b\u7684\u4ea7\u54c1\u9700\u8981\u5173\u6ce8\u7684\u6570\u636e\u6307\u6807\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u5728\u9762\u8bd5\u65f6\u6700\u597d\u95ee\u6e05\u695a\u9762\u8bd5\u5b98\u4ea7\u54c1\u7c7b\u578b\u3002 \u4e00\u822c\u6765\u8bf4\u4ea7\u54c1\u4e0a\u7ebf\u4e4b\u540e\u9700\u8981\u5173\u6ce8\u7684\u6307\u6807\u6709\uff1a 1\uff09\u6ce8\u518c\u7528\u6237\u6570\uff1a\u5df2\u6ce8\u518c\u7528\u6237\u7684\u603b\u548c 2\uff09\u6b21\u65e5\u7559\u5b58/7\u65e5\u7559\u5b58 3\uff09ARPU\uff1a\u603b\u6536\u5165/\u603b\u7528\u6237\u6570\uff0c\u5373\u6bcf\u4e2a\u7528\u6237\u7684\u5e73\u5747\u6536\u5165 4\uff09\u65e5\u6d3b\u8dc3\u7528\u6237\u6570/\u6708\u6d3b\u8dc3\u7528\u6237\u6570 5\uff09\u65b0\u7528\u6237\u589e\u957f\u7387 6\uff09\u65b0\u7528\u6237\u5360\u6bd4\uff1a\u65b0\u7528\u6237\u5360\u4eca\u65e5\u6d3b\u8dc3\u7528\u6237\u6570\u7684\u6bd4\u4f8b 7\uff09\u7528\u6237\u6d41\u5931\u7387 8\uff09\u6e20\u9053\u8f6c\u5316\u7387 \u56de\u987e\u4e0b\u8fd0\u7ef4\u5de5\u4f5c \u5176\u5b9e\u4ea7\u54c1\u4e0a\u7ebf\u4e4b\u540e, \u8fd0\u7ef4\u5de5\u7a0b\u5e08\u6700\u9700\u8981\u5173\u6ce8PCU(Peak concurrent users), \u6700\u5927\u540c\u65f6\u5728\u7ebf\u73a9\u5bb6\u4eba\u6570 \u5b8c\u6574\u7684\u4ea7\u54c1\u5206\u6790\u4e00\u822c\u5305\u542b\u54ea\u4e9b\u7ef4\u5ea6\uff1a 1\u3001\u5b9a\u4f4d\u5206\u6790\uff0c\u4ea7\u54c1\u7684\u76ee\u6807\u7528\u6237\u662f\u8c01\uff1f\u89e3\u51b3\u4e86\u4ed6\u4eec\u4ec0\u4e48\u95ee\u9898 2\u3001\u9700\u6c42\u5206\u6790\uff0c\u5c31\u662f\u76ee\u6807\u7528\u6237\u9700\u6c42\u7684\u9891\u7e41\u7a0b\u5ea6\u548c\u5f3a\u5ea6\u5982\u4f55\uff1f\u662f\u4e0d\u662f\u521a\u9700\u9ad8\u9891\uff1f\u4ea7\u751f\u9700\u6c42\u7684\u573a\u666f\u6709\u54ea\u4e9b\uff1f 3\u3001\u5e02\u573a\u5206\u6790\uff0c\u5c31\u662f\u5e02\u573a\u89c4\u6a21\u4ec0\u4e48\u6837\u7684\uff0c\u5e02\u573a\u73b0\u72b6\u662f\u4ec0\u4e48\u6837\u7684\uff1f\u5e02\u573a\u53d1\u5c55\u65b9\u5411\u662f\u4ec0\u4e48\u6837\u7684\u5440\uff1f 4\u3001\u7ade\u54c1\u5206\u6790\uff0c\u5c31\u662f\u6709\u54ea\u4e9b\u7ade\u54c1\uff0c\u5e02\u573a\u4efd\u989d\u5206\u522b\u5360\u5230\u5360\u591a\u5c11\uff0c\u5404\u4e2a\u7ade\u54c1\u5207\u5165\u70b9\u7684\u5dee\u5f02\u7b49\u7b49 5\u3001\u89c6\u89c9\u5206\u6790\uff0c\u6574\u4f53\u8272\u8c03\u5982\u4f55\uff1f\u5404\u56fe\u6807\u8bbe\u8ba1\u7684\u597d\u574f 6\u3001\u4ea4\u4e92\u8bbe\u8ba1\u5206\u6790\uff0c\u5bfc\u822a\u8def\u5f84\u662f\u5426\u6e05\u6670\uff1f\u4e3b\u8981\u529f\u80fd\u7684\u89e6\u8fbe\u7387\u5982\u4f55\uff1f 7\u3001\u529f\u80fd\u5206\u6790\uff0c\u8fd9\u4e2a\u4ea7\u54c1\u6709\u54ea\u4e9b\u5173\u952e\u529f\u80fd\uff0c\u7528\u54ea\u4e9b\u5173\u952e\u529f\u80fd\u6ee1\u8db3\u4e86\u7528\u6237\u7684\u6838\u5fc3\u9700\u6c42\uff1f\u6ee1\u8db3\u7684\u597d\u4e0d\u597d\uff1f\u6709\u4ec0\u4e48\u4f18\u5316\u7a7a\u95f4\u7b49\u7b49\u3002\u529f\u80fd\u5206\u6790\u4e00\u5b9a\u8981\u4f5c\u4e3a\u4e00\u4e2a\u91cd\u70b9\u53bb\u8fdb\u884c\u5206\u6790\uff0c\u56e0\u4e3a\u6bd5\u7adf\u662f\u4e00\u573a\u4ea7\u54c1\u7ecf\u7406\u7684\u9762\u8bd5\u3002 8\u3001\u8fd0\u8425\u5206\u6790\uff0c\u505a\u4e86\u54ea\u4e9b\u8fd0\u8425\u6d3b\u52a8\uff1f\u6548\u679c\u8d28\u91cf\u5982\u4f55\u554a\uff1f \u5728\u771f\u5b9e\u7684\u9762\u8bd5\u573a\u666f\u4e2d\uff0c\u6839\u636e\u4ea7\u54c1\u7684\u7279\u8d28\uff0c\u8981\u8fdb\u884c\u6709\u6761\u7406\u3001\u6709\u7ec6\u8282\u7684\u5206\u6790\uff0c\u5f80\u5f80\u5c31\u53ef\u4ee5\u5f97\u5230\u9762\u8bd5\u5b98\u7684\u597d\u8bc4\u3002 \u4ea7\u54c1\u7ecf\u7406\u7684\u5de5\u4f5c\u6d41\u7a0b\u662f\u4ec0\u4e48\uff1f \u5728\u5b9e\u9645\u5de5\u4f5c\u4e2d\uff0c\u4ea7\u54c1\u7ecf\u7406\u7684\u5de5\u4f5c\u6d41\u7a0b\u4e00\u822c\u5206\u4e3a\u5982\u4e0b\u6b65\u9aa4\uff1a 1\uff09\u9700\u6c42\u6536\u96c6\uff0c\u5177\u4f53\u6536\u96c6\u65b9\u6cd5\u5982\u98984\u6240\u793a\uff1b 2\uff09\u9700\u6c42\u6c60\u7ba1\u7406\uff0c\u6536\u96c6\u6765\u7684\u9700\u6c42\u9700\u8981\u653e\u5230\u9700\u6c42\u6c60\u4e2d\u7edf\u4e00\u7ba1\u7406 3\uff09\u9700\u6c42\u4f18\u5148\u7ea7\uff0c\u9700\u8981\u6839\u636e\u4f18\u5148\u7ea7\u8fdb\u884c\u9700\u6c42\u8fed\u4ee3\uff0c\u5177\u4f53\u65b9\u6cd5\u5982\u98985\u6240\u793a 4\uff09\u9700\u6c42\u786e\u5b9a\uff0c\u627e\u81ea\u5df1\u7684\u76f4\u5c5e\u9886\u5bfc\u786e\u8ba4\u6bcf\u4e00\u4e2a\u8fed\u4ee3\u7684\u9700\u6c42 5\uff09\u4ea7\u54c1\u8bbe\u8ba1\uff0c\u4f7f\u7528\u7ade\u54c1\u5206\u6790\u3001\u8111\u56fe\u3001\u6d41\u7a0b\u56fe\u3001\u539f\u578b\u56fe\u3001PRD\u7b49\u65b9\u6cd5\u8be6\u7ec6\u7684\u68b3\u7406\u4ea7\u54c1\u903b\u8f91 6\uff09\u9879\u76ee\u7ba1\u7406\uff0c\u4f7f\u7528\u9879\u76ee\u6392\u671f\u8868\u7b49\u65b9\u5f0f\u63a8\u52a8\u9879\u76ee\u6309\u65f6\u5e76\u4e14\u4fdd\u8d28\u4fdd\u91cf\u7684\u4e0a\u7ebf 7\uff09\u6570\u636e\u5206\u6790\uff0c\u4ea7\u54c1\u4e0a\u7ebf\u4e4b\u540e\u901a\u8fc7\u6570\u636e\u5206\u6790\u7b49\u65b9\u6cd5\u9a8c\u8bc1\u529f\u80fd/\u4ea7\u54c1\u662f\u5426\u8fbe\u5230\u9884\u671f\u6548\u679c\uff0c\u5982\u679c\u6ca1\u6709\u9700\u8981\u5982\u4f55\u4f18\u5316\uff0c\u7136\u540e\u5f00\u542f\u53e6\u4e00\u4e2a\u7248\u672c\u7684\u8fed\u4ee3\u3002 \u4f60\u9047\u5230\u7684\u6700\u5927\u7684\u632b\u6298\u662f\u4ec0\u4e48\uff1f\u5982\u4f55\u89e3\u51b3\u7684\uff1f \u8fd9\u662fHR\u9762\u7ecf\u5e38\u4f1a\u9047\u5230\u7684\u95ee\u9898\uff0c\u8ba9\u5f88\u591a\u6c42\u804c\u8005\u975e\u5e38\u5934\u75bc\uff0c\u56e0\u4e3a\u6ca1\u6709\u597d\u7684\u601d\u8def\u3002\u8981\u60f3\u56de\u7b54\u597d\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u8981\u5148\u5f04\u6e05\u695aHR\u60f3\u8981\u901a\u8fc7\u8fd9\u9053\u9898\u4e86\u89e3\u4ec0\u4e48\u5462\uff1f 1\u3001\u8003\u5bdf\u4f60\u5982\u4f55\u770b\u5f85\u632b\u6298\u8fd9\u4ef6\u4e8b\u3002\u5c31\u662f\u4f60\u8ba4\u4e3a\u4ec0\u4e48\u4e8b\u5bf9\u4f60\u6765\u8bf4\u7b97\u632b\u6298\u3002\u5982\u679c\u5bf9\u5927\u591a\u6570\u4eba\u90fd\u4e60\u4ee5\u4e3a\u5e38\u7684\u4e8b\u60c5\uff0c\u4f60\u770b\u505a\u662f\u632b\u6298\uff0c\u90a3\u5c31\u8981\u53cd\u601d\u4e00\u4e0b\u662f\u4e0d\u662f\u81ea\u5df1\u592a\u73bb\u7483\u5fc3\uff0c\u6297\u538b\u80fd\u529b\u5dee\u4e86\u3002 2\u3001\u770b\u4f60\u89e3\u51b3\u95ee\u9898\u7684\u601d\u8def\u53ca\u80fd\u529b\u3002\u5728\u5de5\u4f5c\u4e2d\u9047\u5230\u632b\u6298\u662f\u7279\u522b\u6b63\u5e38\u7684\u4e8b\uff0c\u91cd\u8981\u7684\u662f\u4f60\u662f\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4ee5\u53ca\u89e3\u51b3\u7684\u597d\u4e0d\u597d\u3002 3\u3001\u4fa7\u9762\u4e86\u89e3\u4f60\u7684\u5b66\u4e60\u80fd\u529b\u3002\u9047\u5230\u95ee\u9898\u3001\u89e3\u51b3\u95ee\u9898\u4e4b\u540e\u4f60\u80fd\u4e0d\u80fd\u4ece\u4e2d\u603b\u7ed3\u7ecf\u9a8c\u6559\u8bad\uff0c\u540c\u6837\u7684\u95ee\u9898\u4e0d\u4f1a\u518d\u72af\u7b2c\u4e8c\u6b21\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u4eba\u7684\u81ea\u6211\u5b66\u4e60\u80fd\u529b\u3002 \u4f60\u6700\u5927\u7684\u7f3a\u70b9\u662f\u4ec0\u4e48\uff1f \u9762\u8bd5\u5e0c\u671b\u901a\u8fc7\u8fd9\u9053\u9898\u76ee\u8003\u5bdf\u4ec0\u4e48\u5462\uff1f 1\uff09\u770b\u4f60\u7684\u7f3a\u70b9\u662f\u5426\u4f1a\u5f71\u54cd\u672c\u804c\u5de5\u4f5c\u3002 \u6240\u4ee5\u5728\u56de\u7b54\u6b64\u7c7b\u95ee\u9898\u65f6\uff0c\u4e00\u5b9a\u8bb0\u4f4f\uff1a\u4e0d\u80fd\u56de\u7b54\u5bf9\u672c\u804c\u5de5\u4f5c\u5f71\u54cd\u5f88\u5927\u7684\u7f3a\u70b9\uff0c\u6bd4\u5982 \u9886\u5bfc\u80fd\u529b\u5dee , \u903b\u8f91\u4e0d\u6e05\u6670 , \u4e0d\u5584\u4e8e\u6c9f\u901a \u7b49\u7b49\u3002 2\uff09\u770b\u4f60\u56de\u7b54\u95ee\u9898\u7684\u601d\u8def\u662f\u5426\u8db3\u591f\u6709\u6761\u7406\u3002 \u56de\u7b54\u6b64\u7c7b\u95ee\u9898\u5efa\u8bae\u6309\u7167\u4e09\u6b65\u8d70\uff1a \u7b2c\u4e00\u6b65\uff1a\u8bf4\u51fa\u81ea\u5df1\u7684\u4e00\u4e2a\u7f3a\u70b9\uff1b \u7b2c\u4e8c\u6b65\uff1a\u8bf4\u51fa\u8fd9\u4e2a\u7f3a\u70b9\u7ed9\u81ea\u5df1\u9020\u6210\u7684\u56f0\u6270\uff1b \u7b2c\u4e09\u6b65\uff1a\u81ea\u5df1\u662f\u5982\u4f55\u52aa\u529b\u53bb\u514b\u670d\u8fd9\u4e2a\u7f3a\u70b9\u7684\u3002","title":"\u7b2c\u4e94\u7bc7 \u4ea7\u54c1\u601d\u7ef4\u603b\u7ed3\u548c\u68b3\u7406"},{"location":"chapter_8/5_chanpingsiwei_1/#_1","text":"\u5e73\u65f6\u4e00\u76f4\u505a\u6280\u672f\uff0c\u4e60\u60ef\u770b\u6280\u672f\u6587\u7ae0\u3001\u4ea4\u6d41\u6280\u672f\u95ee\u9898, \u4f46\u6280\u672f\u4eba\u5fc5\u987b\u5177\u5907\u4ea7\u54c1\u601d\u7ef4, \u624d\u80fd\u66f4\u597d\u7684\u4e3a\u4e1a\u52a1\u8f93\u51fa\u4ef7\u503c. \u5728\u8bbe\u8ba1\u8fd0\u7ef4\u5de5\u5177\u65f6, \u5904\u5904\u9700\u8981\u7528\u5230\u4ea7\u54c1\u601d\u7ef4. \u5f80\u6df1\u4e86\u770b, \u5176\u5b9e\u4e0d\u540c\u5c97\u4f4d\u7684 \u9053 \u662f\u76f8\u901a\u7684. \u672c\u7bc7\u4ee5 \u4ea7\u54c1\u7ecf\u7406\u7684\u9ad8\u9891\u9762\u8bd5\u9898 \u4e3a\u57fa\u7840, \u8fdb\u884c\u603b\u7ed3\u548c\u68b3\u7406\u5176\u4e2d\u7684\u4ea7\u54c1\u601d\u7ef4.","title":"\u6982\u8ff0"},{"location":"chapter_8/5_chanpingsiwei_1/#_2","text":"","title":"\u4ea7\u54c1\u7ecf\u7406\u57fa\u7840\u6280\u80fd"},{"location":"chapter_8/5_chanpingsiwei_1/#_3","text":"\u5305\u62ec \u9700\u6c42\u5206\u6790 \u3001 \u7528\u6237\u8c03\u7814 \u3001 \u7ade\u54c1\u5206\u6790 \u3001 \u4ea7\u54c1\u8bbe\u8ba1 \u3001 \u9879\u76ee\u7ba1\u7406 \u3001 \u6570\u636e\u5206\u6790","title":"\u57fa\u7840\u6280\u80fd"},{"location":"chapter_8/5_chanpingsiwei_1/#_4","text":"\u5305\u62ec \u6c9f\u901a\u80fd\u529b \u3001 \u6267\u884c\u80fd\u529b \u3001 \u903b\u8f91\u601d\u7ef4 \u3001 \u5b66\u4e60\u80fd\u529b \u3001 \u9886\u5bfc\u80fd\u529b \u3001 \u521b\u65b0\u80fd\u529b","title":"\u4ea7\u54c1\u80fd\u529b"},{"location":"chapter_8/5_chanpingsiwei_1/#_5","text":"\u5efa\u8bae\u6309\u7167\u5982\u4e0b\u903b\u8f91\u6846\u67b6\u56de\u7b54\uff1a 1\uff09\u4ece\u6027\u683c\u4e0a\u6765\u8bf4\uff0c\u6211\u662f\u9002\u5408\u505a\u4ea7\u54c1\u7ecf\u7406\u7684\uff0c\u5df4\u62c9\u5df4\u62c9XXXXX\uff08\u4e3e\u4f8b\u8bc1\u660e\u6027\u683c\u9002\u5408\u505a\u4ea7\u54c1\u7684\u70b9\uff09 2\uff09\u4ece\u80fd\u529b\u4e0a\u6765\u8bf4\uff0c\u6211\u662f\u80fd\u591f\u80dc\u4efb\u505a\u4ea7\u54c1\u7ecf\u7406\u7684\uff0c\u5df4\u62c9\u5df4\u62c9XXXXX\uff08\u4e3e\u4f8b\u8bc1\u660e\u81ea\u5df1\u6240\u638c\u63e1\u7684\u4ea7\u54c1\u6280\u80fd\uff09","title":"\u4e3a\u4ec0\u4e48\u89c9\u7740\u81ea\u5df1\u9002\u5408\u505a\u4ea7\u54c1\u7ecf\u7406"},{"location":"chapter_8/5_chanpingsiwei_1/#_6","text":"\u4e5f\u53ef\u4ee5\u4ece \u6027\u683c \u3001 \u80fd\u529b 2\u4e2a\u65b9\u9762\u6765\u8861\u91cf.","title":"\u56de\u987e\u4e0b\u8fd0\u7ef4\u5de5\u4f5c:"},{"location":"chapter_8/5_chanpingsiwei_1/#_7","text":"\u6bcf\u4e2a\u4eba\u5bf9\u4e8e\u6210\u529f\u4ea7\u54c1\u7684\u5b9a\u4e49\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u8fd9\u4e00\u9898\u6ca1\u6709\u6807\u51c6\u7b54\u6848\uff0c\u4f46\u4e00\u5b9a\u8981\u6709\u81ea\u5df1\u7684\u601d\u8003\u6846\u67b6\uff0c\u5efa\u8bae\u6309\u7167\u5982\u4e0b\u65b9\u6cd5\u56de\u7b54\uff1a 1\uff09\u4ece\u7528\u6237\u7684\u89d2\u5ea6\uff1a\u80fd\u6301\u7eed\u4e0d\u65ad\u7684\u89e3\u51b3\u76ee\u6807\u7528\u6237\u7684\u9700\u6c42\uff1b\u7528\u6237\u64cd\u4f5c\u7b80\u5355\u65b9\u4fbf\uff0c\u5728\u4f7f\u7528\u4ea7\u54c1\u540e\u80fd\u591f\u5feb\u901f\u7684\u6709\u6548\u7684\u89e3\u51b3\u95ee\u9898\u3002 2\uff09\u4ece\u4ea7\u54c1\u7684\u89d2\u5ea6\uff1a\u8be5\u4ea7\u54c1\u76f8\u8f83\u4e8e\u5176\u4ed6\u7ade\u54c1\u6709\u7740\u72ec\u7279\u7684\u4f18\u52bf\uff0c\u4ea7\u54c1\u80fd\u591f\u6301\u7eed\u4e0d\u65ad\u7684\u8fed\u4ee3\u4ee5\u6ee1\u8db3\u76ee\u6807\u7528\u6237\u7684\u9700\u6c42\u3002 3\uff09\u4ece\u5546\u4e1a\u7684\u89d2\u5ea6\uff1a\u516c\u53f8\u7684\u6280\u672f\u5c42\u9762\u53ef\u4ee5\u5b9e\u73b0\u8be5\u4ea7\u54c1\uff0c\u5e76\u4e14\u53ef\u4ee5\u957f\u671f\u7ef4\u62a4\uff0c\u6301\u7eed\u5b8c\u5584\uff1b\u8be5\u4ea7\u54c1\u53ef\u4ee5\u4e3a\u516c\u53f8\u521b\u9020\u957f\u671f\u7684\u53ef\u6301\u7eed\u4ef7\u503c\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u5229\u6da6\uff0c\u76c8\u5229\u6a21\u5f0f\uff0c\u5e02\u573a\u4ef7\u503c\uff0c\u6218\u7565\u5730\u4f4d\u7b49\uff1b","title":"\u4ec0\u4e48\u662f\u4e00\u6b3e\u6210\u529f\u7684\u4ea7\u54c1"},{"location":"chapter_8/5_chanpingsiwei_1/#_8","text":"\u8fd9\u4e2a\u95ee\u9898\u8003\u5bdf\u4f60\u5bf9\u4ea7\u54c1\u7ecf\u7406\u5de5\u4f5c\u6d41\u7a0b\u7684\u7406\u89e3\uff0c\u4e00\u822c\u5728\u5b9e\u9645\u5de5\u4f5c\u4e2d\u4ea7\u54c1\u7ecf\u7406\u7684\u9700\u6c42\u67094\u5927\u6765\u6e90\uff0c\u5206\u522b\u662f: 1\uff09\u4ea7\u54c1\u9700\u6c42\uff1a\u4ea7\u54c1\u7ecf\u7406\u901a\u8fc7\u6570\u636e\u5206\u6790\u3001\u7528\u6237\u8c03\u7814\u3001\u7ade\u54c1\u5206\u6790\u7b49\u65b9\u6cd5\u9a8c\u8bc1\u901a\u8fc7\u7684\u9700\u6c42. 2\uff09\u8fd0\u8425\u7b49\u4e1a\u52a1\u90e8\u95e8\u63d0\u4ea4\u7684\u9700\u6c42\uff1a\u6bd4\u5982\u4ee5\u4eac\u4e1c\u4e3a\u4f8b\uff0c\u670d\u9970\u4e1a\u52a1\u90e8/\u751f\u9c9c\u4e1a\u52a1\u90e8/\u5bb6\u7535\u4e8b\u4e1a\u90e8\u7684\u8fd0\u8425\u3001\u91c7\u9500\u7b49\u4eba\u5458\u51fa\u4e8e\u63d0\u5347\u4e1a\u52a1\u6307\u6807\u7684\u89d2\u5ea6\u4f1a\u63d0\u51fa\u5404\u79cd\u9700\u6c42. 3\uff09\u8001\u677f\u7684\u9700\u6c42\uff1a\u9886\u5bfc\u4ece\u5916\u90e8\u5408\u4f5c\u7684\u89d2\u5ea6\u6216\u8005\u4ea7\u54c1\u6218\u7565\u7684\u89d2\u5ea6\u4e5f\u4f1a\u7ed9\u624b\u4e0b\u7684\u4ea7\u54c1\u7ecf\u7406\u63d0\u4e00\u4e9b\u9700\u6c42\uff0c\u6bd4\u5982\u6211\u8fd8\u63a5\u5230\u8fc7\u5927Boss\u7684\u9700\u6c42. 4\uff09Bug\u4fee\u590d\u7b49\uff1a\u5728\u5de5\u4f5c\u4e2d\u4fee\u590dBUG\u662f\u4e00\u4ef6\u6bd4\u8f83\u5e38\u89c1\u7684\u4e8b\u60c5\uff0c\u5f71\u54cd\u9762\u5927\u7684BUG\u4f1a\u8d70\u7d27\u6025\u4fee\u590d\u6d41\u7a0b\uff0c\u4e0d\u592a\u4e25\u91cd\u7684BUG\u4f1a\u8d70\u8fed\u4ee3\u6392\u671f.","title":"\u4ea7\u54c1\u7ecf\u7406\u7684\u9700\u6c42\u6765\u6e90\u6709\u54ea\u4e9b\uff1f"},{"location":"chapter_8/5_chanpingsiwei_1/#_9","text":"1) \u8fd0\u7ef4\u5de5\u7a0b\u5e08\u7684\u9700\u6c42\u6765\u6e90\u6709\u54ea\u4e9b? \u5176\u5b9e\u7b54\u6848\u548c\u4e0a\u9762\u7684\u96f7\u540c, \u56e0\u4e3a\u6700\u7ec8\u80af\u5b9a\u9700\u8981\u8fd0\u7ef4\u56e2\u961f\u6765\u8fd0\u7ef4\u4e0a\u8ff0\u4ea7\u54c1. 2) \u8fd0\u7ef4\u5de5\u7a0b\u5e08\u5e73\u65f6\u5728\u505a\u54ea\u4e9b\u5de5\u4f5c\uff1f \u603b\u4f53\u6765\u8bf4, \u5206\u4e3a \u914d\u7f6e\u7ba1\u7406 \u3001 \u53d8\u66f4\u7ba1\u7406 \u3001 \u72b6\u6001\u7ba1\u7406 3\u5927\u7c7b. 3) \u8003\u6838\u76ee\u6807\u662f\u4ec0\u4e48? \u7a33\u5b9a \u3001 \u9ad8\u6548 \u3001 \u4f4e\u6210\u672c , \u4e5f\u5c31\u662f \u82b1\u66f4\u5c11\u7684\u94b1\uff0c\u8ba9\u4ea7\u54c1\u66f4\u52a0\u7a33\u5b9a\u8fd0\u884c\u3001\u66f4\u5feb\u901f\u8fed\u4ee3","title":"\u56de\u987e\u4e0b\u8fd0\u7ef4\u5de5\u4f5c"},{"location":"chapter_8/5_chanpingsiwei_1/#_10","text":"\u5728\u5b9e\u9645\u5de5\u4f5c\u4e2d\uff0c\u9700\u6c42\u6765\u6e90\u4f1a\u975e\u5e38\u591a\uff0c\u9700\u6c42\u6c60\u4e2d\u4e5f\u4f1a\u6709\u5404\u79cd\u9700\u6c42\uff0c\u90a3\u9700\u6c42\u4f18\u5148\u7ea7\u5982\u4f55\u89c4\u5212\u5462\uff1f \u4e00\u822c\u6765\u8bf4\u6709\u4e24\u4e2a\u573a\u666f\uff1a","title":"\u4ea7\u54c1\u7ecf\u7406\u5982\u4f55\u8fdb\u884c\u9700\u6c42\u4f18\u5148\u7ea7\u7684\u6392\u5e03"},{"location":"chapter_8/5_chanpingsiwei_1/#101","text":"\u8fd9\u79cd\u573a\u666f\u4e0b\u7684\u9700\u6c42\u6765\u6e90\u57fa\u672c\u4e0a\u90fd\u662f\u4ea7\u54c1\u9700\u6c42\u3002\u5efa\u8bae\u5927\u5bb6\u53bb\u4e86\u89e3\u4e00\u4e0bKANO\u6a21\u578b\uff0c\u8fd9\u4e2a\u573a\u666f\u4e0b\u7684\u9700\u6c42\u4f18\u5148\u7ea7\u4e00\u822c\u6765\u8bf4\u662f\uff1a \u57fa\u672c\u578b\u9700\u6c42>\u671f\u671b\u578b\u9700\u6c42>\u5174\u594b\u578b\u9700\u6c42","title":"1\u3001\u4ece0\u52301\u8bbe\u8ba1\u4e00\u6b3e\u4ea7\u54c1"},{"location":"chapter_8/5_chanpingsiwei_1/#2","text":"\u8fd9\u79cd\u573a\u666f\u7684\u9700\u6c42\u6765\u6e90\u4f1a\u975e\u5e38\u5e7f\u6cdb\uff0c\u53ef\u80fd\u4e4b\u524d\u8bb2\u5230\u76844\u4e2d\u6765\u6e90\u90fd\u662f\u6d89\u53ca\uff0c\u90a3\u5982\u4f55\u6392\u5b9a\u9700\u6c42\u4f18\u5148\u7ea7\u5462\uff1f\u4e00\u822c\u6309\u7167\u4ea7\u54c1\u4ef7\u503c\u548c\u5b9e\u73b0\u6210\u672c\u4e24\u4e2a\u7ef4\u5ea6\u3002 \u4ea7\u54c1\u4ef7\u503c\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\uff1a\u4e1a\u52a1\u4ef7\u503c\u548c\u7528\u6237\u4ef7\u503c\u3002 \u4ef7\u503c\u5b9a\u4e49\uff1a \u4e1a\u52a1\u4ef7\u503c \uff1a\u5bf9\u5e94\u5546\u4e1a\u7c7b\u4ea7\u54c1\uff0c\u79f0\u4e3a\u5546\u4e1a\u4ef7\u503c\uff0c\u4f53\u73b0\u5728\u80fd\u7ed9\u4e1a\u52a1\u5e26\u6765\u591a\u5c11\u6536\u76ca\u3002 \u7528\u6237\u4ef7\u503c \uff1a\u5bf9\u4e8e\u4f7f\u7528\u8005\u6765\u8bf4\uff0c\u80fd\u7ed9\u4ed6\u5e26\u6765\u7684\u4ef7\u503c\uff0c\u6bd4\u5982\u8bf4\u80fd\u51cf\u5c11\u64cd\u4f5c\u6b65\u9aa4\u3002 \u5728\u8fd9\u79cd\u65b9\u6cd5\u4e0b\uff0c\u4f18\u5148\u7ea7\u7684\u6392\u5e8f\u903b\u8f91\u662f\uff1a \u4ea7\u54c1\u4ef7\u503c\u5927\u5b9e\u73b0\u6210\u672c\u4f4e>\u4ea7\u54c1\u4ef7\u503c\u5927\u5b9e\u73b0\u6210\u672c\u9ad8>\u4ea7\u54c1\u4ef7\u503c\u5c0f\u5b9e\u73b0\u6210\u672c\u4f4e>\u4ea7\u54c1\u4ef7\u503c\u5c0f\u5b9e\u73b0\u6210\u672c\u9ad8 \u3002 \u8865\u5145: \u8981\u770b ROI .","title":"2\u3001\u5728\u539f\u6709\u4ea7\u54c1\u57fa\u7840\u4e0a\u4f18\u5316"},{"location":"chapter_8/5_chanpingsiwei_1/#_11","text":"","title":"\u4e92\u8054\u7f51\u516c\u53f8\u5178\u578b\u7684\u5546\u4e1a\u6a21\u5f0f\u6709\u54ea\u4e9b\uff1f"},{"location":"chapter_8/5_chanpingsiwei_1/#_12","text":"\u53c2\u8003\u89e3\u6790\uff1a \u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790\uff0c\u5982\u679c\u662fUI\u6216\u4ea7\u54c1\u5bf9\u4ea7\u54c1\u9700\u6c42\u672c\u8eab\u5b58\u5728\u7591\u95ee\uff0c\u53ef\u53c2\u8003\u5982\u4e0b\uff1a 1\uff09\u6446\u6570\u636e\uff1a\u8bc1\u660e\u505a\u8fd9\u4e2a\u9700\u6c42\u7684\u5fc5\u8981\u6027\u53ca\u5b8c\u6210\u4e4b\u540e\u7684\u6536\u76ca 2\uff09\u8bb2\u9053\u7406\uff1a\u8bf4\u660e\u8fd9\u4e2a\u9700\u6c42\u8ddf\u516c\u53f8\u6574\u4f53\u6218\u7565\u7684\u4e00\u81f4\u6027 3\uff09\u5411\u4e0a\u6c9f\u901a\uff1a\u5982\u679c\u57fa\u7840\u6c9f\u901a\u4e0d\u80fd\u8fbe\u6210\u4e00\u81f4\uff0c\u53ef\u5c06\u53cc\u65b9\u9886\u5bfc\u62c9\u5230\u4e00\u8d77\u8ba8\u8bba","title":"\u5b9e\u4e60\u671f\u95f4\u6709\u6ca1\u6709\u548c\u8bbe\u8ba1/\u7814\u53d1\u4e89\u6267\u8fc7\uff0c\u600e\u4e48\u89e3\u51b3\u7684\uff1f"},{"location":"chapter_8/5_chanpingsiwei_1/#_13","text":"\u8fd9\u4e2a\u95ee\u9898\u4e3b\u8981\u8003\u5bdf\u4f60\u5bf9\u6570\u636e\u5206\u6790\u7684\u7406\u89e3\uff0c\u5f53\u7136\u4e0d\u540c\u7c7b\u578b\u7684\u4ea7\u54c1\u9700\u8981\u5173\u6ce8\u7684\u6570\u636e\u6307\u6807\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u5728\u9762\u8bd5\u65f6\u6700\u597d\u95ee\u6e05\u695a\u9762\u8bd5\u5b98\u4ea7\u54c1\u7c7b\u578b\u3002 \u4e00\u822c\u6765\u8bf4\u4ea7\u54c1\u4e0a\u7ebf\u4e4b\u540e\u9700\u8981\u5173\u6ce8\u7684\u6307\u6807\u6709\uff1a 1\uff09\u6ce8\u518c\u7528\u6237\u6570\uff1a\u5df2\u6ce8\u518c\u7528\u6237\u7684\u603b\u548c 2\uff09\u6b21\u65e5\u7559\u5b58/7\u65e5\u7559\u5b58 3\uff09ARPU\uff1a\u603b\u6536\u5165/\u603b\u7528\u6237\u6570\uff0c\u5373\u6bcf\u4e2a\u7528\u6237\u7684\u5e73\u5747\u6536\u5165 4\uff09\u65e5\u6d3b\u8dc3\u7528\u6237\u6570/\u6708\u6d3b\u8dc3\u7528\u6237\u6570 5\uff09\u65b0\u7528\u6237\u589e\u957f\u7387 6\uff09\u65b0\u7528\u6237\u5360\u6bd4\uff1a\u65b0\u7528\u6237\u5360\u4eca\u65e5\u6d3b\u8dc3\u7528\u6237\u6570\u7684\u6bd4\u4f8b 7\uff09\u7528\u6237\u6d41\u5931\u7387 8\uff09\u6e20\u9053\u8f6c\u5316\u7387","title":"\u4ea7\u54c1\u4e0a\u7ebf\u4e4b\u540e\u9700\u8981\u5173\u6ce8\u54ea\u4e9b\u6570\u636e\u6307\u6807\uff1f"},{"location":"chapter_8/5_chanpingsiwei_1/#_14","text":"\u5176\u5b9e\u4ea7\u54c1\u4e0a\u7ebf\u4e4b\u540e, \u8fd0\u7ef4\u5de5\u7a0b\u5e08\u6700\u9700\u8981\u5173\u6ce8PCU(Peak concurrent users), \u6700\u5927\u540c\u65f6\u5728\u7ebf\u73a9\u5bb6\u4eba\u6570","title":"\u56de\u987e\u4e0b\u8fd0\u7ef4\u5de5\u4f5c"},{"location":"chapter_8/5_chanpingsiwei_1/#_15","text":"1\u3001\u5b9a\u4f4d\u5206\u6790\uff0c\u4ea7\u54c1\u7684\u76ee\u6807\u7528\u6237\u662f\u8c01\uff1f\u89e3\u51b3\u4e86\u4ed6\u4eec\u4ec0\u4e48\u95ee\u9898 2\u3001\u9700\u6c42\u5206\u6790\uff0c\u5c31\u662f\u76ee\u6807\u7528\u6237\u9700\u6c42\u7684\u9891\u7e41\u7a0b\u5ea6\u548c\u5f3a\u5ea6\u5982\u4f55\uff1f\u662f\u4e0d\u662f\u521a\u9700\u9ad8\u9891\uff1f\u4ea7\u751f\u9700\u6c42\u7684\u573a\u666f\u6709\u54ea\u4e9b\uff1f 3\u3001\u5e02\u573a\u5206\u6790\uff0c\u5c31\u662f\u5e02\u573a\u89c4\u6a21\u4ec0\u4e48\u6837\u7684\uff0c\u5e02\u573a\u73b0\u72b6\u662f\u4ec0\u4e48\u6837\u7684\uff1f\u5e02\u573a\u53d1\u5c55\u65b9\u5411\u662f\u4ec0\u4e48\u6837\u7684\u5440\uff1f 4\u3001\u7ade\u54c1\u5206\u6790\uff0c\u5c31\u662f\u6709\u54ea\u4e9b\u7ade\u54c1\uff0c\u5e02\u573a\u4efd\u989d\u5206\u522b\u5360\u5230\u5360\u591a\u5c11\uff0c\u5404\u4e2a\u7ade\u54c1\u5207\u5165\u70b9\u7684\u5dee\u5f02\u7b49\u7b49 5\u3001\u89c6\u89c9\u5206\u6790\uff0c\u6574\u4f53\u8272\u8c03\u5982\u4f55\uff1f\u5404\u56fe\u6807\u8bbe\u8ba1\u7684\u597d\u574f 6\u3001\u4ea4\u4e92\u8bbe\u8ba1\u5206\u6790\uff0c\u5bfc\u822a\u8def\u5f84\u662f\u5426\u6e05\u6670\uff1f\u4e3b\u8981\u529f\u80fd\u7684\u89e6\u8fbe\u7387\u5982\u4f55\uff1f 7\u3001\u529f\u80fd\u5206\u6790\uff0c\u8fd9\u4e2a\u4ea7\u54c1\u6709\u54ea\u4e9b\u5173\u952e\u529f\u80fd\uff0c\u7528\u54ea\u4e9b\u5173\u952e\u529f\u80fd\u6ee1\u8db3\u4e86\u7528\u6237\u7684\u6838\u5fc3\u9700\u6c42\uff1f\u6ee1\u8db3\u7684\u597d\u4e0d\u597d\uff1f\u6709\u4ec0\u4e48\u4f18\u5316\u7a7a\u95f4\u7b49\u7b49\u3002\u529f\u80fd\u5206\u6790\u4e00\u5b9a\u8981\u4f5c\u4e3a\u4e00\u4e2a\u91cd\u70b9\u53bb\u8fdb\u884c\u5206\u6790\uff0c\u56e0\u4e3a\u6bd5\u7adf\u662f\u4e00\u573a\u4ea7\u54c1\u7ecf\u7406\u7684\u9762\u8bd5\u3002 8\u3001\u8fd0\u8425\u5206\u6790\uff0c\u505a\u4e86\u54ea\u4e9b\u8fd0\u8425\u6d3b\u52a8\uff1f\u6548\u679c\u8d28\u91cf\u5982\u4f55\u554a\uff1f \u5728\u771f\u5b9e\u7684\u9762\u8bd5\u573a\u666f\u4e2d\uff0c\u6839\u636e\u4ea7\u54c1\u7684\u7279\u8d28\uff0c\u8981\u8fdb\u884c\u6709\u6761\u7406\u3001\u6709\u7ec6\u8282\u7684\u5206\u6790\uff0c\u5f80\u5f80\u5c31\u53ef\u4ee5\u5f97\u5230\u9762\u8bd5\u5b98\u7684\u597d\u8bc4\u3002","title":"\u5b8c\u6574\u7684\u4ea7\u54c1\u5206\u6790\u4e00\u822c\u5305\u542b\u54ea\u4e9b\u7ef4\u5ea6\uff1a"},{"location":"chapter_8/5_chanpingsiwei_1/#_16","text":"\u5728\u5b9e\u9645\u5de5\u4f5c\u4e2d\uff0c\u4ea7\u54c1\u7ecf\u7406\u7684\u5de5\u4f5c\u6d41\u7a0b\u4e00\u822c\u5206\u4e3a\u5982\u4e0b\u6b65\u9aa4\uff1a 1\uff09\u9700\u6c42\u6536\u96c6\uff0c\u5177\u4f53\u6536\u96c6\u65b9\u6cd5\u5982\u98984\u6240\u793a\uff1b 2\uff09\u9700\u6c42\u6c60\u7ba1\u7406\uff0c\u6536\u96c6\u6765\u7684\u9700\u6c42\u9700\u8981\u653e\u5230\u9700\u6c42\u6c60\u4e2d\u7edf\u4e00\u7ba1\u7406 3\uff09\u9700\u6c42\u4f18\u5148\u7ea7\uff0c\u9700\u8981\u6839\u636e\u4f18\u5148\u7ea7\u8fdb\u884c\u9700\u6c42\u8fed\u4ee3\uff0c\u5177\u4f53\u65b9\u6cd5\u5982\u98985\u6240\u793a 4\uff09\u9700\u6c42\u786e\u5b9a\uff0c\u627e\u81ea\u5df1\u7684\u76f4\u5c5e\u9886\u5bfc\u786e\u8ba4\u6bcf\u4e00\u4e2a\u8fed\u4ee3\u7684\u9700\u6c42 5\uff09\u4ea7\u54c1\u8bbe\u8ba1\uff0c\u4f7f\u7528\u7ade\u54c1\u5206\u6790\u3001\u8111\u56fe\u3001\u6d41\u7a0b\u56fe\u3001\u539f\u578b\u56fe\u3001PRD\u7b49\u65b9\u6cd5\u8be6\u7ec6\u7684\u68b3\u7406\u4ea7\u54c1\u903b\u8f91 6\uff09\u9879\u76ee\u7ba1\u7406\uff0c\u4f7f\u7528\u9879\u76ee\u6392\u671f\u8868\u7b49\u65b9\u5f0f\u63a8\u52a8\u9879\u76ee\u6309\u65f6\u5e76\u4e14\u4fdd\u8d28\u4fdd\u91cf\u7684\u4e0a\u7ebf 7\uff09\u6570\u636e\u5206\u6790\uff0c\u4ea7\u54c1\u4e0a\u7ebf\u4e4b\u540e\u901a\u8fc7\u6570\u636e\u5206\u6790\u7b49\u65b9\u6cd5\u9a8c\u8bc1\u529f\u80fd/\u4ea7\u54c1\u662f\u5426\u8fbe\u5230\u9884\u671f\u6548\u679c\uff0c\u5982\u679c\u6ca1\u6709\u9700\u8981\u5982\u4f55\u4f18\u5316\uff0c\u7136\u540e\u5f00\u542f\u53e6\u4e00\u4e2a\u7248\u672c\u7684\u8fed\u4ee3\u3002","title":"\u4ea7\u54c1\u7ecf\u7406\u7684\u5de5\u4f5c\u6d41\u7a0b\u662f\u4ec0\u4e48\uff1f"},{"location":"chapter_8/5_chanpingsiwei_1/#_17","text":"\u8fd9\u662fHR\u9762\u7ecf\u5e38\u4f1a\u9047\u5230\u7684\u95ee\u9898\uff0c\u8ba9\u5f88\u591a\u6c42\u804c\u8005\u975e\u5e38\u5934\u75bc\uff0c\u56e0\u4e3a\u6ca1\u6709\u597d\u7684\u601d\u8def\u3002\u8981\u60f3\u56de\u7b54\u597d\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u8981\u5148\u5f04\u6e05\u695aHR\u60f3\u8981\u901a\u8fc7\u8fd9\u9053\u9898\u4e86\u89e3\u4ec0\u4e48\u5462\uff1f 1\u3001\u8003\u5bdf\u4f60\u5982\u4f55\u770b\u5f85\u632b\u6298\u8fd9\u4ef6\u4e8b\u3002\u5c31\u662f\u4f60\u8ba4\u4e3a\u4ec0\u4e48\u4e8b\u5bf9\u4f60\u6765\u8bf4\u7b97\u632b\u6298\u3002\u5982\u679c\u5bf9\u5927\u591a\u6570\u4eba\u90fd\u4e60\u4ee5\u4e3a\u5e38\u7684\u4e8b\u60c5\uff0c\u4f60\u770b\u505a\u662f\u632b\u6298\uff0c\u90a3\u5c31\u8981\u53cd\u601d\u4e00\u4e0b\u662f\u4e0d\u662f\u81ea\u5df1\u592a\u73bb\u7483\u5fc3\uff0c\u6297\u538b\u80fd\u529b\u5dee\u4e86\u3002 2\u3001\u770b\u4f60\u89e3\u51b3\u95ee\u9898\u7684\u601d\u8def\u53ca\u80fd\u529b\u3002\u5728\u5de5\u4f5c\u4e2d\u9047\u5230\u632b\u6298\u662f\u7279\u522b\u6b63\u5e38\u7684\u4e8b\uff0c\u91cd\u8981\u7684\u662f\u4f60\u662f\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4ee5\u53ca\u89e3\u51b3\u7684\u597d\u4e0d\u597d\u3002 3\u3001\u4fa7\u9762\u4e86\u89e3\u4f60\u7684\u5b66\u4e60\u80fd\u529b\u3002\u9047\u5230\u95ee\u9898\u3001\u89e3\u51b3\u95ee\u9898\u4e4b\u540e\u4f60\u80fd\u4e0d\u80fd\u4ece\u4e2d\u603b\u7ed3\u7ecf\u9a8c\u6559\u8bad\uff0c\u540c\u6837\u7684\u95ee\u9898\u4e0d\u4f1a\u518d\u72af\u7b2c\u4e8c\u6b21\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u4eba\u7684\u81ea\u6211\u5b66\u4e60\u80fd\u529b\u3002","title":"\u4f60\u9047\u5230\u7684\u6700\u5927\u7684\u632b\u6298\u662f\u4ec0\u4e48\uff1f\u5982\u4f55\u89e3\u51b3\u7684\uff1f"},{"location":"chapter_8/5_chanpingsiwei_1/#_18","text":"\u9762\u8bd5\u5e0c\u671b\u901a\u8fc7\u8fd9\u9053\u9898\u76ee\u8003\u5bdf\u4ec0\u4e48\u5462\uff1f 1\uff09\u770b\u4f60\u7684\u7f3a\u70b9\u662f\u5426\u4f1a\u5f71\u54cd\u672c\u804c\u5de5\u4f5c\u3002 \u6240\u4ee5\u5728\u56de\u7b54\u6b64\u7c7b\u95ee\u9898\u65f6\uff0c\u4e00\u5b9a\u8bb0\u4f4f\uff1a\u4e0d\u80fd\u56de\u7b54\u5bf9\u672c\u804c\u5de5\u4f5c\u5f71\u54cd\u5f88\u5927\u7684\u7f3a\u70b9\uff0c\u6bd4\u5982 \u9886\u5bfc\u80fd\u529b\u5dee , \u903b\u8f91\u4e0d\u6e05\u6670 , \u4e0d\u5584\u4e8e\u6c9f\u901a \u7b49\u7b49\u3002 2\uff09\u770b\u4f60\u56de\u7b54\u95ee\u9898\u7684\u601d\u8def\u662f\u5426\u8db3\u591f\u6709\u6761\u7406\u3002 \u56de\u7b54\u6b64\u7c7b\u95ee\u9898\u5efa\u8bae\u6309\u7167\u4e09\u6b65\u8d70\uff1a \u7b2c\u4e00\u6b65\uff1a\u8bf4\u51fa\u81ea\u5df1\u7684\u4e00\u4e2a\u7f3a\u70b9\uff1b \u7b2c\u4e8c\u6b65\uff1a\u8bf4\u51fa\u8fd9\u4e2a\u7f3a\u70b9\u7ed9\u81ea\u5df1\u9020\u6210\u7684\u56f0\u6270\uff1b \u7b2c\u4e09\u6b65\uff1a\u81ea\u5df1\u662f\u5982\u4f55\u52aa\u529b\u53bb\u514b\u670d\u8fd9\u4e2a\u7f3a\u70b9\u7684\u3002","title":"\u4f60\u6700\u5927\u7684\u7f3a\u70b9\u662f\u4ec0\u4e48\uff1f"},{"location":"chapter_8/6_jixiaobaogao/","text":"\u6982\u8ff0 \u5de5\u4f5c\u4e86\u5f88\u591a\u5e74\uff0c\u5e73\u5747\u6bcf\u534a\u5e74\u5199\u4e00\u6b21\u7ee9\u6548\u62a5\u544a, \u5df2\u7ecf\u5199\u4e86\u51e0\u5341\u6b21\u62a5\u544a\u4e86. \u603b\u7ed3\u4e00\u4e0b\u5199\u7ee9\u6548\u62a5\u544a\u7684\u51e0\u4e2a\u6ce8\u610f\u70b9. \u4e00 \u4e3a\u4ec0\u4e48\u8981\u5199\u7ee9\u6548\u62a5\u544a(\u5e74\u7ec8\u603b\u7ed3) \u672c\u8d28\u4e0a\u662f\u5bf9\u81ea\u5df1\u4e00\u5e74\u4ee5\u6765\u5de5\u4f5c\u7684 \u56de\u987e\u548c\u603b\u7ed3 \uff0c\u4ece\u4e2d\u627e\u51fa\u7ecf\u9a8c\u548c\u6559\u8bad\uff0c\u627e\u51fa\u89c4\u5f8b\u6027\u7684\u77e5\u8bc6\uff0c\u4e3a\u6765\u5e74\u7684\u5de5\u4f5c\u505a\u7684\u66f4\u597d\u3002\u5f53\u7136\uff0c\u8fd9\u4e5f\u662f\u4e00\u6b21\u7ba1\u7406\u8005\u5bf9\u4e8e\u4e0b\u5c5e\u66f4\u5168\u9762\u7684\u4e86\u89e3\uff0c\u5bf9\u7ba1\u7406\u597d\u6bcf\u4f4d\u4e0b\u5c5e\u548c\u7ee9\u6548\u8003\u8bc4\u90fd\u6709\u4e00\u5b9a\u7684\u53c2\u8003\u610f\u4e49\u3002 \u4e8c \u600e\u4e48\u5199\u597d\u5e74\u7ec8\u603b\u7ed3\u5462\uff1f 1\u3001\u5217\u4e3e\u51fa\u4eca\u5e74\u505a\u7684\u6700\u6ee1\u610f\u7684\u4e94\u4ef6\u4e8b \u6211\u8ba4\u4e3a\uff0c\u4f60\u81f3\u5c11\u8981\u5217\u51fa\u4f60\u6700\u6ee1\u610f\u7684\u4e94\u4ef6\u4e8b\uff0c\u8fd9\u4e94\u4ef6\u4e8b\u53ef\u4ee5\u662f\u65e5\u5e38\u5de5\u4f5c\uff0c\u4e5f\u53ef\u4ee5\u662f\u96be\u7684\u4e8b\u6216\u8005\u6709\u6311\u6218\u7684\u4e8b\u4ea6\u6216\u662f\u975e\u5e38\u6709\u4ef7\u503c\u7684\u4e8b\u3002 \u90a3\u4e48\u6709\u4e86\u8fd9\u4e94\u4ef6\u4e8b\uff0c\u600e\u4e48\u53bb\u5199\u51fa\u6211\u4eec\u5de5\u4f5c\u7684\u4eae\u70b9\u5462\uff1f\u6211\u4eec\u7ee7\u7eed\u770b\u4e0b\u6587\u3002 2\u3001\u4ece\u56db\u4e2a\u601d\u7ef4\u6765\u5206\u6790\u6bcf\u4ef6\u4e8b \u6211\u7684\u8bfb\u8005\u5927\u90e8\u5206\u90fd\u662f\u7a0b\u5e8f\u5458/\u4ea7\u54c1\u7ecf\u7406\uff0c\u6211\u5efa\u8bae\u4f60\u4ece\u4ee5\u4e0b\u56db\u4e2a\u7ef4\u5ea6\u6765\u603b\u7ed3\uff0c\u4e00\u5b9a\u4f1a\u8ba9\u4f60\u7684\u9886\u5bfc\u773c\u524d\u4e00\u4eae\uff1a a\u3001\u7ed3\u679c\u7ef4\u5ea6 \u7ed3\u679c\u8fd9\u4e2a\u7ef4\u5ea6\u662f\u5173\u6ce8\u4f60\u505a\u7684\u4e8b\u5e26\u6765\u7684\u4ef7\u503c\uff0c\u4e0d\u540c\u7c7b\u578b\u7684\u56e2\u961f\u5728\u7ed3\u679c\u8868\u73b0\u4e0a\u4f1a\u6709\u4e00\u4e9b\u5dee\u5f02\u3002 \u5982\u679c\u4f60\u662f\u4e1a\u52a1\u5f00\u53d1\u56e2\u961f\uff0c\u4ece\u4e1a\u52a1\u7ef4\u5ea6\u6765\u603b\u7ed3\u662f\u5fc5\u7136\u7684\uff0c\u4f8b\u5982\u67d0\u4e2a\u4e1a\u52a1\u7528\u6237\u7684\u65e5\u6d3b/\u6708\u6d3b\u662f\u4ec0\u4e48\u3002\u5bf9\u4e8e\u6280\u672f\u4f18\u5316\u7c7b\u9700\u6c42\u6765\u8bf4\uff0c\u4e3b\u8981\u53bb\u601d\u8003\u6280\u672f\u4f18\u5316\u7ed9\u4e1a\u52a1\u5e26\u6765\u7684\u4ef7\u503c\u662f\u5565\uff1f\u6bd4\u5982\u8fd9\u4e2a\u6280\u672f\u4f18\u5316\u8ba9\u4e1a\u52a1 P2 \u6545\u969c\u4ece 3 \u6b21\u51cf\u5c11\u5230 0 \u6b21\u3002 \u5982\u679c\u4f60\u662f\u56e2\u961f leader\uff0c\u5bf9\u4e8e\u4f60\u7684\u7ba1\u7406\u63aa\u65bd\u4ea7\u751f\u7684\u7ed3\u679c\uff0c\u8fd9\u8861\u91cf\u7684\u65b9\u6cd5\u662f\u6548\u7387\u548c\u8d28\u91cf\u63d0\u5347\u5982\u4f55\u3002 \u5982\u679c\u662f\u4f60\u4e2d\u95f4\u4ef6/\u57fa\u7840\u67b6\u6784\u56e2\u961f\uff0c\u6211\u5efa\u8bae\u4f60\u7684\u7ed3\u679c\u4ece\u7cfb\u7edf\u7684\u6027\u80fd\u3001\u53ef\u7528\u6027\u548c\u6210\u672c\u6765\u603b\u7ed3\u3002 \u5982\u679c\u4f60\u662f\u652f\u6491\u56e2\u961f\uff0c\u4e5f\u5c31\u662f\u8fd0\u7ef4/\u6d4b\u8bd5/\u6548\u7387\u5de5\u7a0b\u7b49\u56e2\u961f\uff0c\u6211\u5efa\u8bae\u4f60\u4ece\u8d28\u91cf\u3001\u6548\u7387\u548c\u6210\u672c\u7684\u65b9\u9762\u8fdb\u884c\u601d\u8003\u548c\u603b\u7ed3\u3002 b\u3001\u6570\u636e\u7ef4\u5ea6 \u7b2c\u4e8c\u4e2a\u7ef4\u5ea6\u662f\u6570\u636e\uff0c\u6ca1\u6709\u6570\u636e\u5c31\u6ca1\u6709\u529e\u6cd5\u91cf\u5316\uff0c\u4e5f\u5c31\u6ca1\u6cd5\u6bd4\u8f83\u548c\u6539\u8fdb\uff0c\u6240\u4ee5\u6570\u636e\u975e\u5e38\u91cd\u8981\uff01 \u6bd4\u5982\u50cf\u201c\u63d0\u5347\u4e86\u7cfb\u7edf\u6027\u80fd\u201d\u8fd9\u79cd\u6bd4\u8f83\u865a\u7684\u63cf\u8ff0\uff0c\u5e94\u8be5\u6539\u6210 TPS/QPS \u4ece\u591a\u5c11\u63d0\u5347\u5230\u4e86\u591a\u5c11\u8fd9\u79cd\u5177\u4f53\u7684\u63cf\u8ff0\u624d\u662f\u6b63\u89e3\u3002 \u901a\u8fc7\u6570\u636e\u63cf\u8ff0\u7ed3\u679c\u7684\u65f6\u5019\uff0c\u4f60\u4e0d\u4f46\u8981\u5217\u51fa\u76f8\u5173\u7684\u6570\u636e\uff0c\u800c\u4e14\u8981\u5bf9\u8fd9\u4e9b\u6570\u636e\u80cc\u540e\u7684\u542b\u4e49\u4e86\u5982\u6307\u638c\uff0c\u5c24\u5176\u5bf9\u4e8e\u6570\u636e\u7684\u8bc4\u4ef7\u6807\u51c6\uff0c\u901a\u8fc7\u5bf9\u6570\u636e\u7684\u8bc4\u4ef7\u53ef\u4ee5\u57f9\u517b\u6211\u4eec\u4e1a\u52a1\u601d\u7ef4\u3002 \u6bd4\u5982\uff0c\u540c\u6837\u662f\u5c06\u67d0 APP \u7684\u65e5\u6d3b\u63d0\u5347 5%\uff0c\u5bf9\u4e8e\u6bd4\u8f83\u7a33\u5b9a\u7684\u4ea7\u54c1\u5982\u652f\u4ed8\u5b9d\u8fd9\u6837\u7684\u4e1a\u52a1\u662f\u975e\u5e38\u96be\u7684\uff0c\u4f46\u5bf9\u4e8e\u4e00\u4e2a\u65b0\u4e1a\u52a1\u662f\u4e0d\u591f\u7684\uff0c\u540c\u6837\u7684\u9053\u7406\uff0c\u4ece 10% \u63d0\u5347 15% \u548c\u4ece 80% \u63d0\u5347 85% \uff0c\u542b\u4e49\u8fe5\u5f02\u3002 \u518d\u6bd4\u5982\uff0c\u4f60\u628a\u67d0\u6838\u5fc3\u7cfb\u7edf\u53ef\u7528\u6027\u4ece 98% \u63d0\u5347\u5230 99 % \u548c\u4ece 99% \u63d0\u5347\u5230 99.999% \uff0c\u540e\u8005\u9700\u8981\u4ed8\u51fa\u7684\u6210\u672c\u548c\u96be\u5ea6\u8fdc\u8d85\u4e8e\u524d\u8005\u3002 \u5f88\u591a\u65f6\u5019\uff0c\u6211\u4eec\u611f\u89c9\u8fd9\u4e2a\u4e8b\u597d\u50cf\u6ca1\u6709\u529e\u6cd5\u7528\u6570\u636e\u6765\u63cf\u8ff0\u3002\u4f46\u4e8b\u5b9e\u662f\uff0c\u4e0d\u662f\u4e0d\u80fd\u7528\u6570\u636e\u6765\u63cf\u8ff0\uff0c\u800c\u662f\u4f60\u6ca1\u6709\u641c\u96c6\u76f8\u5173\u6570\u636e\uff0c\u6ca1\u6709\u517b\u6210\u8fd9\u79cd\u4e60\u60ef\u7f62\u4e86\u3002 c\u3001\u6280\u672f\u7ef4\u5ea6\uff08\u4ea7\u54c1\u540c\u5b66\u5c31\u662f\u4e13\u4e1a\u9886\u57df\uff09 \u5bf9\u4e8e\u7a0b\u5e8f\u5458\u6765\u8bf4\uff0c\u505a\u5b8c\u4e00\u4e2a\u9879\u76ee\u6216\u8005\u65b9\u6848\u4e4b\u540e\uff0c\u6280\u672f\u6709\u54ea\u4e9b\u63d0\u5347\uff0c\u5b66\u5230\u4e86\u4ec0\u4e48\u65b0\u6280\u672f\u6216\u8005\u6709\u4e86\u4ec0\u4e48\u66f4\u6df1\u7684\u9886\u609f\uff0c\u90fd\u53ef\u4ee5\u8bd5\u7740\u7cfb\u7edf\u5730\u603b\u7ed3\u4e00\u4e0b\uff0c\u8fd9\u5f88\u91cd\u8981\uff01 \u6bd4\u5982\uff0c\u6211\u4eec\u5728\u8bbe\u8ba1\u65b9\u6848\u65f6\u7528\u4e86 redis \u7f13\u5b58\uff0c\u4f46\u662f\u8fd9\u4e0d\u4ee3\u8868\u6211\u4eec\u5bf9\u7f13\u5b58\u7684\u7406\u89e3\u6df1\u5165\u548c\u5168\u9762\u4e86\uff0c\u6211\u4eec\u5177\u4f53\u843d\u5730\u7684\u8fc7\u7a0b\u4e2d\u9047\u5230\u4ec0\u4e48\u5751\u548c\u600e\u4e48\u89e3\u51b3\u7684\uff0c\u6bd4\u5982\u7f13\u5b58\u7a7f\u900f\u600e\u4e48\u529e\uff1f\u4e0d\u540c\u4e1a\u52a1\u573a\u666f\u7684\u7f13\u5b58\u7684\u8fc7\u671f\u65f6\u95f4\u5982\u4f55\u8bbe\u7f6e\uff1f\u662f\u5426\u9700\u8981\u518d\u8003\u8651\u4e8c\u6b21\u7f13\u5b58\u7b49\u7b49\uff0c\u8fd9\u4e9b\u90fd\u662f\u9700\u8981\u4e8b\u540e\u6574\u7406\u548c\u603b\u7ed3\u7684\u3002 \u6280\u672f\u7684\u5176\u4ed6\u9886\u57df\u53ef\u4ee5\u63a8\u800c\u5e7f\u4e4b\u3002 d\u3001\u6210\u957f\u7ef4\u5ea6 \u9664\u4e86\u4ee5\u4e0a\u6280\u672f\u7684\u63d0\u5347\u4e4b\u5916\uff0c\u4f60\u8fd8\u9700\u8981\u5173\u5fc3\u4e2a\u4eba\u7efc\u5408\u80fd\u529b\u7684\u6210\u957f\uff0c \u4e5f\u5c31\u662f\u8f6f\u6280\u80fd\u7684\u63d0\u5347\u3002\u6bd4\u5982\u5bf9\u4e1a\u52a1\u7684\u7406\u89e3\u3001\u9879\u76ee\u7ba1\u7406\u3001\u8de8\u56e2\u961f\u534f\u4f5c\u3001\u6c9f\u901a\u80fd\u529b\u548c\u505a\u4e8b\u65b9\u6cd5\u7b49\u7b49\u3002 \u8fd9\u4e9b\u80fd\u529b\u53ef\u80fd\u5728\u4f4e\u9636\u7a0b\u5e8f\u5458\u7684\u5e74\u7ec8\u603b\u7ed3\u4e0a\u6ca1\u90a3\u4e48\u91cd\u8981\uff0c\u4f46\u662f\u5bf9\u4e8e\u67b6\u6784\u5e08/\u6280\u672f\u7ecf\u7406\u7ea7\u522b\u4ee5\u4e0a\u7684\u540c\u5b66\u5c31\u975e\u5e38\u91cd\u8981\u4e86\u3002 \u4ee5\u5bf9\u4e1a\u52a1\u7684\u7406\u89e3\u4e3a\u4f8b\uff0c\u4f60\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u89d2\u5ea6\u6765\u601d\u8003\uff1a \u4e1a\u52a1\u7684\u573a\u666f\u662f\u4ec0\u4e48\uff1f \u4e1a\u52a1\u7684\u76ee\u6807\u7528\u6237\u662f\u8c01\uff1f \u76ee\u6807\u7528\u6237\u6709\u4ec0\u4e48\u7279\u70b9\uff1f \u4ea7\u54c1\u89e3\u51b3\u4e86\u76ee\u6807\u7528\u6237\u4ec0\u4e48\u95ee\u9898\uff1f \u7528\u6237\u4e3a\u4ec0\u4e48\u559c\u6b22/\u8ba8\u538c\u8fd9\u4e2a\u65b0\u529f\u80fd\uff1f \u8fd9\u6b3e\u4ea7\u54c1\u7684\u53d8\u73b0\u65b9\u5f0f\u662f\u4ec0\u4e48\uff1f \u7ade\u4e89\u5bf9\u624b\u7684\u4ea7\u54c1\u548c\u6211\u4eec\u4ea7\u54c1\u7684\u5dee\u5f02\u5728\u54ea\u91cc\uff1f 3\u3001\u6211\u4eec\u5b58\u5728\u7684\u95ee\u9898\u548c\u5982\u4f55\u6539\u8fdb \u6bd4\u5982\uff0c\u4ee5\u4e0b\u662f\u5927\u90e8\u5206\u5e74\u8f7b\u7a0b\u5e8f\u5458\u7684\u901a\u75c5\uff0c\u6211\u4eec\u53ef\u4ee5\u8bf4\u6211\u81ea\u8eab\u7f3a\u70b9\u4e13\u4e1a\u6280\u672f\u57fa\u7840\u6bd4\u8f83\u5dee\uff0c\u4e0d\u592a\u5584\u4e8e\u8fc7\u591a\u7684\u4ea4\u9645\uff0c\u5c24\u5176\u662f\u548c\u964c\u751f\u4eba\u4ea4\u5f80\u6709\u4e00\u5b9a\u7684\u96be\u5ea6\uff0c\u529e\u4e8b\u6bd4\u8f83\u6bdb\u8e81\uff0c\u51c6\u786e\u6027\u6709\u65f6\u4e0d\u591f\u3002 \u53e6\u5916\u5168\u5c40\u610f\u8bc6\u4e0d\u591f\u5f3a\u3002\u6709\u65f6\u505a\u4e8b\u60c5\u3001\u5e72\u5de5\u4f5c\u53ea\u4ece\u81ea\u8eab\u51fa\u53d1\uff0c\u5bf9\u516c\u53f8\u53ca\u9879\u76ee\u4f5c\u51fa\u7684\u4e00\u4e9b\u7684\u91cd\u5927\u51b3\u7b56\u7406\u89e3\u4e0d\u900f\uff0c\u5c3d\u7ba1\u4e5f\u6309\u9886\u5bfc\u8981\u6c42\u5b8c\u6210\u4e86\u8981\u505a\u7684\u5de5\u4f5c\uff0c\u5fc3\u7406\u4e0a\u8fd8\u662f\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u60f3\u6cd5\u3002\u5728\u5de5\u4f5c\u4e2d\u8fd8\u5b58\u5728\u770b\u5230\u3001\u542c\u5230\u3001\u60f3\u5230\u4f46\u8fd8\u6ca1\u505a\u5230\u7684\u60c5\u51b5\uff0c\u8fd8\u9700\u8981\u8fdb\u4e00\u6b65\u589e\u5f3a\u8d23\u4efb\u611f\u548c\u4e2a\u4eba\u81ea\u9a71\u529b\u3002 4\u3001\u660e\u5e74\u7684\u89c4\u5212\u548c\u65b9\u5411 \u9664\u4e86\uff0c\u4f60\u53ef\u4ee5\u6839\u636e\u6240\u5c5e\u4e1a\u52a1\u5f00\u53d1/\u6280\u672f\u67b6\u6784/\u652f\u6491\u56e2\u961f\u5173\u6ce8\u4e0d\u540c\u6765\u89c4\u5212\uff08\u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u524d\u6587\u7ed3\u679c\u90e8\u5206\uff09\u660e\u5e74\u7684\u65b9\u5411\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u4e09\u4e2a\u65b9\u9762\u6765\u89c4\u5212\u672a\u6765\u4e00\u5e74\uff1a 4.1 \u63d0\u9ad8\u4e2a\u4eba\u4e13\u4e1a\u80fd\u529b\u3002 \u6bd4\u5982\uff0c\u628a\u81ea\u5df1\u7684\u6280\u672f\u80fd\u529b\u4ece P5 \u63d0\u5347\u5230 P6 \uff0c\u90a3\u4e48\u5177\u4f53\u5c31\u8981\u5728\u65e5\u5e38\u5de5\u4f5c\u4e2d\uff0c\u52a0\u5f3a\u4e13\u4e1a\u77e5\u8bc6\u7684\u5b66\u4e60\uff0c\u79ef\u7d2f\u4e30\u5bcc\u7684\u4e13\u4e1a\u77e5\u8bc6\uff0c\u4ece\u4e25\u8981\u6c42\u81ea\u5df1\uff0c\u679c\u65ad\u53d1\u73b0\u548c\u89e3\u51b3\u95ee\u9898\u3002 \u8981\u4ee5\u4e25\u8c28\u7684\u5de5\u4f5c\u6001\u5ea6\u4e0e\u826f\u597d\u7684\u6c9f\u901a\u534f\u4f5c\u80fd\u529b\uff0c\u52aa\u529b\u63d0\u9ad8\u81ea\u8eab\u7684\u7efc\u5408\u7d20\u8d28\uff0c\u8e0f\u8e0f\u5b9e\u5b9e\u505a\u597d\u624b\u4e2d\u7684\u6bcf\u4e00\u4ef6\u4e8b\uff0c\u4ece\u6bcf\u5929\u7684\u4e00\u70b9\u4e00\u6ef4\u4e2d\u591a\u53cd\u601d\u3001\u591a\u5b66\u4e60\u3001\u591a\u4ea4\u6d41\uff0c\u4e0d\u65ad\u7684\u603b\u7ed3\u3002 4.2 \u63d0\u5347\u8bed\u8a00\u6c9f\u901a\u548c\u5408\u4f5c\u80fd\u529b\u3002 \u5728\u5b9e\u9645\u5de5\u4f5c\u4e2d\uff0c\u8981\u66f4\u52a0\u79ef\u6781\u4e3b\u52a8\u5730\u5411\u9886\u5bfc/\u8d44\u6df1\u540c\u4e8b\u8bf7\u6559\u9047\u5230\u7684\u95ee\u9898\uff0c\u5e76\u591a\u4e0e\u540c\u4e8b\u4eec\u8fdb\u884c\u6c9f\u901a\uff0c\u5b66\u4e60\u4ed6\u4eec\u5904\u7406\u5b9e\u9645\u95ee\u9898\u7684\u65b9\u6cd5\u53ca\u5de5\u4f5c\u7ecf\u9a8c\u3002\u901a\u8fc7\u591a\u5b66\u3001\u591a\u95ee\u3001\u591a\u60f3\u6765\u4e0d\u65ad\u63d0\u9ad8\u81ea\u5df1\u7684\u5b9e\u9645\u5de5\u4f5c\u80fd\u529b\u3002 4.3 \u57f9\u517b\u4e2a\u4eba\u5174\u8da3\u7231\u597d\u3002 \u6709\u5174\u8da3\u7231\u597d\u7684\u4eba\uff0c\u751f\u6d3b\u624d\u4f1a\u5feb\u4e50\uff0c\u5c31\u50cf\u6211\u559c\u6b22\u7f16\u7a0b\u4e00\u6837\uff0c\u9664\u4e86\u6280\u672f/\u8f6f\u6280\u80fd/\u6210\u957f\u7684\u7b49\u65b9\u9762\u7684\u77e5\u8bc6\uff0c\u8eab\u4f53\u4e5f\u5f88\u91cd\u8981\uff0c\u5728\u5e73\u65f6\u751f\u6d3b\u4e2d\uff0c\u52a0\u5f3a\u953b\u70bc\uff0c\u63d0\u9ad8\u8eab\u4f53\u7d20\u8d28\uff0c\u8eab\u4f53\u662f 1\uff0c\u5176\u4ed6\u5168\u662f 0 \u3002 \u5e74\u7ec8\u603b\u7ed3\u7edd\u5bf9\u662f\u4e00\u6b21\u7edd\u4f73\u7684\u53cd\u601d\u3001\u590d\u76d8\u3001\u6539\u8fdb\u548c\u63d0\u5347\u81ea\u6211\u7684\u673a\u4f1a\uff0c\u5404\u4f4d\u8bf7\u8ba4\u771f\u9762\u5bf9\u5427\uff01 \u4e09 \u7ee9\u6548\u5185\u5bb9\u7684\u6765\u6e90 SRE \u5de5\u7a0b\u5e08\u7684\u4ef7\u503c\u5c31\u662f\u4e3a\u4e1a\u52a1\u63d0\u5347\u6548\u7387\u3001\u964d\u4f4e\u6210\u672c\u3001\u63d0\u5347\u7a33\u5b9a\u6027, \u5fc5\u987b\u8981\u4ece\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\u8fdb\u884c\u603b\u7ed3. \u4ece 0 \u5230 1, \u505a\u4e86 XXXX, \u4ea7\u751f\u4e86\u591a\u5c11\u591a\u5c11\u4ef7\u503c. \u4ece 1 \u5230 N, \u505a\u4e86 XXXX, \u4ea7\u751f\u4e86\u591a\u5c11\u591a\u5c11\u4ef7\u503c. \u89e3\u51b3 XXXX \u91cd\u5927\u9690\u60a3, \u63d0\u5347\u4e86\u7a33\u5b9a\u6027. \u56db \u6ce8\u610f\u4e8b\u9879 \u6bcf\u534a\u5e74\u662f\u4e00\u4e2a\u8003\u6838\u5468\u671f, \u4f46\u5e73\u65f6\u5c31\u8981\u6709\u610f\u8bc6\u603b\u7ed3\u81ea\u5df1\u7684\u534a\u5e74\u7ee9\u6548\uff0c\u800c\u4e0d\u662f\u534a\u5e74\u5230\u4e86(PM \u901a\u77e5\u4e86\u7ee9\u6548\u62a5\u544a\u63d0\u4ea4\u65e5\u671f)\u518d\u68b3\u7406. \u56de\u987e\u91cd\u70b9\u5de5\u4f5c\u6848\u4f8b\u65f6, \u5206\u4e3a \u80cc\u666f \u3001 \u6210\u679c \u3001 \u4e2a\u4eba\u4e3b\u8981\u5de5\u4f5c 3 \u4e2a\u90e8\u5206\u8bba\u8ff0. \u6210\u679c\u90e8\u5206\u4e00\u5b9a\u8981\u5f62\u6210\u91cf\u5316\u6307\u6807, \u6ce8\u610f \u56fe\u80dc\u8868\u3001\u8868\u80dc\u6587 \u3001 \u4e00\u56fe\u80dc\u5343\u8a00 . \u591a\u7528\u4ee5\u4e0b\u5173\u952e\u8bed\u53e5\uff1a xxxx \u65b9\u6848\u8bbe\u8ba1\u548c\u5b9e\u73b0(\u6bd4\u5982 XXX \u4ea7\u54c1\u9632 DDOS \u65b9\u6848\u7684\u8bbe\u8ba1\u548c\u5b9e\u73b0) \u4ece 0 \uff5e 1 \uff0c\u4ece 1 \uff5e N\uff0c\u4f18\u5316\u548c\u6539\u8fdb\u73b0\u6709\u6d41\u7a0b\u3002\u63d0\u5347\u4e86\u6548\u7387\uff0c\u964d\u4f4e\u4e86\u6210\u672c\uff0c\u63d0\u5347\u4e86\u7a33\u5b9a\u6027\u3002\u89e3\u51b3\u4e86\u91cd\u5927\u9690\u60a3. \u91cf\u5316\u6307\u6807\u5f62\u5bb9\u8bcd: \u9ad8\u4f4e\u3001\u5feb\u6162\u3001\u957f\u77ed\u3001\u901a\u7528\u3001\u987a\u7545\u3001\u5f3a\u5f31 ...... \u6307\u6807: \u6210\u719f\u5ea6\u3001\u6210\u529f\u7387\u3001\u901a\u8fc7\u7387\u3001\u8986\u76d6\u7387 ...... \u6307\u5bfc\u65b0\u4eba\u5b8c\u6210 xxxx \u4e94 \u5982\u4f55\u8fdb\u884c\u7ee9\u6548\u8003\u6838 \u603b\u4f53\u6765\u8bf4\u5c31\u662f\u53c2\u8003\u957f\u8dd1\u8fd0\u52a8, \u4ee5\u534a\u5e74\u4e3a\u671f\u9650, \u770b\u662f\u5426\u8dd1\u5230 \u76ee\u6807\u7ebf . \u5982\u679c\u521a\u597d\u8dd1\u5230\u4e86, \u90a3\u4e48\u7ee9\u6548\u7ed3\u679c\u6574\u4f53\u4e0a\u5c31\u662f \u7b26\u5408\u9884\u671f \u5982\u679c\u8d85\u51fa\u4e86, \u90a3\u4e48\u7ee9\u6548\u7ed3\u679c\u6574\u4f53\u4e0a\u5c31\u662f \u8d85\u8d8a\u9884\u671f \u5982\u679c\u6ca1\u6709\u8dd1\u5230, \u90a3\u4e48\u7ee9\u6548\u7ed3\u679c\u6574\u4f53\u4e0a\u5c31\u662f \u4e0d\u7b26\u5408\u9884\u671f \u7ee9\u6548\u7684\u5185\u5bb9 SRE \u5de5\u7a0b\u5e08\u7684\u7ee9\u6548\u5185\u5bb9\u5206\u4e3a 3 \u5927\u5757: \u4e1a\u52a1 \u3001 \u5de5\u7a0b\u5316 \u3001 \u57fa\u7840 \u4e1a\u52a1\u90e8\u5206 , \u603b\u4f53\u6765\u8bf4\u5c31\u662f\u7ed9\u624b\u4e0a\u8fd0\u7ef4\u7684\u4e1a\u52a1\uff0c\u505a\u51fa\u4e00\u4e9b\u4f18\u5316\u3001\u786e\u4fdd\u670d\u52a1\u597d\u4e1a\u52a1. \u6bd4\u5982 \u5b9e\u73b0\u81ea\u52a8\u5316\u6269\u7f29\u5bb9 \u3001 \u5b8c\u6210\u5927\u89c4\u6a21\u6d3b\u52a8\u4e0a\u7ebf\u652f\u6301 \u7b49. \u53e6\u4e00\u79cd\u5206\u6cd5\u5c31\u662f \u65e5\u5e38\u7a33\u5b9a\u6027 \u548c \u91cd\u4fdd\u7a33\u5b9a\u6027 \u5de5\u7a0b\u5316 , \u4e3b\u8981\u662f\u6307 \u591a\u4e2a\u9879\u76ee\u901a\u7528\u7684\u8fd0\u7ef4\u5de5\u5177 \u7684\u5f00\u53d1\u3001\u7ef4\u62a4\u3001\u8fed\u4ee3\u7b49\u76ee\u6807. \u57fa\u7840 , \u662f SRE \u5c97\u4f4d\u7684\u4e00\u4e9b\u57fa\u7840\u6307\u6807\u548c\u4e00\u4e9b\u8f6f\u7d20\u8d28\u65b9\u9762\u7684\u76ee\u6807. \u5176\u4e2d\u57fa\u7840\u6307\u6807\u6700\u6700\u91cd\u8981\u7684\u662f \u6bcf\u534a\u5e74\u90fd\u662f0\u6545\u969c\u8fd0\u7ef4 , \u8f6f\u7d20\u8d28\u65b9\u9762\u5305\u542b\u4e86\u4e00\u4e9b\u6c99\u9f99\u5206\u4eab\u3001\u65b0\u4eba\u6307\u5bfc\u7b49\u76ee\u6807. \u516d \u5982\u4f55\u8fdb\u884c\u8ff0\u804c \u603b\u4f53\u5c31\u662f STAR \u539f\u5219, \u4f46\u662f\u5206 2 \u4e2a\u7248\u672c, \u7075\u6d3b\u8fd0\u7528 1 \u7248\u672c 1, \u66f4\u52a0\u504f\u5411\u4e8e\u5148\u5bf9\u9f50 OKR STAR \u539f\u5219 \u5904\u5883\uff08situation\uff09 \u5728\u4ec0\u4e48\u6837\u7684\u73af\u5883\u4e0b \u4efb\u52a1(task) \u63a5\u5230\u4e86\u4ec0\u4e48\u6837\u7684\u4efb\u52a1 \u884c\u52a8(action) \u7136\u540e\u5177\u4f53\u662f\u600e\u4e48\u843d\u5730\u7684 \u7ed3\u679c(result) \u62ff\u5230\u4e86\u4ec0\u4e48\u7ed3\u679c 2 \u7248\u672c 2, \u66f4\u52a0\u504f\u5411\u4e8e\u5177\u4f53\u4e00\u7ebf\u4e8b\u52a1/\u4e2a\u4eba or \u5c0f\u56e2\u961f\u7279\u6709\u6f02\u4eae\u4ea7\u51fa","title":"\u7b2c\u516d\u7bc7 \u5982\u4f55\u5199\u7ee9\u6548\u62a5\u544a"},{"location":"chapter_8/6_jixiaobaogao/#_1","text":"\u5de5\u4f5c\u4e86\u5f88\u591a\u5e74\uff0c\u5e73\u5747\u6bcf\u534a\u5e74\u5199\u4e00\u6b21\u7ee9\u6548\u62a5\u544a, \u5df2\u7ecf\u5199\u4e86\u51e0\u5341\u6b21\u62a5\u544a\u4e86. \u603b\u7ed3\u4e00\u4e0b\u5199\u7ee9\u6548\u62a5\u544a\u7684\u51e0\u4e2a\u6ce8\u610f\u70b9.","title":"\u6982\u8ff0"},{"location":"chapter_8/6_jixiaobaogao/#_2","text":"\u672c\u8d28\u4e0a\u662f\u5bf9\u81ea\u5df1\u4e00\u5e74\u4ee5\u6765\u5de5\u4f5c\u7684 \u56de\u987e\u548c\u603b\u7ed3 \uff0c\u4ece\u4e2d\u627e\u51fa\u7ecf\u9a8c\u548c\u6559\u8bad\uff0c\u627e\u51fa\u89c4\u5f8b\u6027\u7684\u77e5\u8bc6\uff0c\u4e3a\u6765\u5e74\u7684\u5de5\u4f5c\u505a\u7684\u66f4\u597d\u3002\u5f53\u7136\uff0c\u8fd9\u4e5f\u662f\u4e00\u6b21\u7ba1\u7406\u8005\u5bf9\u4e8e\u4e0b\u5c5e\u66f4\u5168\u9762\u7684\u4e86\u89e3\uff0c\u5bf9\u7ba1\u7406\u597d\u6bcf\u4f4d\u4e0b\u5c5e\u548c\u7ee9\u6548\u8003\u8bc4\u90fd\u6709\u4e00\u5b9a\u7684\u53c2\u8003\u610f\u4e49\u3002","title":"\u4e00 \u4e3a\u4ec0\u4e48\u8981\u5199\u7ee9\u6548\u62a5\u544a(\u5e74\u7ec8\u603b\u7ed3)"},{"location":"chapter_8/6_jixiaobaogao/#_3","text":"","title":"\u4e8c \u600e\u4e48\u5199\u597d\u5e74\u7ec8\u603b\u7ed3\u5462\uff1f"},{"location":"chapter_8/6_jixiaobaogao/#1","text":"\u6211\u8ba4\u4e3a\uff0c\u4f60\u81f3\u5c11\u8981\u5217\u51fa\u4f60\u6700\u6ee1\u610f\u7684\u4e94\u4ef6\u4e8b\uff0c\u8fd9\u4e94\u4ef6\u4e8b\u53ef\u4ee5\u662f\u65e5\u5e38\u5de5\u4f5c\uff0c\u4e5f\u53ef\u4ee5\u662f\u96be\u7684\u4e8b\u6216\u8005\u6709\u6311\u6218\u7684\u4e8b\u4ea6\u6216\u662f\u975e\u5e38\u6709\u4ef7\u503c\u7684\u4e8b\u3002 \u90a3\u4e48\u6709\u4e86\u8fd9\u4e94\u4ef6\u4e8b\uff0c\u600e\u4e48\u53bb\u5199\u51fa\u6211\u4eec\u5de5\u4f5c\u7684\u4eae\u70b9\u5462\uff1f\u6211\u4eec\u7ee7\u7eed\u770b\u4e0b\u6587\u3002","title":"1\u3001\u5217\u4e3e\u51fa\u4eca\u5e74\u505a\u7684\u6700\u6ee1\u610f\u7684\u4e94\u4ef6\u4e8b"},{"location":"chapter_8/6_jixiaobaogao/#2","text":"\u6211\u7684\u8bfb\u8005\u5927\u90e8\u5206\u90fd\u662f\u7a0b\u5e8f\u5458/\u4ea7\u54c1\u7ecf\u7406\uff0c\u6211\u5efa\u8bae\u4f60\u4ece\u4ee5\u4e0b\u56db\u4e2a\u7ef4\u5ea6\u6765\u603b\u7ed3\uff0c\u4e00\u5b9a\u4f1a\u8ba9\u4f60\u7684\u9886\u5bfc\u773c\u524d\u4e00\u4eae\uff1a","title":"2\u3001\u4ece\u56db\u4e2a\u601d\u7ef4\u6765\u5206\u6790\u6bcf\u4ef6\u4e8b"},{"location":"chapter_8/6_jixiaobaogao/#a","text":"\u7ed3\u679c\u8fd9\u4e2a\u7ef4\u5ea6\u662f\u5173\u6ce8\u4f60\u505a\u7684\u4e8b\u5e26\u6765\u7684\u4ef7\u503c\uff0c\u4e0d\u540c\u7c7b\u578b\u7684\u56e2\u961f\u5728\u7ed3\u679c\u8868\u73b0\u4e0a\u4f1a\u6709\u4e00\u4e9b\u5dee\u5f02\u3002 \u5982\u679c\u4f60\u662f\u4e1a\u52a1\u5f00\u53d1\u56e2\u961f\uff0c\u4ece\u4e1a\u52a1\u7ef4\u5ea6\u6765\u603b\u7ed3\u662f\u5fc5\u7136\u7684\uff0c\u4f8b\u5982\u67d0\u4e2a\u4e1a\u52a1\u7528\u6237\u7684\u65e5\u6d3b/\u6708\u6d3b\u662f\u4ec0\u4e48\u3002\u5bf9\u4e8e\u6280\u672f\u4f18\u5316\u7c7b\u9700\u6c42\u6765\u8bf4\uff0c\u4e3b\u8981\u53bb\u601d\u8003\u6280\u672f\u4f18\u5316\u7ed9\u4e1a\u52a1\u5e26\u6765\u7684\u4ef7\u503c\u662f\u5565\uff1f\u6bd4\u5982\u8fd9\u4e2a\u6280\u672f\u4f18\u5316\u8ba9\u4e1a\u52a1 P2 \u6545\u969c\u4ece 3 \u6b21\u51cf\u5c11\u5230 0 \u6b21\u3002 \u5982\u679c\u4f60\u662f\u56e2\u961f leader\uff0c\u5bf9\u4e8e\u4f60\u7684\u7ba1\u7406\u63aa\u65bd\u4ea7\u751f\u7684\u7ed3\u679c\uff0c\u8fd9\u8861\u91cf\u7684\u65b9\u6cd5\u662f\u6548\u7387\u548c\u8d28\u91cf\u63d0\u5347\u5982\u4f55\u3002 \u5982\u679c\u662f\u4f60\u4e2d\u95f4\u4ef6/\u57fa\u7840\u67b6\u6784\u56e2\u961f\uff0c\u6211\u5efa\u8bae\u4f60\u7684\u7ed3\u679c\u4ece\u7cfb\u7edf\u7684\u6027\u80fd\u3001\u53ef\u7528\u6027\u548c\u6210\u672c\u6765\u603b\u7ed3\u3002 \u5982\u679c\u4f60\u662f\u652f\u6491\u56e2\u961f\uff0c\u4e5f\u5c31\u662f\u8fd0\u7ef4/\u6d4b\u8bd5/\u6548\u7387\u5de5\u7a0b\u7b49\u56e2\u961f\uff0c\u6211\u5efa\u8bae\u4f60\u4ece\u8d28\u91cf\u3001\u6548\u7387\u548c\u6210\u672c\u7684\u65b9\u9762\u8fdb\u884c\u601d\u8003\u548c\u603b\u7ed3\u3002","title":"a\u3001\u7ed3\u679c\u7ef4\u5ea6"},{"location":"chapter_8/6_jixiaobaogao/#b","text":"\u7b2c\u4e8c\u4e2a\u7ef4\u5ea6\u662f\u6570\u636e\uff0c\u6ca1\u6709\u6570\u636e\u5c31\u6ca1\u6709\u529e\u6cd5\u91cf\u5316\uff0c\u4e5f\u5c31\u6ca1\u6cd5\u6bd4\u8f83\u548c\u6539\u8fdb\uff0c\u6240\u4ee5\u6570\u636e\u975e\u5e38\u91cd\u8981\uff01 \u6bd4\u5982\u50cf\u201c\u63d0\u5347\u4e86\u7cfb\u7edf\u6027\u80fd\u201d\u8fd9\u79cd\u6bd4\u8f83\u865a\u7684\u63cf\u8ff0\uff0c\u5e94\u8be5\u6539\u6210 TPS/QPS \u4ece\u591a\u5c11\u63d0\u5347\u5230\u4e86\u591a\u5c11\u8fd9\u79cd\u5177\u4f53\u7684\u63cf\u8ff0\u624d\u662f\u6b63\u89e3\u3002 \u901a\u8fc7\u6570\u636e\u63cf\u8ff0\u7ed3\u679c\u7684\u65f6\u5019\uff0c\u4f60\u4e0d\u4f46\u8981\u5217\u51fa\u76f8\u5173\u7684\u6570\u636e\uff0c\u800c\u4e14\u8981\u5bf9\u8fd9\u4e9b\u6570\u636e\u80cc\u540e\u7684\u542b\u4e49\u4e86\u5982\u6307\u638c\uff0c\u5c24\u5176\u5bf9\u4e8e\u6570\u636e\u7684\u8bc4\u4ef7\u6807\u51c6\uff0c\u901a\u8fc7\u5bf9\u6570\u636e\u7684\u8bc4\u4ef7\u53ef\u4ee5\u57f9\u517b\u6211\u4eec\u4e1a\u52a1\u601d\u7ef4\u3002 \u6bd4\u5982\uff0c\u540c\u6837\u662f\u5c06\u67d0 APP \u7684\u65e5\u6d3b\u63d0\u5347 5%\uff0c\u5bf9\u4e8e\u6bd4\u8f83\u7a33\u5b9a\u7684\u4ea7\u54c1\u5982\u652f\u4ed8\u5b9d\u8fd9\u6837\u7684\u4e1a\u52a1\u662f\u975e\u5e38\u96be\u7684\uff0c\u4f46\u5bf9\u4e8e\u4e00\u4e2a\u65b0\u4e1a\u52a1\u662f\u4e0d\u591f\u7684\uff0c\u540c\u6837\u7684\u9053\u7406\uff0c\u4ece 10% \u63d0\u5347 15% \u548c\u4ece 80% \u63d0\u5347 85% \uff0c\u542b\u4e49\u8fe5\u5f02\u3002 \u518d\u6bd4\u5982\uff0c\u4f60\u628a\u67d0\u6838\u5fc3\u7cfb\u7edf\u53ef\u7528\u6027\u4ece 98% \u63d0\u5347\u5230 99 % \u548c\u4ece 99% \u63d0\u5347\u5230 99.999% \uff0c\u540e\u8005\u9700\u8981\u4ed8\u51fa\u7684\u6210\u672c\u548c\u96be\u5ea6\u8fdc\u8d85\u4e8e\u524d\u8005\u3002 \u5f88\u591a\u65f6\u5019\uff0c\u6211\u4eec\u611f\u89c9\u8fd9\u4e2a\u4e8b\u597d\u50cf\u6ca1\u6709\u529e\u6cd5\u7528\u6570\u636e\u6765\u63cf\u8ff0\u3002\u4f46\u4e8b\u5b9e\u662f\uff0c\u4e0d\u662f\u4e0d\u80fd\u7528\u6570\u636e\u6765\u63cf\u8ff0\uff0c\u800c\u662f\u4f60\u6ca1\u6709\u641c\u96c6\u76f8\u5173\u6570\u636e\uff0c\u6ca1\u6709\u517b\u6210\u8fd9\u79cd\u4e60\u60ef\u7f62\u4e86\u3002","title":"b\u3001\u6570\u636e\u7ef4\u5ea6"},{"location":"chapter_8/6_jixiaobaogao/#c","text":"\u5bf9\u4e8e\u7a0b\u5e8f\u5458\u6765\u8bf4\uff0c\u505a\u5b8c\u4e00\u4e2a\u9879\u76ee\u6216\u8005\u65b9\u6848\u4e4b\u540e\uff0c\u6280\u672f\u6709\u54ea\u4e9b\u63d0\u5347\uff0c\u5b66\u5230\u4e86\u4ec0\u4e48\u65b0\u6280\u672f\u6216\u8005\u6709\u4e86\u4ec0\u4e48\u66f4\u6df1\u7684\u9886\u609f\uff0c\u90fd\u53ef\u4ee5\u8bd5\u7740\u7cfb\u7edf\u5730\u603b\u7ed3\u4e00\u4e0b\uff0c\u8fd9\u5f88\u91cd\u8981\uff01 \u6bd4\u5982\uff0c\u6211\u4eec\u5728\u8bbe\u8ba1\u65b9\u6848\u65f6\u7528\u4e86 redis \u7f13\u5b58\uff0c\u4f46\u662f\u8fd9\u4e0d\u4ee3\u8868\u6211\u4eec\u5bf9\u7f13\u5b58\u7684\u7406\u89e3\u6df1\u5165\u548c\u5168\u9762\u4e86\uff0c\u6211\u4eec\u5177\u4f53\u843d\u5730\u7684\u8fc7\u7a0b\u4e2d\u9047\u5230\u4ec0\u4e48\u5751\u548c\u600e\u4e48\u89e3\u51b3\u7684\uff0c\u6bd4\u5982\u7f13\u5b58\u7a7f\u900f\u600e\u4e48\u529e\uff1f\u4e0d\u540c\u4e1a\u52a1\u573a\u666f\u7684\u7f13\u5b58\u7684\u8fc7\u671f\u65f6\u95f4\u5982\u4f55\u8bbe\u7f6e\uff1f\u662f\u5426\u9700\u8981\u518d\u8003\u8651\u4e8c\u6b21\u7f13\u5b58\u7b49\u7b49\uff0c\u8fd9\u4e9b\u90fd\u662f\u9700\u8981\u4e8b\u540e\u6574\u7406\u548c\u603b\u7ed3\u7684\u3002 \u6280\u672f\u7684\u5176\u4ed6\u9886\u57df\u53ef\u4ee5\u63a8\u800c\u5e7f\u4e4b\u3002","title":"c\u3001\u6280\u672f\u7ef4\u5ea6\uff08\u4ea7\u54c1\u540c\u5b66\u5c31\u662f\u4e13\u4e1a\u9886\u57df\uff09"},{"location":"chapter_8/6_jixiaobaogao/#d","text":"\u9664\u4e86\u4ee5\u4e0a\u6280\u672f\u7684\u63d0\u5347\u4e4b\u5916\uff0c\u4f60\u8fd8\u9700\u8981\u5173\u5fc3\u4e2a\u4eba\u7efc\u5408\u80fd\u529b\u7684\u6210\u957f\uff0c \u4e5f\u5c31\u662f\u8f6f\u6280\u80fd\u7684\u63d0\u5347\u3002\u6bd4\u5982\u5bf9\u4e1a\u52a1\u7684\u7406\u89e3\u3001\u9879\u76ee\u7ba1\u7406\u3001\u8de8\u56e2\u961f\u534f\u4f5c\u3001\u6c9f\u901a\u80fd\u529b\u548c\u505a\u4e8b\u65b9\u6cd5\u7b49\u7b49\u3002 \u8fd9\u4e9b\u80fd\u529b\u53ef\u80fd\u5728\u4f4e\u9636\u7a0b\u5e8f\u5458\u7684\u5e74\u7ec8\u603b\u7ed3\u4e0a\u6ca1\u90a3\u4e48\u91cd\u8981\uff0c\u4f46\u662f\u5bf9\u4e8e\u67b6\u6784\u5e08/\u6280\u672f\u7ecf\u7406\u7ea7\u522b\u4ee5\u4e0a\u7684\u540c\u5b66\u5c31\u975e\u5e38\u91cd\u8981\u4e86\u3002 \u4ee5\u5bf9\u4e1a\u52a1\u7684\u7406\u89e3\u4e3a\u4f8b\uff0c\u4f60\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u89d2\u5ea6\u6765\u601d\u8003\uff1a \u4e1a\u52a1\u7684\u573a\u666f\u662f\u4ec0\u4e48\uff1f \u4e1a\u52a1\u7684\u76ee\u6807\u7528\u6237\u662f\u8c01\uff1f \u76ee\u6807\u7528\u6237\u6709\u4ec0\u4e48\u7279\u70b9\uff1f \u4ea7\u54c1\u89e3\u51b3\u4e86\u76ee\u6807\u7528\u6237\u4ec0\u4e48\u95ee\u9898\uff1f \u7528\u6237\u4e3a\u4ec0\u4e48\u559c\u6b22/\u8ba8\u538c\u8fd9\u4e2a\u65b0\u529f\u80fd\uff1f \u8fd9\u6b3e\u4ea7\u54c1\u7684\u53d8\u73b0\u65b9\u5f0f\u662f\u4ec0\u4e48\uff1f \u7ade\u4e89\u5bf9\u624b\u7684\u4ea7\u54c1\u548c\u6211\u4eec\u4ea7\u54c1\u7684\u5dee\u5f02\u5728\u54ea\u91cc\uff1f","title":"d\u3001\u6210\u957f\u7ef4\u5ea6"},{"location":"chapter_8/6_jixiaobaogao/#3","text":"\u6bd4\u5982\uff0c\u4ee5\u4e0b\u662f\u5927\u90e8\u5206\u5e74\u8f7b\u7a0b\u5e8f\u5458\u7684\u901a\u75c5\uff0c\u6211\u4eec\u53ef\u4ee5\u8bf4\u6211\u81ea\u8eab\u7f3a\u70b9\u4e13\u4e1a\u6280\u672f\u57fa\u7840\u6bd4\u8f83\u5dee\uff0c\u4e0d\u592a\u5584\u4e8e\u8fc7\u591a\u7684\u4ea4\u9645\uff0c\u5c24\u5176\u662f\u548c\u964c\u751f\u4eba\u4ea4\u5f80\u6709\u4e00\u5b9a\u7684\u96be\u5ea6\uff0c\u529e\u4e8b\u6bd4\u8f83\u6bdb\u8e81\uff0c\u51c6\u786e\u6027\u6709\u65f6\u4e0d\u591f\u3002 \u53e6\u5916\u5168\u5c40\u610f\u8bc6\u4e0d\u591f\u5f3a\u3002\u6709\u65f6\u505a\u4e8b\u60c5\u3001\u5e72\u5de5\u4f5c\u53ea\u4ece\u81ea\u8eab\u51fa\u53d1\uff0c\u5bf9\u516c\u53f8\u53ca\u9879\u76ee\u4f5c\u51fa\u7684\u4e00\u4e9b\u7684\u91cd\u5927\u51b3\u7b56\u7406\u89e3\u4e0d\u900f\uff0c\u5c3d\u7ba1\u4e5f\u6309\u9886\u5bfc\u8981\u6c42\u5b8c\u6210\u4e86\u8981\u505a\u7684\u5de5\u4f5c\uff0c\u5fc3\u7406\u4e0a\u8fd8\u662f\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u60f3\u6cd5\u3002\u5728\u5de5\u4f5c\u4e2d\u8fd8\u5b58\u5728\u770b\u5230\u3001\u542c\u5230\u3001\u60f3\u5230\u4f46\u8fd8\u6ca1\u505a\u5230\u7684\u60c5\u51b5\uff0c\u8fd8\u9700\u8981\u8fdb\u4e00\u6b65\u589e\u5f3a\u8d23\u4efb\u611f\u548c\u4e2a\u4eba\u81ea\u9a71\u529b\u3002","title":"3\u3001\u6211\u4eec\u5b58\u5728\u7684\u95ee\u9898\u548c\u5982\u4f55\u6539\u8fdb"},{"location":"chapter_8/6_jixiaobaogao/#4","text":"\u9664\u4e86\uff0c\u4f60\u53ef\u4ee5\u6839\u636e\u6240\u5c5e\u4e1a\u52a1\u5f00\u53d1/\u6280\u672f\u67b6\u6784/\u652f\u6491\u56e2\u961f\u5173\u6ce8\u4e0d\u540c\u6765\u89c4\u5212\uff08\u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u524d\u6587\u7ed3\u679c\u90e8\u5206\uff09\u660e\u5e74\u7684\u65b9\u5411\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u4e09\u4e2a\u65b9\u9762\u6765\u89c4\u5212\u672a\u6765\u4e00\u5e74\uff1a","title":"4\u3001\u660e\u5e74\u7684\u89c4\u5212\u548c\u65b9\u5411"},{"location":"chapter_8/6_jixiaobaogao/#41","text":"\u6bd4\u5982\uff0c\u628a\u81ea\u5df1\u7684\u6280\u672f\u80fd\u529b\u4ece P5 \u63d0\u5347\u5230 P6 \uff0c\u90a3\u4e48\u5177\u4f53\u5c31\u8981\u5728\u65e5\u5e38\u5de5\u4f5c\u4e2d\uff0c\u52a0\u5f3a\u4e13\u4e1a\u77e5\u8bc6\u7684\u5b66\u4e60\uff0c\u79ef\u7d2f\u4e30\u5bcc\u7684\u4e13\u4e1a\u77e5\u8bc6\uff0c\u4ece\u4e25\u8981\u6c42\u81ea\u5df1\uff0c\u679c\u65ad\u53d1\u73b0\u548c\u89e3\u51b3\u95ee\u9898\u3002 \u8981\u4ee5\u4e25\u8c28\u7684\u5de5\u4f5c\u6001\u5ea6\u4e0e\u826f\u597d\u7684\u6c9f\u901a\u534f\u4f5c\u80fd\u529b\uff0c\u52aa\u529b\u63d0\u9ad8\u81ea\u8eab\u7684\u7efc\u5408\u7d20\u8d28\uff0c\u8e0f\u8e0f\u5b9e\u5b9e\u505a\u597d\u624b\u4e2d\u7684\u6bcf\u4e00\u4ef6\u4e8b\uff0c\u4ece\u6bcf\u5929\u7684\u4e00\u70b9\u4e00\u6ef4\u4e2d\u591a\u53cd\u601d\u3001\u591a\u5b66\u4e60\u3001\u591a\u4ea4\u6d41\uff0c\u4e0d\u65ad\u7684\u603b\u7ed3\u3002","title":"4.1 \u63d0\u9ad8\u4e2a\u4eba\u4e13\u4e1a\u80fd\u529b\u3002"},{"location":"chapter_8/6_jixiaobaogao/#42","text":"\u5728\u5b9e\u9645\u5de5\u4f5c\u4e2d\uff0c\u8981\u66f4\u52a0\u79ef\u6781\u4e3b\u52a8\u5730\u5411\u9886\u5bfc/\u8d44\u6df1\u540c\u4e8b\u8bf7\u6559\u9047\u5230\u7684\u95ee\u9898\uff0c\u5e76\u591a\u4e0e\u540c\u4e8b\u4eec\u8fdb\u884c\u6c9f\u901a\uff0c\u5b66\u4e60\u4ed6\u4eec\u5904\u7406\u5b9e\u9645\u95ee\u9898\u7684\u65b9\u6cd5\u53ca\u5de5\u4f5c\u7ecf\u9a8c\u3002\u901a\u8fc7\u591a\u5b66\u3001\u591a\u95ee\u3001\u591a\u60f3\u6765\u4e0d\u65ad\u63d0\u9ad8\u81ea\u5df1\u7684\u5b9e\u9645\u5de5\u4f5c\u80fd\u529b\u3002","title":"4.2 \u63d0\u5347\u8bed\u8a00\u6c9f\u901a\u548c\u5408\u4f5c\u80fd\u529b\u3002"},{"location":"chapter_8/6_jixiaobaogao/#43","text":"\u6709\u5174\u8da3\u7231\u597d\u7684\u4eba\uff0c\u751f\u6d3b\u624d\u4f1a\u5feb\u4e50\uff0c\u5c31\u50cf\u6211\u559c\u6b22\u7f16\u7a0b\u4e00\u6837\uff0c\u9664\u4e86\u6280\u672f/\u8f6f\u6280\u80fd/\u6210\u957f\u7684\u7b49\u65b9\u9762\u7684\u77e5\u8bc6\uff0c\u8eab\u4f53\u4e5f\u5f88\u91cd\u8981\uff0c\u5728\u5e73\u65f6\u751f\u6d3b\u4e2d\uff0c\u52a0\u5f3a\u953b\u70bc\uff0c\u63d0\u9ad8\u8eab\u4f53\u7d20\u8d28\uff0c\u8eab\u4f53\u662f 1\uff0c\u5176\u4ed6\u5168\u662f 0 \u3002 \u5e74\u7ec8\u603b\u7ed3\u7edd\u5bf9\u662f\u4e00\u6b21\u7edd\u4f73\u7684\u53cd\u601d\u3001\u590d\u76d8\u3001\u6539\u8fdb\u548c\u63d0\u5347\u81ea\u6211\u7684\u673a\u4f1a\uff0c\u5404\u4f4d\u8bf7\u8ba4\u771f\u9762\u5bf9\u5427\uff01","title":"4.3 \u57f9\u517b\u4e2a\u4eba\u5174\u8da3\u7231\u597d\u3002"},{"location":"chapter_8/6_jixiaobaogao/#_4","text":"SRE \u5de5\u7a0b\u5e08\u7684\u4ef7\u503c\u5c31\u662f\u4e3a\u4e1a\u52a1\u63d0\u5347\u6548\u7387\u3001\u964d\u4f4e\u6210\u672c\u3001\u63d0\u5347\u7a33\u5b9a\u6027, \u5fc5\u987b\u8981\u4ece\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\u8fdb\u884c\u603b\u7ed3. \u4ece 0 \u5230 1, \u505a\u4e86 XXXX, \u4ea7\u751f\u4e86\u591a\u5c11\u591a\u5c11\u4ef7\u503c. \u4ece 1 \u5230 N, \u505a\u4e86 XXXX, \u4ea7\u751f\u4e86\u591a\u5c11\u591a\u5c11\u4ef7\u503c. \u89e3\u51b3 XXXX \u91cd\u5927\u9690\u60a3, \u63d0\u5347\u4e86\u7a33\u5b9a\u6027.","title":"\u4e09 \u7ee9\u6548\u5185\u5bb9\u7684\u6765\u6e90"},{"location":"chapter_8/6_jixiaobaogao/#_5","text":"\u6bcf\u534a\u5e74\u662f\u4e00\u4e2a\u8003\u6838\u5468\u671f, \u4f46\u5e73\u65f6\u5c31\u8981\u6709\u610f\u8bc6\u603b\u7ed3\u81ea\u5df1\u7684\u534a\u5e74\u7ee9\u6548\uff0c\u800c\u4e0d\u662f\u534a\u5e74\u5230\u4e86(PM \u901a\u77e5\u4e86\u7ee9\u6548\u62a5\u544a\u63d0\u4ea4\u65e5\u671f)\u518d\u68b3\u7406. \u56de\u987e\u91cd\u70b9\u5de5\u4f5c\u6848\u4f8b\u65f6, \u5206\u4e3a \u80cc\u666f \u3001 \u6210\u679c \u3001 \u4e2a\u4eba\u4e3b\u8981\u5de5\u4f5c 3 \u4e2a\u90e8\u5206\u8bba\u8ff0. \u6210\u679c\u90e8\u5206\u4e00\u5b9a\u8981\u5f62\u6210\u91cf\u5316\u6307\u6807, \u6ce8\u610f \u56fe\u80dc\u8868\u3001\u8868\u80dc\u6587 \u3001 \u4e00\u56fe\u80dc\u5343\u8a00 . \u591a\u7528\u4ee5\u4e0b\u5173\u952e\u8bed\u53e5\uff1a xxxx \u65b9\u6848\u8bbe\u8ba1\u548c\u5b9e\u73b0(\u6bd4\u5982 XXX \u4ea7\u54c1\u9632 DDOS \u65b9\u6848\u7684\u8bbe\u8ba1\u548c\u5b9e\u73b0) \u4ece 0 \uff5e 1 \uff0c\u4ece 1 \uff5e N\uff0c\u4f18\u5316\u548c\u6539\u8fdb\u73b0\u6709\u6d41\u7a0b\u3002\u63d0\u5347\u4e86\u6548\u7387\uff0c\u964d\u4f4e\u4e86\u6210\u672c\uff0c\u63d0\u5347\u4e86\u7a33\u5b9a\u6027\u3002\u89e3\u51b3\u4e86\u91cd\u5927\u9690\u60a3. \u91cf\u5316\u6307\u6807\u5f62\u5bb9\u8bcd: \u9ad8\u4f4e\u3001\u5feb\u6162\u3001\u957f\u77ed\u3001\u901a\u7528\u3001\u987a\u7545\u3001\u5f3a\u5f31 ...... \u6307\u6807: \u6210\u719f\u5ea6\u3001\u6210\u529f\u7387\u3001\u901a\u8fc7\u7387\u3001\u8986\u76d6\u7387 ...... \u6307\u5bfc\u65b0\u4eba\u5b8c\u6210 xxxx","title":"\u56db \u6ce8\u610f\u4e8b\u9879"},{"location":"chapter_8/6_jixiaobaogao/#_6","text":"","title":"\u4e94 \u5982\u4f55\u8fdb\u884c\u7ee9\u6548\u8003\u6838"},{"location":"chapter_8/6_jixiaobaogao/#_7","text":"\u5982\u679c\u521a\u597d\u8dd1\u5230\u4e86, \u90a3\u4e48\u7ee9\u6548\u7ed3\u679c\u6574\u4f53\u4e0a\u5c31\u662f \u7b26\u5408\u9884\u671f \u5982\u679c\u8d85\u51fa\u4e86, \u90a3\u4e48\u7ee9\u6548\u7ed3\u679c\u6574\u4f53\u4e0a\u5c31\u662f \u8d85\u8d8a\u9884\u671f \u5982\u679c\u6ca1\u6709\u8dd1\u5230, \u90a3\u4e48\u7ee9\u6548\u7ed3\u679c\u6574\u4f53\u4e0a\u5c31\u662f \u4e0d\u7b26\u5408\u9884\u671f","title":"\u603b\u4f53\u6765\u8bf4\u5c31\u662f\u53c2\u8003\u957f\u8dd1\u8fd0\u52a8, \u4ee5\u534a\u5e74\u4e3a\u671f\u9650, \u770b\u662f\u5426\u8dd1\u5230\u76ee\u6807\u7ebf."},{"location":"chapter_8/6_jixiaobaogao/#_8","text":"SRE \u5de5\u7a0b\u5e08\u7684\u7ee9\u6548\u5185\u5bb9\u5206\u4e3a 3 \u5927\u5757: \u4e1a\u52a1 \u3001 \u5de5\u7a0b\u5316 \u3001 \u57fa\u7840 \u4e1a\u52a1\u90e8\u5206 , \u603b\u4f53\u6765\u8bf4\u5c31\u662f\u7ed9\u624b\u4e0a\u8fd0\u7ef4\u7684\u4e1a\u52a1\uff0c\u505a\u51fa\u4e00\u4e9b\u4f18\u5316\u3001\u786e\u4fdd\u670d\u52a1\u597d\u4e1a\u52a1. \u6bd4\u5982 \u5b9e\u73b0\u81ea\u52a8\u5316\u6269\u7f29\u5bb9 \u3001 \u5b8c\u6210\u5927\u89c4\u6a21\u6d3b\u52a8\u4e0a\u7ebf\u652f\u6301 \u7b49. \u53e6\u4e00\u79cd\u5206\u6cd5\u5c31\u662f \u65e5\u5e38\u7a33\u5b9a\u6027 \u548c \u91cd\u4fdd\u7a33\u5b9a\u6027 \u5de5\u7a0b\u5316 , \u4e3b\u8981\u662f\u6307 \u591a\u4e2a\u9879\u76ee\u901a\u7528\u7684\u8fd0\u7ef4\u5de5\u5177 \u7684\u5f00\u53d1\u3001\u7ef4\u62a4\u3001\u8fed\u4ee3\u7b49\u76ee\u6807. \u57fa\u7840 , \u662f SRE \u5c97\u4f4d\u7684\u4e00\u4e9b\u57fa\u7840\u6307\u6807\u548c\u4e00\u4e9b\u8f6f\u7d20\u8d28\u65b9\u9762\u7684\u76ee\u6807. \u5176\u4e2d\u57fa\u7840\u6307\u6807\u6700\u6700\u91cd\u8981\u7684\u662f \u6bcf\u534a\u5e74\u90fd\u662f0\u6545\u969c\u8fd0\u7ef4 , \u8f6f\u7d20\u8d28\u65b9\u9762\u5305\u542b\u4e86\u4e00\u4e9b\u6c99\u9f99\u5206\u4eab\u3001\u65b0\u4eba\u6307\u5bfc\u7b49\u76ee\u6807.","title":"\u7ee9\u6548\u7684\u5185\u5bb9"},{"location":"chapter_8/6_jixiaobaogao/#_9","text":"\u603b\u4f53\u5c31\u662f STAR \u539f\u5219, \u4f46\u662f\u5206 2 \u4e2a\u7248\u672c, \u7075\u6d3b\u8fd0\u7528","title":"\u516d \u5982\u4f55\u8fdb\u884c\u8ff0\u804c"},{"location":"chapter_8/6_jixiaobaogao/#1-1-okr","text":"STAR \u539f\u5219 \u5904\u5883\uff08situation\uff09 \u5728\u4ec0\u4e48\u6837\u7684\u73af\u5883\u4e0b \u4efb\u52a1(task) \u63a5\u5230\u4e86\u4ec0\u4e48\u6837\u7684\u4efb\u52a1 \u884c\u52a8(action) \u7136\u540e\u5177\u4f53\u662f\u600e\u4e48\u843d\u5730\u7684 \u7ed3\u679c(result) \u62ff\u5230\u4e86\u4ec0\u4e48\u7ed3\u679c","title":"1 \u7248\u672c 1, \u66f4\u52a0\u504f\u5411\u4e8e\u5148\u5bf9\u9f50 OKR"},{"location":"chapter_8/6_jixiaobaogao/#2-2-or","text":"","title":"2 \u7248\u672c 2, \u66f4\u52a0\u504f\u5411\u4e8e\u5177\u4f53\u4e00\u7ebf\u4e8b\u52a1/\u4e2a\u4eba or \u5c0f\u56e2\u961f\u7279\u6709\u6f02\u4eae\u4ea7\u51fa"},{"location":"chapter_8/7_xiangshangguanli/","text":"\u6838\u5fc316\u4e2a\u5b57 \u9891\u7e41\u6c9f\u901a\u3001\u53ca\u65f6\u53cd\u9988\u3001\u63a7\u5236\u9884\u671f\u3001\u4e89\u53d6\u8d44\u6e90 \u4e00 \u6307\u5bfc\u539f\u5219 \u5b66\u4f1a\u53cc\u5411\u6c9f\u901a, \u9886\u5bfc\u5e03\u7f6e\u4efb\u52a1\u7684\u65f6\u5019\uff0c\u8981\u8be6\u7ec6\u4e86\u89e3\u4efb\u52a1\u7684\u524d\u56e0\u540e\u679c\u3001\u8f7b\u91cd\u7f13\u6025\u3001\u9886\u5bfc\u7684\u9884\u671f\uff0c\u5b8c\u6210\u4efb\u52a1\u7684\u8fc7\u7a0b\u4e2d\u8981\u53ca\u65f6\u6c9f\u901a\u548c\u53cd\u9988\uff0c\u505a\u597d\u9884\u671f\u63a7\u5236. \u4e0d\u65ad\u6269\u5927\u81ea\u5df1\u7684\u62a4\u57ce\u6cb3, \u660e\u786e\u81ea\u5df1\u7684\u6838\u5fc3\u80fd\u529b\u662f\u4ec0\u4e48? \u6bd4\u5982\u662f\u6280\u672f\u80fd\u529b\u3001\u4ea7\u54c1\u80fd\u529b\u6216\u4e1a\u52a1\u80fd\u529b. \u6301\u7eed\u53bb\u6269\u5927\u548c\u6df1\u6316\u81ea\u5df1\u7684\u62a4\u57ce\u6cb3. \u6d1e\u5bdf\u9886\u5bfc\u7684KPI, \u5e2e\u52a9\u4ed6\u89e3\u51b3\u96be\u9898. \u4e86\u89e3\u9886\u5bfc\u7684\u559c\u597d\u548c\u5174\u8da3. \u5e76\u4e0d\u662f\u4e3a\u4e86\u6e9c\u987b\u62cd\u9a6c. \u4e86\u89e3\u4e00\u4e2a\u4eba\u7684\u559c\u597d\u548c\u5174\u8da3\u4e4b\u540e\u80fd\u591f\u627e\u5230\u4e00\u6761\u66f4\u597d\u7684\u6c9f\u901a\u65b9\u5f0f.","title":"\u7b2c\u4e03\u7bc7 \u5982\u4f55\u5411\u4e0a\u7ba1\u7406"},{"location":"chapter_8/7_xiangshangguanli/#16","text":"\u9891\u7e41\u6c9f\u901a\u3001\u53ca\u65f6\u53cd\u9988\u3001\u63a7\u5236\u9884\u671f\u3001\u4e89\u53d6\u8d44\u6e90","title":"\u6838\u5fc316\u4e2a\u5b57"},{"location":"chapter_8/7_xiangshangguanli/#_1","text":"\u5b66\u4f1a\u53cc\u5411\u6c9f\u901a, \u9886\u5bfc\u5e03\u7f6e\u4efb\u52a1\u7684\u65f6\u5019\uff0c\u8981\u8be6\u7ec6\u4e86\u89e3\u4efb\u52a1\u7684\u524d\u56e0\u540e\u679c\u3001\u8f7b\u91cd\u7f13\u6025\u3001\u9886\u5bfc\u7684\u9884\u671f\uff0c\u5b8c\u6210\u4efb\u52a1\u7684\u8fc7\u7a0b\u4e2d\u8981\u53ca\u65f6\u6c9f\u901a\u548c\u53cd\u9988\uff0c\u505a\u597d\u9884\u671f\u63a7\u5236. \u4e0d\u65ad\u6269\u5927\u81ea\u5df1\u7684\u62a4\u57ce\u6cb3, \u660e\u786e\u81ea\u5df1\u7684\u6838\u5fc3\u80fd\u529b\u662f\u4ec0\u4e48? \u6bd4\u5982\u662f\u6280\u672f\u80fd\u529b\u3001\u4ea7\u54c1\u80fd\u529b\u6216\u4e1a\u52a1\u80fd\u529b. \u6301\u7eed\u53bb\u6269\u5927\u548c\u6df1\u6316\u81ea\u5df1\u7684\u62a4\u57ce\u6cb3. \u6d1e\u5bdf\u9886\u5bfc\u7684KPI, \u5e2e\u52a9\u4ed6\u89e3\u51b3\u96be\u9898. \u4e86\u89e3\u9886\u5bfc\u7684\u559c\u597d\u548c\u5174\u8da3. \u5e76\u4e0d\u662f\u4e3a\u4e86\u6e9c\u987b\u62cd\u9a6c. \u4e86\u89e3\u4e00\u4e2a\u4eba\u7684\u559c\u597d\u548c\u5174\u8da3\u4e4b\u540e\u80fd\u591f\u627e\u5230\u4e00\u6761\u66f4\u597d\u7684\u6c9f\u901a\u65b9\u5f0f.","title":"\u4e00 \u6307\u5bfc\u539f\u5219"},{"location":"chapter_8/9_speaking_skills/","text":"\u6982\u8ff0 \u5de5\u4f5c\u5e74\u9650\u8d8a\u957f, \u6c9f\u901a\u80fd\u529b\u8d8a\u53d1\u91cd\u8981,\u6f14\u8bb2\u6280\u5de7\u8d8a\u53d1\u6709\u7528 \u603b\u4f53\u6765\u8bf4, \u6bcf\u6b21\u6f14\u8bb2\u9700\u8981\u5f7b\u5e95\u60f3\u6e05\u695a\u81ea\u5df1\u7684\u76ee\u7684, \u8981\u6709\u4e00\u4e2a\u5e95\u5c42\u903b\u8f91(\u6709\u4e00\u4e2a\u603b\u5206\u603b\u8fd9\u6837\u7684\u6846\u67b6\u6216\u8005\u533a\u5206\u9635\u8425\u7684\u903b\u8f91), \u5177\u4f53\u7ec6\u8282\u5c31\u662f\u4e34\u573a\u53d1\u6325. \u53ef\u4ee5\u5148\u7528\u4e0d\u662f\u4ec0\u4e48, \u800c\u662f\u4ec0\u4e48, \u6765\u52a0\u6df1\u53d7\u4f17\u7684\u5370\u8c61. \u540c\u65f6\u4e5f\u62c9\u957f\u4e86\u6f14\u8bb2\u65f6\u95f4. \u53ef\u4ee5\u52a0\u4e00\u4e9b\u7f13\u548c\u62db\u6570, \u6bd4\u5982\u6211\u559d\u4e2a\u6c34, \u6bd4\u5982\u6211\u4eec\u7a0d\u7b49 1 \u5206\u949f. \u63d0\u95ee\u9898\u65f6, \u5148\u95ee\u5bf9\u65b9\u7684\u76ee\u6807, \u4f60\u7406\u60f3\u7684\u60c5\u51b5\u662f\u600e\u4e48\u6837\u7684. \u4e00\u822c\u7684\u5957\u8def\u8fd8\u662f\u8bf4\u5148\u5bf9\u9f50\u76ee\u6807, \u76d8\u70b9\u6e05\u695a\u73b0\u72b6, \u7136\u540e\u5927\u5bb6\u5bf9\u9f50 KR(Key Result), KR \u4e00\u5b9a\u662f\u67d0\u4e2a(\u591a\u4e2a)\u6307\u6807\u6570\u5b57\u5316\u7684\u7ed3\u679c. \u591a\u7528\u7ed9\u7684\u8868\u8fbe\u65b9\u5f0f, \u591a\u8bb2\u8fd9\u4e2a\u4e8b\u60c5\u80fd\u7ed9\u53d7\u4f17\u5e26\u6765\u4ec0\u4e48\u6536\u76ca. \u63d0\u524d\u51c6\u5907\u8db3\u591f\u7684\u7406\u8bba\u77e5\u8bc6, \u7406\u8bba\u8981\u4e00\u5957\u4e00\u5957\u7684, \u591a\u5f15\u7528\u9886\u5bfc\u89c2\u70b9\u3001\u540d\u4eba\u540d\u8a00 \u9053 \u4e00\u5207\u5206\u8bba\u70b9\uff0c\u90fd\u662f\u5728\u4e3a\u4e3b\u9898\u670d\u52a1 20 \u5b57\u771f\u8a00\uff1a \u4e00\u542c\u5c31\u80fd\u61c2\u3001\u4ece\u6765\u6ca1\u60f3\u5230\u3001\u518d\u4e5f\u5fd8\u4e0d\u4e86\u3001\u7528\u4e86\u771f\u6709\u6548 \u672f 1 \u597d\u7684\u70b9 \u591a\u4f7f\u7528\u4e13\u4e1a\u672f\u8bed \u4f7f\u7528\u56e0\u679c\u5173\u7cfb\u68b3\u7406 \uff0c\u6bd4\u5982 \u90a3\u4e48\uff0c\u95ee\u9898\u6765\u4e86 \u6240\u6709\u7684\u5c0f\u70b9\uff0c\u90fd\u662f\u4e3a\u6f14\u8bb2\u4e3b\u9898\u670d\u52a1\u7684 \u771f\u6b63\u597d\u7684\u5206\u4eab\uff0c\u4e00\u5b9a\u662f\u865a\u5b9e\u7ed3\u5408\u7684\u3002\u65e2\u6709\u5b9e\u5b9e\u5728\u5728\u7684\u65b9\u6cd5\u3001\u6b65\u9aa4\uff0c\u8ba9\u4eba\u8bfb\u4e86\u4e4b\u540e\u5177\u5907\u5f88\u5f3a\u7684\u843d\u5730\u6027\uff0c\u540c\u65f6\u53c8\u6709\u63d0\u70bc\u548c\u601d\u8003\uff0c\u6709\u601d\u7ef4\u7684\u5347\u534e\u548c\u6307\u5f15. 2 \u8981\u907f\u514d\u7684\u70b9 \u907f\u514d\u5728\u6f14\u8bb2\u8fc7\u7a0b\u4e2d\uff0c\u9996\u5148\u5f15\u51fa\u4e00\u4e9b\u7f3a\u70b9\uff0c \u8c08\u4f18\u70b9\u5c31\u8c08\u4f18\u70b9\uff0c\u5c31\u9ad8\u5927\u4e0a\u4e00\u4e9b \u907f\u514d\u7ed3\u679c\u4e0e\u884c\u52a8\u4e4b\u95f4\u7684\u5173\u8054\u5ea6\u4e0d\u5927, \u5bfc\u81f4\u4e00\u4e2a\u4f18\u79c0\u7684\u7ed3\u679c\u4e4b\u95f4\u5fc5\u5b9a\u662f\u6709\u5f88\u591a\u539f\u56e0\u7684\uff0c\u6211\u4eec\u8981\u627e\u51fa\u6700\u6838\u5fc3\u6700\u5173\u952e\u7684\u90a3\u4e2a\u539f\u56e0\u6765\u5206\u4eab\uff0c\u53bb\u9664\u548c\u7ed3\u679c\u65e0\u5173\u7684\u539f\u56e0 \u907f\u514d\u9898\u76ee\u592a\u5927\u3001\u592a\u5bbd\u6cdb\uff0c\u597d\u7684\u4e3b\u9898\u4e00\u5b9a\u662f \u7a84\u800c\u6df1 \u7684 \u907f\u514d\u592a\u865a\u6216\u8005\u592a\u5b9e\uff0c\u771f\u6b63\u597d\u7684\u5206\u4eab\u4e00\u5b9a\u662f\u865a\u865a\u5b9e\u5b9e\uff0c\u865a\u5b9e\u7ed3\u5408\u7684 3 \u5de5\u4f5c\u8ff0\u804c\u548c\u5de5\u4f5c\u603b\u7ed3 \uff08\u4e00\uff09 \u57fa\u672c\u89c4\u8303 \u628a\u81ea\u5df1\u7684\u5de5\u4f5c\u8fdb\u884c\u5206\u7c7b\u3001\u5f52\u7eb3 \u56de\u7b54\u6e05\u695a\u81ea\u5df1\u505a\u4e86\u4ec0\u4e48\uff0c\u4ea7\u751f\u54ea\u4e9b\u4ef7\u503c\uff0c\u590d\u76d8\u54ea\u4e9b\u4e0d\u8db3\uff0c\u672a\u6765\u4ec0\u4e48\u89c4\u5212 \u7528\u6570\u636e\u56fe\u8868\u5f62\u5f0f\u5c55\u793a\u81ea\u5df1\u505a\u7684\u5de5\u4f5c\u7684\u4ef7\u503c\uff0c\u5f3a\u70c8\u7684\u7ed3\u679c\u5bfc\u5411\u548c\u7528\u6237\u5bfc\u5411 \u8981\u9075\u5b88 \u56e0\u4e3a\u2026\u6240\u4ee5\u6211\u505a\u4e86\u2026 \u7684\u539f\u5219\uff0c\u4f53\u73b0\u6211\u7684\u4ef7\u503c. \u7b80\u800c\u8a00\u4e4b: \u505a\u4e8b\u6709\u4f9d\u636e\u3001\u505a\u5b8c\u6709\u8bc1\u636e . \uff08\u4e8c\uff09 \u8003\u8651\u770b\u7684\u4eba\u7684\u611f\u53d7\uff08\u8003\u8651\u770b\u7684\u4eba\u624b\u4e0a\u62ff\u7740\u4ec0\u4e48\u6807\u5c3a\uff09 \u9886\u5bfc\u662f\u7528\u6807\u5c3a\u8861\u91cf\u4e0b\u5c5e\u7684\uff0c\u6211\u4eec\u8981\u4e3b\u52a8\u7167\u7740\u6807\u5c3a\u53bb\u8d34\u8fd1 \u8981\u770b\u7684\u4eba\u770b\u4e0b\u6765\u89c9\u5f97\u5f88\u7b80\u5355\u660e\u4e86\uff0c\u4e0d\u8d39\u52b2 (\u4e09)\u8868\u8fbe\u65b9\u5f0f \u8bf4\u539f\u56e0\uff1a \u662f\u67d0\u4e2a\u6838\u5fc3\u6a21\u578b\u7684\u67d0\u4e2a\u5c5e\u6027\u4e0d\u884c\u3002\u6bd4\u5982\u6210\u719f\u5ea6\u4e0d\u591f\u3002\u6bd4\u5982\u5468\u671f\u592a\u957f\u3002 \u8bf4\u8fc7\u7a0b\uff1a \u67d0\u4e2a\u6838\u5fc3\u6a21\u578b\uff0c\u5148\u8bc4\u5ba1\u3002\u7136\u540e\u653e\u5165\u8fed\u4ee3\u4e2d\u3002\u7136\u540e\u505a\u4e0a\u7ebf\u3002 \u8bf4\u6210\u679c\uff1a \u4e00\u5b9a\u662f\u67d0\u4e2a\u9879\u76ee\u6216\u8005\u6838\u5fc3\u6a21\u578b\uff0c\u4ed6\u7684\u67d0\u4e2a\u5c5e\u6027\u5f97\u5230\u4e86\u4ec0\u4e48\u4f18\u5316 (\u56db) \u6a21\u578b\u7684\u5404\u79cd\u5c5e\u6027 \u9879\u76ee \u5468\u671f(\u592a\u957f/\u592a\u77ed) \u4ea7\u51fa(\u662f\u54ea\u4e9b\u65b9\u9762,\u54ea\u4e9b\u70b9) \u6a21\u578b/\u80fd\u529b \u6210\u719f\u5ea6 \u719f\u7ec3\u5ea6 \u8fbe\u5230\u4e86\u4e00\u4e2a\u6bd4\u8f83\u9ad8\u7684\u7a0b\u5ea6 \u7ed3\u8bba \u53ef\u4fe1\u5ea6 \u751f\u547d\u4e2d\u7684\u4e00\u5207\u4e8b\u60c5\uff0c\u672c\u8d28\u4e0a\u90fd\u662f\u4e00\u4e2a\u9879\u76ee\u3002 \u5728\u9879\u76ee\u7ba1\u7406\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u5173\u952e\u8981\u7d20\uff0c\u5c31\u662f\uff1a \u5faa\u73af \u3002 \u65e2\u7136\u662f\u6709\u5934\u6709\u5c3e\u7684\u4e8b\u60c5 \uff0c\u5c31\u8981\uff1a\u201c\u7528\u5faa\u73af\u89e3\u51b3\u95ee\u9898\u201d\u3002 \u5faa\u73af\u8fc7\u7a0b\u5206\u4e3a 5 \u4e2a\u6b65\u9aa4\uff1a \u542f\u52a8\u3001\u8ba1\u5212\u3001\u6267\u884c\u3001\u63a7\u5236\u3001\u6536\u5c3e \u3002 1\uff09\u4f55\u8c13\u542f\u52a8\uff1f \u8fd9\u4e8b\u513f\u503c\u4e0d\u503c\u5f97\u5e72\uff1f\u6211\u4eec\u8981\u4e0d\u8981\u5e72\uff1f\u9700\u8981\u54ea\u4e9b\u4eba\uff1f\u9700\u8981\u591a\u5c11\u94b1\uff1f 2\uff09\u4f55\u8c13\u8ba1\u5212\uff1f \u8fd9\u4e8b\u600e\u4e48\u5e72\uff1f\u6295\u5165\u591a\u5c11\u65f6\u95f4\uff1f\u8c01\u8d1f\u8d23\u4ec0\u4e48\u4e8b\uff1f\u4ec0\u4e48\u65f6\u95f4\u8282\u70b9\u5b8c\u6210\u4ec0\u4e48\u7ed3\u679c\uff1f\u8d44\u91d1\u600e\u4e48\u5206\u914d\uff1f\u8d44\u6e90\u600e\u4e48\u8c03\u914d\uff1f\u65f6\u95f4\u600e\u4e48\u5206\u914d\uff1f\u4efb\u52a1\u600e\u4e48\u5206\u914d\uff1f 3\uff09\u4f55\u8c13\u6267\u884c\uff1f \u65e2\u7136\u5206\u914d\u4e86\uff0c\u90a3\u5c31\u6309\u7167\u516c\u53f8\u6218\u7565\u5b8c\u5584\u9ad8\u6548\u6267\u884c\u4e0b\u53bb\uff0c\u4e0d\u8981\u773c\u9ad8\u624b\u4f4e\u3002 4\uff09\u4f55\u8c13\u63a7\u5236\uff1f \u8c01\u5728\u8d1f\u8d23\u8fd9\u4ef6\u4e8b\u60c5\uff1f\u505a\u7684\u8fdb\u5c55\u5982\u4f55\uff1f\u8fbe\u6210\u76ee\u6807\u4e86\u5417\uff1f\u6309\u7167\u8fdb\u5ea6\u8ddf\u8fdb\u4e86\u5417\uff1f 5\uff09\u4f55\u8c13\u6536\u5c3e\uff1f \u65e0\u8bba\u6210\u8d25\u4e0e\u5426\uff0c\u6211\u4eec\u6765\u590d\u76d8\u4e00\u4e0b\u6709\u4ec0\u4e48\u7ecf\u9a8c\uff1f\u4ec0\u4e48\u6559\u8bad\uff1f \u8fd9 5 \u4e2a\u6b65\u9aa4\uff0c\u6784\u6210\u5b8c\u6574\u5faa\u73af\uff0c\u4e14\u7f3a\u4e00\u4e0d\u53ef\u3002 \u51e1\u4e8b\u6709\u4ea4\u4ee3\u7684\u80cc\u540e\uff0c\u662f\u4e00\u7ec4\u4e25\u5bc6\u6267\u884c\u7684\u6b65\u9aa4\u3002 4 \u6f14\u8bb2\u5e95\u5c42\u903b\u8f91 \u4e07\u80fd\u5957\u8def \u7b2c\u4e00\u4e2a\u516c\u5f0f\uff1a\u611f\u8c22+\u56de\u987e+\u613f\u666f\uff1b \u7b2c\u4e8c\u4e2a\u516c\u5f0f\uff1a\u8fc7\u53bb+\u73b0\u5728+\u672a\u6765\uff1b \u7b2c\u4e09\u4e2a\u516c\u5f0f\uff1a\u611f\u8c22+\u611f\u53d7+\u613f\u666f\uff1b \u4e3e\u4e2a\u4f8b\u5b50\u6bd4\u5982\u6211\u5165\u804c, \u65b0\u4eba\u4ecb\u7ecd: \u8fc7\u53bb\u6211\u662f\u4e00\u540d XXX, \u73b0\u5728\u6211\u662f\u4e00\u540d\u7236\u4eb2, \u5c06\u6765\u5e0c\u671b\u6210\u4e3a\u5927\u5bb6\u7684\u597d\u670b\u53cb. \u4e07\u80fd\u6a21\u5f0f \u4e00\u4e8c\u4e09\u6a21\u5f0f\uff0c\u5927\u9053\u81f3\u7b80\uff0c\u4e07\u6cd5\u5f52\u4e00\u3002\u6700\u7b80\u5355\u4f46\u6700\u6709\u6548\u7684\u601d\u7ef4\u6a21\u5f0f\u662f\u51e1\u4e8b\u8bb2\u4e2a\u4e00\u4e8c\u4e09\u51fa\u6765\u3002 \u8001\u677f\u95ee\u4f60\uff0c\u8fd9\u4e2a\u9879\u76ee\u600e\u4e48\u641e\uff1f\u4f60\u8bf4\uff1a\u4e00\u4e8c\u4e09\u3002 \u9886\u5bfc\u95ee\u4f60\uff0c\u8fd9\u4e2a\u6d3b\u52a8\u5982\u4f55\u8fdb\u884c\uff1f\u4f60\u8bf4\uff1a\u4e00\u4e8c\u4e09\u3002 \u4e3b\u6301\u4eba\u95ee\u4f60\u6709\u4ec0\u4e48\u4f53\u4f1a\uff0c\u4f60\u8bf4\uff1a\u4e00\u4e8c\u4e09\u3002 \u8bb2\u4e00\u4e2a\u6982\u5ff5: \u5148\u8bf4\u8fd9\u4e2a\u6982\u5ff5\u4e0d\u662f\u4ec0\u4e48, \u800c\u662f\u4ec0\u4e48. \u4ee5\u524d\u6709\u4ec0\u4e48\u4e0d\u597d, \u73b0\u5728\u6709\u4ec0\u4e48\u597d.","title":"\u7b2c\u4e5d\u7bc7 \u6c9f\u901a\u80fd\u529b\u548c\u6f14\u8bb2\u6280\u5de7"},{"location":"chapter_8/9_speaking_skills/#_1","text":"\u5de5\u4f5c\u5e74\u9650\u8d8a\u957f, \u6c9f\u901a\u80fd\u529b\u8d8a\u53d1\u91cd\u8981,\u6f14\u8bb2\u6280\u5de7\u8d8a\u53d1\u6709\u7528 \u603b\u4f53\u6765\u8bf4, \u6bcf\u6b21\u6f14\u8bb2\u9700\u8981\u5f7b\u5e95\u60f3\u6e05\u695a\u81ea\u5df1\u7684\u76ee\u7684, \u8981\u6709\u4e00\u4e2a\u5e95\u5c42\u903b\u8f91(\u6709\u4e00\u4e2a\u603b\u5206\u603b\u8fd9\u6837\u7684\u6846\u67b6\u6216\u8005\u533a\u5206\u9635\u8425\u7684\u903b\u8f91), \u5177\u4f53\u7ec6\u8282\u5c31\u662f\u4e34\u573a\u53d1\u6325. \u53ef\u4ee5\u5148\u7528\u4e0d\u662f\u4ec0\u4e48, \u800c\u662f\u4ec0\u4e48, \u6765\u52a0\u6df1\u53d7\u4f17\u7684\u5370\u8c61. \u540c\u65f6\u4e5f\u62c9\u957f\u4e86\u6f14\u8bb2\u65f6\u95f4. \u53ef\u4ee5\u52a0\u4e00\u4e9b\u7f13\u548c\u62db\u6570, \u6bd4\u5982\u6211\u559d\u4e2a\u6c34, \u6bd4\u5982\u6211\u4eec\u7a0d\u7b49 1 \u5206\u949f. \u63d0\u95ee\u9898\u65f6, \u5148\u95ee\u5bf9\u65b9\u7684\u76ee\u6807, \u4f60\u7406\u60f3\u7684\u60c5\u51b5\u662f\u600e\u4e48\u6837\u7684. \u4e00\u822c\u7684\u5957\u8def\u8fd8\u662f\u8bf4\u5148\u5bf9\u9f50\u76ee\u6807, \u76d8\u70b9\u6e05\u695a\u73b0\u72b6, \u7136\u540e\u5927\u5bb6\u5bf9\u9f50 KR(Key Result), KR \u4e00\u5b9a\u662f\u67d0\u4e2a(\u591a\u4e2a)\u6307\u6807\u6570\u5b57\u5316\u7684\u7ed3\u679c. \u591a\u7528\u7ed9\u7684\u8868\u8fbe\u65b9\u5f0f, \u591a\u8bb2\u8fd9\u4e2a\u4e8b\u60c5\u80fd\u7ed9\u53d7\u4f17\u5e26\u6765\u4ec0\u4e48\u6536\u76ca. \u63d0\u524d\u51c6\u5907\u8db3\u591f\u7684\u7406\u8bba\u77e5\u8bc6, \u7406\u8bba\u8981\u4e00\u5957\u4e00\u5957\u7684, \u591a\u5f15\u7528\u9886\u5bfc\u89c2\u70b9\u3001\u540d\u4eba\u540d\u8a00","title":"\u6982\u8ff0"},{"location":"chapter_8/9_speaking_skills/#_2","text":"\u4e00\u5207\u5206\u8bba\u70b9\uff0c\u90fd\u662f\u5728\u4e3a\u4e3b\u9898\u670d\u52a1 20 \u5b57\u771f\u8a00\uff1a \u4e00\u542c\u5c31\u80fd\u61c2\u3001\u4ece\u6765\u6ca1\u60f3\u5230\u3001\u518d\u4e5f\u5fd8\u4e0d\u4e86\u3001\u7528\u4e86\u771f\u6709\u6548","title":"\u9053"},{"location":"chapter_8/9_speaking_skills/#_3","text":"","title":"\u672f"},{"location":"chapter_8/9_speaking_skills/#1","text":"\u591a\u4f7f\u7528\u4e13\u4e1a\u672f\u8bed \u4f7f\u7528\u56e0\u679c\u5173\u7cfb\u68b3\u7406 \uff0c\u6bd4\u5982 \u90a3\u4e48\uff0c\u95ee\u9898\u6765\u4e86 \u6240\u6709\u7684\u5c0f\u70b9\uff0c\u90fd\u662f\u4e3a\u6f14\u8bb2\u4e3b\u9898\u670d\u52a1\u7684 \u771f\u6b63\u597d\u7684\u5206\u4eab\uff0c\u4e00\u5b9a\u662f\u865a\u5b9e\u7ed3\u5408\u7684\u3002\u65e2\u6709\u5b9e\u5b9e\u5728\u5728\u7684\u65b9\u6cd5\u3001\u6b65\u9aa4\uff0c\u8ba9\u4eba\u8bfb\u4e86\u4e4b\u540e\u5177\u5907\u5f88\u5f3a\u7684\u843d\u5730\u6027\uff0c\u540c\u65f6\u53c8\u6709\u63d0\u70bc\u548c\u601d\u8003\uff0c\u6709\u601d\u7ef4\u7684\u5347\u534e\u548c\u6307\u5f15.","title":"1 \u597d\u7684\u70b9"},{"location":"chapter_8/9_speaking_skills/#2","text":"\u907f\u514d\u5728\u6f14\u8bb2\u8fc7\u7a0b\u4e2d\uff0c\u9996\u5148\u5f15\u51fa\u4e00\u4e9b\u7f3a\u70b9\uff0c \u8c08\u4f18\u70b9\u5c31\u8c08\u4f18\u70b9\uff0c\u5c31\u9ad8\u5927\u4e0a\u4e00\u4e9b \u907f\u514d\u7ed3\u679c\u4e0e\u884c\u52a8\u4e4b\u95f4\u7684\u5173\u8054\u5ea6\u4e0d\u5927, \u5bfc\u81f4\u4e00\u4e2a\u4f18\u79c0\u7684\u7ed3\u679c\u4e4b\u95f4\u5fc5\u5b9a\u662f\u6709\u5f88\u591a\u539f\u56e0\u7684\uff0c\u6211\u4eec\u8981\u627e\u51fa\u6700\u6838\u5fc3\u6700\u5173\u952e\u7684\u90a3\u4e2a\u539f\u56e0\u6765\u5206\u4eab\uff0c\u53bb\u9664\u548c\u7ed3\u679c\u65e0\u5173\u7684\u539f\u56e0 \u907f\u514d\u9898\u76ee\u592a\u5927\u3001\u592a\u5bbd\u6cdb\uff0c\u597d\u7684\u4e3b\u9898\u4e00\u5b9a\u662f \u7a84\u800c\u6df1 \u7684 \u907f\u514d\u592a\u865a\u6216\u8005\u592a\u5b9e\uff0c\u771f\u6b63\u597d\u7684\u5206\u4eab\u4e00\u5b9a\u662f\u865a\u865a\u5b9e\u5b9e\uff0c\u865a\u5b9e\u7ed3\u5408\u7684","title":"2 \u8981\u907f\u514d\u7684\u70b9"},{"location":"chapter_8/9_speaking_skills/#3","text":"","title":"3 \u5de5\u4f5c\u8ff0\u804c\u548c\u5de5\u4f5c\u603b\u7ed3"},{"location":"chapter_8/9_speaking_skills/#_4","text":"\u628a\u81ea\u5df1\u7684\u5de5\u4f5c\u8fdb\u884c\u5206\u7c7b\u3001\u5f52\u7eb3 \u56de\u7b54\u6e05\u695a\u81ea\u5df1\u505a\u4e86\u4ec0\u4e48\uff0c\u4ea7\u751f\u54ea\u4e9b\u4ef7\u503c\uff0c\u590d\u76d8\u54ea\u4e9b\u4e0d\u8db3\uff0c\u672a\u6765\u4ec0\u4e48\u89c4\u5212 \u7528\u6570\u636e\u56fe\u8868\u5f62\u5f0f\u5c55\u793a\u81ea\u5df1\u505a\u7684\u5de5\u4f5c\u7684\u4ef7\u503c\uff0c\u5f3a\u70c8\u7684\u7ed3\u679c\u5bfc\u5411\u548c\u7528\u6237\u5bfc\u5411 \u8981\u9075\u5b88 \u56e0\u4e3a\u2026\u6240\u4ee5\u6211\u505a\u4e86\u2026 \u7684\u539f\u5219\uff0c\u4f53\u73b0\u6211\u7684\u4ef7\u503c. \u7b80\u800c\u8a00\u4e4b: \u505a\u4e8b\u6709\u4f9d\u636e\u3001\u505a\u5b8c\u6709\u8bc1\u636e .","title":"\uff08\u4e00\uff09 \u57fa\u672c\u89c4\u8303"},{"location":"chapter_8/9_speaking_skills/#_5","text":"\u9886\u5bfc\u662f\u7528\u6807\u5c3a\u8861\u91cf\u4e0b\u5c5e\u7684\uff0c\u6211\u4eec\u8981\u4e3b\u52a8\u7167\u7740\u6807\u5c3a\u53bb\u8d34\u8fd1 \u8981\u770b\u7684\u4eba\u770b\u4e0b\u6765\u89c9\u5f97\u5f88\u7b80\u5355\u660e\u4e86\uff0c\u4e0d\u8d39\u52b2","title":"\uff08\u4e8c\uff09 \u8003\u8651\u770b\u7684\u4eba\u7684\u611f\u53d7\uff08\u8003\u8651\u770b\u7684\u4eba\u624b\u4e0a\u62ff\u7740\u4ec0\u4e48\u6807\u5c3a\uff09"},{"location":"chapter_8/9_speaking_skills/#_6","text":"\u8bf4\u539f\u56e0\uff1a \u662f\u67d0\u4e2a\u6838\u5fc3\u6a21\u578b\u7684\u67d0\u4e2a\u5c5e\u6027\u4e0d\u884c\u3002\u6bd4\u5982\u6210\u719f\u5ea6\u4e0d\u591f\u3002\u6bd4\u5982\u5468\u671f\u592a\u957f\u3002 \u8bf4\u8fc7\u7a0b\uff1a \u67d0\u4e2a\u6838\u5fc3\u6a21\u578b\uff0c\u5148\u8bc4\u5ba1\u3002\u7136\u540e\u653e\u5165\u8fed\u4ee3\u4e2d\u3002\u7136\u540e\u505a\u4e0a\u7ebf\u3002 \u8bf4\u6210\u679c\uff1a \u4e00\u5b9a\u662f\u67d0\u4e2a\u9879\u76ee\u6216\u8005\u6838\u5fc3\u6a21\u578b\uff0c\u4ed6\u7684\u67d0\u4e2a\u5c5e\u6027\u5f97\u5230\u4e86\u4ec0\u4e48\u4f18\u5316","title":"(\u4e09)\u8868\u8fbe\u65b9\u5f0f"},{"location":"chapter_8/9_speaking_skills/#_7","text":"\u9879\u76ee \u5468\u671f(\u592a\u957f/\u592a\u77ed) \u4ea7\u51fa(\u662f\u54ea\u4e9b\u65b9\u9762,\u54ea\u4e9b\u70b9) \u6a21\u578b/\u80fd\u529b \u6210\u719f\u5ea6 \u719f\u7ec3\u5ea6 \u8fbe\u5230\u4e86\u4e00\u4e2a\u6bd4\u8f83\u9ad8\u7684\u7a0b\u5ea6 \u7ed3\u8bba \u53ef\u4fe1\u5ea6","title":"(\u56db) \u6a21\u578b\u7684\u5404\u79cd\u5c5e\u6027"},{"location":"chapter_8/9_speaking_skills/#_8","text":"\u5728\u9879\u76ee\u7ba1\u7406\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u5173\u952e\u8981\u7d20\uff0c\u5c31\u662f\uff1a \u5faa\u73af \u3002 \u65e2\u7136\u662f\u6709\u5934\u6709\u5c3e\u7684\u4e8b\u60c5 \uff0c\u5c31\u8981\uff1a\u201c\u7528\u5faa\u73af\u89e3\u51b3\u95ee\u9898\u201d\u3002 \u5faa\u73af\u8fc7\u7a0b\u5206\u4e3a 5 \u4e2a\u6b65\u9aa4\uff1a \u542f\u52a8\u3001\u8ba1\u5212\u3001\u6267\u884c\u3001\u63a7\u5236\u3001\u6536\u5c3e \u3002 1\uff09\u4f55\u8c13\u542f\u52a8\uff1f \u8fd9\u4e8b\u513f\u503c\u4e0d\u503c\u5f97\u5e72\uff1f\u6211\u4eec\u8981\u4e0d\u8981\u5e72\uff1f\u9700\u8981\u54ea\u4e9b\u4eba\uff1f\u9700\u8981\u591a\u5c11\u94b1\uff1f 2\uff09\u4f55\u8c13\u8ba1\u5212\uff1f \u8fd9\u4e8b\u600e\u4e48\u5e72\uff1f\u6295\u5165\u591a\u5c11\u65f6\u95f4\uff1f\u8c01\u8d1f\u8d23\u4ec0\u4e48\u4e8b\uff1f\u4ec0\u4e48\u65f6\u95f4\u8282\u70b9\u5b8c\u6210\u4ec0\u4e48\u7ed3\u679c\uff1f\u8d44\u91d1\u600e\u4e48\u5206\u914d\uff1f\u8d44\u6e90\u600e\u4e48\u8c03\u914d\uff1f\u65f6\u95f4\u600e\u4e48\u5206\u914d\uff1f\u4efb\u52a1\u600e\u4e48\u5206\u914d\uff1f 3\uff09\u4f55\u8c13\u6267\u884c\uff1f \u65e2\u7136\u5206\u914d\u4e86\uff0c\u90a3\u5c31\u6309\u7167\u516c\u53f8\u6218\u7565\u5b8c\u5584\u9ad8\u6548\u6267\u884c\u4e0b\u53bb\uff0c\u4e0d\u8981\u773c\u9ad8\u624b\u4f4e\u3002 4\uff09\u4f55\u8c13\u63a7\u5236\uff1f \u8c01\u5728\u8d1f\u8d23\u8fd9\u4ef6\u4e8b\u60c5\uff1f\u505a\u7684\u8fdb\u5c55\u5982\u4f55\uff1f\u8fbe\u6210\u76ee\u6807\u4e86\u5417\uff1f\u6309\u7167\u8fdb\u5ea6\u8ddf\u8fdb\u4e86\u5417\uff1f 5\uff09\u4f55\u8c13\u6536\u5c3e\uff1f \u65e0\u8bba\u6210\u8d25\u4e0e\u5426\uff0c\u6211\u4eec\u6765\u590d\u76d8\u4e00\u4e0b\u6709\u4ec0\u4e48\u7ecf\u9a8c\uff1f\u4ec0\u4e48\u6559\u8bad\uff1f \u8fd9 5 \u4e2a\u6b65\u9aa4\uff0c\u6784\u6210\u5b8c\u6574\u5faa\u73af\uff0c\u4e14\u7f3a\u4e00\u4e0d\u53ef\u3002 \u51e1\u4e8b\u6709\u4ea4\u4ee3\u7684\u80cc\u540e\uff0c\u662f\u4e00\u7ec4\u4e25\u5bc6\u6267\u884c\u7684\u6b65\u9aa4\u3002","title":"\u751f\u547d\u4e2d\u7684\u4e00\u5207\u4e8b\u60c5\uff0c\u672c\u8d28\u4e0a\u90fd\u662f\u4e00\u4e2a\u9879\u76ee\u3002"},{"location":"chapter_8/9_speaking_skills/#4","text":"","title":"4 \u6f14\u8bb2\u5e95\u5c42\u903b\u8f91"},{"location":"chapter_8/9_speaking_skills/#_9","text":"\u7b2c\u4e00\u4e2a\u516c\u5f0f\uff1a\u611f\u8c22+\u56de\u987e+\u613f\u666f\uff1b \u7b2c\u4e8c\u4e2a\u516c\u5f0f\uff1a\u8fc7\u53bb+\u73b0\u5728+\u672a\u6765\uff1b \u7b2c\u4e09\u4e2a\u516c\u5f0f\uff1a\u611f\u8c22+\u611f\u53d7+\u613f\u666f\uff1b \u4e3e\u4e2a\u4f8b\u5b50\u6bd4\u5982\u6211\u5165\u804c, \u65b0\u4eba\u4ecb\u7ecd: \u8fc7\u53bb\u6211\u662f\u4e00\u540d XXX, \u73b0\u5728\u6211\u662f\u4e00\u540d\u7236\u4eb2, \u5c06\u6765\u5e0c\u671b\u6210\u4e3a\u5927\u5bb6\u7684\u597d\u670b\u53cb.","title":"\u4e07\u80fd\u5957\u8def"},{"location":"chapter_8/9_speaking_skills/#_10","text":"\u4e00\u4e8c\u4e09\u6a21\u5f0f\uff0c\u5927\u9053\u81f3\u7b80\uff0c\u4e07\u6cd5\u5f52\u4e00\u3002\u6700\u7b80\u5355\u4f46\u6700\u6709\u6548\u7684\u601d\u7ef4\u6a21\u5f0f\u662f\u51e1\u4e8b\u8bb2\u4e2a\u4e00\u4e8c\u4e09\u51fa\u6765\u3002 \u8001\u677f\u95ee\u4f60\uff0c\u8fd9\u4e2a\u9879\u76ee\u600e\u4e48\u641e\uff1f\u4f60\u8bf4\uff1a\u4e00\u4e8c\u4e09\u3002 \u9886\u5bfc\u95ee\u4f60\uff0c\u8fd9\u4e2a\u6d3b\u52a8\u5982\u4f55\u8fdb\u884c\uff1f\u4f60\u8bf4\uff1a\u4e00\u4e8c\u4e09\u3002 \u4e3b\u6301\u4eba\u95ee\u4f60\u6709\u4ec0\u4e48\u4f53\u4f1a\uff0c\u4f60\u8bf4\uff1a\u4e00\u4e8c\u4e09\u3002 \u8bb2\u4e00\u4e2a\u6982\u5ff5: \u5148\u8bf4\u8fd9\u4e2a\u6982\u5ff5\u4e0d\u662f\u4ec0\u4e48, \u800c\u662f\u4ec0\u4e48. \u4ee5\u524d\u6709\u4ec0\u4e48\u4e0d\u597d, \u73b0\u5728\u6709\u4ec0\u4e48\u597d.","title":"\u4e07\u80fd\u6a21\u5f0f"},{"location":"chapter_9/1_suanfa/","text":"\u7b97\u6cd5\u7b80\u4ecb \u7b97\u6cd5\u662f\u6307\u89e3\u9898\u65b9\u6848\u7684\u51c6\u786e\u800c\u5b8c\u6574\u7684\u63cf\u8ff0\uff0c\u662f\u4e00\u7cfb\u5217\u89e3\u51b3\u95ee\u9898\u7684\u6e05\u6670\u6307\u4ee4\uff0c\u7b97\u6cd5\u4ee3\u8868\u7740\u7528\u7cfb\u7edf\u7684\u65b9\u6cd5\u63cf\u8ff0\u89e3\u51b3\u95ee\u9898\u7684\u7b56\u7565\u673a\u5236\u3002\u5bf9\u4e8e\u540c\u4e00\u4e2a\u95ee\u9898\u7684\u89e3\u51b3\uff0c\u53ef\u80fd\u4f1a\u5b58\u5728\u7740\u4e0d\u540c\u7684\u7b97\u6cd5\uff0c\u4e3a\u4e86\u8861\u91cf\u4e00\u4e2a\u7b97\u6cd5\u7684\u4f18\u52a3\uff0c\u63d0\u51fa\u4e86 \u7a7a\u95f4\u590d\u6742\u5ea6 \u4e0e \u65f6\u95f4\u590d\u6742\u5ea6 \u8fd9\u4e24\u4e2a\u6982\u5ff5\u3002","title":"\u7b2c\u4e00\u7bc7 \u7b97\u6cd5\u603b\u7ed3"},{"location":"chapter_9/1_suanfa/#_1","text":"\u7b97\u6cd5\u662f\u6307\u89e3\u9898\u65b9\u6848\u7684\u51c6\u786e\u800c\u5b8c\u6574\u7684\u63cf\u8ff0\uff0c\u662f\u4e00\u7cfb\u5217\u89e3\u51b3\u95ee\u9898\u7684\u6e05\u6670\u6307\u4ee4\uff0c\u7b97\u6cd5\u4ee3\u8868\u7740\u7528\u7cfb\u7edf\u7684\u65b9\u6cd5\u63cf\u8ff0\u89e3\u51b3\u95ee\u9898\u7684\u7b56\u7565\u673a\u5236\u3002\u5bf9\u4e8e\u540c\u4e00\u4e2a\u95ee\u9898\u7684\u89e3\u51b3\uff0c\u53ef\u80fd\u4f1a\u5b58\u5728\u7740\u4e0d\u540c\u7684\u7b97\u6cd5\uff0c\u4e3a\u4e86\u8861\u91cf\u4e00\u4e2a\u7b97\u6cd5\u7684\u4f18\u52a3\uff0c\u63d0\u51fa\u4e86 \u7a7a\u95f4\u590d\u6742\u5ea6 \u4e0e \u65f6\u95f4\u590d\u6742\u5ea6 \u8fd9\u4e24\u4e2a\u6982\u5ff5\u3002","title":"\u7b97\u6cd5\u7b80\u4ecb"},{"location":"chapter_9/1_suanfa/#_2","text":"","title":""},{"location":"chapter_9/2_data_structure/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3\u91cd\u70b9\u6570\u636e\u7ed3\u6784 \u4e00 \u94fe\u8868 \u4e8c \u961f\u5217 \u4e09 \u6620\u5c04 \u56db \u7ea2\u9ed1\u6811 1 \u4ec0\u4e48\u662f\u4e8c\u53c9\u6811 \u6240\u6709\u8282\u70b9\u90fd\u6709 0\u30011\u30012 \u4e2a\u5b50\u8282\u70b9 2 \u4ec0\u4e48\u662f \u641c\u7d22\u4e8c\u53c9\u6811 \u8282\u70b9\u5de6\u4fa7\u5b50\u8282\u70b9\u7684\u503c\u90fd\u5c0f\u4e8e\u8282\u70b9 \u8282\u70b9\u53f3\u4fa7\u5b50\u8282\u70b9\u7684\u503c\u90fd\u5927\u4e8e\u8282\u70b9 \u6240\u6709\u5b50\u6811\u4e5f\u662f\u641c\u7d22\u4e8c\u53c9\u6811 3 \u4ec0\u4e48\u662f \u81ea\u5e73\u8861\u641c\u7d22\u4e8c\u53c9\u6811 \u5728 \u641c\u7d22\u4e8c\u53c9\u6811 \u57fa\u7840\u4e0a, \u52a0\u4e0a\u6240\u6709\u53f6\u5b50\u8282\u70b9\u7684\u6df1\u5ea6\u5dee\u4e0d\u8d85\u8fc7 1 4 \u4ec0\u4e48\u662f \u7ea2\u9ed1\u6811 \u7ea2\u9ed1\u6811 \u662f\u4e00\u79cd \u81ea\u5e73\u8861\u641c\u7d22\u4e8c\u53c9\u6811 \u6240\u6709\u8282\u70b9\u8981\u4e48\u662f\u7ea2\u8272, \u8981\u4e48\u662f\u9ed1\u8272 \u6240\u6709 \u53f6\u5b50\u8282\u70b9 \u90fd\u662f\u9ed1\u8272 \u53f6\u5b50\u8282\u70b9 \u4e0d\u5305\u542b\u6570\u636e \u6240\u6709 \u975e\u53f6\u5b50\u8282\u70b9 \u5fc5\u987b\u5305\u542b 2 \u4e2a\u5b50\u8282\u70b9 \u5982\u679c\u4e00\u4e2a\u8282\u70b9\u662f\u7ea2\u8272, \u90a3\u4e48\u5b83\u7684\u5b50\u8282\u70b9\u5fc5\u987b\u662f\u9ed1\u8272, \u4e24\u4e2a\u7ea2\u8272\u8282\u70b9\u4e0d\u80fd\u76f4\u63a5\u76f8\u8fde \u4ece\u4e00\u4e2a\u8282\u70b9\u5230\u8be5\u8282\u70b9\u7684\u5b50\u5b59\u8282\u70b9\u7684\u6240\u6709\u8def\u5f84\u4e0a\u5305\u542b\u76f8\u540c\u6570\u76ee\u7684\u9ed1\u8272\u8282\u70b9 \u4e94 \u5168\u5c40\u6570\u7ec4 \u516d per CPU \u53d8\u91cf","title":"\u7b2c\u4e8c\u7bc7 \u6570\u636e\u7ed3\u6784\u603b\u7ed3"},{"location":"chapter_9/2_data_structure/#_1","text":"\u672c\u7bc7\u603b\u7ed3\u91cd\u70b9\u6570\u636e\u7ed3\u6784","title":"\u6982\u8ff0"},{"location":"chapter_9/2_data_structure/#_2","text":"","title":"\u4e00 \u94fe\u8868"},{"location":"chapter_9/2_data_structure/#_3","text":"","title":"\u4e8c \u961f\u5217"},{"location":"chapter_9/2_data_structure/#_4","text":"","title":"\u4e09 \u6620\u5c04"},{"location":"chapter_9/2_data_structure/#_5","text":"","title":"\u56db \u7ea2\u9ed1\u6811"},{"location":"chapter_9/2_data_structure/#1","text":"\u6240\u6709\u8282\u70b9\u90fd\u6709 0\u30011\u30012 \u4e2a\u5b50\u8282\u70b9","title":"1 \u4ec0\u4e48\u662f\u4e8c\u53c9\u6811"},{"location":"chapter_9/2_data_structure/#2","text":"\u8282\u70b9\u5de6\u4fa7\u5b50\u8282\u70b9\u7684\u503c\u90fd\u5c0f\u4e8e\u8282\u70b9 \u8282\u70b9\u53f3\u4fa7\u5b50\u8282\u70b9\u7684\u503c\u90fd\u5927\u4e8e\u8282\u70b9 \u6240\u6709\u5b50\u6811\u4e5f\u662f\u641c\u7d22\u4e8c\u53c9\u6811","title":"2 \u4ec0\u4e48\u662f\u641c\u7d22\u4e8c\u53c9\u6811"},{"location":"chapter_9/2_data_structure/#3","text":"\u5728 \u641c\u7d22\u4e8c\u53c9\u6811 \u57fa\u7840\u4e0a, \u52a0\u4e0a\u6240\u6709\u53f6\u5b50\u8282\u70b9\u7684\u6df1\u5ea6\u5dee\u4e0d\u8d85\u8fc7 1","title":"3 \u4ec0\u4e48\u662f\u81ea\u5e73\u8861\u641c\u7d22\u4e8c\u53c9\u6811"},{"location":"chapter_9/2_data_structure/#4","text":"\u7ea2\u9ed1\u6811 \u662f\u4e00\u79cd \u81ea\u5e73\u8861\u641c\u7d22\u4e8c\u53c9\u6811 \u6240\u6709\u8282\u70b9\u8981\u4e48\u662f\u7ea2\u8272, \u8981\u4e48\u662f\u9ed1\u8272 \u6240\u6709 \u53f6\u5b50\u8282\u70b9 \u90fd\u662f\u9ed1\u8272 \u53f6\u5b50\u8282\u70b9 \u4e0d\u5305\u542b\u6570\u636e \u6240\u6709 \u975e\u53f6\u5b50\u8282\u70b9 \u5fc5\u987b\u5305\u542b 2 \u4e2a\u5b50\u8282\u70b9 \u5982\u679c\u4e00\u4e2a\u8282\u70b9\u662f\u7ea2\u8272, \u90a3\u4e48\u5b83\u7684\u5b50\u8282\u70b9\u5fc5\u987b\u662f\u9ed1\u8272, \u4e24\u4e2a\u7ea2\u8272\u8282\u70b9\u4e0d\u80fd\u76f4\u63a5\u76f8\u8fde \u4ece\u4e00\u4e2a\u8282\u70b9\u5230\u8be5\u8282\u70b9\u7684\u5b50\u5b59\u8282\u70b9\u7684\u6240\u6709\u8def\u5f84\u4e0a\u5305\u542b\u76f8\u540c\u6570\u76ee\u7684\u9ed1\u8272\u8282\u70b9","title":"4 \u4ec0\u4e48\u662f\u7ea2\u9ed1\u6811"},{"location":"chapter_9/2_data_structure/#_6","text":"","title":"\u4e94 \u5168\u5c40\u6570\u7ec4"},{"location":"chapter_9/2_data_structure/#per-cpu","text":"","title":"\u516d per CPU \u53d8\u91cf"},{"location":"chapter_9/3_c_lang/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3 C \u8bed\u8a00\u7f16\u7a0b\u4e2d\u7684\u4e00\u4e9b\u7279\u70b9\u548c\u6280\u5de7 \u5176\u4e00 c \u8bed\u8a00\u5934\u6587\u4ef6\u4e3a\u4ec0\u4e48\u8981\u52a0#ifndef #define #endif \u65b9\u6cd5\uff1a\u4f8b\u5982\u8981\u7f16\u5199\u5934\u6587\u4ef6 test.h \u5728\u5934\u6587\u4ef6\u5f00\u5934\u5199\u4e0a\u4e24\u884c\uff1a #ifndef _TEST_H #define _TEST_H //\u4e00\u822c\u662f\u6587\u4ef6\u540d\u7684\u5927\u5199 \u5934\u6587\u4ef6\u7ed3\u5c3e\u5199\u4e0a\u4e00\u884c\uff1a #endif \u8fd9\u6837\u4e00\u4e2a\u5de5\u7a0b\u6587\u4ef6\u91cc\u540c\u65f6\u5305\u542b\u4e24\u4e2a test.h \u65f6\uff0c\u5c31\u4e0d\u4f1a\u51fa\u73b0\u91cd\u5b9a\u4e49\u7684\u9519\u8bef\u4e86\u3002 \u5206\u6790\uff1a\u5f53\u7b2c\u4e00\u6b21\u5305\u542b test.h \u65f6\uff0c\u7531\u4e8e\u6ca1\u6709\u5b9a\u4e49 _TEST_H \uff0c\u6761\u4ef6\u4e3a\u771f\uff0c\u8fd9\u6837\u5c31\u4f1a\u5305\u542b\uff08\u6267\u884c\uff09 #ifndef _TEST_H \u548c #endif \u4e4b\u95f4\u7684\u4ee3\u7801\uff0c\u5f53\u7b2c\u4e8c\u6b21\u5305\u542b test.h \u65f6\u524d\u9762\u4e00\u6b21\u5df2\u7ecf\u5b9a\u4e49\u4e86 _TEST_H \uff0c\u6761\u4ef6\u4e3a\u5047\uff0c #ifndef _TEST_H \u548c #endif \u4e4b\u95f4\u7684\u4ee3\u7801\u4e5f\u5c31\u4e0d\u4f1a\u518d\u6b21\u88ab\u5305\u542b\uff0c\u8fd9\u6837\u5c31\u907f\u514d\u4e86\u91cd\u5b9a\u4e49\u4e86\u3002 C \u8bed\u8a00\u7ed3\u6784\u4f53\u4e4b\u70b9\u8fd0\u7b97\u7b26( . )\u548c\u7bad\u5934\u8fd0\u7b97\u7b26( -\uff1e )\u7684\u533a\u522b \u76f8\u540c\u70b9\uff1a\u4e24\u8005\u90fd\u662f\u4e8c\u5143\u64cd\u4f5c\u7b26\uff0c\u800c\u4e14\u53f3\u8fb9\u7684 \u64cd\u4f5c\u6570 \u90fd\u662f\u6210\u5458\u7684\u540d\u79f0\u3002 \u4e0d\u540c\u70b9\uff1a \u70b9\u8fd0\u7b97\u7b26 ( . )\u7684\u5de6\u8fb9\u64cd\u4f5c\u6570\u662f\u4e00\u4e2a\u7ed3\u679c\u4e3a\u7ed3\u6784\u7684\u8868\u8fbe\u5f0f\uff1b \u7bad\u5934\u8fd0\u7b97\u7b26 ( -> )\u7684\u5de6\u8fb9\u7684\u64cd\u4f5c\u6570\u662f\u4e00\u4e2a\u6307\u5411\u7ed3\u6784\u4f53\u7684\u6307\u9488\u3002 typedef struct // \u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\uff1aDATA { char key[10]; // \u7ed3\u6784\u4f53\u6210\u5458\uff1akey char name[20]; // \u7ed3\u6784\u4f53\u6210\u5458\uff1aname int age; // \u7ed3\u6784\u4f53\u6210\u5458\uff1aage }DATA; DATA data; // \u58f0\u660e\u4e00\u4e2a\u7ed3\u6784\u4f53\u53d8\u91cf DATA *pdata; // \u58f0\u660e\u4e00\u4e2a\u6307\u5411\u7ed3\u6784\u4f53\u7684\u6307\u9488 // \u8bbf\u95ee\u6570\u636e\u64cd\u4f5c\u5982\u4e0b\uff1a data.age = 24; // \u7ed3\u6784\u4f53\u53d8\u91cf\u901a\u8fc7\u70b9\u8fd0\u7b97\u7b26( . )\u8bbf\u95ee pdata->age = 24; // \u6307\u5411\u7ed3\u6784\u4f53\u7684\u6307\u9488\u901a\u8fc7\u7bad\u5934\u8fd0\u7b97\u7b26( -> )\u8bbf\u95ee \u94fe\u8868\u57fa\u672c\u64cd\u4f5c \u4e00\u6587\u641e\u61c2 Linux \u5185\u6838\u94fe\u8868\uff08\u6df1\u5ea6\u5206\u6790\uff09 Linux \u5185\u6838\u94fe\u8868\u2014\u2014\u770b\u8fd9\u4e00\u7bc7\u6587\u7ae0\u5c31\u591f\u4e86 \u6838\u5fc3\u6a21\u578b: struct list_head \u548c \u5bf9\u5e94 \u5bbf\u4e3b\u7ed3\u6784 \u5e38\u7528\u64cd\u4f5c LIST_HEAD \u5165\u53c2\u6570\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6548\u679c\u662f\u751f\u6210\u4e00\u4e2a\u65b0\u7684 struct list_head \uff0c\u5b83\u5c01\u88c5\u4e86\u4e00\u5c42 LIST_HEAD_INIT, \u7136\u540e\u662f\u628a\u8be5 list_head \u7684\u524d\u9a71\u548c\u540e\u7ee7\u90fd\u6307\u5411\u81ea\u5df1\u3001\u5e76\u8fd4\u56de LIST_HEAD_INIT \u5165\u53c2\u6570\u662f\u4e00\u4e2a struct list_head \u7ed3\u6784\uff0c\u6548\u679c\u662f\u628a\u8be5 list_head \u7684\u524d\u9a71\u548c\u540e\u7ee7\u90fd\u6307\u5411\u81ea\u5df1\u3001\u5e76\u8fd4\u56de INIT_LIST_HEAD \u4f20\u5165 struct list_head \u6307\u9488\uff0c\u7136\u540e\u628a\u8be5 list_head \u7684\u524d\u9a71\u548c\u540e\u7ee7\u90fd\u6307\u5411\u81ea\u5df1 \u5df2\u6709\u5b57\u7b26\u4e32\uff0c\u751f\u6210\u4e00\u4e2a\u65b0\u7684 struct list_head\uff0c\u5e76\u4e14\u524d\u9a71\u548c\u540e\u7ee7\u90fd\u6307\u5411\u81ea\u5df1\uff0c\u5219\u4f7f\u7528 LIST_HEAD \u5df2\u6709 struct list_head\uff0c\u4f46\u662f\u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u60f3\u8981\u628a\u524d\u9a71\u548c\u540e\u7ee7\u90fd\u6307\u5411\u81ea\u5df1\uff0c\u5219\u4f7f\u7528 LIST_HEAD_INIT \u5df2\u6709 struct list_head \u6307\u9488\uff0c\u4f46\u662f\u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u60f3\u8981\u628a\u524d\u9a71\u548c\u540e\u7ee7\u90fd\u6307\u5411\u81ea\u5df1\uff0c\u5219\u4f7f\u7528 INIT_LIST_HEAD \u5185\u6838\u7ed3\u6784\u4f53\u4e2d\u4f7f\u7528 struct list_head \u6709\u4e24\u79cd\u7528\u6cd5 1 \u8868\u793a\u5bbf\u4e3b\u7ed3\u6784\u81ea\u5df1\u7684\u94fe\u8868\uff0c\u5c06\u6240\u6709\u5bbf\u4e3b\u7ed3\u6784\u81ea\u5df1\u4e32\u8054\u5728\u4e00\u4e2a\u94fe\u8868\u4e2d\u3002\u6bd4\u5982: struct super_block { struct list_head s_list; //\u8fd9\u4e2as_list\u4ee3\u8868\u7684\u94fe\u8868\u5c31\u662f\u628a\u6240\u6709super_block\u7ed3\u6784\u7ed9\u4e32\u8054\u8d77\u6765 ...\u7701\u7565... } 1.1 \u5f53\u7136\u628a\u81ea\u5df1\u4e32\u8054\u8d77\u6765\u6210\u4e3a\u94fe\u8868\u8fd8\u6709\u5176\u4ed6\u505a\u6cd5\uff0c\u6bd4\u5982\u5305\u542b\u672c\u8eab\u7ed3\u6784\u7684 next \u548c prev \u6307\u9488 \u6bd4\u5982 vm_area_struct struct vm_area_struct { /* The first cache line has the info for VMA tree walking. */ unsigned long vm_start; /* Our start address within vm_mm. */ unsigned long vm_end; /* The first byte after our end address within vm_mm. */ /* linked list of VM areas per task, sorted by address */ struct vm_area_struct *vm_next, *vm_prev; ...\u7701\u7565... } \u6bd4\u5982 sk_buff struct sk_buff { /* These two members must be first. */ struct sk_buff *next; struct sk_buff *prev; ...\u7701\u7565... } 2 \u67d0\u4e2a\u7ed3\u6784\u4e2d\u5305\u542b\u7684 struct list_head \u53ef\u80fd\u53ea\u662f\u6307\u5411\u67d0\u4e2a\u94fe\u8868\u7684\u94fe\u8868\u5934\uff0c\u800c\u8fd9\u4e2a\u94fe\u8868\u672c\u8eab\u5bf9\u5e94\u7684\u5bbf\u4e3b\u7ed3\u6784\u53ef\u80fd\u662f\u591a\u79cd\u591a\u6837\u7684\uff0c\u5e76\u4e0d\u4e00\u5b9a\u662f\u672c\u7ed3\u6784\u3002 \u6bd4\u5982sock\u5bbf\u4e3b\u7ed3\u6784\u91cc\uff0c\u5b58\u5728\u4e00\u4e2a\u6210\u5458\uff0c\u6307\u5411\u7531task_struct\u7ec4\u6210\u7684\u94fe\u8868\uff0c\u5219sock \u5bbf\u4e3b\u7ed3\u6784\u91cc\u5305\u542bstruct list_head task_list\u6210\u5458\uff0ctask_struct\u5bbf\u4e3b\u7ed3\u6784\u4e5f\u5305\u542bstruct list_head task_list\u6210\u5458 struct napi_struct { struct list_head poll_list; //\u8fd9\u4e2apoll_list\u4ee3\u8868\u7684\u94fe\u8868\u5c31\u662f\u628a\u6240\u6709napi_struct\u7ed3\u6784\u7ed9\u4e32\u8054\u8d77\u6765 ...\u7701\u7565... } struct softnet_data { ...\u7701\u7565... struct list_head poll_list; //\u8fd9\u4e2apoll_list\u4ee3\u8868\u7684\u94fe\u8868\u5c31\u662f\u6307\u7684\u662f\u628a\u6240\u6709napi_struct\u7ed3\u6784\u7ed9\u4e32\u8054\u8d77\u6765\u7684\u94fe\u8868\uff0c\u548c\u5bbf\u4e3b\u7ed3\u6784softnet_data\u662f\u4e0d\u540c\u7684 ...\u7701\u7565... } \u5185\u6838\u53cc\u5411\u94fe\u8868\u4e4b\u4e8c hlist_head \u5185\u6838\u57fa\u7840\u8bbe\u65bd\u2014\u2014hlist_head/hlist_node \u7ed3\u6784\u89e3\u6790 Linux \u5185\u6838 10-list_head \u548c hlist_head \u7684\u7406\u89e3 \u5bf9\u4e8e\u6570\u636e\u7684\u7ba1\u7406\uff0c\u63d0\u4f9b\u4e86 2 \u79cd\u7c7b\u578b\u7684\u53cc\u5411\u94fe\u8868\uff1a\u4e00\u79cd\u662f\u4f7f\u7528 list_head \u7ed3\u6784\u4f53\u6784\u6210\u7684\u73af\u5f62\u53cc\u5411\u94fe\u8868\uff1b\u53e6\u4e00\u79cd\u662f\u4f7f\u7528 hlist_head \u548c hlist_node2 \u4e2a\u7ed3\u6784\u4f53\u6784\u6210\u7684\u5177\u6709\u8868\u5934\u7684\u94fe\u578b\u53cc\u5411\u94fe\u8868\u3002 list_head \u7684\u7ed3\u6784\u4f53\u5982\u4e0b\u6240\u793a\uff1a struct list_head { struct list_head *next, *prev; }; hlist_head \u548c hlist_node \u7684\u7ed3\u6784\u4f53\u5982\u4e0b\u6240\u793a\uff1a struct hlist_head { struct hlist_node *first; }; struct hlist_node { struct hlist_node *next, **pprev; }; \u5b83\u4eec\u7ec4\u6210\u7684\u94fe\u8868\u7ed3\u6784\u5982\u56fe\u6240\u793a\uff1a \u6ce8\u610f\u56fe\u4e0a\u7684\u7bad\u5934\u6307\u5411\uff0c\u5728\uff08a\uff09\u56fe\u4e2d\uff0cnext \u6307\u5411\u4e0b\u4e00\u4e2a list_head \u7ed3\u6784\u7684\u5730\u5740\uff0cprev \u6307\u5411\u524d\u4e00\u4e2a list_head \u7ed3\u6784\u7684\u5730\u5740\u3002\u800c\u5728\uff08b\uff09\u56fe\u4e2d\uff0cnext \u7c7b\u4f3c\uff0c\u6307\u5411\u4e0b\u4e00\u4e2a hlist_node \u7ed3\u6784\u7684\u5730\u5740\uff0c\u800c pprev \u6307\u5411\u524d\u4e00\u4e2a hlist_node \u7684 next \u6307\u9488\u3002 \u5982\u679c\u8bf4 struct list_head \u662f\u5e38\u89c4\u7528\u6cd5\uff0c\u90a3\u4e48 hlist_head \u548c hlist_node \u5219\u4e3b\u8981\u7528\u4e8e\u6563\u5217\u8868\u4e2d. \u4ece\u76ee\u524d\u8ba4\u77e5\u6765\u770b\uff0c\u6563\u5217\u8868\u5c31\u662f\u6570\u7ec4. \u5982\u4e0b\u56fe\u6240\u793a: hash_table \u4e3a\u6563\u5217\u8868\uff08\u6570\u7ec4\uff09\uff0c\u5176\u4e2d\u7684\u5143\u7d20\u7c7b\u578b\u4e3a struct hlist_head\u3002\u4ee5 hlist_head \u4e3a\u94fe\u8868\u5934\u7684\u94fe\u8868\uff0c\u5176\u4e2d\u7684\u8282\u70b9 hash \u503c\u662f\u76f8\u540c\u7684\uff08\u4e5f\u53eb\u51b2\u7a81\uff09\u3002first \u6307\u9488\u6307\u5411\u94fe\u8868\u4e2d\u7684\u8282\u70b9 \u2460\uff0c\u7136\u540e\u8282\u70b9 \u2460 \u7684 pprev \u6307\u9488\u6307\u5411 hlist_head \u4e2d\u7684 first\uff0c\u8282\u70b9 \u2460 \u7684 next \u6307\u9488\u6307\u5411\u8282\u70b9 \u2461\u3002\u4ee5\u6b64\u7c7b\u63a8\u3002 hash_table \u7684\u5217\u8868\u5934\u4ec5\u5b58\u653e\u4e00\u4e2a\u6307\u9488,\u4e5f\u5c31\u662f first \u6307\u9488,\u6307\u5411\u7684\u662f\u5bf9\u5e94\u94fe\u8868\u7684\u5934\u7ed3\u70b9,\u6ca1\u6709 tail \u6307\u9488,\u4e5f\u5c31\u662f\u6307\u5411\u94fe\u8868\u5c3e\u8282\u70b9\u7684\u6307\u9488,\u8fd9\u6837\u7684\u8003\u8651\u662f\u4e3a\u4e86\u8282\u7701\u7a7a\u95f4\u2014\u2014\u5c24\u5176\u5728 hash bucket(\u6570\u7ec4 size)\u5f88\u5927\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u8282\u7701\u4e00\u534a\u7684\u6307\u9488\u7a7a\u95f4\u3002","title":"\u7b2c\u4e09\u7bc7 c\u8bed\u8a00\u603b\u7ed3"},{"location":"chapter_9/3_c_lang/#_1","text":"\u672c\u7bc7\u603b\u7ed3 C \u8bed\u8a00\u7f16\u7a0b\u4e2d\u7684\u4e00\u4e9b\u7279\u70b9\u548c\u6280\u5de7","title":"\u6982\u8ff0"},{"location":"chapter_9/3_c_lang/#c-ifndef-define-endif","text":"\u65b9\u6cd5\uff1a\u4f8b\u5982\u8981\u7f16\u5199\u5934\u6587\u4ef6 test.h \u5728\u5934\u6587\u4ef6\u5f00\u5934\u5199\u4e0a\u4e24\u884c\uff1a #ifndef _TEST_H #define _TEST_H //\u4e00\u822c\u662f\u6587\u4ef6\u540d\u7684\u5927\u5199 \u5934\u6587\u4ef6\u7ed3\u5c3e\u5199\u4e0a\u4e00\u884c\uff1a #endif \u8fd9\u6837\u4e00\u4e2a\u5de5\u7a0b\u6587\u4ef6\u91cc\u540c\u65f6\u5305\u542b\u4e24\u4e2a test.h \u65f6\uff0c\u5c31\u4e0d\u4f1a\u51fa\u73b0\u91cd\u5b9a\u4e49\u7684\u9519\u8bef\u4e86\u3002 \u5206\u6790\uff1a\u5f53\u7b2c\u4e00\u6b21\u5305\u542b test.h \u65f6\uff0c\u7531\u4e8e\u6ca1\u6709\u5b9a\u4e49 _TEST_H \uff0c\u6761\u4ef6\u4e3a\u771f\uff0c\u8fd9\u6837\u5c31\u4f1a\u5305\u542b\uff08\u6267\u884c\uff09 #ifndef _TEST_H \u548c #endif \u4e4b\u95f4\u7684\u4ee3\u7801\uff0c\u5f53\u7b2c\u4e8c\u6b21\u5305\u542b test.h \u65f6\u524d\u9762\u4e00\u6b21\u5df2\u7ecf\u5b9a\u4e49\u4e86 _TEST_H \uff0c\u6761\u4ef6\u4e3a\u5047\uff0c #ifndef _TEST_H \u548c #endif \u4e4b\u95f4\u7684\u4ee3\u7801\u4e5f\u5c31\u4e0d\u4f1a\u518d\u6b21\u88ab\u5305\u542b\uff0c\u8fd9\u6837\u5c31\u907f\u514d\u4e86\u91cd\u5b9a\u4e49\u4e86\u3002","title":"\u5176\u4e00 c \u8bed\u8a00\u5934\u6587\u4ef6\u4e3a\u4ec0\u4e48\u8981\u52a0#ifndef #define #endif"},{"location":"chapter_9/3_c_lang/#c-","text":"\u76f8\u540c\u70b9\uff1a\u4e24\u8005\u90fd\u662f\u4e8c\u5143\u64cd\u4f5c\u7b26\uff0c\u800c\u4e14\u53f3\u8fb9\u7684 \u64cd\u4f5c\u6570 \u90fd\u662f\u6210\u5458\u7684\u540d\u79f0\u3002 \u4e0d\u540c\u70b9\uff1a \u70b9\u8fd0\u7b97\u7b26 ( . )\u7684\u5de6\u8fb9\u64cd\u4f5c\u6570\u662f\u4e00\u4e2a\u7ed3\u679c\u4e3a\u7ed3\u6784\u7684\u8868\u8fbe\u5f0f\uff1b \u7bad\u5934\u8fd0\u7b97\u7b26 ( -> )\u7684\u5de6\u8fb9\u7684\u64cd\u4f5c\u6570\u662f\u4e00\u4e2a\u6307\u5411\u7ed3\u6784\u4f53\u7684\u6307\u9488\u3002 typedef struct // \u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\uff1aDATA { char key[10]; // \u7ed3\u6784\u4f53\u6210\u5458\uff1akey char name[20]; // \u7ed3\u6784\u4f53\u6210\u5458\uff1aname int age; // \u7ed3\u6784\u4f53\u6210\u5458\uff1aage }DATA; DATA data; // \u58f0\u660e\u4e00\u4e2a\u7ed3\u6784\u4f53\u53d8\u91cf DATA *pdata; // \u58f0\u660e\u4e00\u4e2a\u6307\u5411\u7ed3\u6784\u4f53\u7684\u6307\u9488 // \u8bbf\u95ee\u6570\u636e\u64cd\u4f5c\u5982\u4e0b\uff1a data.age = 24; // \u7ed3\u6784\u4f53\u53d8\u91cf\u901a\u8fc7\u70b9\u8fd0\u7b97\u7b26( . )\u8bbf\u95ee pdata->age = 24; // \u6307\u5411\u7ed3\u6784\u4f53\u7684\u6307\u9488\u901a\u8fc7\u7bad\u5934\u8fd0\u7b97\u7b26( -> )\u8bbf\u95ee","title":"C \u8bed\u8a00\u7ed3\u6784\u4f53\u4e4b\u70b9\u8fd0\u7b97\u7b26( . )\u548c\u7bad\u5934\u8fd0\u7b97\u7b26( -\uff1e )\u7684\u533a\u522b"},{"location":"chapter_9/3_c_lang/#_2","text":"\u4e00\u6587\u641e\u61c2 Linux \u5185\u6838\u94fe\u8868\uff08\u6df1\u5ea6\u5206\u6790\uff09 Linux \u5185\u6838\u94fe\u8868\u2014\u2014\u770b\u8fd9\u4e00\u7bc7\u6587\u7ae0\u5c31\u591f\u4e86 \u6838\u5fc3\u6a21\u578b: struct list_head \u548c \u5bf9\u5e94 \u5bbf\u4e3b\u7ed3\u6784","title":"\u94fe\u8868\u57fa\u672c\u64cd\u4f5c"},{"location":"chapter_9/3_c_lang/#_3","text":"LIST_HEAD \u5165\u53c2\u6570\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6548\u679c\u662f\u751f\u6210\u4e00\u4e2a\u65b0\u7684 struct list_head \uff0c\u5b83\u5c01\u88c5\u4e86\u4e00\u5c42 LIST_HEAD_INIT, \u7136\u540e\u662f\u628a\u8be5 list_head \u7684\u524d\u9a71\u548c\u540e\u7ee7\u90fd\u6307\u5411\u81ea\u5df1\u3001\u5e76\u8fd4\u56de LIST_HEAD_INIT \u5165\u53c2\u6570\u662f\u4e00\u4e2a struct list_head \u7ed3\u6784\uff0c\u6548\u679c\u662f\u628a\u8be5 list_head \u7684\u524d\u9a71\u548c\u540e\u7ee7\u90fd\u6307\u5411\u81ea\u5df1\u3001\u5e76\u8fd4\u56de INIT_LIST_HEAD \u4f20\u5165 struct list_head \u6307\u9488\uff0c\u7136\u540e\u628a\u8be5 list_head \u7684\u524d\u9a71\u548c\u540e\u7ee7\u90fd\u6307\u5411\u81ea\u5df1 \u5df2\u6709\u5b57\u7b26\u4e32\uff0c\u751f\u6210\u4e00\u4e2a\u65b0\u7684 struct list_head\uff0c\u5e76\u4e14\u524d\u9a71\u548c\u540e\u7ee7\u90fd\u6307\u5411\u81ea\u5df1\uff0c\u5219\u4f7f\u7528 LIST_HEAD \u5df2\u6709 struct list_head\uff0c\u4f46\u662f\u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u60f3\u8981\u628a\u524d\u9a71\u548c\u540e\u7ee7\u90fd\u6307\u5411\u81ea\u5df1\uff0c\u5219\u4f7f\u7528 LIST_HEAD_INIT \u5df2\u6709 struct list_head \u6307\u9488\uff0c\u4f46\u662f\u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u60f3\u8981\u628a\u524d\u9a71\u548c\u540e\u7ee7\u90fd\u6307\u5411\u81ea\u5df1\uff0c\u5219\u4f7f\u7528 INIT_LIST_HEAD","title":"\u5e38\u7528\u64cd\u4f5c"},{"location":"chapter_9/3_c_lang/#struct-list_head","text":"\u6709\u4e24\u79cd\u7528\u6cd5 1 \u8868\u793a\u5bbf\u4e3b\u7ed3\u6784\u81ea\u5df1\u7684\u94fe\u8868\uff0c\u5c06\u6240\u6709\u5bbf\u4e3b\u7ed3\u6784\u81ea\u5df1\u4e32\u8054\u5728\u4e00\u4e2a\u94fe\u8868\u4e2d\u3002\u6bd4\u5982: struct super_block { struct list_head s_list; //\u8fd9\u4e2as_list\u4ee3\u8868\u7684\u94fe\u8868\u5c31\u662f\u628a\u6240\u6709super_block\u7ed3\u6784\u7ed9\u4e32\u8054\u8d77\u6765 ...\u7701\u7565... } 1.1 \u5f53\u7136\u628a\u81ea\u5df1\u4e32\u8054\u8d77\u6765\u6210\u4e3a\u94fe\u8868\u8fd8\u6709\u5176\u4ed6\u505a\u6cd5\uff0c\u6bd4\u5982\u5305\u542b\u672c\u8eab\u7ed3\u6784\u7684 next \u548c prev \u6307\u9488 \u6bd4\u5982 vm_area_struct struct vm_area_struct { /* The first cache line has the info for VMA tree walking. */ unsigned long vm_start; /* Our start address within vm_mm. */ unsigned long vm_end; /* The first byte after our end address within vm_mm. */ /* linked list of VM areas per task, sorted by address */ struct vm_area_struct *vm_next, *vm_prev; ...\u7701\u7565... } \u6bd4\u5982 sk_buff struct sk_buff { /* These two members must be first. */ struct sk_buff *next; struct sk_buff *prev; ...\u7701\u7565... } 2 \u67d0\u4e2a\u7ed3\u6784\u4e2d\u5305\u542b\u7684 struct list_head \u53ef\u80fd\u53ea\u662f\u6307\u5411\u67d0\u4e2a\u94fe\u8868\u7684\u94fe\u8868\u5934\uff0c\u800c\u8fd9\u4e2a\u94fe\u8868\u672c\u8eab\u5bf9\u5e94\u7684\u5bbf\u4e3b\u7ed3\u6784\u53ef\u80fd\u662f\u591a\u79cd\u591a\u6837\u7684\uff0c\u5e76\u4e0d\u4e00\u5b9a\u662f\u672c\u7ed3\u6784\u3002 \u6bd4\u5982sock\u5bbf\u4e3b\u7ed3\u6784\u91cc\uff0c\u5b58\u5728\u4e00\u4e2a\u6210\u5458\uff0c\u6307\u5411\u7531task_struct\u7ec4\u6210\u7684\u94fe\u8868\uff0c\u5219sock \u5bbf\u4e3b\u7ed3\u6784\u91cc\u5305\u542bstruct list_head task_list\u6210\u5458\uff0ctask_struct\u5bbf\u4e3b\u7ed3\u6784\u4e5f\u5305\u542bstruct list_head task_list\u6210\u5458 struct napi_struct { struct list_head poll_list; //\u8fd9\u4e2apoll_list\u4ee3\u8868\u7684\u94fe\u8868\u5c31\u662f\u628a\u6240\u6709napi_struct\u7ed3\u6784\u7ed9\u4e32\u8054\u8d77\u6765 ...\u7701\u7565... } struct softnet_data { ...\u7701\u7565... struct list_head poll_list; //\u8fd9\u4e2apoll_list\u4ee3\u8868\u7684\u94fe\u8868\u5c31\u662f\u6307\u7684\u662f\u628a\u6240\u6709napi_struct\u7ed3\u6784\u7ed9\u4e32\u8054\u8d77\u6765\u7684\u94fe\u8868\uff0c\u548c\u5bbf\u4e3b\u7ed3\u6784softnet_data\u662f\u4e0d\u540c\u7684 ...\u7701\u7565... }","title":"\u5185\u6838\u7ed3\u6784\u4f53\u4e2d\u4f7f\u7528 struct list_head"},{"location":"chapter_9/3_c_lang/#hlist_head","text":"\u5185\u6838\u57fa\u7840\u8bbe\u65bd\u2014\u2014hlist_head/hlist_node \u7ed3\u6784\u89e3\u6790 Linux \u5185\u6838 10-list_head \u548c hlist_head \u7684\u7406\u89e3 \u5bf9\u4e8e\u6570\u636e\u7684\u7ba1\u7406\uff0c\u63d0\u4f9b\u4e86 2 \u79cd\u7c7b\u578b\u7684\u53cc\u5411\u94fe\u8868\uff1a\u4e00\u79cd\u662f\u4f7f\u7528 list_head \u7ed3\u6784\u4f53\u6784\u6210\u7684\u73af\u5f62\u53cc\u5411\u94fe\u8868\uff1b\u53e6\u4e00\u79cd\u662f\u4f7f\u7528 hlist_head \u548c hlist_node2 \u4e2a\u7ed3\u6784\u4f53\u6784\u6210\u7684\u5177\u6709\u8868\u5934\u7684\u94fe\u578b\u53cc\u5411\u94fe\u8868\u3002 list_head \u7684\u7ed3\u6784\u4f53\u5982\u4e0b\u6240\u793a\uff1a struct list_head { struct list_head *next, *prev; }; hlist_head \u548c hlist_node \u7684\u7ed3\u6784\u4f53\u5982\u4e0b\u6240\u793a\uff1a struct hlist_head { struct hlist_node *first; }; struct hlist_node { struct hlist_node *next, **pprev; }; \u5b83\u4eec\u7ec4\u6210\u7684\u94fe\u8868\u7ed3\u6784\u5982\u56fe\u6240\u793a\uff1a \u6ce8\u610f\u56fe\u4e0a\u7684\u7bad\u5934\u6307\u5411\uff0c\u5728\uff08a\uff09\u56fe\u4e2d\uff0cnext \u6307\u5411\u4e0b\u4e00\u4e2a list_head \u7ed3\u6784\u7684\u5730\u5740\uff0cprev \u6307\u5411\u524d\u4e00\u4e2a list_head \u7ed3\u6784\u7684\u5730\u5740\u3002\u800c\u5728\uff08b\uff09\u56fe\u4e2d\uff0cnext \u7c7b\u4f3c\uff0c\u6307\u5411\u4e0b\u4e00\u4e2a hlist_node \u7ed3\u6784\u7684\u5730\u5740\uff0c\u800c pprev \u6307\u5411\u524d\u4e00\u4e2a hlist_node \u7684 next \u6307\u9488\u3002 \u5982\u679c\u8bf4 struct list_head \u662f\u5e38\u89c4\u7528\u6cd5\uff0c\u90a3\u4e48 hlist_head \u548c hlist_node \u5219\u4e3b\u8981\u7528\u4e8e\u6563\u5217\u8868\u4e2d. \u4ece\u76ee\u524d\u8ba4\u77e5\u6765\u770b\uff0c\u6563\u5217\u8868\u5c31\u662f\u6570\u7ec4. \u5982\u4e0b\u56fe\u6240\u793a: hash_table \u4e3a\u6563\u5217\u8868\uff08\u6570\u7ec4\uff09\uff0c\u5176\u4e2d\u7684\u5143\u7d20\u7c7b\u578b\u4e3a struct hlist_head\u3002\u4ee5 hlist_head \u4e3a\u94fe\u8868\u5934\u7684\u94fe\u8868\uff0c\u5176\u4e2d\u7684\u8282\u70b9 hash \u503c\u662f\u76f8\u540c\u7684\uff08\u4e5f\u53eb\u51b2\u7a81\uff09\u3002first \u6307\u9488\u6307\u5411\u94fe\u8868\u4e2d\u7684\u8282\u70b9 \u2460\uff0c\u7136\u540e\u8282\u70b9 \u2460 \u7684 pprev \u6307\u9488\u6307\u5411 hlist_head \u4e2d\u7684 first\uff0c\u8282\u70b9 \u2460 \u7684 next \u6307\u9488\u6307\u5411\u8282\u70b9 \u2461\u3002\u4ee5\u6b64\u7c7b\u63a8\u3002 hash_table \u7684\u5217\u8868\u5934\u4ec5\u5b58\u653e\u4e00\u4e2a\u6307\u9488,\u4e5f\u5c31\u662f first \u6307\u9488,\u6307\u5411\u7684\u662f\u5bf9\u5e94\u94fe\u8868\u7684\u5934\u7ed3\u70b9,\u6ca1\u6709 tail \u6307\u9488,\u4e5f\u5c31\u662f\u6307\u5411\u94fe\u8868\u5c3e\u8282\u70b9\u7684\u6307\u9488,\u8fd9\u6837\u7684\u8003\u8651\u662f\u4e3a\u4e86\u8282\u7701\u7a7a\u95f4\u2014\u2014\u5c24\u5176\u5728 hash bucket(\u6570\u7ec4 size)\u5f88\u5927\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u8282\u7701\u4e00\u534a\u7684\u6307\u9488\u7a7a\u95f4\u3002","title":"\u5185\u6838\u53cc\u5411\u94fe\u8868\u4e4b\u4e8c hlist_head"},{"location":"chapter_9/4_symbol_table/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3 DYNAMIC SYMBOL TABLE \u548c SYMBOL TABLE \u7684\u4e00\u4e9b\u77e5\u8bc6 vDSO \u673a\u5236\u539f\u7406 vDSO \u662f\u4ec0\u4e48? vDSO \u5168\u79f0\u4e3a virtual dynamic shared object \uff0cdynamic shared object \u8fd9\u4e2a\u540d\u8bcd\u5927\u5bb6\u5e94\u8be5\u6709\u6240\u8033\u95fb\uff0c\u5c31\u662f Linux \u4e0b\u7684\u52a8\u6001\u5e93\u7684\u5168\u79f0\uff0c\u800c virtual \u8868\u660e\uff0c\u8fd9\u4e2a\u52a8\u6001\u5e93\u662f\u901a\u8fc7\u67d0\u79cd\u624b\u6bb5\u865a\u62df\u51fa\u6765\u7684\uff0c\u5e76\u4e0d\u771f\u6b63\u5b58\u5728\u4e8e Linux \u6587\u4ef6\u7cfb\u7edf\u4e2d\u3002 vDSO \u6709\u5565\u597d? \u89e3\u51b3\u4e86\u4ec0\u4e48\u95ee\u9898? \u4f17\u6240\u5468\u77e5\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4e3a\u6211\u4eec\u7ba1\u7406\u786c\u4ef6\u8d44\u6e90\uff0c\u5e76\u4ee5\u7cfb\u7edf\u8c03\u7528\u7684\u65b9\u5f0f\u5bf9\u7528\u6237\u8fdb\u7a0b\u63d0\u4f9b API\uff0c\u4f46\u662f syscall \u5f88\u6162\uff0c\u6d89\u53ca\u9677\u5165\u5185\u6838\u4ee5\u53ca\u4e0a\u4e0b\u6587\u5207\u6362\u3002\u5bf9\u4e8e\u4e00\u4e9b \u9891\u7e41\u8c03\u7528\u7684\u7cfb\u7edf\u8c03\u7528\uff08\u6bd4\u5982\u83b7\u53d6\u5f53\u671f\u7cfb\u7edf\u65f6\u95f4\uff09 \u6765\u8bf4\uff0c\u9700\u8981\u4ee5\u5b89\u5168\u7684\u65b9\u5f0f\u5f00\u653e\u5230\u7528\u6237\u7a7a\u95f4\uff0c\u8ba9\u7528\u6237\u76f4\u63a5\u8bbf\u95ee\u800c\u4e0d\u9700\u8981\u7ecf\u8fc7 syscall , \u4ece\u800c\u6574\u4f53\u63d0\u5347\u6548\u7387. \u7b80\u5355\u6765\u8bf4, \u6bd4\u5982\u5e94\u7528\u7a0b\u5e8f\u9700\u8981 gettimeofday , \u65e0\u9700\u6bcf\u6b21\u90fd\u7ecf\u8fc7 syscall \u8fd9\u4e2a\u865a\u62df\u5e93 linux-vdso.so.1 \u63d0\u4f9b\u4e86\u5fc5\u8981\u7684\u80fd\u529b\uff0c\u5141\u8bb8\u7528\u6237\u7a0b\u5e8f\u901a\u8fc7\u7279\u6b8a\u5904\u7406\u5668\u4e0a\u53ef\u7528\u7684\u66f4\u5feb\u65b9\u6cd5\u6765\u8bbf\u95ee\u5185\u6838\u7a7a\u95f4\u7684\u51fd\u6570. vDSO \u600e\u4e48\u529e \u5b9e\u73b0\u539f\u7406","title":"\u7b2c\u56db\u7bc7 \u7b26\u53f7\u8868\u603b\u7ed3"},{"location":"chapter_9/4_symbol_table/#_1","text":"\u672c\u7bc7\u603b\u7ed3 DYNAMIC SYMBOL TABLE \u548c SYMBOL TABLE \u7684\u4e00\u4e9b\u77e5\u8bc6","title":"\u6982\u8ff0"},{"location":"chapter_9/4_symbol_table/#vdso","text":"","title":"vDSO \u673a\u5236\u539f\u7406"},{"location":"chapter_9/4_symbol_table/#vdso_1","text":"vDSO \u5168\u79f0\u4e3a virtual dynamic shared object \uff0cdynamic shared object \u8fd9\u4e2a\u540d\u8bcd\u5927\u5bb6\u5e94\u8be5\u6709\u6240\u8033\u95fb\uff0c\u5c31\u662f Linux \u4e0b\u7684\u52a8\u6001\u5e93\u7684\u5168\u79f0\uff0c\u800c virtual \u8868\u660e\uff0c\u8fd9\u4e2a\u52a8\u6001\u5e93\u662f\u901a\u8fc7\u67d0\u79cd\u624b\u6bb5\u865a\u62df\u51fa\u6765\u7684\uff0c\u5e76\u4e0d\u771f\u6b63\u5b58\u5728\u4e8e Linux \u6587\u4ef6\u7cfb\u7edf\u4e2d\u3002","title":"vDSO \u662f\u4ec0\u4e48?"},{"location":"chapter_9/4_symbol_table/#vdso_2","text":"\u4f17\u6240\u5468\u77e5\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4e3a\u6211\u4eec\u7ba1\u7406\u786c\u4ef6\u8d44\u6e90\uff0c\u5e76\u4ee5\u7cfb\u7edf\u8c03\u7528\u7684\u65b9\u5f0f\u5bf9\u7528\u6237\u8fdb\u7a0b\u63d0\u4f9b API\uff0c\u4f46\u662f syscall \u5f88\u6162\uff0c\u6d89\u53ca\u9677\u5165\u5185\u6838\u4ee5\u53ca\u4e0a\u4e0b\u6587\u5207\u6362\u3002\u5bf9\u4e8e\u4e00\u4e9b \u9891\u7e41\u8c03\u7528\u7684\u7cfb\u7edf\u8c03\u7528\uff08\u6bd4\u5982\u83b7\u53d6\u5f53\u671f\u7cfb\u7edf\u65f6\u95f4\uff09 \u6765\u8bf4\uff0c\u9700\u8981\u4ee5\u5b89\u5168\u7684\u65b9\u5f0f\u5f00\u653e\u5230\u7528\u6237\u7a7a\u95f4\uff0c\u8ba9\u7528\u6237\u76f4\u63a5\u8bbf\u95ee\u800c\u4e0d\u9700\u8981\u7ecf\u8fc7 syscall , \u4ece\u800c\u6574\u4f53\u63d0\u5347\u6548\u7387. \u7b80\u5355\u6765\u8bf4, \u6bd4\u5982\u5e94\u7528\u7a0b\u5e8f\u9700\u8981 gettimeofday , \u65e0\u9700\u6bcf\u6b21\u90fd\u7ecf\u8fc7 syscall \u8fd9\u4e2a\u865a\u62df\u5e93 linux-vdso.so.1 \u63d0\u4f9b\u4e86\u5fc5\u8981\u7684\u80fd\u529b\uff0c\u5141\u8bb8\u7528\u6237\u7a0b\u5e8f\u901a\u8fc7\u7279\u6b8a\u5904\u7406\u5668\u4e0a\u53ef\u7528\u7684\u66f4\u5feb\u65b9\u6cd5\u6765\u8bbf\u95ee\u5185\u6838\u7a7a\u95f4\u7684\u51fd\u6570.","title":"vDSO \u6709\u5565\u597d? \u89e3\u51b3\u4e86\u4ec0\u4e48\u95ee\u9898?"},{"location":"chapter_9/4_symbol_table/#vdso_3","text":"\u5b9e\u73b0\u539f\u7406","title":"vDSO \u600e\u4e48\u529e"},{"location":"chapter_9/5_golang/","text":"","title":"\u7b2c\u4e94\u7bc7 go\u8bed\u8a00\u603b\u7ed3"},{"location":"chapter_9/6_linux_kernel_patch/","text":"\u6982\u8ff0 \u672c\u7bc7\u603b\u7ed3\u5982\u4f55\u5411 Linux Kernel \u63d0\u4ea4 Patch \u601d\u8def \u5148\u628a\u63d0\u4ea4 patch \u5168\u6d41\u7a0b\u8dd1\u901a \u518d\u771f\u6b63\u627e\u5730\u65b9\u4fee\u6539 \u53c2\u8003 \u5982\u4f55\u5411 Linux Kernel \u63d0\u4ea4 Patch \u8c22\u5b9d\u53cb: \u624b\u628a\u624b\u6559\u4f60\u7ed9 Linux \u5185\u6838\u53d1 patch \u5411 Linux kernel \u793e\u533a\u63d0\u4ea4 patch \u8865\u4e01\u6b65\u9aa4\u603b\u7ed3\uff08\u5df2\u9a8c\u8bc1\u6210\u529f\uff09 \u5982\u4f55\u63d0\u4ea4 Patch \u7ed9\u5185\u6838 ToDo \u7f16\u8bd1 Linux \u5185\u6838 git format-patch \u4f7f\u7528 \u68b3\u7406 Git Patch 1 \u4ec0\u4e48\u662f Patch patch \u6587\u4ef6\u4e2d\u5b58\u50a8\u7684\u662f\u4f60\u5bf9\u4ee3\u7801\u7684\u4fee\u6539 git-format-patch \u5c06\u63d0\u4ea4\u5bfc\u51fa\u4e3a \u8865\u4e01\u6587\u4ef6 \uff0c\u7136\u540e\u53ef\u4ee5\u5c06\u5176\u5e94\u7528\u4e8e\u53e6\u4e00\u4e2a\u5206\u652f\u6216\u514b\u9686\u7684\u5b58\u50a8\u5e93\u3002 2 \u4e3a\u4ec0\u4e48 \uff08Patch \u6709\u5565\u597d?) \u5f53 Git \u53ea\u5728\u672c\u5730\u4f7f\u7528\u800c\u6ca1\u6709\u8fdc\u7a0b\u5b58\u50a8\u5e93\u65f6\uff0c\u901a\u5e38\u662f\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u5c06 \u8865\u4e01\u6587\u4ef6 \u4e92\u76f8\u53d1\u9001\uff08\u6bd4\u5982\u5f00\u6e90\u9879\u76ee Linux Kernel)\u3002\u5982\u679c\u60a8\u53ea\u9700\u8981\u5411\u67d0\u4eba\u63d0\u4ea4\u4e00\u6b21\u63d0\u4ea4\uff0c\u800c\u4e0d\u9700\u8981\u5408\u5e76\u5206\u652f\u548c\u968f\u4e4b\u800c\u6765\u7684\u5f00\u9500\uff0c\u90a3\u4e48\u8fd9\u662f\u975e\u5e38\u65b9\u4fbf\u7684\u3002 2 \u600e\u4e48\u64cd\u4f5c Git format-patch \u7528\u6cd5 \u6574\u4f53\u6d41\u7a0b\u5982\u4e0b: git-format-patch \u751f\u6210 patch \u6587\u4ef6 git-sendmail \u5c06 patch \u6587\u4ef6\u53d1\u9001\u7ed9\u7ef4\u62a4\u8005 \u7ef4\u62a4\u8005\u4f7f\u7528 git apply --check XXXX.patch \u8fdb\u884c\u5fc5\u8981\u68c0\u67e5 \u68c0\u67e5\u901a\u8fc7\u540e\u4f7f\u7528 git am XXXX.patch \u8fdb\u884c\u8865\u4e01\u5e94\u7528 \u7f16\u8bd1 Linux \u5185\u6838 \u5185\u6838\u7f16\u8bd1\u540e\u6587\u4ef6\u4f5c\u7528: initrd.img-6.1.34 vmlinuz-6.1.34 System.map-6.1.34 Linux \u5185\u6838\u6e90\u7801\u89c4\u8303","title":"\u7b2c\u516d\u7bc7 \u624b\u628a\u624b\u6559\u4f60\u5411Linux Kernel\u63d0\u4ea4Patch"},{"location":"chapter_9/6_linux_kernel_patch/#_1","text":"\u672c\u7bc7\u603b\u7ed3\u5982\u4f55\u5411 Linux Kernel \u63d0\u4ea4 Patch","title":"\u6982\u8ff0"},{"location":"chapter_9/6_linux_kernel_patch/#_2","text":"\u5148\u628a\u63d0\u4ea4 patch \u5168\u6d41\u7a0b\u8dd1\u901a \u518d\u771f\u6b63\u627e\u5730\u65b9\u4fee\u6539","title":"\u601d\u8def"},{"location":"chapter_9/6_linux_kernel_patch/#_3","text":"\u5982\u4f55\u5411 Linux Kernel \u63d0\u4ea4 Patch \u8c22\u5b9d\u53cb: \u624b\u628a\u624b\u6559\u4f60\u7ed9 Linux \u5185\u6838\u53d1 patch \u5411 Linux kernel \u793e\u533a\u63d0\u4ea4 patch \u8865\u4e01\u6b65\u9aa4\u603b\u7ed3\uff08\u5df2\u9a8c\u8bc1\u6210\u529f\uff09 \u5982\u4f55\u63d0\u4ea4 Patch \u7ed9\u5185\u6838","title":"\u53c2\u8003"},{"location":"chapter_9/6_linux_kernel_patch/#todo","text":"\u7f16\u8bd1 Linux \u5185\u6838 git format-patch \u4f7f\u7528","title":"ToDo"},{"location":"chapter_9/6_linux_kernel_patch/#git-patch","text":"","title":"\u68b3\u7406 Git Patch"},{"location":"chapter_9/6_linux_kernel_patch/#1-patch","text":"patch \u6587\u4ef6\u4e2d\u5b58\u50a8\u7684\u662f\u4f60\u5bf9\u4ee3\u7801\u7684\u4fee\u6539 git-format-patch \u5c06\u63d0\u4ea4\u5bfc\u51fa\u4e3a \u8865\u4e01\u6587\u4ef6 \uff0c\u7136\u540e\u53ef\u4ee5\u5c06\u5176\u5e94\u7528\u4e8e\u53e6\u4e00\u4e2a\u5206\u652f\u6216\u514b\u9686\u7684\u5b58\u50a8\u5e93\u3002","title":"1 \u4ec0\u4e48\u662f Patch"},{"location":"chapter_9/6_linux_kernel_patch/#2-patch","text":"\u5f53 Git \u53ea\u5728\u672c\u5730\u4f7f\u7528\u800c\u6ca1\u6709\u8fdc\u7a0b\u5b58\u50a8\u5e93\u65f6\uff0c\u901a\u5e38\u662f\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u5c06 \u8865\u4e01\u6587\u4ef6 \u4e92\u76f8\u53d1\u9001\uff08\u6bd4\u5982\u5f00\u6e90\u9879\u76ee Linux Kernel)\u3002\u5982\u679c\u60a8\u53ea\u9700\u8981\u5411\u67d0\u4eba\u63d0\u4ea4\u4e00\u6b21\u63d0\u4ea4\uff0c\u800c\u4e0d\u9700\u8981\u5408\u5e76\u5206\u652f\u548c\u968f\u4e4b\u800c\u6765\u7684\u5f00\u9500\uff0c\u90a3\u4e48\u8fd9\u662f\u975e\u5e38\u65b9\u4fbf\u7684\u3002","title":"2 \u4e3a\u4ec0\u4e48 \uff08Patch \u6709\u5565\u597d?)"},{"location":"chapter_9/6_linux_kernel_patch/#2","text":"Git format-patch \u7528\u6cd5 \u6574\u4f53\u6d41\u7a0b\u5982\u4e0b: git-format-patch \u751f\u6210 patch \u6587\u4ef6 git-sendmail \u5c06 patch \u6587\u4ef6\u53d1\u9001\u7ed9\u7ef4\u62a4\u8005 \u7ef4\u62a4\u8005\u4f7f\u7528 git apply --check XXXX.patch \u8fdb\u884c\u5fc5\u8981\u68c0\u67e5 \u68c0\u67e5\u901a\u8fc7\u540e\u4f7f\u7528 git am XXXX.patch \u8fdb\u884c\u8865\u4e01\u5e94\u7528","title":"2 \u600e\u4e48\u64cd\u4f5c"},{"location":"chapter_9/6_linux_kernel_patch/#linux","text":"\u5185\u6838\u7f16\u8bd1\u540e\u6587\u4ef6\u4f5c\u7528: initrd.img-6.1.34 vmlinuz-6.1.34 System.map-6.1.34","title":"\u7f16\u8bd1 Linux \u5185\u6838"},{"location":"chapter_9/6_linux_kernel_patch/#linux_1","text":"","title":"Linux \u5185\u6838\u6e90\u7801\u89c4\u8303"}]}